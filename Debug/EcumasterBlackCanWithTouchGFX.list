
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025b44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004340  08025d14  08025d14  00035d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003cfc  0802a054  0802a054  0003a054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  0802dd50  0802dd50  0003dd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000238  08061248  08061248  00071248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08061480  08061480  00080100  2**0
                  CONTENTS
  7 .ARM          00000008  08061480  08061480  00071480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08061488  08061488  00080100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08061488  08061488  00071488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0806149c  0806149c  0007149c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000100  20000000  080614a4  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000ca8c  20000100  080615a4  00080100  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000cb8c  080615a4  0008cb8c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080100  2**0
                  CONTENTS, READONLY
 15 .debug_info   0005b234  00000000  00000000  00080130  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000ef69  00000000  00000000  000db364  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00004148  00000000  00000000  000ea2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003b28  00000000  00000000  000ee418  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003af09  00000000  00000000  000f1f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00041786  00000000  00000000  0012ce49  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012f23f  00000000  00000000  0016e5cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0029d80e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00011858  00000000  00000000  0029d908  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000100 	.word	0x20000100
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08025cfc 	.word	0x08025cfc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000104 	.word	0x20000104
 800020c:	08025cfc 	.word	0x08025cfc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000011c 	.word	0x2000011c
 8000b3c:	20000174 	.word	0x20000174

08000b40 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b09a      	sub	sp, #104	; 0x68
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {7000, 1.0f, 1.8f, 2.6f, 3.2f, 4.0f, 4.8f, 5.6f, 6.4f, 7.2f, 8.0f, 1};
 8000b48:	4ba1      	ldr	r3, [pc, #644]	; (8000dd0 <SecondTask+0x290>)
 8000b4a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000b4e:	461d      	mov	r5, r3
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000b60:	4b9c      	ldr	r3, [pc, #624]	; (8000dd4 <SecondTask+0x294>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f00b fea2 	bl	800c8b4 <xQueueGenericSend>
	osDelay(150);
 8000b70:	2096      	movs	r0, #150	; 0x96
 8000b72:	f00b fbb1 	bl	800c2d8 <osDelay>

	static const int demo_mode = 1;
	for(;;)
	{
		if(demo_mode)
 8000b76:	4b98      	ldr	r3, [pc, #608]	; (8000dd8 <SecondTask+0x298>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 80e1 	beq.w	8000d42 <SecondTask+0x202>
		{

			rpm = (rpm >= 10000) ? 0: rpm + 250;
 8000b80:	4b96      	ldr	r3, [pc, #600]	; (8000ddc <SecondTask+0x29c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	dc03      	bgt.n	8000b94 <SecondTask+0x54>
 8000b8c:	4b93      	ldr	r3, [pc, #588]	; (8000ddc <SecondTask+0x29c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	33fa      	adds	r3, #250	; 0xfa
 8000b92:	e000      	b.n	8000b96 <SecondTask+0x56>
 8000b94:	2300      	movs	r3, #0
 8000b96:	4a91      	ldr	r2, [pc, #580]	; (8000ddc <SecondTask+0x29c>)
 8000b98:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b9a:	4b91      	ldr	r3, [pc, #580]	; (8000de0 <SecondTask+0x2a0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2bf9      	cmp	r3, #249	; 0xf9
 8000ba0:	dc03      	bgt.n	8000baa <SecondTask+0x6a>
 8000ba2:	4b8f      	ldr	r3, [pc, #572]	; (8000de0 <SecondTask+0x2a0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3303      	adds	r3, #3
 8000ba8:	e001      	b.n	8000bae <SecondTask+0x6e>
 8000baa:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000bae:	4a8c      	ldr	r2, [pc, #560]	; (8000de0 <SecondTask+0x2a0>)
 8000bb0:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000bb2:	4b8c      	ldr	r3, [pc, #560]	; (8000de4 <SecondTask+0x2a4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bba:	da03      	bge.n	8000bc4 <SecondTask+0x84>
 8000bbc:	4b89      	ldr	r3, [pc, #548]	; (8000de4 <SecondTask+0x2a4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3306      	adds	r3, #6
 8000bc2:	e000      	b.n	8000bc6 <SecondTask+0x86>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	4a87      	ldr	r2, [pc, #540]	; (8000de4 <SecondTask+0x2a4>)
 8000bc8:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000bca:	4b87      	ldr	r3, [pc, #540]	; (8000de8 <SecondTask+0x2a8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fcd2 	bl	8000578 <__aeabi_f2d>
 8000bd4:	a374      	add	r3, pc, #464	; (adr r3, 8000da8 <SecondTask+0x268>)
 8000bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bda:	f7ff fd99 	bl	8000710 <__aeabi_dcmpge>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SecondTask+0xa8>
 8000be4:	4b81      	ldr	r3, [pc, #516]	; (8000dec <SecondTask+0x2ac>)
 8000be6:	e010      	b.n	8000c0a <SecondTask+0xca>
 8000be8:	4b7f      	ldr	r3, [pc, #508]	; (8000de8 <SecondTask+0x2a8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fcc3 	bl	8000578 <__aeabi_f2d>
 8000bf2:	a36f      	add	r3, pc, #444	; (adr r3, 8000db0 <SecondTask+0x270>)
 8000bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf8:	f7ff fb60 	bl	80002bc <__adddf3>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	460c      	mov	r4, r1
 8000c00:	4618      	mov	r0, r3
 8000c02:	4621      	mov	r1, r4
 8000c04:	f7ff fd98 	bl	8000738 <__aeabi_d2f>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4a77      	ldr	r2, [pc, #476]	; (8000de8 <SecondTask+0x2a8>)
 8000c0c:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000c0e:	4b78      	ldr	r3, [pc, #480]	; (8000df0 <SecondTask+0x2b0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fcb0 	bl	8000578 <__aeabi_f2d>
 8000c18:	a363      	add	r3, pc, #396	; (adr r3, 8000da8 <SecondTask+0x268>)
 8000c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1e:	f7ff fd77 	bl	8000710 <__aeabi_dcmpge>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SecondTask+0xec>
 8000c28:	4b72      	ldr	r3, [pc, #456]	; (8000df4 <SecondTask+0x2b4>)
 8000c2a:	e010      	b.n	8000c4e <SecondTask+0x10e>
 8000c2c:	4b70      	ldr	r3, [pc, #448]	; (8000df0 <SecondTask+0x2b0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fca1 	bl	8000578 <__aeabi_f2d>
 8000c36:	a360      	add	r3, pc, #384	; (adr r3, 8000db8 <SecondTask+0x278>)
 8000c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3c:	f7ff fb3e 	bl	80002bc <__adddf3>
 8000c40:	4603      	mov	r3, r0
 8000c42:	460c      	mov	r4, r1
 8000c44:	4618      	mov	r0, r3
 8000c46:	4621      	mov	r1, r4
 8000c48:	f7ff fd76 	bl	8000738 <__aeabi_d2f>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4a68      	ldr	r2, [pc, #416]	; (8000df0 <SecondTask+0x2b0>)
 8000c50:	6013      	str	r3, [r2, #0]
			vehicle_spd = (vehicle_spd >= 400) ? 0: vehicle_spd + 6;
 8000c52:	4b69      	ldr	r3, [pc, #420]	; (8000df8 <SecondTask+0x2b8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c5a:	da03      	bge.n	8000c64 <SecondTask+0x124>
 8000c5c:	4b66      	ldr	r3, [pc, #408]	; (8000df8 <SecondTask+0x2b8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3306      	adds	r3, #6
 8000c62:	e000      	b.n	8000c66 <SecondTask+0x126>
 8000c64:	2300      	movs	r3, #0
 8000c66:	4a64      	ldr	r2, [pc, #400]	; (8000df8 <SecondTask+0x2b8>)
 8000c68:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000c6a:	4b64      	ldr	r3, [pc, #400]	; (8000dfc <SecondTask+0x2bc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b9f      	cmp	r3, #159	; 0x9f
 8000c70:	dc03      	bgt.n	8000c7a <SecondTask+0x13a>
 8000c72:	4b62      	ldr	r3, [pc, #392]	; (8000dfc <SecondTask+0x2bc>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	3302      	adds	r3, #2
 8000c78:	e000      	b.n	8000c7c <SecondTask+0x13c>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	4a5f      	ldr	r2, [pc, #380]	; (8000dfc <SecondTask+0x2bc>)
 8000c7e:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c80:	4b5f      	ldr	r3, [pc, #380]	; (8000e00 <SecondTask+0x2c0>)
 8000c82:	edd3 7a00 	vldr	s15, [r3]
 8000c86:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	db01      	blt.n	8000c98 <SecondTask+0x158>
 8000c94:	4b5b      	ldr	r3, [pc, #364]	; (8000e04 <SecondTask+0x2c4>)
 8000c96:	e010      	b.n	8000cba <SecondTask+0x17a>
 8000c98:	4b59      	ldr	r3, [pc, #356]	; (8000e00 <SecondTask+0x2c0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fc6b 	bl	8000578 <__aeabi_f2d>
 8000ca2:	a347      	add	r3, pc, #284	; (adr r3, 8000dc0 <SecondTask+0x280>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	f7ff fb08 	bl	80002bc <__adddf3>
 8000cac:	4603      	mov	r3, r0
 8000cae:	460c      	mov	r4, r1
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	4621      	mov	r1, r4
 8000cb4:	f7ff fd40 	bl	8000738 <__aeabi_d2f>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4a51      	ldr	r2, [pc, #324]	; (8000e00 <SecondTask+0x2c0>)
 8000cbc:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000cbe:	4b52      	ldr	r3, [pc, #328]	; (8000e08 <SecondTask+0x2c8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b63      	cmp	r3, #99	; 0x63
 8000cc4:	dc03      	bgt.n	8000cce <SecondTask+0x18e>
 8000cc6:	4b50      	ldr	r3, [pc, #320]	; (8000e08 <SecondTask+0x2c8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	e000      	b.n	8000cd0 <SecondTask+0x190>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4a4d      	ldr	r2, [pc, #308]	; (8000e08 <SecondTask+0x2c8>)
 8000cd2:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000cd4:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <SecondTask+0x2cc>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cdc:	da03      	bge.n	8000ce6 <SecondTask+0x1a6>
 8000cde:	4b4b      	ldr	r3, [pc, #300]	; (8000e0c <SecondTask+0x2cc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	330c      	adds	r3, #12
 8000ce4:	e001      	b.n	8000cea <SecondTask+0x1aa>
 8000ce6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cea:	4a48      	ldr	r2, [pc, #288]	; (8000e0c <SecondTask+0x2cc>)
 8000cec:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000cee:	4b48      	ldr	r3, [pc, #288]	; (8000e10 <SecondTask+0x2d0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b63      	cmp	r3, #99	; 0x63
 8000cf4:	dc03      	bgt.n	8000cfe <SecondTask+0x1be>
 8000cf6:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <SecondTask+0x2d0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	e000      	b.n	8000d00 <SecondTask+0x1c0>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4a43      	ldr	r2, [pc, #268]	; (8000e10 <SecondTask+0x2d0>)
 8000d02:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000d04:	4b43      	ldr	r3, [pc, #268]	; (8000e14 <SecondTask+0x2d4>)
 8000d06:	edd3 7a00 	vldr	s15, [r3]
 8000d0a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d16:	db01      	blt.n	8000d1c <SecondTask+0x1dc>
 8000d18:	4b3f      	ldr	r3, [pc, #252]	; (8000e18 <SecondTask+0x2d8>)
 8000d1a:	e010      	b.n	8000d3e <SecondTask+0x1fe>
 8000d1c:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <SecondTask+0x2d4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc29 	bl	8000578 <__aeabi_f2d>
 8000d26:	a328      	add	r3, pc, #160	; (adr r3, 8000dc8 <SecondTask+0x288>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	f7ff fac6 	bl	80002bc <__adddf3>
 8000d30:	4603      	mov	r3, r0
 8000d32:	460c      	mov	r4, r1
 8000d34:	4618      	mov	r0, r3
 8000d36:	4621      	mov	r1, r4
 8000d38:	f7ff fcfe 	bl	8000738 <__aeabi_d2f>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a35      	ldr	r2, [pc, #212]	; (8000e14 <SecondTask+0x2d4>)
 8000d40:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, vehicle_spd, oil_tmp, oil_press, iat, egt, tps, batt_v};
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <SecondTask+0x29c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <SecondTask+0x2a0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <SecondTask+0x2a4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <SecondTask+0x2a8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <SecondTask+0x2b0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	61bb      	str	r3, [r7, #24]
 8000d60:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <SecondTask+0x2b8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <SecondTask+0x2bc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	623b      	str	r3, [r7, #32]
 8000d6c:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <SecondTask+0x2c0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <SecondTask+0x2c8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <SecondTask+0x2cc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <SecondTask+0x2d0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <SecondTask+0x2d4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
	    xQueueSend(messageQ, &dispVals,0);
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <SecondTask+0x2dc>)
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	f107 0108 	add.w	r1, r7, #8
 8000d92:	2300      	movs	r3, #0
 8000d94:	2200      	movs	r2, #0
 8000d96:	f00b fd8d 	bl	800c8b4 <xQueueGenericSend>
		osDelay(150);
 8000d9a:	2096      	movs	r0, #150	; 0x96
 8000d9c:	f00b fa9c 	bl	800c2d8 <osDelay>
	{
 8000da0:	e6e9      	b.n	8000b76 <SecondTask+0x36>
 8000da2:	bf00      	nop
 8000da4:	f3af 8000 	nop.w
 8000da8:	66666666 	.word	0x66666666
 8000dac:	3ff66666 	.word	0x3ff66666
 8000db0:	9999999a 	.word	0x9999999a
 8000db4:	3fa99999 	.word	0x3fa99999
 8000db8:	eb851eb8 	.word	0xeb851eb8
 8000dbc:	3faeb851 	.word	0x3faeb851
 8000dc0:	9999999a 	.word	0x9999999a
 8000dc4:	3fb99999 	.word	0x3fb99999
 8000dc8:	33333333 	.word	0x33333333
 8000dcc:	3fe33333 	.word	0x3fe33333
 8000dd0:	08025d14 	.word	0x08025d14
 8000dd4:	20008698 	.word	0x20008698
 8000dd8:	0802648c 	.word	0x0802648c
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000010 	.word	0x20000010
 8000dec:	3f19999a 	.word	0x3f19999a
 8000df0:	20000014 	.word	0x20000014
 8000df4:	3f266666 	.word	0x3f266666
 8000df8:	20000384 	.word	0x20000384
 8000dfc:	20000388 	.word	0x20000388
 8000e00:	2000038c 	.word	0x2000038c
 8000e04:	3dcccccd 	.word	0x3dcccccd
 8000e08:	20000390 	.word	0x20000390
 8000e0c:	20000394 	.word	0x20000394
 8000e10:	20000398 	.word	0x20000398
 8000e14:	2000039c 	.word	0x2000039c
 8000e18:	41200000 	.word	0x41200000
 8000e1c:	20008694 	.word	0x20008694

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b5b0      	push	{r4, r5, r7, lr}
 8000e22:	b08e      	sub	sp, #56	; 0x38
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f002 fcf2 	bl	800380e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f85f 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f001 f9c5 	bl	80021bc <MX_GPIO_Init>
  MX_ADC3_Init();
 8000e32:	f000 f917 	bl	8001064 <MX_ADC3_Init>
  MX_CRC_Init();
 8000e36:	f000 fafd 	bl	8001434 <MX_CRC_Init>
  MX_DCMI_Init();
 8000e3a:	f000 fb1d 	bl	8001478 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000e3e:	f000 fb4f 	bl	80014e0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e42:	f001 f90f 	bl	8002064 <MX_FMC_Init>
  MX_LTDC_Init();
 8000e46:	f000 fb7d 	bl	8001544 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000e4a:	f000 fbfd 	bl	8001648 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000e4e:	f000 fc27 	bl	80016a0 <MX_RTC_Init>
  MX_SAI2_Init();
 8000e52:	f000 fccd 	bl	80017f0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000e56:	f000 fd73 	bl	8001940 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000e5a:	f000 fd91 	bl	8001980 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000e5e:	f000 fdbf 	bl	80019e0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000e62:	f000 fdfb 	bl	8001a5c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e66:	f000 fea5 	bl	8001bb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e6a:	f000 ff19 	bl	8001ca0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000e6e:	f000 ff8d 	bl	8001d8c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000e72:	f001 f801 	bl	8001e78 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000e76:	f001 f851 	bl	8001f1c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000e7a:	f001 f893 	bl	8001fa4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000e7e:	f001 f8c1 	bl	8002004 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000e82:	f00a fee5 	bl	800bc50 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000e86:	f000 f93f 	bl	8001108 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000e8a:	f00d ff53 	bl	800ed34 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <main+0xbc>)
 8000e90:	f107 041c 	add.w	r4, r7, #28
 8000e94:	461d      	mov	r5, r3
 8000e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00b f9c9 	bl	800c240 <osThreadCreate>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <main+0xc0>)
 8000eb2:	601a      	str	r2, [r3, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <main+0xc4>)
 8000eb6:	463c      	mov	r4, r7
 8000eb8:	461d      	mov	r5, r3
 8000eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ec2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f00b f9b8 	bl	800c240 <osThreadCreate>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <main+0xc8>)
 8000ed4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ed6:	f00b f990 	bl	800c1fa <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <main+0xba>
 8000edc:	08025d50 	.word	0x08025d50
 8000ee0:	2000c00c 	.word	0x2000c00c
 8000ee4:	08025d74 	.word	0x08025d74
 8000ee8:	2000c008 	.word	0x2000c008

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0b4      	sub	sp, #208	; 0xd0
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ef6:	2230      	movs	r2, #48	; 0x30
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f023 ff81 	bl	8024e02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	2284      	movs	r2, #132	; 0x84
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f023 ff72 	bl	8024e02 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f1e:	f005 f94b 	bl	80061b8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b4d      	ldr	r3, [pc, #308]	; (8001058 <SystemClock_Config+0x16c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a4c      	ldr	r2, [pc, #304]	; (8001058 <SystemClock_Config+0x16c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b4a      	ldr	r3, [pc, #296]	; (8001058 <SystemClock_Config+0x16c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3a:	4b48      	ldr	r3, [pc, #288]	; (800105c <SystemClock_Config+0x170>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a47      	ldr	r2, [pc, #284]	; (800105c <SystemClock_Config+0x170>)
 8000f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	4b45      	ldr	r3, [pc, #276]	; (800105c <SystemClock_Config+0x170>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f52:	2309      	movs	r3, #9
 8000f54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f66:	2302      	movs	r3, #2
 8000f68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f74:	2319      	movs	r3, #25
 8000f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000f7a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f88:	2309      	movs	r3, #9
 8000f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f005 fa32 	bl	80063fc <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f9e:	f001 fb41 	bl	8002624 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fa2:	f005 f919 	bl	80061d8 <HAL_PWREx_EnableOverDrive>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fac:	f001 fb3a 	bl	8002624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000fd2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fd6:	2106      	movs	r1, #6
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f005 fcb3 	bl	8006944 <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000fe4:	f001 fb1e 	bl	8002624 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <SystemClock_Config+0x174>)
 8000fea:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000ffc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001000:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001002:	2305      	movs	r3, #5
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001006:	2302      	movs	r3, #2
 8001008:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800100a:	2303      	movs	r3, #3
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001012:	2301      	movs	r3, #1
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800101c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001022:	2300      	movs	r3, #0
 8001024:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001026:	2300      	movs	r3, #0
 8001028:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800102a:	2300      	movs	r3, #0
 800102c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800102e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001032:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	4618      	mov	r0, r3
 8001042:	f005 fe83 	bl	8006d4c <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x164>
  {
    Error_Handler();
 800104c:	f001 faea 	bl	8002624 <Error_Handler>
  }
}
 8001050:	bf00      	nop
 8001052:	37d0      	adds	r7, #208	; 0xd0
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40023800 	.word	0x40023800
 800105c:	40007000 	.word	0x40007000
 8001060:	01b00868 	.word	0x01b00868

08001064 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	463b      	mov	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_ADC3_Init+0x98>)
 8001078:	4a21      	ldr	r2, [pc, #132]	; (8001100 <MX_ADC3_Init+0x9c>)
 800107a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_ADC3_Init+0x98>)
 800107e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001082:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_ADC3_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_ADC3_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_ADC3_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_ADC3_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_ADC3_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_ADC3_Init+0x98>)
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <MX_ADC3_Init+0xa0>)
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_ADC3_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_ADC3_Init+0x98>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_ADC3_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_ADC3_Init+0x98>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <MX_ADC3_Init+0x98>)
 80010c6:	f002 fbf1 	bl	80038ac <HAL_ADC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80010d0:	f001 faa8 	bl	8002624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010d4:	2304      	movs	r3, #4
 80010d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d8:	2301      	movs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_ADC3_Init+0x98>)
 80010e6:	f002 fc25 	bl	8003934 <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80010f0:	f001 fa98 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2000c354 	.word	0x2000c354
 8001100:	40012200 	.word	0x40012200
 8001104:	0f000001 	.word	0x0f000001

08001108 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800110e:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <MX_CAN1_Init+0xc8>)
 8001110:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <MX_CAN1_Init+0xcc>)
 8001112:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <MX_CAN1_Init+0xc8>)
 8001116:	2214      	movs	r2, #20
 8001118:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <MX_CAN1_Init+0xc8>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <MX_CAN1_Init+0xc8>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <MX_CAN1_Init+0xc8>)
 8001128:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800112c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <MX_CAN1_Init+0xc8>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <MX_CAN1_Init+0xc8>)
 8001136:	2200      	movs	r2, #0
 8001138:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_CAN1_Init+0xc8>)
 800113c:	2200      	movs	r2, #0
 800113e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_CAN1_Init+0xc8>)
 8001142:	2200      	movs	r2, #0
 8001144:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_CAN1_Init+0xc8>)
 8001148:	2200      	movs	r2, #0
 800114a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_CAN1_Init+0xc8>)
 800114e:	2200      	movs	r2, #0
 8001150:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_CAN1_Init+0xc8>)
 8001154:	2200      	movs	r2, #0
 8001156:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001158:	481d      	ldr	r0, [pc, #116]	; (80011d0 <MX_CAN1_Init+0xc8>)
 800115a:	f002 fe2f 	bl	8003dbc <HAL_CAN_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001164:	f001 fa5e 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001170:	2301      	movs	r3, #1
 8001172:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800118c:	230e      	movs	r3, #14
 800118e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	4619      	mov	r1, r3
 8001194:	480e      	ldr	r0, [pc, #56]	; (80011d0 <MX_CAN1_Init+0xc8>)
 8001196:	f002 ff0d 	bl	8003fb4 <HAL_CAN_ConfigFilter>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80011a0:	f001 fa40 	bl	8002624 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80011a4:	480a      	ldr	r0, [pc, #40]	; (80011d0 <MX_CAN1_Init+0xc8>)
 80011a6:	f002 ffe5 	bl	8004174 <HAL_CAN_Start>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 80011b0:	f001 fa38 	bl	8002624 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80011b4:	2102      	movs	r1, #2
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_CAN1_Init+0xc8>)
 80011b8:	f003 f932 	bl	8004420 <HAL_CAN_ActivateNotification>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 80011c2:	f001 fa2f 	bl	8002624 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000c5d4 	.word	0x2000c5d4
 80011d4:	40006400 	.word	0x40006400

080011d8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80011e0:	4b82      	ldr	r3, [pc, #520]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80011e2:	4a83      	ldr	r2, [pc, #524]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80011e4:	2100      	movs	r1, #0
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f003 f808 	bl	80041fc <HAL_CAN_GetRxMessage>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 80011f2:	f001 fa17 	bl	8002624 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80011f6:	4b7e      	ldr	r3, [pc, #504]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80011fe:	d145      	bne.n	800128c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001200:	4b7b      	ldr	r3, [pc, #492]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d141      	bne.n	800128c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001208:	4b79      	ldr	r3, [pc, #484]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	2b08      	cmp	r3, #8
 800120e:	d13d      	bne.n	800128c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b75      	ldr	r3, [pc, #468]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001218:	785b      	ldrb	r3, [r3, #1]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21b      	sxth	r3, r3
 8001222:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t tps_in = RxData[2];
 8001224:	4b71      	ldr	r3, [pc, #452]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t iat_in = RxData[3];
 800122c:	4b6f      	ldr	r3, [pc, #444]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800122e:	78db      	ldrb	r3, [r3, #3]
 8001230:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 uint16_t map_in = (RxData[4] << 0) | (RxData[7] << 8);
 8001234:	4b6d      	ldr	r3, [pc, #436]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b6c      	ldr	r3, [pc, #432]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800123c:	79db      	ldrb	r3, [r3, #7]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21b      	sxth	r3, r3
 8001246:	847b      	strh	r3, [r7, #34]	; 0x22

	 rpm = (int)rpm_in;
 8001248:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800124a:	4a6a      	ldr	r2, [pc, #424]	; (80013f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800124c:	6013      	str	r3, [r2, #0]
	 map = ((int)map_in*1.0f);
 800124e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125c:	ee17 2a90 	vmov	r2, s15
 8001260:	4b65      	ldr	r3, [pc, #404]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001262:	601a      	str	r2, [r3, #0]
	 iat = (int)iat_in;
 8001264:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001268:	4a64      	ldr	r2, [pc, #400]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800126a:	6013      	str	r3, [r2, #0]
	 tps = (int)(((float)tps_in)*0.5f);
 800126c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001278:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800127c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001284:	ee17 2a90 	vmov	r2, s15
 8001288:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800128a:	601a      	str	r2, [r3, #0]
	 (void)map;
	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800128c:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f240 6202 	movw	r2, #1538	; 0x602
 8001294:	4293      	cmp	r3, r2
 8001296:	d139      	bne.n	800130c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
 8001298:	4b55      	ldr	r3, [pc, #340]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d135      	bne.n	800130c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
 80012a0:	4b53      	ldr	r3, [pc, #332]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d131      	bne.n	800130c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
  {

	 uint16_t vehicle_spd_in = (RxData[1] << 0) | (RxData[2] << 8);
 80012a8:	4b50      	ldr	r3, [pc, #320]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012aa:	785b      	ldrb	r3, [r3, #1]
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	4b4f      	ldr	r3, [pc, #316]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012b0:	789b      	ldrb	r3, [r3, #2]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	843b      	strh	r3, [r7, #32]
	 uint8_t oil_tmp_in = RxData[3];
 80012bc:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012be:	78db      	ldrb	r3, [r3, #3]
 80012c0:	77fb      	strb	r3, [r7, #31]
	 uint8_t oil_press_in = RxData[4];
 80012c2:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012c4:	791b      	ldrb	r3, [r3, #4]
 80012c6:	77bb      	strb	r3, [r7, #30]
	 uint8_t fuel_press_in = RxData[5];
 80012c8:	4b48      	ldr	r3, [pc, #288]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012ca:	795b      	ldrb	r3, [r3, #5]
 80012cc:	777b      	strb	r3, [r7, #29]
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012d0:	799b      	ldrb	r3, [r3, #6]
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	4b45      	ldr	r3, [pc, #276]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012d6:	79db      	ldrb	r3, [r3, #7]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b21b      	sxth	r3, r3
 80012e0:	837b      	strh	r3, [r7, #26]

	 vehicle_spd = ((int)vehicle_spd_in)*1;
 80012e2:	8c3b      	ldrh	r3, [r7, #32]
 80012e4:	4a47      	ldr	r2, [pc, #284]	; (8001404 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80012e6:	6013      	str	r3, [r2, #0]
	 oil_tmp = ((int)oil_tmp_in) * 1;
 80012e8:	7ffb      	ldrb	r3, [r7, #31]
 80012ea:	4a47      	ldr	r2, [pc, #284]	; (8001408 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80012ec:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 80012ee:	7fbb      	ldrb	r3, [r7, #30]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
 80012fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001300:	4b43      	ldr	r3, [pc, #268]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001302:	edc3 7a00 	vstr	s15, [r3]
	 clt = ((int)clt_in) * 1;
 8001306:	8b7b      	ldrh	r3, [r7, #26]
 8001308:	4a42      	ldr	r2, [pc, #264]	; (8001414 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 800130a:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800130c:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f240 6203 	movw	r2, #1539	; 0x603
 8001314:	4293      	cmp	r3, r2
 8001316:	d123      	bne.n	8001360 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>
 8001318:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d11f      	bne.n	8001360 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>
 8001320:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b08      	cmp	r3, #8
 8001326:	d11b      	bne.n	8001360 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>
  {
	 uint8_t lambda_in = RxData[2];
 8001328:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800132a:	789b      	ldrb	r3, [r3, #2]
 800132c:	767b      	strb	r3, [r7, #25]
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001330:	791b      	ldrb	r3, [r3, #4]
 8001332:	b21a      	sxth	r2, r3
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001336:	795b      	ldrb	r3, [r3, #5]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	82fb      	strh	r3, [r7, #22]
	 lambda = ((float)lambda_in)*0.0078125f;
 8001342:	7e7b      	ldrb	r3, [r7, #25]
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800134c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001418 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>
 8001350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001356:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 800135a:	8afb      	ldrh	r3, [r7, #22]
 800135c:	4a30      	ldr	r2, [pc, #192]	; (8001420 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800135e:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f240 6204 	movw	r2, #1540	; 0x604
 8001368:	4293      	cmp	r3, r2
 800136a:	d11f      	bne.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 800136c:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d11b      	bne.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	2b08      	cmp	r3, #8
 800137a:	d117      	bne.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800137e:	789b      	ldrb	r3, [r3, #2]
 8001380:	b21a      	sxth	r2, r3
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001384:	78db      	ldrb	r3, [r3, #3]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21b      	sxth	r3, r3
 800138e:	82bb      	strh	r3, [r7, #20]
	 float battery_voltage = ((float)batt_in)*0.027f;
 8001390:	8abb      	ldrh	r3, [r7, #20]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001424 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 800139e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a2:	edc7 7a04 	vstr	s15, [r7, #16]
	 batt_v = battery_voltage;
 80013a6:	4a20      	ldr	r2, [pc, #128]	; (8001428 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80013b4:	d116      	bne.n	80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d112      	bne.n	80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d10e      	bne.n	80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>
    {
  	 uint16_t lambda_targ_in = RxData[7];
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80013c8:	79db      	ldrb	r3, [r3, #7]
 80013ca:	81fb      	strh	r3, [r7, #14]
  	 lambda_targ = lambda_targ_in / 100.0f;
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	ee07 3a90 	vmov	s15, r3
 80013d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d6:	eddf 6a15 	vldr	s13, [pc, #84]	; 800142c <HAL_CAN_RxFifo0MsgPendingCallback+0x254>
 80013da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 80013e0:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	; 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000c58c 	.word	0x2000c58c
 80013f0:	2000c670 	.word	0x2000c670
 80013f4:	20000004 	.word	0x20000004
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20000390 	.word	0x20000390
 8001400:	20000398 	.word	0x20000398
 8001404:	20000384 	.word	0x20000384
 8001408:	20000388 	.word	0x20000388
 800140c:	3d800000 	.word	0x3d800000
 8001410:	2000038c 	.word	0x2000038c
 8001414:	2000000c 	.word	0x2000000c
 8001418:	3c000000 	.word	0x3c000000
 800141c:	20000010 	.word	0x20000010
 8001420:	20000394 	.word	0x20000394
 8001424:	3cdd2f1b 	.word	0x3cdd2f1b
 8001428:	2000039c 	.word	0x2000039c
 800142c:	42c80000 	.word	0x42c80000
 8001430:	20000014 	.word	0x20000014

08001434 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <MX_CRC_Init+0x3c>)
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <MX_CRC_Init+0x40>)
 800143c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_CRC_Init+0x3c>)
 8001440:	2200      	movs	r2, #0
 8001442:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <MX_CRC_Init+0x3c>)
 8001446:	2200      	movs	r2, #0
 8001448:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_CRC_Init+0x3c>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <MX_CRC_Init+0x3c>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_CRC_Init+0x3c>)
 8001458:	2201      	movs	r2, #1
 800145a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_CRC_Init+0x3c>)
 800145e:	f003 fb41 	bl	8004ae4 <HAL_CRC_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001468:	f001 f8dc 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000c184 	.word	0x2000c184
 8001474:	40023000 	.word	0x40023000

08001478 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_DCMI_Init+0x60>)
 800147e:	4a17      	ldr	r2, [pc, #92]	; (80014dc <MX_DCMI_Init+0x64>)
 8001480:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_DCMI_Init+0x60>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <MX_DCMI_Init+0x60>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_DCMI_Init+0x60>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_DCMI_Init+0x60>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_DCMI_Init+0x60>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <MX_DCMI_Init+0x60>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_DCMI_Init+0x60>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_DCMI_Init+0x60>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_DCMI_Init+0x60>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <MX_DCMI_Init+0x60>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_DCMI_Init+0x60>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_DCMI_Init+0x60>)
 80014c6:	f003 fbf7 	bl	8004cb8 <HAL_DCMI_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80014d0:	f001 f8a8 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000c39c 	.word	0x2000c39c
 80014dc:	50050000 	.word	0x50050000

080014e0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_DMA2D_Init+0x5c>)
 80014e6:	4a16      	ldr	r2, [pc, #88]	; (8001540 <MX_DMA2D_Init+0x60>)
 80014e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_DMA2D_Init+0x5c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_DMA2D_Init+0x5c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_DMA2D_Init+0x5c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_DMA2D_Init+0x5c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_DMA2D_Init+0x5c>)
 8001504:	2200      	movs	r2, #0
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_DMA2D_Init+0x5c>)
 800150a:	2200      	movs	r2, #0
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_DMA2D_Init+0x5c>)
 8001510:	2200      	movs	r2, #0
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <MX_DMA2D_Init+0x5c>)
 8001516:	f003 fce3 	bl	8004ee0 <HAL_DMA2D_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001520:	f001 f880 	bl	8002624 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001524:	2101      	movs	r1, #1
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_DMA2D_Init+0x5c>)
 8001528:	f003 ffa4 	bl	8005474 <HAL_DMA2D_ConfigLayer>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001532:	f001 f877 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000c54c 	.word	0x2000c54c
 8001540:	4002b000 	.word	0x4002b000

08001544 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	; 0x38
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2234      	movs	r2, #52	; 0x34
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f023 fc56 	bl	8024e02 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <MX_LTDC_Init+0xfc>)
 8001558:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <MX_LTDC_Init+0x100>)
 800155a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800155c:	4b38      	ldr	r3, [pc, #224]	; (8001640 <MX_LTDC_Init+0xfc>)
 800155e:	2200      	movs	r2, #0
 8001560:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001562:	4b37      	ldr	r3, [pc, #220]	; (8001640 <MX_LTDC_Init+0xfc>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001568:	4b35      	ldr	r3, [pc, #212]	; (8001640 <MX_LTDC_Init+0xfc>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <MX_LTDC_Init+0xfc>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001574:	4b32      	ldr	r3, [pc, #200]	; (8001640 <MX_LTDC_Init+0xfc>)
 8001576:	2228      	movs	r2, #40	; 0x28
 8001578:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <MX_LTDC_Init+0xfc>)
 800157c:	2209      	movs	r2, #9
 800157e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <MX_LTDC_Init+0xfc>)
 8001582:	2235      	movs	r2, #53	; 0x35
 8001584:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001586:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <MX_LTDC_Init+0xfc>)
 8001588:	220b      	movs	r2, #11
 800158a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800158c:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <MX_LTDC_Init+0xfc>)
 800158e:	f240 2215 	movw	r2, #533	; 0x215
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001594:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <MX_LTDC_Init+0xfc>)
 8001596:	f240 121b 	movw	r2, #283	; 0x11b
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800159c:	4b28      	ldr	r3, [pc, #160]	; (8001640 <MX_LTDC_Init+0xfc>)
 800159e:	f240 2235 	movw	r2, #565	; 0x235
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <MX_LTDC_Init+0xfc>)
 80015a6:	f240 121d 	movw	r2, #285	; 0x11d
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <MX_LTDC_Init+0xfc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <MX_LTDC_Init+0xfc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <MX_LTDC_Init+0xfc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015c4:	481e      	ldr	r0, [pc, #120]	; (8001640 <MX_LTDC_Init+0xfc>)
 80015c6:	f004 fa5f 	bl	8005a88 <HAL_LTDC_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80015d0:	f001 f828 	bl	8002624 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80015d8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015dc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80015e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80015e6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80015e8:	2301      	movs	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80015ec:	23ff      	movs	r3, #255	; 0xff
 80015ee:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015fa:	2305      	movs	r3, #5
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80015fe:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001604:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800160a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_LTDC_Init+0xfc>)
 800162a:	f004 fbb5 	bl	8005d98 <HAL_LTDC_ConfigLayer>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001634:	f000 fff6 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	3738      	adds	r7, #56	; 0x38
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2000c2ac 	.word	0x2000c2ac
 8001644:	40016800 	.word	0x40016800

08001648 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_QUADSPI_Init+0x50>)
 800164e:	4a13      	ldr	r2, [pc, #76]	; (800169c <MX_QUADSPI_Init+0x54>)
 8001650:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_QUADSPI_Init+0x50>)
 8001654:	22ff      	movs	r2, #255	; 0xff
 8001656:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MX_QUADSPI_Init+0x50>)
 800165a:	2201      	movs	r2, #1
 800165c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_QUADSPI_Init+0x50>)
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_QUADSPI_Init+0x50>)
 8001666:	2201      	movs	r2, #1
 8001668:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_QUADSPI_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_QUADSPI_Init+0x50>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_QUADSPI_Init+0x50>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_QUADSPI_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_QUADSPI_Init+0x50>)
 8001684:	f004 fdf8 	bl	8006278 <HAL_QSPI_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800168e:	f000 ffc9 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000c68c 	.word	0x2000c68c
 800169c:	a0001000 	.word	0xa0001000

080016a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b092      	sub	sp, #72	; 0x48
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80016bc:	463b      	mov	r3, r7
 80016be:	222c      	movs	r2, #44	; 0x2c
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f023 fb9d 	bl	8024e02 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80016c8:	4b47      	ldr	r3, [pc, #284]	; (80017e8 <MX_RTC_Init+0x148>)
 80016ca:	4a48      	ldr	r2, [pc, #288]	; (80017ec <MX_RTC_Init+0x14c>)
 80016cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ce:	4b46      	ldr	r3, [pc, #280]	; (80017e8 <MX_RTC_Init+0x148>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016d4:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <MX_RTC_Init+0x148>)
 80016d6:	227f      	movs	r2, #127	; 0x7f
 80016d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016da:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <MX_RTC_Init+0x148>)
 80016dc:	22ff      	movs	r2, #255	; 0xff
 80016de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <MX_RTC_Init+0x148>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016e6:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <MX_RTC_Init+0x148>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016ec:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <MX_RTC_Init+0x148>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016f2:	483d      	ldr	r0, [pc, #244]	; (80017e8 <MX_RTC_Init+0x148>)
 80016f4:	f006 f84c 	bl	8007790 <HAL_RTC_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80016fe:	f000 ff91 	bl	8002624 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001702:	2300      	movs	r3, #0
 8001704:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001708:	2300      	movs	r3, #0
 800170a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800170e:	2300      	movs	r3, #0
 8001710:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001714:	2300      	movs	r3, #0
 8001716:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800171c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001720:	2201      	movs	r2, #1
 8001722:	4619      	mov	r1, r3
 8001724:	4830      	ldr	r0, [pc, #192]	; (80017e8 <MX_RTC_Init+0x148>)
 8001726:	f006 f8af 	bl	8007888 <HAL_RTC_SetTime>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001730:	f000 ff78 	bl	8002624 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001734:	2301      	movs	r3, #1
 8001736:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800173a:	2301      	movs	r3, #1
 800173c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001740:	2301      	movs	r3, #1
 8001742:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001746:	2300      	movs	r3, #0
 8001748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800174c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001750:	2201      	movs	r2, #1
 8001752:	4619      	mov	r1, r3
 8001754:	4824      	ldr	r0, [pc, #144]	; (80017e8 <MX_RTC_Init+0x148>)
 8001756:	f006 f955 	bl	8007a04 <HAL_RTC_SetDate>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001760:	f000 ff60 	bl	8002624 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001764:	2300      	movs	r3, #0
 8001766:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001768:	2300      	movs	r3, #0
 800176a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800176c:	2300      	movs	r3, #0
 800176e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800178e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001794:	463b      	mov	r3, r7
 8001796:	2201      	movs	r2, #1
 8001798:	4619      	mov	r1, r3
 800179a:	4813      	ldr	r0, [pc, #76]	; (80017e8 <MX_RTC_Init+0x148>)
 800179c:	f006 f9da 	bl	8007b54 <HAL_RTC_SetAlarm>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80017a6:	f000 ff3d 	bl	8002624 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 80017b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80017b6:	463b      	mov	r3, r7
 80017b8:	2201      	movs	r2, #1
 80017ba:	4619      	mov	r1, r3
 80017bc:	480a      	ldr	r0, [pc, #40]	; (80017e8 <MX_RTC_Init+0x148>)
 80017be:	f006 f9c9 	bl	8007b54 <HAL_RTC_SetAlarm>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 80017c8:	f000 ff2c 	bl	8002624 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80017cc:	2202      	movs	r2, #2
 80017ce:	2100      	movs	r1, #0
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_RTC_Init+0x148>)
 80017d2:	f006 fb49 	bl	8007e68 <HAL_RTCEx_SetTimeStamp>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 80017dc:	f000 ff22 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3748      	adds	r7, #72	; 0x48
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000c46c 	.word	0x2000c46c
 80017ec:	40002800 	.word	0x40002800

080017f0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80017f4:	4b4d      	ldr	r3, [pc, #308]	; (800192c <MX_SAI2_Init+0x13c>)
 80017f6:	4a4e      	ldr	r2, [pc, #312]	; (8001930 <MX_SAI2_Init+0x140>)
 80017f8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80017fa:	4b4c      	ldr	r3, [pc, #304]	; (800192c <MX_SAI2_Init+0x13c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001800:	4b4a      	ldr	r3, [pc, #296]	; (800192c <MX_SAI2_Init+0x13c>)
 8001802:	2200      	movs	r2, #0
 8001804:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001806:	4b49      	ldr	r3, [pc, #292]	; (800192c <MX_SAI2_Init+0x13c>)
 8001808:	2240      	movs	r2, #64	; 0x40
 800180a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800180c:	4b47      	ldr	r3, [pc, #284]	; (800192c <MX_SAI2_Init+0x13c>)
 800180e:	2200      	movs	r2, #0
 8001810:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001812:	4b46      	ldr	r3, [pc, #280]	; (800192c <MX_SAI2_Init+0x13c>)
 8001814:	2200      	movs	r2, #0
 8001816:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001818:	4b44      	ldr	r3, [pc, #272]	; (800192c <MX_SAI2_Init+0x13c>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800181e:	4b43      	ldr	r3, [pc, #268]	; (800192c <MX_SAI2_Init+0x13c>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001824:	4b41      	ldr	r3, [pc, #260]	; (800192c <MX_SAI2_Init+0x13c>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800182a:	4b40      	ldr	r3, [pc, #256]	; (800192c <MX_SAI2_Init+0x13c>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001830:	4b3e      	ldr	r3, [pc, #248]	; (800192c <MX_SAI2_Init+0x13c>)
 8001832:	4a40      	ldr	r2, [pc, #256]	; (8001934 <MX_SAI2_Init+0x144>)
 8001834:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <MX_SAI2_Init+0x13c>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800183c:	4b3b      	ldr	r3, [pc, #236]	; (800192c <MX_SAI2_Init+0x13c>)
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001842:	4b3a      	ldr	r3, [pc, #232]	; (800192c <MX_SAI2_Init+0x13c>)
 8001844:	2200      	movs	r2, #0
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001848:	4b38      	ldr	r3, [pc, #224]	; (800192c <MX_SAI2_Init+0x13c>)
 800184a:	2200      	movs	r2, #0
 800184c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <MX_SAI2_Init+0x13c>)
 8001850:	2208      	movs	r2, #8
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001854:	4b35      	ldr	r3, [pc, #212]	; (800192c <MX_SAI2_Init+0x13c>)
 8001856:	2201      	movs	r2, #1
 8001858:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800185a:	4b34      	ldr	r3, [pc, #208]	; (800192c <MX_SAI2_Init+0x13c>)
 800185c:	2200      	movs	r2, #0
 800185e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001860:	4b32      	ldr	r3, [pc, #200]	; (800192c <MX_SAI2_Init+0x13c>)
 8001862:	2200      	movs	r2, #0
 8001864:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <MX_SAI2_Init+0x13c>)
 8001868:	2200      	movs	r2, #0
 800186a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800186c:	4b2f      	ldr	r3, [pc, #188]	; (800192c <MX_SAI2_Init+0x13c>)
 800186e:	2200      	movs	r2, #0
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <MX_SAI2_Init+0x13c>)
 8001874:	2200      	movs	r2, #0
 8001876:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001878:	4b2c      	ldr	r3, [pc, #176]	; (800192c <MX_SAI2_Init+0x13c>)
 800187a:	2201      	movs	r2, #1
 800187c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <MX_SAI2_Init+0x13c>)
 8001880:	2200      	movs	r2, #0
 8001882:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001884:	4829      	ldr	r0, [pc, #164]	; (800192c <MX_SAI2_Init+0x13c>)
 8001886:	f006 fb45 	bl	8007f14 <HAL_SAI_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001890:	f000 fec8 	bl	8002624 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001894:	4b28      	ldr	r3, [pc, #160]	; (8001938 <MX_SAI2_Init+0x148>)
 8001896:	4a29      	ldr	r2, [pc, #164]	; (800193c <MX_SAI2_Init+0x14c>)
 8001898:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800189a:	4b27      	ldr	r3, [pc, #156]	; (8001938 <MX_SAI2_Init+0x148>)
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <MX_SAI2_Init+0x148>)
 80018a2:	2203      	movs	r2, #3
 80018a4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <MX_SAI2_Init+0x148>)
 80018a8:	2240      	movs	r2, #64	; 0x40
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <MX_SAI2_Init+0x148>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <MX_SAI2_Init+0x148>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <MX_SAI2_Init+0x148>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <MX_SAI2_Init+0x148>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <MX_SAI2_Init+0x148>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018ca:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <MX_SAI2_Init+0x148>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <MX_SAI2_Init+0x148>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <MX_SAI2_Init+0x148>)
 80018d8:	2200      	movs	r2, #0
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <MX_SAI2_Init+0x148>)
 80018de:	2200      	movs	r2, #0
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <MX_SAI2_Init+0x148>)
 80018e4:	2208      	movs	r2, #8
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_SAI2_Init+0x148>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_SAI2_Init+0x148>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <MX_SAI2_Init+0x148>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_SAI2_Init+0x148>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <MX_SAI2_Init+0x148>)
 8001902:	2200      	movs	r2, #0
 8001904:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_SAI2_Init+0x148>)
 8001908:	2200      	movs	r2, #0
 800190a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <MX_SAI2_Init+0x148>)
 800190e:	2201      	movs	r2, #1
 8001910:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_SAI2_Init+0x148>)
 8001914:	2200      	movs	r2, #0
 8001916:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <MX_SAI2_Init+0x148>)
 800191a:	f006 fafb 	bl	8007f14 <HAL_SAI_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001924:	f000 fe7e 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2000c100 	.word	0x2000c100
 8001930:	40015c04 	.word	0x40015c04
 8001934:	0002ee00 	.word	0x0002ee00
 8001938:	2000bf84 	.word	0x2000bf84
 800193c:	40015c24 	.word	0x40015c24

08001940 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_SDMMC1_SD_Init+0x38>)
 8001946:	4a0d      	ldr	r2, [pc, #52]	; (800197c <MX_SDMMC1_SD_Init+0x3c>)
 8001948:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <MX_SDMMC1_SD_Init+0x38>)
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_SDMMC1_SD_Init+0x38>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <MX_SDMMC1_SD_Init+0x38>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_SDMMC1_SD_Init+0x38>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <MX_SDMMC1_SD_Init+0x38>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <MX_SDMMC1_SD_Init+0x38>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	2000c1a8 	.word	0x2000c1a8
 800197c:	40012c00 	.word	0x40012c00

08001980 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <MX_SPDIFRX_Init+0x5c>)
 8001986:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800198a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <MX_SPDIFRX_Init+0x5c>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <MX_SPDIFRX_Init+0x5c>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_SPDIFRX_Init+0x5c>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_SPDIFRX_Init+0x5c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <MX_SPDIFRX_Init+0x5c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_SPDIFRX_Init+0x5c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <MX_SPDIFRX_Init+0x5c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_SPDIFRX_Init+0x5c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <MX_SPDIFRX_Init+0x5c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_SPDIFRX_Init+0x5c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80019c8:	4804      	ldr	r0, [pc, #16]	; (80019dc <MX_SPDIFRX_Init+0x5c>)
 80019ca:	f007 fd37 	bl	800943c <HAL_SPDIFRX_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80019d4:	f000 fe26 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2000c0b4 	.word	0x2000c0b4

080019e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <MX_SPI2_Init+0x74>)
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <MX_SPI2_Init+0x78>)
 80019e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_SPI2_Init+0x74>)
 80019ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_SPI2_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <MX_SPI2_Init+0x74>)
 80019fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <MX_SPI2_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <MX_SPI2_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_SPI2_Init+0x74>)
 8001a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_SPI2_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_SPI2_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_SPI2_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_SPI2_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_SPI2_Init+0x74>)
 8001a2e:	2207      	movs	r2, #7
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_SPI2_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_SPI2_Init+0x74>)
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_SPI2_Init+0x74>)
 8001a40:	f007 fd58 	bl	80094f4 <HAL_SPI_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a4a:	f000 fdeb 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000c010 	.word	0x2000c010
 8001a58:	40003800 	.word	0x40003800

08001a5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b09a      	sub	sp, #104	; 0x68
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
 8001a8c:	615a      	str	r2, [r3, #20]
 8001a8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	222c      	movs	r2, #44	; 0x2c
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f023 f9b3 	bl	8024e02 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a9c:	4b43      	ldr	r3, [pc, #268]	; (8001bac <MX_TIM1_Init+0x150>)
 8001a9e:	4a44      	ldr	r2, [pc, #272]	; (8001bb0 <MX_TIM1_Init+0x154>)
 8001aa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aa2:	4b42      	ldr	r3, [pc, #264]	; (8001bac <MX_TIM1_Init+0x150>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b40      	ldr	r3, [pc, #256]	; (8001bac <MX_TIM1_Init+0x150>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001aae:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <MX_TIM1_Init+0x150>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab4:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <MX_TIM1_Init+0x150>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aba:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <MX_TIM1_Init+0x150>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <MX_TIM1_Init+0x150>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ac6:	4839      	ldr	r0, [pc, #228]	; (8001bac <MX_TIM1_Init+0x150>)
 8001ac8:	f007 fda6 	bl	8009618 <HAL_TIM_Base_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ad2:	f000 fda7 	bl	8002624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001adc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4832      	ldr	r0, [pc, #200]	; (8001bac <MX_TIM1_Init+0x150>)
 8001ae4:	f008 f850 	bl	8009b88 <HAL_TIM_ConfigClockSource>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001aee:	f000 fd99 	bl	8002624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001af2:	482e      	ldr	r0, [pc, #184]	; (8001bac <MX_TIM1_Init+0x150>)
 8001af4:	f007 fde6 	bl	80096c4 <HAL_TIM_PWM_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001afe:	f000 fd91 	bl	8002624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b12:	4619      	mov	r1, r3
 8001b14:	4825      	ldr	r0, [pc, #148]	; (8001bac <MX_TIM1_Init+0x150>)
 8001b16:	f008 fcb1 	bl	800a47c <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001b20:	f000 fd80 	bl	8002624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b24:	2360      	movs	r3, #96	; 0x60
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b44:	2200      	movs	r2, #0
 8001b46:	4619      	mov	r1, r3
 8001b48:	4818      	ldr	r0, [pc, #96]	; (8001bac <MX_TIM1_Init+0x150>)
 8001b4a:	f007 ff05 	bl	8009958 <HAL_TIM_PWM_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001b54:	f000 fd66 	bl	8002624 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4807      	ldr	r0, [pc, #28]	; (8001bac <MX_TIM1_Init+0x150>)
 8001b8e:	f008 fd03 	bl	800a598 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001b98:	f000 fd44 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b9c:	4803      	ldr	r0, [pc, #12]	; (8001bac <MX_TIM1_Init+0x150>)
 8001b9e:	f001 fa3b 	bl	8003018 <HAL_TIM_MspPostInit>

}
 8001ba2:	bf00      	nop
 8001ba4:	3768      	adds	r7, #104	; 0x68
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000c48c 	.word	0x2000c48c
 8001bb0:	40010000 	.word	0x40010000

08001bb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08e      	sub	sp, #56	; 0x38
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	615a      	str	r2, [r3, #20]
 8001be4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001be6:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <MX_TIM2_Init+0xe8>)
 8001be8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <MX_TIM2_Init+0xe8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <MX_TIM2_Init+0xe8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <MX_TIM2_Init+0xe8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c00:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <MX_TIM2_Init+0xe8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <MX_TIM2_Init+0xe8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c0c:	4823      	ldr	r0, [pc, #140]	; (8001c9c <MX_TIM2_Init+0xe8>)
 8001c0e:	f007 fd03 	bl	8009618 <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c18:	f000 fd04 	bl	8002624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c26:	4619      	mov	r1, r3
 8001c28:	481c      	ldr	r0, [pc, #112]	; (8001c9c <MX_TIM2_Init+0xe8>)
 8001c2a:	f007 ffad 	bl	8009b88 <HAL_TIM_ConfigClockSource>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c34:	f000 fcf6 	bl	8002624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c38:	4818      	ldr	r0, [pc, #96]	; (8001c9c <MX_TIM2_Init+0xe8>)
 8001c3a:	f007 fd43 	bl	80096c4 <HAL_TIM_PWM_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c44:	f000 fcee 	bl	8002624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	4619      	mov	r1, r3
 8001c56:	4811      	ldr	r0, [pc, #68]	; (8001c9c <MX_TIM2_Init+0xe8>)
 8001c58:	f008 fc10 	bl	800a47c <HAL_TIMEx_MasterConfigSynchronization>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c62:	f000 fcdf 	bl	8002624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c66:	2360      	movs	r3, #96	; 0x60
 8001c68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c76:	463b      	mov	r3, r7
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4807      	ldr	r0, [pc, #28]	; (8001c9c <MX_TIM2_Init+0xe8>)
 8001c7e:	f007 fe6b 	bl	8009958 <HAL_TIM_PWM_ConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c88:	f000 fccc 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <MX_TIM2_Init+0xe8>)
 8001c8e:	f001 f9c3 	bl	8003018 <HAL_TIM_MspPostInit>

}
 8001c92:	bf00      	nop
 8001c94:	3738      	adds	r7, #56	; 0x38
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000c594 	.word	0x2000c594

08001ca0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	; 0x38
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]
 8001cce:	615a      	str	r2, [r3, #20]
 8001cd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <MX_TIM3_Init+0xe4>)
 8001cd4:	4a2c      	ldr	r2, [pc, #176]	; (8001d88 <MX_TIM3_Init+0xe8>)
 8001cd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <MX_TIM3_Init+0xe4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cde:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <MX_TIM3_Init+0xe4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <MX_TIM3_Init+0xe4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cea:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <MX_TIM3_Init+0xe4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <MX_TIM3_Init+0xe4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cf6:	4823      	ldr	r0, [pc, #140]	; (8001d84 <MX_TIM3_Init+0xe4>)
 8001cf8:	f007 fc8e 	bl	8009618 <HAL_TIM_Base_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d02:	f000 fc8f 	bl	8002624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d10:	4619      	mov	r1, r3
 8001d12:	481c      	ldr	r0, [pc, #112]	; (8001d84 <MX_TIM3_Init+0xe4>)
 8001d14:	f007 ff38 	bl	8009b88 <HAL_TIM_ConfigClockSource>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d1e:	f000 fc81 	bl	8002624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d22:	4818      	ldr	r0, [pc, #96]	; (8001d84 <MX_TIM3_Init+0xe4>)
 8001d24:	f007 fcce 	bl	80096c4 <HAL_TIM_PWM_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d2e:	f000 fc79 	bl	8002624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4810      	ldr	r0, [pc, #64]	; (8001d84 <MX_TIM3_Init+0xe4>)
 8001d42:	f008 fb9b 	bl	800a47c <HAL_TIMEx_MasterConfigSynchronization>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d4c:	f000 fc6a 	bl	8002624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d50:	2360      	movs	r3, #96	; 0x60
 8001d52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	4619      	mov	r1, r3
 8001d66:	4807      	ldr	r0, [pc, #28]	; (8001d84 <MX_TIM3_Init+0xe4>)
 8001d68:	f007 fdf6 	bl	8009958 <HAL_TIM_PWM_ConfigChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d72:	f000 fc57 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d76:	4803      	ldr	r0, [pc, #12]	; (8001d84 <MX_TIM3_Init+0xe4>)
 8001d78:	f001 f94e 	bl	8003018 <HAL_TIM_MspPostInit>

}
 8001d7c:	bf00      	nop
 8001d7e:	3738      	adds	r7, #56	; 0x38
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000c26c 	.word	0x2000c26c
 8001d88:	40000400 	.word	0x40000400

08001d8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08e      	sub	sp, #56	; 0x38
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dac:	463b      	mov	r3, r7
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]
 8001dba:	615a      	str	r2, [r3, #20]
 8001dbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <MX_TIM5_Init+0xe4>)
 8001dc0:	4a2c      	ldr	r2, [pc, #176]	; (8001e74 <MX_TIM5_Init+0xe8>)
 8001dc2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <MX_TIM5_Init+0xe4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <MX_TIM5_Init+0xe4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001dd0:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <MX_TIM5_Init+0xe4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <MX_TIM5_Init+0xe4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ddc:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <MX_TIM5_Init+0xe4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001de2:	4823      	ldr	r0, [pc, #140]	; (8001e70 <MX_TIM5_Init+0xe4>)
 8001de4:	f007 fc18 	bl	8009618 <HAL_TIM_Base_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001dee:	f000 fc19 	bl	8002624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001df8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	481c      	ldr	r0, [pc, #112]	; (8001e70 <MX_TIM5_Init+0xe4>)
 8001e00:	f007 fec2 	bl	8009b88 <HAL_TIM_ConfigClockSource>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001e0a:	f000 fc0b 	bl	8002624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e0e:	4818      	ldr	r0, [pc, #96]	; (8001e70 <MX_TIM5_Init+0xe4>)
 8001e10:	f007 fc58 	bl	80096c4 <HAL_TIM_PWM_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001e1a:	f000 fc03 	bl	8002624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4810      	ldr	r0, [pc, #64]	; (8001e70 <MX_TIM5_Init+0xe4>)
 8001e2e:	f008 fb25 	bl	800a47c <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001e38:	f000 fbf4 	bl	8002624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3c:	2360      	movs	r3, #96	; 0x60
 8001e3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	220c      	movs	r2, #12
 8001e50:	4619      	mov	r1, r3
 8001e52:	4807      	ldr	r0, [pc, #28]	; (8001e70 <MX_TIM5_Init+0xe4>)
 8001e54:	f007 fd80 	bl	8009958 <HAL_TIM_PWM_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001e5e:	f000 fbe1 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e62:	4803      	ldr	r0, [pc, #12]	; (8001e70 <MX_TIM5_Init+0xe4>)
 8001e64:	f001 f8d8 	bl	8003018 <HAL_TIM_MspPostInit>

}
 8001e68:	bf00      	nop
 8001e6a:	3738      	adds	r7, #56	; 0x38
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000c22c 	.word	0x2000c22c
 8001e74:	40000c00 	.word	0x40000c00

08001e78 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <MX_TIM8_Init+0x9c>)
 8001e98:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <MX_TIM8_Init+0xa0>)
 8001e9a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <MX_TIM8_Init+0x9c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <MX_TIM8_Init+0x9c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <MX_TIM8_Init+0x9c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <MX_TIM8_Init+0x9c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001eb4:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <MX_TIM8_Init+0x9c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <MX_TIM8_Init+0x9c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ec0:	4814      	ldr	r0, [pc, #80]	; (8001f14 <MX_TIM8_Init+0x9c>)
 8001ec2:	f007 fba9 	bl	8009618 <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001ecc:	f000 fbaa 	bl	8002624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4619      	mov	r1, r3
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <MX_TIM8_Init+0x9c>)
 8001ede:	f007 fe53 	bl	8009b88 <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001ee8:	f000 fb9c 	bl	8002624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_TIM8_Init+0x9c>)
 8001efe:	f008 fabd 	bl	800a47c <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001f08:	f000 fb8c 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	2000c074 	.word	0x2000c074
 8001f18:	40010400 	.word	0x40010400

08001f1c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	615a      	str	r2, [r3, #20]
 8001f32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_TIM12_Init+0x80>)
 8001f36:	4a1a      	ldr	r2, [pc, #104]	; (8001fa0 <MX_TIM12_Init+0x84>)
 8001f38:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <MX_TIM12_Init+0x80>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <MX_TIM12_Init+0x80>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <MX_TIM12_Init+0x80>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <MX_TIM12_Init+0x80>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <MX_TIM12_Init+0x80>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f58:	4810      	ldr	r0, [pc, #64]	; (8001f9c <MX_TIM12_Init+0x80>)
 8001f5a:	f007 fbb3 	bl	80096c4 <HAL_TIM_PWM_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001f64:	f000 fb5e 	bl	8002624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f68:	2360      	movs	r3, #96	; 0x60
 8001f6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4807      	ldr	r0, [pc, #28]	; (8001f9c <MX_TIM12_Init+0x80>)
 8001f80:	f007 fcea 	bl	8009958 <HAL_TIM_PWM_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001f8a:	f000 fb4b 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001f8e:	4803      	ldr	r0, [pc, #12]	; (8001f9c <MX_TIM12_Init+0x80>)
 8001f90:	f001 f842 	bl	8003018 <HAL_TIM_MspPostInit>

}
 8001f94:	bf00      	nop
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	2000c5fc 	.word	0x2000c5fc
 8001fa0:	40001800 	.word	0x40001800

08001fa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <MX_USART1_UART_Init+0x5c>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fe8:	f008 fb72 	bl	800a6d0 <HAL_UART_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ff2:	f000 fb17 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000c3ec 	.word	0x2000c3ec
 8002000:	40011000 	.word	0x40011000

08002004 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_USART6_UART_Init+0x58>)
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <MX_USART6_UART_Init+0x5c>)
 800200c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002014:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_USART6_UART_Init+0x58>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <MX_USART6_UART_Init+0x58>)
 800202a:	220c      	movs	r2, #12
 800202c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <MX_USART6_UART_Init+0x58>)
 800203c:	2200      	movs	r2, #0
 800203e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002042:	2200      	movs	r2, #0
 8002044:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002048:	f008 fb42 	bl	800a6d0 <HAL_UART_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002052:	f000 fae7 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000c4cc 	.word	0x2000c4cc
 8002060:	40011400 	.word	0x40011400

08002064 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
 8002078:	615a      	str	r2, [r3, #20]
 800207a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800207c:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <MX_FMC_Init+0x14c>)
 800207e:	4a4d      	ldr	r2, [pc, #308]	; (80021b4 <MX_FMC_Init+0x150>)
 8002080:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002082:	4b4b      	ldr	r3, [pc, #300]	; (80021b0 <MX_FMC_Init+0x14c>)
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002088:	4b49      	ldr	r3, [pc, #292]	; (80021b0 <MX_FMC_Init+0x14c>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800208e:	4b48      	ldr	r3, [pc, #288]	; (80021b0 <MX_FMC_Init+0x14c>)
 8002090:	2204      	movs	r2, #4
 8002092:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002094:	4b46      	ldr	r3, [pc, #280]	; (80021b0 <MX_FMC_Init+0x14c>)
 8002096:	2210      	movs	r2, #16
 8002098:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800209a:	4b45      	ldr	r3, [pc, #276]	; (80021b0 <MX_FMC_Init+0x14c>)
 800209c:	2240      	movs	r2, #64	; 0x40
 800209e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80020a0:	4b43      	ldr	r3, [pc, #268]	; (80021b0 <MX_FMC_Init+0x14c>)
 80020a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80020a6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80020a8:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <MX_FMC_Init+0x14c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80020ae:	4b40      	ldr	r3, [pc, #256]	; (80021b0 <MX_FMC_Init+0x14c>)
 80020b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80020b6:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <MX_FMC_Init+0x14c>)
 80020b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80020be:	4b3c      	ldr	r3, [pc, #240]	; (80021b0 <MX_FMC_Init+0x14c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80020c4:	2302      	movs	r3, #2
 80020c6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80020c8:	2307      	movs	r3, #7
 80020ca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80020cc:	2304      	movs	r3, #4
 80020ce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80020d0:	2307      	movs	r3, #7
 80020d2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80020d4:	2303      	movs	r3, #3
 80020d6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80020d8:	2302      	movs	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80020dc:	2302      	movs	r3, #2
 80020de:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	4619      	mov	r1, r3
 80020e4:	4832      	ldr	r0, [pc, #200]	; (80021b0 <MX_FMC_Init+0x14c>)
 80020e6:	f007 f929 	bl	800933c <HAL_SDRAM_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80020f0:	f000 fa98 	bl	8002624 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80020f8:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <MX_FMC_Init+0x154>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <MX_FMC_Init+0x154>)
 8002100:	2210      	movs	r2, #16
 8002102:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002104:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <MX_FMC_Init+0x154>)
 8002106:	2201      	movs	r2, #1
 8002108:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <MX_FMC_Init+0x154>)
 800210c:	2200      	movs	r2, #0
 800210e:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002114:	4928      	ldr	r1, [pc, #160]	; (80021b8 <MX_FMC_Init+0x154>)
 8002116:	4826      	ldr	r0, [pc, #152]	; (80021b0 <MX_FMC_Init+0x14c>)
 8002118:	f007 f944 	bl	80093a4 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800211c:	2001      	movs	r0, #1
 800211e:	f001 fba3 	bl	8003868 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002122:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <MX_FMC_Init+0x154>)
 8002124:	2202      	movs	r2, #2
 8002126:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <MX_FMC_Init+0x154>)
 800212a:	2210      	movs	r2, #16
 800212c:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800212e:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <MX_FMC_Init+0x154>)
 8002130:	2201      	movs	r2, #1
 8002132:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <MX_FMC_Init+0x154>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800213a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213e:	491e      	ldr	r1, [pc, #120]	; (80021b8 <MX_FMC_Init+0x154>)
 8002140:	481b      	ldr	r0, [pc, #108]	; (80021b0 <MX_FMC_Init+0x14c>)
 8002142:	f007 f92f 	bl	80093a4 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <MX_FMC_Init+0x154>)
 8002148:	2203      	movs	r2, #3
 800214a:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <MX_FMC_Init+0x154>)
 800214e:	2210      	movs	r2, #16
 8002150:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <MX_FMC_Init+0x154>)
 8002154:	2208      	movs	r2, #8
 8002156:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <MX_FMC_Init+0x154>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800215e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002162:	4915      	ldr	r1, [pc, #84]	; (80021b8 <MX_FMC_Init+0x154>)
 8002164:	4812      	ldr	r0, [pc, #72]	; (80021b0 <MX_FMC_Init+0x14c>)
 8002166:	f007 f91d 	bl	80093a4 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800216a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800216e:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <MX_FMC_Init+0x154>)
 8002172:	2204      	movs	r2, #4
 8002174:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <MX_FMC_Init+0x154>)
 8002178:	2210      	movs	r2, #16
 800217a:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <MX_FMC_Init+0x154>)
 800217e:	2201      	movs	r2, #1
 8002180:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <MX_FMC_Init+0x154>)
 8002186:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800218c:	490a      	ldr	r1, [pc, #40]	; (80021b8 <MX_FMC_Init+0x154>)
 800218e:	4808      	ldr	r0, [pc, #32]	; (80021b0 <MX_FMC_Init+0x14c>)
 8002190:	f007 f908 	bl	80093a4 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8002194:	f240 712b 	movw	r1, #1835	; 0x72b
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <MX_FMC_Init+0x14c>)
 800219a:	f007 f92e 	bl	80093fa <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800219e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80021a2:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80021a6:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 80021a8:	bf00      	nop
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000c63c 	.word	0x2000c63c
 80021b4:	a0000140 	.word	0xa0000140
 80021b8:	20000374 	.word	0x20000374

080021bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b090      	sub	sp, #64	; 0x40
 80021c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021d2:	4baf      	ldr	r3, [pc, #700]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4aae      	ldr	r2, [pc, #696]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80021d8:	f043 0310 	orr.w	r3, r3, #16
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4bac      	ldr	r3, [pc, #688]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021ea:	4ba9      	ldr	r3, [pc, #676]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4aa8      	ldr	r2, [pc, #672]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80021f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4ba6      	ldr	r3, [pc, #664]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	4ba3      	ldr	r3, [pc, #652]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4aa2      	ldr	r2, [pc, #648]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4ba0      	ldr	r3, [pc, #640]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	623b      	str	r3, [r7, #32]
 8002218:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800221a:	4b9d      	ldr	r3, [pc, #628]	; (8002490 <MX_GPIO_Init+0x2d4>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a9c      	ldr	r2, [pc, #624]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002220:	f043 0308 	orr.w	r3, r3, #8
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b9a      	ldr	r3, [pc, #616]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002232:	4b97      	ldr	r3, [pc, #604]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a96      	ldr	r2, [pc, #600]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b94      	ldr	r3, [pc, #592]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	4b91      	ldr	r3, [pc, #580]	; (8002490 <MX_GPIO_Init+0x2d4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a90      	ldr	r2, [pc, #576]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b8e      	ldr	r3, [pc, #568]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002262:	4b8b      	ldr	r3, [pc, #556]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a8a      	ldr	r2, [pc, #552]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b88      	ldr	r3, [pc, #544]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800227a:	4b85      	ldr	r3, [pc, #532]	; (8002490 <MX_GPIO_Init+0x2d4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a84      	ldr	r2, [pc, #528]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b82      	ldr	r3, [pc, #520]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a7e      	ldr	r2, [pc, #504]	; (8002490 <MX_GPIO_Init+0x2d4>)
 8002298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b7c      	ldr	r3, [pc, #496]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022aa:	4b79      	ldr	r3, [pc, #484]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a78      	ldr	r2, [pc, #480]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80022b0:	f043 0320 	orr.w	r3, r3, #32
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b76      	ldr	r3, [pc, #472]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022c2:	4b73      	ldr	r3, [pc, #460]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a72      	ldr	r2, [pc, #456]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80022c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b70      	ldr	r3, [pc, #448]	; (8002490 <MX_GPIO_Init+0x2d4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	2120      	movs	r1, #32
 80022de:	486d      	ldr	r0, [pc, #436]	; (8002494 <MX_GPIO_Init+0x2d8>)
 80022e0:	f003 fbb8 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80022e4:	2200      	movs	r2, #0
 80022e6:	210c      	movs	r1, #12
 80022e8:	486b      	ldr	r0, [pc, #428]	; (8002498 <MX_GPIO_Init+0x2dc>)
 80022ea:	f003 fbb3 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80022ee:	2201      	movs	r2, #1
 80022f0:	2108      	movs	r1, #8
 80022f2:	486a      	ldr	r0, [pc, #424]	; (800249c <MX_GPIO_Init+0x2e0>)
 80022f4:	f003 fbae 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80022f8:	2201      	movs	r2, #1
 80022fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022fe:	4866      	ldr	r0, [pc, #408]	; (8002498 <MX_GPIO_Init+0x2dc>)
 8002300:	f003 fba8 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002304:	2200      	movs	r2, #0
 8002306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800230a:	4865      	ldr	r0, [pc, #404]	; (80024a0 <MX_GPIO_Init+0x2e4>)
 800230c:	f003 fba2 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002310:	2200      	movs	r2, #0
 8002312:	21c8      	movs	r1, #200	; 0xc8
 8002314:	4863      	ldr	r0, [pc, #396]	; (80024a4 <MX_GPIO_Init+0x2e8>)
 8002316:	f003 fb9d 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800231a:	2308      	movs	r3, #8
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231e:	2300      	movs	r3, #0
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232a:	4619      	mov	r1, r3
 800232c:	485e      	ldr	r0, [pc, #376]	; (80024a8 <MX_GPIO_Init+0x2ec>)
 800232e:	f003 f9cf 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002332:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002344:	230b      	movs	r3, #11
 8002346:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234c:	4619      	mov	r1, r3
 800234e:	4855      	ldr	r0, [pc, #340]	; (80024a4 <MX_GPIO_Init+0x2e8>)
 8002350:	f003 f9be 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8002354:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002366:	230a      	movs	r3, #10
 8002368:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800236e:	4619      	mov	r1, r3
 8002370:	484e      	ldr	r0, [pc, #312]	; (80024ac <MX_GPIO_Init+0x2f0>)
 8002372:	f003 f9ad 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237c:	2300      	movs	r3, #0
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002388:	4619      	mov	r1, r3
 800238a:	4849      	ldr	r0, [pc, #292]	; (80024b0 <MX_GPIO_Init+0x2f4>)
 800238c:	f003 f9a0 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002390:	2340      	movs	r3, #64	; 0x40
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002394:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <MX_GPIO_Init+0x2f8>)
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800239c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a0:	4619      	mov	r1, r3
 80023a2:	483c      	ldr	r0, [pc, #240]	; (8002494 <MX_GPIO_Init+0x2d8>)
 80023a4:	f003 f994 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80023a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023ba:	230a      	movs	r3, #10
 80023bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c2:	4619      	mov	r1, r3
 80023c4:	483c      	ldr	r0, [pc, #240]	; (80024b8 <MX_GPIO_Init+0x2fc>)
 80023c6:	f003 f983 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80023ca:	2320      	movs	r3, #32
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023de:	4619      	mov	r1, r3
 80023e0:	482c      	ldr	r0, [pc, #176]	; (8002494 <MX_GPIO_Init+0x2d8>)
 80023e2:	f003 f975 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80023e6:	f241 030c 	movw	r3, #4108	; 0x100c
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ec:	2301      	movs	r3, #1
 80023ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fc:	4619      	mov	r1, r3
 80023fe:	4826      	ldr	r0, [pc, #152]	; (8002498 <MX_GPIO_Init+0x2dc>)
 8002400:	f003 f966 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240a:	2300      	movs	r3, #0
 800240c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002416:	4619      	mov	r1, r3
 8002418:	4828      	ldr	r0, [pc, #160]	; (80024bc <MX_GPIO_Init+0x300>)
 800241a:	f003 f959 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800241e:	2308      	movs	r3, #8
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002422:	2301      	movs	r3, #1
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800242e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002432:	4619      	mov	r1, r3
 8002434:	4819      	ldr	r0, [pc, #100]	; (800249c <MX_GPIO_Init+0x2e0>)
 8002436:	f003 f94b 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800243a:	2310      	movs	r3, #16
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243e:	2300      	movs	r3, #0
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244a:	4619      	mov	r1, r3
 800244c:	4811      	ldr	r0, [pc, #68]	; (8002494 <MX_GPIO_Init+0x2d8>)
 800244e:	f003 f93f 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002452:	f248 0304 	movw	r3, #32772	; 0x8004
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002464:	4619      	mov	r1, r3
 8002466:	480e      	ldr	r0, [pc, #56]	; (80024a0 <MX_GPIO_Init+0x2e4>)
 8002468:	f003 f932 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800246c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002472:	2301      	movs	r3, #1
 8002474:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002482:	4619      	mov	r1, r3
 8002484:	4806      	ldr	r0, [pc, #24]	; (80024a0 <MX_GPIO_Init+0x2e4>)
 8002486:	f003 f923 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800248a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800248e:	e017      	b.n	80024c0 <MX_GPIO_Init+0x304>
 8002490:	40023800 	.word	0x40023800
 8002494:	40020c00 	.word	0x40020c00
 8002498:	40022000 	.word	0x40022000
 800249c:	40022800 	.word	0x40022800
 80024a0:	40021c00 	.word	0x40021c00
 80024a4:	40021800 	.word	0x40021800
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40022400 	.word	0x40022400
 80024b4:	10120000 	.word	0x10120000
 80024b8:	40020000 	.word	0x40020000
 80024bc:	40020800 	.word	0x40020800
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024c2:	4b44      	ldr	r3, [pc, #272]	; (80025d4 <MX_GPIO_Init+0x418>)
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80024ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ce:	4619      	mov	r1, r3
 80024d0:	4841      	ldr	r0, [pc, #260]	; (80025d8 <MX_GPIO_Init+0x41c>)
 80024d2:	f003 f8fd 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80024d6:	2310      	movs	r3, #16
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024e6:	230a      	movs	r3, #10
 80024e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80024ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ee:	4619      	mov	r1, r3
 80024f0:	483a      	ldr	r0, [pc, #232]	; (80025dc <MX_GPIO_Init+0x420>)
 80024f2:	f003 f8ed 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80024f6:	23c8      	movs	r3, #200	; 0xc8
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250a:	4619      	mov	r1, r3
 800250c:	4834      	ldr	r0, [pc, #208]	; (80025e0 <MX_GPIO_Init+0x424>)
 800250e:	f003 f8df 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002512:	2305      	movs	r3, #5
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251e:	2303      	movs	r3, #3
 8002520:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002522:	230a      	movs	r3, #10
 8002524:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252a:	4619      	mov	r1, r3
 800252c:	482d      	ldr	r0, [pc, #180]	; (80025e4 <MX_GPIO_Init+0x428>)
 800252e:	f003 f8cf 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002532:	2332      	movs	r3, #50	; 0x32
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002542:	230b      	movs	r3, #11
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254a:	4619      	mov	r1, r3
 800254c:	4825      	ldr	r0, [pc, #148]	; (80025e4 <MX_GPIO_Init+0x428>)
 800254e:	f003 f8bf 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002552:	2304      	movs	r3, #4
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002556:	2300      	movs	r3, #0
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002562:	4619      	mov	r1, r3
 8002564:	481e      	ldr	r0, [pc, #120]	; (80025e0 <MX_GPIO_Init+0x424>)
 8002566:	f003 f8b3 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800256a:	2386      	movs	r3, #134	; 0x86
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800257a:	230b      	movs	r3, #11
 800257c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002582:	4619      	mov	r1, r3
 8002584:	4818      	ldr	r0, [pc, #96]	; (80025e8 <MX_GPIO_Init+0x42c>)
 8002586:	f003 f8a3 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800258a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002590:	2312      	movs	r3, #18
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002594:	2301      	movs	r3, #1
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800259c:	2304      	movs	r3, #4
 800259e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a4:	4619      	mov	r1, r3
 80025a6:	480d      	ldr	r0, [pc, #52]	; (80025dc <MX_GPIO_Init+0x420>)
 80025a8:	f003 f892 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80025ac:	2328      	movs	r3, #40	; 0x28
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025bc:	230a      	movs	r3, #10
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c4:	4619      	mov	r1, r3
 80025c6:	4808      	ldr	r0, [pc, #32]	; (80025e8 <MX_GPIO_Init+0x42c>)
 80025c8:	f003 f882 	bl	80056d0 <HAL_GPIO_Init>

}
 80025cc:	bf00      	nop
 80025ce:	3740      	adds	r7, #64	; 0x40
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	10120000 	.word	0x10120000
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40021c00 	.word	0x40021c00
 80025e0:	40021800 	.word	0x40021800
 80025e4:	40020800 	.word	0x40020800
 80025e8:	40020000 	.word	0x40020000

080025ec <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 80025f4:	f00c fba4 	bl	800ed40 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 80025f8:	2001      	movs	r0, #1
 80025fa:	f009 fe6d 	bl	800c2d8 <osDelay>
 80025fe:	e7fb      	b.n	80025f8 <StartDefaultTask+0xc>

08002600 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a04      	ldr	r2, [pc, #16]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002612:	f001 f909 	bl	8003828 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40001000 	.word	0x40001000

08002624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_MspInit+0x4c>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a10      	ldr	r2, [pc, #64]	; (8002680 <HAL_MspInit+0x4c>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_MspInit+0x4c>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_MspInit+0x4c>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_MspInit+0x4c>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_MspInit+0x4c>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	210f      	movs	r1, #15
 800266e:	f06f 0001 	mvn.w	r0, #1
 8002672:	f002 f9ff 	bl	8004a74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800

08002684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a21      	ldr	r2, [pc, #132]	; (8002728 <HAL_ADC_MspInit+0xa4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d13c      	bne.n	8002720 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <HAL_ADC_MspInit+0xa8>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a20      	ldr	r2, [pc, #128]	; (800272c <HAL_ADC_MspInit+0xa8>)
 80026ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <HAL_ADC_MspInit+0xa8>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_ADC_MspInit+0xa8>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a1a      	ldr	r2, [pc, #104]	; (800272c <HAL_ADC_MspInit+0xa8>)
 80026c4:	f043 0320 	orr.w	r3, r3, #32
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_ADC_MspInit+0xa8>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_ADC_MspInit+0xa8>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a14      	ldr	r2, [pc, #80]	; (800272c <HAL_ADC_MspInit+0xa8>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_ADC_MspInit+0xa8>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80026ee:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80026f2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026f4:	2303      	movs	r3, #3
 80026f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4619      	mov	r1, r3
 8002702:	480b      	ldr	r0, [pc, #44]	; (8002730 <HAL_ADC_MspInit+0xac>)
 8002704:	f002 ffe4 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002708:	2301      	movs	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800270c:	2303      	movs	r3, #3
 800270e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	4619      	mov	r1, r3
 800271a:	4806      	ldr	r0, [pc, #24]	; (8002734 <HAL_ADC_MspInit+0xb0>)
 800271c:	f002 ffd8 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002720:	bf00      	nop
 8002722:	3728      	adds	r7, #40	; 0x28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40012200 	.word	0x40012200
 800272c:	40023800 	.word	0x40023800
 8002730:	40021400 	.word	0x40021400
 8002734:	40020000 	.word	0x40020000

08002738 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1b      	ldr	r2, [pc, #108]	; (80027c4 <HAL_CAN_MspInit+0x8c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d130      	bne.n	80027bc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_CAN_MspInit+0x90>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a1a      	ldr	r2, [pc, #104]	; (80027c8 <HAL_CAN_MspInit+0x90>)
 8002760:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_CAN_MspInit+0x90>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_CAN_MspInit+0x90>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <HAL_CAN_MspInit+0x90>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_CAN_MspInit+0x90>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800278a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800278e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	2302      	movs	r3, #2
 8002792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002798:	2303      	movs	r3, #3
 800279a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800279c:	2309      	movs	r3, #9
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4619      	mov	r1, r3
 80027a6:	4809      	ldr	r0, [pc, #36]	; (80027cc <HAL_CAN_MspInit+0x94>)
 80027a8:	f002 ff92 	bl	80056d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2105      	movs	r1, #5
 80027b0:	2014      	movs	r0, #20
 80027b2:	f002 f95f 	bl	8004a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80027b6:	2014      	movs	r0, #20
 80027b8:	f002 f978 	bl	8004aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80027bc:	bf00      	nop
 80027be:	3728      	adds	r7, #40	; 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40006400 	.word	0x40006400
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40020400 	.word	0x40020400

080027d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <HAL_CRC_MspInit+0x38>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10b      	bne.n	80027fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_CRC_MspInit+0x3c>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a09      	ldr	r2, [pc, #36]	; (800280c <HAL_CRC_MspInit+0x3c>)
 80027e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <HAL_CRC_MspInit+0x3c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023000 	.word	0x40023000
 800280c:	40023800 	.word	0x40023800

08002810 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08e      	sub	sp, #56	; 0x38
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a50      	ldr	r2, [pc, #320]	; (8002970 <HAL_DCMI_MspInit+0x160>)
 800282e:	4293      	cmp	r3, r2
 8002830:	f040 809a 	bne.w	8002968 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	4a4e      	ldr	r2, [pc, #312]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6353      	str	r3, [r2, #52]	; 0x34
 8002840:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 8002842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	623b      	str	r3, [r7, #32]
 800284a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800284c:	4b49      	ldr	r3, [pc, #292]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	4a48      	ldr	r2, [pc, #288]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 8002852:	f043 0310 	orr.w	r3, r3, #16
 8002856:	6313      	str	r3, [r2, #48]	; 0x30
 8002858:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002864:	4b43      	ldr	r3, [pc, #268]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	4a42      	ldr	r2, [pc, #264]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 800286a:	f043 0308 	orr.w	r3, r3, #8
 800286e:	6313      	str	r3, [r2, #48]	; 0x30
 8002870:	4b40      	ldr	r3, [pc, #256]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800287c:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	4a3c      	ldr	r2, [pc, #240]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 8002882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002886:	6313      	str	r3, [r2, #48]	; 0x30
 8002888:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002894:	4b37      	ldr	r3, [pc, #220]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	4a36      	ldr	r2, [pc, #216]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 800289a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289e:	6313      	str	r3, [r2, #48]	; 0x30
 80028a0:	4b34      	ldr	r3, [pc, #208]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ac:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	4a30      	ldr	r2, [pc, #192]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6313      	str	r3, [r2, #48]	; 0x30
 80028b8:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <HAL_DCMI_MspInit+0x164>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80028c4:	2360      	movs	r3, #96	; 0x60
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d0:	2300      	movs	r3, #0
 80028d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028d4:	230d      	movs	r3, #13
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028dc:	4619      	mov	r1, r3
 80028de:	4826      	ldr	r0, [pc, #152]	; (8002978 <HAL_DCMI_MspInit+0x168>)
 80028e0:	f002 fef6 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80028e4:	2308      	movs	r3, #8
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028f4:	230d      	movs	r3, #13
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80028f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fc:	4619      	mov	r1, r3
 80028fe:	481f      	ldr	r0, [pc, #124]	; (800297c <HAL_DCMI_MspInit+0x16c>)
 8002900:	f002 fee6 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2300      	movs	r3, #0
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002916:	230d      	movs	r3, #13
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291e:	4619      	mov	r1, r3
 8002920:	4817      	ldr	r0, [pc, #92]	; (8002980 <HAL_DCMI_MspInit+0x170>)
 8002922:	f002 fed5 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002926:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2300      	movs	r3, #0
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002938:	230d      	movs	r3, #13
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800293c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002940:	4619      	mov	r1, r3
 8002942:	4810      	ldr	r0, [pc, #64]	; (8002984 <HAL_DCMI_MspInit+0x174>)
 8002944:	f002 fec4 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002948:	2350      	movs	r3, #80	; 0x50
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002958:	230d      	movs	r3, #13
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002960:	4619      	mov	r1, r3
 8002962:	4809      	ldr	r0, [pc, #36]	; (8002988 <HAL_DCMI_MspInit+0x178>)
 8002964:	f002 feb4 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002968:	bf00      	nop
 800296a:	3738      	adds	r7, #56	; 0x38
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	50050000 	.word	0x50050000
 8002974:	40023800 	.word	0x40023800
 8002978:	40021000 	.word	0x40021000
 800297c:	40020c00 	.word	0x40020c00
 8002980:	40021800 	.word	0x40021800
 8002984:	40021c00 	.word	0x40021c00
 8002988:	40020000 	.word	0x40020000

0800298c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <HAL_DMA2D_MspInit+0x44>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d113      	bne.n	80029c6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_DMA2D_MspInit+0x48>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a0c      	ldr	r2, [pc, #48]	; (80029d4 <HAL_DMA2D_MspInit+0x48>)
 80029a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_DMA2D_MspInit+0x48>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2105      	movs	r1, #5
 80029ba:	205a      	movs	r0, #90	; 0x5a
 80029bc:	f002 f85a 	bl	8004a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80029c0:	205a      	movs	r0, #90	; 0x5a
 80029c2:	f002 f873 	bl	8004aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	4002b000 	.word	0x4002b000
 80029d4:	40023800 	.word	0x40023800

080029d8 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <HAL_DMA2D_MspDeInit+0x2c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d108      	bne.n	80029fc <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <HAL_DMA2D_MspDeInit+0x30>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <HAL_DMA2D_MspDeInit+0x30>)
 80029f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80029f6:	205a      	movs	r0, #90	; 0x5a
 80029f8:	f002 f866 	bl	8004ac8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	4002b000 	.word	0x4002b000
 8002a08:	40023800 	.word	0x40023800

08002a0c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08e      	sub	sp, #56	; 0x38
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a55      	ldr	r2, [pc, #340]	; (8002b80 <HAL_LTDC_MspInit+0x174>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	f040 80a3 	bne.w	8002b76 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a30:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	4a53      	ldr	r2, [pc, #332]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3c:	4b51      	ldr	r3, [pc, #324]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a48:	4b4e      	ldr	r3, [pc, #312]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	4a4d      	ldr	r2, [pc, #308]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a4e:	f043 0310 	orr.w	r3, r3, #16
 8002a52:	6313      	str	r3, [r2, #48]	; 0x30
 8002a54:	4b4b      	ldr	r3, [pc, #300]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a60:	4b48      	ldr	r3, [pc, #288]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	4a47      	ldr	r2, [pc, #284]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6c:	4b45      	ldr	r3, [pc, #276]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a78:	4b42      	ldr	r3, [pc, #264]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	4a41      	ldr	r2, [pc, #260]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a82:	6313      	str	r3, [r2, #48]	; 0x30
 8002a84:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a90:	4b3c      	ldr	r3, [pc, #240]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	4a3b      	ldr	r2, [pc, #236]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9c:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002aa8:	4b36      	ldr	r3, [pc, #216]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	4a35      	ldr	r2, [pc, #212]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab4:	4b33      	ldr	r3, [pc, #204]	; (8002b84 <HAL_LTDC_MspInit+0x178>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ad0:	230e      	movs	r3, #14
 8002ad2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad8:	4619      	mov	r1, r3
 8002ada:	482b      	ldr	r0, [pc, #172]	; (8002b88 <HAL_LTDC_MspInit+0x17c>)
 8002adc:	f002 fdf8 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002ae0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aee:	2300      	movs	r3, #0
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002af2:	230e      	movs	r3, #14
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afa:	4619      	mov	r1, r3
 8002afc:	4823      	ldr	r0, [pc, #140]	; (8002b8c <HAL_LTDC_MspInit+0x180>)
 8002afe:	f002 fde7 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002b02:	23f7      	movs	r3, #247	; 0xf7
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b12:	230e      	movs	r3, #14
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	481c      	ldr	r0, [pc, #112]	; (8002b90 <HAL_LTDC_MspInit+0x184>)
 8002b1e:	f002 fdd7 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b34:	2309      	movs	r3, #9
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4815      	ldr	r0, [pc, #84]	; (8002b94 <HAL_LTDC_MspInit+0x188>)
 8002b40:	f002 fdc6 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002b44:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b56:	230e      	movs	r3, #14
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5e:	4619      	mov	r1, r3
 8002b60:	480d      	ldr	r0, [pc, #52]	; (8002b98 <HAL_LTDC_MspInit+0x18c>)
 8002b62:	f002 fdb5 	bl	80056d0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2105      	movs	r1, #5
 8002b6a:	2058      	movs	r0, #88	; 0x58
 8002b6c:	f001 ff82 	bl	8004a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002b70:	2058      	movs	r0, #88	; 0x58
 8002b72:	f001 ff9b 	bl	8004aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002b76:	bf00      	nop
 8002b78:	3738      	adds	r7, #56	; 0x38
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40016800 	.word	0x40016800
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40022400 	.word	0x40022400
 8002b90:	40022800 	.word	0x40022800
 8002b94:	40021800 	.word	0x40021800
 8002b98:	40022000 	.word	0x40022000

08002b9c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	; 0x30
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 031c 	add.w	r3, r7, #28
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a3b      	ldr	r2, [pc, #236]	; (8002ca8 <HAL_QSPI_MspInit+0x10c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d170      	bne.n	8002ca0 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bbe:	4b3b      	ldr	r3, [pc, #236]	; (8002cac <HAL_QSPI_MspInit+0x110>)
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	4a3a      	ldr	r2, [pc, #232]	; (8002cac <HAL_QSPI_MspInit+0x110>)
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	6393      	str	r3, [r2, #56]	; 0x38
 8002bca:	4b38      	ldr	r3, [pc, #224]	; (8002cac <HAL_QSPI_MspInit+0x110>)
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bd6:	4b35      	ldr	r3, [pc, #212]	; (8002cac <HAL_QSPI_MspInit+0x110>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a34      	ldr	r2, [pc, #208]	; (8002cac <HAL_QSPI_MspInit+0x110>)
 8002bdc:	f043 0310 	orr.w	r3, r3, #16
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b32      	ldr	r3, [pc, #200]	; (8002cac <HAL_QSPI_MspInit+0x110>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bee:	4b2f      	ldr	r3, [pc, #188]	; (8002cac <HAL_QSPI_MspInit+0x110>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a2e      	ldr	r2, [pc, #184]	; (8002cac <HAL_QSPI_MspInit+0x110>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b2c      	ldr	r3, [pc, #176]	; (8002cac <HAL_QSPI_MspInit+0x110>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c06:	4b29      	ldr	r3, [pc, #164]	; (8002cac <HAL_QSPI_MspInit+0x110>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a28      	ldr	r2, [pc, #160]	; (8002cac <HAL_QSPI_MspInit+0x110>)
 8002c0c:	f043 0308 	orr.w	r3, r3, #8
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b26      	ldr	r3, [pc, #152]	; (8002cac <HAL_QSPI_MspInit+0x110>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002c1e:	2304      	movs	r3, #4
 8002c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c2e:	2309      	movs	r3, #9
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002c32:	f107 031c 	add.w	r3, r7, #28
 8002c36:	4619      	mov	r1, r3
 8002c38:	481d      	ldr	r0, [pc, #116]	; (8002cb0 <HAL_QSPI_MspInit+0x114>)
 8002c3a:	f002 fd49 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002c3e:	2340      	movs	r3, #64	; 0x40
 8002c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c4e:	230a      	movs	r3, #10
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002c52:	f107 031c 	add.w	r3, r7, #28
 8002c56:	4619      	mov	r1, r3
 8002c58:	4816      	ldr	r0, [pc, #88]	; (8002cb4 <HAL_QSPI_MspInit+0x118>)
 8002c5a:	f002 fd39 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c5e:	2304      	movs	r3, #4
 8002c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c6e:	2309      	movs	r3, #9
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c72:	f107 031c 	add.w	r3, r7, #28
 8002c76:	4619      	mov	r1, r3
 8002c78:	480e      	ldr	r0, [pc, #56]	; (8002cb4 <HAL_QSPI_MspInit+0x118>)
 8002c7a:	f002 fd29 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002c7e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c90:	2309      	movs	r3, #9
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4807      	ldr	r0, [pc, #28]	; (8002cb8 <HAL_QSPI_MspInit+0x11c>)
 8002c9c:	f002 fd18 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002ca0:	bf00      	nop
 8002ca2:	3730      	adds	r7, #48	; 0x30
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	a0001000 	.word	0xa0001000
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40020400 	.word	0x40020400
 8002cb8:	40020c00 	.word	0x40020c00

08002cbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <HAL_RTC_MspInit+0x2c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d105      	bne.n	8002cda <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_RTC_MspInit+0x30>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	4a06      	ldr	r2, [pc, #24]	; (8002cec <HAL_RTC_MspInit+0x30>)
 8002cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40002800 	.word	0x40002800
 8002cec:	40023800 	.word	0x40023800

08002cf0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <HAL_SD_MspInit+0xb4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d144      	bne.n	8002d9c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002d12:	4b25      	ldr	r3, [pc, #148]	; (8002da8 <HAL_SD_MspInit+0xb8>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a24      	ldr	r2, [pc, #144]	; (8002da8 <HAL_SD_MspInit+0xb8>)
 8002d18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	4b22      	ldr	r3, [pc, #136]	; (8002da8 <HAL_SD_MspInit+0xb8>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2a:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <HAL_SD_MspInit+0xb8>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a1e      	ldr	r2, [pc, #120]	; (8002da8 <HAL_SD_MspInit+0xb8>)
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <HAL_SD_MspInit+0xb8>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d42:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_SD_MspInit+0xb8>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <HAL_SD_MspInit+0xb8>)
 8002d48:	f043 0308 	orr.w	r3, r3, #8
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_SD_MspInit+0xb8>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002d5a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002d5e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d6c:	230c      	movs	r3, #12
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	480d      	ldr	r0, [pc, #52]	; (8002dac <HAL_SD_MspInit+0xbc>)
 8002d78:	f002 fcaa 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	4619      	mov	r1, r3
 8002d96:	4806      	ldr	r0, [pc, #24]	; (8002db0 <HAL_SD_MspInit+0xc0>)
 8002d98:	f002 fc9a 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002d9c:	bf00      	nop
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40012c00 	.word	0x40012c00
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40020800 	.word	0x40020800
 8002db0:	40020c00 	.word	0x40020c00

08002db4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002dd4:	d127      	bne.n	8002e26 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002dd6:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <HAL_SPDIFRX_MspInit+0x7c>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <HAL_SPDIFRX_MspInit+0x7c>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <HAL_SPDIFRX_MspInit+0x7c>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_SPDIFRX_MspInit+0x7c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <HAL_SPDIFRX_MspInit+0x7c>)
 8002df4:	f043 0308 	orr.w	r3, r3, #8
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <HAL_SPDIFRX_MspInit+0x7c>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e16:	2308      	movs	r3, #8
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4804      	ldr	r0, [pc, #16]	; (8002e34 <HAL_SPDIFRX_MspInit+0x80>)
 8002e22:	f002 fc55 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002e26:	bf00      	nop
 8002e28:	3728      	adds	r7, #40	; 0x28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40020c00 	.word	0x40020c00

08002e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a25      	ldr	r2, [pc, #148]	; (8002eec <HAL_SPI_MspInit+0xb4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d144      	bne.n	8002ee4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e5a:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <HAL_SPI_MspInit+0xb8>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a24      	ldr	r2, [pc, #144]	; (8002ef0 <HAL_SPI_MspInit+0xb8>)
 8002e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
 8002e66:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <HAL_SPI_MspInit+0xb8>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e72:	4b1f      	ldr	r3, [pc, #124]	; (8002ef0 <HAL_SPI_MspInit+0xb8>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a1e      	ldr	r2, [pc, #120]	; (8002ef0 <HAL_SPI_MspInit+0xb8>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <HAL_SPI_MspInit+0xb8>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8a:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_SPI_MspInit+0xb8>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <HAL_SPI_MspInit+0xb8>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <HAL_SPI_MspInit+0xb8>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002eb2:	2305      	movs	r3, #5
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	4619      	mov	r1, r3
 8002ebc:	480d      	ldr	r0, [pc, #52]	; (8002ef4 <HAL_SPI_MspInit+0xbc>)
 8002ebe:	f002 fc07 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002ec2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ed4:	2305      	movs	r3, #5
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	4806      	ldr	r0, [pc, #24]	; (8002ef8 <HAL_SPI_MspInit+0xc0>)
 8002ee0:	f002 fbf6 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ee4:	bf00      	nop
 8002ee6:	3728      	adds	r7, #40	; 0x28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40003800 	.word	0x40003800
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	40020400 	.word	0x40020400

08002efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	; 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a2e      	ldr	r2, [pc, #184]	; (8002fc4 <HAL_TIM_Base_MspInit+0xc8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d10c      	bne.n	8002f28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f0e:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	4a2d      	ldr	r2, [pc, #180]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f26:	e046      	b.n	8002fb6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d10c      	bne.n	8002f4c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f32:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a24      	ldr	r2, [pc, #144]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	69bb      	ldr	r3, [r7, #24]
}
 8002f4a:	e034      	b.n	8002fb6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <HAL_TIM_Base_MspInit+0xd0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10c      	bne.n	8002f70 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f56:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]
}
 8002f6e:	e022      	b.n	8002fb6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <HAL_TIM_Base_MspInit+0xd4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10c      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	6413      	str	r3, [r2, #64]	; 0x40
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
}
 8002f92:	e010      	b.n	8002fb6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <HAL_TIM_Base_MspInit+0xd8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
}
 8002fb6:	bf00      	nop
 8002fb8:	3724      	adds	r7, #36	; 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40010000 	.word	0x40010000
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000c00 	.word	0x40000c00
 8002fd4:	40010400 	.word	0x40010400

08002fd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <HAL_TIM_PWM_MspInit+0x38>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10b      	bne.n	8003002 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_TIM_PWM_MspInit+0x3c>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40001800 	.word	0x40001800
 8003014:	40023800 	.word	0x40023800

08003018 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	; 0x30
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 031c 	add.w	r3, r7, #28
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a56      	ldr	r2, [pc, #344]	; (8003190 <HAL_TIM_MspPostInit+0x178>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d11d      	bne.n	8003076 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	4b56      	ldr	r3, [pc, #344]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a55      	ldr	r2, [pc, #340]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	2300      	movs	r3, #0
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003064:	2301      	movs	r3, #1
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003068:	f107 031c 	add.w	r3, r7, #28
 800306c:	4619      	mov	r1, r3
 800306e:	484a      	ldr	r0, [pc, #296]	; (8003198 <HAL_TIM_MspPostInit+0x180>)
 8003070:	f002 fb2e 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003074:	e087      	b.n	8003186 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307e:	d11d      	bne.n	80030bc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003080:	4b44      	ldr	r3, [pc, #272]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	4a43      	ldr	r2, [pc, #268]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6313      	str	r3, [r2, #48]	; 0x30
 800308c:	4b41      	ldr	r3, [pc, #260]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800309c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030aa:	2301      	movs	r3, #1
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80030ae:	f107 031c 	add.w	r3, r7, #28
 80030b2:	4619      	mov	r1, r3
 80030b4:	4838      	ldr	r0, [pc, #224]	; (8003198 <HAL_TIM_MspPostInit+0x180>)
 80030b6:	f002 fb0b 	bl	80056d0 <HAL_GPIO_Init>
}
 80030ba:	e064      	b.n	8003186 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a36      	ldr	r2, [pc, #216]	; (800319c <HAL_TIM_MspPostInit+0x184>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d11c      	bne.n	8003100 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c6:	4b33      	ldr	r3, [pc, #204]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a32      	ldr	r2, [pc, #200]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 80030cc:	f043 0302 	orr.w	r3, r3, #2
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80030de:	2310      	movs	r3, #16
 80030e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ea:	2300      	movs	r3, #0
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030ee:	2302      	movs	r3, #2
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80030f2:	f107 031c 	add.w	r3, r7, #28
 80030f6:	4619      	mov	r1, r3
 80030f8:	4829      	ldr	r0, [pc, #164]	; (80031a0 <HAL_TIM_MspPostInit+0x188>)
 80030fa:	f002 fae9 	bl	80056d0 <HAL_GPIO_Init>
}
 80030fe:	e042      	b.n	8003186 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a27      	ldr	r2, [pc, #156]	; (80031a4 <HAL_TIM_MspPostInit+0x18c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d11c      	bne.n	8003144 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800310a:	4b22      	ldr	r3, [pc, #136]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	4a21      	ldr	r2, [pc, #132]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003114:	6313      	str	r3, [r2, #48]	; 0x30
 8003116:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003122:	2301      	movs	r3, #1
 8003124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	2302      	movs	r3, #2
 8003128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2300      	movs	r3, #0
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003132:	2302      	movs	r3, #2
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003136:	f107 031c 	add.w	r3, r7, #28
 800313a:	4619      	mov	r1, r3
 800313c:	481a      	ldr	r0, [pc, #104]	; (80031a8 <HAL_TIM_MspPostInit+0x190>)
 800313e:	f002 fac7 	bl	80056d0 <HAL_GPIO_Init>
}
 8003142:	e020      	b.n	8003186 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a18      	ldr	r2, [pc, #96]	; (80031ac <HAL_TIM_MspPostInit+0x194>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d11b      	bne.n	8003186 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800314e:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 8003154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <HAL_TIM_MspPostInit+0x17c>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003166:	2340      	movs	r3, #64	; 0x40
 8003168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003176:	2309      	movs	r3, #9
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800317a:	f107 031c 	add.w	r3, r7, #28
 800317e:	4619      	mov	r1, r3
 8003180:	480b      	ldr	r0, [pc, #44]	; (80031b0 <HAL_TIM_MspPostInit+0x198>)
 8003182:	f002 faa5 	bl	80056d0 <HAL_GPIO_Init>
}
 8003186:	bf00      	nop
 8003188:	3730      	adds	r7, #48	; 0x30
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40010000 	.word	0x40010000
 8003194:	40023800 	.word	0x40023800
 8003198:	40020000 	.word	0x40020000
 800319c:	40000400 	.word	0x40000400
 80031a0:	40020400 	.word	0x40020400
 80031a4:	40000c00 	.word	0x40000c00
 80031a8:	40022000 	.word	0x40022000
 80031ac:	40001800 	.word	0x40001800
 80031b0:	40021c00 	.word	0x40021c00

080031b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08c      	sub	sp, #48	; 0x30
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031bc:	f107 031c 	add.w	r3, r7, #28
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a3c      	ldr	r2, [pc, #240]	; (80032c4 <HAL_UART_MspInit+0x110>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d145      	bne.n	8003262 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031d6:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <HAL_UART_MspInit+0x114>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a3b      	ldr	r2, [pc, #236]	; (80032c8 <HAL_UART_MspInit+0x114>)
 80031dc:	f043 0310 	orr.w	r3, r3, #16
 80031e0:	6453      	str	r3, [r2, #68]	; 0x44
 80031e2:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <HAL_UART_MspInit+0x114>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ee:	4b36      	ldr	r3, [pc, #216]	; (80032c8 <HAL_UART_MspInit+0x114>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a35      	ldr	r2, [pc, #212]	; (80032c8 <HAL_UART_MspInit+0x114>)
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b33      	ldr	r3, [pc, #204]	; (80032c8 <HAL_UART_MspInit+0x114>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	4b30      	ldr	r3, [pc, #192]	; (80032c8 <HAL_UART_MspInit+0x114>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a2f      	ldr	r2, [pc, #188]	; (80032c8 <HAL_UART_MspInit+0x114>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <HAL_UART_MspInit+0x114>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322a:	2300      	movs	r3, #0
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800322e:	2307      	movs	r3, #7
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003232:	f107 031c 	add.w	r3, r7, #28
 8003236:	4619      	mov	r1, r3
 8003238:	4824      	ldr	r0, [pc, #144]	; (80032cc <HAL_UART_MspInit+0x118>)
 800323a:	f002 fa49 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800323e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003244:	2302      	movs	r3, #2
 8003246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324c:	2300      	movs	r3, #0
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003250:	2307      	movs	r3, #7
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003254:	f107 031c 	add.w	r3, r7, #28
 8003258:	4619      	mov	r1, r3
 800325a:	481d      	ldr	r0, [pc, #116]	; (80032d0 <HAL_UART_MspInit+0x11c>)
 800325c:	f002 fa38 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003260:	e02c      	b.n	80032bc <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1b      	ldr	r2, [pc, #108]	; (80032d4 <HAL_UART_MspInit+0x120>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d127      	bne.n	80032bc <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800326c:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <HAL_UART_MspInit+0x114>)
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <HAL_UART_MspInit+0x114>)
 8003272:	f043 0320 	orr.w	r3, r3, #32
 8003276:	6453      	str	r3, [r2, #68]	; 0x44
 8003278:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <HAL_UART_MspInit+0x114>)
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003284:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <HAL_UART_MspInit+0x114>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	4a0f      	ldr	r2, [pc, #60]	; (80032c8 <HAL_UART_MspInit+0x114>)
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	6313      	str	r3, [r2, #48]	; 0x30
 8003290:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <HAL_UART_MspInit+0x114>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800329c:	23c0      	movs	r3, #192	; 0xc0
 800329e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a0:	2302      	movs	r3, #2
 80032a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a8:	2303      	movs	r3, #3
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80032ac:	2308      	movs	r3, #8
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b0:	f107 031c 	add.w	r3, r7, #28
 80032b4:	4619      	mov	r1, r3
 80032b6:	4808      	ldr	r0, [pc, #32]	; (80032d8 <HAL_UART_MspInit+0x124>)
 80032b8:	f002 fa0a 	bl	80056d0 <HAL_GPIO_Init>
}
 80032bc:	bf00      	nop
 80032be:	3730      	adds	r7, #48	; 0x30
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020400 	.word	0x40020400
 80032d0:	40020000 	.word	0x40020000
 80032d4:	40011400 	.word	0x40011400
 80032d8:	40020800 	.word	0x40020800

080032dc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80032f0:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <HAL_FMC_MspInit+0x100>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d16d      	bne.n	80033d4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80032f8:	4b38      	ldr	r3, [pc, #224]	; (80033dc <HAL_FMC_MspInit+0x100>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80032fe:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <HAL_FMC_MspInit+0x104>)
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	4a37      	ldr	r2, [pc, #220]	; (80033e0 <HAL_FMC_MspInit+0x104>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6393      	str	r3, [r2, #56]	; 0x38
 800330a:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <HAL_FMC_MspInit+0x104>)
 800330c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8003316:	f64f 7383 	movw	r3, #65411	; 0xff83
 800331a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331c:	2302      	movs	r3, #2
 800331e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003324:	2303      	movs	r3, #3
 8003326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003328:	230c      	movs	r3, #12
 800332a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	4619      	mov	r1, r3
 8003330:	482c      	ldr	r0, [pc, #176]	; (80033e4 <HAL_FMC_MspInit+0x108>)
 8003332:	f002 f9cd 	bl	80056d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8003336:	f248 1333 	movw	r3, #33075	; 0x8133
 800333a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003344:	2303      	movs	r3, #3
 8003346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003348:	230c      	movs	r3, #12
 800334a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	4619      	mov	r1, r3
 8003350:	4825      	ldr	r0, [pc, #148]	; (80033e8 <HAL_FMC_MspInit+0x10c>)
 8003352:	f002 f9bd 	bl	80056d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8003356:	f24c 7303 	movw	r3, #50947	; 0xc703
 800335a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003364:	2303      	movs	r3, #3
 8003366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003368:	230c      	movs	r3, #12
 800336a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	4619      	mov	r1, r3
 8003370:	481e      	ldr	r0, [pc, #120]	; (80033ec <HAL_FMC_MspInit+0x110>)
 8003372:	f002 f9ad 	bl	80056d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003376:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800337a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003388:	230c      	movs	r3, #12
 800338a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4817      	ldr	r0, [pc, #92]	; (80033f0 <HAL_FMC_MspInit+0x114>)
 8003392:	f002 f99d 	bl	80056d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003396:	2328      	movs	r3, #40	; 0x28
 8003398:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a2:	2303      	movs	r3, #3
 80033a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033a6:	230c      	movs	r3, #12
 80033a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	4811      	ldr	r0, [pc, #68]	; (80033f4 <HAL_FMC_MspInit+0x118>)
 80033b0:	f002 f98e 	bl	80056d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80033b4:	2308      	movs	r3, #8
 80033b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033c4:	230c      	movs	r3, #12
 80033c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	480a      	ldr	r0, [pc, #40]	; (80033f8 <HAL_FMC_MspInit+0x11c>)
 80033ce:	f002 f97f 	bl	80056d0 <HAL_GPIO_Init>
 80033d2:	e000      	b.n	80033d6 <HAL_FMC_MspInit+0xfa>
    return;
 80033d4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200003a0 	.word	0x200003a0
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40021800 	.word	0x40021800
 80033ec:	40020c00 	.word	0x40020c00
 80033f0:	40021400 	.word	0x40021400
 80033f4:	40021c00 	.word	0x40021c00
 80033f8:	40020800 	.word	0x40020800

080033fc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003404:	f7ff ff6a 	bl	80032dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a2b      	ldr	r2, [pc, #172]	; (80034cc <HAL_SAI_MspInit+0xbc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d124      	bne.n	800346c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_SAI_MspInit+0xc0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10b      	bne.n	8003442 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800342a:	4b2a      	ldr	r3, [pc, #168]	; (80034d4 <HAL_SAI_MspInit+0xc4>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <HAL_SAI_MspInit+0xc4>)
 8003430:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003434:	6453      	str	r3, [r2, #68]	; 0x44
 8003436:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <HAL_SAI_MspInit+0xc4>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003442:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <HAL_SAI_MspInit+0xc0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <HAL_SAI_MspInit+0xc0>)
 800344a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800344c:	23f0      	movs	r3, #240	; 0xf0
 800344e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800345c:	230a      	movs	r3, #10
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	4619      	mov	r1, r3
 8003466:	481c      	ldr	r0, [pc, #112]	; (80034d8 <HAL_SAI_MspInit+0xc8>)
 8003468:	f002 f932 	bl	80056d0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1a      	ldr	r2, [pc, #104]	; (80034dc <HAL_SAI_MspInit+0xcc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d125      	bne.n	80034c2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <HAL_SAI_MspInit+0xc0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800347e:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <HAL_SAI_MspInit+0xc4>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <HAL_SAI_MspInit+0xc4>)
 8003484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003488:	6453      	str	r3, [r2, #68]	; 0x44
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_SAI_MspInit+0xc4>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_SAI_MspInit+0xc0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	4a0c      	ldr	r2, [pc, #48]	; (80034d0 <HAL_SAI_MspInit+0xc0>)
 800349e:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80034a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ae:	2300      	movs	r3, #0
 80034b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80034b2:	230a      	movs	r3, #10
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	4808      	ldr	r0, [pc, #32]	; (80034e0 <HAL_SAI_MspInit+0xd0>)
 80034be:	f002 f907 	bl	80056d0 <HAL_GPIO_Init>

    }
}
 80034c2:	bf00      	nop
 80034c4:	3728      	adds	r7, #40	; 0x28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40015c04 	.word	0x40015c04
 80034d0:	200003a4 	.word	0x200003a4
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40022000 	.word	0x40022000
 80034dc:	40015c24 	.word	0x40015c24
 80034e0:	40021800 	.word	0x40021800

080034e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08c      	sub	sp, #48	; 0x30
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80034f4:	2200      	movs	r2, #0
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	2036      	movs	r0, #54	; 0x36
 80034fa:	f001 fabb 	bl	8004a74 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80034fe:	2036      	movs	r0, #54	; 0x36
 8003500:	f001 fad4 	bl	8004aac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003504:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <HAL_InitTick+0xa0>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <HAL_InitTick+0xa0>)
 800350a:	f043 0310 	orr.w	r3, r3, #16
 800350e:	6413      	str	r3, [r2, #64]	; 0x40
 8003510:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <HAL_InitTick+0xa0>)
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800351c:	f107 0210 	add.w	r2, r7, #16
 8003520:	f107 0314 	add.w	r3, r7, #20
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fbde 	bl	8006ce8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800352c:	f003 fbb4 	bl	8006c98 <HAL_RCC_GetPCLK1Freq>
 8003530:	4603      	mov	r3, r0
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	4a13      	ldr	r2, [pc, #76]	; (8003588 <HAL_InitTick+0xa4>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	0c9b      	lsrs	r3, r3, #18
 8003540:	3b01      	subs	r3, #1
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003544:	4b11      	ldr	r3, [pc, #68]	; (800358c <HAL_InitTick+0xa8>)
 8003546:	4a12      	ldr	r2, [pc, #72]	; (8003590 <HAL_InitTick+0xac>)
 8003548:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_InitTick+0xa8>)
 800354c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003550:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003552:	4a0e      	ldr	r2, [pc, #56]	; (800358c <HAL_InitTick+0xa8>)
 8003554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003556:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_InitTick+0xa8>)
 800355a:	2200      	movs	r2, #0
 800355c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_InitTick+0xa8>)
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003564:	4809      	ldr	r0, [pc, #36]	; (800358c <HAL_InitTick+0xa8>)
 8003566:	f006 f857 	bl	8009618 <HAL_TIM_Base_Init>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003570:	4806      	ldr	r0, [pc, #24]	; (800358c <HAL_InitTick+0xa8>)
 8003572:	f006 f87d 	bl	8009670 <HAL_TIM_Base_Start_IT>
 8003576:	4603      	mov	r3, r0
 8003578:	e000      	b.n	800357c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
}
 800357c:	4618      	mov	r0, r3
 800357e:	3730      	adds	r7, #48	; 0x30
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40023800 	.word	0x40023800
 8003588:	431bde83 	.word	0x431bde83
 800358c:	2000c6d8 	.word	0x2000c6d8
 8003590:	40001000 	.word	0x40001000

08003594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035a6:	e7fe      	b.n	80035a6 <HardFault_Handler+0x4>

080035a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035ac:	e7fe      	b.n	80035ac <MemManage_Handler+0x4>

080035ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035b2:	e7fe      	b.n	80035b2 <BusFault_Handler+0x4>

080035b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b8:	e7fe      	b.n	80035b8 <UsageFault_Handler+0x4>

080035ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80035cc:	4802      	ldr	r0, [pc, #8]	; (80035d8 <CAN1_RX0_IRQHandler+0x10>)
 80035ce:	f000 ff4d 	bl	800446c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2000c5d4 	.word	0x2000c5d4

080035dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035e0:	4802      	ldr	r0, [pc, #8]	; (80035ec <TIM6_DAC_IRQHandler+0x10>)
 80035e2:	f006 f89a 	bl	800971a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	2000c6d8 	.word	0x2000c6d8

080035f0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80035f4:	4802      	ldr	r0, [pc, #8]	; (8003600 <LTDC_IRQHandler+0x10>)
 80035f6:	f002 fb17 	bl	8005c28 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	2000c2ac 	.word	0x2000c2ac

08003604 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003608:	4802      	ldr	r0, [pc, #8]	; (8003614 <DMA2D_IRQHandler+0x10>)
 800360a:	f001 fe22 	bl	8005252 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	2000c54c 	.word	0x2000c54c

08003618 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
	return 1;
 800361c:	2301      	movs	r3, #1
}
 800361e:	4618      	mov	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <_kill>:

int _kill(int pid, int sig)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003632:	f021 fb8f 	bl	8024d54 <__errno>
 8003636:	4602      	mov	r2, r0
 8003638:	2316      	movs	r3, #22
 800363a:	6013      	str	r3, [r2, #0]
	return -1;
 800363c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <_exit>:

void _exit (int status)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003650:	f04f 31ff 	mov.w	r1, #4294967295
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ffe7 	bl	8003628 <_kill>
	while (1) {}		/* Make sure we hang here */
 800365a:	e7fe      	b.n	800365a <_exit+0x12>

0800365c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	e00a      	b.n	8003684 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800366e:	f3af 8000 	nop.w
 8003672:	4601      	mov	r1, r0
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	60ba      	str	r2, [r7, #8]
 800367a:	b2ca      	uxtb	r2, r1
 800367c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3301      	adds	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	dbf0      	blt.n	800366e <_read+0x12>
	}

return len;
 800368c:	687b      	ldr	r3, [r7, #4]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b086      	sub	sp, #24
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	e009      	b.n	80036bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	60ba      	str	r2, [r7, #8]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	3301      	adds	r3, #1
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	dbf1      	blt.n	80036a8 <_write+0x12>
	}
	return len;
 80036c4:	687b      	ldr	r3, [r7, #4]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <_close>:

int _close(int file)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
	return -1;
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036f6:	605a      	str	r2, [r3, #4]
	return 0;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <_isatty>:

int _isatty(int file)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
	return 1;
 800370e:	2301      	movs	r3, #1
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
	return 0;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <_sbrk+0x50>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <_sbrk+0x16>
		heap_end = &end;
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <_sbrk+0x50>)
 800374a:	4a10      	ldr	r2, [pc, #64]	; (800378c <_sbrk+0x54>)
 800374c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800374e:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <_sbrk+0x50>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <_sbrk+0x50>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	466a      	mov	r2, sp
 800375e:	4293      	cmp	r3, r2
 8003760:	d907      	bls.n	8003772 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003762:	f021 faf7 	bl	8024d54 <__errno>
 8003766:	4602      	mov	r2, r0
 8003768:	230c      	movs	r3, #12
 800376a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800376c:	f04f 33ff 	mov.w	r3, #4294967295
 8003770:	e006      	b.n	8003780 <_sbrk+0x48>
	}

	heap_end += incr;
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <_sbrk+0x50>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	4a03      	ldr	r2, [pc, #12]	; (8003788 <_sbrk+0x50>)
 800377c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800377e:	68fb      	ldr	r3, [r7, #12]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	200003a8 	.word	0x200003a8
 800378c:	2000cb90 	.word	0x2000cb90

08003790 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003794:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <SystemInit+0x28>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	4a07      	ldr	r2, [pc, #28]	; (80037b8 <SystemInit+0x28>)
 800379c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <SystemInit+0x28>)
 80037a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037aa:	609a      	str	r2, [r3, #8]
#endif
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037c2:	e003      	b.n	80037cc <LoopCopyDataInit>

080037c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037ca:	3104      	adds	r1, #4

080037cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037cc:	480b      	ldr	r0, [pc, #44]	; (80037fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037ce:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037d4:	d3f6      	bcc.n	80037c4 <CopyDataInit>
  ldr  r2, =_sbss
 80037d6:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037d8:	e002      	b.n	80037e0 <LoopFillZerobss>

080037da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037dc:	f842 3b04 	str.w	r3, [r2], #4

080037e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037e0:	4b09      	ldr	r3, [pc, #36]	; (8003808 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037e4:	d3f9      	bcc.n	80037da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037e6:	f7ff ffd3 	bl	8003790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ea:	f021 facb 	bl	8024d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ee:	f7fd fb17 	bl	8000e20 <main>
  bx  lr    
 80037f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037f4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80037f8:	080614a4 	.word	0x080614a4
  ldr  r0, =_sdata
 80037fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003800:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 8003804:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 8003808:	2000cb8c 	.word	0x2000cb8c

0800380c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800380c:	e7fe      	b.n	800380c <ADC_IRQHandler>

0800380e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003812:	2003      	movs	r0, #3
 8003814:	f001 f923 	bl	8004a5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003818:	2000      	movs	r0, #0
 800381a:	f7ff fe63 	bl	80034e4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800381e:	f7fe ff09 	bl	8002634 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_IncTick+0x20>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_IncTick+0x24>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4413      	add	r3, r2
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <HAL_IncTick+0x24>)
 800383a:	6013      	str	r3, [r2, #0]
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20000020 	.word	0x20000020
 800384c:	2000c718 	.word	0x2000c718

08003850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return uwTick;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_GetTick+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	2000c718 	.word	0x2000c718

08003868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff ffee 	bl	8003850 <HAL_GetTick>
 8003874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d005      	beq.n	800388e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_Delay+0x40>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800388e:	bf00      	nop
 8003890:	f7ff ffde 	bl	8003850 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	429a      	cmp	r2, r3
 800389e:	d8f7      	bhi.n	8003890 <HAL_Delay+0x28>
  {
  }
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000020 	.word	0x20000020

080038ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e031      	b.n	8003926 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fe feda 	bl	8002684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d116      	bne.n	8003918 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <HAL_ADC_Init+0x84>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	f043 0202 	orr.w	r2, r3, #2
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f964 	bl	8003bc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
 8003916:	e001      	b.n	800391c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	ffffeefd 	.word	0xffffeefd

08003934 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x1c>
 800394c:	2302      	movs	r3, #2
 800394e:	e12a      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x272>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b09      	cmp	r3, #9
 800395e:	d93a      	bls.n	80039d6 <HAL_ADC_ConfigChannel+0xa2>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003968:	d035      	beq.n	80039d6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68d9      	ldr	r1, [r3, #12]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	4613      	mov	r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4413      	add	r3, r2
 800397e:	3b1e      	subs	r3, #30
 8003980:	2207      	movs	r2, #7
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	400a      	ands	r2, r1
 800398e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a87      	ldr	r2, [pc, #540]	; (8003bb4 <HAL_ADC_ConfigChannel+0x280>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d10a      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68d9      	ldr	r1, [r3, #12]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	061a      	lsls	r2, r3, #24
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ae:	e035      	b.n	8003a1c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68d9      	ldr	r1, [r3, #12]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	4618      	mov	r0, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4403      	add	r3, r0
 80039c8:	3b1e      	subs	r3, #30
 80039ca:	409a      	lsls	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039d4:	e022      	b.n	8003a1c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6919      	ldr	r1, [r3, #16]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	4613      	mov	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	4413      	add	r3, r2
 80039ea:	2207      	movs	r2, #7
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43da      	mvns	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	400a      	ands	r2, r1
 80039f8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6919      	ldr	r1, [r3, #16]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4403      	add	r3, r0
 8003a12:	409a      	lsls	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b06      	cmp	r3, #6
 8003a22:	d824      	bhi.n	8003a6e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	3b05      	subs	r3, #5
 8003a36:	221f      	movs	r2, #31
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43da      	mvns	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	400a      	ands	r2, r1
 8003a44:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	4618      	mov	r0, r3
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3b05      	subs	r3, #5
 8003a60:	fa00 f203 	lsl.w	r2, r0, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8003a6c:	e04c      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d824      	bhi.n	8003ac0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	3b23      	subs	r3, #35	; 0x23
 8003a88:	221f      	movs	r2, #31
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	400a      	ands	r2, r1
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	3b23      	subs	r3, #35	; 0x23
 8003ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
 8003abe:	e023      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	3b41      	subs	r3, #65	; 0x41
 8003ad2:	221f      	movs	r2, #31
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	400a      	ands	r2, r1
 8003ae0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	4618      	mov	r0, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	3b41      	subs	r3, #65	; 0x41
 8003afc:	fa00 f203 	lsl.w	r2, r0, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <HAL_ADC_ConfigChannel+0x284>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10a      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x1f4>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b1a:	d105      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b1c:	4b27      	ldr	r3, [pc, #156]	; (8003bbc <HAL_ADC_ConfigChannel+0x288>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <HAL_ADC_ConfigChannel+0x288>)
 8003b22:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b26:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <HAL_ADC_ConfigChannel+0x284>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d109      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x212>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b12      	cmp	r3, #18
 8003b38:	d105      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b3a:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <HAL_ADC_ConfigChannel+0x288>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4a1f      	ldr	r2, [pc, #124]	; (8003bbc <HAL_ADC_ConfigChannel+0x288>)
 8003b40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <HAL_ADC_ConfigChannel+0x284>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d125      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x268>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <HAL_ADC_ConfigChannel+0x280>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d003      	beq.n	8003b62 <HAL_ADC_ConfigChannel+0x22e>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b11      	cmp	r3, #17
 8003b60:	d11c      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b62:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <HAL_ADC_ConfigChannel+0x288>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4a15      	ldr	r2, [pc, #84]	; (8003bbc <HAL_ADC_ConfigChannel+0x288>)
 8003b68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b6c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <HAL_ADC_ConfigChannel+0x280>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d111      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <HAL_ADC_ConfigChannel+0x28c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <HAL_ADC_ConfigChannel+0x290>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	0c9a      	lsrs	r2, r3, #18
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b8e:	e002      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f9      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	10000012 	.word	0x10000012
 8003bb8:	40012000 	.word	0x40012000
 8003bbc:	40012300 	.word	0x40012300
 8003bc0:	20000018 	.word	0x20000018
 8003bc4:	431bde83 	.word	0x431bde83

08003bc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003bd0:	4b78      	ldr	r3, [pc, #480]	; (8003db4 <ADC_Init+0x1ec>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4a77      	ldr	r2, [pc, #476]	; (8003db4 <ADC_Init+0x1ec>)
 8003bd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003bda:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003bdc:	4b75      	ldr	r3, [pc, #468]	; (8003db4 <ADC_Init+0x1ec>)
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4973      	ldr	r1, [pc, #460]	; (8003db4 <ADC_Init+0x1ec>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	021a      	lsls	r2, r3, #8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6899      	ldr	r1, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	4a58      	ldr	r2, [pc, #352]	; (8003db8 <ADC_Init+0x1f0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d022      	beq.n	8003ca2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6899      	ldr	r1, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6899      	ldr	r1, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	e00f      	b.n	8003cc2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0202 	bic.w	r2, r2, #2
 8003cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6899      	ldr	r1, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	005a      	lsls	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01b      	beq.n	8003d28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	035a      	lsls	r2, r3, #13
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	e007      	b.n	8003d38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	051a      	lsls	r2, r3, #20
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6899      	ldr	r1, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d7a:	025a      	lsls	r2, r3, #9
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6899      	ldr	r1, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	029a      	lsls	r2, r3, #10
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	609a      	str	r2, [r3, #8]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40012300 	.word	0x40012300
 8003db8:	0f000001 	.word	0x0f000001

08003dbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0ed      	b.n	8003faa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fe fcac 	bl	8002738 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0202 	bic.w	r2, r2, #2
 8003dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003df0:	f7ff fd2e 	bl	8003850 <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003df6:	e012      	b.n	8003e1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003df8:	f7ff fd2a 	bl	8003850 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b0a      	cmp	r3, #10
 8003e04:	d90b      	bls.n	8003e1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2205      	movs	r2, #5
 8003e16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0c5      	b.n	8003faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e5      	bne.n	8003df8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e3c:	f7ff fd08 	bl	8003850 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e42:	e012      	b.n	8003e6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e44:	f7ff fd04 	bl	8003850 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b0a      	cmp	r3, #10
 8003e50:	d90b      	bls.n	8003e6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2205      	movs	r2, #5
 8003e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e09f      	b.n	8003faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0e5      	beq.n	8003e44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	7e1b      	ldrb	r3, [r3, #24]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d108      	bne.n	8003e92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e007      	b.n	8003ea2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	7e5b      	ldrb	r3, [r3, #25]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d108      	bne.n	8003ebc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e007      	b.n	8003ecc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7e9b      	ldrb	r3, [r3, #26]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d108      	bne.n	8003ee6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0220 	orr.w	r2, r2, #32
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e007      	b.n	8003ef6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0220 	bic.w	r2, r2, #32
 8003ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7edb      	ldrb	r3, [r3, #27]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d108      	bne.n	8003f10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0210 	bic.w	r2, r2, #16
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e007      	b.n	8003f20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0210 	orr.w	r2, r2, #16
 8003f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	7f1b      	ldrb	r3, [r3, #28]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d108      	bne.n	8003f3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0208 	orr.w	r2, r2, #8
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e007      	b.n	8003f4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0208 	bic.w	r2, r2, #8
 8003f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	7f5b      	ldrb	r3, [r3, #29]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d108      	bne.n	8003f64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0204 	orr.w	r2, r2, #4
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e007      	b.n	8003f74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0204 	bic.w	r2, r2, #4
 8003f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	ea42 0103 	orr.w	r1, r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	1e5a      	subs	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d003      	beq.n	8003fda <HAL_CAN_ConfigFilter+0x26>
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	f040 80be 	bne.w	8004156 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003fda:	4b65      	ldr	r3, [pc, #404]	; (8004170 <HAL_CAN_ConfigFilter+0x1bc>)
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fe4:	f043 0201 	orr.w	r2, r3, #1
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ff4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	431a      	orrs	r2, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	2201      	movs	r2, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	43db      	mvns	r3, r3
 800402c:	401a      	ands	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d123      	bne.n	8004084 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	43db      	mvns	r3, r3
 8004046:	401a      	ands	r2, r3
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800405e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	3248      	adds	r2, #72	; 0x48
 8004064:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004078:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800407a:	6979      	ldr	r1, [r7, #20]
 800407c:	3348      	adds	r3, #72	; 0x48
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	440b      	add	r3, r1
 8004082:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d122      	bne.n	80040d2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	431a      	orrs	r2, r3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	3248      	adds	r2, #72	; 0x48
 80040b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040c8:	6979      	ldr	r1, [r7, #20]
 80040ca:	3348      	adds	r3, #72	; 0x48
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	401a      	ands	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80040ec:	e007      	b.n	80040fe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	43db      	mvns	r3, r3
 8004110:	401a      	ands	r2, r3
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004118:	e007      	b.n	800412a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	431a      	orrs	r2, r3
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d107      	bne.n	8004142 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	431a      	orrs	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004148:	f023 0201 	bic.w	r2, r3, #1
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e006      	b.n	8004164 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	40006400 	.word	0x40006400

08004174 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d12e      	bne.n	80041e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0201 	bic.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041a0:	f7ff fb56 	bl	8003850 <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041a6:	e012      	b.n	80041ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041a8:	f7ff fb52 	bl	8003850 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b0a      	cmp	r3, #10
 80041b4:	d90b      	bls.n	80041ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2205      	movs	r2, #5
 80041c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e012      	b.n	80041f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e5      	bne.n	80041a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e006      	b.n	80041f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
  }
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004210:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004212:	7dfb      	ldrb	r3, [r7, #23]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d003      	beq.n	8004220 <HAL_CAN_GetRxMessage+0x24>
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	2b02      	cmp	r3, #2
 800421c:	f040 80f3 	bne.w	8004406 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10e      	bne.n	8004244 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d116      	bne.n	8004262 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0e7      	b.n	8004414 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d107      	bne.n	8004262 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e0d8      	b.n	8004414 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	331b      	adds	r3, #27
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	4413      	add	r3, r2
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0204 	and.w	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10c      	bne.n	800429a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	331b      	adds	r3, #27
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	4413      	add	r3, r2
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	0d5b      	lsrs	r3, r3, #21
 8004290:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	e00b      	b.n	80042b2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	331b      	adds	r3, #27
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	4413      	add	r3, r2
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	08db      	lsrs	r3, r3, #3
 80042aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	331b      	adds	r3, #27
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	4413      	add	r3, r2
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0202 	and.w	r2, r3, #2
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	331b      	adds	r3, #27
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	4413      	add	r3, r2
 80042d4:	3304      	adds	r3, #4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 020f 	and.w	r2, r3, #15
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	331b      	adds	r3, #27
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	4413      	add	r3, r2
 80042ec:	3304      	adds	r3, #4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	0a1b      	lsrs	r3, r3, #8
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	331b      	adds	r3, #27
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	4413      	add	r3, r2
 8004304:	3304      	adds	r3, #4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	b29a      	uxth	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	4413      	add	r3, r2
 800431a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	4413      	add	r3, r2
 8004330:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	0a1a      	lsrs	r2, r3, #8
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	4413      	add	r3, r2
 800434a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	0c1a      	lsrs	r2, r3, #16
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	3302      	adds	r3, #2
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	4413      	add	r3, r2
 8004364:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	0e1a      	lsrs	r2, r3, #24
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	3303      	adds	r3, #3
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	4413      	add	r3, r2
 800437e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	3304      	adds	r3, #4
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	4413      	add	r3, r2
 8004396:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	0a1a      	lsrs	r2, r3, #8
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	3305      	adds	r3, #5
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	0c1a      	lsrs	r2, r3, #16
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	3306      	adds	r3, #6
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0e1a      	lsrs	r2, r3, #24
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	3307      	adds	r3, #7
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d108      	bne.n	80043f2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0220 	orr.w	r2, r2, #32
 80043ee:	60da      	str	r2, [r3, #12]
 80043f0:	e007      	b.n	8004402 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0220 	orr.w	r2, r2, #32
 8004400:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e006      	b.n	8004414 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
  }
}
 8004414:	4618      	mov	r0, r3
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004430:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d002      	beq.n	800443e <HAL_CAN_ActivateNotification+0x1e>
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d109      	bne.n	8004452 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6959      	ldr	r1, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e006      	b.n	8004460 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
  }
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004474:	2300      	movs	r3, #0
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d07c      	beq.n	80045ac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d023      	beq.n	8004504 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2201      	movs	r2, #1
 80044c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f97d 	bl	80047ce <HAL_CAN_TxMailbox0CompleteCallback>
 80044d4:	e016      	b.n	8004504 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
 80044e8:	e00c      	b.n	8004504 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	e002      	b.n	8004504 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f983 	bl	800480a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d024      	beq.n	8004558 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004516:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f95d 	bl	80047e2 <HAL_CAN_TxMailbox1CompleteCallback>
 8004528:	e016      	b.n	8004558 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004530:	2b00      	cmp	r3, #0
 8004532:	d004      	beq.n	800453e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
 800453c:	e00c      	b.n	8004558 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
 8004550:	e002      	b.n	8004558 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f963 	bl	800481e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d024      	beq.n	80045ac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800456a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f93d 	bl	80047f6 <HAL_CAN_TxMailbox2CompleteCallback>
 800457c:	e016      	b.n	80045ac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d004      	beq.n	8004592 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
 8004590:	e00c      	b.n	80045ac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
 80045a4:	e002      	b.n	80045ac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f943 	bl	8004832 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00c      	beq.n	80045d0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d007      	beq.n	80045d0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2210      	movs	r2, #16
 80045ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d006      	beq.n	80045f2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2208      	movs	r2, #8
 80045ea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f92a 	bl	8004846 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d009      	beq.n	8004610 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fde4 	bl	80011d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00c      	beq.n	8004634 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800462a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2210      	movs	r2, #16
 8004632:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00b      	beq.n	8004656 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d006      	beq.n	8004656 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2208      	movs	r2, #8
 800464e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f90c 	bl	800486e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8f3 	bl	800485a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b00      	cmp	r3, #0
 8004686:	d006      	beq.n	8004696 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2210      	movs	r2, #16
 800468e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f8f6 	bl	8004882 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00b      	beq.n	80046b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d006      	beq.n	80046b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2208      	movs	r2, #8
 80046b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8ef 	bl	8004896 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d075      	beq.n	80047ae <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d06c      	beq.n	80047a6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	f043 0302 	orr.w	r3, r3, #2
 8004702:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	f043 0304 	orr.w	r3, r3, #4
 800471e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004726:	2b00      	cmp	r3, #0
 8004728:	d03d      	beq.n	80047a6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004730:	2b00      	cmp	r3, #0
 8004732:	d038      	beq.n	80047a6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800473a:	2b30      	cmp	r3, #48	; 0x30
 800473c:	d017      	beq.n	800476e <HAL_CAN_IRQHandler+0x302>
 800473e:	2b30      	cmp	r3, #48	; 0x30
 8004740:	d804      	bhi.n	800474c <HAL_CAN_IRQHandler+0x2e0>
 8004742:	2b10      	cmp	r3, #16
 8004744:	d009      	beq.n	800475a <HAL_CAN_IRQHandler+0x2ee>
 8004746:	2b20      	cmp	r3, #32
 8004748:	d00c      	beq.n	8004764 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800474a:	e024      	b.n	8004796 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800474c:	2b50      	cmp	r3, #80	; 0x50
 800474e:	d018      	beq.n	8004782 <HAL_CAN_IRQHandler+0x316>
 8004750:	2b60      	cmp	r3, #96	; 0x60
 8004752:	d01b      	beq.n	800478c <HAL_CAN_IRQHandler+0x320>
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d00f      	beq.n	8004778 <HAL_CAN_IRQHandler+0x30c>
            break;
 8004758:	e01d      	b.n	8004796 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	f043 0308 	orr.w	r3, r3, #8
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004762:	e018      	b.n	8004796 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	f043 0310 	orr.w	r3, r3, #16
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800476c:	e013      	b.n	8004796 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	f043 0320 	orr.w	r3, r3, #32
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004776:	e00e      	b.n	8004796 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004780:	e009      	b.n	8004796 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800478a:	e004      	b.n	8004796 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004794:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699a      	ldr	r2, [r3, #24]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80047a4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2204      	movs	r2, #4
 80047ac:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f872 	bl	80048aa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80047c6:	bf00      	nop
 80047c8:	3728      	adds	r7, #40	; 0x28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <__NVIC_SetPriorityGrouping+0x40>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048dc:	4013      	ands	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <__NVIC_SetPriorityGrouping+0x44>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ee:	4a04      	ldr	r2, [pc, #16]	; (8004900 <__NVIC_SetPriorityGrouping+0x40>)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	60d3      	str	r3, [r2, #12]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	e000ed00 	.word	0xe000ed00
 8004904:	05fa0000 	.word	0x05fa0000

08004908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800490c:	4b04      	ldr	r3, [pc, #16]	; (8004920 <__NVIC_GetPriorityGrouping+0x18>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	0a1b      	lsrs	r3, r3, #8
 8004912:	f003 0307 	and.w	r3, r3, #7
}
 8004916:	4618      	mov	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	e000ed00 	.word	0xe000ed00

08004924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800492e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004932:	2b00      	cmp	r3, #0
 8004934:	db0b      	blt.n	800494e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	f003 021f 	and.w	r2, r3, #31
 800493c:	4907      	ldr	r1, [pc, #28]	; (800495c <__NVIC_EnableIRQ+0x38>)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	2001      	movs	r0, #1
 8004946:	fa00 f202 	lsl.w	r2, r0, r2
 800494a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	e000e100 	.word	0xe000e100

08004960 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800496a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496e:	2b00      	cmp	r3, #0
 8004970:	db10      	blt.n	8004994 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	f003 021f 	and.w	r2, r3, #31
 8004978:	4909      	ldr	r1, [pc, #36]	; (80049a0 <__NVIC_DisableIRQ+0x40>)
 800497a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	2001      	movs	r0, #1
 8004982:	fa00 f202 	lsl.w	r2, r0, r2
 8004986:	3320      	adds	r3, #32
 8004988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800498c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004990:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	e000e100 	.word	0xe000e100

080049a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	6039      	str	r1, [r7, #0]
 80049ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	db0a      	blt.n	80049ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	490c      	ldr	r1, [pc, #48]	; (80049f0 <__NVIC_SetPriority+0x4c>)
 80049be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c2:	0112      	lsls	r2, r2, #4
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	440b      	add	r3, r1
 80049c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049cc:	e00a      	b.n	80049e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	4908      	ldr	r1, [pc, #32]	; (80049f4 <__NVIC_SetPriority+0x50>)
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	3b04      	subs	r3, #4
 80049dc:	0112      	lsls	r2, r2, #4
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	440b      	add	r3, r1
 80049e2:	761a      	strb	r2, [r3, #24]
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	e000e100 	.word	0xe000e100
 80049f4:	e000ed00 	.word	0xe000ed00

080049f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b089      	sub	sp, #36	; 0x24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f1c3 0307 	rsb	r3, r3, #7
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	bf28      	it	cs
 8004a16:	2304      	movcs	r3, #4
 8004a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	2b06      	cmp	r3, #6
 8004a20:	d902      	bls.n	8004a28 <NVIC_EncodePriority+0x30>
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	3b03      	subs	r3, #3
 8004a26:	e000      	b.n	8004a2a <NVIC_EncodePriority+0x32>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43da      	mvns	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a40:	f04f 31ff 	mov.w	r1, #4294967295
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4a:	43d9      	mvns	r1, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a50:	4313      	orrs	r3, r2
         );
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3724      	adds	r7, #36	; 0x24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff ff2a 	bl	80048c0 <__NVIC_SetPriorityGrouping>
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a86:	f7ff ff3f 	bl	8004908 <__NVIC_GetPriorityGrouping>
 8004a8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	6978      	ldr	r0, [r7, #20]
 8004a92:	f7ff ffb1 	bl	80049f8 <NVIC_EncodePriority>
 8004a96:	4602      	mov	r2, r0
 8004a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff ff80 	bl	80049a4 <__NVIC_SetPriority>
}
 8004aa4:	bf00      	nop
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ff32 	bl	8004924 <__NVIC_EnableIRQ>
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff ff42 	bl	8004960 <__NVIC_DisableIRQ>
}
 8004adc:	bf00      	nop
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e054      	b.n	8004ba0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7f5b      	ldrb	r3, [r3, #29]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d105      	bne.n	8004b0c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fd fe62 	bl	80027d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	791b      	ldrb	r3, [r3, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10c      	bne.n	8004b34 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a22      	ldr	r2, [pc, #136]	; (8004ba8 <HAL_CRC_Init+0xc4>)
 8004b20:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0218 	bic.w	r2, r2, #24
 8004b30:	609a      	str	r2, [r3, #8]
 8004b32:	e00c      	b.n	8004b4e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6899      	ldr	r1, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f834 	bl	8004bac <HAL_CRCEx_Polynomial_Set>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e028      	b.n	8004ba0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	795b      	ldrb	r3, [r3, #5]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d105      	bne.n	8004b62 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5e:	611a      	str	r2, [r3, #16]
 8004b60:	e004      	b.n	8004b6c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6912      	ldr	r2, [r2, #16]
 8004b6a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699a      	ldr	r2, [r3, #24]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	04c11db7 	.word	0x04c11db7

08004bac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004bbc:	231f      	movs	r3, #31
 8004bbe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004bc0:	bf00      	nop
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1e5a      	subs	r2, r3, #1
 8004bc6:	613a      	str	r2, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <HAL_CRCEx_Polynomial_Set+0x34>
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b18      	cmp	r3, #24
 8004be4:	d846      	bhi.n	8004c74 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004be6:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <HAL_CRCEx_Polynomial_Set+0x40>)
 8004be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bec:	08004c7b 	.word	0x08004c7b
 8004bf0:	08004c75 	.word	0x08004c75
 8004bf4:	08004c75 	.word	0x08004c75
 8004bf8:	08004c75 	.word	0x08004c75
 8004bfc:	08004c75 	.word	0x08004c75
 8004c00:	08004c75 	.word	0x08004c75
 8004c04:	08004c75 	.word	0x08004c75
 8004c08:	08004c75 	.word	0x08004c75
 8004c0c:	08004c69 	.word	0x08004c69
 8004c10:	08004c75 	.word	0x08004c75
 8004c14:	08004c75 	.word	0x08004c75
 8004c18:	08004c75 	.word	0x08004c75
 8004c1c:	08004c75 	.word	0x08004c75
 8004c20:	08004c75 	.word	0x08004c75
 8004c24:	08004c75 	.word	0x08004c75
 8004c28:	08004c75 	.word	0x08004c75
 8004c2c:	08004c5d 	.word	0x08004c5d
 8004c30:	08004c75 	.word	0x08004c75
 8004c34:	08004c75 	.word	0x08004c75
 8004c38:	08004c75 	.word	0x08004c75
 8004c3c:	08004c75 	.word	0x08004c75
 8004c40:	08004c75 	.word	0x08004c75
 8004c44:	08004c75 	.word	0x08004c75
 8004c48:	08004c75 	.word	0x08004c75
 8004c4c:	08004c51 	.word	0x08004c51
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2b06      	cmp	r3, #6
 8004c54:	d913      	bls.n	8004c7e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c5a:	e010      	b.n	8004c7e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2b07      	cmp	r3, #7
 8004c60:	d90f      	bls.n	8004c82 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c66:	e00c      	b.n	8004c82 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b0f      	cmp	r3, #15
 8004c6c:	d90b      	bls.n	8004c86 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c72:	e008      	b.n	8004c86 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	75fb      	strb	r3, [r7, #23]
      break;
 8004c78:	e006      	b.n	8004c88 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e004      	b.n	8004c88 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c7e:	bf00      	nop
 8004c80:	e002      	b.n	8004c88 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c82:	bf00      	nop
 8004c84:	e000      	b.n	8004c88 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c86:	bf00      	nop
  }
  if (status == HAL_OK)
 8004c88:	7dfb      	ldrb	r3, [r7, #23]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10d      	bne.n	8004caa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f023 0118 	bic.w	r1, r3, #24
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	371c      	adds	r7, #28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e069      	b.n	8004d9e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d102      	bne.n	8004cdc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fd fd9a 	bl	8002810 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <HAL_DCMI_Init+0xf0>)
 8004cfe:	400b      	ands	r3, r1
 8004d00:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6819      	ldr	r1, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d16:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d22:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d2e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d3a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d46:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d112      	bne.n	8004d7e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	7f1b      	ldrb	r3, [r3, #28]
 8004d5c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	7f5b      	ldrb	r3, [r3, #29]
 8004d62:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d64:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	7f9b      	ldrb	r3, [r3, #30]
 8004d6a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d6c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	7fdb      	ldrb	r3, [r3, #31]
 8004d74:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d7a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d7c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 021e 	orr.w	r2, r2, #30
 8004d8c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	ffe0f007 	.word	0xffe0f007

08004dac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_DMA_Start_IT+0x26>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e048      	b.n	8004e64 <HAL_DMA_Start_IT+0xb8>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d137      	bne.n	8004e56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2202      	movs	r2, #2
 8004dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f842 	bl	8004e84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e04:	223f      	movs	r2, #63	; 0x3f
 8004e06:	409a      	lsls	r2, r3
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0216 	orr.w	r2, r2, #22
 8004e1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695a      	ldr	r2, [r3, #20]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e2a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0208 	orr.w	r2, r2, #8
 8004e42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e005      	b.n	8004e62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b40      	cmp	r3, #64	; 0x40
 8004eb0:	d108      	bne.n	8004ec4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ec2:	e007      	b.n	8004ed4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e039      	b.n	8004f66 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fd fd40 	bl	800298c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f30:	f023 0107 	bic.w	r1, r3, #7
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f46:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <HAL_DMA2D_Init+0x90>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68d1      	ldr	r1, [r2, #12]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	430b      	orrs	r3, r1
 8004f54:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	ffffc000 	.word	0xffffc000

08004f74 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e05f      	b.n	8005046 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8004f86:	4b32      	ldr	r3, [pc, #200]	; (8005050 <HAL_DMA2D_DeInit+0xdc>)
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d02e      	beq.n	8004ff0 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d107      	bne.n	8004fb0 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f8c1 	bl	8005128 <HAL_DMA2D_Abort>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d021      	beq.n	8004ff0 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e04a      	b.n	8005046 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d108      	bne.n	8004fd0 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f8f7 	bl	80051b4 <HAL_DMA2D_CLUTLoading_Abort>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d011      	beq.n	8004ff0 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e03a      	b.n	8005046 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d108      	bne.n	8004ff0 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8004fde:	2101      	movs	r1, #1
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f8e7 	bl	80051b4 <HAL_DMA2D_CLUTLoading_Abort>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e02a      	b.n	8005046 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	223f      	movs	r2, #63	; 0x3f
 8004ffe:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2200      	movs	r2, #0
 8005006:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2200      	movs	r2, #0
 800500e:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2200      	movs	r2, #0
 8005016:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2200      	movs	r2, #0
 800501e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2200      	movs	r2, #0
 8005026:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7fd fcd5 	bl	80029d8 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800

08005054 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_DMA2D_Start_IT+0x1c>
 800506c:	2302      	movs	r3, #2
 800506e:	e020      	b.n	80050b2 <HAL_DMA2D_Start_IT+0x5e>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fa84 	bl	8005598 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800509e:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b086      	sub	sp, #24
 80050be:	af02      	add	r7, sp, #8
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	607a      	str	r2, [r7, #4]
 80050c6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_DMA2D_BlendingStart_IT+0x1c>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e024      	b.n	8005120 <HAL_DMA2D_BlendingStart_IT+0x66>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2202      	movs	r2, #2
 80050e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fa4d 	bl	8005598 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800510c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0201 	orr.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 0205 	bic.w	r2, r3, #5
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0204 	orr.w	r2, r2, #4
 8005142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005144:	f7fe fb84 	bl	8003850 <HAL_GetTick>
 8005148:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800514a:	e017      	b.n	800517c <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800514c:	f7fe fb80 	bl	8003850 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800515a:	d90f      	bls.n	800517c <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2203      	movs	r2, #3
 800516c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e017      	b.n	80051ac <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e0      	bne.n	800514c <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8005198:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3324      	adds	r3, #36	; 0x24
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0204 	orr.w	r2, r2, #4
 80051d4:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d103      	bne.n	80051e4 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	331c      	adds	r3, #28
 80051e2:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80051e4:	f7fe fb34 	bl	8003850 <HAL_GetTick>
 80051e8:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80051ea:	e017      	b.n	800521c <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80051ec:	f7fe fb30 	bl	8003850 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051fa:	d90f      	bls.n	800521c <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005200:	f043 0220 	orr.w	r2, r3, #32
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2203      	movs	r2, #3
 800520c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e016      	b.n	800524a <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e1      	bne.n	80051ec <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8005236:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d026      	beq.n	80052c2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527a:	2b00      	cmp	r3, #0
 800527c:	d021      	beq.n	80052c2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800528c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	f043 0201 	orr.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2201      	movs	r2, #1
 80052a0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2204      	movs	r2, #4
 80052a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d026      	beq.n	800531a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d021      	beq.n	800531a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2220      	movs	r2, #32
 80052ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	f043 0202 	orr.w	r2, r3, #2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2204      	movs	r2, #4
 80052fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d026      	beq.n	8005372 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532a:	2b00      	cmp	r3, #0
 800532c:	d021      	beq.n	8005372 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800533c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2208      	movs	r2, #8
 8005344:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	f043 0204 	orr.w	r2, r3, #4
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2204      	movs	r2, #4
 8005356:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d013      	beq.n	80053a4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00e      	beq.n	80053a4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005394:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2204      	movs	r2, #4
 800539c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f853 	bl	800544a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d024      	beq.n	80053f8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01f      	beq.n	80053f8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053c6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2202      	movs	r2, #2
 80053ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01f      	beq.n	8005442 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01a      	beq.n	8005442 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800541a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2210      	movs	r2, #16
 8005422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f80e 	bl	800545e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_DMA2D_ConfigLayer+0x20>
 8005490:	2302      	movs	r3, #2
 8005492:	e079      	b.n	8005588 <HAL_DMA2D_ConfigLayer+0x114>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	3318      	adds	r3, #24
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	4413      	add	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	041b      	lsls	r3, r3, #16
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80054be:	4b35      	ldr	r3, [pc, #212]	; (8005594 <HAL_DMA2D_ConfigLayer+0x120>)
 80054c0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b0a      	cmp	r3, #10
 80054c8:	d003      	beq.n	80054d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b09      	cmp	r3, #9
 80054d0:	d107      	bne.n	80054e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e005      	b.n	80054ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	061b      	lsls	r3, r3, #24
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d120      	bne.n	8005536 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	ea02 0103 	and.w	r1, r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	430a      	orrs	r2, r1
 800550a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b0a      	cmp	r3, #10
 800551c:	d003      	beq.n	8005526 <HAL_DMA2D_ConfigLayer+0xb2>
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b09      	cmp	r3, #9
 8005524:	d127      	bne.n	8005576 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005532:	629a      	str	r2, [r3, #40]	; 0x28
 8005534:	e01f      	b.n	8005576 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	43db      	mvns	r3, r3
 8005540:	ea02 0103 	and.w	r1, r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	430a      	orrs	r2, r1
 800554c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b0a      	cmp	r3, #10
 800555e:	d003      	beq.n	8005568 <HAL_DMA2D_ConfigLayer+0xf4>
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b09      	cmp	r3, #9
 8005566:	d106      	bne.n	8005576 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005574:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	ff03000f 	.word	0xff03000f

08005598 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005598:	b480      	push	{r7}
 800559a:	b08b      	sub	sp, #44	; 0x2c
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	041a      	lsls	r2, r3, #16
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	431a      	orrs	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055d0:	d174      	bne.n	80056bc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055d8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055e0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80055e8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d108      	bne.n	800560a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	4313      	orrs	r3, r2
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
 8005608:	e053      	b.n	80056b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d106      	bne.n	8005620 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	4313      	orrs	r3, r2
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
 800561e:	e048      	b.n	80056b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d111      	bne.n	800564c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	0cdb      	lsrs	r3, r3, #19
 800562c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	0a9b      	lsrs	r3, r3, #10
 8005632:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	08db      	lsrs	r3, r3, #3
 8005638:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	02db      	lsls	r3, r3, #11
 8005642:	4313      	orrs	r3, r2
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
 800564a:	e032      	b.n	80056b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b03      	cmp	r3, #3
 8005652:	d117      	bne.n	8005684 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	0fdb      	lsrs	r3, r3, #31
 8005658:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	0cdb      	lsrs	r3, r3, #19
 800565e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	0adb      	lsrs	r3, r3, #11
 8005664:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	08db      	lsrs	r3, r3, #3
 800566a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	029b      	lsls	r3, r3, #10
 8005674:	431a      	orrs	r2, r3
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	03db      	lsls	r3, r3, #15
 800567a:	4313      	orrs	r3, r2
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	e016      	b.n	80056b2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	0f1b      	lsrs	r3, r3, #28
 8005688:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	0d1b      	lsrs	r3, r3, #20
 800568e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	0b1b      	lsrs	r3, r3, #12
 8005694:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	011a      	lsls	r2, r3, #4
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	431a      	orrs	r2, r3
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	031b      	lsls	r3, r3, #12
 80056aa:	4313      	orrs	r3, r2
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80056ba:	e003      	b.n	80056c4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	60da      	str	r2, [r3, #12]
}
 80056c4:	bf00      	nop
 80056c6:	372c      	adds	r7, #44	; 0x2c
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b089      	sub	sp, #36	; 0x24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	e175      	b.n	80059dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80056f0:	2201      	movs	r2, #1
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4013      	ands	r3, r2
 8005702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	429a      	cmp	r2, r3
 800570a:	f040 8164 	bne.w	80059d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d00b      	beq.n	800572e <HAL_GPIO_Init+0x5e>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d007      	beq.n	800572e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005722:	2b11      	cmp	r3, #17
 8005724:	d003      	beq.n	800572e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b12      	cmp	r3, #18
 800572c:	d130      	bne.n	8005790 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	2203      	movs	r2, #3
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43db      	mvns	r3, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4013      	ands	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4313      	orrs	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005764:	2201      	movs	r2, #1
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43db      	mvns	r3, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4013      	ands	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	091b      	lsrs	r3, r3, #4
 800577a:	f003 0201 	and.w	r2, r3, #1
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	2203      	movs	r2, #3
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	43db      	mvns	r3, r3
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	4013      	ands	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d003      	beq.n	80057d0 <HAL_GPIO_Init+0x100>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b12      	cmp	r3, #18
 80057ce:	d123      	bne.n	8005818 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	08da      	lsrs	r2, r3, #3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3208      	adds	r2, #8
 80057d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	220f      	movs	r2, #15
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4013      	ands	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4313      	orrs	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	08da      	lsrs	r2, r3, #3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3208      	adds	r2, #8
 8005812:	69b9      	ldr	r1, [r7, #24]
 8005814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	2203      	movs	r2, #3
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	43db      	mvns	r3, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4013      	ands	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f003 0203 	and.w	r2, r3, #3
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4313      	orrs	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80be 	beq.w	80059d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800585a:	4b65      	ldr	r3, [pc, #404]	; (80059f0 <HAL_GPIO_Init+0x320>)
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	4a64      	ldr	r2, [pc, #400]	; (80059f0 <HAL_GPIO_Init+0x320>)
 8005860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005864:	6453      	str	r3, [r2, #68]	; 0x44
 8005866:	4b62      	ldr	r3, [pc, #392]	; (80059f0 <HAL_GPIO_Init+0x320>)
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005872:	4a60      	ldr	r2, [pc, #384]	; (80059f4 <HAL_GPIO_Init+0x324>)
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	089b      	lsrs	r3, r3, #2
 8005878:	3302      	adds	r3, #2
 800587a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800587e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	220f      	movs	r2, #15
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	43db      	mvns	r3, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4013      	ands	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a57      	ldr	r2, [pc, #348]	; (80059f8 <HAL_GPIO_Init+0x328>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d037      	beq.n	800590e <HAL_GPIO_Init+0x23e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a56      	ldr	r2, [pc, #344]	; (80059fc <HAL_GPIO_Init+0x32c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d031      	beq.n	800590a <HAL_GPIO_Init+0x23a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a55      	ldr	r2, [pc, #340]	; (8005a00 <HAL_GPIO_Init+0x330>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d02b      	beq.n	8005906 <HAL_GPIO_Init+0x236>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a54      	ldr	r2, [pc, #336]	; (8005a04 <HAL_GPIO_Init+0x334>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d025      	beq.n	8005902 <HAL_GPIO_Init+0x232>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a53      	ldr	r2, [pc, #332]	; (8005a08 <HAL_GPIO_Init+0x338>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d01f      	beq.n	80058fe <HAL_GPIO_Init+0x22e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a52      	ldr	r2, [pc, #328]	; (8005a0c <HAL_GPIO_Init+0x33c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d019      	beq.n	80058fa <HAL_GPIO_Init+0x22a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a51      	ldr	r2, [pc, #324]	; (8005a10 <HAL_GPIO_Init+0x340>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_GPIO_Init+0x226>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a50      	ldr	r2, [pc, #320]	; (8005a14 <HAL_GPIO_Init+0x344>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00d      	beq.n	80058f2 <HAL_GPIO_Init+0x222>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a4f      	ldr	r2, [pc, #316]	; (8005a18 <HAL_GPIO_Init+0x348>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d007      	beq.n	80058ee <HAL_GPIO_Init+0x21e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a4e      	ldr	r2, [pc, #312]	; (8005a1c <HAL_GPIO_Init+0x34c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d101      	bne.n	80058ea <HAL_GPIO_Init+0x21a>
 80058e6:	2309      	movs	r3, #9
 80058e8:	e012      	b.n	8005910 <HAL_GPIO_Init+0x240>
 80058ea:	230a      	movs	r3, #10
 80058ec:	e010      	b.n	8005910 <HAL_GPIO_Init+0x240>
 80058ee:	2308      	movs	r3, #8
 80058f0:	e00e      	b.n	8005910 <HAL_GPIO_Init+0x240>
 80058f2:	2307      	movs	r3, #7
 80058f4:	e00c      	b.n	8005910 <HAL_GPIO_Init+0x240>
 80058f6:	2306      	movs	r3, #6
 80058f8:	e00a      	b.n	8005910 <HAL_GPIO_Init+0x240>
 80058fa:	2305      	movs	r3, #5
 80058fc:	e008      	b.n	8005910 <HAL_GPIO_Init+0x240>
 80058fe:	2304      	movs	r3, #4
 8005900:	e006      	b.n	8005910 <HAL_GPIO_Init+0x240>
 8005902:	2303      	movs	r3, #3
 8005904:	e004      	b.n	8005910 <HAL_GPIO_Init+0x240>
 8005906:	2302      	movs	r3, #2
 8005908:	e002      	b.n	8005910 <HAL_GPIO_Init+0x240>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <HAL_GPIO_Init+0x240>
 800590e:	2300      	movs	r3, #0
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	f002 0203 	and.w	r2, r2, #3
 8005916:	0092      	lsls	r2, r2, #2
 8005918:	4093      	lsls	r3, r2
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005920:	4934      	ldr	r1, [pc, #208]	; (80059f4 <HAL_GPIO_Init+0x324>)
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	089b      	lsrs	r3, r3, #2
 8005926:	3302      	adds	r3, #2
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800592e:	4b3c      	ldr	r3, [pc, #240]	; (8005a20 <HAL_GPIO_Init+0x350>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	43db      	mvns	r3, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4013      	ands	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005952:	4a33      	ldr	r2, [pc, #204]	; (8005a20 <HAL_GPIO_Init+0x350>)
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005958:	4b31      	ldr	r3, [pc, #196]	; (8005a20 <HAL_GPIO_Init+0x350>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	43db      	mvns	r3, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4013      	ands	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800597c:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <HAL_GPIO_Init+0x350>)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005982:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <HAL_GPIO_Init+0x350>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059a6:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <HAL_GPIO_Init+0x350>)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059ac:	4b1c      	ldr	r3, [pc, #112]	; (8005a20 <HAL_GPIO_Init+0x350>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059d0:	4a13      	ldr	r2, [pc, #76]	; (8005a20 <HAL_GPIO_Init+0x350>)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	3301      	adds	r3, #1
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	2b0f      	cmp	r3, #15
 80059e0:	f67f ae86 	bls.w	80056f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80059e4:	bf00      	nop
 80059e6:	3724      	adds	r7, #36	; 0x24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	40023800 	.word	0x40023800
 80059f4:	40013800 	.word	0x40013800
 80059f8:	40020000 	.word	0x40020000
 80059fc:	40020400 	.word	0x40020400
 8005a00:	40020800 	.word	0x40020800
 8005a04:	40020c00 	.word	0x40020c00
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	40021400 	.word	0x40021400
 8005a10:	40021800 	.word	0x40021800
 8005a14:	40021c00 	.word	0x40021c00
 8005a18:	40022000 	.word	0x40022000
 8005a1c:	40022400 	.word	0x40022400
 8005a20:	40013c00 	.word	0x40013c00

08005a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	887b      	ldrh	r3, [r7, #2]
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
 8005a40:	e001      	b.n	8005a46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a42:	2300      	movs	r3, #0
 8005a44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	807b      	strh	r3, [r7, #2]
 8005a60:	4613      	mov	r3, r2
 8005a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a64:	787b      	ldrb	r3, [r7, #1]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a6a:	887a      	ldrh	r2, [r7, #2]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a70:	e003      	b.n	8005a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a72:	887b      	ldrh	r3, [r7, #2]
 8005a74:	041a      	lsls	r2, r3, #16
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	619a      	str	r2, [r3, #24]
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e0bf      	b.n	8005c1a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fc ffac 	bl	8002a0c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005aca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6999      	ldr	r1, [r3, #24]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ae0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6899      	ldr	r1, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b4a      	ldr	r3, [pc, #296]	; (8005c24 <HAL_LTDC_Init+0x19c>)
 8005afc:	400b      	ands	r3, r1
 8005afe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6899      	ldr	r1, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68d9      	ldr	r1, [r3, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	4b3e      	ldr	r3, [pc, #248]	; (8005c24 <HAL_LTDC_Init+0x19c>)
 8005b2a:	400b      	ands	r3, r1
 8005b2c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68d9      	ldr	r1, [r3, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1a      	ldr	r2, [r3, #32]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6919      	ldr	r1, [r3, #16]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4b33      	ldr	r3, [pc, #204]	; (8005c24 <HAL_LTDC_Init+0x19c>)
 8005b58:	400b      	ands	r3, r1
 8005b5a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	041b      	lsls	r3, r3, #16
 8005b62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6919      	ldr	r1, [r3, #16]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6959      	ldr	r1, [r3, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	4b27      	ldr	r3, [pc, #156]	; (8005c24 <HAL_LTDC_Init+0x19c>)
 8005b86:	400b      	ands	r3, r1
 8005b88:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6959      	ldr	r1, [r3, #20]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0206 	orr.w	r2, r2, #6
 8005bf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	f000f800 	.word	0xf000f800

08005c28 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d023      	beq.n	8005c92 <HAL_LTDC_IRQHandler+0x6a>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01e      	beq.n	8005c92 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0204 	bic.w	r2, r2, #4
 8005c62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2204      	movs	r2, #4
 8005c6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c72:	f043 0201 	orr.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2204      	movs	r2, #4
 8005c80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f86f 	bl	8005d70 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d023      	beq.n	8005ce4 <HAL_LTDC_IRQHandler+0xbc>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01e      	beq.n	8005ce4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0202 	bic.w	r2, r2, #2
 8005cb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cc4:	f043 0202 	orr.w	r2, r3, #2
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f846 	bl	8005d70 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d01b      	beq.n	8005d26 <HAL_LTDC_IRQHandler+0xfe>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d016      	beq.n	8005d26 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f00f f97f 	bl	8015024 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01b      	beq.n	8005d68 <HAL_LTDC_IRQHandler+0x140>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d016      	beq.n	8005d68 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0208 	bic.w	r2, r2, #8
 8005d48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2208      	movs	r2, #8
 8005d50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f80e 	bl	8005d84 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d98:	b5b0      	push	{r4, r5, r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_LTDC_ConfigLayer+0x1a>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e02c      	b.n	8005e0c <HAL_LTDC_ConfigLayer+0x74>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2134      	movs	r1, #52	; 0x34
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	4413      	add	r3, r2
 8005dce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	461d      	mov	r5, r3
 8005dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f849 	bl	8005e84 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2201      	movs	r2, #1
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bdb0      	pop	{r4, r5, r7, pc}

08005e14 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_LTDC_ProgramLineEvent+0x18>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e023      	b.n	8005e74 <HAL_LTDC_ProgramLineEvent+0x60>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0201 	bic.w	r2, r2, #1
 8005e4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005e4c:	4a0c      	ldr	r2, [pc, #48]	; (8005e80 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0201 	orr.w	r2, r2, #1
 8005e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	40016800 	.word	0x40016800

08005e84 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b089      	sub	sp, #36	; 0x24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	0c1b      	lsrs	r3, r3, #16
 8005e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea0:	4413      	add	r3, r2
 8005ea2:	041b      	lsls	r3, r3, #16
 8005ea4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	01db      	lsls	r3, r3, #7
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3384      	adds	r3, #132	; 0x84
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	4611      	mov	r1, r2
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	01d2      	lsls	r2, r2, #7
 8005ec0:	440a      	add	r2, r1
 8005ec2:	3284      	adds	r2, #132	; 0x84
 8005ec4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ec8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	0c1b      	lsrs	r3, r3, #16
 8005ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eda:	4413      	add	r3, r2
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	01db      	lsls	r3, r3, #7
 8005ee8:	440b      	add	r3, r1
 8005eea:	3384      	adds	r3, #132	; 0x84
 8005eec:	4619      	mov	r1, r3
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f02:	4413      	add	r3, r2
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	01db      	lsls	r3, r3, #7
 8005f12:	4413      	add	r3, r2
 8005f14:	3384      	adds	r3, #132	; 0x84
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	01d2      	lsls	r2, r2, #7
 8005f22:	440a      	add	r2, r1
 8005f24:	3284      	adds	r2, #132	; 0x84
 8005f26:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f2a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f3a:	4413      	add	r3, r2
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4619      	mov	r1, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	01db      	lsls	r3, r3, #7
 8005f48:	440b      	add	r3, r1
 8005f4a:	3384      	adds	r3, #132	; 0x84
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	01db      	lsls	r3, r3, #7
 8005f5e:	4413      	add	r3, r2
 8005f60:	3384      	adds	r3, #132	; 0x84
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	6812      	ldr	r2, [r2, #0]
 8005f68:	4611      	mov	r1, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	01d2      	lsls	r2, r2, #7
 8005f6e:	440a      	add	r2, r1
 8005f70:	3284      	adds	r2, #132	; 0x84
 8005f72:	f023 0307 	bic.w	r3, r3, #7
 8005f76:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	01db      	lsls	r3, r3, #7
 8005f82:	4413      	add	r3, r2
 8005f84:	3384      	adds	r3, #132	; 0x84
 8005f86:	461a      	mov	r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f9e:	041b      	lsls	r3, r3, #16
 8005fa0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	061b      	lsls	r3, r3, #24
 8005fa8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	01db      	lsls	r3, r3, #7
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3384      	adds	r3, #132	; 0x84
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	01db      	lsls	r3, r3, #7
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3384      	adds	r3, #132	; 0x84
 8005fc8:	461a      	mov	r2, r3
 8005fca:	2300      	movs	r3, #0
 8005fcc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	01db      	lsls	r3, r3, #7
 8005fe8:	440b      	add	r3, r1
 8005fea:	3384      	adds	r3, #132	; 0x84
 8005fec:	4619      	mov	r1, r3
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	01db      	lsls	r3, r3, #7
 8005ffe:	4413      	add	r3, r2
 8006000:	3384      	adds	r3, #132	; 0x84
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	4611      	mov	r1, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	01d2      	lsls	r2, r2, #7
 800600e:	440a      	add	r2, r1
 8006010:	3284      	adds	r2, #132	; 0x84
 8006012:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006016:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	01db      	lsls	r3, r3, #7
 8006022:	4413      	add	r3, r2
 8006024:	3384      	adds	r3, #132	; 0x84
 8006026:	461a      	mov	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	01db      	lsls	r3, r3, #7
 8006038:	4413      	add	r3, r2
 800603a:	3384      	adds	r3, #132	; 0x84
 800603c:	69da      	ldr	r2, [r3, #28]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4619      	mov	r1, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	01db      	lsls	r3, r3, #7
 8006048:	440b      	add	r3, r1
 800604a:	3384      	adds	r3, #132	; 0x84
 800604c:	4619      	mov	r1, r3
 800604e:	4b58      	ldr	r3, [pc, #352]	; (80061b0 <LTDC_SetConfig+0x32c>)
 8006050:	4013      	ands	r3, r2
 8006052:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	68f9      	ldr	r1, [r7, #12]
 800605e:	6809      	ldr	r1, [r1, #0]
 8006060:	4608      	mov	r0, r1
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	01c9      	lsls	r1, r1, #7
 8006066:	4401      	add	r1, r0
 8006068:	3184      	adds	r1, #132	; 0x84
 800606a:	4313      	orrs	r3, r2
 800606c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	01db      	lsls	r3, r3, #7
 8006078:	4413      	add	r3, r2
 800607a:	3384      	adds	r3, #132	; 0x84
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	01db      	lsls	r3, r3, #7
 8006088:	4413      	add	r3, r2
 800608a:	3384      	adds	r3, #132	; 0x84
 800608c:	461a      	mov	r2, r3
 800608e:	2300      	movs	r3, #0
 8006090:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	01db      	lsls	r3, r3, #7
 800609c:	4413      	add	r3, r2
 800609e:	3384      	adds	r3, #132	; 0x84
 80060a0:	461a      	mov	r2, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80060b0:	2304      	movs	r3, #4
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	e01b      	b.n	80060ee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d102      	bne.n	80060c4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80060be:	2303      	movs	r3, #3
 80060c0:	61fb      	str	r3, [r7, #28]
 80060c2:	e014      	b.n	80060ee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d00b      	beq.n	80060e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d007      	beq.n	80060e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d003      	beq.n	80060e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060e0:	2b07      	cmp	r3, #7
 80060e2:	d102      	bne.n	80060ea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80060e4:	2302      	movs	r3, #2
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	e001      	b.n	80060ee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80060ea:	2301      	movs	r3, #1
 80060ec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	01db      	lsls	r3, r3, #7
 80060f8:	4413      	add	r3, r2
 80060fa:	3384      	adds	r3, #132	; 0x84
 80060fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	4611      	mov	r1, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	01d2      	lsls	r2, r2, #7
 8006108:	440a      	add	r2, r1
 800610a:	3284      	adds	r2, #132	; 0x84
 800610c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006110:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	fb02 f303 	mul.w	r3, r2, r3
 800611c:	041a      	lsls	r2, r3, #16
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6859      	ldr	r1, [r3, #4]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	1acb      	subs	r3, r1, r3
 8006128:	69f9      	ldr	r1, [r7, #28]
 800612a:	fb01 f303 	mul.w	r3, r1, r3
 800612e:	3303      	adds	r3, #3
 8006130:	68f9      	ldr	r1, [r7, #12]
 8006132:	6809      	ldr	r1, [r1, #0]
 8006134:	4608      	mov	r0, r1
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	01c9      	lsls	r1, r1, #7
 800613a:	4401      	add	r1, r0
 800613c:	3184      	adds	r1, #132	; 0x84
 800613e:	4313      	orrs	r3, r2
 8006140:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	01db      	lsls	r3, r3, #7
 800614c:	4413      	add	r3, r2
 800614e:	3384      	adds	r3, #132	; 0x84
 8006150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4619      	mov	r1, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	01db      	lsls	r3, r3, #7
 800615c:	440b      	add	r3, r1
 800615e:	3384      	adds	r3, #132	; 0x84
 8006160:	4619      	mov	r1, r3
 8006162:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <LTDC_SetConfig+0x330>)
 8006164:	4013      	ands	r3, r2
 8006166:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	01db      	lsls	r3, r3, #7
 8006172:	4413      	add	r3, r2
 8006174:	3384      	adds	r3, #132	; 0x84
 8006176:	461a      	mov	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	01db      	lsls	r3, r3, #7
 8006188:	4413      	add	r3, r2
 800618a:	3384      	adds	r3, #132	; 0x84
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	4611      	mov	r1, r2
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	01d2      	lsls	r2, r2, #7
 8006198:	440a      	add	r2, r1
 800619a:	3284      	adds	r2, #132	; 0x84
 800619c:	f043 0301 	orr.w	r3, r3, #1
 80061a0:	6013      	str	r3, [r2, #0]
}
 80061a2:	bf00      	nop
 80061a4:	3724      	adds	r7, #36	; 0x24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	fffff8f8 	.word	0xfffff8f8
 80061b4:	fffff800 	.word	0xfffff800

080061b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80061c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c6:	6013      	str	r3, [r2, #0]
}
 80061c8:	bf00      	nop
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40007000 	.word	0x40007000

080061d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80061e2:	4b23      	ldr	r3, [pc, #140]	; (8006270 <HAL_PWREx_EnableOverDrive+0x98>)
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	4a22      	ldr	r2, [pc, #136]	; (8006270 <HAL_PWREx_EnableOverDrive+0x98>)
 80061e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ec:	6413      	str	r3, [r2, #64]	; 0x40
 80061ee:	4b20      	ldr	r3, [pc, #128]	; (8006270 <HAL_PWREx_EnableOverDrive+0x98>)
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80061fa:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <HAL_PWREx_EnableOverDrive+0x9c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006204:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006206:	f7fd fb23 	bl	8003850 <HAL_GetTick>
 800620a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800620c:	e009      	b.n	8006222 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800620e:	f7fd fb1f 	bl	8003850 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800621c:	d901      	bls.n	8006222 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e022      	b.n	8006268 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006222:	4b14      	ldr	r3, [pc, #80]	; (8006274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622e:	d1ee      	bne.n	800620e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006230:	4b10      	ldr	r3, [pc, #64]	; (8006274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a0f      	ldr	r2, [pc, #60]	; (8006274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800623c:	f7fd fb08 	bl	8003850 <HAL_GetTick>
 8006240:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006242:	e009      	b.n	8006258 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006244:	f7fd fb04 	bl	8003850 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006252:	d901      	bls.n	8006258 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e007      	b.n	8006268 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <HAL_PWREx_EnableOverDrive+0x9c>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006264:	d1ee      	bne.n	8006244 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40023800 	.word	0x40023800
 8006274:	40007000 	.word	0x40007000

08006278 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af02      	add	r7, sp, #8
 800627e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006280:	f7fd fae6 	bl	8003850 <HAL_GetTick>
 8006284:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e067      	b.n	8006360 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10b      	bne.n	80062b4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7fc fc79 	bl	8002b9c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80062aa:	f241 3188 	movw	r1, #5000	; 0x1388
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f85e 	bl	8006370 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	021a      	lsls	r2, r3, #8
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	2120      	movs	r1, #32
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f856 	bl	800638c <QSPI_WaitFlagStateUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80062e4:	7afb      	ldrb	r3, [r7, #11]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d135      	bne.n	8006356 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <HAL_QSPI_Init+0xf0>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6852      	ldr	r2, [r2, #4]
 80062f8:	0611      	lsls	r1, r2, #24
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	68d2      	ldr	r2, [r2, #12]
 80062fe:	4311      	orrs	r1, r2
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	69d2      	ldr	r2, [r2, #28]
 8006304:	4311      	orrs	r1, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6a12      	ldr	r2, [r2, #32]
 800630a:	4311      	orrs	r1, r2
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	430b      	orrs	r3, r1
 8006312:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	4b14      	ldr	r3, [pc, #80]	; (800636c <HAL_QSPI_Init+0xf4>)
 800631c:	4013      	ands	r3, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6912      	ldr	r2, [r2, #16]
 8006322:	0411      	lsls	r1, r2, #16
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6952      	ldr	r2, [r2, #20]
 8006328:	4311      	orrs	r1, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6992      	ldr	r2, [r2, #24]
 800632e:	4311      	orrs	r1, r2
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6812      	ldr	r2, [r2, #0]
 8006334:	430b      	orrs	r3, r1
 8006336:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800635e:	7afb      	ldrb	r3, [r7, #11]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	00ffff2f 	.word	0x00ffff2f
 800636c:	ffe0f8fe 	.word	0xffe0f8fe

08006370 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800639c:	e01a      	b.n	80063d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d016      	beq.n	80063d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a6:	f7fd fa53 	bl	8003850 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d302      	bcc.n	80063bc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2204      	movs	r2, #4
 80063c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c8:	f043 0201 	orr.w	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e00e      	b.n	80063f2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	4013      	ands	r3, r2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bf14      	ite	ne
 80063e2:	2301      	movne	r3, #1
 80063e4:	2300      	moveq	r3, #0
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d1d6      	bne.n	800639e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006404:	2300      	movs	r3, #0
 8006406:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e291      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 8087 	beq.w	800652e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006420:	4b96      	ldr	r3, [pc, #600]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f003 030c 	and.w	r3, r3, #12
 8006428:	2b04      	cmp	r3, #4
 800642a:	d00c      	beq.n	8006446 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800642c:	4b93      	ldr	r3, [pc, #588]	; (800667c <HAL_RCC_OscConfig+0x280>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 030c 	and.w	r3, r3, #12
 8006434:	2b08      	cmp	r3, #8
 8006436:	d112      	bne.n	800645e <HAL_RCC_OscConfig+0x62>
 8006438:	4b90      	ldr	r3, [pc, #576]	; (800667c <HAL_RCC_OscConfig+0x280>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006444:	d10b      	bne.n	800645e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006446:	4b8d      	ldr	r3, [pc, #564]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d06c      	beq.n	800652c <HAL_RCC_OscConfig+0x130>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d168      	bne.n	800652c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e26b      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006466:	d106      	bne.n	8006476 <HAL_RCC_OscConfig+0x7a>
 8006468:	4b84      	ldr	r3, [pc, #528]	; (800667c <HAL_RCC_OscConfig+0x280>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a83      	ldr	r2, [pc, #524]	; (800667c <HAL_RCC_OscConfig+0x280>)
 800646e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	e02e      	b.n	80064d4 <HAL_RCC_OscConfig+0xd8>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10c      	bne.n	8006498 <HAL_RCC_OscConfig+0x9c>
 800647e:	4b7f      	ldr	r3, [pc, #508]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a7e      	ldr	r2, [pc, #504]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	4b7c      	ldr	r3, [pc, #496]	; (800667c <HAL_RCC_OscConfig+0x280>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a7b      	ldr	r2, [pc, #492]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	e01d      	b.n	80064d4 <HAL_RCC_OscConfig+0xd8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064a0:	d10c      	bne.n	80064bc <HAL_RCC_OscConfig+0xc0>
 80064a2:	4b76      	ldr	r3, [pc, #472]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a75      	ldr	r2, [pc, #468]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80064a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	4b73      	ldr	r3, [pc, #460]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a72      	ldr	r2, [pc, #456]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80064b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	e00b      	b.n	80064d4 <HAL_RCC_OscConfig+0xd8>
 80064bc:	4b6f      	ldr	r3, [pc, #444]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a6e      	ldr	r2, [pc, #440]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80064c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	4b6c      	ldr	r3, [pc, #432]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a6b      	ldr	r2, [pc, #428]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80064ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d013      	beq.n	8006504 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064dc:	f7fd f9b8 	bl	8003850 <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064e4:	f7fd f9b4 	bl	8003850 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b64      	cmp	r3, #100	; 0x64
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e21f      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064f6:	4b61      	ldr	r3, [pc, #388]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0f0      	beq.n	80064e4 <HAL_RCC_OscConfig+0xe8>
 8006502:	e014      	b.n	800652e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006504:	f7fd f9a4 	bl	8003850 <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800650c:	f7fd f9a0 	bl	8003850 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b64      	cmp	r3, #100	; 0x64
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e20b      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800651e:	4b57      	ldr	r3, [pc, #348]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f0      	bne.n	800650c <HAL_RCC_OscConfig+0x110>
 800652a:	e000      	b.n	800652e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800652c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d069      	beq.n	800660e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800653a:	4b50      	ldr	r3, [pc, #320]	; (800667c <HAL_RCC_OscConfig+0x280>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 030c 	and.w	r3, r3, #12
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006546:	4b4d      	ldr	r3, [pc, #308]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	2b08      	cmp	r3, #8
 8006550:	d11c      	bne.n	800658c <HAL_RCC_OscConfig+0x190>
 8006552:	4b4a      	ldr	r3, [pc, #296]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d116      	bne.n	800658c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800655e:	4b47      	ldr	r3, [pc, #284]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d005      	beq.n	8006576 <HAL_RCC_OscConfig+0x17a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d001      	beq.n	8006576 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e1df      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006576:	4b41      	ldr	r3, [pc, #260]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	493d      	ldr	r1, [pc, #244]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006586:	4313      	orrs	r3, r2
 8006588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800658a:	e040      	b.n	800660e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d023      	beq.n	80065dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006594:	4b39      	ldr	r3, [pc, #228]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a38      	ldr	r2, [pc, #224]	; (800667c <HAL_RCC_OscConfig+0x280>)
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a0:	f7fd f956 	bl	8003850 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a8:	f7fd f952 	bl	8003850 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e1bd      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f0      	beq.n	80065a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065c6:	4b2d      	ldr	r3, [pc, #180]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	4929      	ldr	r1, [pc, #164]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	600b      	str	r3, [r1, #0]
 80065da:	e018      	b.n	800660e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065dc:	4b27      	ldr	r3, [pc, #156]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a26      	ldr	r2, [pc, #152]	; (800667c <HAL_RCC_OscConfig+0x280>)
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e8:	f7fd f932 	bl	8003850 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065f0:	f7fd f92e 	bl	8003850 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e199      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006602:	4b1e      	ldr	r3, [pc, #120]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f0      	bne.n	80065f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d038      	beq.n	800668c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d019      	beq.n	8006656 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006622:	4b16      	ldr	r3, [pc, #88]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006626:	4a15      	ldr	r2, [pc, #84]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662e:	f7fd f90f 	bl	8003850 <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006634:	e008      	b.n	8006648 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006636:	f7fd f90b 	bl	8003850 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e176      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006648:	4b0c      	ldr	r3, [pc, #48]	; (800667c <HAL_RCC_OscConfig+0x280>)
 800664a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0f0      	beq.n	8006636 <HAL_RCC_OscConfig+0x23a>
 8006654:	e01a      	b.n	800668c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006656:	4b09      	ldr	r3, [pc, #36]	; (800667c <HAL_RCC_OscConfig+0x280>)
 8006658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665a:	4a08      	ldr	r2, [pc, #32]	; (800667c <HAL_RCC_OscConfig+0x280>)
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006662:	f7fd f8f5 	bl	8003850 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006668:	e00a      	b.n	8006680 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800666a:	f7fd f8f1 	bl	8003850 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d903      	bls.n	8006680 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e15c      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
 800667c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006680:	4b91      	ldr	r3, [pc, #580]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1ee      	bne.n	800666a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 80a4 	beq.w	80067e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800669a:	4b8b      	ldr	r3, [pc, #556]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10d      	bne.n	80066c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80066a6:	4b88      	ldr	r3, [pc, #544]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	4a87      	ldr	r2, [pc, #540]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 80066ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b0:	6413      	str	r3, [r2, #64]	; 0x40
 80066b2:	4b85      	ldr	r3, [pc, #532]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ba:	60bb      	str	r3, [r7, #8]
 80066bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066be:	2301      	movs	r3, #1
 80066c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066c2:	4b82      	ldr	r3, [pc, #520]	; (80068cc <HAL_RCC_OscConfig+0x4d0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d118      	bne.n	8006700 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80066ce:	4b7f      	ldr	r3, [pc, #508]	; (80068cc <HAL_RCC_OscConfig+0x4d0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a7e      	ldr	r2, [pc, #504]	; (80068cc <HAL_RCC_OscConfig+0x4d0>)
 80066d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066da:	f7fd f8b9 	bl	8003850 <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066e2:	f7fd f8b5 	bl	8003850 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b64      	cmp	r3, #100	; 0x64
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e120      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066f4:	4b75      	ldr	r3, [pc, #468]	; (80068cc <HAL_RCC_OscConfig+0x4d0>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0f0      	beq.n	80066e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d106      	bne.n	8006716 <HAL_RCC_OscConfig+0x31a>
 8006708:	4b6f      	ldr	r3, [pc, #444]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 800670a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670c:	4a6e      	ldr	r2, [pc, #440]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 800670e:	f043 0301 	orr.w	r3, r3, #1
 8006712:	6713      	str	r3, [r2, #112]	; 0x70
 8006714:	e02d      	b.n	8006772 <HAL_RCC_OscConfig+0x376>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10c      	bne.n	8006738 <HAL_RCC_OscConfig+0x33c>
 800671e:	4b6a      	ldr	r3, [pc, #424]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	4a69      	ldr	r2, [pc, #420]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006724:	f023 0301 	bic.w	r3, r3, #1
 8006728:	6713      	str	r3, [r2, #112]	; 0x70
 800672a:	4b67      	ldr	r3, [pc, #412]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	4a66      	ldr	r2, [pc, #408]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006730:	f023 0304 	bic.w	r3, r3, #4
 8006734:	6713      	str	r3, [r2, #112]	; 0x70
 8006736:	e01c      	b.n	8006772 <HAL_RCC_OscConfig+0x376>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	2b05      	cmp	r3, #5
 800673e:	d10c      	bne.n	800675a <HAL_RCC_OscConfig+0x35e>
 8006740:	4b61      	ldr	r3, [pc, #388]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006744:	4a60      	ldr	r2, [pc, #384]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006746:	f043 0304 	orr.w	r3, r3, #4
 800674a:	6713      	str	r3, [r2, #112]	; 0x70
 800674c:	4b5e      	ldr	r3, [pc, #376]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 800674e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006750:	4a5d      	ldr	r2, [pc, #372]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006752:	f043 0301 	orr.w	r3, r3, #1
 8006756:	6713      	str	r3, [r2, #112]	; 0x70
 8006758:	e00b      	b.n	8006772 <HAL_RCC_OscConfig+0x376>
 800675a:	4b5b      	ldr	r3, [pc, #364]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	4a5a      	ldr	r2, [pc, #360]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	6713      	str	r3, [r2, #112]	; 0x70
 8006766:	4b58      	ldr	r3, [pc, #352]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	4a57      	ldr	r2, [pc, #348]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 800676c:	f023 0304 	bic.w	r3, r3, #4
 8006770:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d015      	beq.n	80067a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677a:	f7fd f869 	bl	8003850 <HAL_GetTick>
 800677e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006780:	e00a      	b.n	8006798 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006782:	f7fd f865 	bl	8003850 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006790:	4293      	cmp	r3, r2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e0ce      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006798:	4b4b      	ldr	r3, [pc, #300]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0ee      	beq.n	8006782 <HAL_RCC_OscConfig+0x386>
 80067a4:	e014      	b.n	80067d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a6:	f7fd f853 	bl	8003850 <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067ac:	e00a      	b.n	80067c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ae:	f7fd f84f 	bl	8003850 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067bc:	4293      	cmp	r3, r2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e0b8      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067c4:	4b40      	ldr	r3, [pc, #256]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1ee      	bne.n	80067ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d105      	bne.n	80067e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067d6:	4b3c      	ldr	r3, [pc, #240]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	4a3b      	ldr	r2, [pc, #236]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 80067dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 80a4 	beq.w	8006934 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067ec:	4b36      	ldr	r3, [pc, #216]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 030c 	and.w	r3, r3, #12
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d06b      	beq.n	80068d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d149      	bne.n	8006894 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006800:	4b31      	ldr	r3, [pc, #196]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a30      	ldr	r2, [pc, #192]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800680a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680c:	f7fd f820 	bl	8003850 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006814:	f7fd f81c 	bl	8003850 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e087      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006826:	4b28      	ldr	r3, [pc, #160]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f0      	bne.n	8006814 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69da      	ldr	r2, [r3, #28]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	019b      	lsls	r3, r3, #6
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	085b      	lsrs	r3, r3, #1
 800684a:	3b01      	subs	r3, #1
 800684c:	041b      	lsls	r3, r3, #16
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	061b      	lsls	r3, r3, #24
 8006856:	4313      	orrs	r3, r2
 8006858:	4a1b      	ldr	r2, [pc, #108]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 800685a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800685e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006860:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a18      	ldr	r2, [pc, #96]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800686a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686c:	f7fc fff0 	bl	8003850 <HAL_GetTick>
 8006870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006874:	f7fc ffec 	bl	8003850 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e057      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006886:	4b10      	ldr	r3, [pc, #64]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0f0      	beq.n	8006874 <HAL_RCC_OscConfig+0x478>
 8006892:	e04f      	b.n	8006934 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006894:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a0b      	ldr	r2, [pc, #44]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 800689a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800689e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a0:	f7fc ffd6 	bl	8003850 <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068a8:	f7fc ffd2 	bl	8003850 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e03d      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ba:	4b03      	ldr	r3, [pc, #12]	; (80068c8 <HAL_RCC_OscConfig+0x4cc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f0      	bne.n	80068a8 <HAL_RCC_OscConfig+0x4ac>
 80068c6:	e035      	b.n	8006934 <HAL_RCC_OscConfig+0x538>
 80068c8:	40023800 	.word	0x40023800
 80068cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80068d0:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <HAL_RCC_OscConfig+0x544>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d028      	beq.n	8006930 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d121      	bne.n	8006930 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d11a      	bne.n	8006930 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006900:	4013      	ands	r3, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006906:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006908:	4293      	cmp	r3, r2
 800690a:	d111      	bne.n	8006930 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	3b01      	subs	r3, #1
 800691a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800691c:	429a      	cmp	r2, r3
 800691e:	d107      	bne.n	8006930 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800692c:	429a      	cmp	r2, r3
 800692e:	d001      	beq.n	8006934 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40023800 	.word	0x40023800

08006944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e0d0      	b.n	8006afe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800695c:	4b6a      	ldr	r3, [pc, #424]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d910      	bls.n	800698c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696a:	4b67      	ldr	r3, [pc, #412]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f023 020f 	bic.w	r2, r3, #15
 8006972:	4965      	ldr	r1, [pc, #404]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	4313      	orrs	r3, r2
 8006978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800697a:	4b63      	ldr	r3, [pc, #396]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d001      	beq.n	800698c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0b8      	b.n	8006afe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d020      	beq.n	80069da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d005      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069a4:	4b59      	ldr	r3, [pc, #356]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4a58      	ldr	r2, [pc, #352]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 80069aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069bc:	4b53      	ldr	r3, [pc, #332]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	4a52      	ldr	r2, [pc, #328]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 80069c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069c8:	4b50      	ldr	r3, [pc, #320]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	494d      	ldr	r1, [pc, #308]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d040      	beq.n	8006a68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d107      	bne.n	80069fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ee:	4b47      	ldr	r3, [pc, #284]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d115      	bne.n	8006a26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e07f      	b.n	8006afe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d107      	bne.n	8006a16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a06:	4b41      	ldr	r3, [pc, #260]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d109      	bne.n	8006a26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e073      	b.n	8006afe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a16:	4b3d      	ldr	r3, [pc, #244]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e06b      	b.n	8006afe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a26:	4b39      	ldr	r3, [pc, #228]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f023 0203 	bic.w	r2, r3, #3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	4936      	ldr	r1, [pc, #216]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a38:	f7fc ff0a 	bl	8003850 <HAL_GetTick>
 8006a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a3e:	e00a      	b.n	8006a56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a40:	f7fc ff06 	bl	8003850 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e053      	b.n	8006afe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a56:	4b2d      	ldr	r3, [pc, #180]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 020c 	and.w	r2, r3, #12
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d1eb      	bne.n	8006a40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a68:	4b27      	ldr	r3, [pc, #156]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d210      	bcs.n	8006a98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a76:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f023 020f 	bic.w	r2, r3, #15
 8006a7e:	4922      	ldr	r1, [pc, #136]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d001      	beq.n	8006a98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e032      	b.n	8006afe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d008      	beq.n	8006ab6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006aa4:	4b19      	ldr	r3, [pc, #100]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	4916      	ldr	r1, [pc, #88]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d009      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ac2:	4b12      	ldr	r3, [pc, #72]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	490e      	ldr	r1, [pc, #56]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ad6:	f000 f821 	bl	8006b1c <HAL_RCC_GetSysClockFreq>
 8006ada:	4601      	mov	r1, r0
 8006adc:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	091b      	lsrs	r3, r3, #4
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	4a0a      	ldr	r2, [pc, #40]	; (8006b10 <HAL_RCC_ClockConfig+0x1cc>)
 8006ae8:	5cd3      	ldrb	r3, [r2, r3]
 8006aea:	fa21 f303 	lsr.w	r3, r1, r3
 8006aee:	4a09      	ldr	r2, [pc, #36]	; (8006b14 <HAL_RCC_ClockConfig+0x1d0>)
 8006af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006af2:	4b09      	ldr	r3, [pc, #36]	; (8006b18 <HAL_RCC_ClockConfig+0x1d4>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fc fcf4 	bl	80034e4 <HAL_InitTick>

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40023c00 	.word	0x40023c00
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	08026490 	.word	0x08026490
 8006b14:	20000018 	.word	0x20000018
 8006b18:	2000001c 	.word	0x2000001c

08006b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	607b      	str	r3, [r7, #4]
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b32:	4b50      	ldr	r3, [pc, #320]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f003 030c 	and.w	r3, r3, #12
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d007      	beq.n	8006b4e <HAL_RCC_GetSysClockFreq+0x32>
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d008      	beq.n	8006b54 <HAL_RCC_GetSysClockFreq+0x38>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f040 808d 	bne.w	8006c62 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b48:	4b4b      	ldr	r3, [pc, #300]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b4a:	60bb      	str	r3, [r7, #8]
      break;
 8006b4c:	e08c      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b4e:	4b4b      	ldr	r3, [pc, #300]	; (8006c7c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b50:	60bb      	str	r3, [r7, #8]
      break;
 8006b52:	e089      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b54:	4b47      	ldr	r3, [pc, #284]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b5c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b5e:	4b45      	ldr	r3, [pc, #276]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d023      	beq.n	8006bb2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b6a:	4b42      	ldr	r3, [pc, #264]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	099b      	lsrs	r3, r3, #6
 8006b70:	f04f 0400 	mov.w	r4, #0
 8006b74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	ea03 0501 	and.w	r5, r3, r1
 8006b80:	ea04 0602 	and.w	r6, r4, r2
 8006b84:	4a3d      	ldr	r2, [pc, #244]	; (8006c7c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b86:	fb02 f106 	mul.w	r1, r2, r6
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	fb02 f205 	mul.w	r2, r2, r5
 8006b90:	440a      	add	r2, r1
 8006b92:	493a      	ldr	r1, [pc, #232]	; (8006c7c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b94:	fba5 0101 	umull	r0, r1, r5, r1
 8006b98:	1853      	adds	r3, r2, r1
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f04f 0400 	mov.w	r4, #0
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4623      	mov	r3, r4
 8006ba6:	f7f9 fe17 	bl	80007d8 <__aeabi_uldivmod>
 8006baa:	4603      	mov	r3, r0
 8006bac:	460c      	mov	r4, r1
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e049      	b.n	8006c46 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bb2:	4b30      	ldr	r3, [pc, #192]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x158>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	099b      	lsrs	r3, r3, #6
 8006bb8:	f04f 0400 	mov.w	r4, #0
 8006bbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	ea03 0501 	and.w	r5, r3, r1
 8006bc8:	ea04 0602 	and.w	r6, r4, r2
 8006bcc:	4629      	mov	r1, r5
 8006bce:	4632      	mov	r2, r6
 8006bd0:	f04f 0300 	mov.w	r3, #0
 8006bd4:	f04f 0400 	mov.w	r4, #0
 8006bd8:	0154      	lsls	r4, r2, #5
 8006bda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bde:	014b      	lsls	r3, r1, #5
 8006be0:	4619      	mov	r1, r3
 8006be2:	4622      	mov	r2, r4
 8006be4:	1b49      	subs	r1, r1, r5
 8006be6:	eb62 0206 	sbc.w	r2, r2, r6
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	f04f 0400 	mov.w	r4, #0
 8006bf2:	0194      	lsls	r4, r2, #6
 8006bf4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006bf8:	018b      	lsls	r3, r1, #6
 8006bfa:	1a5b      	subs	r3, r3, r1
 8006bfc:	eb64 0402 	sbc.w	r4, r4, r2
 8006c00:	f04f 0100 	mov.w	r1, #0
 8006c04:	f04f 0200 	mov.w	r2, #0
 8006c08:	00e2      	lsls	r2, r4, #3
 8006c0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006c0e:	00d9      	lsls	r1, r3, #3
 8006c10:	460b      	mov	r3, r1
 8006c12:	4614      	mov	r4, r2
 8006c14:	195b      	adds	r3, r3, r5
 8006c16:	eb44 0406 	adc.w	r4, r4, r6
 8006c1a:	f04f 0100 	mov.w	r1, #0
 8006c1e:	f04f 0200 	mov.w	r2, #0
 8006c22:	02a2      	lsls	r2, r4, #10
 8006c24:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006c28:	0299      	lsls	r1, r3, #10
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4614      	mov	r4, r2
 8006c2e:	4618      	mov	r0, r3
 8006c30:	4621      	mov	r1, r4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f04f 0400 	mov.w	r4, #0
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4623      	mov	r3, r4
 8006c3c:	f7f9 fdcc 	bl	80007d8 <__aeabi_uldivmod>
 8006c40:	4603      	mov	r3, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006c46:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	0c1b      	lsrs	r3, r3, #16
 8006c4c:	f003 0303 	and.w	r3, r3, #3
 8006c50:	3301      	adds	r3, #1
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5e:	60bb      	str	r3, [r7, #8]
      break;
 8006c60:	e002      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c62:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006c64:	60bb      	str	r3, [r7, #8]
      break;
 8006c66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c68:	68bb      	ldr	r3, [r7, #8]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40023800 	.word	0x40023800
 8006c78:	00f42400 	.word	0x00f42400
 8006c7c:	017d7840 	.word	0x017d7840

08006c80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c86:	681b      	ldr	r3, [r3, #0]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000018 	.word	0x20000018

08006c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c9c:	f7ff fff0 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006ca0:	4601      	mov	r1, r0
 8006ca2:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	0a9b      	lsrs	r3, r3, #10
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	4a03      	ldr	r2, [pc, #12]	; (8006cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cae:	5cd3      	ldrb	r3, [r2, r3]
 8006cb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40023800 	.word	0x40023800
 8006cbc:	080264a0 	.word	0x080264a0

08006cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006cc4:	f7ff ffdc 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006cc8:	4601      	mov	r1, r0
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	0b5b      	lsrs	r3, r3, #13
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	4a03      	ldr	r2, [pc, #12]	; (8006ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cd6:	5cd3      	ldrb	r3, [r2, r3]
 8006cd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	40023800 	.word	0x40023800
 8006ce4:	080264a0 	.word	0x080264a0

08006ce8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	220f      	movs	r2, #15
 8006cf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006cf8:	4b12      	ldr	r3, [pc, #72]	; (8006d44 <HAL_RCC_GetClockConfig+0x5c>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 0203 	and.w	r2, r3, #3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d04:	4b0f      	ldr	r3, [pc, #60]	; (8006d44 <HAL_RCC_GetClockConfig+0x5c>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d10:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <HAL_RCC_GetClockConfig+0x5c>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006d1c:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <HAL_RCC_GetClockConfig+0x5c>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	08db      	lsrs	r3, r3, #3
 8006d22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d2a:	4b07      	ldr	r3, [pc, #28]	; (8006d48 <HAL_RCC_GetClockConfig+0x60>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 020f 	and.w	r2, r3, #15
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	601a      	str	r2, [r3, #0]
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40023800 	.word	0x40023800
 8006d48:	40023c00 	.word	0x40023c00

08006d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d012      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d74:	4b69      	ldr	r3, [pc, #420]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	4a68      	ldr	r2, [pc, #416]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d7e:	6093      	str	r3, [r2, #8]
 8006d80:	4b66      	ldr	r3, [pc, #408]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d88:	4964      	ldr	r1, [pc, #400]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006d96:	2301      	movs	r3, #1
 8006d98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d017      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006da6:	4b5d      	ldr	r3, [pc, #372]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db4:	4959      	ldr	r1, [pc, #356]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc4:	d101      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d017      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006de2:	4b4e      	ldr	r3, [pc, #312]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006de8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	494a      	ldr	r1, [pc, #296]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e00:	d101      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e02:	2301      	movs	r3, #1
 8006e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 808b 	beq.w	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e30:	4b3a      	ldr	r3, [pc, #232]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	4a39      	ldr	r2, [pc, #228]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8006e3c:	4b37      	ldr	r3, [pc, #220]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e48:	4b35      	ldr	r3, [pc, #212]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a34      	ldr	r2, [pc, #208]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e54:	f7fc fcfc 	bl	8003850 <HAL_GetTick>
 8006e58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e5c:	f7fc fcf8 	bl	8003850 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b64      	cmp	r3, #100	; 0x64
 8006e68:	d901      	bls.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e355      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e6e:	4b2c      	ldr	r3, [pc, #176]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0f0      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e7a:	4b28      	ldr	r3, [pc, #160]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d035      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d02e      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e98:	4b20      	ldr	r3, [pc, #128]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ea2:	4b1e      	ldr	r3, [pc, #120]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea6:	4a1d      	ldr	r2, [pc, #116]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006eae:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb2:	4a1a      	ldr	r2, [pc, #104]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006eba:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ec0:	4b16      	ldr	r3, [pc, #88]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d114      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ecc:	f7fc fcc0 	bl	8003850 <HAL_GetTick>
 8006ed0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed2:	e00a      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ed4:	f7fc fcbc 	bl	8003850 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e317      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0ee      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f02:	d111      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f12:	400b      	ands	r3, r1
 8006f14:	4901      	ldr	r1, [pc, #4]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	608b      	str	r3, [r1, #8]
 8006f1a:	e00b      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f1c:	40023800 	.word	0x40023800
 8006f20:	40007000 	.word	0x40007000
 8006f24:	0ffffcff 	.word	0x0ffffcff
 8006f28:	4bb0      	ldr	r3, [pc, #704]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	4aaf      	ldr	r2, [pc, #700]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f32:	6093      	str	r3, [r2, #8]
 8006f34:	4bad      	ldr	r3, [pc, #692]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f40:	49aa      	ldr	r1, [pc, #680]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0310 	and.w	r3, r3, #16
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d010      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f52:	4ba6      	ldr	r3, [pc, #664]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f58:	4aa4      	ldr	r2, [pc, #656]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006f62:	4ba2      	ldr	r3, [pc, #648]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	499f      	ldr	r1, [pc, #636]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00a      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f80:	4b9a      	ldr	r3, [pc, #616]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f8e:	4997      	ldr	r1, [pc, #604]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fa2:	4b92      	ldr	r3, [pc, #584]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fb0:	498e      	ldr	r1, [pc, #568]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fc4:	4b89      	ldr	r3, [pc, #548]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fd2:	4986      	ldr	r1, [pc, #536]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fe6:	4b81      	ldr	r3, [pc, #516]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff4:	497d      	ldr	r1, [pc, #500]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00a      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007008:	4b78      	ldr	r3, [pc, #480]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800700a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700e:	f023 0203 	bic.w	r2, r3, #3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	4975      	ldr	r1, [pc, #468]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007018:	4313      	orrs	r3, r2
 800701a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800702a:	4b70      	ldr	r3, [pc, #448]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800702c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007030:	f023 020c 	bic.w	r2, r3, #12
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007038:	496c      	ldr	r1, [pc, #432]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800703a:	4313      	orrs	r3, r2
 800703c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800704c:	4b67      	ldr	r3, [pc, #412]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007052:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705a:	4964      	ldr	r1, [pc, #400]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800705c:	4313      	orrs	r3, r2
 800705e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800706e:	4b5f      	ldr	r3, [pc, #380]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007074:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707c:	495b      	ldr	r1, [pc, #364]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007090:	4b56      	ldr	r3, [pc, #344]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007096:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709e:	4953      	ldr	r1, [pc, #332]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80070b2:	4b4e      	ldr	r3, [pc, #312]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c0:	494a      	ldr	r1, [pc, #296]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80070d4:	4b45      	ldr	r3, [pc, #276]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e2:	4942      	ldr	r1, [pc, #264]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80070f6:	4b3d      	ldr	r3, [pc, #244]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007104:	4939      	ldr	r1, [pc, #228]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007118:	4b34      	ldr	r3, [pc, #208]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800711a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007126:	4931      	ldr	r1, [pc, #196]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007128:	4313      	orrs	r3, r2
 800712a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d011      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800713a:	4b2c      	ldr	r3, [pc, #176]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007140:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007148:	4928      	ldr	r1, [pc, #160]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007158:	d101      	bne.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800715a:	2301      	movs	r3, #1
 800715c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0308 	and.w	r3, r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800716a:	2301      	movs	r3, #1
 800716c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800717a:	4b1c      	ldr	r3, [pc, #112]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800717c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007180:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007188:	4918      	ldr	r1, [pc, #96]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800718a:	4313      	orrs	r3, r2
 800718c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00b      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800719c:	4b13      	ldr	r3, [pc, #76]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800719e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ac:	490f      	ldr	r1, [pc, #60]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d005      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071c2:	f040 80d8 	bne.w	8007376 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a08      	ldr	r2, [pc, #32]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071d2:	f7fc fb3d 	bl	8003850 <HAL_GetTick>
 80071d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071d8:	e00a      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071da:	f7fc fb39 	bl	8003850 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b64      	cmp	r3, #100	; 0x64
 80071e6:	d903      	bls.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e196      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80071ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071f0:	4b6c      	ldr	r3, [pc, #432]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1ee      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d021      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720c:	2b00      	cmp	r3, #0
 800720e:	d11d      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007210:	4b64      	ldr	r3, [pc, #400]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007216:	0c1b      	lsrs	r3, r3, #16
 8007218:	f003 0303 	and.w	r3, r3, #3
 800721c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800721e:	4b61      	ldr	r3, [pc, #388]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007224:	0e1b      	lsrs	r3, r3, #24
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	019a      	lsls	r2, r3, #6
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	041b      	lsls	r3, r3, #16
 8007236:	431a      	orrs	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	061b      	lsls	r3, r3, #24
 800723c:	431a      	orrs	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	071b      	lsls	r3, r3, #28
 8007244:	4957      	ldr	r1, [pc, #348]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007260:	d00a      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800726a:	2b00      	cmp	r3, #0
 800726c:	d02e      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007276:	d129      	bne.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007278:	4b4a      	ldr	r3, [pc, #296]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800727a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800727e:	0c1b      	lsrs	r3, r3, #16
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007286:	4b47      	ldr	r3, [pc, #284]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800728c:	0f1b      	lsrs	r3, r3, #28
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	019a      	lsls	r2, r3, #6
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	041b      	lsls	r3, r3, #16
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	061b      	lsls	r3, r3, #24
 80072a6:	431a      	orrs	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	071b      	lsls	r3, r3, #28
 80072ac:	493d      	ldr	r1, [pc, #244]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80072b4:	4b3b      	ldr	r3, [pc, #236]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ba:	f023 021f 	bic.w	r2, r3, #31
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	3b01      	subs	r3, #1
 80072c4:	4937      	ldr	r1, [pc, #220]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01d      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80072d8:	4b32      	ldr	r3, [pc, #200]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072de:	0e1b      	lsrs	r3, r3, #24
 80072e0:	f003 030f 	and.w	r3, r3, #15
 80072e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072e6:	4b2f      	ldr	r3, [pc, #188]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ec:	0f1b      	lsrs	r3, r3, #28
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	019a      	lsls	r2, r3, #6
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	041b      	lsls	r3, r3, #16
 8007300:	431a      	orrs	r2, r3
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	061b      	lsls	r3, r3, #24
 8007306:	431a      	orrs	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	071b      	lsls	r3, r3, #28
 800730c:	4925      	ldr	r1, [pc, #148]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800730e:	4313      	orrs	r3, r2
 8007310:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d011      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	019a      	lsls	r2, r3, #6
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	041b      	lsls	r3, r3, #16
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	061b      	lsls	r3, r3, #24
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	071b      	lsls	r3, r3, #28
 800733c:	4919      	ldr	r1, [pc, #100]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007344:	4b17      	ldr	r3, [pc, #92]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a16      	ldr	r2, [pc, #88]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800734a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800734e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007350:	f7fc fa7e 	bl	8003850 <HAL_GetTick>
 8007354:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007356:	e008      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007358:	f7fc fa7a 	bl	8003850 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b64      	cmp	r3, #100	; 0x64
 8007364:	d901      	bls.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e0d7      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800736a:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0f0      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	2b01      	cmp	r3, #1
 800737a:	f040 80cd 	bne.w	8007518 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800737e:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a08      	ldr	r2, [pc, #32]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800738a:	f7fc fa61 	bl	8003850 <HAL_GetTick>
 800738e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007390:	e00a      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007392:	f7fc fa5d 	bl	8003850 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b64      	cmp	r3, #100	; 0x64
 800739e:	d903      	bls.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e0ba      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80073a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073a8:	4b5e      	ldr	r3, [pc, #376]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b4:	d0ed      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d02e      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d12a      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80073de:	4b51      	ldr	r3, [pc, #324]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e4:	0c1b      	lsrs	r3, r3, #16
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80073ec:	4b4d      	ldr	r3, [pc, #308]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f2:	0f1b      	lsrs	r3, r3, #28
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	019a      	lsls	r2, r3, #6
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	041b      	lsls	r3, r3, #16
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	061b      	lsls	r3, r3, #24
 800740c:	431a      	orrs	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	071b      	lsls	r3, r3, #28
 8007412:	4944      	ldr	r1, [pc, #272]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800741a:	4b42      	ldr	r3, [pc, #264]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800741c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007420:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007428:	3b01      	subs	r3, #1
 800742a:	021b      	lsls	r3, r3, #8
 800742c:	493d      	ldr	r1, [pc, #244]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800742e:	4313      	orrs	r3, r2
 8007430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d022      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007448:	d11d      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800744a:	4b36      	ldr	r3, [pc, #216]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800744c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007450:	0e1b      	lsrs	r3, r3, #24
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007458:	4b32      	ldr	r3, [pc, #200]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800745a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745e:	0f1b      	lsrs	r3, r3, #28
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	019a      	lsls	r2, r3, #6
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	431a      	orrs	r2, r3
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	061b      	lsls	r3, r3, #24
 8007478:	431a      	orrs	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	071b      	lsls	r3, r3, #28
 800747e:	4929      	ldr	r1, [pc, #164]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007480:	4313      	orrs	r3, r2
 8007482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b00      	cmp	r3, #0
 8007490:	d028      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007492:	4b24      	ldr	r3, [pc, #144]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007498:	0e1b      	lsrs	r3, r3, #24
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074a0:	4b20      	ldr	r3, [pc, #128]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a6:	0c1b      	lsrs	r3, r3, #16
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	019a      	lsls	r2, r3, #6
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	041b      	lsls	r3, r3, #16
 80074b8:	431a      	orrs	r2, r3
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	061b      	lsls	r3, r3, #24
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	071b      	lsls	r3, r3, #28
 80074c6:	4917      	ldr	r1, [pc, #92]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80074ce:	4b15      	ldr	r3, [pc, #84]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	4911      	ldr	r1, [pc, #68]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80074e4:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a0e      	ldr	r2, [pc, #56]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f0:	f7fc f9ae 	bl	8003850 <HAL_GetTick>
 80074f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074f6:	e008      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074f8:	f7fc f9aa 	bl	8003850 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b64      	cmp	r3, #100	; 0x64
 8007504:	d901      	bls.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e007      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800750a:	4b06      	ldr	r3, [pc, #24]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007516:	d1ef      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3720      	adds	r7, #32
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	40023800 	.word	0x40023800

08007528 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007546:	f040 8086 	bne.w	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800754a:	4b8d      	ldr	r3, [pc, #564]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800754c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007550:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007558:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007560:	d03e      	beq.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007566:	d073      	beq.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d000      	beq.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800756c:	e074      	b.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800756e:	4b84      	ldr	r3, [pc, #528]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d108      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800757a:	4b81      	ldr	r3, [pc, #516]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007582:	4a80      	ldr	r2, [pc, #512]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007584:	fbb2 f3f3 	udiv	r3, r2, r3
 8007588:	613b      	str	r3, [r7, #16]
 800758a:	e007      	b.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800758c:	4b7c      	ldr	r3, [pc, #496]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007594:	4a7c      	ldr	r2, [pc, #496]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007596:	fbb2 f3f3 	udiv	r3, r2, r3
 800759a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800759c:	4b78      	ldr	r3, [pc, #480]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a2:	0e1b      	lsrs	r3, r3, #24
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80075aa:	4b75      	ldr	r3, [pc, #468]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b0:	099b      	lsrs	r3, r3, #6
 80075b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	fb02 f203 	mul.w	r2, r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80075c4:	4b6e      	ldr	r3, [pc, #440]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	f003 031f 	and.w	r3, r3, #31
 80075d0:	3301      	adds	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075dc:	617b      	str	r3, [r7, #20]
        break;
 80075de:	e03b      	b.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80075e0:	4b67      	ldr	r3, [pc, #412]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d108      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80075ec:	4b64      	ldr	r3, [pc, #400]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075f4:	4a63      	ldr	r2, [pc, #396]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80075f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fa:	613b      	str	r3, [r7, #16]
 80075fc:	e007      	b.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80075fe:	4b60      	ldr	r3, [pc, #384]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007606:	4a60      	ldr	r2, [pc, #384]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007608:	fbb2 f3f3 	udiv	r3, r2, r3
 800760c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800760e:	4b5c      	ldr	r3, [pc, #368]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007614:	0e1b      	lsrs	r3, r3, #24
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800761c:	4b58      	ldr	r3, [pc, #352]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800761e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007622:	099b      	lsrs	r3, r3, #6
 8007624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	fb02 f203 	mul.w	r2, r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	fbb2 f3f3 	udiv	r3, r2, r3
 8007634:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007636:	4b52      	ldr	r3, [pc, #328]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800763c:	f003 031f 	and.w	r3, r3, #31
 8007640:	3301      	adds	r3, #1
 8007642:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	fbb2 f3f3 	udiv	r3, r2, r3
 800764c:	617b      	str	r3, [r7, #20]
        break;
 800764e:	e003      	b.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007650:	4b4e      	ldr	r3, [pc, #312]	; (800778c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007652:	617b      	str	r3, [r7, #20]
        break;
 8007654:	e000      	b.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8007656:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800765e:	f040 8086 	bne.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007662:	4b47      	ldr	r3, [pc, #284]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007668:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007670:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007678:	d03e      	beq.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800767a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800767e:	d073      	beq.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d000      	beq.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007684:	e074      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007686:	4b3e      	ldr	r3, [pc, #248]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d108      	bne.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007692:	4b3b      	ldr	r3, [pc, #236]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800769a:	4a3a      	ldr	r2, [pc, #232]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800769c:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	e007      	b.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80076a4:	4b36      	ldr	r3, [pc, #216]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ac:	4a36      	ldr	r2, [pc, #216]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80076ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80076b4:	4b32      	ldr	r3, [pc, #200]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	0e1b      	lsrs	r3, r3, #24
 80076bc:	f003 030f 	and.w	r3, r3, #15
 80076c0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80076c2:	4b2f      	ldr	r3, [pc, #188]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c8:	099b      	lsrs	r3, r3, #6
 80076ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	fb02 f203 	mul.w	r2, r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076da:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80076dc:	4b28      	ldr	r3, [pc, #160]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e2:	0a1b      	lsrs	r3, r3, #8
 80076e4:	f003 031f 	and.w	r3, r3, #31
 80076e8:	3301      	adds	r3, #1
 80076ea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f4:	617b      	str	r3, [r7, #20]
        break;
 80076f6:	e03b      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80076f8:	4b21      	ldr	r3, [pc, #132]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d108      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007704:	4b1e      	ldr	r3, [pc, #120]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800770c:	4a1d      	ldr	r2, [pc, #116]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800770e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	e007      	b.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007716:	4b1a      	ldr	r3, [pc, #104]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800771e:	4a1a      	ldr	r2, [pc, #104]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007720:	fbb2 f3f3 	udiv	r3, r2, r3
 8007724:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007726:	4b16      	ldr	r3, [pc, #88]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800772c:	0e1b      	lsrs	r3, r3, #24
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007734:	4b12      	ldr	r3, [pc, #72]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800773a:	099b      	lsrs	r3, r3, #6
 800773c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	fb02 f203 	mul.w	r2, r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	fbb2 f3f3 	udiv	r3, r2, r3
 800774c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800774e:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007754:	f003 031f 	and.w	r3, r3, #31
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	fbb2 f3f3 	udiv	r3, r2, r3
 8007764:	617b      	str	r3, [r7, #20]
        break;
 8007766:	e003      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007768:	4b08      	ldr	r3, [pc, #32]	; (800778c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800776a:	617b      	str	r3, [r7, #20]
        break;
 800776c:	e000      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800776e:	bf00      	nop

  return frequency;
 8007770:	697b      	ldr	r3, [r7, #20]
}
 8007772:	4618      	mov	r0, r3
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40023800 	.word	0x40023800
 8007784:	00f42400 	.word	0x00f42400
 8007788:	017d7840 	.word	0x017d7840
 800778c:	00bb8000 	.word	0x00bb8000

08007790 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e06b      	b.n	800787a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	7f5b      	ldrb	r3, [r3, #29]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d105      	bne.n	80077b8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fb fa82 	bl	8002cbc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	22ca      	movs	r2, #202	; 0xca
 80077c4:	625a      	str	r2, [r3, #36]	; 0x24
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2253      	movs	r2, #83	; 0x53
 80077cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fb00 	bl	8007dd4 <RTC_EnterInitMode>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d008      	beq.n	80077ec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	22ff      	movs	r2, #255	; 0xff
 80077e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2204      	movs	r2, #4
 80077e6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e046      	b.n	800787a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6899      	ldr	r1, [r3, #8]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	4b23      	ldr	r3, [pc, #140]	; (8007884 <HAL_RTC_Init+0xf4>)
 80077f8:	400b      	ands	r3, r1
 80077fa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6899      	ldr	r1, [r3, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	68d2      	ldr	r2, [r2, #12]
 8007822:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6919      	ldr	r1, [r3, #16]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	041a      	lsls	r2, r3, #16
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007846:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0208 	bic.w	r2, r2, #8
 8007856:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	699a      	ldr	r2, [r3, #24]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	22ff      	movs	r2, #255	; 0xff
 8007870:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007878:	2300      	movs	r3, #0
  }
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	ff8fffbf 	.word	0xff8fffbf

08007888 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007888:	b590      	push	{r4, r7, lr}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	7f1b      	ldrb	r3, [r3, #28]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d101      	bne.n	80078a4 <HAL_RTC_SetTime+0x1c>
 80078a0:	2302      	movs	r3, #2
 80078a2:	e0a8      	b.n	80079f6 <HAL_RTC_SetTime+0x16e>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2202      	movs	r2, #2
 80078ae:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d126      	bne.n	8007904 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d102      	bne.n	80078ca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2200      	movs	r2, #0
 80078c8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 faac 	bl	8007e2c <RTC_ByteToBcd2>
 80078d4:	4603      	mov	r3, r0
 80078d6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 faa5 	bl	8007e2c <RTC_ByteToBcd2>
 80078e2:	4603      	mov	r3, r0
 80078e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80078e6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	789b      	ldrb	r3, [r3, #2]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fa9d 	bl	8007e2c <RTC_ByteToBcd2>
 80078f2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80078f4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	7b1b      	ldrb	r3, [r3, #12]
 80078fc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80078fe:	4313      	orrs	r3, r2
 8007900:	617b      	str	r3, [r7, #20]
 8007902:	e018      	b.n	8007936 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2200      	movs	r2, #0
 8007916:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007924:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800792a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	7b1b      	ldrb	r3, [r3, #12]
 8007930:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007932:	4313      	orrs	r3, r2
 8007934:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	22ca      	movs	r2, #202	; 0xca
 800793c:	625a      	str	r2, [r3, #36]	; 0x24
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2253      	movs	r2, #83	; 0x53
 8007944:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 fa44 	bl	8007dd4 <RTC_EnterInitMode>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00b      	beq.n	800796a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	22ff      	movs	r2, #255	; 0xff
 8007958:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2204      	movs	r2, #4
 800795e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e045      	b.n	80079f6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	6979      	ldr	r1, [r7, #20]
 8007970:	4b23      	ldr	r3, [pc, #140]	; (8007a00 <HAL_RTC_SetTime+0x178>)
 8007972:	400b      	ands	r3, r1
 8007974:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007984:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6899      	ldr	r1, [r3, #8]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	691a      	ldr	r2, [r3, #16]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	431a      	orrs	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d111      	bne.n	80079e0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f9e1 	bl	8007d84 <HAL_RTC_WaitForSynchro>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	22ff      	movs	r2, #255	; 0xff
 80079ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2204      	movs	r2, #4
 80079d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e00a      	b.n	80079f6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	22ff      	movs	r2, #255	; 0xff
 80079e6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80079f4:	2300      	movs	r3, #0
  }
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd90      	pop	{r4, r7, pc}
 80079fe:	bf00      	nop
 8007a00:	007f7f7f 	.word	0x007f7f7f

08007a04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a04:	b590      	push	{r4, r7, lr}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	7f1b      	ldrb	r3, [r3, #28]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_RTC_SetDate+0x1c>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e092      	b.n	8007b46 <HAL_RTC_SetDate+0x142>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10e      	bne.n	8007a50 <HAL_RTC_SetDate+0x4c>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d008      	beq.n	8007a50 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	785b      	ldrb	r3, [r3, #1]
 8007a42:	f023 0310 	bic.w	r3, r3, #16
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	330a      	adds	r3, #10
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d11c      	bne.n	8007a90 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	78db      	ldrb	r3, [r3, #3]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 f9e6 	bl	8007e2c <RTC_ByteToBcd2>
 8007a60:	4603      	mov	r3, r0
 8007a62:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	785b      	ldrb	r3, [r3, #1]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f9df 	bl	8007e2c <RTC_ByteToBcd2>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a72:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	789b      	ldrb	r3, [r3, #2]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 f9d7 	bl	8007e2c <RTC_ByteToBcd2>
 8007a7e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007a80:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]
 8007a8e:	e00e      	b.n	8007aae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	78db      	ldrb	r3, [r3, #3]
 8007a94:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	785b      	ldrb	r3, [r3, #1]
 8007a9a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007a9c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007aa2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	22ca      	movs	r2, #202	; 0xca
 8007ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2253      	movs	r2, #83	; 0x53
 8007abc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f988 	bl	8007dd4 <RTC_EnterInitMode>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	22ff      	movs	r2, #255	; 0xff
 8007ad0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2204      	movs	r2, #4
 8007ad6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e031      	b.n	8007b46 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	6979      	ldr	r1, [r7, #20]
 8007ae8:	4b19      	ldr	r3, [pc, #100]	; (8007b50 <HAL_RTC_SetDate+0x14c>)
 8007aea:	400b      	ands	r3, r1
 8007aec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007afc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d111      	bne.n	8007b30 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 f939 	bl	8007d84 <HAL_RTC_WaitForSynchro>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	22ff      	movs	r2, #255	; 0xff
 8007b1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2204      	movs	r2, #4
 8007b24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e00a      	b.n	8007b46 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	22ff      	movs	r2, #255	; 0xff
 8007b36:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007b44:	2300      	movs	r3, #0
  }
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	371c      	adds	r7, #28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd90      	pop	{r4, r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	00ffff3f 	.word	0x00ffff3f

08007b54 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007b54:	b590      	push	{r4, r7, lr}
 8007b56:	b089      	sub	sp, #36	; 0x24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	61fb      	str	r3, [r7, #28]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	7f1b      	ldrb	r3, [r3, #28]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d101      	bne.n	8007b78 <HAL_RTC_SetAlarm+0x24>
 8007b74:	2302      	movs	r3, #2
 8007b76:	e101      	b.n	8007d7c <HAL_RTC_SetAlarm+0x228>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2202      	movs	r2, #2
 8007b82:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d137      	bne.n	8007bfa <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d102      	bne.n	8007b9e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 f942 	bl	8007e2c <RTC_ByteToBcd2>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	785b      	ldrb	r3, [r3, #1]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 f93b 	bl	8007e2c <RTC_ByteToBcd2>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007bba:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	789b      	ldrb	r3, [r3, #2]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f933 	bl	8007e2c <RTC_ByteToBcd2>
 8007bc6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007bc8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	7b1b      	ldrb	r3, [r3, #12]
 8007bd0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007bd2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 f925 	bl	8007e2c <RTC_ByteToBcd2>
 8007be2:	4603      	mov	r3, r0
 8007be4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007be6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007bee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	61fb      	str	r3, [r7, #28]
 8007bf8:	e023      	b.n	8007c42 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d102      	bne.n	8007c0e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	785b      	ldrb	r3, [r3, #1]
 8007c18:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c1a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c20:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	7b1b      	ldrb	r3, [r3, #12]
 8007c26:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007c28:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c30:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c32:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	22ca      	movs	r2, #202	; 0xca
 8007c54:	625a      	str	r2, [r3, #36]	; 0x24
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2253      	movs	r2, #83	; 0x53
 8007c5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c66:	d13f      	bne.n	8007ce8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c76:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c86:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c88:	f7fb fde2 	bl	8003850 <HAL_GetTick>
 8007c8c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007c8e:	e013      	b.n	8007cb8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007c90:	f7fb fdde 	bl	8003850 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c9e:	d90b      	bls.n	8007cb8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	22ff      	movs	r2, #255	; 0xff
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2203      	movs	r2, #3
 8007cac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e061      	b.n	8007d7c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0e4      	beq.n	8007c90 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ce4:	609a      	str	r2, [r3, #8]
 8007ce6:	e03e      	b.n	8007d66 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007cf6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689a      	ldr	r2, [r3, #8]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d06:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d08:	f7fb fda2 	bl	8003850 <HAL_GetTick>
 8007d0c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007d0e:	e013      	b.n	8007d38 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d10:	f7fb fd9e 	bl	8003850 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d1e:	d90b      	bls.n	8007d38 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	22ff      	movs	r2, #255	; 0xff
 8007d26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e021      	b.n	8007d7c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0e4      	beq.n	8007d10 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69fa      	ldr	r2, [r7, #28]
 8007d4c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d64:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	22ff      	movs	r2, #255	; 0xff
 8007d6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2201      	movs	r2, #1
 8007d72:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3724      	adds	r7, #36	; 0x24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd90      	pop	{r4, r7, pc}

08007d84 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007da0:	f7fb fd56 	bl	8003850 <HAL_GetTick>
 8007da4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007da6:	e009      	b.n	8007dbc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007da8:	f7fb fd52 	bl	8003850 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007db6:	d901      	bls.n	8007dbc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e007      	b.n	8007dcc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0ee      	beq.n	8007da8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d119      	bne.n	8007e22 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f04f 32ff 	mov.w	r2, #4294967295
 8007df6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007df8:	f7fb fd2a 	bl	8003850 <HAL_GetTick>
 8007dfc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007dfe:	e009      	b.n	8007e14 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e00:	f7fb fd26 	bl	8003850 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e0e:	d901      	bls.n	8007e14 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e007      	b.n	8007e24 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0ee      	beq.n	8007e00 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007e3a:	e005      	b.n	8007e48 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	3b0a      	subs	r3, #10
 8007e46:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	2b09      	cmp	r3, #9
 8007e4c:	d8f6      	bhi.n	8007e3c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	b2db      	uxtb	r3, r3
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	7f1b      	ldrb	r3, [r3, #28]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e03e      	b.n	8007f02 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2201      	movs	r2, #1
 8007e88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	689a      	ldr	r2, [r3, #8]
 8007e96:	4b1e      	ldr	r3, [pc, #120]	; (8007f10 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	22ca      	movs	r2, #202	; 0xca
 8007eaa:	625a      	str	r2, [r3, #36]	; 0x24
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2253      	movs	r2, #83	; 0x53
 8007eb2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0206 	bic.w	r2, r2, #6
 8007ec2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689a      	ldr	r2, [r3, #8]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	22ff      	movs	r2, #255	; 0xff
 8007ef2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	371c      	adds	r7, #28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	fffff7f7 	.word	0xfffff7f7

08007f14 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e149      	b.n	80081c6 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fb fa62 	bl	8003410 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f94f 	bl	80081f8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d007      	beq.n	8007f72 <HAL_SAI_Init+0x5e>
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d302      	bcc.n	8007f6c <HAL_SAI_Init+0x58>
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d006      	beq.n	8007f78 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007f6a:	e008      	b.n	8007f7e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61fb      	str	r3, [r7, #28]
      break;
 8007f70:	e005      	b.n	8007f7e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007f72:	2310      	movs	r3, #16
 8007f74:	61fb      	str	r3, [r7, #28]
      break;
 8007f76:	e002      	b.n	8007f7e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007f78:	2320      	movs	r3, #32
 8007f7a:	61fb      	str	r3, [r7, #28]
      break;
 8007f7c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d81d      	bhi.n	8007fc2 <HAL_SAI_Init+0xae>
 8007f86:	a201      	add	r2, pc, #4	; (adr r2, 8007f8c <HAL_SAI_Init+0x78>)
 8007f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8c:	08007f9d 	.word	0x08007f9d
 8007f90:	08007fa3 	.word	0x08007fa3
 8007f94:	08007fab 	.word	0x08007fab
 8007f98:	08007fb3 	.word	0x08007fb3
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007fa0:	e010      	b.n	8007fc4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa6:	617b      	str	r3, [r7, #20]
      }
      break;
 8007fa8:	e00c      	b.n	8007fc4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fae:	617b      	str	r3, [r7, #20]
      }
      break;
 8007fb0:	e008      	b.n	8007fc4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007fb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fb6:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007fc0:	e000      	b.n	8007fc4 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007fc2:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a81      	ldr	r2, [pc, #516]	; (80081d0 <HAL_SAI_Init+0x2bc>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d004      	beq.n	8007fd8 <HAL_SAI_Init+0xc4>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a80      	ldr	r2, [pc, #512]	; (80081d4 <HAL_SAI_Init+0x2c0>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d103      	bne.n	8007fe0 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007fd8:	4a7f      	ldr	r2, [pc, #508]	; (80081d8 <HAL_SAI_Init+0x2c4>)
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	e002      	b.n	8007fe6 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007fe0:	4a7e      	ldr	r2, [pc, #504]	; (80081dc <HAL_SAI_Init+0x2c8>)
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d043      	beq.n	8008076 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a76      	ldr	r2, [pc, #472]	; (80081d0 <HAL_SAI_Init+0x2bc>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d004      	beq.n	8008006 <HAL_SAI_Init+0xf2>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a74      	ldr	r2, [pc, #464]	; (80081d4 <HAL_SAI_Init+0x2c0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d104      	bne.n	8008010 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008006:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800800a:	f7ff fa8d 	bl	8007528 <HAL_RCCEx_GetPeriphCLKFreq>
 800800e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a72      	ldr	r2, [pc, #456]	; (80081e0 <HAL_SAI_Init+0x2cc>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d004      	beq.n	8008024 <HAL_SAI_Init+0x110>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a71      	ldr	r2, [pc, #452]	; (80081e4 <HAL_SAI_Init+0x2d0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d104      	bne.n	800802e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008024:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008028:	f7ff fa7e 	bl	8007528 <HAL_RCCEx_GetPeriphCLKFreq>
 800802c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	461a      	mov	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	025b      	lsls	r3, r3, #9
 8008040:	fbb2 f3f3 	udiv	r3, r2, r3
 8008044:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4a67      	ldr	r2, [pc, #412]	; (80081e8 <HAL_SAI_Init+0x2d4>)
 800804a:	fba2 2303 	umull	r2, r3, r2, r3
 800804e:	08da      	lsrs	r2, r3, #3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008054:	68f9      	ldr	r1, [r7, #12]
 8008056:	4b64      	ldr	r3, [pc, #400]	; (80081e8 <HAL_SAI_Init+0x2d4>)
 8008058:	fba3 2301 	umull	r2, r3, r3, r1
 800805c:	08da      	lsrs	r2, r3, #3
 800805e:	4613      	mov	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	1aca      	subs	r2, r1, r3
 8008068:	2a08      	cmp	r2, #8
 800806a:	d904      	bls.n	8008076 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <HAL_SAI_Init+0x172>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2b02      	cmp	r3, #2
 8008084:	d109      	bne.n	800809a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808a:	2b01      	cmp	r3, #1
 800808c:	d101      	bne.n	8008092 <HAL_SAI_Init+0x17e>
 800808e:	2300      	movs	r3, #0
 8008090:	e001      	b.n	8008096 <HAL_SAI_Init+0x182>
 8008092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008096:	61bb      	str	r3, [r7, #24]
 8008098:	e008      	b.n	80080ac <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d102      	bne.n	80080a8 <HAL_SAI_Init+0x194>
 80080a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080a6:	e000      	b.n	80080aa <HAL_SAI_Init+0x196>
 80080a8:	2300      	movs	r3, #0
 80080aa:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6819      	ldr	r1, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	4b4d      	ldr	r3, [pc, #308]	; (80081ec <HAL_SAI_Init+0x2d8>)
 80080b8:	400b      	ands	r3, r1
 80080ba:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6819      	ldr	r1, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ca:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080d0:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d6:	431a      	orrs	r2, r3
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80080e4:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080f0:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	051b      	lsls	r3, r3, #20
 80080f8:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6859      	ldr	r1, [r3, #4]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	4b38      	ldr	r3, [pc, #224]	; (80081f0 <HAL_SAI_Init+0x2dc>)
 800810e:	400b      	ands	r3, r1
 8008110:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6859      	ldr	r1, [r3, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699a      	ldr	r2, [r3, #24]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008120:	431a      	orrs	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	431a      	orrs	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6899      	ldr	r1, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b2e      	ldr	r3, [pc, #184]	; (80081f4 <HAL_SAI_Init+0x2e0>)
 800813c:	400b      	ands	r3, r1
 800813e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6899      	ldr	r1, [r3, #8]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008150:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008156:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800815c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008162:	3b01      	subs	r3, #1
 8008164:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008166:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68d9      	ldr	r1, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800817e:	400b      	ands	r3, r1
 8008180:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68d9      	ldr	r1, [r3, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008190:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008196:	041b      	lsls	r3, r3, #16
 8008198:	431a      	orrs	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800819e:	3b01      	subs	r3, #1
 80081a0:	021b      	lsls	r3, r3, #8
 80081a2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3720      	adds	r7, #32
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	40015804 	.word	0x40015804
 80081d4:	40015824 	.word	0x40015824
 80081d8:	40015800 	.word	0x40015800
 80081dc:	40015c00 	.word	0x40015c00
 80081e0:	40015c04 	.word	0x40015c04
 80081e4:	40015c24 	.word	0x40015c24
 80081e8:	cccccccd 	.word	0xcccccccd
 80081ec:	ff05c010 	.word	0xff05c010
 80081f0:	ffff1ff0 	.word	0xffff1ff0
 80081f4:	fff88000 	.word	0xfff88000

080081f8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80081f8:	b490      	push	{r4, r7}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008200:	4b16      	ldr	r3, [pc, #88]	; (800825c <SAI_Disable+0x64>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a16      	ldr	r2, [pc, #88]	; (8008260 <SAI_Disable+0x68>)
 8008206:	fba2 2303 	umull	r2, r3, r2, r3
 800820a:	0b1b      	lsrs	r3, r3, #12
 800820c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008220:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008222:	4623      	mov	r3, r4
 8008224:	1e5c      	subs	r4, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008230:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	73fb      	strb	r3, [r7, #15]
      break;
 800823e:	e006      	b.n	800824e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e9      	bne.n	8008222 <SAI_Disable+0x2a>

  return status;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bc90      	pop	{r4, r7}
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20000018 	.word	0x20000018
 8008260:	95cbec1b 	.word	0x95cbec1b

08008264 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e022      	b.n	80082bc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d105      	bne.n	800828e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7fa fd31 	bl	8002cf0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2203      	movs	r2, #3
 8008292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f814 	bl	80082c4 <HAL_SD_InitCard>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e00a      	b.n	80082bc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082c4:	b5b0      	push	{r4, r5, r7, lr}
 80082c6:	b08e      	sub	sp, #56	; 0x38
 80082c8:	af04      	add	r7, sp, #16
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80082d4:	2300      	movs	r3, #0
 80082d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80082d8:	2300      	movs	r3, #0
 80082da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80082dc:	2300      	movs	r3, #0
 80082de:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80082e0:	2376      	movs	r3, #118	; 0x76
 80082e2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681d      	ldr	r5, [r3, #0]
 80082e8:	466c      	mov	r4, sp
 80082ea:	f107 0314 	add.w	r3, r7, #20
 80082ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082f6:	f107 0308 	add.w	r3, r7, #8
 80082fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082fc:	4628      	mov	r0, r5
 80082fe:	f002 ff51 	bl	800b1a4 <SDMMC_Init>
 8008302:	4603      	mov	r3, r0
 8008304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e03b      	b.n	800838c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008322:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4618      	mov	r0, r3
 800832a:	f002 ff74 	bl	800b216 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800833c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fde6 	bl	8008f10 <SD_PowerON>
 8008344:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e013      	b.n	800838c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fd05 	bl	8008d74 <SD_InitCard>
 800836a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00b      	beq.n	800838a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	431a      	orrs	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e000      	b.n	800838c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3728      	adds	r7, #40	; 0x28
 8008390:	46bd      	mov	sp, r7
 8008392:	bdb0      	pop	{r4, r5, r7, pc}

08008394 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08c      	sub	sp, #48	; 0x30
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d107      	bne.n	80083bc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e0cc      	b.n	8008556 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	f040 80c5 	bne.w	8008554 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80083d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	441a      	add	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083da:	429a      	cmp	r2, r3
 80083dc:	d907      	bls.n	80083ee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e0b3      	b.n	8008556 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2203      	movs	r2, #3
 80083f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2200      	movs	r2, #0
 80083fc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800840c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	4a53      	ldr	r2, [pc, #332]	; (8008560 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841a:	4a52      	ldr	r2, [pc, #328]	; (8008564 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800841c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	2200      	movs	r2, #0
 8008424:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3380      	adds	r3, #128	; 0x80
 8008430:	4619      	mov	r1, r3
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	025b      	lsls	r3, r3, #9
 8008438:	089b      	lsrs	r3, r3, #2
 800843a:	f7fc fcb7 	bl	8004dac <HAL_DMA_Start_IT>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d017      	beq.n	8008474 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008452:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a43      	ldr	r2, [pc, #268]	; (8008568 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800845a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008460:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e070      	b.n	8008556 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0208 	orr.w	r2, r2, #8
 8008482:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008488:	2b01      	cmp	r3, #1
 800848a:	d002      	beq.n	8008492 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848e:	025b      	lsls	r3, r3, #9
 8008490:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800849a:	4618      	mov	r0, r3
 800849c:	f002 ff4e 	bl	800b33c <SDMMC_CmdBlockLength>
 80084a0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80084a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00f      	beq.n	80084c8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a2e      	ldr	r2, [pc, #184]	; (8008568 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80084ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b6:	431a      	orrs	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e046      	b.n	8008556 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084c8:	f04f 33ff 	mov.w	r3, #4294967295
 80084cc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	025b      	lsls	r3, r3, #9
 80084d2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80084d4:	2390      	movs	r3, #144	; 0x90
 80084d6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80084d8:	2302      	movs	r3, #2
 80084da:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084dc:	2300      	movs	r3, #0
 80084de:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80084e0:	2301      	movs	r3, #1
 80084e2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f107 0210 	add.w	r2, r7, #16
 80084ec:	4611      	mov	r1, r2
 80084ee:	4618      	mov	r0, r3
 80084f0:	f002 fef8 	bl	800b2e4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d90a      	bls.n	8008510 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2282      	movs	r2, #130	; 0x82
 80084fe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008506:	4618      	mov	r0, r3
 8008508:	f002 ff5c 	bl	800b3c4 <SDMMC_CmdReadMultiBlock>
 800850c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800850e:	e009      	b.n	8008524 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2281      	movs	r2, #129	; 0x81
 8008514:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800851c:	4618      	mov	r0, r3
 800851e:	f002 ff2f 	bl	800b380 <SDMMC_CmdReadSingleBlock>
 8008522:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008526:	2b00      	cmp	r3, #0
 8008528:	d012      	beq.n	8008550 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a0e      	ldr	r2, [pc, #56]	; (8008568 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008530:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008538:	431a      	orrs	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e002      	b.n	8008556 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	e000      	b.n	8008556 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008554:	2302      	movs	r3, #2
  }
}
 8008556:	4618      	mov	r0, r3
 8008558:	3730      	adds	r7, #48	; 0x30
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	08008c5f 	.word	0x08008c5f
 8008564:	08008cd1 	.word	0x08008cd1
 8008568:	004005ff 	.word	0x004005ff

0800856c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08c      	sub	sp, #48	; 0x30
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d107      	bne.n	8008594 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e0cf      	b.n	8008734 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b01      	cmp	r3, #1
 800859e:	f040 80c8 	bne.w	8008732 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	441a      	add	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d907      	bls.n	80085c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e0b6      	b.n	8008734 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2203      	movs	r2, #3
 80085ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2200      	movs	r2, #0
 80085d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f042 021a 	orr.w	r2, r2, #26
 80085e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ea:	4a54      	ldr	r2, [pc, #336]	; (800873c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80085ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f2:	4a53      	ldr	r2, [pc, #332]	; (8008740 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80085f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fa:	2200      	movs	r2, #0
 80085fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008602:	2b01      	cmp	r3, #1
 8008604:	d002      	beq.n	800860c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	025b      	lsls	r3, r3, #9
 800860a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008614:	4618      	mov	r0, r3
 8008616:	f002 fe91 	bl	800b33c <SDMMC_CmdBlockLength>
 800861a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00f      	beq.n	8008642 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a47      	ldr	r2, [pc, #284]	; (8008744 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008628:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800862e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008630:	431a      	orrs	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e078      	b.n	8008734 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d90a      	bls.n	800865e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	22a0      	movs	r2, #160	; 0xa0
 800864c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008654:	4618      	mov	r0, r3
 8008656:	f002 fef9 	bl	800b44c <SDMMC_CmdWriteMultiBlock>
 800865a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800865c:	e009      	b.n	8008672 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2290      	movs	r2, #144	; 0x90
 8008662:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800866a:	4618      	mov	r0, r3
 800866c:	f002 fecc 	bl	800b408 <SDMMC_CmdWriteSingleBlock>
 8008670:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d012      	beq.n	800869e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a31      	ldr	r2, [pc, #196]	; (8008744 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800867e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	431a      	orrs	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e04a      	b.n	8008734 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f042 0208 	orr.w	r2, r2, #8
 80086ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80086b2:	68b9      	ldr	r1, [r7, #8]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3380      	adds	r3, #128	; 0x80
 80086ba:	461a      	mov	r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	025b      	lsls	r3, r3, #9
 80086c0:	089b      	lsrs	r3, r3, #2
 80086c2:	f7fc fb73 	bl	8004dac <HAL_DMA_Start_IT>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01a      	beq.n	8008702 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 021a 	bic.w	r2, r2, #26
 80086da:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a18      	ldr	r2, [pc, #96]	; (8008744 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80086e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e018      	b.n	8008734 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008702:	f04f 33ff 	mov.w	r3, #4294967295
 8008706:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	025b      	lsls	r3, r3, #9
 800870c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800870e:	2390      	movs	r3, #144	; 0x90
 8008710:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008712:	2300      	movs	r3, #0
 8008714:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008716:	2300      	movs	r3, #0
 8008718:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800871a:	2301      	movs	r3, #1
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f107 0210 	add.w	r2, r7, #16
 8008726:	4611      	mov	r1, r2
 8008728:	4618      	mov	r0, r3
 800872a:	f002 fddb 	bl	800b2e4 <SDMMC_ConfigData>

      return HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	e000      	b.n	8008734 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008732:	2302      	movs	r3, #2
  }
}
 8008734:	4618      	mov	r0, r3
 8008736:	3730      	adds	r7, #48	; 0x30
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	08008c35 	.word	0x08008c35
 8008740:	08008cd1 	.word	0x08008cd1
 8008744:	004005ff 	.word	0x004005ff

08008748 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800876a:	0f9b      	lsrs	r3, r3, #30
 800876c:	b2da      	uxtb	r2, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008776:	0e9b      	lsrs	r3, r3, #26
 8008778:	b2db      	uxtb	r3, r3
 800877a:	f003 030f 	and.w	r3, r3, #15
 800877e:	b2da      	uxtb	r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008788:	0e1b      	lsrs	r3, r3, #24
 800878a:	b2db      	uxtb	r3, r3
 800878c:	f003 0303 	and.w	r3, r3, #3
 8008790:	b2da      	uxtb	r2, r3
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800879a:	0c1b      	lsrs	r3, r3, #16
 800879c:	b2da      	uxtb	r2, r3
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a6:	0a1b      	lsrs	r3, r3, #8
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087bc:	0d1b      	lsrs	r3, r3, #20
 80087be:	b29a      	uxth	r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087c8:	0c1b      	lsrs	r3, r3, #16
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	f003 030f 	and.w	r3, r3, #15
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087da:	0bdb      	lsrs	r3, r3, #15
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	b2da      	uxtb	r2, r3
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ec:	0b9b      	lsrs	r3, r3, #14
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087fe:	0b5b      	lsrs	r3, r3, #13
 8008800:	b2db      	uxtb	r3, r3
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	b2da      	uxtb	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008810:	0b1b      	lsrs	r3, r3, #12
 8008812:	b2db      	uxtb	r3, r3
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	b2da      	uxtb	r2, r3
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2200      	movs	r2, #0
 8008822:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008828:	2b00      	cmp	r3, #0
 800882a:	d163      	bne.n	80088f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008830:	009a      	lsls	r2, r3, #2
 8008832:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008836:	4013      	ands	r3, r2
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800883c:	0f92      	lsrs	r2, r2, #30
 800883e:	431a      	orrs	r2, r3
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008848:	0edb      	lsrs	r3, r3, #27
 800884a:	b2db      	uxtb	r3, r3
 800884c:	f003 0307 	and.w	r3, r3, #7
 8008850:	b2da      	uxtb	r2, r3
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800885a:	0e1b      	lsrs	r3, r3, #24
 800885c:	b2db      	uxtb	r3, r3
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	b2da      	uxtb	r2, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886c:	0d5b      	lsrs	r3, r3, #21
 800886e:	b2db      	uxtb	r3, r3
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	b2da      	uxtb	r2, r3
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887e:	0c9b      	lsrs	r3, r3, #18
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	b2da      	uxtb	r2, r3
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008890:	0bdb      	lsrs	r3, r3, #15
 8008892:	b2db      	uxtb	r3, r3
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	b2da      	uxtb	r2, r3
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	7e1b      	ldrb	r3, [r3, #24]
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	3302      	adds	r3, #2
 80088b4:	2201      	movs	r2, #1
 80088b6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80088be:	fb02 f203 	mul.w	r2, r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	7a1b      	ldrb	r3, [r3, #8]
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	2201      	movs	r2, #1
 80088d2:	409a      	lsls	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80088e0:	0a52      	lsrs	r2, r2, #9
 80088e2:	fb02 f203 	mul.w	r2, r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088f0:	661a      	str	r2, [r3, #96]	; 0x60
 80088f2:	e031      	b.n	8008958 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d11d      	bne.n	8008938 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008900:	041b      	lsls	r3, r3, #16
 8008902:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800890a:	0c1b      	lsrs	r3, r3, #16
 800890c:	431a      	orrs	r2, r3
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	3301      	adds	r3, #1
 8008918:	029a      	lsls	r2, r3, #10
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800892c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	661a      	str	r2, [r3, #96]	; 0x60
 8008936:	e00f      	b.n	8008958 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a58      	ldr	r2, [pc, #352]	; (8008aa0 <HAL_SD_GetCardCSD+0x344>)
 800893e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008944:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e09d      	b.n	8008a94 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800895c:	0b9b      	lsrs	r3, r3, #14
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	b2da      	uxtb	r2, r3
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800896e:	09db      	lsrs	r3, r3, #7
 8008970:	b2db      	uxtb	r3, r3
 8008972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008976:	b2da      	uxtb	r2, r3
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008980:	b2db      	uxtb	r3, r3
 8008982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008986:	b2da      	uxtb	r2, r3
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008990:	0fdb      	lsrs	r3, r3, #31
 8008992:	b2da      	uxtb	r2, r3
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899c:	0f5b      	lsrs	r3, r3, #29
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 0303 	and.w	r3, r3, #3
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ae:	0e9b      	lsrs	r3, r3, #26
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c0:	0d9b      	lsrs	r3, r3, #22
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d2:	0d5b      	lsrs	r3, r3, #21
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ee:	0c1b      	lsrs	r3, r3, #16
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a02:	0bdb      	lsrs	r3, r3, #15
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a16:	0b9b      	lsrs	r3, r3, #14
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2a:	0b5b      	lsrs	r3, r3, #13
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a3e:	0b1b      	lsrs	r3, r3, #12
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a52:	0a9b      	lsrs	r3, r3, #10
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f003 0303 	and.w	r3, r3, #3
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a66:	0a1b      	lsrs	r3, r3, #8
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	004005ff 	.word	0x004005ff

08008aa4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008afc:	b5b0      	push	{r4, r5, r7, lr}
 8008afe:	b08e      	sub	sp, #56	; 0x38
 8008b00:	af04      	add	r7, sp, #16
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2203      	movs	r2, #3
 8008b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d02e      	beq.n	8008b74 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b1c:	d106      	bne.n	8008b2c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b22:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	639a      	str	r2, [r3, #56]	; 0x38
 8008b2a:	e029      	b.n	8008b80 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b32:	d10a      	bne.n	8008b4a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 faa1 	bl	800907c <SD_WideBus_Enable>
 8008b3a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	431a      	orrs	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	639a      	str	r2, [r3, #56]	; 0x38
 8008b48:	e01a      	b.n	8008b80 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fade 	bl	8009112 <SD_WideBus_Disable>
 8008b56:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	639a      	str	r2, [r3, #56]	; 0x38
 8008b64:	e00c      	b.n	8008b80 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	639a      	str	r2, [r3, #56]	; 0x38
 8008b72:	e005      	b.n	8008b80 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d009      	beq.n	8008b9c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a18      	ldr	r2, [pc, #96]	; (8008bf0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008b8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e024      	b.n	8008be6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681d      	ldr	r5, [r3, #0]
 8008bc2:	466c      	mov	r4, sp
 8008bc4:	f107 0318 	add.w	r3, r7, #24
 8008bc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bd0:	f107 030c 	add.w	r3, r7, #12
 8008bd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f002 fae4 	bl	800b1a4 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3728      	adds	r7, #40	; 0x28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bdb0      	pop	{r4, r5, r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	004005ff 	.word	0x004005ff

08008bf4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008c00:	f107 030c 	add.w	r3, r7, #12
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa10 	bl	800902c <SD_SendStatus>
 8008c0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	0a5b      	lsrs	r3, r3, #9
 8008c24:	f003 030f 	and.w	r3, r3, #15
 8008c28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c2a:	693b      	ldr	r3, [r7, #16]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c50:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c70:	2b82      	cmp	r3, #130	; 0x82
 8008c72:	d111      	bne.n	8008c98 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f002 fc09 	bl	800b490 <SDMMC_CmdStopTransfer>
 8008c7e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d008      	beq.n	8008c98 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	431a      	orrs	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7ff fd58 	bl	8008748 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f022 0208 	bic.w	r2, r2, #8
 8008ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f240 523a 	movw	r2, #1338	; 0x53a
 8008cb0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f003 f84f 	bl	800bd64 <HAL_SD_RxCpltCallback>
#endif
}
 8008cc6:	bf00      	nop
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7fc f8c4 	bl	8004e6c <HAL_DMA_GetError>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d03e      	beq.n	8008d68 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d002      	beq.n	8008d06 <SD_DMAError+0x36>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d12d      	bne.n	8008d62 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a19      	ldr	r2, [pc, #100]	; (8008d70 <SD_DMAError+0xa0>)
 8008d0c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008d1c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008d2a:	6978      	ldr	r0, [r7, #20]
 8008d2c:	f7ff ff62 	bl	8008bf4 <HAL_SD_GetCardState>
 8008d30:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2b06      	cmp	r3, #6
 8008d36:	d002      	beq.n	8008d3e <SD_DMAError+0x6e>
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2b05      	cmp	r3, #5
 8008d3c:	d10a      	bne.n	8008d54 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f002 fba4 	bl	800b490 <SDMMC_CmdStopTransfer>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008d62:	6978      	ldr	r0, [r7, #20]
 8008d64:	f7ff fcf0 	bl	8008748 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008d68:	bf00      	nop
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	004005ff 	.word	0x004005ff

08008d74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d74:	b5b0      	push	{r4, r5, r7, lr}
 8008d76:	b094      	sub	sp, #80	; 0x50
 8008d78:	af04      	add	r7, sp, #16
 8008d7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f002 fa55 	bl	800b234 <SDMMC_GetPowerState>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d102      	bne.n	8008d96 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d94:	e0b7      	b.n	8008f06 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d02f      	beq.n	8008dfe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f002 fc7f 	bl	800b6a6 <SDMMC_CmdSendCID>
 8008da8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <SD_InitCard+0x40>
    {
      return errorstate;
 8008db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db2:	e0a8      	b.n	8008f06 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2100      	movs	r1, #0
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f002 fa7f 	bl	800b2be <SDMMC_GetResponse>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2104      	movs	r1, #4
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f002 fa76 	bl	800b2be <SDMMC_GetResponse>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2108      	movs	r1, #8
 8008dde:	4618      	mov	r0, r3
 8008de0:	f002 fa6d 	bl	800b2be <SDMMC_GetResponse>
 8008de4:	4602      	mov	r2, r0
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	210c      	movs	r1, #12
 8008df0:	4618      	mov	r0, r3
 8008df2:	f002 fa64 	bl	800b2be <SDMMC_GetResponse>
 8008df6:	4602      	mov	r2, r0
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d00d      	beq.n	8008e22 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f107 020e 	add.w	r2, r7, #14
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f002 fc85 	bl	800b720 <SDMMC_CmdSetRelAdd>
 8008e16:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <SD_InitCard+0xae>
    {
      return errorstate;
 8008e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e20:	e071      	b.n	8008f06 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d036      	beq.n	8008e98 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e2a:	89fb      	ldrh	r3, [r7, #14]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e3a:	041b      	lsls	r3, r3, #16
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f002 fc4f 	bl	800b6e2 <SDMMC_CmdSendCSD>
 8008e44:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e4e:	e05a      	b.n	8008f06 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2100      	movs	r1, #0
 8008e56:	4618      	mov	r0, r3
 8008e58:	f002 fa31 	bl	800b2be <SDMMC_GetResponse>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2104      	movs	r1, #4
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f002 fa28 	bl	800b2be <SDMMC_GetResponse>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2108      	movs	r1, #8
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f002 fa1f 	bl	800b2be <SDMMC_GetResponse>
 8008e80:	4602      	mov	r2, r0
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	210c      	movs	r1, #12
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f002 fa16 	bl	800b2be <SDMMC_GetResponse>
 8008e92:	4602      	mov	r2, r0
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2104      	movs	r1, #4
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f002 fa0d 	bl	800b2be <SDMMC_GetResponse>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	0d1a      	lsrs	r2, r3, #20
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008eac:	f107 0310 	add.w	r3, r7, #16
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff fc52 	bl	800875c <HAL_SD_GetCardCSD>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ebe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ec2:	e020      	b.n	8008f06 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6819      	ldr	r1, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ecc:	041b      	lsls	r3, r3, #16
 8008ece:	f04f 0400 	mov.w	r4, #0
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	4623      	mov	r3, r4
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	f002 fafc 	bl	800b4d4 <SDMMC_CmdSelDesel>
 8008edc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <SD_InitCard+0x174>
  {
    return errorstate;
 8008ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee6:	e00e      	b.n	8008f06 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681d      	ldr	r5, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	466c      	mov	r4, sp
 8008ef0:	f103 0210 	add.w	r2, r3, #16
 8008ef4:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ef6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008efa:	3304      	adds	r3, #4
 8008efc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008efe:	4628      	mov	r0, r5
 8008f00:	f002 f950 	bl	800b1a4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3740      	adds	r7, #64	; 0x40
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008f10 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	2300      	movs	r3, #0
 8008f22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f002 faf6 	bl	800b51a <SDMMC_CmdGoIdleState>
 8008f2e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	e072      	b.n	8009020 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f002 fb09 	bl	800b556 <SDMMC_CmdOperCond>
 8008f44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00d      	beq.n	8008f68 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f002 fadf 	bl	800b51a <SDMMC_CmdGoIdleState>
 8008f5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d004      	beq.n	8008f6e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	e05b      	b.n	8009020 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d137      	bne.n	8008fe6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f002 fb09 	bl	800b594 <SDMMC_CmdAppCommand>
 8008f82:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d02d      	beq.n	8008fe6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f8e:	e047      	b.n	8009020 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2100      	movs	r1, #0
 8008f96:	4618      	mov	r0, r3
 8008f98:	f002 fafc 	bl	800b594 <SDMMC_CmdAppCommand>
 8008f9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <SD_PowerON+0x98>
    {
      return errorstate;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	e03b      	b.n	8009020 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	491e      	ldr	r1, [pc, #120]	; (8009028 <SD_PowerON+0x118>)
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f002 fb12 	bl	800b5d8 <SDMMC_CmdAppOperCommand>
 8008fb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fc0:	e02e      	b.n	8009020 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f002 f978 	bl	800b2be <SDMMC_GetResponse>
 8008fce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	0fdb      	lsrs	r3, r3, #31
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <SD_PowerON+0xcc>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e000      	b.n	8008fde <SD_PowerON+0xce>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	613b      	str	r3, [r7, #16]

    count++;
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d802      	bhi.n	8008ff6 <SD_PowerON+0xe6>
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0cc      	beq.n	8008f90 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d902      	bls.n	8009006 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009004:	e00c      	b.n	8009020 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	645a      	str	r2, [r3, #68]	; 0x44
 8009016:	e002      	b.n	800901e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	c1100000 	.word	0xc1100000

0800902c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d102      	bne.n	8009042 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800903c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009040:	e018      	b.n	8009074 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800904a:	041b      	lsls	r3, r3, #16
 800904c:	4619      	mov	r1, r3
 800904e:	4610      	mov	r0, r2
 8009050:	f002 fb87 	bl	800b762 <SDMMC_CmdSendStatus>
 8009054:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <SD_SendStatus+0x34>
  {
    return errorstate;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	e009      	b.n	8009074 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2100      	movs	r1, #0
 8009066:	4618      	mov	r0, r3
 8009068:	f002 f929 	bl	800b2be <SDMMC_GetResponse>
 800906c:	4602      	mov	r2, r0
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009084:	2300      	movs	r3, #0
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	2300      	movs	r3, #0
 800908a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2100      	movs	r1, #0
 8009092:	4618      	mov	r0, r3
 8009094:	f002 f913 	bl	800b2be <SDMMC_GetResponse>
 8009098:	4603      	mov	r3, r0
 800909a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800909e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090a2:	d102      	bne.n	80090aa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090a8:	e02f      	b.n	800910a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80090aa:	f107 030c 	add.w	r3, r7, #12
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f879 	bl	80091a8 <SD_FindSCR>
 80090b6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	e023      	b.n	800910a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01c      	beq.n	8009106 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d4:	041b      	lsls	r3, r3, #16
 80090d6:	4619      	mov	r1, r3
 80090d8:	4610      	mov	r0, r2
 80090da:	f002 fa5b 	bl	800b594 <SDMMC_CmdAppCommand>
 80090de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	e00f      	b.n	800910a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2102      	movs	r1, #2
 80090f0:	4618      	mov	r0, r3
 80090f2:	f002 fa95 	bl	800b620 <SDMMC_CmdBusWidth>
 80090f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	e003      	b.n	800910a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009102:	2300      	movs	r3, #0
 8009104:	e001      	b.n	800910a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009106:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800910a:	4618      	mov	r0, r3
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b086      	sub	sp, #24
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]
 800911e:	2300      	movs	r3, #0
 8009120:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2100      	movs	r1, #0
 8009128:	4618      	mov	r0, r3
 800912a:	f002 f8c8 	bl	800b2be <SDMMC_GetResponse>
 800912e:	4603      	mov	r3, r0
 8009130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009134:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009138:	d102      	bne.n	8009140 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800913a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800913e:	e02f      	b.n	80091a0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009140:	f107 030c 	add.w	r3, r7, #12
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f82e 	bl	80091a8 <SD_FindSCR>
 800914c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	e023      	b.n	80091a0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d01c      	beq.n	800919c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916a:	041b      	lsls	r3, r3, #16
 800916c:	4619      	mov	r1, r3
 800916e:	4610      	mov	r0, r2
 8009170:	f002 fa10 	bl	800b594 <SDMMC_CmdAppCommand>
 8009174:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	e00f      	b.n	80091a0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2100      	movs	r1, #0
 8009186:	4618      	mov	r0, r3
 8009188:	f002 fa4a 	bl	800b620 <SDMMC_CmdBusWidth>
 800918c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	e003      	b.n	80091a0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009198:	2300      	movs	r3, #0
 800919a:	e001      	b.n	80091a0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800919c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3718      	adds	r7, #24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80091a8:	b590      	push	{r4, r7, lr}
 80091aa:	b08f      	sub	sp, #60	; 0x3c
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80091b2:	f7fa fb4d 	bl	8003850 <HAL_GetTick>
 80091b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80091bc:	2300      	movs	r3, #0
 80091be:	60bb      	str	r3, [r7, #8]
 80091c0:	2300      	movs	r3, #0
 80091c2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2108      	movs	r1, #8
 80091ce:	4618      	mov	r0, r3
 80091d0:	f002 f8b4 	bl	800b33c <SDMMC_CmdBlockLength>
 80091d4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80091dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091de:	e0a9      	b.n	8009334 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e8:	041b      	lsls	r3, r3, #16
 80091ea:	4619      	mov	r1, r3
 80091ec:	4610      	mov	r0, r2
 80091ee:	f002 f9d1 	bl	800b594 <SDMMC_CmdAppCommand>
 80091f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <SD_FindSCR+0x56>
  {
    return errorstate;
 80091fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fc:	e09a      	b.n	8009334 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009202:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009204:	2308      	movs	r3, #8
 8009206:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009208:	2330      	movs	r3, #48	; 0x30
 800920a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800920c:	2302      	movs	r3, #2
 800920e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009210:	2300      	movs	r3, #0
 8009212:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009214:	2301      	movs	r3, #1
 8009216:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f107 0210 	add.w	r2, r7, #16
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f002 f85e 	bl	800b2e4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f002 fa19 	bl	800b664 <SDMMC_CmdSendSCR>
 8009232:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009236:	2b00      	cmp	r3, #0
 8009238:	d022      	beq.n	8009280 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	e07a      	b.n	8009334 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00e      	beq.n	800926a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6819      	ldr	r1, [r3, #0]
 8009250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	f107 0208 	add.w	r2, r7, #8
 8009258:	18d4      	adds	r4, r2, r3
 800925a:	4608      	mov	r0, r1
 800925c:	f001 ffce 	bl	800b1fc <SDMMC_ReadFIFO>
 8009260:	4603      	mov	r3, r0
 8009262:	6023      	str	r3, [r4, #0]
      index++;
 8009264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009266:	3301      	adds	r3, #1
 8009268:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800926a:	f7fa faf1 	bl	8003850 <HAL_GetTick>
 800926e:	4602      	mov	r2, r0
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009278:	d102      	bne.n	8009280 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800927a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800927e:	e059      	b.n	8009334 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009286:	f240 432a 	movw	r3, #1066	; 0x42a
 800928a:	4013      	ands	r3, r2
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0d6      	beq.n	800923e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009296:	f003 0308 	and.w	r3, r3, #8
 800929a:	2b00      	cmp	r3, #0
 800929c:	d005      	beq.n	80092aa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2208      	movs	r2, #8
 80092a4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80092a6:	2308      	movs	r3, #8
 80092a8:	e044      	b.n	8009334 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b0:	f003 0302 	and.w	r3, r3, #2
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d005      	beq.n	80092c4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2202      	movs	r2, #2
 80092be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80092c0:	2302      	movs	r3, #2
 80092c2:	e037      	b.n	8009334 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ca:	f003 0320 	and.w	r3, r3, #32
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d005      	beq.n	80092de <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2220      	movs	r2, #32
 80092d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80092da:	2320      	movs	r3, #32
 80092dc:	e02a      	b.n	8009334 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f240 523a 	movw	r2, #1338	; 0x53a
 80092e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	061a      	lsls	r2, r3, #24
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	021b      	lsls	r3, r3, #8
 80092f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	0a1b      	lsrs	r3, r3, #8
 80092fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	0e1b      	lsrs	r3, r3, #24
 8009304:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	601a      	str	r2, [r3, #0]
    scr++;
 800930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930c:	3304      	adds	r3, #4
 800930e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	061a      	lsls	r2, r3, #24
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	021b      	lsls	r3, r3, #8
 8009318:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800931c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	0a1b      	lsrs	r3, r3, #8
 8009322:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009326:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	0e1b      	lsrs	r3, r3, #24
 800932c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800932e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009330:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	373c      	adds	r7, #60	; 0x3c
 8009338:	46bd      	mov	sp, r7
 800933a:	bd90      	pop	{r4, r7, pc}

0800933c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e025      	b.n	800939c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7fa f849 	bl	80033fc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2202      	movs	r2, #2
 800936e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3304      	adds	r3, #4
 800937a:	4619      	mov	r1, r3
 800937c:	4610      	mov	r0, r2
 800937e:	f001 fdeb 	bl	800af58 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6818      	ldr	r0, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	461a      	mov	r2, r3
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	f001 fe55 	bl	800b03c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d101      	bne.n	80093c0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80093bc:	2302      	movs	r3, #2
 80093be:	e018      	b.n	80093f2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2202      	movs	r2, #2
 80093c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f001 feb3 	bl	800b13c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d104      	bne.n	80093e8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2205      	movs	r2, #5
 80093e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80093e6:	e003      	b.n	80093f0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b02      	cmp	r3, #2
 800940e:	d101      	bne.n	8009414 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009410:	2302      	movs	r3, #2
 8009412:	e00e      	b.n	8009432 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f001 feab 	bl	800b17e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e04c      	b.n	80094e8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7f9 fca6 	bl	8002db4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f022 0203 	bic.w	r2, r2, #3
 800947e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	4b19      	ldr	r3, [pc, #100]	; (80094f0 <HAL_SPDIFRX_Init+0xb4>)
 800948c:	4013      	ands	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009498:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800949e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80094a4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80094aa:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80094b0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80094b6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80094bc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80094c2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80094c8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	fff88407 	.word	0xfff88407

080094f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e084      	b.n	8009610 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b00      	cmp	r3, #0
 8009516:	d106      	bne.n	8009526 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7f9 fc89 	bl	8002e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2202      	movs	r2, #2
 800952a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800953c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009546:	d902      	bls.n	800954e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009548:	2300      	movs	r3, #0
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	e002      	b.n	8009554 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800954e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009552:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800955c:	d007      	beq.n	800956e <HAL_SPI_Init+0x7a>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009566:	d002      	beq.n	800956e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10b      	bne.n	800958e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800957e:	d903      	bls.n	8009588 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	631a      	str	r2, [r3, #48]	; 0x30
 8009586:	e002      	b.n	800958e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	431a      	orrs	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095ac:	431a      	orrs	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	431a      	orrs	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	ea42 0103 	orr.w	r1, r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	0c1b      	lsrs	r3, r3, #16
 80095ce:	f003 0204 	and.w	r2, r3, #4
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	431a      	orrs	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095dc:	431a      	orrs	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	ea42 0103 	orr.w	r1, r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	430a      	orrs	r2, r1
 80095ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	69da      	ldr	r2, [r3, #28]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e01d      	b.n	8009666 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d106      	bne.n	8009644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7f9 fc5c 	bl	8002efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3304      	adds	r3, #4
 8009654:	4619      	mov	r1, r3
 8009656:	4610      	mov	r0, r2
 8009658:	f000 fb78 	bl	8009d4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
	...

08009670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68da      	ldr	r2, [r3, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f042 0201 	orr.w	r2, r2, #1
 8009686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689a      	ldr	r2, [r3, #8]
 800968e:	4b0c      	ldr	r3, [pc, #48]	; (80096c0 <HAL_TIM_Base_Start_IT+0x50>)
 8009690:	4013      	ands	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b06      	cmp	r3, #6
 8009698:	d00b      	beq.n	80096b2 <HAL_TIM_Base_Start_IT+0x42>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096a0:	d007      	beq.n	80096b2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f042 0201 	orr.w	r2, r2, #1
 80096b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	00010007 	.word	0x00010007

080096c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e01d      	b.n	8009712 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7f9 fc74 	bl	8002fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3304      	adds	r3, #4
 8009700:	4619      	mov	r1, r3
 8009702:	4610      	mov	r0, r2
 8009704:	f000 fb22 	bl	8009d4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b082      	sub	sp, #8
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	f003 0302 	and.w	r3, r3, #2
 800972c:	2b02      	cmp	r3, #2
 800972e:	d122      	bne.n	8009776 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f003 0302 	and.w	r3, r3, #2
 800973a:	2b02      	cmp	r3, #2
 800973c:	d11b      	bne.n	8009776 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f06f 0202 	mvn.w	r2, #2
 8009746:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	f003 0303 	and.w	r3, r3, #3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fad7 	bl	8009d10 <HAL_TIM_IC_CaptureCallback>
 8009762:	e005      	b.n	8009770 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fac9 	bl	8009cfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fada 	bl	8009d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f003 0304 	and.w	r3, r3, #4
 8009780:	2b04      	cmp	r3, #4
 8009782:	d122      	bne.n	80097ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	f003 0304 	and.w	r3, r3, #4
 800978e:	2b04      	cmp	r3, #4
 8009790:	d11b      	bne.n	80097ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f06f 0204 	mvn.w	r2, #4
 800979a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2202      	movs	r2, #2
 80097a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d003      	beq.n	80097b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 faad 	bl	8009d10 <HAL_TIM_IC_CaptureCallback>
 80097b6:	e005      	b.n	80097c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fa9f 	bl	8009cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fab0 	bl	8009d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	f003 0308 	and.w	r3, r3, #8
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d122      	bne.n	800981e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	f003 0308 	and.w	r3, r3, #8
 80097e2:	2b08      	cmp	r3, #8
 80097e4:	d11b      	bne.n	800981e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f06f 0208 	mvn.w	r2, #8
 80097ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2204      	movs	r2, #4
 80097f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	69db      	ldr	r3, [r3, #28]
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	2b00      	cmp	r3, #0
 8009802:	d003      	beq.n	800980c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fa83 	bl	8009d10 <HAL_TIM_IC_CaptureCallback>
 800980a:	e005      	b.n	8009818 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fa75 	bl	8009cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa86 	bl	8009d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	f003 0310 	and.w	r3, r3, #16
 8009828:	2b10      	cmp	r3, #16
 800982a:	d122      	bne.n	8009872 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	f003 0310 	and.w	r3, r3, #16
 8009836:	2b10      	cmp	r3, #16
 8009838:	d11b      	bne.n	8009872 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f06f 0210 	mvn.w	r2, #16
 8009842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2208      	movs	r2, #8
 8009848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fa59 	bl	8009d10 <HAL_TIM_IC_CaptureCallback>
 800985e:	e005      	b.n	800986c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fa4b 	bl	8009cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fa5c 	bl	8009d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	f003 0301 	and.w	r3, r3, #1
 800987c:	2b01      	cmp	r3, #1
 800987e:	d10e      	bne.n	800989e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	f003 0301 	and.w	r3, r3, #1
 800988a:	2b01      	cmp	r3, #1
 800988c:	d107      	bne.n	800989e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f06f 0201 	mvn.w	r2, #1
 8009896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7f8 feb1 	bl	8002600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a8:	2b80      	cmp	r3, #128	; 0x80
 80098aa:	d10e      	bne.n	80098ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b6:	2b80      	cmp	r3, #128	; 0x80
 80098b8:	d107      	bne.n	80098ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 feef 	bl	800a6a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098d8:	d10e      	bne.n	80098f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e4:	2b80      	cmp	r3, #128	; 0x80
 80098e6:	d107      	bne.n	80098f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80098f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fee2 	bl	800a6bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009902:	2b40      	cmp	r3, #64	; 0x40
 8009904:	d10e      	bne.n	8009924 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009910:	2b40      	cmp	r3, #64	; 0x40
 8009912:	d107      	bne.n	8009924 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800991c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fa0a 	bl	8009d38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	f003 0320 	and.w	r3, r3, #32
 800992e:	2b20      	cmp	r3, #32
 8009930:	d10e      	bne.n	8009950 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	f003 0320 	and.w	r3, r3, #32
 800993c:	2b20      	cmp	r3, #32
 800993e:	d107      	bne.n	8009950 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f06f 0220 	mvn.w	r2, #32
 8009948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fea2 	bl	800a694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009950:	bf00      	nop
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800996a:	2b01      	cmp	r3, #1
 800996c:	d101      	bne.n	8009972 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800996e:	2302      	movs	r3, #2
 8009970:	e105      	b.n	8009b7e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2202      	movs	r2, #2
 800997e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b14      	cmp	r3, #20
 8009986:	f200 80f0 	bhi.w	8009b6a <HAL_TIM_PWM_ConfigChannel+0x212>
 800998a:	a201      	add	r2, pc, #4	; (adr r2, 8009990 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800998c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009990:	080099e5 	.word	0x080099e5
 8009994:	08009b6b 	.word	0x08009b6b
 8009998:	08009b6b 	.word	0x08009b6b
 800999c:	08009b6b 	.word	0x08009b6b
 80099a0:	08009a25 	.word	0x08009a25
 80099a4:	08009b6b 	.word	0x08009b6b
 80099a8:	08009b6b 	.word	0x08009b6b
 80099ac:	08009b6b 	.word	0x08009b6b
 80099b0:	08009a67 	.word	0x08009a67
 80099b4:	08009b6b 	.word	0x08009b6b
 80099b8:	08009b6b 	.word	0x08009b6b
 80099bc:	08009b6b 	.word	0x08009b6b
 80099c0:	08009aa7 	.word	0x08009aa7
 80099c4:	08009b6b 	.word	0x08009b6b
 80099c8:	08009b6b 	.word	0x08009b6b
 80099cc:	08009b6b 	.word	0x08009b6b
 80099d0:	08009ae9 	.word	0x08009ae9
 80099d4:	08009b6b 	.word	0x08009b6b
 80099d8:	08009b6b 	.word	0x08009b6b
 80099dc:	08009b6b 	.word	0x08009b6b
 80099e0:	08009b29 	.word	0x08009b29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68b9      	ldr	r1, [r7, #8]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 fa4e 	bl	8009e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	699a      	ldr	r2, [r3, #24]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f042 0208 	orr.w	r2, r2, #8
 80099fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699a      	ldr	r2, [r3, #24]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f022 0204 	bic.w	r2, r2, #4
 8009a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6999      	ldr	r1, [r3, #24]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	691a      	ldr	r2, [r3, #16]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	619a      	str	r2, [r3, #24]
      break;
 8009a22:	e0a3      	b.n	8009b6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68b9      	ldr	r1, [r7, #8]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 faa0 	bl	8009f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	699a      	ldr	r2, [r3, #24]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	699a      	ldr	r2, [r3, #24]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6999      	ldr	r1, [r3, #24]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	021a      	lsls	r2, r3, #8
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	430a      	orrs	r2, r1
 8009a62:	619a      	str	r2, [r3, #24]
      break;
 8009a64:	e082      	b.n	8009b6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68b9      	ldr	r1, [r7, #8]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 faf7 	bl	800a060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	69da      	ldr	r2, [r3, #28]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f042 0208 	orr.w	r2, r2, #8
 8009a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69da      	ldr	r2, [r3, #28]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0204 	bic.w	r2, r2, #4
 8009a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69d9      	ldr	r1, [r3, #28]
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	691a      	ldr	r2, [r3, #16]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	61da      	str	r2, [r3, #28]
      break;
 8009aa4:	e062      	b.n	8009b6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68b9      	ldr	r1, [r7, #8]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 fb4d 	bl	800a14c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69da      	ldr	r2, [r3, #28]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	69da      	ldr	r2, [r3, #28]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69d9      	ldr	r1, [r3, #28]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	021a      	lsls	r2, r3, #8
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	61da      	str	r2, [r3, #28]
      break;
 8009ae6:	e041      	b.n	8009b6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68b9      	ldr	r1, [r7, #8]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 fb84 	bl	800a1fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f042 0208 	orr.w	r2, r2, #8
 8009b02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f022 0204 	bic.w	r2, r2, #4
 8009b12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	691a      	ldr	r2, [r3, #16]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	430a      	orrs	r2, r1
 8009b24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b26:	e021      	b.n	8009b6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68b9      	ldr	r1, [r7, #8]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 fbb6 	bl	800a2a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	021a      	lsls	r2, r3, #8
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b68:	e000      	b.n	8009b6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009b6a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop

08009b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d101      	bne.n	8009ba0 <HAL_TIM_ConfigClockSource+0x18>
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	e0a6      	b.n	8009cee <HAL_TIM_ConfigClockSource+0x166>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2202      	movs	r2, #2
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	4b4f      	ldr	r3, [pc, #316]	; (8009cf8 <HAL_TIM_ConfigClockSource+0x170>)
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b40      	cmp	r3, #64	; 0x40
 8009bd6:	d067      	beq.n	8009ca8 <HAL_TIM_ConfigClockSource+0x120>
 8009bd8:	2b40      	cmp	r3, #64	; 0x40
 8009bda:	d80b      	bhi.n	8009bf4 <HAL_TIM_ConfigClockSource+0x6c>
 8009bdc:	2b10      	cmp	r3, #16
 8009bde:	d073      	beq.n	8009cc8 <HAL_TIM_ConfigClockSource+0x140>
 8009be0:	2b10      	cmp	r3, #16
 8009be2:	d802      	bhi.n	8009bea <HAL_TIM_ConfigClockSource+0x62>
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d06f      	beq.n	8009cc8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009be8:	e078      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009bea:	2b20      	cmp	r3, #32
 8009bec:	d06c      	beq.n	8009cc8 <HAL_TIM_ConfigClockSource+0x140>
 8009bee:	2b30      	cmp	r3, #48	; 0x30
 8009bf0:	d06a      	beq.n	8009cc8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009bf2:	e073      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009bf4:	2b70      	cmp	r3, #112	; 0x70
 8009bf6:	d00d      	beq.n	8009c14 <HAL_TIM_ConfigClockSource+0x8c>
 8009bf8:	2b70      	cmp	r3, #112	; 0x70
 8009bfa:	d804      	bhi.n	8009c06 <HAL_TIM_ConfigClockSource+0x7e>
 8009bfc:	2b50      	cmp	r3, #80	; 0x50
 8009bfe:	d033      	beq.n	8009c68 <HAL_TIM_ConfigClockSource+0xe0>
 8009c00:	2b60      	cmp	r3, #96	; 0x60
 8009c02:	d041      	beq.n	8009c88 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009c04:	e06a      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c0a:	d066      	beq.n	8009cda <HAL_TIM_ConfigClockSource+0x152>
 8009c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c10:	d017      	beq.n	8009c42 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009c12:	e063      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6818      	ldr	r0, [r3, #0]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	6899      	ldr	r1, [r3, #8]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	685a      	ldr	r2, [r3, #4]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	f000 fc0a 	bl	800a43c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c36:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	609a      	str	r2, [r3, #8]
      break;
 8009c40:	e04c      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6818      	ldr	r0, [r3, #0]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	6899      	ldr	r1, [r3, #8]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f000 fbf3 	bl	800a43c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689a      	ldr	r2, [r3, #8]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c64:	609a      	str	r2, [r3, #8]
      break;
 8009c66:	e039      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6818      	ldr	r0, [r3, #0]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	6859      	ldr	r1, [r3, #4]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	461a      	mov	r2, r3
 8009c76:	f000 fb67 	bl	800a348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2150      	movs	r1, #80	; 0x50
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 fbc0 	bl	800a406 <TIM_ITRx_SetConfig>
      break;
 8009c86:	e029      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6818      	ldr	r0, [r3, #0]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	6859      	ldr	r1, [r3, #4]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	461a      	mov	r2, r3
 8009c96:	f000 fb86 	bl	800a3a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2160      	movs	r1, #96	; 0x60
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 fbb0 	bl	800a406 <TIM_ITRx_SetConfig>
      break;
 8009ca6:	e019      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	6859      	ldr	r1, [r3, #4]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	f000 fb47 	bl	800a348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2140      	movs	r1, #64	; 0x40
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 fba0 	bl	800a406 <TIM_ITRx_SetConfig>
      break;
 8009cc6:	e009      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f000 fb97 	bl	800a406 <TIM_ITRx_SetConfig>
      break;
 8009cd8:	e000      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009cda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	fffeff88 	.word	0xfffeff88

08009cfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a40      	ldr	r2, [pc, #256]	; (8009e60 <TIM_Base_SetConfig+0x114>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d013      	beq.n	8009d8c <TIM_Base_SetConfig+0x40>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d6a:	d00f      	beq.n	8009d8c <TIM_Base_SetConfig+0x40>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a3d      	ldr	r2, [pc, #244]	; (8009e64 <TIM_Base_SetConfig+0x118>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d00b      	beq.n	8009d8c <TIM_Base_SetConfig+0x40>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a3c      	ldr	r2, [pc, #240]	; (8009e68 <TIM_Base_SetConfig+0x11c>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d007      	beq.n	8009d8c <TIM_Base_SetConfig+0x40>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a3b      	ldr	r2, [pc, #236]	; (8009e6c <TIM_Base_SetConfig+0x120>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d003      	beq.n	8009d8c <TIM_Base_SetConfig+0x40>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a3a      	ldr	r2, [pc, #232]	; (8009e70 <TIM_Base_SetConfig+0x124>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d108      	bne.n	8009d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a2f      	ldr	r2, [pc, #188]	; (8009e60 <TIM_Base_SetConfig+0x114>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d02b      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dac:	d027      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a2c      	ldr	r2, [pc, #176]	; (8009e64 <TIM_Base_SetConfig+0x118>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d023      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a2b      	ldr	r2, [pc, #172]	; (8009e68 <TIM_Base_SetConfig+0x11c>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d01f      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a2a      	ldr	r2, [pc, #168]	; (8009e6c <TIM_Base_SetConfig+0x120>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d01b      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a29      	ldr	r2, [pc, #164]	; (8009e70 <TIM_Base_SetConfig+0x124>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d017      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a28      	ldr	r2, [pc, #160]	; (8009e74 <TIM_Base_SetConfig+0x128>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d013      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a27      	ldr	r2, [pc, #156]	; (8009e78 <TIM_Base_SetConfig+0x12c>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d00f      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a26      	ldr	r2, [pc, #152]	; (8009e7c <TIM_Base_SetConfig+0x130>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d00b      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a25      	ldr	r2, [pc, #148]	; (8009e80 <TIM_Base_SetConfig+0x134>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d007      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a24      	ldr	r2, [pc, #144]	; (8009e84 <TIM_Base_SetConfig+0x138>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d003      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a23      	ldr	r2, [pc, #140]	; (8009e88 <TIM_Base_SetConfig+0x13c>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d108      	bne.n	8009e10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a0a      	ldr	r2, [pc, #40]	; (8009e60 <TIM_Base_SetConfig+0x114>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d003      	beq.n	8009e44 <TIM_Base_SetConfig+0xf8>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a0c      	ldr	r2, [pc, #48]	; (8009e70 <TIM_Base_SetConfig+0x124>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d103      	bne.n	8009e4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	691a      	ldr	r2, [r3, #16]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	615a      	str	r2, [r3, #20]
}
 8009e52:	bf00      	nop
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	40010000 	.word	0x40010000
 8009e64:	40000400 	.word	0x40000400
 8009e68:	40000800 	.word	0x40000800
 8009e6c:	40000c00 	.word	0x40000c00
 8009e70:	40010400 	.word	0x40010400
 8009e74:	40014000 	.word	0x40014000
 8009e78:	40014400 	.word	0x40014400
 8009e7c:	40014800 	.word	0x40014800
 8009e80:	40001800 	.word	0x40001800
 8009e84:	40001c00 	.word	0x40001c00
 8009e88:	40002000 	.word	0x40002000

08009e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	f023 0201 	bic.w	r2, r3, #1
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	4b2b      	ldr	r3, [pc, #172]	; (8009f64 <TIM_OC1_SetConfig+0xd8>)
 8009eb8:	4013      	ands	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f023 0303 	bic.w	r3, r3, #3
 8009ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f023 0302 	bic.w	r3, r3, #2
 8009ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a21      	ldr	r2, [pc, #132]	; (8009f68 <TIM_OC1_SetConfig+0xdc>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d003      	beq.n	8009ef0 <TIM_OC1_SetConfig+0x64>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a20      	ldr	r2, [pc, #128]	; (8009f6c <TIM_OC1_SetConfig+0xe0>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d10c      	bne.n	8009f0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f023 0308 	bic.w	r3, r3, #8
 8009ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f023 0304 	bic.w	r3, r3, #4
 8009f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a16      	ldr	r2, [pc, #88]	; (8009f68 <TIM_OC1_SetConfig+0xdc>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d003      	beq.n	8009f1a <TIM_OC1_SetConfig+0x8e>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a15      	ldr	r2, [pc, #84]	; (8009f6c <TIM_OC1_SetConfig+0xe0>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d111      	bne.n	8009f3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	685a      	ldr	r2, [r3, #4]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	697a      	ldr	r2, [r7, #20]
 8009f56:	621a      	str	r2, [r3, #32]
}
 8009f58:	bf00      	nop
 8009f5a:	371c      	adds	r7, #28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	fffeff8f 	.word	0xfffeff8f
 8009f68:	40010000 	.word	0x40010000
 8009f6c:	40010400 	.word	0x40010400

08009f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	f023 0210 	bic.w	r2, r3, #16
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4b2e      	ldr	r3, [pc, #184]	; (800a054 <TIM_OC2_SetConfig+0xe4>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	021b      	lsls	r3, r3, #8
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f023 0320 	bic.w	r3, r3, #32
 8009fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	011b      	lsls	r3, r3, #4
 8009fc2:	697a      	ldr	r2, [r7, #20]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a23      	ldr	r2, [pc, #140]	; (800a058 <TIM_OC2_SetConfig+0xe8>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d003      	beq.n	8009fd8 <TIM_OC2_SetConfig+0x68>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a22      	ldr	r2, [pc, #136]	; (800a05c <TIM_OC2_SetConfig+0xec>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d10d      	bne.n	8009ff4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	011b      	lsls	r3, r3, #4
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a18      	ldr	r2, [pc, #96]	; (800a058 <TIM_OC2_SetConfig+0xe8>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d003      	beq.n	800a004 <TIM_OC2_SetConfig+0x94>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a17      	ldr	r2, [pc, #92]	; (800a05c <TIM_OC2_SetConfig+0xec>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d113      	bne.n	800a02c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a00a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	695b      	ldr	r3, [r3, #20]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	4313      	orrs	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	621a      	str	r2, [r3, #32]
}
 800a046:	bf00      	nop
 800a048:	371c      	adds	r7, #28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	feff8fff 	.word	0xfeff8fff
 800a058:	40010000 	.word	0x40010000
 800a05c:	40010400 	.word	0x40010400

0800a060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4b2d      	ldr	r3, [pc, #180]	; (800a140 <TIM_OC3_SetConfig+0xe0>)
 800a08c:	4013      	ands	r3, r2
 800a08e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f023 0303 	bic.w	r3, r3, #3
 800a096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	021b      	lsls	r3, r3, #8
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a22      	ldr	r2, [pc, #136]	; (800a144 <TIM_OC3_SetConfig+0xe4>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d003      	beq.n	800a0c6 <TIM_OC3_SetConfig+0x66>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a21      	ldr	r2, [pc, #132]	; (800a148 <TIM_OC3_SetConfig+0xe8>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d10d      	bne.n	800a0e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	021b      	lsls	r3, r3, #8
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a17      	ldr	r2, [pc, #92]	; (800a144 <TIM_OC3_SetConfig+0xe4>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d003      	beq.n	800a0f2 <TIM_OC3_SetConfig+0x92>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a16      	ldr	r2, [pc, #88]	; (800a148 <TIM_OC3_SetConfig+0xe8>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d113      	bne.n	800a11a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	011b      	lsls	r3, r3, #4
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	011b      	lsls	r3, r3, #4
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	4313      	orrs	r3, r2
 800a118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	685a      	ldr	r2, [r3, #4]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	621a      	str	r2, [r3, #32]
}
 800a134:	bf00      	nop
 800a136:	371c      	adds	r7, #28
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	fffeff8f 	.word	0xfffeff8f
 800a144:	40010000 	.word	0x40010000
 800a148:	40010400 	.word	0x40010400

0800a14c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b087      	sub	sp, #28
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	69db      	ldr	r3, [r3, #28]
 800a172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	4b1e      	ldr	r3, [pc, #120]	; (800a1f0 <TIM_OC4_SetConfig+0xa4>)
 800a178:	4013      	ands	r3, r2
 800a17a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	021b      	lsls	r3, r3, #8
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	031b      	lsls	r3, r3, #12
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a13      	ldr	r2, [pc, #76]	; (800a1f4 <TIM_OC4_SetConfig+0xa8>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d003      	beq.n	800a1b4 <TIM_OC4_SetConfig+0x68>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a12      	ldr	r2, [pc, #72]	; (800a1f8 <TIM_OC4_SetConfig+0xac>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d109      	bne.n	800a1c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	019b      	lsls	r3, r3, #6
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	621a      	str	r2, [r3, #32]
}
 800a1e2:	bf00      	nop
 800a1e4:	371c      	adds	r7, #28
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	feff8fff 	.word	0xfeff8fff
 800a1f4:	40010000 	.word	0x40010000
 800a1f8:	40010400 	.word	0x40010400

0800a1fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	4b1b      	ldr	r3, [pc, #108]	; (800a294 <TIM_OC5_SetConfig+0x98>)
 800a228:	4013      	ands	r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	4313      	orrs	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a23c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	041b      	lsls	r3, r3, #16
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	4313      	orrs	r3, r2
 800a248:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a12      	ldr	r2, [pc, #72]	; (800a298 <TIM_OC5_SetConfig+0x9c>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d003      	beq.n	800a25a <TIM_OC5_SetConfig+0x5e>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a11      	ldr	r2, [pc, #68]	; (800a29c <TIM_OC5_SetConfig+0xa0>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d109      	bne.n	800a26e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a260:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	021b      	lsls	r3, r3, #8
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	621a      	str	r2, [r3, #32]
}
 800a288:	bf00      	nop
 800a28a:	371c      	adds	r7, #28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	fffeff8f 	.word	0xfffeff8f
 800a298:	40010000 	.word	0x40010000
 800a29c:	40010400 	.word	0x40010400

0800a2a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b087      	sub	sp, #28
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	4b1c      	ldr	r3, [pc, #112]	; (800a33c <TIM_OC6_SetConfig+0x9c>)
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	021b      	lsls	r3, r3, #8
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	051b      	lsls	r3, r3, #20
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a13      	ldr	r2, [pc, #76]	; (800a340 <TIM_OC6_SetConfig+0xa0>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d003      	beq.n	800a300 <TIM_OC6_SetConfig+0x60>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a12      	ldr	r2, [pc, #72]	; (800a344 <TIM_OC6_SetConfig+0xa4>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d109      	bne.n	800a314 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a306:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	029b      	lsls	r3, r3, #10
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	4313      	orrs	r3, r2
 800a312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	621a      	str	r2, [r3, #32]
}
 800a32e:	bf00      	nop
 800a330:	371c      	adds	r7, #28
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	feff8fff 	.word	0xfeff8fff
 800a340:	40010000 	.word	0x40010000
 800a344:	40010400 	.word	0x40010400

0800a348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	f023 0201 	bic.w	r2, r3, #1
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	011b      	lsls	r3, r3, #4
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f023 030a 	bic.w	r3, r3, #10
 800a384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	621a      	str	r2, [r3, #32]
}
 800a39a:	bf00      	nop
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b087      	sub	sp, #28
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	60b9      	str	r1, [r7, #8]
 800a3b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	f023 0210 	bic.w	r2, r3, #16
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	031b      	lsls	r3, r3, #12
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	011b      	lsls	r3, r3, #4
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	621a      	str	r2, [r3, #32]
}
 800a3fa:	bf00      	nop
 800a3fc:	371c      	adds	r7, #28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a406:	b480      	push	{r7}
 800a408:	b085      	sub	sp, #20
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a41c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4313      	orrs	r3, r2
 800a424:	f043 0307 	orr.w	r3, r3, #7
 800a428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	609a      	str	r2, [r3, #8]
}
 800a430:	bf00      	nop
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	021a      	lsls	r2, r3, #8
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	431a      	orrs	r2, r3
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	4313      	orrs	r3, r2
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	4313      	orrs	r3, r2
 800a468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	697a      	ldr	r2, [r7, #20]
 800a46e:	609a      	str	r2, [r3, #8]
}
 800a470:	bf00      	nop
 800a472:	371c      	adds	r7, #28
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d101      	bne.n	800a494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a490:	2302      	movs	r3, #2
 800a492:	e06d      	b.n	800a570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a30      	ldr	r2, [pc, #192]	; (800a57c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d004      	beq.n	800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a2f      	ldr	r2, [pc, #188]	; (800a580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d108      	bne.n	800a4da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a4ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a20      	ldr	r2, [pc, #128]	; (800a57c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d022      	beq.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a506:	d01d      	beq.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a1d      	ldr	r2, [pc, #116]	; (800a584 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d018      	beq.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a1c      	ldr	r2, [pc, #112]	; (800a588 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d013      	beq.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a1a      	ldr	r2, [pc, #104]	; (800a58c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d00e      	beq.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a15      	ldr	r2, [pc, #84]	; (800a580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d009      	beq.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a16      	ldr	r2, [pc, #88]	; (800a590 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d004      	beq.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a15      	ldr	r2, [pc, #84]	; (800a594 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d10c      	bne.n	800a55e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a54a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	4313      	orrs	r3, r2
 800a554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	40010000 	.word	0x40010000
 800a580:	40010400 	.word	0x40010400
 800a584:	40000400 	.word	0x40000400
 800a588:	40000800 	.word	0x40000800
 800a58c:	40000c00 	.word	0x40000c00
 800a590:	40014000 	.word	0x40014000
 800a594:	40001800 	.word	0x40001800

0800a598 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d101      	bne.n	800a5b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	e065      	b.n	800a680 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	041b      	lsls	r3, r3, #16
 800a62a:	4313      	orrs	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a16      	ldr	r2, [pc, #88]	; (800a68c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d004      	beq.n	800a642 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a14      	ldr	r2, [pc, #80]	; (800a690 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d115      	bne.n	800a66e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64c:	051b      	lsls	r3, r3, #20
 800a64e:	4313      	orrs	r3, r2
 800a650:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	40010000 	.word	0x40010000
 800a690:	40010400 	.word	0x40010400

0800a694 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e040      	b.n	800a764 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d106      	bne.n	800a6f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7f8 fd5e 	bl	80031b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2224      	movs	r2, #36	; 0x24
 800a6fc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f022 0201 	bic.w	r2, r2, #1
 800a70c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f82c 	bl	800a76c <UART_SetConfig>
 800a714:	4603      	mov	r3, r0
 800a716:	2b01      	cmp	r3, #1
 800a718:	d101      	bne.n	800a71e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e022      	b.n	800a764 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 faca 	bl	800acc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a73a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689a      	ldr	r2, [r3, #8]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a74a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0201 	orr.w	r2, r2, #1
 800a75a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 fb51 	bl	800ae04 <UART_CheckIdleState>
 800a762:	4603      	mov	r3, r0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b088      	sub	sp, #32
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a774:	2300      	movs	r3, #0
 800a776:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	431a      	orrs	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	69db      	ldr	r3, [r3, #28]
 800a790:	4313      	orrs	r3, r2
 800a792:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	4bb1      	ldr	r3, [pc, #708]	; (800aa60 <UART_SetConfig+0x2f4>)
 800a79c:	4013      	ands	r3, r2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	6812      	ldr	r2, [r2, #0]
 800a7a2:	6939      	ldr	r1, [r7, #16]
 800a7a4:	430b      	orrs	r3, r1
 800a7a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68da      	ldr	r2, [r3, #12]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	430a      	orrs	r2, r1
 800a7bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a1b      	ldr	r3, [r3, #32]
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a9f      	ldr	r2, [pc, #636]	; (800aa64 <UART_SetConfig+0x2f8>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d121      	bne.n	800a830 <UART_SetConfig+0xc4>
 800a7ec:	4b9e      	ldr	r3, [pc, #632]	; (800aa68 <UART_SetConfig+0x2fc>)
 800a7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d816      	bhi.n	800a828 <UART_SetConfig+0xbc>
 800a7fa:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <UART_SetConfig+0x94>)
 800a7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a800:	0800a811 	.word	0x0800a811
 800a804:	0800a81d 	.word	0x0800a81d
 800a808:	0800a817 	.word	0x0800a817
 800a80c:	0800a823 	.word	0x0800a823
 800a810:	2301      	movs	r3, #1
 800a812:	77fb      	strb	r3, [r7, #31]
 800a814:	e151      	b.n	800aaba <UART_SetConfig+0x34e>
 800a816:	2302      	movs	r3, #2
 800a818:	77fb      	strb	r3, [r7, #31]
 800a81a:	e14e      	b.n	800aaba <UART_SetConfig+0x34e>
 800a81c:	2304      	movs	r3, #4
 800a81e:	77fb      	strb	r3, [r7, #31]
 800a820:	e14b      	b.n	800aaba <UART_SetConfig+0x34e>
 800a822:	2308      	movs	r3, #8
 800a824:	77fb      	strb	r3, [r7, #31]
 800a826:	e148      	b.n	800aaba <UART_SetConfig+0x34e>
 800a828:	2310      	movs	r3, #16
 800a82a:	77fb      	strb	r3, [r7, #31]
 800a82c:	bf00      	nop
 800a82e:	e144      	b.n	800aaba <UART_SetConfig+0x34e>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a8d      	ldr	r2, [pc, #564]	; (800aa6c <UART_SetConfig+0x300>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d134      	bne.n	800a8a4 <UART_SetConfig+0x138>
 800a83a:	4b8b      	ldr	r3, [pc, #556]	; (800aa68 <UART_SetConfig+0x2fc>)
 800a83c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a840:	f003 030c 	and.w	r3, r3, #12
 800a844:	2b0c      	cmp	r3, #12
 800a846:	d829      	bhi.n	800a89c <UART_SetConfig+0x130>
 800a848:	a201      	add	r2, pc, #4	; (adr r2, 800a850 <UART_SetConfig+0xe4>)
 800a84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84e:	bf00      	nop
 800a850:	0800a885 	.word	0x0800a885
 800a854:	0800a89d 	.word	0x0800a89d
 800a858:	0800a89d 	.word	0x0800a89d
 800a85c:	0800a89d 	.word	0x0800a89d
 800a860:	0800a891 	.word	0x0800a891
 800a864:	0800a89d 	.word	0x0800a89d
 800a868:	0800a89d 	.word	0x0800a89d
 800a86c:	0800a89d 	.word	0x0800a89d
 800a870:	0800a88b 	.word	0x0800a88b
 800a874:	0800a89d 	.word	0x0800a89d
 800a878:	0800a89d 	.word	0x0800a89d
 800a87c:	0800a89d 	.word	0x0800a89d
 800a880:	0800a897 	.word	0x0800a897
 800a884:	2300      	movs	r3, #0
 800a886:	77fb      	strb	r3, [r7, #31]
 800a888:	e117      	b.n	800aaba <UART_SetConfig+0x34e>
 800a88a:	2302      	movs	r3, #2
 800a88c:	77fb      	strb	r3, [r7, #31]
 800a88e:	e114      	b.n	800aaba <UART_SetConfig+0x34e>
 800a890:	2304      	movs	r3, #4
 800a892:	77fb      	strb	r3, [r7, #31]
 800a894:	e111      	b.n	800aaba <UART_SetConfig+0x34e>
 800a896:	2308      	movs	r3, #8
 800a898:	77fb      	strb	r3, [r7, #31]
 800a89a:	e10e      	b.n	800aaba <UART_SetConfig+0x34e>
 800a89c:	2310      	movs	r3, #16
 800a89e:	77fb      	strb	r3, [r7, #31]
 800a8a0:	bf00      	nop
 800a8a2:	e10a      	b.n	800aaba <UART_SetConfig+0x34e>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a71      	ldr	r2, [pc, #452]	; (800aa70 <UART_SetConfig+0x304>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d120      	bne.n	800a8f0 <UART_SetConfig+0x184>
 800a8ae:	4b6e      	ldr	r3, [pc, #440]	; (800aa68 <UART_SetConfig+0x2fc>)
 800a8b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a8b8:	2b10      	cmp	r3, #16
 800a8ba:	d00f      	beq.n	800a8dc <UART_SetConfig+0x170>
 800a8bc:	2b10      	cmp	r3, #16
 800a8be:	d802      	bhi.n	800a8c6 <UART_SetConfig+0x15a>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <UART_SetConfig+0x164>
 800a8c4:	e010      	b.n	800a8e8 <UART_SetConfig+0x17c>
 800a8c6:	2b20      	cmp	r3, #32
 800a8c8:	d005      	beq.n	800a8d6 <UART_SetConfig+0x16a>
 800a8ca:	2b30      	cmp	r3, #48	; 0x30
 800a8cc:	d009      	beq.n	800a8e2 <UART_SetConfig+0x176>
 800a8ce:	e00b      	b.n	800a8e8 <UART_SetConfig+0x17c>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	77fb      	strb	r3, [r7, #31]
 800a8d4:	e0f1      	b.n	800aaba <UART_SetConfig+0x34e>
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	77fb      	strb	r3, [r7, #31]
 800a8da:	e0ee      	b.n	800aaba <UART_SetConfig+0x34e>
 800a8dc:	2304      	movs	r3, #4
 800a8de:	77fb      	strb	r3, [r7, #31]
 800a8e0:	e0eb      	b.n	800aaba <UART_SetConfig+0x34e>
 800a8e2:	2308      	movs	r3, #8
 800a8e4:	77fb      	strb	r3, [r7, #31]
 800a8e6:	e0e8      	b.n	800aaba <UART_SetConfig+0x34e>
 800a8e8:	2310      	movs	r3, #16
 800a8ea:	77fb      	strb	r3, [r7, #31]
 800a8ec:	bf00      	nop
 800a8ee:	e0e4      	b.n	800aaba <UART_SetConfig+0x34e>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a5f      	ldr	r2, [pc, #380]	; (800aa74 <UART_SetConfig+0x308>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d120      	bne.n	800a93c <UART_SetConfig+0x1d0>
 800a8fa:	4b5b      	ldr	r3, [pc, #364]	; (800aa68 <UART_SetConfig+0x2fc>)
 800a8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a900:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a904:	2b40      	cmp	r3, #64	; 0x40
 800a906:	d00f      	beq.n	800a928 <UART_SetConfig+0x1bc>
 800a908:	2b40      	cmp	r3, #64	; 0x40
 800a90a:	d802      	bhi.n	800a912 <UART_SetConfig+0x1a6>
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d005      	beq.n	800a91c <UART_SetConfig+0x1b0>
 800a910:	e010      	b.n	800a934 <UART_SetConfig+0x1c8>
 800a912:	2b80      	cmp	r3, #128	; 0x80
 800a914:	d005      	beq.n	800a922 <UART_SetConfig+0x1b6>
 800a916:	2bc0      	cmp	r3, #192	; 0xc0
 800a918:	d009      	beq.n	800a92e <UART_SetConfig+0x1c2>
 800a91a:	e00b      	b.n	800a934 <UART_SetConfig+0x1c8>
 800a91c:	2300      	movs	r3, #0
 800a91e:	77fb      	strb	r3, [r7, #31]
 800a920:	e0cb      	b.n	800aaba <UART_SetConfig+0x34e>
 800a922:	2302      	movs	r3, #2
 800a924:	77fb      	strb	r3, [r7, #31]
 800a926:	e0c8      	b.n	800aaba <UART_SetConfig+0x34e>
 800a928:	2304      	movs	r3, #4
 800a92a:	77fb      	strb	r3, [r7, #31]
 800a92c:	e0c5      	b.n	800aaba <UART_SetConfig+0x34e>
 800a92e:	2308      	movs	r3, #8
 800a930:	77fb      	strb	r3, [r7, #31]
 800a932:	e0c2      	b.n	800aaba <UART_SetConfig+0x34e>
 800a934:	2310      	movs	r3, #16
 800a936:	77fb      	strb	r3, [r7, #31]
 800a938:	bf00      	nop
 800a93a:	e0be      	b.n	800aaba <UART_SetConfig+0x34e>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a4d      	ldr	r2, [pc, #308]	; (800aa78 <UART_SetConfig+0x30c>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d124      	bne.n	800a990 <UART_SetConfig+0x224>
 800a946:	4b48      	ldr	r3, [pc, #288]	; (800aa68 <UART_SetConfig+0x2fc>)
 800a948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a94c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a954:	d012      	beq.n	800a97c <UART_SetConfig+0x210>
 800a956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a95a:	d802      	bhi.n	800a962 <UART_SetConfig+0x1f6>
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d007      	beq.n	800a970 <UART_SetConfig+0x204>
 800a960:	e012      	b.n	800a988 <UART_SetConfig+0x21c>
 800a962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a966:	d006      	beq.n	800a976 <UART_SetConfig+0x20a>
 800a968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a96c:	d009      	beq.n	800a982 <UART_SetConfig+0x216>
 800a96e:	e00b      	b.n	800a988 <UART_SetConfig+0x21c>
 800a970:	2300      	movs	r3, #0
 800a972:	77fb      	strb	r3, [r7, #31]
 800a974:	e0a1      	b.n	800aaba <UART_SetConfig+0x34e>
 800a976:	2302      	movs	r3, #2
 800a978:	77fb      	strb	r3, [r7, #31]
 800a97a:	e09e      	b.n	800aaba <UART_SetConfig+0x34e>
 800a97c:	2304      	movs	r3, #4
 800a97e:	77fb      	strb	r3, [r7, #31]
 800a980:	e09b      	b.n	800aaba <UART_SetConfig+0x34e>
 800a982:	2308      	movs	r3, #8
 800a984:	77fb      	strb	r3, [r7, #31]
 800a986:	e098      	b.n	800aaba <UART_SetConfig+0x34e>
 800a988:	2310      	movs	r3, #16
 800a98a:	77fb      	strb	r3, [r7, #31]
 800a98c:	bf00      	nop
 800a98e:	e094      	b.n	800aaba <UART_SetConfig+0x34e>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a39      	ldr	r2, [pc, #228]	; (800aa7c <UART_SetConfig+0x310>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d124      	bne.n	800a9e4 <UART_SetConfig+0x278>
 800a99a:	4b33      	ldr	r3, [pc, #204]	; (800aa68 <UART_SetConfig+0x2fc>)
 800a99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a9a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9a8:	d012      	beq.n	800a9d0 <UART_SetConfig+0x264>
 800a9aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9ae:	d802      	bhi.n	800a9b6 <UART_SetConfig+0x24a>
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d007      	beq.n	800a9c4 <UART_SetConfig+0x258>
 800a9b4:	e012      	b.n	800a9dc <UART_SetConfig+0x270>
 800a9b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9ba:	d006      	beq.n	800a9ca <UART_SetConfig+0x25e>
 800a9bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9c0:	d009      	beq.n	800a9d6 <UART_SetConfig+0x26a>
 800a9c2:	e00b      	b.n	800a9dc <UART_SetConfig+0x270>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	77fb      	strb	r3, [r7, #31]
 800a9c8:	e077      	b.n	800aaba <UART_SetConfig+0x34e>
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	77fb      	strb	r3, [r7, #31]
 800a9ce:	e074      	b.n	800aaba <UART_SetConfig+0x34e>
 800a9d0:	2304      	movs	r3, #4
 800a9d2:	77fb      	strb	r3, [r7, #31]
 800a9d4:	e071      	b.n	800aaba <UART_SetConfig+0x34e>
 800a9d6:	2308      	movs	r3, #8
 800a9d8:	77fb      	strb	r3, [r7, #31]
 800a9da:	e06e      	b.n	800aaba <UART_SetConfig+0x34e>
 800a9dc:	2310      	movs	r3, #16
 800a9de:	77fb      	strb	r3, [r7, #31]
 800a9e0:	bf00      	nop
 800a9e2:	e06a      	b.n	800aaba <UART_SetConfig+0x34e>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a25      	ldr	r2, [pc, #148]	; (800aa80 <UART_SetConfig+0x314>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d124      	bne.n	800aa38 <UART_SetConfig+0x2cc>
 800a9ee:	4b1e      	ldr	r3, [pc, #120]	; (800aa68 <UART_SetConfig+0x2fc>)
 800a9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a9f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9fc:	d012      	beq.n	800aa24 <UART_SetConfig+0x2b8>
 800a9fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa02:	d802      	bhi.n	800aa0a <UART_SetConfig+0x29e>
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d007      	beq.n	800aa18 <UART_SetConfig+0x2ac>
 800aa08:	e012      	b.n	800aa30 <UART_SetConfig+0x2c4>
 800aa0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa0e:	d006      	beq.n	800aa1e <UART_SetConfig+0x2b2>
 800aa10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa14:	d009      	beq.n	800aa2a <UART_SetConfig+0x2be>
 800aa16:	e00b      	b.n	800aa30 <UART_SetConfig+0x2c4>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	77fb      	strb	r3, [r7, #31]
 800aa1c:	e04d      	b.n	800aaba <UART_SetConfig+0x34e>
 800aa1e:	2302      	movs	r3, #2
 800aa20:	77fb      	strb	r3, [r7, #31]
 800aa22:	e04a      	b.n	800aaba <UART_SetConfig+0x34e>
 800aa24:	2304      	movs	r3, #4
 800aa26:	77fb      	strb	r3, [r7, #31]
 800aa28:	e047      	b.n	800aaba <UART_SetConfig+0x34e>
 800aa2a:	2308      	movs	r3, #8
 800aa2c:	77fb      	strb	r3, [r7, #31]
 800aa2e:	e044      	b.n	800aaba <UART_SetConfig+0x34e>
 800aa30:	2310      	movs	r3, #16
 800aa32:	77fb      	strb	r3, [r7, #31]
 800aa34:	bf00      	nop
 800aa36:	e040      	b.n	800aaba <UART_SetConfig+0x34e>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a11      	ldr	r2, [pc, #68]	; (800aa84 <UART_SetConfig+0x318>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d139      	bne.n	800aab6 <UART_SetConfig+0x34a>
 800aa42:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <UART_SetConfig+0x2fc>)
 800aa44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aa4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa50:	d027      	beq.n	800aaa2 <UART_SetConfig+0x336>
 800aa52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa56:	d817      	bhi.n	800aa88 <UART_SetConfig+0x31c>
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d01c      	beq.n	800aa96 <UART_SetConfig+0x32a>
 800aa5c:	e027      	b.n	800aaae <UART_SetConfig+0x342>
 800aa5e:	bf00      	nop
 800aa60:	efff69f3 	.word	0xefff69f3
 800aa64:	40011000 	.word	0x40011000
 800aa68:	40023800 	.word	0x40023800
 800aa6c:	40004400 	.word	0x40004400
 800aa70:	40004800 	.word	0x40004800
 800aa74:	40004c00 	.word	0x40004c00
 800aa78:	40005000 	.word	0x40005000
 800aa7c:	40011400 	.word	0x40011400
 800aa80:	40007800 	.word	0x40007800
 800aa84:	40007c00 	.word	0x40007c00
 800aa88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa8c:	d006      	beq.n	800aa9c <UART_SetConfig+0x330>
 800aa8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa92:	d009      	beq.n	800aaa8 <UART_SetConfig+0x33c>
 800aa94:	e00b      	b.n	800aaae <UART_SetConfig+0x342>
 800aa96:	2300      	movs	r3, #0
 800aa98:	77fb      	strb	r3, [r7, #31]
 800aa9a:	e00e      	b.n	800aaba <UART_SetConfig+0x34e>
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	77fb      	strb	r3, [r7, #31]
 800aaa0:	e00b      	b.n	800aaba <UART_SetConfig+0x34e>
 800aaa2:	2304      	movs	r3, #4
 800aaa4:	77fb      	strb	r3, [r7, #31]
 800aaa6:	e008      	b.n	800aaba <UART_SetConfig+0x34e>
 800aaa8:	2308      	movs	r3, #8
 800aaaa:	77fb      	strb	r3, [r7, #31]
 800aaac:	e005      	b.n	800aaba <UART_SetConfig+0x34e>
 800aaae:	2310      	movs	r3, #16
 800aab0:	77fb      	strb	r3, [r7, #31]
 800aab2:	bf00      	nop
 800aab4:	e001      	b.n	800aaba <UART_SetConfig+0x34e>
 800aab6:	2310      	movs	r3, #16
 800aab8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	69db      	ldr	r3, [r3, #28]
 800aabe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aac2:	d17f      	bne.n	800abc4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800aac4:	7ffb      	ldrb	r3, [r7, #31]
 800aac6:	2b08      	cmp	r3, #8
 800aac8:	d85c      	bhi.n	800ab84 <UART_SetConfig+0x418>
 800aaca:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <UART_SetConfig+0x364>)
 800aacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad0:	0800aaf5 	.word	0x0800aaf5
 800aad4:	0800ab15 	.word	0x0800ab15
 800aad8:	0800ab35 	.word	0x0800ab35
 800aadc:	0800ab85 	.word	0x0800ab85
 800aae0:	0800ab4d 	.word	0x0800ab4d
 800aae4:	0800ab85 	.word	0x0800ab85
 800aae8:	0800ab85 	.word	0x0800ab85
 800aaec:	0800ab85 	.word	0x0800ab85
 800aaf0:	0800ab6d 	.word	0x0800ab6d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaf4:	f7fc f8d0 	bl	8006c98 <HAL_RCC_GetPCLK1Freq>
 800aaf8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	005a      	lsls	r2, r3, #1
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	085b      	lsrs	r3, r3, #1
 800ab04:	441a      	add	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	61bb      	str	r3, [r7, #24]
        break;
 800ab12:	e03a      	b.n	800ab8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab14:	f7fc f8d4 	bl	8006cc0 <HAL_RCC_GetPCLK2Freq>
 800ab18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	005a      	lsls	r2, r3, #1
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	085b      	lsrs	r3, r3, #1
 800ab24:	441a      	add	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	61bb      	str	r3, [r7, #24]
        break;
 800ab32:	e02a      	b.n	800ab8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	085a      	lsrs	r2, r3, #1
 800ab3a:	4b5f      	ldr	r3, [pc, #380]	; (800acb8 <UART_SetConfig+0x54c>)
 800ab3c:	4413      	add	r3, r2
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	6852      	ldr	r2, [r2, #4]
 800ab42:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	61bb      	str	r3, [r7, #24]
        break;
 800ab4a:	e01e      	b.n	800ab8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab4c:	f7fb ffe6 	bl	8006b1c <HAL_RCC_GetSysClockFreq>
 800ab50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	005a      	lsls	r2, r3, #1
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	085b      	lsrs	r3, r3, #1
 800ab5c:	441a      	add	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	61bb      	str	r3, [r7, #24]
        break;
 800ab6a:	e00e      	b.n	800ab8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	085b      	lsrs	r3, r3, #1
 800ab72:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	61bb      	str	r3, [r7, #24]
        break;
 800ab82:	e002      	b.n	800ab8a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	75fb      	strb	r3, [r7, #23]
        break;
 800ab88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	2b0f      	cmp	r3, #15
 800ab8e:	d916      	bls.n	800abbe <UART_SetConfig+0x452>
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab96:	d212      	bcs.n	800abbe <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	f023 030f 	bic.w	r3, r3, #15
 800aba0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	085b      	lsrs	r3, r3, #1
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	f003 0307 	and.w	r3, r3, #7
 800abac:	b29a      	uxth	r2, r3
 800abae:	897b      	ldrh	r3, [r7, #10]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	897a      	ldrh	r2, [r7, #10]
 800abba:	60da      	str	r2, [r3, #12]
 800abbc:	e070      	b.n	800aca0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	75fb      	strb	r3, [r7, #23]
 800abc2:	e06d      	b.n	800aca0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800abc4:	7ffb      	ldrb	r3, [r7, #31]
 800abc6:	2b08      	cmp	r3, #8
 800abc8:	d859      	bhi.n	800ac7e <UART_SetConfig+0x512>
 800abca:	a201      	add	r2, pc, #4	; (adr r2, 800abd0 <UART_SetConfig+0x464>)
 800abcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd0:	0800abf5 	.word	0x0800abf5
 800abd4:	0800ac13 	.word	0x0800ac13
 800abd8:	0800ac31 	.word	0x0800ac31
 800abdc:	0800ac7f 	.word	0x0800ac7f
 800abe0:	0800ac49 	.word	0x0800ac49
 800abe4:	0800ac7f 	.word	0x0800ac7f
 800abe8:	0800ac7f 	.word	0x0800ac7f
 800abec:	0800ac7f 	.word	0x0800ac7f
 800abf0:	0800ac67 	.word	0x0800ac67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abf4:	f7fc f850 	bl	8006c98 <HAL_RCC_GetPCLK1Freq>
 800abf8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	085a      	lsrs	r2, r3, #1
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	441a      	add	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	61bb      	str	r3, [r7, #24]
        break;
 800ac10:	e038      	b.n	800ac84 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac12:	f7fc f855 	bl	8006cc0 <HAL_RCC_GetPCLK2Freq>
 800ac16:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	085a      	lsrs	r2, r3, #1
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	441a      	add	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	61bb      	str	r3, [r7, #24]
        break;
 800ac2e:	e029      	b.n	800ac84 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	085a      	lsrs	r2, r3, #1
 800ac36:	4b21      	ldr	r3, [pc, #132]	; (800acbc <UART_SetConfig+0x550>)
 800ac38:	4413      	add	r3, r2
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	6852      	ldr	r2, [r2, #4]
 800ac3e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	61bb      	str	r3, [r7, #24]
        break;
 800ac46:	e01d      	b.n	800ac84 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac48:	f7fb ff68 	bl	8006b1c <HAL_RCC_GetSysClockFreq>
 800ac4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	085a      	lsrs	r2, r3, #1
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	441a      	add	r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	61bb      	str	r3, [r7, #24]
        break;
 800ac64:	e00e      	b.n	800ac84 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	085b      	lsrs	r3, r3, #1
 800ac6c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	61bb      	str	r3, [r7, #24]
        break;
 800ac7c:	e002      	b.n	800ac84 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	75fb      	strb	r3, [r7, #23]
        break;
 800ac82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	2b0f      	cmp	r3, #15
 800ac88:	d908      	bls.n	800ac9c <UART_SetConfig+0x530>
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac90:	d204      	bcs.n	800ac9c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	69ba      	ldr	r2, [r7, #24]
 800ac98:	60da      	str	r2, [r3, #12]
 800ac9a:	e001      	b.n	800aca0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800acac:	7dfb      	ldrb	r3, [r7, #23]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3720      	adds	r7, #32
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	01e84800 	.word	0x01e84800
 800acbc:	00f42400 	.word	0x00f42400

0800acc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800accc:	f003 0301 	and.w	r3, r3, #1
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00a      	beq.n	800acea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	430a      	orrs	r2, r1
 800ace8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acee:	f003 0302 	and.w	r3, r3, #2
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00a      	beq.n	800ad0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	430a      	orrs	r2, r1
 800ad0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	f003 0304 	and.w	r3, r3, #4
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00a      	beq.n	800ad2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	430a      	orrs	r2, r1
 800ad2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad32:	f003 0308 	and.w	r3, r3, #8
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00a      	beq.n	800ad50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	430a      	orrs	r2, r1
 800ad4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad54:	f003 0310 	and.w	r3, r3, #16
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00a      	beq.n	800ad72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	430a      	orrs	r2, r1
 800ad70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad76:	f003 0320 	and.w	r3, r3, #32
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00a      	beq.n	800ad94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	430a      	orrs	r2, r1
 800ad92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d01a      	beq.n	800add6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	430a      	orrs	r2, r1
 800adb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adbe:	d10a      	bne.n	800add6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	430a      	orrs	r2, r1
 800add4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00a      	beq.n	800adf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	430a      	orrs	r2, r1
 800adf6:	605a      	str	r2, [r3, #4]
  }
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af02      	add	r7, sp, #8
 800ae0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ae12:	f7f8 fd1d 	bl	8003850 <HAL_GetTick>
 800ae16:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0308 	and.w	r3, r3, #8
 800ae22:	2b08      	cmp	r3, #8
 800ae24:	d10e      	bne.n	800ae44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 f814 	bl	800ae62 <UART_WaitOnFlagUntilTimeout>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae40:	2303      	movs	r3, #3
 800ae42:	e00a      	b.n	800ae5a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2220      	movs	r2, #32
 800ae48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2220      	movs	r2, #32
 800ae4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	60f8      	str	r0, [r7, #12]
 800ae6a:	60b9      	str	r1, [r7, #8]
 800ae6c:	603b      	str	r3, [r7, #0]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae72:	e05d      	b.n	800af30 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7a:	d059      	beq.n	800af30 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae7c:	f7f8 fce8 	bl	8003850 <HAL_GetTick>
 800ae80:	4602      	mov	r2, r0
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	69ba      	ldr	r2, [r7, #24]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d302      	bcc.n	800ae92 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d11b      	bne.n	800aeca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aea0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f022 0201 	bic.w	r2, r2, #1
 800aeb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2220      	movs	r2, #32
 800aebc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e042      	b.n	800af50 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 0304 	and.w	r3, r3, #4
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d02b      	beq.n	800af30 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aee6:	d123      	bne.n	800af30 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aef0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af00:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	689a      	ldr	r2, [r3, #8]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f022 0201 	bic.w	r2, r2, #1
 800af10:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2220      	movs	r2, #32
 800af16:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2220      	movs	r2, #32
 800af1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2220      	movs	r2, #32
 800af22:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e00f      	b.n	800af50 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	69da      	ldr	r2, [r3, #28]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	4013      	ands	r3, r2
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	bf0c      	ite	eq
 800af40:	2301      	moveq	r3, #1
 800af42:	2300      	movne	r3, #0
 800af44:	b2db      	uxtb	r3, r3
 800af46:	461a      	mov	r2, r3
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d092      	beq.n	800ae74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800af62:	2300      	movs	r3, #0
 800af64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800af66:	2300      	movs	r3, #0
 800af68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d027      	beq.n	800afc2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	4b2f      	ldr	r3, [pc, #188]	; (800b038 <FMC_SDRAM_Init+0xe0>)
 800af7c:	4013      	ands	r3, r2
 800af7e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800af88:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800af8e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800af94:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800af9a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800afa0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800afa6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800afac:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800afb2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	601a      	str	r2, [r3, #0]
 800afc0:	e032      	b.n	800b028 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afce:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800afd8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800afde:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	4b12      	ldr	r3, [pc, #72]	; (800b038 <FMC_SDRAM_Init+0xe0>)
 800aff0:	4013      	ands	r3, r2
 800aff2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800affc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b002:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b008:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b00e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b014:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	4313      	orrs	r3, r2
 800b01a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	ffff8000 	.word	0xffff8000

0800b03c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b087      	sub	sp, #28
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b048:	2300      	movs	r3, #0
 800b04a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d02e      	beq.n	800b0b4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b062:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	3b01      	subs	r3, #1
 800b070:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b072:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	3b01      	subs	r3, #1
 800b07a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b07c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	3b01      	subs	r3, #1
 800b084:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b086:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b090:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	3b01      	subs	r3, #1
 800b098:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b09a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	609a      	str	r2, [r3, #8]
 800b0b2:	e039      	b.n	800b128 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	4b1e      	ldr	r3, [pc, #120]	; (800b138 <FMC_SDRAM_Timing_Init+0xfc>)
 800b0be:	4013      	ands	r3, r2
 800b0c0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b0e6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0f6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b100:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	3b01      	subs	r3, #1
 800b108:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b10a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	3b01      	subs	r3, #1
 800b112:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b114:	4313      	orrs	r3, r2
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	4313      	orrs	r3, r2
 800b11a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	697a      	ldr	r2, [r7, #20]
 800b120:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	371c      	adds	r7, #28
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	ff0f0fff 	.word	0xff0f0fff

0800b13c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b087      	sub	sp, #28
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b154:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	3b01      	subs	r3, #1
 800b15c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b15e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b166:	4313      	orrs	r3, r2
 800b168:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	371c      	adds	r7, #28
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	695a      	ldr	r2, [r3, #20]
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	431a      	orrs	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b1a4:	b084      	sub	sp, #16
 800b1a6:	b480      	push	{r7}
 800b1a8:	b085      	sub	sp, #20
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	f107 001c 	add.w	r0, r7, #28
 800b1b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b1ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b1bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b1be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b1c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b1c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b1ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b1ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	685a      	ldr	r2, [r3, #4]
 800b1da:	4b07      	ldr	r3, [pc, #28]	; (800b1f8 <SDMMC_Init+0x54>)
 800b1dc:	4013      	ands	r3, r2
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	431a      	orrs	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	b004      	add	sp, #16
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	ffff8100 	.word	0xffff8100

0800b1fc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	370c      	adds	r7, #12
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b216:	b580      	push	{r7, lr}
 800b218:	b082      	sub	sp, #8
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2203      	movs	r2, #3
 800b222:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b224:	2002      	movs	r0, #2
 800b226:	f7f8 fb1f 	bl	8003868 <HAL_Delay>
  
  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0303 	and.w	r3, r3, #3
}
 800b244:	4618      	mov	r0, r3
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b25a:	2300      	movs	r3, #0
 800b25c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b26e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b274:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b27a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4313      	orrs	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	68da      	ldr	r2, [r3, #12]
 800b286:	4b06      	ldr	r3, [pc, #24]	; (800b2a0 <SDMMC_SendCommand+0x50>)
 800b288:	4013      	ands	r3, r2
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	431a      	orrs	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	fffff000 	.word	0xfffff000

0800b2a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	b2db      	uxtb	r3, r3
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b085      	sub	sp, #20
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	3314      	adds	r3, #20
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
}  
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	685a      	ldr	r2, [r3, #4]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b30a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b310:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b316:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b322:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	431a      	orrs	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b32e:	2300      	movs	r3, #0

}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b34a:	2310      	movs	r3, #16
 800b34c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b34e:	2340      	movs	r3, #64	; 0x40
 800b350:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b352:	2300      	movs	r3, #0
 800b354:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b35a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b35c:	f107 0308 	add.w	r3, r7, #8
 800b360:	4619      	mov	r1, r3
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7ff ff74 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b368:	f241 3288 	movw	r2, #5000	; 0x1388
 800b36c:	2110      	movs	r1, #16
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fa42 	bl	800b7f8 <SDMMC_GetCmdResp1>
 800b374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b376:	69fb      	ldr	r3, [r7, #28]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3720      	adds	r7, #32
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b088      	sub	sp, #32
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b38e:	2311      	movs	r3, #17
 800b390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b392:	2340      	movs	r3, #64	; 0x40
 800b394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b396:	2300      	movs	r3, #0
 800b398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b39e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3a0:	f107 0308 	add.w	r3, r7, #8
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f7ff ff52 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b3ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3b0:	2111      	movs	r1, #17
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fa20 	bl	800b7f8 <SDMMC_GetCmdResp1>
 800b3b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ba:	69fb      	ldr	r3, [r7, #28]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3720      	adds	r7, #32
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b088      	sub	sp, #32
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b3d2:	2312      	movs	r3, #18
 800b3d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3d6:	2340      	movs	r3, #64	; 0x40
 800b3d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3e4:	f107 0308 	add.w	r3, r7, #8
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7ff ff30 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b3f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f4:	2112      	movs	r1, #18
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f9fe 	bl	800b7f8 <SDMMC_GetCmdResp1>
 800b3fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3fe:	69fb      	ldr	r3, [r7, #28]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3720      	adds	r7, #32
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b088      	sub	sp, #32
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b416:	2318      	movs	r3, #24
 800b418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b41a:	2340      	movs	r3, #64	; 0x40
 800b41c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b41e:	2300      	movs	r3, #0
 800b420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b426:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b428:	f107 0308 	add.w	r3, r7, #8
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7ff ff0e 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b434:	f241 3288 	movw	r2, #5000	; 0x1388
 800b438:	2118      	movs	r1, #24
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f9dc 	bl	800b7f8 <SDMMC_GetCmdResp1>
 800b440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b442:	69fb      	ldr	r3, [r7, #28]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3720      	adds	r7, #32
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b088      	sub	sp, #32
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b45a:	2319      	movs	r3, #25
 800b45c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b45e:	2340      	movs	r3, #64	; 0x40
 800b460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b462:	2300      	movs	r3, #0
 800b464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b46a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b46c:	f107 0308 	add.w	r3, r7, #8
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff feec 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b478:	f241 3288 	movw	r2, #5000	; 0x1388
 800b47c:	2119      	movs	r1, #25
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f9ba 	bl	800b7f8 <SDMMC_GetCmdResp1>
 800b484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b486:	69fb      	ldr	r3, [r7, #28]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3720      	adds	r7, #32
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b088      	sub	sp, #32
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b498:	2300      	movs	r3, #0
 800b49a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b49c:	230c      	movs	r3, #12
 800b49e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4a0:	2340      	movs	r3, #64	; 0x40
 800b4a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4ae:	f107 0308 	add.w	r3, r7, #8
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f7ff fecb 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b4ba:	4a05      	ldr	r2, [pc, #20]	; (800b4d0 <SDMMC_CmdStopTransfer+0x40>)
 800b4bc:	210c      	movs	r1, #12
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f99a 	bl	800b7f8 <SDMMC_GetCmdResp1>
 800b4c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4c6:	69fb      	ldr	r3, [r7, #28]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3720      	adds	r7, #32
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	05f5e100 	.word	0x05f5e100

0800b4d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b08a      	sub	sp, #40	; 0x28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b4e4:	2307      	movs	r3, #7
 800b4e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4e8:	2340      	movs	r3, #64	; 0x40
 800b4ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4f6:	f107 0310 	add.w	r3, r7, #16
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f7ff fea7 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b502:	f241 3288 	movw	r2, #5000	; 0x1388
 800b506:	2107      	movs	r1, #7
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 f975 	bl	800b7f8 <SDMMC_GetCmdResp1>
 800b50e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b512:	4618      	mov	r0, r3
 800b514:	3728      	adds	r7, #40	; 0x28
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b088      	sub	sp, #32
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b522:	2300      	movs	r3, #0
 800b524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b526:	2300      	movs	r3, #0
 800b528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b52a:	2300      	movs	r3, #0
 800b52c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b52e:	2300      	movs	r3, #0
 800b530:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b536:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b538:	f107 0308 	add.w	r3, r7, #8
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff fe86 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f92f 	bl	800b7a8 <SDMMC_GetCmdError>
 800b54a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b54c:	69fb      	ldr	r3, [r7, #28]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b088      	sub	sp, #32
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b55e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b564:	2308      	movs	r3, #8
 800b566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b568:	2340      	movs	r3, #64	; 0x40
 800b56a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b56c:	2300      	movs	r3, #0
 800b56e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b574:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b576:	f107 0308 	add.w	r3, r7, #8
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f7ff fe67 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fb18 	bl	800bbb8 <SDMMC_GetCmdResp7>
 800b588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b58a:	69fb      	ldr	r3, [r7, #28]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3720      	adds	r7, #32
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b088      	sub	sp, #32
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b5a2:	2337      	movs	r3, #55	; 0x37
 800b5a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5a6:	2340      	movs	r3, #64	; 0x40
 800b5a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5b4:	f107 0308 	add.w	r3, r7, #8
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7ff fe48 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b5c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5c4:	2137      	movs	r1, #55	; 0x37
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f916 	bl	800b7f8 <SDMMC_GetCmdResp1>
 800b5cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3720      	adds	r7, #32
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	4b0d      	ldr	r3, [pc, #52]	; (800b61c <SDMMC_CmdAppOperCommand+0x44>)
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b5ea:	2329      	movs	r3, #41	; 0x29
 800b5ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5ee:	2340      	movs	r3, #64	; 0x40
 800b5f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5fc:	f107 0308 	add.w	r3, r7, #8
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f7ff fe24 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 fa27 	bl	800ba5c <SDMMC_GetCmdResp3>
 800b60e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b610:	69fb      	ldr	r3, [r7, #28]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3720      	adds	r7, #32
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	80100000 	.word	0x80100000

0800b620 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b088      	sub	sp, #32
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b62e:	2306      	movs	r3, #6
 800b630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b632:	2340      	movs	r3, #64	; 0x40
 800b634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b636:	2300      	movs	r3, #0
 800b638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b63e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b640:	f107 0308 	add.w	r3, r7, #8
 800b644:	4619      	mov	r1, r3
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7ff fe02 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b64c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b650:	2106      	movs	r1, #6
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f8d0 	bl	800b7f8 <SDMMC_GetCmdResp1>
 800b658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b65a:	69fb      	ldr	r3, [r7, #28]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3720      	adds	r7, #32
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b088      	sub	sp, #32
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b66c:	2300      	movs	r3, #0
 800b66e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b670:	2333      	movs	r3, #51	; 0x33
 800b672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b674:	2340      	movs	r3, #64	; 0x40
 800b676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b678:	2300      	movs	r3, #0
 800b67a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b67c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b680:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b682:	f107 0308 	add.w	r3, r7, #8
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff fde1 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b68e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b692:	2133      	movs	r1, #51	; 0x33
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f8af 	bl	800b7f8 <SDMMC_GetCmdResp1>
 800b69a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b69c:	69fb      	ldr	r3, [r7, #28]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3720      	adds	r7, #32
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b088      	sub	sp, #32
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b6b2:	2302      	movs	r3, #2
 800b6b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b6b6:	23c0      	movs	r3, #192	; 0xc0
 800b6b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6c4:	f107 0308 	add.w	r3, r7, #8
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f7ff fdc0 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f97d 	bl	800b9d0 <SDMMC_GetCmdResp2>
 800b6d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6d8:	69fb      	ldr	r3, [r7, #28]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3720      	adds	r7, #32
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b088      	sub	sp, #32
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b6f0:	2309      	movs	r3, #9
 800b6f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b6f4:	23c0      	movs	r3, #192	; 0xc0
 800b6f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b702:	f107 0308 	add.w	r3, r7, #8
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff fda1 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f95e 	bl	800b9d0 <SDMMC_GetCmdResp2>
 800b714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b716:	69fb      	ldr	r3, [r7, #28]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3720      	adds	r7, #32
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b088      	sub	sp, #32
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b72e:	2303      	movs	r3, #3
 800b730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b732:	2340      	movs	r3, #64	; 0x40
 800b734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b736:	2300      	movs	r3, #0
 800b738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b73e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b740:	f107 0308 	add.w	r3, r7, #8
 800b744:	4619      	mov	r1, r3
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7ff fd82 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	2103      	movs	r1, #3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f9bd 	bl	800bad0 <SDMMC_GetCmdResp6>
 800b756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b758:	69fb      	ldr	r3, [r7, #28]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3720      	adds	r7, #32
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b088      	sub	sp, #32
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b770:	230d      	movs	r3, #13
 800b772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b774:	2340      	movs	r3, #64	; 0x40
 800b776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b778:	2300      	movs	r3, #0
 800b77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b77c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b780:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b782:	f107 0308 	add.w	r3, r7, #8
 800b786:	4619      	mov	r1, r3
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7ff fd61 	bl	800b250 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b78e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b792:	210d      	movs	r1, #13
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f82f 	bl	800b7f8 <SDMMC_GetCmdResp1>
 800b79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b79c:	69fb      	ldr	r3, [r7, #28]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3720      	adds	r7, #32
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
	...

0800b7a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b7a8:	b490      	push	{r4, r7}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7b0:	4b0f      	ldr	r3, [pc, #60]	; (800b7f0 <SDMMC_GetCmdError+0x48>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a0f      	ldr	r2, [pc, #60]	; (800b7f4 <SDMMC_GetCmdError+0x4c>)
 800b7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ba:	0a5b      	lsrs	r3, r3, #9
 800b7bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b7c4:	4623      	mov	r3, r4
 800b7c6:	1e5c      	subs	r4, r3, #1
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d102      	bne.n	800b7d2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7d0:	e009      	b.n	800b7e6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d0f2      	beq.n	800b7c4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	22c5      	movs	r2, #197	; 0xc5
 800b7e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bc90      	pop	{r4, r7}
 800b7ee:	4770      	bx	lr
 800b7f0:	20000018 	.word	0x20000018
 800b7f4:	10624dd3 	.word	0x10624dd3

0800b7f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b7f8:	b590      	push	{r4, r7, lr}
 800b7fa:	b087      	sub	sp, #28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	460b      	mov	r3, r1
 800b802:	607a      	str	r2, [r7, #4]
 800b804:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b806:	4b6f      	ldr	r3, [pc, #444]	; (800b9c4 <SDMMC_GetCmdResp1+0x1cc>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a6f      	ldr	r2, [pc, #444]	; (800b9c8 <SDMMC_GetCmdResp1+0x1d0>)
 800b80c:	fba2 2303 	umull	r2, r3, r2, r3
 800b810:	0a5b      	lsrs	r3, r3, #9
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b818:	4623      	mov	r3, r4
 800b81a:	1e5c      	subs	r4, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b824:	e0c9      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b82a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b832:	2b00      	cmp	r3, #0
 800b834:	d0f0      	beq.n	800b818 <SDMMC_GetCmdResp1+0x20>
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1eb      	bne.n	800b818 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b844:	f003 0304 	and.w	r3, r3, #4
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d004      	beq.n	800b856 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2204      	movs	r2, #4
 800b850:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b852:	2304      	movs	r3, #4
 800b854:	e0b1      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85a:	f003 0301 	and.w	r3, r3, #1
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d004      	beq.n	800b86c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2201      	movs	r2, #1
 800b866:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b868:	2301      	movs	r3, #1
 800b86a:	e0a6      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	22c5      	movs	r2, #197	; 0xc5
 800b870:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f7ff fd16 	bl	800b2a4 <SDMMC_GetCommandResponse>
 800b878:	4603      	mov	r3, r0
 800b87a:	461a      	mov	r2, r3
 800b87c:	7afb      	ldrb	r3, [r7, #11]
 800b87e:	4293      	cmp	r3, r2
 800b880:	d001      	beq.n	800b886 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b882:	2301      	movs	r3, #1
 800b884:	e099      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b886:	2100      	movs	r1, #0
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f7ff fd18 	bl	800b2be <SDMMC_GetResponse>
 800b88e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	4b4e      	ldr	r3, [pc, #312]	; (800b9cc <SDMMC_GetCmdResp1+0x1d4>)
 800b894:	4013      	ands	r3, r2
 800b896:	2b00      	cmp	r3, #0
 800b898:	d101      	bne.n	800b89e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b89a:	2300      	movs	r3, #0
 800b89c:	e08d      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	da02      	bge.n	800b8aa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b8a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8a8:	e087      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d001      	beq.n	800b8b8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b8b4:	2340      	movs	r3, #64	; 0x40
 800b8b6:	e080      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b8c2:	2380      	movs	r3, #128	; 0x80
 800b8c4:	e079      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b8d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8d4:	e071      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d002      	beq.n	800b8e6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b8e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8e4:	e069      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b8f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8f4:	e061      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b904:	e059      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b914:	e051      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b924:	e049      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d002      	beq.n	800b936 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b930:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b934:	e041      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b944:	e039      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b954:	e031      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b960:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b964:	e029      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b970:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b974:	e021      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b980:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b984:	e019      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b990:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b994:	e011      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b9a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b9a4:	e009      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f003 0308 	and.w	r3, r3, #8
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b9b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b9b4:	e001      	b.n	800b9ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	371c      	adds	r7, #28
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd90      	pop	{r4, r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20000018 	.word	0x20000018
 800b9c8:	10624dd3 	.word	0x10624dd3
 800b9cc:	fdffe008 	.word	0xfdffe008

0800b9d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b9d0:	b490      	push	{r4, r7}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9d8:	4b1e      	ldr	r3, [pc, #120]	; (800ba54 <SDMMC_GetCmdResp2+0x84>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a1e      	ldr	r2, [pc, #120]	; (800ba58 <SDMMC_GetCmdResp2+0x88>)
 800b9de:	fba2 2303 	umull	r2, r3, r2, r3
 800b9e2:	0a5b      	lsrs	r3, r3, #9
 800b9e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b9ec:	4623      	mov	r3, r4
 800b9ee:	1e5c      	subs	r4, r3, #1
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d102      	bne.n	800b9fa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9f8:	e026      	b.n	800ba48 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d0f0      	beq.n	800b9ec <SDMMC_GetCmdResp2+0x1c>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1eb      	bne.n	800b9ec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba18:	f003 0304 	and.w	r3, r3, #4
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d004      	beq.n	800ba2a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2204      	movs	r2, #4
 800ba24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba26:	2304      	movs	r3, #4
 800ba28:	e00e      	b.n	800ba48 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba2e:	f003 0301 	and.w	r3, r3, #1
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d004      	beq.n	800ba40 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e003      	b.n	800ba48 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	22c5      	movs	r2, #197	; 0xc5
 800ba44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba46:	2300      	movs	r3, #0
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bc90      	pop	{r4, r7}
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	20000018 	.word	0x20000018
 800ba58:	10624dd3 	.word	0x10624dd3

0800ba5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ba5c:	b490      	push	{r4, r7}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba64:	4b18      	ldr	r3, [pc, #96]	; (800bac8 <SDMMC_GetCmdResp3+0x6c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a18      	ldr	r2, [pc, #96]	; (800bacc <SDMMC_GetCmdResp3+0x70>)
 800ba6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba6e:	0a5b      	lsrs	r3, r3, #9
 800ba70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ba78:	4623      	mov	r3, r4
 800ba7a:	1e5c      	subs	r4, r3, #1
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d102      	bne.n	800ba86 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba84:	e01b      	b.n	800babe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d0f0      	beq.n	800ba78 <SDMMC_GetCmdResp3+0x1c>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1eb      	bne.n	800ba78 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d004      	beq.n	800bab6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2204      	movs	r2, #4
 800bab0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bab2:	2304      	movs	r3, #4
 800bab4:	e003      	b.n	800babe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	22c5      	movs	r2, #197	; 0xc5
 800baba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bc90      	pop	{r4, r7}
 800bac6:	4770      	bx	lr
 800bac8:	20000018 	.word	0x20000018
 800bacc:	10624dd3 	.word	0x10624dd3

0800bad0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bad0:	b590      	push	{r4, r7, lr}
 800bad2:	b087      	sub	sp, #28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	460b      	mov	r3, r1
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bade:	4b34      	ldr	r3, [pc, #208]	; (800bbb0 <SDMMC_GetCmdResp6+0xe0>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a34      	ldr	r2, [pc, #208]	; (800bbb4 <SDMMC_GetCmdResp6+0xe4>)
 800bae4:	fba2 2303 	umull	r2, r3, r2, r3
 800bae8:	0a5b      	lsrs	r3, r3, #9
 800baea:	f241 3288 	movw	r2, #5000	; 0x1388
 800baee:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800baf2:	4623      	mov	r3, r4
 800baf4:	1e5c      	subs	r4, r3, #1
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d102      	bne.n	800bb00 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bafa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bafe:	e052      	b.n	800bba6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb04:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d0f0      	beq.n	800baf2 <SDMMC_GetCmdResp6+0x22>
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1eb      	bne.n	800baf2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1e:	f003 0304 	and.w	r3, r3, #4
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d004      	beq.n	800bb30 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2204      	movs	r2, #4
 800bb2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb2c:	2304      	movs	r3, #4
 800bb2e:	e03a      	b.n	800bba6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb34:	f003 0301 	and.w	r3, r3, #1
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d004      	beq.n	800bb46 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e02f      	b.n	800bba6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f7ff fbac 	bl	800b2a4 <SDMMC_GetCommandResponse>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	461a      	mov	r2, r3
 800bb50:	7afb      	ldrb	r3, [r7, #11]
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d001      	beq.n	800bb5a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb56:	2301      	movs	r3, #1
 800bb58:	e025      	b.n	800bba6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	22c5      	movs	r2, #197	; 0xc5
 800bb5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb60:	2100      	movs	r1, #0
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f7ff fbab 	bl	800b2be <SDMMC_GetResponse>
 800bb68:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d106      	bne.n	800bb82 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	0c1b      	lsrs	r3, r3, #16
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	e011      	b.n	800bba6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb90:	e009      	b.n	800bba6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bba0:	e001      	b.n	800bba6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	371c      	adds	r7, #28
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd90      	pop	{r4, r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20000018 	.word	0x20000018
 800bbb4:	10624dd3 	.word	0x10624dd3

0800bbb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bbb8:	b490      	push	{r4, r7}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbc0:	4b21      	ldr	r3, [pc, #132]	; (800bc48 <SDMMC_GetCmdResp7+0x90>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a21      	ldr	r2, [pc, #132]	; (800bc4c <SDMMC_GetCmdResp7+0x94>)
 800bbc6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbca:	0a5b      	lsrs	r3, r3, #9
 800bbcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bbd4:	4623      	mov	r3, r4
 800bbd6:	1e5c      	subs	r4, r3, #1
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d102      	bne.n	800bbe2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbe0:	e02c      	b.n	800bc3c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d0f0      	beq.n	800bbd4 <SDMMC_GetCmdResp7+0x1c>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1eb      	bne.n	800bbd4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc00:	f003 0304 	and.w	r3, r3, #4
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d004      	beq.n	800bc12 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2204      	movs	r2, #4
 800bc0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc0e:	2304      	movs	r3, #4
 800bc10:	e014      	b.n	800bc3c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc16:	f003 0301 	and.w	r3, r3, #1
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d004      	beq.n	800bc28 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2201      	movs	r2, #1
 800bc22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e009      	b.n	800bc3c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2240      	movs	r2, #64	; 0x40
 800bc38:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bc3a:	2300      	movs	r3, #0
  
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bc90      	pop	{r4, r7}
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	20000018 	.word	0x20000018
 800bc4c:	10624dd3 	.word	0x10624dd3

0800bc50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bc54:	4904      	ldr	r1, [pc, #16]	; (800bc68 <MX_FATFS_Init+0x18>)
 800bc56:	4805      	ldr	r0, [pc, #20]	; (800bc6c <MX_FATFS_Init+0x1c>)
 800bc58:	f000 fa96 	bl	800c188 <FATFS_LinkDriver>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	461a      	mov	r2, r3
 800bc60:	4b03      	ldr	r3, [pc, #12]	; (800bc70 <MX_FATFS_Init+0x20>)
 800bc62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bc64:	bf00      	nop
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	2000c720 	.word	0x2000c720
 800bc6c:	080264a8 	.word	0x080264a8
 800bc70:	2000c71c 	.word	0x2000c71c

0800bc74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bc7e:	f000 f87b 	bl	800bd78 <BSP_SD_IsDetected>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d001      	beq.n	800bc8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bc88:	2302      	movs	r3, #2
 800bc8a:	e012      	b.n	800bcb2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bc8c:	480b      	ldr	r0, [pc, #44]	; (800bcbc <BSP_SD_Init+0x48>)
 800bc8e:	f7fc fae9 	bl	8008264 <HAL_SD_Init>
 800bc92:	4603      	mov	r3, r0
 800bc94:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bc96:	79fb      	ldrb	r3, [r7, #7]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d109      	bne.n	800bcb0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bc9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bca0:	4806      	ldr	r0, [pc, #24]	; (800bcbc <BSP_SD_Init+0x48>)
 800bca2:	f7fc ff2b 	bl	8008afc <HAL_SD_ConfigWideBusOperation>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bcb0:	79fb      	ldrb	r3, [r7, #7]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	2000c1a8 	.word	0x2000c1a8

0800bcc0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bccc:	2300      	movs	r3, #0
 800bcce:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	68f9      	ldr	r1, [r7, #12]
 800bcd6:	4806      	ldr	r0, [pc, #24]	; (800bcf0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bcd8:	f7fc fb5c 	bl	8008394 <HAL_SD_ReadBlocks_DMA>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bce6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3718      	adds	r7, #24
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	2000c1a8 	.word	0x2000c1a8

0800bcf4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	68f9      	ldr	r1, [r7, #12]
 800bd0a:	4806      	ldr	r0, [pc, #24]	; (800bd24 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bd0c:	f7fc fc2e 	bl	800856c <HAL_SD_WriteBlocks_DMA>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d001      	beq.n	800bd1a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	2000c1a8 	.word	0x2000c1a8

0800bd28 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bd2c:	4805      	ldr	r0, [pc, #20]	; (800bd44 <BSP_SD_GetCardState+0x1c>)
 800bd2e:	f7fc ff61 	bl	8008bf4 <HAL_SD_GetCardState>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b04      	cmp	r3, #4
 800bd36:	bf14      	ite	ne
 800bd38:	2301      	movne	r3, #1
 800bd3a:	2300      	moveq	r3, #0
 800bd3c:	b2db      	uxtb	r3, r3
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	2000c1a8 	.word	0x2000c1a8

0800bd48 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	4803      	ldr	r0, [pc, #12]	; (800bd60 <BSP_SD_GetCardInfo+0x18>)
 800bd54:	f7fc fea6 	bl	8008aa4 <HAL_SD_GetCardInfo>
}
 800bd58:	bf00      	nop
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	2000c1a8 	.word	0x2000c1a8

0800bd64 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bd6c:	f000 f9b2 	bl	800c0d4 <BSP_SD_ReadCpltCallback>
}
 800bd70:	bf00      	nop
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800bd82:	f000 f80b 	bl	800bd9c <BSP_PlatformIsDetected>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d101      	bne.n	800bd90 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bd90:	79fb      	ldrb	r3, [r7, #7]
 800bd92:	b2db      	uxtb	r3, r3
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bda2:	2301      	movs	r3, #1
 800bda4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bda6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bdaa:	4806      	ldr	r0, [pc, #24]	; (800bdc4 <BSP_PlatformIsDetected+0x28>)
 800bdac:	f7f9 fe3a 	bl	8005a24 <HAL_GPIO_ReadPin>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800bdba:	79fb      	ldrb	r3, [r7, #7]
}  
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	40020800 	.word	0x40020800

0800bdc8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800bdd0:	f000 fa26 	bl	800c220 <osKernelSysTick>
 800bdd4:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800bdd6:	e006      	b.n	800bde6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bdd8:	f7ff ffa6 	bl	800bd28 <BSP_SD_GetCardState>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d101      	bne.n	800bde6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bde2:	2300      	movs	r3, #0
 800bde4:	e009      	b.n	800bdfa <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800bde6:	f000 fa1b 	bl	800c220 <osKernelSysTick>
 800bdea:	4602      	mov	r2, r0
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d8f0      	bhi.n	800bdd8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bdf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
	...

0800be04 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	4603      	mov	r3, r0
 800be0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800be0e:	4b0b      	ldr	r3, [pc, #44]	; (800be3c <SD_CheckStatus+0x38>)
 800be10:	2201      	movs	r2, #1
 800be12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be14:	f7ff ff88 	bl	800bd28 <BSP_SD_GetCardState>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d107      	bne.n	800be2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800be1e:	4b07      	ldr	r3, [pc, #28]	; (800be3c <SD_CheckStatus+0x38>)
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	b2db      	uxtb	r3, r3
 800be24:	f023 0301 	bic.w	r3, r3, #1
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	4b04      	ldr	r3, [pc, #16]	; (800be3c <SD_CheckStatus+0x38>)
 800be2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800be2e:	4b03      	ldr	r3, [pc, #12]	; (800be3c <SD_CheckStatus+0x38>)
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	b2db      	uxtb	r3, r3
}
 800be34:	4618      	mov	r0, r3
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	20000021 	.word	0x20000021

0800be40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800be40:	b590      	push	{r4, r7, lr}
 800be42:	b087      	sub	sp, #28
 800be44:	af00      	add	r7, sp, #0
 800be46:	4603      	mov	r3, r0
 800be48:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800be4a:	4b20      	ldr	r3, [pc, #128]	; (800becc <SD_initialize+0x8c>)
 800be4c:	2201      	movs	r2, #1
 800be4e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800be50:	f000 f9da 	bl	800c208 <osKernelRunning>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d030      	beq.n	800bebc <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800be5a:	f7ff ff0b 	bl	800bc74 <BSP_SD_Init>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d107      	bne.n	800be74 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800be64:	79fb      	ldrb	r3, [r7, #7]
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff ffcc 	bl	800be04 <SD_CheckStatus>
 800be6c:	4603      	mov	r3, r0
 800be6e:	461a      	mov	r2, r3
 800be70:	4b16      	ldr	r3, [pc, #88]	; (800becc <SD_initialize+0x8c>)
 800be72:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800be74:	4b15      	ldr	r3, [pc, #84]	; (800becc <SD_initialize+0x8c>)
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d01e      	beq.n	800bebc <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800be7e:	4b14      	ldr	r3, [pc, #80]	; (800bed0 <SD_initialize+0x90>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10e      	bne.n	800bea4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800be86:	4b13      	ldr	r3, [pc, #76]	; (800bed4 <SD_initialize+0x94>)
 800be88:	f107 0408 	add.w	r4, r7, #8
 800be8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800be92:	f107 0308 	add.w	r3, r7, #8
 800be96:	2100      	movs	r1, #0
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fa31 	bl	800c300 <osMessageCreate>
 800be9e:	4602      	mov	r2, r0
 800bea0:	4b0b      	ldr	r3, [pc, #44]	; (800bed0 <SD_initialize+0x90>)
 800bea2:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800bea4:	4b0a      	ldr	r3, [pc, #40]	; (800bed0 <SD_initialize+0x90>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d107      	bne.n	800bebc <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800beac:	4b07      	ldr	r3, [pc, #28]	; (800becc <SD_initialize+0x8c>)
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	f043 0301 	orr.w	r3, r3, #1
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	4b04      	ldr	r3, [pc, #16]	; (800becc <SD_initialize+0x8c>)
 800beba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bebc:	4b03      	ldr	r3, [pc, #12]	; (800becc <SD_initialize+0x8c>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	b2db      	uxtb	r3, r3
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	371c      	adds	r7, #28
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd90      	pop	{r4, r7, pc}
 800beca:	bf00      	nop
 800becc:	20000021 	.word	0x20000021
 800bed0:	200003ac 	.word	0x200003ac
 800bed4:	08025d90 	.word	0x08025d90

0800bed8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bee2:	79fb      	ldrb	r3, [r7, #7]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7ff ff8d 	bl	800be04 <SD_CheckStatus>
 800beea:	4603      	mov	r3, r0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b08a      	sub	sp, #40	; 0x28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60b9      	str	r1, [r7, #8]
 800befc:	607a      	str	r2, [r7, #4]
 800befe:	603b      	str	r3, [r7, #0]
 800bf00:	4603      	mov	r3, r0
 800bf02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf04:	2301      	movs	r3, #1
 800bf06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf0a:	f247 5030 	movw	r0, #30000	; 0x7530
 800bf0e:	f7ff ff5b 	bl	800bdc8 <SD_CheckStatusWithTimeout>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	da02      	bge.n	800bf1e <SD_read+0x2a>
  {
    return res;
 800bf18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf1c:	e032      	b.n	800bf84 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bf1e:	683a      	ldr	r2, [r7, #0]
 800bf20:	6879      	ldr	r1, [r7, #4]
 800bf22:	68b8      	ldr	r0, [r7, #8]
 800bf24:	f7ff fecc 	bl	800bcc0 <BSP_SD_ReadBlocks_DMA>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800bf2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d124      	bne.n	800bf80 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bf36:	4b15      	ldr	r3, [pc, #84]	; (800bf8c <SD_read+0x98>)
 800bf38:	6819      	ldr	r1, [r3, #0]
 800bf3a:	f107 0314 	add.w	r3, r7, #20
 800bf3e:	f247 5230 	movw	r2, #30000	; 0x7530
 800bf42:	4618      	mov	r0, r3
 800bf44:	f000 fa46 	bl	800c3d4 <osMessageGet>

    if (event.status == osEventMessage)
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	2b10      	cmp	r3, #16
 800bf4c:	d118      	bne.n	800bf80 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d115      	bne.n	800bf80 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800bf54:	f000 f964 	bl	800c220 <osKernelSysTick>
 800bf58:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bf5a:	e008      	b.n	800bf6e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bf5c:	f7ff fee4 	bl	800bd28 <BSP_SD_GetCardState>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d103      	bne.n	800bf6e <SD_read+0x7a>
              {
                res = RES_OK;
 800bf66:	2300      	movs	r3, #0
 800bf68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bf6c:	e008      	b.n	800bf80 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bf6e:	f000 f957 	bl	800c220 <osKernelSysTick>
 800bf72:	4602      	mov	r2, r0
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	f247 522f 	movw	r2, #29999	; 0x752f
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d9ed      	bls.n	800bf5c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bf80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3728      	adds	r7, #40	; 0x28
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	200003ac 	.word	0x200003ac

0800bf90 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b08a      	sub	sp, #40	; 0x28
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60b9      	str	r1, [r7, #8]
 800bf98:	607a      	str	r2, [r7, #4]
 800bf9a:	603b      	str	r3, [r7, #0]
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bfa6:	f247 5030 	movw	r0, #30000	; 0x7530
 800bfaa:	f7ff ff0d 	bl	800bdc8 <SD_CheckStatusWithTimeout>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	da02      	bge.n	800bfba <SD_write+0x2a>
  {
    return res;
 800bfb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfb8:	e02e      	b.n	800c018 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	68b8      	ldr	r0, [r7, #8]
 800bfc0:	f7ff fe98 	bl	800bcf4 <BSP_SD_WriteBlocks_DMA>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d124      	bne.n	800c014 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bfca:	4b15      	ldr	r3, [pc, #84]	; (800c020 <SD_write+0x90>)
 800bfcc:	6819      	ldr	r1, [r3, #0]
 800bfce:	f107 0314 	add.w	r3, r7, #20
 800bfd2:	f247 5230 	movw	r2, #30000	; 0x7530
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f000 f9fc 	bl	800c3d4 <osMessageGet>

    if (event.status == osEventMessage)
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	2b10      	cmp	r3, #16
 800bfe0:	d118      	bne.n	800c014 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d115      	bne.n	800c014 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800bfe8:	f000 f91a 	bl	800c220 <osKernelSysTick>
 800bfec:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bfee:	e008      	b.n	800c002 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bff0:	f7ff fe9a 	bl	800bd28 <BSP_SD_GetCardState>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d103      	bne.n	800c002 <SD_write+0x72>
          {
            res = RES_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c000:	e008      	b.n	800c014 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c002:	f000 f90d 	bl	800c220 <osKernelSysTick>
 800c006:	4602      	mov	r2, r0
 800c008:	6a3b      	ldr	r3, [r7, #32]
 800c00a:	1ad3      	subs	r3, r2, r3
 800c00c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c010:	4293      	cmp	r3, r2
 800c012:	d9ed      	bls.n	800bff0 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3728      	adds	r7, #40	; 0x28
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	200003ac 	.word	0x200003ac

0800c024 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b08c      	sub	sp, #48	; 0x30
 800c028:	af00      	add	r7, sp, #0
 800c02a:	4603      	mov	r3, r0
 800c02c:	603a      	str	r2, [r7, #0]
 800c02e:	71fb      	strb	r3, [r7, #7]
 800c030:	460b      	mov	r3, r1
 800c032:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c03a:	4b25      	ldr	r3, [pc, #148]	; (800c0d0 <SD_ioctl+0xac>)
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	f003 0301 	and.w	r3, r3, #1
 800c044:	2b00      	cmp	r3, #0
 800c046:	d001      	beq.n	800c04c <SD_ioctl+0x28>
 800c048:	2303      	movs	r3, #3
 800c04a:	e03c      	b.n	800c0c6 <SD_ioctl+0xa2>

  switch (cmd)
 800c04c:	79bb      	ldrb	r3, [r7, #6]
 800c04e:	2b03      	cmp	r3, #3
 800c050:	d834      	bhi.n	800c0bc <SD_ioctl+0x98>
 800c052:	a201      	add	r2, pc, #4	; (adr r2, 800c058 <SD_ioctl+0x34>)
 800c054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c058:	0800c069 	.word	0x0800c069
 800c05c:	0800c071 	.word	0x0800c071
 800c060:	0800c089 	.word	0x0800c089
 800c064:	0800c0a3 	.word	0x0800c0a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c068:	2300      	movs	r3, #0
 800c06a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c06e:	e028      	b.n	800c0c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c070:	f107 030c 	add.w	r3, r7, #12
 800c074:	4618      	mov	r0, r3
 800c076:	f7ff fe67 	bl	800bd48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c07a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c086:	e01c      	b.n	800c0c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c088:	f107 030c 	add.w	r3, r7, #12
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7ff fe5b 	bl	800bd48 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c094:	b29a      	uxth	r2, r3
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0a0:	e00f      	b.n	800c0c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0a2:	f107 030c 	add.w	r3, r7, #12
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7ff fe4e 	bl	800bd48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	0a5a      	lsrs	r2, r3, #9
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0ba:	e002      	b.n	800c0c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c0bc:	2304      	movs	r3, #4
 800c0be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c0c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3730      	adds	r7, #48	; 0x30
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	20000021 	.word	0x20000021

0800c0d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c0d8:	4b04      	ldr	r3, [pc, #16]	; (800c0ec <BSP_SD_ReadCpltCallback+0x18>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2101      	movs	r1, #1
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f000 f937 	bl	800c354 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c0e6:	bf00      	nop
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	200003ac 	.word	0x200003ac

0800c0f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b087      	sub	sp, #28
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c0fe:	2301      	movs	r3, #1
 800c100:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c102:	2300      	movs	r3, #0
 800c104:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c106:	4b1f      	ldr	r3, [pc, #124]	; (800c184 <FATFS_LinkDriverEx+0x94>)
 800c108:	7a5b      	ldrb	r3, [r3, #9]
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d131      	bne.n	800c174 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c110:	4b1c      	ldr	r3, [pc, #112]	; (800c184 <FATFS_LinkDriverEx+0x94>)
 800c112:	7a5b      	ldrb	r3, [r3, #9]
 800c114:	b2db      	uxtb	r3, r3
 800c116:	461a      	mov	r2, r3
 800c118:	4b1a      	ldr	r3, [pc, #104]	; (800c184 <FATFS_LinkDriverEx+0x94>)
 800c11a:	2100      	movs	r1, #0
 800c11c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c11e:	4b19      	ldr	r3, [pc, #100]	; (800c184 <FATFS_LinkDriverEx+0x94>)
 800c120:	7a5b      	ldrb	r3, [r3, #9]
 800c122:	b2db      	uxtb	r3, r3
 800c124:	4a17      	ldr	r2, [pc, #92]	; (800c184 <FATFS_LinkDriverEx+0x94>)
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	4413      	add	r3, r2
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c12e:	4b15      	ldr	r3, [pc, #84]	; (800c184 <FATFS_LinkDriverEx+0x94>)
 800c130:	7a5b      	ldrb	r3, [r3, #9]
 800c132:	b2db      	uxtb	r3, r3
 800c134:	461a      	mov	r2, r3
 800c136:	4b13      	ldr	r3, [pc, #76]	; (800c184 <FATFS_LinkDriverEx+0x94>)
 800c138:	4413      	add	r3, r2
 800c13a:	79fa      	ldrb	r2, [r7, #7]
 800c13c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c13e:	4b11      	ldr	r3, [pc, #68]	; (800c184 <FATFS_LinkDriverEx+0x94>)
 800c140:	7a5b      	ldrb	r3, [r3, #9]
 800c142:	b2db      	uxtb	r3, r3
 800c144:	1c5a      	adds	r2, r3, #1
 800c146:	b2d1      	uxtb	r1, r2
 800c148:	4a0e      	ldr	r2, [pc, #56]	; (800c184 <FATFS_LinkDriverEx+0x94>)
 800c14a:	7251      	strb	r1, [r2, #9]
 800c14c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c14e:	7dbb      	ldrb	r3, [r7, #22]
 800c150:	3330      	adds	r3, #48	; 0x30
 800c152:	b2da      	uxtb	r2, r3
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	3301      	adds	r3, #1
 800c15c:	223a      	movs	r2, #58	; 0x3a
 800c15e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	3302      	adds	r3, #2
 800c164:	222f      	movs	r2, #47	; 0x2f
 800c166:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	3303      	adds	r3, #3
 800c16c:	2200      	movs	r2, #0
 800c16e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c174:	7dfb      	ldrb	r3, [r7, #23]
}
 800c176:	4618      	mov	r0, r3
 800c178:	371c      	adds	r7, #28
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	200003b0 	.word	0x200003b0

0800c188 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c192:	2200      	movs	r2, #0
 800c194:	6839      	ldr	r1, [r7, #0]
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7ff ffaa 	bl	800c0f0 <FATFS_LinkDriverEx>
 800c19c:	4603      	mov	r3, r0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c1a6:	b480      	push	{r7}
 800c1a8:	b085      	sub	sp, #20
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c1b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1b8:	2b84      	cmp	r3, #132	; 0x84
 800c1ba:	d005      	beq.n	800c1c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c1bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	3303      	adds	r3, #3
 800c1c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3714      	adds	r7, #20
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr

0800c1d6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	b083      	sub	sp, #12
 800c1da:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1dc:	f3ef 8305 	mrs	r3, IPSR
 800c1e0:	607b      	str	r3, [r7, #4]
  return(result);
 800c1e2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	bf14      	ite	ne
 800c1e8:	2301      	movne	r3, #1
 800c1ea:	2300      	moveq	r3, #0
 800c1ec:	b2db      	uxtb	r3, r3
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	370c      	adds	r7, #12
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c1fe:	f001 faff 	bl	800d800 <vTaskStartScheduler>
  
  return osOK;
 800c202:	2300      	movs	r3, #0
}
 800c204:	4618      	mov	r0, r3
 800c206:	bd80      	pop	{r7, pc}

0800c208 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c20c:	f001 ff4a 	bl	800e0a4 <xTaskGetSchedulerState>
 800c210:	4603      	mov	r3, r0
 800c212:	2b01      	cmp	r3, #1
 800c214:	d101      	bne.n	800c21a <osKernelRunning+0x12>
    return 0;
 800c216:	2300      	movs	r3, #0
 800c218:	e000      	b.n	800c21c <osKernelRunning+0x14>
  else
    return 1;
 800c21a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c224:	f7ff ffd7 	bl	800c1d6 <inHandlerMode>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d003      	beq.n	800c236 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c22e:	f001 fc05 	bl	800da3c <xTaskGetTickCountFromISR>
 800c232:	4603      	mov	r3, r0
 800c234:	e002      	b.n	800c23c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c236:	f001 fbf1 	bl	800da1c <xTaskGetTickCount>
 800c23a:	4603      	mov	r3, r0
  }
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c242:	b089      	sub	sp, #36	; 0x24
 800c244:	af04      	add	r7, sp, #16
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	695b      	ldr	r3, [r3, #20]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d020      	beq.n	800c294 <osThreadCreate+0x54>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d01c      	beq.n	800c294 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	685c      	ldr	r4, [r3, #4]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681d      	ldr	r5, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	691e      	ldr	r6, [r3, #16]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7ff ff9a 	bl	800c1a6 <makeFreeRtosPriority>
 800c272:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	695b      	ldr	r3, [r3, #20]
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c27c:	9202      	str	r2, [sp, #8]
 800c27e:	9301      	str	r3, [sp, #4]
 800c280:	9100      	str	r1, [sp, #0]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	4632      	mov	r2, r6
 800c286:	4629      	mov	r1, r5
 800c288:	4620      	mov	r0, r4
 800c28a:	f001 f8e0 	bl	800d44e <xTaskCreateStatic>
 800c28e:	4603      	mov	r3, r0
 800c290:	60fb      	str	r3, [r7, #12]
 800c292:	e01c      	b.n	800c2ce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	685c      	ldr	r4, [r3, #4]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c2a0:	b29e      	uxth	r6, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7ff ff7c 	bl	800c1a6 <makeFreeRtosPriority>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	f107 030c 	add.w	r3, r7, #12
 800c2b4:	9301      	str	r3, [sp, #4]
 800c2b6:	9200      	str	r2, [sp, #0]
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	4632      	mov	r2, r6
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f001 f925 	bl	800d50e <xTaskCreate>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d001      	beq.n	800c2ce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	e000      	b.n	800c2d0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2d8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d001      	beq.n	800c2ee <osDelay+0x16>
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	e000      	b.n	800c2f0 <osDelay+0x18>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f001 fa4f 	bl	800d794 <vTaskDelay>
  
  return osOK;
 800c2f6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c300:	b590      	push	{r4, r7, lr}
 800c302:	b085      	sub	sp, #20
 800c304:	af02      	add	r7, sp, #8
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d012      	beq.n	800c338 <osMessageCreate+0x38>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00e      	beq.n	800c338 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6818      	ldr	r0, [r3, #0]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6859      	ldr	r1, [r3, #4]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	689a      	ldr	r2, [r3, #8]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	68dc      	ldr	r4, [r3, #12]
 800c32a:	2300      	movs	r3, #0
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	4623      	mov	r3, r4
 800c330:	f000 f9e2 	bl	800c6f8 <xQueueGenericCreateStatic>
 800c334:	4603      	mov	r3, r0
 800c336:	e008      	b.n	800c34a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6818      	ldr	r0, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	4619      	mov	r1, r3
 800c344:	f000 fa55 	bl	800c7f2 <xQueueGenericCreate>
 800c348:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd90      	pop	{r4, r7, pc}
	...

0800c354 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c360:	2300      	movs	r3, #0
 800c362:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d101      	bne.n	800c372 <osMessagePut+0x1e>
    ticks = 1;
 800c36e:	2301      	movs	r3, #1
 800c370:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c372:	f7ff ff30 	bl	800c1d6 <inHandlerMode>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d018      	beq.n	800c3ae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c37c:	f107 0210 	add.w	r2, r7, #16
 800c380:	f107 0108 	add.w	r1, r7, #8
 800c384:	2300      	movs	r3, #0
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 fb96 	bl	800cab8 <xQueueGenericSendFromISR>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d001      	beq.n	800c396 <osMessagePut+0x42>
      return osErrorOS;
 800c392:	23ff      	movs	r3, #255	; 0xff
 800c394:	e018      	b.n	800c3c8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d014      	beq.n	800c3c6 <osMessagePut+0x72>
 800c39c:	4b0c      	ldr	r3, [pc, #48]	; (800c3d0 <osMessagePut+0x7c>)
 800c39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	e00b      	b.n	800c3c6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c3ae:	f107 0108 	add.w	r1, r7, #8
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	68f8      	ldr	r0, [r7, #12]
 800c3b8:	f000 fa7c 	bl	800c8b4 <xQueueGenericSend>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d001      	beq.n	800c3c6 <osMessagePut+0x72>
      return osErrorOS;
 800c3c2:	23ff      	movs	r3, #255	; 0xff
 800c3c4:	e000      	b.n	800c3c8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	e000ed04 	.word	0xe000ed04

0800c3d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c3d4:	b590      	push	{r4, r7, lr}
 800c3d6:	b08b      	sub	sp, #44	; 0x2c
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10a      	bne.n	800c404 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c3ee:	2380      	movs	r3, #128	; 0x80
 800c3f0:	617b      	str	r3, [r7, #20]
    return event;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	461c      	mov	r4, r3
 800c3f6:	f107 0314 	add.w	r3, r7, #20
 800c3fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c402:	e054      	b.n	800c4ae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c404:	2300      	movs	r3, #0
 800c406:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c412:	d103      	bne.n	800c41c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c414:	f04f 33ff 	mov.w	r3, #4294967295
 800c418:	627b      	str	r3, [r7, #36]	; 0x24
 800c41a:	e009      	b.n	800c430 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d006      	beq.n	800c430 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d101      	bne.n	800c430 <osMessageGet+0x5c>
      ticks = 1;
 800c42c:	2301      	movs	r3, #1
 800c42e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c430:	f7ff fed1 	bl	800c1d6 <inHandlerMode>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d01c      	beq.n	800c474 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c43a:	f107 0220 	add.w	r2, r7, #32
 800c43e:	f107 0314 	add.w	r3, r7, #20
 800c442:	3304      	adds	r3, #4
 800c444:	4619      	mov	r1, r3
 800c446:	68b8      	ldr	r0, [r7, #8]
 800c448:	f000 fe56 	bl	800d0f8 <xQueueReceiveFromISR>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d102      	bne.n	800c458 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c452:	2310      	movs	r3, #16
 800c454:	617b      	str	r3, [r7, #20]
 800c456:	e001      	b.n	800c45c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c458:	2300      	movs	r3, #0
 800c45a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c45c:	6a3b      	ldr	r3, [r7, #32]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d01d      	beq.n	800c49e <osMessageGet+0xca>
 800c462:	4b15      	ldr	r3, [pc, #84]	; (800c4b8 <osMessageGet+0xe4>)
 800c464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	e014      	b.n	800c49e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c474:	f107 0314 	add.w	r3, r7, #20
 800c478:	3304      	adds	r3, #4
 800c47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c47c:	4619      	mov	r1, r3
 800c47e:	68b8      	ldr	r0, [r7, #8]
 800c480:	f000 fc48 	bl	800cd14 <xQueueReceive>
 800c484:	4603      	mov	r3, r0
 800c486:	2b01      	cmp	r3, #1
 800c488:	d102      	bne.n	800c490 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c48a:	2310      	movs	r3, #16
 800c48c:	617b      	str	r3, [r7, #20]
 800c48e:	e006      	b.n	800c49e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c492:	2b00      	cmp	r3, #0
 800c494:	d101      	bne.n	800c49a <osMessageGet+0xc6>
 800c496:	2300      	movs	r3, #0
 800c498:	e000      	b.n	800c49c <osMessageGet+0xc8>
 800c49a:	2340      	movs	r3, #64	; 0x40
 800c49c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	461c      	mov	r4, r3
 800c4a2:	f107 0314 	add.w	r3, r7, #20
 800c4a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	372c      	adds	r7, #44	; 0x2c
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd90      	pop	{r4, r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	e000ed04 	.word	0xe000ed04

0800c4bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f103 0208 	add.w	r2, r3, #8
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f103 0208 	add.w	r2, r3, #8
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f103 0208 	add.w	r2, r3, #8
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c50a:	bf00      	nop
 800c50c:	370c      	adds	r7, #12
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr

0800c516 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c516:	b480      	push	{r7}
 800c518:	b085      	sub	sp, #20
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
 800c51e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	689a      	ldr	r2, [r3, #8]
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	683a      	ldr	r2, [r7, #0]
 800c53a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	683a      	ldr	r2, [r7, #0]
 800c540:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	1c5a      	adds	r2, r3, #1
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	601a      	str	r2, [r3, #0]
}
 800c552:	bf00      	nop
 800c554:	3714      	adds	r7, #20
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c55e:	b480      	push	{r7}
 800c560:	b085      	sub	sp, #20
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
 800c566:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c574:	d103      	bne.n	800c57e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	60fb      	str	r3, [r7, #12]
 800c57c:	e00c      	b.n	800c598 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	3308      	adds	r3, #8
 800c582:	60fb      	str	r3, [r7, #12]
 800c584:	e002      	b.n	800c58c <vListInsert+0x2e>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	60fb      	str	r3, [r7, #12]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	429a      	cmp	r2, r3
 800c596:	d2f6      	bcs.n	800c586 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	683a      	ldr	r2, [r7, #0]
 800c5a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	1c5a      	adds	r2, r3, #1
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	601a      	str	r2, [r3, #0]
}
 800c5c4:	bf00      	nop
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	691b      	ldr	r3, [r3, #16]
 800c5dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	6892      	ldr	r2, [r2, #8]
 800c5e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	6852      	ldr	r2, [r2, #4]
 800c5f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d103      	bne.n	800c604 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	689a      	ldr	r2, [r3, #8]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	1e5a      	subs	r2, r3, #1
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3714      	adds	r7, #20
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10b      	bne.n	800c650 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63c:	b672      	cpsid	i
 800c63e:	f383 8811 	msr	BASEPRI, r3
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	b662      	cpsie	i
 800c64c:	60bb      	str	r3, [r7, #8]
 800c64e:	e7fe      	b.n	800c64e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c650:	f002 f86a 	bl	800e728 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c65c:	68f9      	ldr	r1, [r7, #12]
 800c65e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c660:	fb01 f303 	mul.w	r3, r1, r3
 800c664:	441a      	add	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c680:	3b01      	subs	r3, #1
 800c682:	68f9      	ldr	r1, [r7, #12]
 800c684:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c686:	fb01 f303 	mul.w	r3, r1, r3
 800c68a:	441a      	add	r2, r3
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	22ff      	movs	r2, #255	; 0xff
 800c694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	22ff      	movs	r2, #255	; 0xff
 800c69c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d114      	bne.n	800c6d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d01a      	beq.n	800c6e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3310      	adds	r3, #16
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f001 fb36 	bl	800dd24 <xTaskRemoveFromEventList>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d012      	beq.n	800c6e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c6be:	4b0d      	ldr	r3, [pc, #52]	; (800c6f4 <xQueueGenericReset+0xd0>)
 800c6c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6c4:	601a      	str	r2, [r3, #0]
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	f3bf 8f6f 	isb	sy
 800c6ce:	e009      	b.n	800c6e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	3310      	adds	r3, #16
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7ff fef1 	bl	800c4bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	3324      	adds	r3, #36	; 0x24
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7ff feec 	bl	800c4bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c6e4:	f002 f852 	bl	800e78c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c6e8:	2301      	movs	r3, #1
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	e000ed04 	.word	0xe000ed04

0800c6f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b08e      	sub	sp, #56	; 0x38
 800c6fc:	af02      	add	r7, sp, #8
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
 800c704:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10b      	bne.n	800c724 <xQueueGenericCreateStatic+0x2c>
 800c70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c710:	b672      	cpsid	i
 800c712:	f383 8811 	msr	BASEPRI, r3
 800c716:	f3bf 8f6f 	isb	sy
 800c71a:	f3bf 8f4f 	dsb	sy
 800c71e:	b662      	cpsie	i
 800c720:	62bb      	str	r3, [r7, #40]	; 0x28
 800c722:	e7fe      	b.n	800c722 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10b      	bne.n	800c742 <xQueueGenericCreateStatic+0x4a>
 800c72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72e:	b672      	cpsid	i
 800c730:	f383 8811 	msr	BASEPRI, r3
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	b662      	cpsie	i
 800c73e:	627b      	str	r3, [r7, #36]	; 0x24
 800c740:	e7fe      	b.n	800c740 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d002      	beq.n	800c74e <xQueueGenericCreateStatic+0x56>
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d001      	beq.n	800c752 <xQueueGenericCreateStatic+0x5a>
 800c74e:	2301      	movs	r3, #1
 800c750:	e000      	b.n	800c754 <xQueueGenericCreateStatic+0x5c>
 800c752:	2300      	movs	r3, #0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10b      	bne.n	800c770 <xQueueGenericCreateStatic+0x78>
 800c758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75c:	b672      	cpsid	i
 800c75e:	f383 8811 	msr	BASEPRI, r3
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	b662      	cpsie	i
 800c76c:	623b      	str	r3, [r7, #32]
 800c76e:	e7fe      	b.n	800c76e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d102      	bne.n	800c77c <xQueueGenericCreateStatic+0x84>
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <xQueueGenericCreateStatic+0x88>
 800c77c:	2301      	movs	r3, #1
 800c77e:	e000      	b.n	800c782 <xQueueGenericCreateStatic+0x8a>
 800c780:	2300      	movs	r3, #0
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10b      	bne.n	800c79e <xQueueGenericCreateStatic+0xa6>
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	b672      	cpsid	i
 800c78c:	f383 8811 	msr	BASEPRI, r3
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	f3bf 8f4f 	dsb	sy
 800c798:	b662      	cpsie	i
 800c79a:	61fb      	str	r3, [r7, #28]
 800c79c:	e7fe      	b.n	800c79c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c79e:	2348      	movs	r3, #72	; 0x48
 800c7a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	2b48      	cmp	r3, #72	; 0x48
 800c7a6:	d00b      	beq.n	800c7c0 <xQueueGenericCreateStatic+0xc8>
 800c7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ac:	b672      	cpsid	i
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	b662      	cpsie	i
 800c7bc:	61bb      	str	r3, [r7, #24]
 800c7be:	e7fe      	b.n	800c7be <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c7c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00d      	beq.n	800c7e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c7d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	4613      	mov	r3, r2
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	68b9      	ldr	r1, [r7, #8]
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f000 f846 	bl	800c874 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3730      	adds	r7, #48	; 0x30
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b08a      	sub	sp, #40	; 0x28
 800c7f6:	af02      	add	r7, sp, #8
 800c7f8:	60f8      	str	r0, [r7, #12]
 800c7fa:	60b9      	str	r1, [r7, #8]
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d10b      	bne.n	800c81e <xQueueGenericCreate+0x2c>
 800c806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80a:	b672      	cpsid	i
 800c80c:	f383 8811 	msr	BASEPRI, r3
 800c810:	f3bf 8f6f 	isb	sy
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	b662      	cpsie	i
 800c81a:	613b      	str	r3, [r7, #16]
 800c81c:	e7fe      	b.n	800c81c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d102      	bne.n	800c82a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c824:	2300      	movs	r3, #0
 800c826:	61fb      	str	r3, [r7, #28]
 800c828:	e004      	b.n	800c834 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	fb02 f303 	mul.w	r3, r2, r3
 800c832:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	3348      	adds	r3, #72	; 0x48
 800c838:	4618      	mov	r0, r3
 800c83a:	f002 f897 	bl	800e96c <pvPortMalloc>
 800c83e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d011      	beq.n	800c86a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	3348      	adds	r3, #72	; 0x48
 800c84e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c858:	79fa      	ldrb	r2, [r7, #7]
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	9300      	str	r3, [sp, #0]
 800c85e:	4613      	mov	r3, r2
 800c860:	697a      	ldr	r2, [r7, #20]
 800c862:	68b9      	ldr	r1, [r7, #8]
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f000 f805 	bl	800c874 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c86a:	69bb      	ldr	r3, [r7, #24]
	}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3720      	adds	r7, #32
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
 800c880:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d103      	bne.n	800c890 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	69ba      	ldr	r2, [r7, #24]
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	e002      	b.n	800c896 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c8a2:	2101      	movs	r1, #1
 800c8a4:	69b8      	ldr	r0, [r7, #24]
 800c8a6:	f7ff febd 	bl	800c624 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c8aa:	bf00      	nop
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
	...

0800c8b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b08e      	sub	sp, #56	; 0x38
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]
 800c8c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d10b      	bne.n	800c8e8 <xQueueGenericSend+0x34>
 800c8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d4:	b672      	cpsid	i
 800c8d6:	f383 8811 	msr	BASEPRI, r3
 800c8da:	f3bf 8f6f 	isb	sy
 800c8de:	f3bf 8f4f 	dsb	sy
 800c8e2:	b662      	cpsie	i
 800c8e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8e6:	e7fe      	b.n	800c8e6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d103      	bne.n	800c8f6 <xQueueGenericSend+0x42>
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <xQueueGenericSend+0x46>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e000      	b.n	800c8fc <xQueueGenericSend+0x48>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10b      	bne.n	800c918 <xQueueGenericSend+0x64>
 800c900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c904:	b672      	cpsid	i
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	b662      	cpsie	i
 800c914:	627b      	str	r3, [r7, #36]	; 0x24
 800c916:	e7fe      	b.n	800c916 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	d103      	bne.n	800c926 <xQueueGenericSend+0x72>
 800c91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c922:	2b01      	cmp	r3, #1
 800c924:	d101      	bne.n	800c92a <xQueueGenericSend+0x76>
 800c926:	2301      	movs	r3, #1
 800c928:	e000      	b.n	800c92c <xQueueGenericSend+0x78>
 800c92a:	2300      	movs	r3, #0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10b      	bne.n	800c948 <xQueueGenericSend+0x94>
 800c930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c934:	b672      	cpsid	i
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	b662      	cpsie	i
 800c944:	623b      	str	r3, [r7, #32]
 800c946:	e7fe      	b.n	800c946 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c948:	f001 fbac 	bl	800e0a4 <xTaskGetSchedulerState>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d102      	bne.n	800c958 <xQueueGenericSend+0xa4>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d101      	bne.n	800c95c <xQueueGenericSend+0xa8>
 800c958:	2301      	movs	r3, #1
 800c95a:	e000      	b.n	800c95e <xQueueGenericSend+0xaa>
 800c95c:	2300      	movs	r3, #0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10b      	bne.n	800c97a <xQueueGenericSend+0xc6>
 800c962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c966:	b672      	cpsid	i
 800c968:	f383 8811 	msr	BASEPRI, r3
 800c96c:	f3bf 8f6f 	isb	sy
 800c970:	f3bf 8f4f 	dsb	sy
 800c974:	b662      	cpsie	i
 800c976:	61fb      	str	r3, [r7, #28]
 800c978:	e7fe      	b.n	800c978 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c97a:	f001 fed5 	bl	800e728 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c986:	429a      	cmp	r2, r3
 800c988:	d302      	bcc.n	800c990 <xQueueGenericSend+0xdc>
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d129      	bne.n	800c9e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c990:	683a      	ldr	r2, [r7, #0]
 800c992:	68b9      	ldr	r1, [r7, #8]
 800c994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c996:	f000 fc4a 	bl	800d22e <prvCopyDataToQueue>
 800c99a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d010      	beq.n	800c9c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a6:	3324      	adds	r3, #36	; 0x24
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f001 f9bb 	bl	800dd24 <xTaskRemoveFromEventList>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d013      	beq.n	800c9dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c9b4:	4b3f      	ldr	r3, [pc, #252]	; (800cab4 <xQueueGenericSend+0x200>)
 800c9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ba:	601a      	str	r2, [r3, #0]
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	e00a      	b.n	800c9dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d007      	beq.n	800c9dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c9cc:	4b39      	ldr	r3, [pc, #228]	; (800cab4 <xQueueGenericSend+0x200>)
 800c9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c9dc:	f001 fed6 	bl	800e78c <vPortExitCritical>
				return pdPASS;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e063      	b.n	800caac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d103      	bne.n	800c9f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9ea:	f001 fecf 	bl	800e78c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	e05c      	b.n	800caac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d106      	bne.n	800ca06 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9f8:	f107 0314 	add.w	r3, r7, #20
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f001 f9f5 	bl	800ddec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca02:	2301      	movs	r3, #1
 800ca04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca06:	f001 fec1 	bl	800e78c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca0a:	f000 ff5b 	bl	800d8c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca0e:	f001 fe8b 	bl	800e728 <vPortEnterCritical>
 800ca12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca18:	b25b      	sxtb	r3, r3
 800ca1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca1e:	d103      	bne.n	800ca28 <xQueueGenericSend+0x174>
 800ca20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca2e:	b25b      	sxtb	r3, r3
 800ca30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca34:	d103      	bne.n	800ca3e <xQueueGenericSend+0x18a>
 800ca36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca3e:	f001 fea5 	bl	800e78c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca42:	1d3a      	adds	r2, r7, #4
 800ca44:	f107 0314 	add.w	r3, r7, #20
 800ca48:	4611      	mov	r1, r2
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f001 f9e4 	bl	800de18 <xTaskCheckForTimeOut>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d124      	bne.n	800caa0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ca56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca58:	f000 fce1 	bl	800d41e <prvIsQueueFull>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d018      	beq.n	800ca94 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ca62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca64:	3310      	adds	r3, #16
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	4611      	mov	r1, r2
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f001 f934 	bl	800dcd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ca70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca72:	f000 fc6c 	bl	800d34e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ca76:	f000 ff33 	bl	800d8e0 <xTaskResumeAll>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f47f af7c 	bne.w	800c97a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ca82:	4b0c      	ldr	r3, [pc, #48]	; (800cab4 <xQueueGenericSend+0x200>)
 800ca84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca88:	601a      	str	r2, [r3, #0]
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	e772      	b.n	800c97a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ca94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca96:	f000 fc5a 	bl	800d34e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca9a:	f000 ff21 	bl	800d8e0 <xTaskResumeAll>
 800ca9e:	e76c      	b.n	800c97a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800caa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800caa2:	f000 fc54 	bl	800d34e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800caa6:	f000 ff1b 	bl	800d8e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800caaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800caac:	4618      	mov	r0, r3
 800caae:	3738      	adds	r7, #56	; 0x38
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	e000ed04 	.word	0xe000ed04

0800cab8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08e      	sub	sp, #56	; 0x38
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
 800cac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800caca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d10b      	bne.n	800cae8 <xQueueGenericSendFromISR+0x30>
 800cad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad4:	b672      	cpsid	i
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	b662      	cpsie	i
 800cae4:	627b      	str	r3, [r7, #36]	; 0x24
 800cae6:	e7fe      	b.n	800cae6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d103      	bne.n	800caf6 <xQueueGenericSendFromISR+0x3e>
 800caee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d101      	bne.n	800cafa <xQueueGenericSendFromISR+0x42>
 800caf6:	2301      	movs	r3, #1
 800caf8:	e000      	b.n	800cafc <xQueueGenericSendFromISR+0x44>
 800cafa:	2300      	movs	r3, #0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10b      	bne.n	800cb18 <xQueueGenericSendFromISR+0x60>
 800cb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb04:	b672      	cpsid	i
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	b662      	cpsie	i
 800cb14:	623b      	str	r3, [r7, #32]
 800cb16:	e7fe      	b.n	800cb16 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d103      	bne.n	800cb26 <xQueueGenericSendFromISR+0x6e>
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d101      	bne.n	800cb2a <xQueueGenericSendFromISR+0x72>
 800cb26:	2301      	movs	r3, #1
 800cb28:	e000      	b.n	800cb2c <xQueueGenericSendFromISR+0x74>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10b      	bne.n	800cb48 <xQueueGenericSendFromISR+0x90>
 800cb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb34:	b672      	cpsid	i
 800cb36:	f383 8811 	msr	BASEPRI, r3
 800cb3a:	f3bf 8f6f 	isb	sy
 800cb3e:	f3bf 8f4f 	dsb	sy
 800cb42:	b662      	cpsie	i
 800cb44:	61fb      	str	r3, [r7, #28]
 800cb46:	e7fe      	b.n	800cb46 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb48:	f001 fece 	bl	800e8e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cb4c:	f3ef 8211 	mrs	r2, BASEPRI
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	b672      	cpsid	i
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	b662      	cpsie	i
 800cb64:	61ba      	str	r2, [r7, #24]
 800cb66:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cb68:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d302      	bcc.n	800cb7e <xQueueGenericSendFromISR+0xc6>
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	2b02      	cmp	r3, #2
 800cb7c:	d12c      	bne.n	800cbd8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb88:	683a      	ldr	r2, [r7, #0]
 800cb8a:	68b9      	ldr	r1, [r7, #8]
 800cb8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb8e:	f000 fb4e 	bl	800d22e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb92:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb9a:	d112      	bne.n	800cbc2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d016      	beq.n	800cbd2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba6:	3324      	adds	r3, #36	; 0x24
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f001 f8bb 	bl	800dd24 <xTaskRemoveFromEventList>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00e      	beq.n	800cbd2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00b      	beq.n	800cbd2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	601a      	str	r2, [r3, #0]
 800cbc0:	e007      	b.n	800cbd2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cbc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	b25a      	sxtb	r2, r3
 800cbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cbd6:	e001      	b.n	800cbdc <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	637b      	str	r3, [r7, #52]	; 0x34
 800cbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbde:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3738      	adds	r7, #56	; 0x38
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b08e      	sub	sp, #56	; 0x38
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d10b      	bne.n	800cc1c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc08:	b672      	cpsid	i
 800cc0a:	f383 8811 	msr	BASEPRI, r3
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f3bf 8f4f 	dsb	sy
 800cc16:	b662      	cpsie	i
 800cc18:	623b      	str	r3, [r7, #32]
 800cc1a:	e7fe      	b.n	800cc1a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00b      	beq.n	800cc3c <xQueueGiveFromISR+0x4c>
 800cc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc28:	b672      	cpsid	i
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	b662      	cpsie	i
 800cc38:	61fb      	str	r3, [r7, #28]
 800cc3a:	e7fe      	b.n	800cc3a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d103      	bne.n	800cc4c <xQueueGiveFromISR+0x5c>
 800cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d101      	bne.n	800cc50 <xQueueGiveFromISR+0x60>
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e000      	b.n	800cc52 <xQueueGiveFromISR+0x62>
 800cc50:	2300      	movs	r3, #0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d10b      	bne.n	800cc6e <xQueueGiveFromISR+0x7e>
 800cc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5a:	b672      	cpsid	i
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	b662      	cpsie	i
 800cc6a:	61bb      	str	r3, [r7, #24]
 800cc6c:	e7fe      	b.n	800cc6c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc6e:	f001 fe3b 	bl	800e8e8 <vPortValidateInterruptPriority>
	__asm volatile
 800cc72:	f3ef 8211 	mrs	r2, BASEPRI
 800cc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7a:	b672      	cpsid	i
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	b662      	cpsie	i
 800cc8a:	617a      	str	r2, [r7, #20]
 800cc8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cc8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d22b      	bcs.n	800ccfa <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ccac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccae:	1c5a      	adds	r2, r3, #1
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ccb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccbc:	d112      	bne.n	800cce4 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d016      	beq.n	800ccf4 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	3324      	adds	r3, #36	; 0x24
 800ccca:	4618      	mov	r0, r3
 800cccc:	f001 f82a 	bl	800dd24 <xTaskRemoveFromEventList>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00e      	beq.n	800ccf4 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00b      	beq.n	800ccf4 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	2201      	movs	r2, #1
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	e007      	b.n	800ccf4 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cce8:	3301      	adds	r3, #1
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	b25a      	sxtb	r2, r3
 800ccee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	637b      	str	r3, [r7, #52]	; 0x34
 800ccf8:	e001      	b.n	800ccfe <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	637b      	str	r3, [r7, #52]	; 0x34
 800ccfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3738      	adds	r7, #56	; 0x38
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
	...

0800cd14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b08c      	sub	sp, #48	; 0x30
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cd20:	2300      	movs	r3, #0
 800cd22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10b      	bne.n	800cd46 <xQueueReceive+0x32>
	__asm volatile
 800cd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd32:	b672      	cpsid	i
 800cd34:	f383 8811 	msr	BASEPRI, r3
 800cd38:	f3bf 8f6f 	isb	sy
 800cd3c:	f3bf 8f4f 	dsb	sy
 800cd40:	b662      	cpsie	i
 800cd42:	623b      	str	r3, [r7, #32]
 800cd44:	e7fe      	b.n	800cd44 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d103      	bne.n	800cd54 <xQueueReceive+0x40>
 800cd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d101      	bne.n	800cd58 <xQueueReceive+0x44>
 800cd54:	2301      	movs	r3, #1
 800cd56:	e000      	b.n	800cd5a <xQueueReceive+0x46>
 800cd58:	2300      	movs	r3, #0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10b      	bne.n	800cd76 <xQueueReceive+0x62>
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	b672      	cpsid	i
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	b662      	cpsie	i
 800cd72:	61fb      	str	r3, [r7, #28]
 800cd74:	e7fe      	b.n	800cd74 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd76:	f001 f995 	bl	800e0a4 <xTaskGetSchedulerState>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d102      	bne.n	800cd86 <xQueueReceive+0x72>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d101      	bne.n	800cd8a <xQueueReceive+0x76>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e000      	b.n	800cd8c <xQueueReceive+0x78>
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d10b      	bne.n	800cda8 <xQueueReceive+0x94>
 800cd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd94:	b672      	cpsid	i
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	b662      	cpsie	i
 800cda4:	61bb      	str	r3, [r7, #24]
 800cda6:	e7fe      	b.n	800cda6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cda8:	f001 fcbe 	bl	800e728 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d01f      	beq.n	800cdf8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdb8:	68b9      	ldr	r1, [r7, #8]
 800cdba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdbc:	f000 faa1 	bl	800d302 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	1e5a      	subs	r2, r3, #1
 800cdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdca:	691b      	ldr	r3, [r3, #16]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d00f      	beq.n	800cdf0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd2:	3310      	adds	r3, #16
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f000 ffa5 	bl	800dd24 <xTaskRemoveFromEventList>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d007      	beq.n	800cdf0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cde0:	4b3c      	ldr	r3, [pc, #240]	; (800ced4 <xQueueReceive+0x1c0>)
 800cde2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cde6:	601a      	str	r2, [r3, #0]
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cdf0:	f001 fccc 	bl	800e78c <vPortExitCritical>
				return pdPASS;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	e069      	b.n	800cecc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d103      	bne.n	800ce06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdfe:	f001 fcc5 	bl	800e78c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ce02:	2300      	movs	r3, #0
 800ce04:	e062      	b.n	800cecc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d106      	bne.n	800ce1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce0c:	f107 0310 	add.w	r3, r7, #16
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 ffeb 	bl	800ddec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce16:	2301      	movs	r3, #1
 800ce18:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce1a:	f001 fcb7 	bl	800e78c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce1e:	f000 fd51 	bl	800d8c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce22:	f001 fc81 	bl	800e728 <vPortEnterCritical>
 800ce26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce2c:	b25b      	sxtb	r3, r3
 800ce2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce32:	d103      	bne.n	800ce3c <xQueueReceive+0x128>
 800ce34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce36:	2200      	movs	r2, #0
 800ce38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce42:	b25b      	sxtb	r3, r3
 800ce44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce48:	d103      	bne.n	800ce52 <xQueueReceive+0x13e>
 800ce4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce52:	f001 fc9b 	bl	800e78c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce56:	1d3a      	adds	r2, r7, #4
 800ce58:	f107 0310 	add.w	r3, r7, #16
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 ffda 	bl	800de18 <xTaskCheckForTimeOut>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d123      	bne.n	800ceb2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce6c:	f000 fac1 	bl	800d3f2 <prvIsQueueEmpty>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d017      	beq.n	800cea6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce78:	3324      	adds	r3, #36	; 0x24
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f000 ff2a 	bl	800dcd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce86:	f000 fa62 	bl	800d34e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce8a:	f000 fd29 	bl	800d8e0 <xTaskResumeAll>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d189      	bne.n	800cda8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ce94:	4b0f      	ldr	r3, [pc, #60]	; (800ced4 <xQueueReceive+0x1c0>)
 800ce96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	f3bf 8f6f 	isb	sy
 800cea4:	e780      	b.n	800cda8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cea8:	f000 fa51 	bl	800d34e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ceac:	f000 fd18 	bl	800d8e0 <xTaskResumeAll>
 800ceb0:	e77a      	b.n	800cda8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ceb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceb4:	f000 fa4b 	bl	800d34e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ceb8:	f000 fd12 	bl	800d8e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cebe:	f000 fa98 	bl	800d3f2 <prvIsQueueEmpty>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f43f af6f 	beq.w	800cda8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ceca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3730      	adds	r7, #48	; 0x30
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	e000ed04 	.word	0xe000ed04

0800ced8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b08e      	sub	sp, #56	; 0x38
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cee2:	2300      	movs	r3, #0
 800cee4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ceea:	2300      	movs	r3, #0
 800ceec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10b      	bne.n	800cf0c <xQueueSemaphoreTake+0x34>
 800cef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef8:	b672      	cpsid	i
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	b662      	cpsie	i
 800cf08:	623b      	str	r3, [r7, #32]
 800cf0a:	e7fe      	b.n	800cf0a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00b      	beq.n	800cf2c <xQueueSemaphoreTake+0x54>
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	b672      	cpsid	i
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	b662      	cpsie	i
 800cf28:	61fb      	str	r3, [r7, #28]
 800cf2a:	e7fe      	b.n	800cf2a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf2c:	f001 f8ba 	bl	800e0a4 <xTaskGetSchedulerState>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d102      	bne.n	800cf3c <xQueueSemaphoreTake+0x64>
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d101      	bne.n	800cf40 <xQueueSemaphoreTake+0x68>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e000      	b.n	800cf42 <xQueueSemaphoreTake+0x6a>
 800cf40:	2300      	movs	r3, #0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10b      	bne.n	800cf5e <xQueueSemaphoreTake+0x86>
 800cf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4a:	b672      	cpsid	i
 800cf4c:	f383 8811 	msr	BASEPRI, r3
 800cf50:	f3bf 8f6f 	isb	sy
 800cf54:	f3bf 8f4f 	dsb	sy
 800cf58:	b662      	cpsie	i
 800cf5a:	61bb      	str	r3, [r7, #24]
 800cf5c:	e7fe      	b.n	800cf5c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf5e:	f001 fbe3 	bl	800e728 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf66:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d024      	beq.n	800cfb8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf70:	1e5a      	subs	r2, r3, #1
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d104      	bne.n	800cf88 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cf7e:	f001 fa53 	bl	800e428 <pvTaskIncrementMutexHeldCount>
 800cf82:	4602      	mov	r2, r0
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf86:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00f      	beq.n	800cfb0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf92:	3310      	adds	r3, #16
 800cf94:	4618      	mov	r0, r3
 800cf96:	f000 fec5 	bl	800dd24 <xTaskRemoveFromEventList>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d007      	beq.n	800cfb0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cfa0:	4b54      	ldr	r3, [pc, #336]	; (800d0f4 <xQueueSemaphoreTake+0x21c>)
 800cfa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa6:	601a      	str	r2, [r3, #0]
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cfb0:	f001 fbec 	bl	800e78c <vPortExitCritical>
				return pdPASS;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	e098      	b.n	800d0ea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d112      	bne.n	800cfe4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00b      	beq.n	800cfdc <xQueueSemaphoreTake+0x104>
 800cfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc8:	b672      	cpsid	i
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	b662      	cpsie	i
 800cfd8:	617b      	str	r3, [r7, #20]
 800cfda:	e7fe      	b.n	800cfda <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cfdc:	f001 fbd6 	bl	800e78c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	e082      	b.n	800d0ea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d106      	bne.n	800cff8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfea:	f107 030c 	add.w	r3, r7, #12
 800cfee:	4618      	mov	r0, r3
 800cff0:	f000 fefc 	bl	800ddec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cff4:	2301      	movs	r3, #1
 800cff6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cff8:	f001 fbc8 	bl	800e78c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cffc:	f000 fc62 	bl	800d8c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d000:	f001 fb92 	bl	800e728 <vPortEnterCritical>
 800d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d00a:	b25b      	sxtb	r3, r3
 800d00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d010:	d103      	bne.n	800d01a <xQueueSemaphoreTake+0x142>
 800d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d014:	2200      	movs	r2, #0
 800d016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d020:	b25b      	sxtb	r3, r3
 800d022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d026:	d103      	bne.n	800d030 <xQueueSemaphoreTake+0x158>
 800d028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02a:	2200      	movs	r2, #0
 800d02c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d030:	f001 fbac 	bl	800e78c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d034:	463a      	mov	r2, r7
 800d036:	f107 030c 	add.w	r3, r7, #12
 800d03a:	4611      	mov	r1, r2
 800d03c:	4618      	mov	r0, r3
 800d03e:	f000 feeb 	bl	800de18 <xTaskCheckForTimeOut>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d132      	bne.n	800d0ae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d04a:	f000 f9d2 	bl	800d3f2 <prvIsQueueEmpty>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d026      	beq.n	800d0a2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d109      	bne.n	800d070 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d05c:	f001 fb64 	bl	800e728 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	4618      	mov	r0, r3
 800d066:	f001 f83b 	bl	800e0e0 <xTaskPriorityInherit>
 800d06a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d06c:	f001 fb8e 	bl	800e78c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d072:	3324      	adds	r3, #36	; 0x24
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	4611      	mov	r1, r2
 800d078:	4618      	mov	r0, r3
 800d07a:	f000 fe2d 	bl	800dcd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d07e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d080:	f000 f965 	bl	800d34e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d084:	f000 fc2c 	bl	800d8e0 <xTaskResumeAll>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f47f af67 	bne.w	800cf5e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d090:	4b18      	ldr	r3, [pc, #96]	; (800d0f4 <xQueueSemaphoreTake+0x21c>)
 800d092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d096:	601a      	str	r2, [r3, #0]
 800d098:	f3bf 8f4f 	dsb	sy
 800d09c:	f3bf 8f6f 	isb	sy
 800d0a0:	e75d      	b.n	800cf5e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d0a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0a4:	f000 f953 	bl	800d34e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0a8:	f000 fc1a 	bl	800d8e0 <xTaskResumeAll>
 800d0ac:	e757      	b.n	800cf5e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d0ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0b0:	f000 f94d 	bl	800d34e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0b4:	f000 fc14 	bl	800d8e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0ba:	f000 f99a 	bl	800d3f2 <prvIsQueueEmpty>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f43f af4c 	beq.w	800cf5e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00d      	beq.n	800d0e8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d0cc:	f001 fb2c 	bl	800e728 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d0d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0d2:	f000 f894 	bl	800d1fe <prvGetDisinheritPriorityAfterTimeout>
 800d0d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f001 f906 	bl	800e2f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d0e4:	f001 fb52 	bl	800e78c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d0e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3738      	adds	r7, #56	; 0x38
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	e000ed04 	.word	0xe000ed04

0800d0f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b08e      	sub	sp, #56	; 0x38
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10b      	bne.n	800d126 <xQueueReceiveFromISR+0x2e>
 800d10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d112:	b672      	cpsid	i
 800d114:	f383 8811 	msr	BASEPRI, r3
 800d118:	f3bf 8f6f 	isb	sy
 800d11c:	f3bf 8f4f 	dsb	sy
 800d120:	b662      	cpsie	i
 800d122:	623b      	str	r3, [r7, #32]
 800d124:	e7fe      	b.n	800d124 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d103      	bne.n	800d134 <xQueueReceiveFromISR+0x3c>
 800d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d130:	2b00      	cmp	r3, #0
 800d132:	d101      	bne.n	800d138 <xQueueReceiveFromISR+0x40>
 800d134:	2301      	movs	r3, #1
 800d136:	e000      	b.n	800d13a <xQueueReceiveFromISR+0x42>
 800d138:	2300      	movs	r3, #0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10b      	bne.n	800d156 <xQueueReceiveFromISR+0x5e>
 800d13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d142:	b672      	cpsid	i
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	b662      	cpsie	i
 800d152:	61fb      	str	r3, [r7, #28]
 800d154:	e7fe      	b.n	800d154 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d156:	f001 fbc7 	bl	800e8e8 <vPortValidateInterruptPriority>
	__asm volatile
 800d15a:	f3ef 8211 	mrs	r2, BASEPRI
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	b672      	cpsid	i
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	b662      	cpsie	i
 800d172:	61ba      	str	r2, [r7, #24]
 800d174:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d176:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d178:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d17e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d182:	2b00      	cmp	r3, #0
 800d184:	d02f      	beq.n	800d1e6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d190:	68b9      	ldr	r1, [r7, #8]
 800d192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d194:	f000 f8b5 	bl	800d302 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19a:	1e5a      	subs	r2, r3, #1
 800d19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d1a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a8:	d112      	bne.n	800d1d0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ac:	691b      	ldr	r3, [r3, #16]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d016      	beq.n	800d1e0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b4:	3310      	adds	r3, #16
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 fdb4 	bl	800dd24 <xTaskRemoveFromEventList>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00e      	beq.n	800d1e0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00b      	beq.n	800d1e0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	e007      	b.n	800d1e0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	b25a      	sxtb	r2, r3
 800d1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	637b      	str	r3, [r7, #52]	; 0x34
 800d1e4:	e001      	b.n	800d1ea <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3738      	adds	r7, #56	; 0x38
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d1fe:	b480      	push	{r7}
 800d200:	b085      	sub	sp, #20
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d006      	beq.n	800d21c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f1c3 0307 	rsb	r3, r3, #7
 800d218:	60fb      	str	r3, [r7, #12]
 800d21a:	e001      	b.n	800d220 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d21c:	2300      	movs	r3, #0
 800d21e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d220:	68fb      	ldr	r3, [r7, #12]
	}
 800d222:	4618      	mov	r0, r3
 800d224:	3714      	adds	r7, #20
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr

0800d22e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d22e:	b580      	push	{r7, lr}
 800d230:	b086      	sub	sp, #24
 800d232:	af00      	add	r7, sp, #0
 800d234:	60f8      	str	r0, [r7, #12]
 800d236:	60b9      	str	r1, [r7, #8]
 800d238:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d23a:	2300      	movs	r3, #0
 800d23c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d242:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d10d      	bne.n	800d268 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d14d      	bne.n	800d2f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	4618      	mov	r0, r3
 800d25a:	f000 ffc1 	bl	800e1e0 <xTaskPriorityDisinherit>
 800d25e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	609a      	str	r2, [r3, #8]
 800d266:	e043      	b.n	800d2f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d119      	bne.n	800d2a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6858      	ldr	r0, [r3, #4]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d276:	461a      	mov	r2, r3
 800d278:	68b9      	ldr	r1, [r7, #8]
 800d27a:	f017 fdb7 	bl	8024dec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	685a      	ldr	r2, [r3, #4]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d286:	441a      	add	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	685a      	ldr	r2, [r3, #4]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	429a      	cmp	r2, r3
 800d296:	d32b      	bcc.n	800d2f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	605a      	str	r2, [r3, #4]
 800d2a0:	e026      	b.n	800d2f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	68d8      	ldr	r0, [r3, #12]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	68b9      	ldr	r1, [r7, #8]
 800d2ae:	f017 fd9d 	bl	8024dec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	68da      	ldr	r2, [r3, #12]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ba:	425b      	negs	r3, r3
 800d2bc:	441a      	add	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	68da      	ldr	r2, [r3, #12]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d207      	bcs.n	800d2de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	689a      	ldr	r2, [r3, #8]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d6:	425b      	negs	r3, r3
 800d2d8:	441a      	add	r2, r3
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	d105      	bne.n	800d2f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d002      	beq.n	800d2f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	1c5a      	adds	r2, r3, #1
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d2f8:	697b      	ldr	r3, [r7, #20]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3718      	adds	r7, #24
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b082      	sub	sp, #8
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d310:	2b00      	cmp	r3, #0
 800d312:	d018      	beq.n	800d346 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	68da      	ldr	r2, [r3, #12]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31c:	441a      	add	r2, r3
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	68da      	ldr	r2, [r3, #12]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d303      	bcc.n	800d336 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	68d9      	ldr	r1, [r3, #12]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33e:	461a      	mov	r2, r3
 800d340:	6838      	ldr	r0, [r7, #0]
 800d342:	f017 fd53 	bl	8024dec <memcpy>
	}
}
 800d346:	bf00      	nop
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b084      	sub	sp, #16
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d356:	f001 f9e7 	bl	800e728 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d360:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d362:	e011      	b.n	800d388 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d012      	beq.n	800d392 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	3324      	adds	r3, #36	; 0x24
 800d370:	4618      	mov	r0, r3
 800d372:	f000 fcd7 	bl	800dd24 <xTaskRemoveFromEventList>
 800d376:	4603      	mov	r3, r0
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d001      	beq.n	800d380 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d37c:	f000 fdb0 	bl	800dee0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d380:	7bfb      	ldrb	r3, [r7, #15]
 800d382:	3b01      	subs	r3, #1
 800d384:	b2db      	uxtb	r3, r3
 800d386:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	dce9      	bgt.n	800d364 <prvUnlockQueue+0x16>
 800d390:	e000      	b.n	800d394 <prvUnlockQueue+0x46>
					break;
 800d392:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	22ff      	movs	r2, #255	; 0xff
 800d398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d39c:	f001 f9f6 	bl	800e78c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d3a0:	f001 f9c2 	bl	800e728 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3ac:	e011      	b.n	800d3d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	691b      	ldr	r3, [r3, #16]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d012      	beq.n	800d3dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	3310      	adds	r3, #16
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f000 fcb2 	bl	800dd24 <xTaskRemoveFromEventList>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d001      	beq.n	800d3ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d3c6:	f000 fd8b 	bl	800dee0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d3ca:	7bbb      	ldrb	r3, [r7, #14]
 800d3cc:	3b01      	subs	r3, #1
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	dce9      	bgt.n	800d3ae <prvUnlockQueue+0x60>
 800d3da:	e000      	b.n	800d3de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d3dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	22ff      	movs	r2, #255	; 0xff
 800d3e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d3e6:	f001 f9d1 	bl	800e78c <vPortExitCritical>
}
 800d3ea:	bf00      	nop
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b084      	sub	sp, #16
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3fa:	f001 f995 	bl	800e728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d402:	2b00      	cmp	r3, #0
 800d404:	d102      	bne.n	800d40c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d406:	2301      	movs	r3, #1
 800d408:	60fb      	str	r3, [r7, #12]
 800d40a:	e001      	b.n	800d410 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d40c:	2300      	movs	r3, #0
 800d40e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d410:	f001 f9bc 	bl	800e78c <vPortExitCritical>

	return xReturn;
 800d414:	68fb      	ldr	r3, [r7, #12]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d41e:	b580      	push	{r7, lr}
 800d420:	b084      	sub	sp, #16
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d426:	f001 f97f 	bl	800e728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d432:	429a      	cmp	r2, r3
 800d434:	d102      	bne.n	800d43c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d436:	2301      	movs	r3, #1
 800d438:	60fb      	str	r3, [r7, #12]
 800d43a:	e001      	b.n	800d440 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d43c:	2300      	movs	r3, #0
 800d43e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d440:	f001 f9a4 	bl	800e78c <vPortExitCritical>

	return xReturn;
 800d444:	68fb      	ldr	r3, [r7, #12]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b08e      	sub	sp, #56	; 0x38
 800d452:	af04      	add	r7, sp, #16
 800d454:	60f8      	str	r0, [r7, #12]
 800d456:	60b9      	str	r1, [r7, #8]
 800d458:	607a      	str	r2, [r7, #4]
 800d45a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10b      	bne.n	800d47a <xTaskCreateStatic+0x2c>
	__asm volatile
 800d462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d466:	b672      	cpsid	i
 800d468:	f383 8811 	msr	BASEPRI, r3
 800d46c:	f3bf 8f6f 	isb	sy
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	b662      	cpsie	i
 800d476:	623b      	str	r3, [r7, #32]
 800d478:	e7fe      	b.n	800d478 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d10b      	bne.n	800d498 <xTaskCreateStatic+0x4a>
 800d480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d484:	b672      	cpsid	i
 800d486:	f383 8811 	msr	BASEPRI, r3
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	b662      	cpsie	i
 800d494:	61fb      	str	r3, [r7, #28]
 800d496:	e7fe      	b.n	800d496 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d498:	2358      	movs	r3, #88	; 0x58
 800d49a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	2b58      	cmp	r3, #88	; 0x58
 800d4a0:	d00b      	beq.n	800d4ba <xTaskCreateStatic+0x6c>
 800d4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a6:	b672      	cpsid	i
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	b662      	cpsie	i
 800d4b6:	61bb      	str	r3, [r7, #24]
 800d4b8:	e7fe      	b.n	800d4b8 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d4ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d01e      	beq.n	800d500 <xTaskCreateStatic+0xb2>
 800d4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d01b      	beq.n	800d500 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d4:	2202      	movs	r2, #2
 800d4d6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d4da:	2300      	movs	r3, #0
 800d4dc:	9303      	str	r3, [sp, #12]
 800d4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e0:	9302      	str	r3, [sp, #8]
 800d4e2:	f107 0314 	add.w	r3, r7, #20
 800d4e6:	9301      	str	r3, [sp, #4]
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ea:	9300      	str	r3, [sp, #0]
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	68b9      	ldr	r1, [r7, #8]
 800d4f2:	68f8      	ldr	r0, [r7, #12]
 800d4f4:	f000 f850 	bl	800d598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4fa:	f000 f8e1 	bl	800d6c0 <prvAddNewTaskToReadyList>
 800d4fe:	e001      	b.n	800d504 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d500:	2300      	movs	r3, #0
 800d502:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d504:	697b      	ldr	r3, [r7, #20]
	}
 800d506:	4618      	mov	r0, r3
 800d508:	3728      	adds	r7, #40	; 0x28
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b08c      	sub	sp, #48	; 0x30
 800d512:	af04      	add	r7, sp, #16
 800d514:	60f8      	str	r0, [r7, #12]
 800d516:	60b9      	str	r1, [r7, #8]
 800d518:	603b      	str	r3, [r7, #0]
 800d51a:	4613      	mov	r3, r2
 800d51c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d51e:	88fb      	ldrh	r3, [r7, #6]
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	4618      	mov	r0, r3
 800d524:	f001 fa22 	bl	800e96c <pvPortMalloc>
 800d528:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00e      	beq.n	800d54e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d530:	2058      	movs	r0, #88	; 0x58
 800d532:	f001 fa1b 	bl	800e96c <pvPortMalloc>
 800d536:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d003      	beq.n	800d546 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	697a      	ldr	r2, [r7, #20]
 800d542:	631a      	str	r2, [r3, #48]	; 0x30
 800d544:	e005      	b.n	800d552 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d546:	6978      	ldr	r0, [r7, #20]
 800d548:	f001 fadc 	bl	800eb04 <vPortFree>
 800d54c:	e001      	b.n	800d552 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d54e:	2300      	movs	r3, #0
 800d550:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d017      	beq.n	800d588 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d560:	88fa      	ldrh	r2, [r7, #6]
 800d562:	2300      	movs	r3, #0
 800d564:	9303      	str	r3, [sp, #12]
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	9302      	str	r3, [sp, #8]
 800d56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56c:	9301      	str	r3, [sp, #4]
 800d56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d570:	9300      	str	r3, [sp, #0]
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	68b9      	ldr	r1, [r7, #8]
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f000 f80e 	bl	800d598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d57c:	69f8      	ldr	r0, [r7, #28]
 800d57e:	f000 f89f 	bl	800d6c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d582:	2301      	movs	r3, #1
 800d584:	61bb      	str	r3, [r7, #24]
 800d586:	e002      	b.n	800d58e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d588:	f04f 33ff 	mov.w	r3, #4294967295
 800d58c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d58e:	69bb      	ldr	r3, [r7, #24]
	}
 800d590:	4618      	mov	r0, r3
 800d592:	3720      	adds	r7, #32
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b088      	sub	sp, #32
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
 800d5a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	21a5      	movs	r1, #165	; 0xa5
 800d5b2:	f017 fc26 	bl	8024e02 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5ba:	6879      	ldr	r1, [r7, #4]
 800d5bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d5c0:	440b      	add	r3, r1
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	f023 0307 	bic.w	r3, r3, #7
 800d5ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	f003 0307 	and.w	r3, r3, #7
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00b      	beq.n	800d5f2 <prvInitialiseNewTask+0x5a>
 800d5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5de:	b672      	cpsid	i
 800d5e0:	f383 8811 	msr	BASEPRI, r3
 800d5e4:	f3bf 8f6f 	isb	sy
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	b662      	cpsie	i
 800d5ee:	617b      	str	r3, [r7, #20]
 800d5f0:	e7fe      	b.n	800d5f0 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d01f      	beq.n	800d638 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	61fb      	str	r3, [r7, #28]
 800d5fc:	e012      	b.n	800d624 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	4413      	add	r3, r2
 800d604:	7819      	ldrb	r1, [r3, #0]
 800d606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	4413      	add	r3, r2
 800d60c:	3334      	adds	r3, #52	; 0x34
 800d60e:	460a      	mov	r2, r1
 800d610:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	4413      	add	r3, r2
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d006      	beq.n	800d62c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	3301      	adds	r3, #1
 800d622:	61fb      	str	r3, [r7, #28]
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	2b0f      	cmp	r3, #15
 800d628:	d9e9      	bls.n	800d5fe <prvInitialiseNewTask+0x66>
 800d62a:	e000      	b.n	800d62e <prvInitialiseNewTask+0x96>
			{
				break;
 800d62c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d630:	2200      	movs	r2, #0
 800d632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d636:	e003      	b.n	800d640 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63a:	2200      	movs	r2, #0
 800d63c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d642:	2b06      	cmp	r3, #6
 800d644:	d901      	bls.n	800d64a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d646:	2306      	movs	r3, #6
 800d648:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d64e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d654:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d658:	2200      	movs	r2, #0
 800d65a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65e:	3304      	adds	r3, #4
 800d660:	4618      	mov	r0, r3
 800d662:	f7fe ff4b 	bl	800c4fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d668:	3318      	adds	r3, #24
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fe ff46 	bl	800c4fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d674:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d678:	f1c3 0207 	rsb	r2, r3, #7
 800d67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d684:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d688:	2200      	movs	r2, #0
 800d68a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68e:	2200      	movs	r2, #0
 800d690:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d694:	2200      	movs	r2, #0
 800d696:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d69a:	683a      	ldr	r2, [r7, #0]
 800d69c:	68f9      	ldr	r1, [r7, #12]
 800d69e:	69b8      	ldr	r0, [r7, #24]
 800d6a0:	f000 ff3c 	bl	800e51c <pxPortInitialiseStack>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d002      	beq.n	800d6b6 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6b6:	bf00      	nop
 800d6b8:	3720      	adds	r7, #32
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
	...

0800d6c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d6c8:	f001 f82e 	bl	800e728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d6cc:	4b2a      	ldr	r3, [pc, #168]	; (800d778 <prvAddNewTaskToReadyList+0xb8>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	4a29      	ldr	r2, [pc, #164]	; (800d778 <prvAddNewTaskToReadyList+0xb8>)
 800d6d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d6d6:	4b29      	ldr	r3, [pc, #164]	; (800d77c <prvAddNewTaskToReadyList+0xbc>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d109      	bne.n	800d6f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d6de:	4a27      	ldr	r2, [pc, #156]	; (800d77c <prvAddNewTaskToReadyList+0xbc>)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d6e4:	4b24      	ldr	r3, [pc, #144]	; (800d778 <prvAddNewTaskToReadyList+0xb8>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d110      	bne.n	800d70e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d6ec:	f000 fc1e 	bl	800df2c <prvInitialiseTaskLists>
 800d6f0:	e00d      	b.n	800d70e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d6f2:	4b23      	ldr	r3, [pc, #140]	; (800d780 <prvAddNewTaskToReadyList+0xc0>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d109      	bne.n	800d70e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d6fa:	4b20      	ldr	r3, [pc, #128]	; (800d77c <prvAddNewTaskToReadyList+0xbc>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d704:	429a      	cmp	r2, r3
 800d706:	d802      	bhi.n	800d70e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d708:	4a1c      	ldr	r2, [pc, #112]	; (800d77c <prvAddNewTaskToReadyList+0xbc>)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d70e:	4b1d      	ldr	r3, [pc, #116]	; (800d784 <prvAddNewTaskToReadyList+0xc4>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	3301      	adds	r3, #1
 800d714:	4a1b      	ldr	r2, [pc, #108]	; (800d784 <prvAddNewTaskToReadyList+0xc4>)
 800d716:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d71c:	2201      	movs	r2, #1
 800d71e:	409a      	lsls	r2, r3
 800d720:	4b19      	ldr	r3, [pc, #100]	; (800d788 <prvAddNewTaskToReadyList+0xc8>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4313      	orrs	r3, r2
 800d726:	4a18      	ldr	r2, [pc, #96]	; (800d788 <prvAddNewTaskToReadyList+0xc8>)
 800d728:	6013      	str	r3, [r2, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d72e:	4613      	mov	r3, r2
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	4413      	add	r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	4a15      	ldr	r2, [pc, #84]	; (800d78c <prvAddNewTaskToReadyList+0xcc>)
 800d738:	441a      	add	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	3304      	adds	r3, #4
 800d73e:	4619      	mov	r1, r3
 800d740:	4610      	mov	r0, r2
 800d742:	f7fe fee8 	bl	800c516 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d746:	f001 f821 	bl	800e78c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d74a:	4b0d      	ldr	r3, [pc, #52]	; (800d780 <prvAddNewTaskToReadyList+0xc0>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00e      	beq.n	800d770 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d752:	4b0a      	ldr	r3, [pc, #40]	; (800d77c <prvAddNewTaskToReadyList+0xbc>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d207      	bcs.n	800d770 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d760:	4b0b      	ldr	r3, [pc, #44]	; (800d790 <prvAddNewTaskToReadyList+0xd0>)
 800d762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d766:	601a      	str	r2, [r3, #0]
 800d768:	f3bf 8f4f 	dsb	sy
 800d76c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d770:	bf00      	nop
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	200004bc 	.word	0x200004bc
 800d77c:	200003bc 	.word	0x200003bc
 800d780:	200004c8 	.word	0x200004c8
 800d784:	200004d8 	.word	0x200004d8
 800d788:	200004c4 	.word	0x200004c4
 800d78c:	200003c0 	.word	0x200003c0
 800d790:	e000ed04 	.word	0xe000ed04

0800d794 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d79c:	2300      	movs	r3, #0
 800d79e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d018      	beq.n	800d7d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d7a6:	4b14      	ldr	r3, [pc, #80]	; (800d7f8 <vTaskDelay+0x64>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00b      	beq.n	800d7c6 <vTaskDelay+0x32>
 800d7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b2:	b672      	cpsid	i
 800d7b4:	f383 8811 	msr	BASEPRI, r3
 800d7b8:	f3bf 8f6f 	isb	sy
 800d7bc:	f3bf 8f4f 	dsb	sy
 800d7c0:	b662      	cpsie	i
 800d7c2:	60bb      	str	r3, [r7, #8]
 800d7c4:	e7fe      	b.n	800d7c4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d7c6:	f000 f87d 	bl	800d8c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f000 fe3f 	bl	800e450 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d7d2:	f000 f885 	bl	800d8e0 <xTaskResumeAll>
 800d7d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d107      	bne.n	800d7ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d7de:	4b07      	ldr	r3, [pc, #28]	; (800d7fc <vTaskDelay+0x68>)
 800d7e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7e4:	601a      	str	r2, [r3, #0]
 800d7e6:	f3bf 8f4f 	dsb	sy
 800d7ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7ee:	bf00      	nop
 800d7f0:	3710      	adds	r7, #16
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	200004e4 	.word	0x200004e4
 800d7fc:	e000ed04 	.word	0xe000ed04

0800d800 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b08a      	sub	sp, #40	; 0x28
 800d804:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d806:	2300      	movs	r3, #0
 800d808:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d80a:	2300      	movs	r3, #0
 800d80c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d80e:	463a      	mov	r2, r7
 800d810:	1d39      	adds	r1, r7, #4
 800d812:	f107 0308 	add.w	r3, r7, #8
 800d816:	4618      	mov	r0, r3
 800d818:	f7f3 f978 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d81c:	6839      	ldr	r1, [r7, #0]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	68ba      	ldr	r2, [r7, #8]
 800d822:	9202      	str	r2, [sp, #8]
 800d824:	9301      	str	r3, [sp, #4]
 800d826:	2300      	movs	r3, #0
 800d828:	9300      	str	r3, [sp, #0]
 800d82a:	2300      	movs	r3, #0
 800d82c:	460a      	mov	r2, r1
 800d82e:	491f      	ldr	r1, [pc, #124]	; (800d8ac <vTaskStartScheduler+0xac>)
 800d830:	481f      	ldr	r0, [pc, #124]	; (800d8b0 <vTaskStartScheduler+0xb0>)
 800d832:	f7ff fe0c 	bl	800d44e <xTaskCreateStatic>
 800d836:	4602      	mov	r2, r0
 800d838:	4b1e      	ldr	r3, [pc, #120]	; (800d8b4 <vTaskStartScheduler+0xb4>)
 800d83a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d83c:	4b1d      	ldr	r3, [pc, #116]	; (800d8b4 <vTaskStartScheduler+0xb4>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d002      	beq.n	800d84a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d844:	2301      	movs	r3, #1
 800d846:	617b      	str	r3, [r7, #20]
 800d848:	e001      	b.n	800d84e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d84a:	2300      	movs	r3, #0
 800d84c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	2b01      	cmp	r3, #1
 800d852:	d117      	bne.n	800d884 <vTaskStartScheduler+0x84>
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	b672      	cpsid	i
 800d85a:	f383 8811 	msr	BASEPRI, r3
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	f3bf 8f4f 	dsb	sy
 800d866:	b662      	cpsie	i
 800d868:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d86a:	4b13      	ldr	r3, [pc, #76]	; (800d8b8 <vTaskStartScheduler+0xb8>)
 800d86c:	f04f 32ff 	mov.w	r2, #4294967295
 800d870:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d872:	4b12      	ldr	r3, [pc, #72]	; (800d8bc <vTaskStartScheduler+0xbc>)
 800d874:	2201      	movs	r2, #1
 800d876:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d878:	4b11      	ldr	r3, [pc, #68]	; (800d8c0 <vTaskStartScheduler+0xc0>)
 800d87a:	2200      	movs	r2, #0
 800d87c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d87e:	f000 fed7 	bl	800e630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d882:	e00f      	b.n	800d8a4 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d88a:	d10b      	bne.n	800d8a4 <vTaskStartScheduler+0xa4>
 800d88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d890:	b672      	cpsid	i
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	b662      	cpsie	i
 800d8a0:	60fb      	str	r3, [r7, #12]
 800d8a2:	e7fe      	b.n	800d8a2 <vTaskStartScheduler+0xa2>
}
 800d8a4:	bf00      	nop
 800d8a6:	3718      	adds	r7, #24
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	08025da0 	.word	0x08025da0
 800d8b0:	0800def9 	.word	0x0800def9
 800d8b4:	200004e0 	.word	0x200004e0
 800d8b8:	200004dc 	.word	0x200004dc
 800d8bc:	200004c8 	.word	0x200004c8
 800d8c0:	200004c0 	.word	0x200004c0

0800d8c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d8c8:	4b04      	ldr	r3, [pc, #16]	; (800d8dc <vTaskSuspendAll+0x18>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	4a03      	ldr	r2, [pc, #12]	; (800d8dc <vTaskSuspendAll+0x18>)
 800d8d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d8d2:	bf00      	nop
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr
 800d8dc:	200004e4 	.word	0x200004e4

0800d8e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d8ee:	4b42      	ldr	r3, [pc, #264]	; (800d9f8 <xTaskResumeAll+0x118>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10b      	bne.n	800d90e <xTaskResumeAll+0x2e>
 800d8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fa:	b672      	cpsid	i
 800d8fc:	f383 8811 	msr	BASEPRI, r3
 800d900:	f3bf 8f6f 	isb	sy
 800d904:	f3bf 8f4f 	dsb	sy
 800d908:	b662      	cpsie	i
 800d90a:	603b      	str	r3, [r7, #0]
 800d90c:	e7fe      	b.n	800d90c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d90e:	f000 ff0b 	bl	800e728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d912:	4b39      	ldr	r3, [pc, #228]	; (800d9f8 <xTaskResumeAll+0x118>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	3b01      	subs	r3, #1
 800d918:	4a37      	ldr	r2, [pc, #220]	; (800d9f8 <xTaskResumeAll+0x118>)
 800d91a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d91c:	4b36      	ldr	r3, [pc, #216]	; (800d9f8 <xTaskResumeAll+0x118>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d161      	bne.n	800d9e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d924:	4b35      	ldr	r3, [pc, #212]	; (800d9fc <xTaskResumeAll+0x11c>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d05d      	beq.n	800d9e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d92c:	e02e      	b.n	800d98c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d92e:	4b34      	ldr	r3, [pc, #208]	; (800da00 <xTaskResumeAll+0x120>)
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	3318      	adds	r3, #24
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fe fe48 	bl	800c5d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	3304      	adds	r3, #4
 800d944:	4618      	mov	r0, r3
 800d946:	f7fe fe43 	bl	800c5d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d94e:	2201      	movs	r2, #1
 800d950:	409a      	lsls	r2, r3
 800d952:	4b2c      	ldr	r3, [pc, #176]	; (800da04 <xTaskResumeAll+0x124>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4313      	orrs	r3, r2
 800d958:	4a2a      	ldr	r2, [pc, #168]	; (800da04 <xTaskResumeAll+0x124>)
 800d95a:	6013      	str	r3, [r2, #0]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d960:	4613      	mov	r3, r2
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	4413      	add	r3, r2
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4a27      	ldr	r2, [pc, #156]	; (800da08 <xTaskResumeAll+0x128>)
 800d96a:	441a      	add	r2, r3
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	3304      	adds	r3, #4
 800d970:	4619      	mov	r1, r3
 800d972:	4610      	mov	r0, r2
 800d974:	f7fe fdcf 	bl	800c516 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d97c:	4b23      	ldr	r3, [pc, #140]	; (800da0c <xTaskResumeAll+0x12c>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d982:	429a      	cmp	r2, r3
 800d984:	d302      	bcc.n	800d98c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d986:	4b22      	ldr	r3, [pc, #136]	; (800da10 <xTaskResumeAll+0x130>)
 800d988:	2201      	movs	r2, #1
 800d98a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d98c:	4b1c      	ldr	r3, [pc, #112]	; (800da00 <xTaskResumeAll+0x120>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d1cc      	bne.n	800d92e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d001      	beq.n	800d99e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d99a:	f000 fb63 	bl	800e064 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d99e:	4b1d      	ldr	r3, [pc, #116]	; (800da14 <xTaskResumeAll+0x134>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d010      	beq.n	800d9cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d9aa:	f000 f859 	bl	800da60 <xTaskIncrementTick>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d002      	beq.n	800d9ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d9b4:	4b16      	ldr	r3, [pc, #88]	; (800da10 <xTaskResumeAll+0x130>)
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d1f1      	bne.n	800d9aa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d9c6:	4b13      	ldr	r3, [pc, #76]	; (800da14 <xTaskResumeAll+0x134>)
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d9cc:	4b10      	ldr	r3, [pc, #64]	; (800da10 <xTaskResumeAll+0x130>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d009      	beq.n	800d9e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d9d8:	4b0f      	ldr	r3, [pc, #60]	; (800da18 <xTaskResumeAll+0x138>)
 800d9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9de:	601a      	str	r2, [r3, #0]
 800d9e0:	f3bf 8f4f 	dsb	sy
 800d9e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d9e8:	f000 fed0 	bl	800e78c <vPortExitCritical>

	return xAlreadyYielded;
 800d9ec:	68bb      	ldr	r3, [r7, #8]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	200004e4 	.word	0x200004e4
 800d9fc:	200004bc 	.word	0x200004bc
 800da00:	2000047c 	.word	0x2000047c
 800da04:	200004c4 	.word	0x200004c4
 800da08:	200003c0 	.word	0x200003c0
 800da0c:	200003bc 	.word	0x200003bc
 800da10:	200004d0 	.word	0x200004d0
 800da14:	200004cc 	.word	0x200004cc
 800da18:	e000ed04 	.word	0xe000ed04

0800da1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800da22:	4b05      	ldr	r3, [pc, #20]	; (800da38 <xTaskGetTickCount+0x1c>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800da28:	687b      	ldr	r3, [r7, #4]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	200004c0 	.word	0x200004c0

0800da3c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da42:	f000 ff51 	bl	800e8e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800da46:	2300      	movs	r3, #0
 800da48:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800da4a:	4b04      	ldr	r3, [pc, #16]	; (800da5c <xTaskGetTickCountFromISR+0x20>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da50:	683b      	ldr	r3, [r7, #0]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	200004c0 	.word	0x200004c0

0800da60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800da66:	2300      	movs	r3, #0
 800da68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da6a:	4b4f      	ldr	r3, [pc, #316]	; (800dba8 <xTaskIncrementTick+0x148>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f040 8089 	bne.w	800db86 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da74:	4b4d      	ldr	r3, [pc, #308]	; (800dbac <xTaskIncrementTick+0x14c>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3301      	adds	r3, #1
 800da7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da7c:	4a4b      	ldr	r2, [pc, #300]	; (800dbac <xTaskIncrementTick+0x14c>)
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d121      	bne.n	800dacc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800da88:	4b49      	ldr	r3, [pc, #292]	; (800dbb0 <xTaskIncrementTick+0x150>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00b      	beq.n	800daaa <xTaskIncrementTick+0x4a>
 800da92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da96:	b672      	cpsid	i
 800da98:	f383 8811 	msr	BASEPRI, r3
 800da9c:	f3bf 8f6f 	isb	sy
 800daa0:	f3bf 8f4f 	dsb	sy
 800daa4:	b662      	cpsie	i
 800daa6:	603b      	str	r3, [r7, #0]
 800daa8:	e7fe      	b.n	800daa8 <xTaskIncrementTick+0x48>
 800daaa:	4b41      	ldr	r3, [pc, #260]	; (800dbb0 <xTaskIncrementTick+0x150>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	4b40      	ldr	r3, [pc, #256]	; (800dbb4 <xTaskIncrementTick+0x154>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a3e      	ldr	r2, [pc, #248]	; (800dbb0 <xTaskIncrementTick+0x150>)
 800dab6:	6013      	str	r3, [r2, #0]
 800dab8:	4a3e      	ldr	r2, [pc, #248]	; (800dbb4 <xTaskIncrementTick+0x154>)
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6013      	str	r3, [r2, #0]
 800dabe:	4b3e      	ldr	r3, [pc, #248]	; (800dbb8 <xTaskIncrementTick+0x158>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	3301      	adds	r3, #1
 800dac4:	4a3c      	ldr	r2, [pc, #240]	; (800dbb8 <xTaskIncrementTick+0x158>)
 800dac6:	6013      	str	r3, [r2, #0]
 800dac8:	f000 facc 	bl	800e064 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dacc:	4b3b      	ldr	r3, [pc, #236]	; (800dbbc <xTaskIncrementTick+0x15c>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	693a      	ldr	r2, [r7, #16]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d348      	bcc.n	800db68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dad6:	4b36      	ldr	r3, [pc, #216]	; (800dbb0 <xTaskIncrementTick+0x150>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d104      	bne.n	800daea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dae0:	4b36      	ldr	r3, [pc, #216]	; (800dbbc <xTaskIncrementTick+0x15c>)
 800dae2:	f04f 32ff 	mov.w	r2, #4294967295
 800dae6:	601a      	str	r2, [r3, #0]
					break;
 800dae8:	e03e      	b.n	800db68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daea:	4b31      	ldr	r3, [pc, #196]	; (800dbb0 <xTaskIncrementTick+0x150>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dafa:	693a      	ldr	r2, [r7, #16]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d203      	bcs.n	800db0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800db02:	4a2e      	ldr	r2, [pc, #184]	; (800dbbc <xTaskIncrementTick+0x15c>)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800db08:	e02e      	b.n	800db68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	3304      	adds	r3, #4
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fe fd5e 	bl	800c5d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d004      	beq.n	800db26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	3318      	adds	r3, #24
 800db20:	4618      	mov	r0, r3
 800db22:	f7fe fd55 	bl	800c5d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2a:	2201      	movs	r2, #1
 800db2c:	409a      	lsls	r2, r3
 800db2e:	4b24      	ldr	r3, [pc, #144]	; (800dbc0 <xTaskIncrementTick+0x160>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4313      	orrs	r3, r2
 800db34:	4a22      	ldr	r2, [pc, #136]	; (800dbc0 <xTaskIncrementTick+0x160>)
 800db36:	6013      	str	r3, [r2, #0]
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db3c:	4613      	mov	r3, r2
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	4413      	add	r3, r2
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	4a1f      	ldr	r2, [pc, #124]	; (800dbc4 <xTaskIncrementTick+0x164>)
 800db46:	441a      	add	r2, r3
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	3304      	adds	r3, #4
 800db4c:	4619      	mov	r1, r3
 800db4e:	4610      	mov	r0, r2
 800db50:	f7fe fce1 	bl	800c516 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db58:	4b1b      	ldr	r3, [pc, #108]	; (800dbc8 <xTaskIncrementTick+0x168>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5e:	429a      	cmp	r2, r3
 800db60:	d3b9      	bcc.n	800dad6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800db62:	2301      	movs	r3, #1
 800db64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db66:	e7b6      	b.n	800dad6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db68:	4b17      	ldr	r3, [pc, #92]	; (800dbc8 <xTaskIncrementTick+0x168>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db6e:	4915      	ldr	r1, [pc, #84]	; (800dbc4 <xTaskIncrementTick+0x164>)
 800db70:	4613      	mov	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4413      	add	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	440b      	add	r3, r1
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d907      	bls.n	800db90 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800db80:	2301      	movs	r3, #1
 800db82:	617b      	str	r3, [r7, #20]
 800db84:	e004      	b.n	800db90 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800db86:	4b11      	ldr	r3, [pc, #68]	; (800dbcc <xTaskIncrementTick+0x16c>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	3301      	adds	r3, #1
 800db8c:	4a0f      	ldr	r2, [pc, #60]	; (800dbcc <xTaskIncrementTick+0x16c>)
 800db8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800db90:	4b0f      	ldr	r3, [pc, #60]	; (800dbd0 <xTaskIncrementTick+0x170>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d001      	beq.n	800db9c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800db98:	2301      	movs	r3, #1
 800db9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800db9c:	697b      	ldr	r3, [r7, #20]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	200004e4 	.word	0x200004e4
 800dbac:	200004c0 	.word	0x200004c0
 800dbb0:	20000474 	.word	0x20000474
 800dbb4:	20000478 	.word	0x20000478
 800dbb8:	200004d4 	.word	0x200004d4
 800dbbc:	200004dc 	.word	0x200004dc
 800dbc0:	200004c4 	.word	0x200004c4
 800dbc4:	200003c0 	.word	0x200003c0
 800dbc8:	200003bc 	.word	0x200003bc
 800dbcc:	200004cc 	.word	0x200004cc
 800dbd0:	200004d0 	.word	0x200004d0

0800dbd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b088      	sub	sp, #32
 800dbd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dbda:	4b3a      	ldr	r3, [pc, #232]	; (800dcc4 <vTaskSwitchContext+0xf0>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d003      	beq.n	800dbea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dbe2:	4b39      	ldr	r3, [pc, #228]	; (800dcc8 <vTaskSwitchContext+0xf4>)
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dbe8:	e067      	b.n	800dcba <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800dbea:	4b37      	ldr	r3, [pc, #220]	; (800dcc8 <vTaskSwitchContext+0xf4>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dbf0:	4b36      	ldr	r3, [pc, #216]	; (800dccc <vTaskSwitchContext+0xf8>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbf6:	61fb      	str	r3, [r7, #28]
 800dbf8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800dbfc:	61bb      	str	r3, [r7, #24]
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	69ba      	ldr	r2, [r7, #24]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d111      	bne.n	800dc2c <vTaskSwitchContext+0x58>
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	3304      	adds	r3, #4
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	69ba      	ldr	r2, [r7, #24]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d10b      	bne.n	800dc2c <vTaskSwitchContext+0x58>
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	3308      	adds	r3, #8
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	69ba      	ldr	r2, [r7, #24]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d105      	bne.n	800dc2c <vTaskSwitchContext+0x58>
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	330c      	adds	r3, #12
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	69ba      	ldr	r2, [r7, #24]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d008      	beq.n	800dc3e <vTaskSwitchContext+0x6a>
 800dc2c:	4b27      	ldr	r3, [pc, #156]	; (800dccc <vTaskSwitchContext+0xf8>)
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	4b26      	ldr	r3, [pc, #152]	; (800dccc <vTaskSwitchContext+0xf8>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	3334      	adds	r3, #52	; 0x34
 800dc36:	4619      	mov	r1, r3
 800dc38:	4610      	mov	r0, r2
 800dc3a:	f7f2 ff54 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc3e:	4b24      	ldr	r3, [pc, #144]	; (800dcd0 <vTaskSwitchContext+0xfc>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	fab3 f383 	clz	r3, r3
 800dc4a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dc4c:	7afb      	ldrb	r3, [r7, #11]
 800dc4e:	f1c3 031f 	rsb	r3, r3, #31
 800dc52:	617b      	str	r3, [r7, #20]
 800dc54:	491f      	ldr	r1, [pc, #124]	; (800dcd4 <vTaskSwitchContext+0x100>)
 800dc56:	697a      	ldr	r2, [r7, #20]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	4413      	add	r3, r2
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	440b      	add	r3, r1
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10b      	bne.n	800dc80 <vTaskSwitchContext+0xac>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6c:	b672      	cpsid	i
 800dc6e:	f383 8811 	msr	BASEPRI, r3
 800dc72:	f3bf 8f6f 	isb	sy
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	b662      	cpsie	i
 800dc7c:	607b      	str	r3, [r7, #4]
 800dc7e:	e7fe      	b.n	800dc7e <vTaskSwitchContext+0xaa>
 800dc80:	697a      	ldr	r2, [r7, #20]
 800dc82:	4613      	mov	r3, r2
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	4413      	add	r3, r2
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	4a12      	ldr	r2, [pc, #72]	; (800dcd4 <vTaskSwitchContext+0x100>)
 800dc8c:	4413      	add	r3, r2
 800dc8e:	613b      	str	r3, [r7, #16]
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	685a      	ldr	r2, [r3, #4]
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	605a      	str	r2, [r3, #4]
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	685a      	ldr	r2, [r3, #4]
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	3308      	adds	r3, #8
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d104      	bne.n	800dcb0 <vTaskSwitchContext+0xdc>
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	685a      	ldr	r2, [r3, #4]
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	605a      	str	r2, [r3, #4]
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	4a05      	ldr	r2, [pc, #20]	; (800dccc <vTaskSwitchContext+0xf8>)
 800dcb8:	6013      	str	r3, [r2, #0]
}
 800dcba:	bf00      	nop
 800dcbc:	3720      	adds	r7, #32
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	200004e4 	.word	0x200004e4
 800dcc8:	200004d0 	.word	0x200004d0
 800dccc:	200003bc 	.word	0x200003bc
 800dcd0:	200004c4 	.word	0x200004c4
 800dcd4:	200003c0 	.word	0x200003c0

0800dcd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d10b      	bne.n	800dd00 <vTaskPlaceOnEventList+0x28>
 800dce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcec:	b672      	cpsid	i
 800dcee:	f383 8811 	msr	BASEPRI, r3
 800dcf2:	f3bf 8f6f 	isb	sy
 800dcf6:	f3bf 8f4f 	dsb	sy
 800dcfa:	b662      	cpsie	i
 800dcfc:	60fb      	str	r3, [r7, #12]
 800dcfe:	e7fe      	b.n	800dcfe <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd00:	4b07      	ldr	r3, [pc, #28]	; (800dd20 <vTaskPlaceOnEventList+0x48>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	3318      	adds	r3, #24
 800dd06:	4619      	mov	r1, r3
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f7fe fc28 	bl	800c55e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd0e:	2101      	movs	r1, #1
 800dd10:	6838      	ldr	r0, [r7, #0]
 800dd12:	f000 fb9d 	bl	800e450 <prvAddCurrentTaskToDelayedList>
}
 800dd16:	bf00      	nop
 800dd18:	3710      	adds	r7, #16
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	200003bc 	.word	0x200003bc

0800dd24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b086      	sub	sp, #24
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d10b      	bne.n	800dd52 <xTaskRemoveFromEventList+0x2e>
 800dd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3e:	b672      	cpsid	i
 800dd40:	f383 8811 	msr	BASEPRI, r3
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	b662      	cpsie	i
 800dd4e:	60fb      	str	r3, [r7, #12]
 800dd50:	e7fe      	b.n	800dd50 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	3318      	adds	r3, #24
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7fe fc3a 	bl	800c5d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd5c:	4b1d      	ldr	r3, [pc, #116]	; (800ddd4 <xTaskRemoveFromEventList+0xb0>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d11c      	bne.n	800dd9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	3304      	adds	r3, #4
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fe fc31 	bl	800c5d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd72:	2201      	movs	r2, #1
 800dd74:	409a      	lsls	r2, r3
 800dd76:	4b18      	ldr	r3, [pc, #96]	; (800ddd8 <xTaskRemoveFromEventList+0xb4>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	4a16      	ldr	r2, [pc, #88]	; (800ddd8 <xTaskRemoveFromEventList+0xb4>)
 800dd7e:	6013      	str	r3, [r2, #0]
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd84:	4613      	mov	r3, r2
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	4413      	add	r3, r2
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	4a13      	ldr	r2, [pc, #76]	; (800dddc <xTaskRemoveFromEventList+0xb8>)
 800dd8e:	441a      	add	r2, r3
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	3304      	adds	r3, #4
 800dd94:	4619      	mov	r1, r3
 800dd96:	4610      	mov	r0, r2
 800dd98:	f7fe fbbd 	bl	800c516 <vListInsertEnd>
 800dd9c:	e005      	b.n	800ddaa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	3318      	adds	r3, #24
 800dda2:	4619      	mov	r1, r3
 800dda4:	480e      	ldr	r0, [pc, #56]	; (800dde0 <xTaskRemoveFromEventList+0xbc>)
 800dda6:	f7fe fbb6 	bl	800c516 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddae:	4b0d      	ldr	r3, [pc, #52]	; (800dde4 <xTaskRemoveFromEventList+0xc0>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d905      	bls.n	800ddc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ddbc:	4b0a      	ldr	r3, [pc, #40]	; (800dde8 <xTaskRemoveFromEventList+0xc4>)
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	601a      	str	r2, [r3, #0]
 800ddc2:	e001      	b.n	800ddc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ddc8:	697b      	ldr	r3, [r7, #20]
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3718      	adds	r7, #24
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	200004e4 	.word	0x200004e4
 800ddd8:	200004c4 	.word	0x200004c4
 800dddc:	200003c0 	.word	0x200003c0
 800dde0:	2000047c 	.word	0x2000047c
 800dde4:	200003bc 	.word	0x200003bc
 800dde8:	200004d0 	.word	0x200004d0

0800ddec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ddf4:	4b06      	ldr	r3, [pc, #24]	; (800de10 <vTaskInternalSetTimeOutState+0x24>)
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ddfc:	4b05      	ldr	r3, [pc, #20]	; (800de14 <vTaskInternalSetTimeOutState+0x28>)
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	605a      	str	r2, [r3, #4]
}
 800de04:	bf00      	nop
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr
 800de10:	200004d4 	.word	0x200004d4
 800de14:	200004c0 	.word	0x200004c0

0800de18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b088      	sub	sp, #32
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d10b      	bne.n	800de40 <xTaskCheckForTimeOut+0x28>
 800de28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2c:	b672      	cpsid	i
 800de2e:	f383 8811 	msr	BASEPRI, r3
 800de32:	f3bf 8f6f 	isb	sy
 800de36:	f3bf 8f4f 	dsb	sy
 800de3a:	b662      	cpsie	i
 800de3c:	613b      	str	r3, [r7, #16]
 800de3e:	e7fe      	b.n	800de3e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d10b      	bne.n	800de5e <xTaskCheckForTimeOut+0x46>
 800de46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4a:	b672      	cpsid	i
 800de4c:	f383 8811 	msr	BASEPRI, r3
 800de50:	f3bf 8f6f 	isb	sy
 800de54:	f3bf 8f4f 	dsb	sy
 800de58:	b662      	cpsie	i
 800de5a:	60fb      	str	r3, [r7, #12]
 800de5c:	e7fe      	b.n	800de5c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800de5e:	f000 fc63 	bl	800e728 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800de62:	4b1d      	ldr	r3, [pc, #116]	; (800ded8 <xTaskCheckForTimeOut+0xc0>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	69ba      	ldr	r2, [r7, #24]
 800de6e:	1ad3      	subs	r3, r2, r3
 800de70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de7a:	d102      	bne.n	800de82 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800de7c:	2300      	movs	r3, #0
 800de7e:	61fb      	str	r3, [r7, #28]
 800de80:	e023      	b.n	800deca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	4b15      	ldr	r3, [pc, #84]	; (800dedc <xTaskCheckForTimeOut+0xc4>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d007      	beq.n	800de9e <xTaskCheckForTimeOut+0x86>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	69ba      	ldr	r2, [r7, #24]
 800de94:	429a      	cmp	r2, r3
 800de96:	d302      	bcc.n	800de9e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800de98:	2301      	movs	r3, #1
 800de9a:	61fb      	str	r3, [r7, #28]
 800de9c:	e015      	b.n	800deca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	697a      	ldr	r2, [r7, #20]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d20b      	bcs.n	800dec0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	1ad2      	subs	r2, r2, r3
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f7ff ff99 	bl	800ddec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800deba:	2300      	movs	r3, #0
 800debc:	61fb      	str	r3, [r7, #28]
 800debe:	e004      	b.n	800deca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	2200      	movs	r2, #0
 800dec4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dec6:	2301      	movs	r3, #1
 800dec8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800deca:	f000 fc5f 	bl	800e78c <vPortExitCritical>

	return xReturn;
 800dece:	69fb      	ldr	r3, [r7, #28]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3720      	adds	r7, #32
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	200004c0 	.word	0x200004c0
 800dedc:	200004d4 	.word	0x200004d4

0800dee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dee0:	b480      	push	{r7}
 800dee2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dee4:	4b03      	ldr	r3, [pc, #12]	; (800def4 <vTaskMissedYield+0x14>)
 800dee6:	2201      	movs	r2, #1
 800dee8:	601a      	str	r2, [r3, #0]
}
 800deea:	bf00      	nop
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr
 800def4:	200004d0 	.word	0x200004d0

0800def8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800df00:	f000 f854 	bl	800dfac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800df04:	4b07      	ldr	r3, [pc, #28]	; (800df24 <prvIdleTask+0x2c>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d907      	bls.n	800df1c <prvIdleTask+0x24>
			{
				taskYIELD();
 800df0c:	4b06      	ldr	r3, [pc, #24]	; (800df28 <prvIdleTask+0x30>)
 800df0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df12:	601a      	str	r2, [r3, #0]
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800df1c:	f7f2 fddc 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800df20:	e7ee      	b.n	800df00 <prvIdleTask+0x8>
 800df22:	bf00      	nop
 800df24:	200003c0 	.word	0x200003c0
 800df28:	e000ed04 	.word	0xe000ed04

0800df2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df32:	2300      	movs	r3, #0
 800df34:	607b      	str	r3, [r7, #4]
 800df36:	e00c      	b.n	800df52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	4613      	mov	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4a12      	ldr	r2, [pc, #72]	; (800df8c <prvInitialiseTaskLists+0x60>)
 800df44:	4413      	add	r3, r2
 800df46:	4618      	mov	r0, r3
 800df48:	f7fe fab8 	bl	800c4bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	3301      	adds	r3, #1
 800df50:	607b      	str	r3, [r7, #4]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2b06      	cmp	r3, #6
 800df56:	d9ef      	bls.n	800df38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800df58:	480d      	ldr	r0, [pc, #52]	; (800df90 <prvInitialiseTaskLists+0x64>)
 800df5a:	f7fe faaf 	bl	800c4bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800df5e:	480d      	ldr	r0, [pc, #52]	; (800df94 <prvInitialiseTaskLists+0x68>)
 800df60:	f7fe faac 	bl	800c4bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800df64:	480c      	ldr	r0, [pc, #48]	; (800df98 <prvInitialiseTaskLists+0x6c>)
 800df66:	f7fe faa9 	bl	800c4bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800df6a:	480c      	ldr	r0, [pc, #48]	; (800df9c <prvInitialiseTaskLists+0x70>)
 800df6c:	f7fe faa6 	bl	800c4bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df70:	480b      	ldr	r0, [pc, #44]	; (800dfa0 <prvInitialiseTaskLists+0x74>)
 800df72:	f7fe faa3 	bl	800c4bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df76:	4b0b      	ldr	r3, [pc, #44]	; (800dfa4 <prvInitialiseTaskLists+0x78>)
 800df78:	4a05      	ldr	r2, [pc, #20]	; (800df90 <prvInitialiseTaskLists+0x64>)
 800df7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df7c:	4b0a      	ldr	r3, [pc, #40]	; (800dfa8 <prvInitialiseTaskLists+0x7c>)
 800df7e:	4a05      	ldr	r2, [pc, #20]	; (800df94 <prvInitialiseTaskLists+0x68>)
 800df80:	601a      	str	r2, [r3, #0]
}
 800df82:	bf00      	nop
 800df84:	3708      	adds	r7, #8
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	200003c0 	.word	0x200003c0
 800df90:	2000044c 	.word	0x2000044c
 800df94:	20000460 	.word	0x20000460
 800df98:	2000047c 	.word	0x2000047c
 800df9c:	20000490 	.word	0x20000490
 800dfa0:	200004a8 	.word	0x200004a8
 800dfa4:	20000474 	.word	0x20000474
 800dfa8:	20000478 	.word	0x20000478

0800dfac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfb2:	e019      	b.n	800dfe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dfb4:	f000 fbb8 	bl	800e728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfb8:	4b0f      	ldr	r3, [pc, #60]	; (800dff8 <prvCheckTasksWaitingTermination+0x4c>)
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	3304      	adds	r3, #4
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7fe fb03 	bl	800c5d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dfca:	4b0c      	ldr	r3, [pc, #48]	; (800dffc <prvCheckTasksWaitingTermination+0x50>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	4a0a      	ldr	r2, [pc, #40]	; (800dffc <prvCheckTasksWaitingTermination+0x50>)
 800dfd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dfd4:	4b0a      	ldr	r3, [pc, #40]	; (800e000 <prvCheckTasksWaitingTermination+0x54>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	4a09      	ldr	r2, [pc, #36]	; (800e000 <prvCheckTasksWaitingTermination+0x54>)
 800dfdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dfde:	f000 fbd5 	bl	800e78c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 f80e 	bl	800e004 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfe8:	4b05      	ldr	r3, [pc, #20]	; (800e000 <prvCheckTasksWaitingTermination+0x54>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1e1      	bne.n	800dfb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dff0:	bf00      	nop
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	20000490 	.word	0x20000490
 800dffc:	200004bc 	.word	0x200004bc
 800e000:	200004a4 	.word	0x200004a4

0800e004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e012:	2b00      	cmp	r3, #0
 800e014:	d108      	bne.n	800e028 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e01a:	4618      	mov	r0, r3
 800e01c:	f000 fd72 	bl	800eb04 <vPortFree>
				vPortFree( pxTCB );
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 fd6f 	bl	800eb04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e026:	e019      	b.n	800e05c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d103      	bne.n	800e03a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 fd66 	bl	800eb04 <vPortFree>
	}
 800e038:	e010      	b.n	800e05c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e040:	2b02      	cmp	r3, #2
 800e042:	d00b      	beq.n	800e05c <prvDeleteTCB+0x58>
 800e044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e048:	b672      	cpsid	i
 800e04a:	f383 8811 	msr	BASEPRI, r3
 800e04e:	f3bf 8f6f 	isb	sy
 800e052:	f3bf 8f4f 	dsb	sy
 800e056:	b662      	cpsie	i
 800e058:	60fb      	str	r3, [r7, #12]
 800e05a:	e7fe      	b.n	800e05a <prvDeleteTCB+0x56>
	}
 800e05c:	bf00      	nop
 800e05e:	3710      	adds	r7, #16
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e06a:	4b0c      	ldr	r3, [pc, #48]	; (800e09c <prvResetNextTaskUnblockTime+0x38>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d104      	bne.n	800e07e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e074:	4b0a      	ldr	r3, [pc, #40]	; (800e0a0 <prvResetNextTaskUnblockTime+0x3c>)
 800e076:	f04f 32ff 	mov.w	r2, #4294967295
 800e07a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e07c:	e008      	b.n	800e090 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e07e:	4b07      	ldr	r3, [pc, #28]	; (800e09c <prvResetNextTaskUnblockTime+0x38>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	4a04      	ldr	r2, [pc, #16]	; (800e0a0 <prvResetNextTaskUnblockTime+0x3c>)
 800e08e:	6013      	str	r3, [r2, #0]
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr
 800e09c:	20000474 	.word	0x20000474
 800e0a0:	200004dc 	.word	0x200004dc

0800e0a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e0aa:	4b0b      	ldr	r3, [pc, #44]	; (800e0d8 <xTaskGetSchedulerState+0x34>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d102      	bne.n	800e0b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	607b      	str	r3, [r7, #4]
 800e0b6:	e008      	b.n	800e0ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0b8:	4b08      	ldr	r3, [pc, #32]	; (800e0dc <xTaskGetSchedulerState+0x38>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d102      	bne.n	800e0c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e0c0:	2302      	movs	r3, #2
 800e0c2:	607b      	str	r3, [r7, #4]
 800e0c4:	e001      	b.n	800e0ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e0ca:	687b      	ldr	r3, [r7, #4]
	}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	370c      	adds	r7, #12
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr
 800e0d8:	200004c8 	.word	0x200004c8
 800e0dc:	200004e4 	.word	0x200004e4

0800e0e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d069      	beq.n	800e1ca <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0fa:	4b36      	ldr	r3, [pc, #216]	; (800e1d4 <xTaskPriorityInherit+0xf4>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e100:	429a      	cmp	r2, r3
 800e102:	d259      	bcs.n	800e1b8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	699b      	ldr	r3, [r3, #24]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	db06      	blt.n	800e11a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e10c:	4b31      	ldr	r3, [pc, #196]	; (800e1d4 <xTaskPriorityInherit+0xf4>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e112:	f1c3 0207 	rsb	r2, r3, #7
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	6959      	ldr	r1, [r3, #20]
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e122:	4613      	mov	r3, r2
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	4413      	add	r3, r2
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	4a2b      	ldr	r2, [pc, #172]	; (800e1d8 <xTaskPriorityInherit+0xf8>)
 800e12c:	4413      	add	r3, r2
 800e12e:	4299      	cmp	r1, r3
 800e130:	d13a      	bne.n	800e1a8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	3304      	adds	r3, #4
 800e136:	4618      	mov	r0, r3
 800e138:	f7fe fa4a 	bl	800c5d0 <uxListRemove>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d115      	bne.n	800e16e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e146:	4924      	ldr	r1, [pc, #144]	; (800e1d8 <xTaskPriorityInherit+0xf8>)
 800e148:	4613      	mov	r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	440b      	add	r3, r1
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d10a      	bne.n	800e16e <xTaskPriorityInherit+0x8e>
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15c:	2201      	movs	r2, #1
 800e15e:	fa02 f303 	lsl.w	r3, r2, r3
 800e162:	43da      	mvns	r2, r3
 800e164:	4b1d      	ldr	r3, [pc, #116]	; (800e1dc <xTaskPriorityInherit+0xfc>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4013      	ands	r3, r2
 800e16a:	4a1c      	ldr	r2, [pc, #112]	; (800e1dc <xTaskPriorityInherit+0xfc>)
 800e16c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e16e:	4b19      	ldr	r3, [pc, #100]	; (800e1d4 <xTaskPriorityInherit+0xf4>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17c:	2201      	movs	r2, #1
 800e17e:	409a      	lsls	r2, r3
 800e180:	4b16      	ldr	r3, [pc, #88]	; (800e1dc <xTaskPriorityInherit+0xfc>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4313      	orrs	r3, r2
 800e186:	4a15      	ldr	r2, [pc, #84]	; (800e1dc <xTaskPriorityInherit+0xfc>)
 800e188:	6013      	str	r3, [r2, #0]
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e18e:	4613      	mov	r3, r2
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	4413      	add	r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4a10      	ldr	r2, [pc, #64]	; (800e1d8 <xTaskPriorityInherit+0xf8>)
 800e198:	441a      	add	r2, r3
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	3304      	adds	r3, #4
 800e19e:	4619      	mov	r1, r3
 800e1a0:	4610      	mov	r0, r2
 800e1a2:	f7fe f9b8 	bl	800c516 <vListInsertEnd>
 800e1a6:	e004      	b.n	800e1b2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e1a8:	4b0a      	ldr	r3, [pc, #40]	; (800e1d4 <xTaskPriorityInherit+0xf4>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	60fb      	str	r3, [r7, #12]
 800e1b6:	e008      	b.n	800e1ca <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1bc:	4b05      	ldr	r3, [pc, #20]	; (800e1d4 <xTaskPriorityInherit+0xf4>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d201      	bcs.n	800e1ca <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
	}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	200003bc 	.word	0x200003bc
 800e1d8:	200003c0 	.word	0x200003c0
 800e1dc:	200004c4 	.word	0x200004c4

0800e1e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d070      	beq.n	800e2d8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e1f6:	4b3b      	ldr	r3, [pc, #236]	; (800e2e4 <xTaskPriorityDisinherit+0x104>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	693a      	ldr	r2, [r7, #16]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d00b      	beq.n	800e218 <xTaskPriorityDisinherit+0x38>
 800e200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e204:	b672      	cpsid	i
 800e206:	f383 8811 	msr	BASEPRI, r3
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	b662      	cpsie	i
 800e214:	60fb      	str	r3, [r7, #12]
 800e216:	e7fe      	b.n	800e216 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d10b      	bne.n	800e238 <xTaskPriorityDisinherit+0x58>
 800e220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e224:	b672      	cpsid	i
 800e226:	f383 8811 	msr	BASEPRI, r3
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	b662      	cpsie	i
 800e234:	60bb      	str	r3, [r7, #8]
 800e236:	e7fe      	b.n	800e236 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e23c:	1e5a      	subs	r2, r3, #1
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d044      	beq.n	800e2d8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e252:	2b00      	cmp	r3, #0
 800e254:	d140      	bne.n	800e2d8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	3304      	adds	r3, #4
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe f9b8 	bl	800c5d0 <uxListRemove>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d115      	bne.n	800e292 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e26a:	491f      	ldr	r1, [pc, #124]	; (800e2e8 <xTaskPriorityDisinherit+0x108>)
 800e26c:	4613      	mov	r3, r2
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4413      	add	r3, r2
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	440b      	add	r3, r1
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10a      	bne.n	800e292 <xTaskPriorityDisinherit+0xb2>
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e280:	2201      	movs	r2, #1
 800e282:	fa02 f303 	lsl.w	r3, r2, r3
 800e286:	43da      	mvns	r2, r3
 800e288:	4b18      	ldr	r3, [pc, #96]	; (800e2ec <xTaskPriorityDisinherit+0x10c>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4013      	ands	r3, r2
 800e28e:	4a17      	ldr	r2, [pc, #92]	; (800e2ec <xTaskPriorityDisinherit+0x10c>)
 800e290:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29e:	f1c3 0207 	rsb	r2, r3, #7
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	409a      	lsls	r2, r3
 800e2ae:	4b0f      	ldr	r3, [pc, #60]	; (800e2ec <xTaskPriorityDisinherit+0x10c>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	4a0d      	ldr	r2, [pc, #52]	; (800e2ec <xTaskPriorityDisinherit+0x10c>)
 800e2b6:	6013      	str	r3, [r2, #0]
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2bc:	4613      	mov	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4413      	add	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	4a08      	ldr	r2, [pc, #32]	; (800e2e8 <xTaskPriorityDisinherit+0x108>)
 800e2c6:	441a      	add	r2, r3
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	3304      	adds	r3, #4
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	f7fe f921 	bl	800c516 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e2d8:	697b      	ldr	r3, [r7, #20]
	}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3718      	adds	r7, #24
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	200003bc 	.word	0x200003bc
 800e2e8:	200003c0 	.word	0x200003c0
 800e2ec:	200004c4 	.word	0x200004c4

0800e2f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b088      	sub	sp, #32
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e2fe:	2301      	movs	r3, #1
 800e300:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2b00      	cmp	r3, #0
 800e306:	f000 8085 	beq.w	800e414 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10b      	bne.n	800e32a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e316:	b672      	cpsid	i
 800e318:	f383 8811 	msr	BASEPRI, r3
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	b662      	cpsie	i
 800e326:	60fb      	str	r3, [r7, #12]
 800e328:	e7fe      	b.n	800e328 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e32e:	683a      	ldr	r2, [r7, #0]
 800e330:	429a      	cmp	r2, r3
 800e332:	d902      	bls.n	800e33a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	61fb      	str	r3, [r7, #28]
 800e338:	e002      	b.n	800e340 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e33a:	69bb      	ldr	r3, [r7, #24]
 800e33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e33e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e344:	69fa      	ldr	r2, [r7, #28]
 800e346:	429a      	cmp	r2, r3
 800e348:	d064      	beq.n	800e414 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e34e:	697a      	ldr	r2, [r7, #20]
 800e350:	429a      	cmp	r2, r3
 800e352:	d15f      	bne.n	800e414 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e354:	4b31      	ldr	r3, [pc, #196]	; (800e41c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	69ba      	ldr	r2, [r7, #24]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d10b      	bne.n	800e376 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e362:	b672      	cpsid	i
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	b662      	cpsie	i
 800e372:	60bb      	str	r3, [r7, #8]
 800e374:	e7fe      	b.n	800e374 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e376:	69bb      	ldr	r3, [r7, #24]
 800e378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e37a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	69fa      	ldr	r2, [r7, #28]
 800e380:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	699b      	ldr	r3, [r3, #24]
 800e386:	2b00      	cmp	r3, #0
 800e388:	db04      	blt.n	800e394 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	f1c3 0207 	rsb	r2, r3, #7
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e394:	69bb      	ldr	r3, [r7, #24]
 800e396:	6959      	ldr	r1, [r3, #20]
 800e398:	693a      	ldr	r2, [r7, #16]
 800e39a:	4613      	mov	r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	4413      	add	r3, r2
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	4a1f      	ldr	r2, [pc, #124]	; (800e420 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e3a4:	4413      	add	r3, r2
 800e3a6:	4299      	cmp	r1, r3
 800e3a8:	d134      	bne.n	800e414 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	3304      	adds	r3, #4
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fe f90e 	bl	800c5d0 <uxListRemove>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d115      	bne.n	800e3e6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3be:	4918      	ldr	r1, [pc, #96]	; (800e420 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e3c0:	4613      	mov	r3, r2
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	4413      	add	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	440b      	add	r3, r1
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10a      	bne.n	800e3e6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e3da:	43da      	mvns	r2, r3
 800e3dc:	4b11      	ldr	r3, [pc, #68]	; (800e424 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	4a10      	ldr	r2, [pc, #64]	; (800e424 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	409a      	lsls	r2, r3
 800e3ee:	4b0d      	ldr	r3, [pc, #52]	; (800e424 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	4a0b      	ldr	r2, [pc, #44]	; (800e424 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3f6:	6013      	str	r3, [r2, #0]
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	009b      	lsls	r3, r3, #2
 800e400:	4413      	add	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	4a06      	ldr	r2, [pc, #24]	; (800e420 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e406:	441a      	add	r2, r3
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	3304      	adds	r3, #4
 800e40c:	4619      	mov	r1, r3
 800e40e:	4610      	mov	r0, r2
 800e410:	f7fe f881 	bl	800c516 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e414:	bf00      	nop
 800e416:	3720      	adds	r7, #32
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	200003bc 	.word	0x200003bc
 800e420:	200003c0 	.word	0x200003c0
 800e424:	200004c4 	.word	0x200004c4

0800e428 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e428:	b480      	push	{r7}
 800e42a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e42c:	4b07      	ldr	r3, [pc, #28]	; (800e44c <pvTaskIncrementMutexHeldCount+0x24>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d004      	beq.n	800e43e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e434:	4b05      	ldr	r3, [pc, #20]	; (800e44c <pvTaskIncrementMutexHeldCount+0x24>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e43a:	3201      	adds	r2, #1
 800e43c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e43e:	4b03      	ldr	r3, [pc, #12]	; (800e44c <pvTaskIncrementMutexHeldCount+0x24>)
 800e440:	681b      	ldr	r3, [r3, #0]
	}
 800e442:	4618      	mov	r0, r3
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	200003bc 	.word	0x200003bc

0800e450 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e45a:	4b29      	ldr	r3, [pc, #164]	; (800e500 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e460:	4b28      	ldr	r3, [pc, #160]	; (800e504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	3304      	adds	r3, #4
 800e466:	4618      	mov	r0, r3
 800e468:	f7fe f8b2 	bl	800c5d0 <uxListRemove>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d10b      	bne.n	800e48a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e472:	4b24      	ldr	r3, [pc, #144]	; (800e504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e478:	2201      	movs	r2, #1
 800e47a:	fa02 f303 	lsl.w	r3, r2, r3
 800e47e:	43da      	mvns	r2, r3
 800e480:	4b21      	ldr	r3, [pc, #132]	; (800e508 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4013      	ands	r3, r2
 800e486:	4a20      	ldr	r2, [pc, #128]	; (800e508 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e488:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e490:	d10a      	bne.n	800e4a8 <prvAddCurrentTaskToDelayedList+0x58>
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d007      	beq.n	800e4a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e498:	4b1a      	ldr	r3, [pc, #104]	; (800e504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	3304      	adds	r3, #4
 800e49e:	4619      	mov	r1, r3
 800e4a0:	481a      	ldr	r0, [pc, #104]	; (800e50c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e4a2:	f7fe f838 	bl	800c516 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e4a6:	e026      	b.n	800e4f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e4a8:	68fa      	ldr	r2, [r7, #12]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e4b0:	4b14      	ldr	r3, [pc, #80]	; (800e504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	68ba      	ldr	r2, [r7, #8]
 800e4b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e4b8:	68ba      	ldr	r2, [r7, #8]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d209      	bcs.n	800e4d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4c0:	4b13      	ldr	r3, [pc, #76]	; (800e510 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	4b0f      	ldr	r3, [pc, #60]	; (800e504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	3304      	adds	r3, #4
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	4610      	mov	r0, r2
 800e4ce:	f7fe f846 	bl	800c55e <vListInsert>
}
 800e4d2:	e010      	b.n	800e4f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4d4:	4b0f      	ldr	r3, [pc, #60]	; (800e514 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	4b0a      	ldr	r3, [pc, #40]	; (800e504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	3304      	adds	r3, #4
 800e4de:	4619      	mov	r1, r3
 800e4e0:	4610      	mov	r0, r2
 800e4e2:	f7fe f83c 	bl	800c55e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e4e6:	4b0c      	ldr	r3, [pc, #48]	; (800e518 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d202      	bcs.n	800e4f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e4f0:	4a09      	ldr	r2, [pc, #36]	; (800e518 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	6013      	str	r3, [r2, #0]
}
 800e4f6:	bf00      	nop
 800e4f8:	3710      	adds	r7, #16
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	200004c0 	.word	0x200004c0
 800e504:	200003bc 	.word	0x200003bc
 800e508:	200004c4 	.word	0x200004c4
 800e50c:	200004a8 	.word	0x200004a8
 800e510:	20000478 	.word	0x20000478
 800e514:	20000474 	.word	0x20000474
 800e518:	200004dc 	.word	0x200004dc

0800e51c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e51c:	b480      	push	{r7}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	3b04      	subs	r3, #4
 800e52c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	3b04      	subs	r3, #4
 800e53a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	f023 0201 	bic.w	r2, r3, #1
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	3b04      	subs	r3, #4
 800e54a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e54c:	4a0c      	ldr	r2, [pc, #48]	; (800e580 <pxPortInitialiseStack+0x64>)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	3b14      	subs	r3, #20
 800e556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	3b04      	subs	r3, #4
 800e562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f06f 0202 	mvn.w	r2, #2
 800e56a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	3b20      	subs	r3, #32
 800e570:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e572:	68fb      	ldr	r3, [r7, #12]
}
 800e574:	4618      	mov	r0, r3
 800e576:	3714      	adds	r7, #20
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr
 800e580:	0800e585 	.word	0x0800e585

0800e584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e58a:	2300      	movs	r3, #0
 800e58c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e58e:	4b13      	ldr	r3, [pc, #76]	; (800e5dc <prvTaskExitError+0x58>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e596:	d00b      	beq.n	800e5b0 <prvTaskExitError+0x2c>
 800e598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59c:	b672      	cpsid	i
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	b662      	cpsie	i
 800e5ac:	60fb      	str	r3, [r7, #12]
 800e5ae:	e7fe      	b.n	800e5ae <prvTaskExitError+0x2a>
 800e5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b4:	b672      	cpsid	i
 800e5b6:	f383 8811 	msr	BASEPRI, r3
 800e5ba:	f3bf 8f6f 	isb	sy
 800e5be:	f3bf 8f4f 	dsb	sy
 800e5c2:	b662      	cpsie	i
 800e5c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e5c6:	bf00      	nop
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d0fc      	beq.n	800e5c8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e5ce:	bf00      	nop
 800e5d0:	3714      	adds	r7, #20
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop
 800e5dc:	20000024 	.word	0x20000024

0800e5e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5e0:	4b07      	ldr	r3, [pc, #28]	; (800e600 <pxCurrentTCBConst2>)
 800e5e2:	6819      	ldr	r1, [r3, #0]
 800e5e4:	6808      	ldr	r0, [r1, #0]
 800e5e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ea:	f380 8809 	msr	PSP, r0
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f04f 0000 	mov.w	r0, #0
 800e5f6:	f380 8811 	msr	BASEPRI, r0
 800e5fa:	4770      	bx	lr
 800e5fc:	f3af 8000 	nop.w

0800e600 <pxCurrentTCBConst2>:
 800e600:	200003bc 	.word	0x200003bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e604:	bf00      	nop
 800e606:	bf00      	nop

0800e608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e608:	4808      	ldr	r0, [pc, #32]	; (800e62c <prvPortStartFirstTask+0x24>)
 800e60a:	6800      	ldr	r0, [r0, #0]
 800e60c:	6800      	ldr	r0, [r0, #0]
 800e60e:	f380 8808 	msr	MSP, r0
 800e612:	f04f 0000 	mov.w	r0, #0
 800e616:	f380 8814 	msr	CONTROL, r0
 800e61a:	b662      	cpsie	i
 800e61c:	b661      	cpsie	f
 800e61e:	f3bf 8f4f 	dsb	sy
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	df00      	svc	0
 800e628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e62a:	bf00      	nop
 800e62c:	e000ed08 	.word	0xe000ed08

0800e630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b084      	sub	sp, #16
 800e634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e636:	4b36      	ldr	r3, [pc, #216]	; (800e710 <xPortStartScheduler+0xe0>)
 800e638:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	22ff      	movs	r2, #255	; 0xff
 800e646:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e650:	78fb      	ldrb	r3, [r7, #3]
 800e652:	b2db      	uxtb	r3, r3
 800e654:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e658:	b2da      	uxtb	r2, r3
 800e65a:	4b2e      	ldr	r3, [pc, #184]	; (800e714 <xPortStartScheduler+0xe4>)
 800e65c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e65e:	4b2e      	ldr	r3, [pc, #184]	; (800e718 <xPortStartScheduler+0xe8>)
 800e660:	2207      	movs	r2, #7
 800e662:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e664:	e009      	b.n	800e67a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e666:	4b2c      	ldr	r3, [pc, #176]	; (800e718 <xPortStartScheduler+0xe8>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	3b01      	subs	r3, #1
 800e66c:	4a2a      	ldr	r2, [pc, #168]	; (800e718 <xPortStartScheduler+0xe8>)
 800e66e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e670:	78fb      	ldrb	r3, [r7, #3]
 800e672:	b2db      	uxtb	r3, r3
 800e674:	005b      	lsls	r3, r3, #1
 800e676:	b2db      	uxtb	r3, r3
 800e678:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e67a:	78fb      	ldrb	r3, [r7, #3]
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e682:	2b80      	cmp	r3, #128	; 0x80
 800e684:	d0ef      	beq.n	800e666 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e686:	4b24      	ldr	r3, [pc, #144]	; (800e718 <xPortStartScheduler+0xe8>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f1c3 0307 	rsb	r3, r3, #7
 800e68e:	2b04      	cmp	r3, #4
 800e690:	d00b      	beq.n	800e6aa <xPortStartScheduler+0x7a>
 800e692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e696:	b672      	cpsid	i
 800e698:	f383 8811 	msr	BASEPRI, r3
 800e69c:	f3bf 8f6f 	isb	sy
 800e6a0:	f3bf 8f4f 	dsb	sy
 800e6a4:	b662      	cpsie	i
 800e6a6:	60bb      	str	r3, [r7, #8]
 800e6a8:	e7fe      	b.n	800e6a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6aa:	4b1b      	ldr	r3, [pc, #108]	; (800e718 <xPortStartScheduler+0xe8>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	021b      	lsls	r3, r3, #8
 800e6b0:	4a19      	ldr	r2, [pc, #100]	; (800e718 <xPortStartScheduler+0xe8>)
 800e6b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6b4:	4b18      	ldr	r3, [pc, #96]	; (800e718 <xPortStartScheduler+0xe8>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e6bc:	4a16      	ldr	r2, [pc, #88]	; (800e718 <xPortStartScheduler+0xe8>)
 800e6be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	b2da      	uxtb	r2, r3
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6c8:	4b14      	ldr	r3, [pc, #80]	; (800e71c <xPortStartScheduler+0xec>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a13      	ldr	r2, [pc, #76]	; (800e71c <xPortStartScheduler+0xec>)
 800e6ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e6d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6d4:	4b11      	ldr	r3, [pc, #68]	; (800e71c <xPortStartScheduler+0xec>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4a10      	ldr	r2, [pc, #64]	; (800e71c <xPortStartScheduler+0xec>)
 800e6da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e6de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e6e0:	f000 f8d4 	bl	800e88c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e6e4:	4b0e      	ldr	r3, [pc, #56]	; (800e720 <xPortStartScheduler+0xf0>)
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e6ea:	f000 f8f3 	bl	800e8d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6ee:	4b0d      	ldr	r3, [pc, #52]	; (800e724 <xPortStartScheduler+0xf4>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a0c      	ldr	r2, [pc, #48]	; (800e724 <xPortStartScheduler+0xf4>)
 800e6f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e6f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e6fa:	f7ff ff85 	bl	800e608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e6fe:	f7ff fa69 	bl	800dbd4 <vTaskSwitchContext>
	prvTaskExitError();
 800e702:	f7ff ff3f 	bl	800e584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e706:	2300      	movs	r3, #0
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3710      	adds	r7, #16
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	e000e400 	.word	0xe000e400
 800e714:	200004e8 	.word	0x200004e8
 800e718:	200004ec 	.word	0x200004ec
 800e71c:	e000ed20 	.word	0xe000ed20
 800e720:	20000024 	.word	0x20000024
 800e724:	e000ef34 	.word	0xe000ef34

0800e728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e732:	b672      	cpsid	i
 800e734:	f383 8811 	msr	BASEPRI, r3
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	b662      	cpsie	i
 800e742:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e744:	4b0f      	ldr	r3, [pc, #60]	; (800e784 <vPortEnterCritical+0x5c>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	3301      	adds	r3, #1
 800e74a:	4a0e      	ldr	r2, [pc, #56]	; (800e784 <vPortEnterCritical+0x5c>)
 800e74c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e74e:	4b0d      	ldr	r3, [pc, #52]	; (800e784 <vPortEnterCritical+0x5c>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b01      	cmp	r3, #1
 800e754:	d110      	bne.n	800e778 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e756:	4b0c      	ldr	r3, [pc, #48]	; (800e788 <vPortEnterCritical+0x60>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d00b      	beq.n	800e778 <vPortEnterCritical+0x50>
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	b672      	cpsid	i
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	b662      	cpsie	i
 800e774:	603b      	str	r3, [r7, #0]
 800e776:	e7fe      	b.n	800e776 <vPortEnterCritical+0x4e>
	}
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr
 800e784:	20000024 	.word	0x20000024
 800e788:	e000ed04 	.word	0xe000ed04

0800e78c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e792:	4b12      	ldr	r3, [pc, #72]	; (800e7dc <vPortExitCritical+0x50>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10b      	bne.n	800e7b2 <vPortExitCritical+0x26>
 800e79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79e:	b672      	cpsid	i
 800e7a0:	f383 8811 	msr	BASEPRI, r3
 800e7a4:	f3bf 8f6f 	isb	sy
 800e7a8:	f3bf 8f4f 	dsb	sy
 800e7ac:	b662      	cpsie	i
 800e7ae:	607b      	str	r3, [r7, #4]
 800e7b0:	e7fe      	b.n	800e7b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e7b2:	4b0a      	ldr	r3, [pc, #40]	; (800e7dc <vPortExitCritical+0x50>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3b01      	subs	r3, #1
 800e7b8:	4a08      	ldr	r2, [pc, #32]	; (800e7dc <vPortExitCritical+0x50>)
 800e7ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7bc:	4b07      	ldr	r3, [pc, #28]	; (800e7dc <vPortExitCritical+0x50>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d104      	bne.n	800e7ce <vPortExitCritical+0x42>
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e7ce:	bf00      	nop
 800e7d0:	370c      	adds	r7, #12
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop
 800e7dc:	20000024 	.word	0x20000024

0800e7e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e7e0:	f3ef 8009 	mrs	r0, PSP
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	4b15      	ldr	r3, [pc, #84]	; (800e840 <pxCurrentTCBConst>)
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	f01e 0f10 	tst.w	lr, #16
 800e7f0:	bf08      	it	eq
 800e7f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e7f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fa:	6010      	str	r0, [r2, #0]
 800e7fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e800:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e804:	b672      	cpsid	i
 800e806:	f380 8811 	msr	BASEPRI, r0
 800e80a:	f3bf 8f4f 	dsb	sy
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	b662      	cpsie	i
 800e814:	f7ff f9de 	bl	800dbd4 <vTaskSwitchContext>
 800e818:	f04f 0000 	mov.w	r0, #0
 800e81c:	f380 8811 	msr	BASEPRI, r0
 800e820:	bc09      	pop	{r0, r3}
 800e822:	6819      	ldr	r1, [r3, #0]
 800e824:	6808      	ldr	r0, [r1, #0]
 800e826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82a:	f01e 0f10 	tst.w	lr, #16
 800e82e:	bf08      	it	eq
 800e830:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e834:	f380 8809 	msr	PSP, r0
 800e838:	f3bf 8f6f 	isb	sy
 800e83c:	4770      	bx	lr
 800e83e:	bf00      	nop

0800e840 <pxCurrentTCBConst>:
 800e840:	200003bc 	.word	0x200003bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop

0800e848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
	__asm volatile
 800e84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e852:	b672      	cpsid	i
 800e854:	f383 8811 	msr	BASEPRI, r3
 800e858:	f3bf 8f6f 	isb	sy
 800e85c:	f3bf 8f4f 	dsb	sy
 800e860:	b662      	cpsie	i
 800e862:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e864:	f7ff f8fc 	bl	800da60 <xTaskIncrementTick>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d003      	beq.n	800e876 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e86e:	4b06      	ldr	r3, [pc, #24]	; (800e888 <SysTick_Handler+0x40>)
 800e870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e874:	601a      	str	r2, [r3, #0]
 800e876:	2300      	movs	r3, #0
 800e878:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e880:	bf00      	nop
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	e000ed04 	.word	0xe000ed04

0800e88c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e88c:	b480      	push	{r7}
 800e88e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e890:	4b0b      	ldr	r3, [pc, #44]	; (800e8c0 <vPortSetupTimerInterrupt+0x34>)
 800e892:	2200      	movs	r2, #0
 800e894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e896:	4b0b      	ldr	r3, [pc, #44]	; (800e8c4 <vPortSetupTimerInterrupt+0x38>)
 800e898:	2200      	movs	r2, #0
 800e89a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e89c:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <vPortSetupTimerInterrupt+0x3c>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4a0a      	ldr	r2, [pc, #40]	; (800e8cc <vPortSetupTimerInterrupt+0x40>)
 800e8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8a6:	099b      	lsrs	r3, r3, #6
 800e8a8:	4a09      	ldr	r2, [pc, #36]	; (800e8d0 <vPortSetupTimerInterrupt+0x44>)
 800e8aa:	3b01      	subs	r3, #1
 800e8ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8ae:	4b04      	ldr	r3, [pc, #16]	; (800e8c0 <vPortSetupTimerInterrupt+0x34>)
 800e8b0:	2207      	movs	r2, #7
 800e8b2:	601a      	str	r2, [r3, #0]
}
 800e8b4:	bf00      	nop
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	e000e010 	.word	0xe000e010
 800e8c4:	e000e018 	.word	0xe000e018
 800e8c8:	20000018 	.word	0x20000018
 800e8cc:	10624dd3 	.word	0x10624dd3
 800e8d0:	e000e014 	.word	0xe000e014

0800e8d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e8e4 <vPortEnableVFP+0x10>
 800e8d8:	6801      	ldr	r1, [r0, #0]
 800e8da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e8de:	6001      	str	r1, [r0, #0]
 800e8e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e8e2:	bf00      	nop
 800e8e4:	e000ed88 	.word	0xe000ed88

0800e8e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e8ee:	f3ef 8305 	mrs	r3, IPSR
 800e8f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2b0f      	cmp	r3, #15
 800e8f8:	d915      	bls.n	800e926 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e8fa:	4a18      	ldr	r2, [pc, #96]	; (800e95c <vPortValidateInterruptPriority+0x74>)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	4413      	add	r3, r2
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e904:	4b16      	ldr	r3, [pc, #88]	; (800e960 <vPortValidateInterruptPriority+0x78>)
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	7afa      	ldrb	r2, [r7, #11]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d20b      	bcs.n	800e926 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e912:	b672      	cpsid	i
 800e914:	f383 8811 	msr	BASEPRI, r3
 800e918:	f3bf 8f6f 	isb	sy
 800e91c:	f3bf 8f4f 	dsb	sy
 800e920:	b662      	cpsie	i
 800e922:	607b      	str	r3, [r7, #4]
 800e924:	e7fe      	b.n	800e924 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e926:	4b0f      	ldr	r3, [pc, #60]	; (800e964 <vPortValidateInterruptPriority+0x7c>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e92e:	4b0e      	ldr	r3, [pc, #56]	; (800e968 <vPortValidateInterruptPriority+0x80>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	429a      	cmp	r2, r3
 800e934:	d90b      	bls.n	800e94e <vPortValidateInterruptPriority+0x66>
 800e936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93a:	b672      	cpsid	i
 800e93c:	f383 8811 	msr	BASEPRI, r3
 800e940:	f3bf 8f6f 	isb	sy
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	b662      	cpsie	i
 800e94a:	603b      	str	r3, [r7, #0]
 800e94c:	e7fe      	b.n	800e94c <vPortValidateInterruptPriority+0x64>
	}
 800e94e:	bf00      	nop
 800e950:	3714      	adds	r7, #20
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr
 800e95a:	bf00      	nop
 800e95c:	e000e3f0 	.word	0xe000e3f0
 800e960:	200004e8 	.word	0x200004e8
 800e964:	e000ed0c 	.word	0xe000ed0c
 800e968:	200004ec 	.word	0x200004ec

0800e96c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b08a      	sub	sp, #40	; 0x28
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e974:	2300      	movs	r3, #0
 800e976:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e978:	f7fe ffa4 	bl	800d8c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e97c:	4b5c      	ldr	r3, [pc, #368]	; (800eaf0 <pvPortMalloc+0x184>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d101      	bne.n	800e988 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e984:	f000 f91a 	bl	800ebbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e988:	4b5a      	ldr	r3, [pc, #360]	; (800eaf4 <pvPortMalloc+0x188>)
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	4013      	ands	r3, r2
 800e990:	2b00      	cmp	r3, #0
 800e992:	f040 8090 	bne.w	800eab6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d01e      	beq.n	800e9da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e99c:	2208      	movs	r2, #8
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f003 0307 	and.w	r3, r3, #7
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d015      	beq.n	800e9da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f023 0307 	bic.w	r3, r3, #7
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f003 0307 	and.w	r3, r3, #7
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d00b      	beq.n	800e9da <pvPortMalloc+0x6e>
 800e9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c6:	b672      	cpsid	i
 800e9c8:	f383 8811 	msr	BASEPRI, r3
 800e9cc:	f3bf 8f6f 	isb	sy
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	b662      	cpsie	i
 800e9d6:	617b      	str	r3, [r7, #20]
 800e9d8:	e7fe      	b.n	800e9d8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d06a      	beq.n	800eab6 <pvPortMalloc+0x14a>
 800e9e0:	4b45      	ldr	r3, [pc, #276]	; (800eaf8 <pvPortMalloc+0x18c>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d865      	bhi.n	800eab6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e9ea:	4b44      	ldr	r3, [pc, #272]	; (800eafc <pvPortMalloc+0x190>)
 800e9ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e9ee:	4b43      	ldr	r3, [pc, #268]	; (800eafc <pvPortMalloc+0x190>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9f4:	e004      	b.n	800ea00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d903      	bls.n	800ea12 <pvPortMalloc+0xa6>
 800ea0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d1f1      	bne.n	800e9f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea12:	4b37      	ldr	r3, [pc, #220]	; (800eaf0 <pvPortMalloc+0x184>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d04c      	beq.n	800eab6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea1c:	6a3b      	ldr	r3, [r7, #32]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2208      	movs	r2, #8
 800ea22:	4413      	add	r3, r2
 800ea24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	6a3b      	ldr	r3, [r7, #32]
 800ea2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	685a      	ldr	r2, [r3, #4]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	1ad2      	subs	r2, r2, r3
 800ea36:	2308      	movs	r3, #8
 800ea38:	005b      	lsls	r3, r3, #1
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d920      	bls.n	800ea80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	4413      	add	r3, r2
 800ea44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	f003 0307 	and.w	r3, r3, #7
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d00b      	beq.n	800ea68 <pvPortMalloc+0xfc>
 800ea50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea54:	b672      	cpsid	i
 800ea56:	f383 8811 	msr	BASEPRI, r3
 800ea5a:	f3bf 8f6f 	isb	sy
 800ea5e:	f3bf 8f4f 	dsb	sy
 800ea62:	b662      	cpsie	i
 800ea64:	613b      	str	r3, [r7, #16]
 800ea66:	e7fe      	b.n	800ea66 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6a:	685a      	ldr	r2, [r3, #4]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	1ad2      	subs	r2, r2, r3
 800ea70:	69bb      	ldr	r3, [r7, #24]
 800ea72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	687a      	ldr	r2, [r7, #4]
 800ea78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea7a:	69b8      	ldr	r0, [r7, #24]
 800ea7c:	f000 f900 	bl	800ec80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea80:	4b1d      	ldr	r3, [pc, #116]	; (800eaf8 <pvPortMalloc+0x18c>)
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	4a1b      	ldr	r2, [pc, #108]	; (800eaf8 <pvPortMalloc+0x18c>)
 800ea8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea8e:	4b1a      	ldr	r3, [pc, #104]	; (800eaf8 <pvPortMalloc+0x18c>)
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	4b1b      	ldr	r3, [pc, #108]	; (800eb00 <pvPortMalloc+0x194>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d203      	bcs.n	800eaa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea9a:	4b17      	ldr	r3, [pc, #92]	; (800eaf8 <pvPortMalloc+0x18c>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	4a18      	ldr	r2, [pc, #96]	; (800eb00 <pvPortMalloc+0x194>)
 800eaa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa4:	685a      	ldr	r2, [r3, #4]
 800eaa6:	4b13      	ldr	r3, [pc, #76]	; (800eaf4 <pvPortMalloc+0x188>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	431a      	orrs	r2, r3
 800eaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab2:	2200      	movs	r2, #0
 800eab4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eab6:	f7fe ff13 	bl	800d8e0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d101      	bne.n	800eac4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800eac0:	f7f2 f81c 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	f003 0307 	and.w	r3, r3, #7
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d00b      	beq.n	800eae6 <pvPortMalloc+0x17a>
 800eace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead2:	b672      	cpsid	i
 800ead4:	f383 8811 	msr	BASEPRI, r3
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	b662      	cpsie	i
 800eae2:	60fb      	str	r3, [r7, #12]
 800eae4:	e7fe      	b.n	800eae4 <pvPortMalloc+0x178>
	return pvReturn;
 800eae6:	69fb      	ldr	r3, [r7, #28]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3728      	adds	r7, #40	; 0x28
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	200084f8 	.word	0x200084f8
 800eaf4:	20008504 	.word	0x20008504
 800eaf8:	200084fc 	.word	0x200084fc
 800eafc:	200084f0 	.word	0x200084f0
 800eb00:	20008500 	.word	0x20008500

0800eb04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d04a      	beq.n	800ebac <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb16:	2308      	movs	r3, #8
 800eb18:	425b      	negs	r3, r3
 800eb1a:	697a      	ldr	r2, [r7, #20]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	685a      	ldr	r2, [r3, #4]
 800eb28:	4b22      	ldr	r3, [pc, #136]	; (800ebb4 <vPortFree+0xb0>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d10b      	bne.n	800eb4a <vPortFree+0x46>
 800eb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb36:	b672      	cpsid	i
 800eb38:	f383 8811 	msr	BASEPRI, r3
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	b662      	cpsie	i
 800eb46:	60fb      	str	r3, [r7, #12]
 800eb48:	e7fe      	b.n	800eb48 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d00b      	beq.n	800eb6a <vPortFree+0x66>
 800eb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb56:	b672      	cpsid	i
 800eb58:	f383 8811 	msr	BASEPRI, r3
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f3bf 8f4f 	dsb	sy
 800eb64:	b662      	cpsie	i
 800eb66:	60bb      	str	r3, [r7, #8]
 800eb68:	e7fe      	b.n	800eb68 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	685a      	ldr	r2, [r3, #4]
 800eb6e:	4b11      	ldr	r3, [pc, #68]	; (800ebb4 <vPortFree+0xb0>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4013      	ands	r3, r2
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d019      	beq.n	800ebac <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d115      	bne.n	800ebac <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	685a      	ldr	r2, [r3, #4]
 800eb84:	4b0b      	ldr	r3, [pc, #44]	; (800ebb4 <vPortFree+0xb0>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	43db      	mvns	r3, r3
 800eb8a:	401a      	ands	r2, r3
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb90:	f7fe fe98 	bl	800d8c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	685a      	ldr	r2, [r3, #4]
 800eb98:	4b07      	ldr	r3, [pc, #28]	; (800ebb8 <vPortFree+0xb4>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	4a06      	ldr	r2, [pc, #24]	; (800ebb8 <vPortFree+0xb4>)
 800eba0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eba2:	6938      	ldr	r0, [r7, #16]
 800eba4:	f000 f86c 	bl	800ec80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eba8:	f7fe fe9a 	bl	800d8e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ebac:	bf00      	nop
 800ebae:	3718      	adds	r7, #24
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	20008504 	.word	0x20008504
 800ebb8:	200084fc 	.word	0x200084fc

0800ebbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b085      	sub	sp, #20
 800ebc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ebc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ebc8:	4b27      	ldr	r3, [pc, #156]	; (800ec68 <prvHeapInit+0xac>)
 800ebca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f003 0307 	and.w	r3, r3, #7
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d00c      	beq.n	800ebf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	3307      	adds	r3, #7
 800ebda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f023 0307 	bic.w	r3, r3, #7
 800ebe2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	1ad3      	subs	r3, r2, r3
 800ebea:	4a1f      	ldr	r2, [pc, #124]	; (800ec68 <prvHeapInit+0xac>)
 800ebec:	4413      	add	r3, r2
 800ebee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebf4:	4a1d      	ldr	r2, [pc, #116]	; (800ec6c <prvHeapInit+0xb0>)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ebfa:	4b1c      	ldr	r3, [pc, #112]	; (800ec6c <prvHeapInit+0xb0>)
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	68ba      	ldr	r2, [r7, #8]
 800ec04:	4413      	add	r3, r2
 800ec06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec08:	2208      	movs	r2, #8
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	1a9b      	subs	r3, r3, r2
 800ec0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f023 0307 	bic.w	r3, r3, #7
 800ec16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	4a15      	ldr	r2, [pc, #84]	; (800ec70 <prvHeapInit+0xb4>)
 800ec1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec1e:	4b14      	ldr	r3, [pc, #80]	; (800ec70 <prvHeapInit+0xb4>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2200      	movs	r2, #0
 800ec24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec26:	4b12      	ldr	r3, [pc, #72]	; (800ec70 <prvHeapInit+0xb4>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	1ad2      	subs	r2, r2, r3
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec3c:	4b0c      	ldr	r3, [pc, #48]	; (800ec70 <prvHeapInit+0xb4>)
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	4a0a      	ldr	r2, [pc, #40]	; (800ec74 <prvHeapInit+0xb8>)
 800ec4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	4a09      	ldr	r2, [pc, #36]	; (800ec78 <prvHeapInit+0xbc>)
 800ec52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec54:	4b09      	ldr	r3, [pc, #36]	; (800ec7c <prvHeapInit+0xc0>)
 800ec56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ec5a:	601a      	str	r2, [r3, #0]
}
 800ec5c:	bf00      	nop
 800ec5e:	3714      	adds	r7, #20
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr
 800ec68:	200004f0 	.word	0x200004f0
 800ec6c:	200084f0 	.word	0x200084f0
 800ec70:	200084f8 	.word	0x200084f8
 800ec74:	20008500 	.word	0x20008500
 800ec78:	200084fc 	.word	0x200084fc
 800ec7c:	20008504 	.word	0x20008504

0800ec80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec80:	b480      	push	{r7}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec88:	4b28      	ldr	r3, [pc, #160]	; (800ed2c <prvInsertBlockIntoFreeList+0xac>)
 800ec8a:	60fb      	str	r3, [r7, #12]
 800ec8c:	e002      	b.n	800ec94 <prvInsertBlockIntoFreeList+0x14>
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	60fb      	str	r3, [r7, #12]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d8f7      	bhi.n	800ec8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	68ba      	ldr	r2, [r7, #8]
 800eca8:	4413      	add	r3, r2
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d108      	bne.n	800ecc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	685a      	ldr	r2, [r3, #4]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	441a      	add	r2, r3
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	68ba      	ldr	r2, [r7, #8]
 800eccc:	441a      	add	r2, r3
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d118      	bne.n	800ed08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	4b15      	ldr	r3, [pc, #84]	; (800ed30 <prvInsertBlockIntoFreeList+0xb0>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d00d      	beq.n	800ecfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	685a      	ldr	r2, [r3, #4]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	441a      	add	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	601a      	str	r2, [r3, #0]
 800ecfc:	e008      	b.n	800ed10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ecfe:	4b0c      	ldr	r3, [pc, #48]	; (800ed30 <prvInsertBlockIntoFreeList+0xb0>)
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	601a      	str	r2, [r3, #0]
 800ed06:	e003      	b.n	800ed10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d002      	beq.n	800ed1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed1e:	bf00      	nop
 800ed20:	3714      	adds	r7, #20
 800ed22:	46bd      	mov	sp, r7
 800ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed28:	4770      	bx	lr
 800ed2a:	bf00      	nop
 800ed2c:	200084f0 	.word	0x200084f0
 800ed30:	200084f8 	.word	0x200084f8

0800ed34 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800ed38:	f005 fd88 	bl	801484c <touchgfx_init>
}
 800ed3c:	bf00      	nop
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800ed44:	f005 fdac 	bl	80148a0 <touchgfx_taskEntry>
}
 800ed48:	bf00      	nop
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
    {
 800ed54:	4a04      	ldr	r2, [pc, #16]	; (800ed68 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	601a      	str	r2, [r3, #0]
    }
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	370c      	adds	r7, #12
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr
 800ed68:	080264d8 	.word	0x080264d8

0800ed6c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
    }
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7ff ffe9 	bl	800ed4c <_ZN8touchgfx12FontProviderD1Ev>
 800ed7a:	2104      	movs	r1, #4
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f015 ff8c 	bl	8024c9a <_ZdlPvj>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4618      	mov	r0, r3
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	460b      	mov	r3, r1
 800ed96:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800ed98:	887b      	ldrh	r3, [r7, #2]
 800ed9a:	2b07      	cmp	r3, #7
 800ed9c:	d83a      	bhi.n	800ee14 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800ed9e:	a201      	add	r2, pc, #4	; (adr r2, 800eda4 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800eda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda4:	0800edc5 	.word	0x0800edc5
 800eda8:	0800edcf 	.word	0x0800edcf
 800edac:	0800edd9 	.word	0x0800edd9
 800edb0:	0800ede3 	.word	0x0800ede3
 800edb4:	0800eded 	.word	0x0800eded
 800edb8:	0800edf7 	.word	0x0800edf7
 800edbc:	0800ee01 	.word	0x0800ee01
 800edc0:	0800ee0b 	.word	0x0800ee0b
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800edc4:	f003 fce2 	bl	801278c <_ZN17TypedTextDatabase8getFontsEv>
 800edc8:	4603      	mov	r3, r0
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	e023      	b.n	800ee16 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800edce:	f003 fcdd 	bl	801278c <_ZN17TypedTextDatabase8getFontsEv>
 800edd2:	4603      	mov	r3, r0
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	e01e      	b.n	800ee16 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800edd8:	f003 fcd8 	bl	801278c <_ZN17TypedTextDatabase8getFontsEv>
 800eddc:	4603      	mov	r3, r0
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	e019      	b.n	800ee16 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800ede2:	f003 fcd3 	bl	801278c <_ZN17TypedTextDatabase8getFontsEv>
 800ede6:	4603      	mov	r3, r0
 800ede8:	689b      	ldr	r3, [r3, #8]
 800edea:	e014      	b.n	800ee16 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800edec:	f003 fcce 	bl	801278c <_ZN17TypedTextDatabase8getFontsEv>
 800edf0:	4603      	mov	r3, r0
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	e00f      	b.n	800ee16 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800edf6:	f003 fcc9 	bl	801278c <_ZN17TypedTextDatabase8getFontsEv>
 800edfa:	4603      	mov	r3, r0
 800edfc:	691b      	ldr	r3, [r3, #16]
 800edfe:	e00a      	b.n	800ee16 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800ee00:	f003 fcc4 	bl	801278c <_ZN17TypedTextDatabase8getFontsEv>
 800ee04:	4603      	mov	r3, r0
 800ee06:	695b      	ldr	r3, [r3, #20]
 800ee08:	e005      	b.n	800ee16 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800ee0a:	f003 fcbf 	bl	801278c <_ZN17TypedTextDatabase8getFontsEv>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	699b      	ldr	r3, [r3, #24]
 800ee12:	e000      	b.n	800ee16 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800ee14:	2300      	movs	r3, #0
    }
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3708      	adds	r7, #8
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop

0800ee20 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	4a05      	ldr	r2, [pc, #20]	; (800ee40 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	601a      	str	r2, [r3, #0]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7ff ff8b 	bl	800ed4c <_ZN8touchgfx12FontProviderD1Ev>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	080264c4 	.word	0x080264c4

0800ee44 <_ZN23ApplicationFontProviderD0Ev>:
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7ff ffe7 	bl	800ee20 <_ZN23ApplicationFontProviderD1Ev>
 800ee52:	2104      	movs	r1, #4
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f015 ff20 	bl	8024c9a <_ZdlPvj>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	4a04      	ldr	r2, [pc, #16]	; (800ee80 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	4618      	mov	r0, r3
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr
 800ee80:	08028764 	.word	0x08028764

0800ee84 <_ZN8touchgfx4FontD0Ev>:
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7ff ffe9 	bl	800ee64 <_ZN8touchgfx4FontD1Ev>
 800ee92:	2110      	movs	r1, #16
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f015 ff00 	bl	8024c9a <_ZdlPvj>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800eea4:	b590      	push	{r4, r7, lr}
 800eea6:	b087      	sub	sp, #28
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	460b      	mov	r3, r1
 800eeae:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	3308      	adds	r3, #8
 800eebe:	681c      	ldr	r4, [r3, #0]
 800eec0:	f107 030f 	add.w	r3, r7, #15
 800eec4:	f107 0210 	add.w	r2, r7, #16
 800eec8:	8879      	ldrh	r1, [r7, #2]
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	47a0      	blx	r4
 800eece:	6178      	str	r0, [r7, #20]
        return glyph;
 800eed0:	697b      	ldr	r3, [r7, #20]
    }
 800eed2:	4618      	mov	r0, r3
 800eed4:	371c      	adds	r7, #28
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd90      	pop	{r4, r7, pc}

0800eeda <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800eeda:	b480      	push	{r7}
 800eedc:	b083      	sub	sp, #12
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	895b      	ldrh	r3, [r3, #10]
    }
 800eee6:	4618      	mov	r0, r3
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr

0800eef2 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800eef2:	b480      	push	{r7}
 800eef4:	b083      	sub	sp, #12
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	899b      	ldrh	r3, [r3, #12]
    }
 800eefe:	4618      	mov	r0, r3
 800ef00:	370c      	adds	r7, #12
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr

0800ef0a <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800ef0a:	b480      	push	{r7}
 800ef0c:	b083      	sub	sp, #12
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	889b      	ldrh	r3, [r3, #4]
    }
 800ef16:	4618      	mov	r0, r3
 800ef18:	370c      	adds	r7, #12
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr

0800ef22 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800ef22:	b480      	push	{r7}
 800ef24:	b083      	sub	sp, #12
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	889a      	ldrh	r2, [r3, #4]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	799b      	ldrb	r3, [r3, #6]
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	4413      	add	r3, r2
 800ef36:	b29b      	uxth	r3, r3
    }
 800ef38:	4618      	mov	r0, r3
 800ef3a:	370c      	adds	r7, #12
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	79db      	ldrb	r3, [r3, #7]
 800ef50:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800ef54:	b2db      	uxtb	r3, r3
    }
 800ef56:	4618      	mov	r0, r3
 800ef58:	370c      	adds	r7, #12
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr

0800ef62 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800ef62:	b480      	push	{r7}
 800ef64:	b083      	sub	sp, #12
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	79db      	ldrb	r3, [r3, #7]
 800ef6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ef72:	b2db      	uxtb	r3, r3
    }
 800ef74:	4618      	mov	r0, r3
 800ef76:	370c      	adds	r7, #12
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b082      	sub	sp, #8
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	4a05      	ldr	r2, [pc, #20]	; (800efa0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	601a      	str	r2, [r3, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7ff ff67 	bl	800ee64 <_ZN8touchgfx4FontD1Ev>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3708      	adds	r7, #8
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	0802881c 	.word	0x0802881c

0800efa4 <_ZN8touchgfx9ConstFontD0Ev>:
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7ff ffe7 	bl	800ef80 <_ZN8touchgfx9ConstFontD1Ev>
 800efb2:	2118      	movs	r1, #24
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f015 fe70 	bl	8024c9a <_ZdlPvj>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	4618      	mov	r0, r3
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	4a05      	ldr	r2, [pc, #20]	; (800efe4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	601a      	str	r2, [r3, #0]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7ff ffd3 	bl	800ef80 <_ZN8touchgfx9ConstFontD1Ev>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4618      	mov	r0, r3
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	0802651c 	.word	0x0802651c

0800efe8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f7ff ffe7 	bl	800efc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800eff6:	2124      	movs	r1, #36	; 0x24
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f015 fe4e 	bl	8024c9a <_ZdlPvj>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4618      	mov	r0, r3
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f000 f82d 	bl	800f070 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f016:	4b08      	ldr	r3, [pc, #32]	; (800f038 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	4b08      	ldr	r3, [pc, #32]	; (800f03c <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f01c:	6819      	ldr	r1, [r3, #0]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	881b      	ldrh	r3, [r3, #0]
 800f022:	005b      	lsls	r3, r3, #1
 800f024:	440b      	add	r3, r1
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	4413      	add	r3, r2
 800f02c:	681b      	ldr	r3, [r3, #0]
    }
 800f02e:	4618      	mov	r0, r3
 800f030:	3708      	adds	r7, #8
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	2000bd60 	.word	0x2000bd60
 800f03c:	2000bd58 	.word	0x2000bd58

0800f040 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 f811 	bl	800f070 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f04e:	4b07      	ldr	r3, [pc, #28]	; (800f06c <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f050:	681a      	ldr	r2, [r3, #0]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	881b      	ldrh	r3, [r3, #0]
 800f056:	005b      	lsls	r3, r3, #1
 800f058:	4413      	add	r3, r2
 800f05a:	785b      	ldrb	r3, [r3, #1]
 800f05c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f060:	b2db      	uxtb	r3, r3
    }
 800f062:	4618      	mov	r0, r3
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	2000bd58 	.word	0x2000bd58

0800f070 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f078:	4b0c      	ldr	r3, [pc, #48]	; (800f0ac <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d105      	bne.n	800f08c <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f080:	4b0b      	ldr	r3, [pc, #44]	; (800f0b0 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f082:	4a0c      	ldr	r2, [pc, #48]	; (800f0b4 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f084:	21de      	movs	r1, #222	; 0xde
 800f086:	480c      	ldr	r0, [pc, #48]	; (800f0b8 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f088:	f015 fe32 	bl	8024cf0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	881a      	ldrh	r2, [r3, #0]
 800f090:	4b0a      	ldr	r3, [pc, #40]	; (800f0bc <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f092:	881b      	ldrh	r3, [r3, #0]
 800f094:	429a      	cmp	r2, r3
 800f096:	d305      	bcc.n	800f0a4 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f098:	4b09      	ldr	r3, [pc, #36]	; (800f0c0 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f09a:	4a06      	ldr	r2, [pc, #24]	; (800f0b4 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f09c:	21df      	movs	r1, #223	; 0xdf
 800f09e:	4806      	ldr	r0, [pc, #24]	; (800f0b8 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f0a0:	f015 fe26 	bl	8024cf0 <__assert_func>
    }
 800f0a4:	bf00      	nop
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	2000bd58 	.word	0x2000bd58
 800f0b0:	08025da8 	.word	0x08025da8
 800f0b4:	080264e4 	.word	0x080264e4
 800f0b8:	08025dec 	.word	0x08025dec
 800f0bc:	2000bd5c 	.word	0x2000bd5c
 800f0c0:	08025e30 	.word	0x08025e30

0800f0c4 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	7b5b      	ldrb	r3, [r3, #13]
 800f0d0:	021b      	lsls	r3, r3, #8
 800f0d2:	b21b      	sxth	r3, r3
 800f0d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f0d8:	b21a      	sxth	r2, r3
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	7adb      	ldrb	r3, [r3, #11]
 800f0de:	b21b      	sxth	r3, r3
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	b21b      	sxth	r3, r3
 800f0e4:	b29b      	uxth	r3, r3
    }
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	370c      	adds	r7, #12
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr

0800f0f2 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f0f2:	b480      	push	{r7}
 800f0f4:	b083      	sub	sp, #12
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6a1b      	ldr	r3, [r3, #32]
    }
 800f0fe:	4618      	mov	r0, r3
 800f100:	370c      	adds	r7, #12
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr
	...

0800f10c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b08c      	sub	sp, #48	; 0x30
 800f110:	af08      	add	r7, sp, #32
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	4611      	mov	r1, r2
 800f118:	461a      	mov	r2, r3
 800f11a:	460b      	mov	r3, r1
 800f11c:	80fb      	strh	r3, [r7, #6]
 800f11e:	4613      	mov	r3, r2
 800f120:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f122:	68f8      	ldr	r0, [r7, #12]
 800f124:	88b9      	ldrh	r1, [r7, #4]
 800f126:	88fa      	ldrh	r2, [r7, #6]
 800f128:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f12a:	9306      	str	r3, [sp, #24]
 800f12c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f12e:	9305      	str	r3, [sp, #20]
 800f130:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f134:	9304      	str	r3, [sp, #16]
 800f136:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f13a:	9303      	str	r3, [sp, #12]
 800f13c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f140:	9302      	str	r3, [sp, #8]
 800f142:	7f3b      	ldrb	r3, [r7, #28]
 800f144:	9301      	str	r3, [sp, #4]
 800f146:	7e3b      	ldrb	r3, [r7, #24]
 800f148:	9300      	str	r3, [sp, #0]
 800f14a:	460b      	mov	r3, r1
 800f14c:	68b9      	ldr	r1, [r7, #8]
 800f14e:	f00a fac3 	bl	80196d8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f152:	4a08      	ldr	r2, [pc, #32]	; (800f174 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	601a      	str	r2, [r3, #0]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f15c:	619a      	str	r2, [r3, #24]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f162:	61da      	str	r2, [r3, #28]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f168:	621a      	str	r2, [r3, #32]
{
}
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	4618      	mov	r0, r3
 800f16e:	3710      	adds	r7, #16
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	0802651c 	.word	0x0802651c

0800f178 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	699b      	ldr	r3, [r3, #24]
 800f186:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	889b      	ldrh	r3, [r3, #4]
 800f18c:	0adb      	lsrs	r3, r3, #11
 800f18e:	b29b      	uxth	r3, r3
 800f190:	009b      	lsls	r3, r3, #2
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	4413      	add	r3, r2
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	4413      	add	r3, r2
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3714      	adds	r7, #20
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr

0800f1aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b086      	sub	sp, #24
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	60f8      	str	r0, [r7, #12]
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	607a      	str	r2, [r7, #4]
 800f1b6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d003      	beq.n	800f1c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	7b1b      	ldrb	r3, [r3, #12]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d101      	bne.n	800f1ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	e023      	b.n	800f212 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7ff ff7a 	bl	800f0c4 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f1d4:	8abb      	ldrh	r3, [r7, #20]
 800f1d6:	82fb      	strh	r3, [r7, #22]
 800f1d8:	8afa      	ldrh	r2, [r7, #22]
 800f1da:	8abb      	ldrh	r3, [r7, #20]
 800f1dc:	6879      	ldr	r1, [r7, #4]
 800f1de:	7b09      	ldrb	r1, [r1, #12]
 800f1e0:	440b      	add	r3, r1
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	da14      	bge.n	800f210 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	69da      	ldr	r2, [r3, #28]
 800f1ea:	8afb      	ldrh	r3, [r7, #22]
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	4413      	add	r3, r2
 800f1f0:	881b      	ldrh	r3, [r3, #0]
 800f1f2:	897a      	ldrh	r2, [r7, #10]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d107      	bne.n	800f208 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	69da      	ldr	r2, [r3, #28]
 800f1fc:	8afb      	ldrh	r3, [r7, #22]
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	4413      	add	r3, r2
 800f202:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f206:	e004      	b.n	800f212 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f208:	8afb      	ldrh	r3, [r7, #22]
 800f20a:	3301      	adds	r3, #1
 800f20c:	82fb      	strh	r3, [r7, #22]
 800f20e:	e7e3      	b.n	800f1d8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800f210:	2300      	movs	r3, #0
}
 800f212:	4618      	mov	r0, r3
 800f214:	3718      	adds	r7, #24
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
	...

0800f21c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f21c:	b580      	push	{r7, lr}
 800f21e:	af00      	add	r7, sp, #0
 800f220:	4801      	ldr	r0, [pc, #4]	; (800f228 <__tcf_0+0xc>)
 800f222:	f7ff fecf 	bl	800efc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f226:	bd80      	pop	{r7, pc}
 800f228:	20008508 	.word	0x20008508

0800f22c <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b08a      	sub	sp, #40	; 0x28
 800f230:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f232:	4b15      	ldr	r3, [pc, #84]	; (800f288 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f003 0301 	and.w	r3, r3, #1
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d11f      	bne.n	800f27e <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 800f23e:	2300      	movs	r3, #0
 800f240:	9309      	str	r3, [sp, #36]	; 0x24
 800f242:	2300      	movs	r3, #0
 800f244:	9308      	str	r3, [sp, #32]
 800f246:	233f      	movs	r3, #63	; 0x3f
 800f248:	9307      	str	r3, [sp, #28]
 800f24a:	4b10      	ldr	r3, [pc, #64]	; (800f28c <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 800f24c:	9306      	str	r3, [sp, #24]
 800f24e:	4b10      	ldr	r3, [pc, #64]	; (800f290 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 800f250:	9305      	str	r3, [sp, #20]
 800f252:	2301      	movs	r3, #1
 800f254:	9304      	str	r3, [sp, #16]
 800f256:	2300      	movs	r3, #0
 800f258:	9303      	str	r3, [sp, #12]
 800f25a:	2301      	movs	r3, #1
 800f25c:	9302      	str	r3, [sp, #8]
 800f25e:	2304      	movs	r3, #4
 800f260:	9301      	str	r3, [sp, #4]
 800f262:	2300      	movs	r3, #0
 800f264:	9300      	str	r3, [sp, #0]
 800f266:	230a      	movs	r3, #10
 800f268:	2204      	movs	r2, #4
 800f26a:	490a      	ldr	r1, [pc, #40]	; (800f294 <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 800f26c:	480a      	ldr	r0, [pc, #40]	; (800f298 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 800f26e:	f7ff ff4d 	bl	800f10c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f272:	4b05      	ldr	r3, [pc, #20]	; (800f288 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f274:	2201      	movs	r2, #1
 800f276:	601a      	str	r2, [r3, #0]
 800f278:	4808      	ldr	r0, [pc, #32]	; (800f29c <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 800f27a:	f015 fd57 	bl	8024d2c <atexit>
    return Asap_Bold_10_4bpp;
 800f27e:	4b06      	ldr	r3, [pc, #24]	; (800f298 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 800f280:	4618      	mov	r0, r3
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	2000852c 	.word	0x2000852c
 800f28c:	0802d7fc 	.word	0x0802d7fc
 800f290:	08026568 	.word	0x08026568
 800f294:	0802d818 	.word	0x0802d818
 800f298:	20008508 	.word	0x20008508
 800f29c:	0800f21d 	.word	0x0800f21d

0800f2a0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 28, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	4801      	ldr	r0, [pc, #4]	; (800f2ac <__tcf_0+0xc>)
 800f2a6:	f7ff fe8d 	bl	800efc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	20008530 	.word	0x20008530

0800f2b0 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b08a      	sub	sp, #40	; 0x28
 800f2b4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 28, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f2b6:	4b15      	ldr	r3, [pc, #84]	; (800f30c <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f003 0301 	and.w	r3, r3, #1
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d11f      	bne.n	800f302 <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	9308      	str	r3, [sp, #32]
 800f2ca:	233f      	movs	r3, #63	; 0x3f
 800f2cc:	9307      	str	r3, [sp, #28]
 800f2ce:	4b10      	ldr	r3, [pc, #64]	; (800f310 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 800f2d0:	9306      	str	r3, [sp, #24]
 800f2d2:	4b10      	ldr	r3, [pc, #64]	; (800f314 <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 800f2d4:	9305      	str	r3, [sp, #20]
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	9304      	str	r3, [sp, #16]
 800f2da:	2300      	movs	r3, #0
 800f2dc:	9303      	str	r3, [sp, #12]
 800f2de:	2301      	movs	r3, #1
 800f2e0:	9302      	str	r3, [sp, #8]
 800f2e2:	2304      	movs	r3, #4
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	230c      	movs	r3, #12
 800f2ec:	221c      	movs	r2, #28
 800f2ee:	490a      	ldr	r1, [pc, #40]	; (800f318 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 800f2f0:	480a      	ldr	r0, [pc, #40]	; (800f31c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 800f2f2:	f7ff ff0b 	bl	800f10c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f2f6:	4b05      	ldr	r3, [pc, #20]	; (800f30c <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	601a      	str	r2, [r3, #0]
 800f2fc:	4808      	ldr	r0, [pc, #32]	; (800f320 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 800f2fe:	f015 fd15 	bl	8024d2c <atexit>
    return Asap_Bold_12_4bpp;
 800f302:	4b06      	ldr	r3, [pc, #24]	; (800f31c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 800f304:	4618      	mov	r0, r3
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	20008554 	.word	0x20008554
 800f310:	0802d800 	.word	0x0802d800
 800f314:	0802656c 	.word	0x0802656c
 800f318:	0802d850 	.word	0x0802d850
 800f31c:	20008530 	.word	0x20008530
 800f320:	0800f2a1 	.word	0x0800f2a1

0800f324 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f324:	b580      	push	{r7, lr}
 800f326:	af00      	add	r7, sp, #0
 800f328:	4801      	ldr	r0, [pc, #4]	; (800f330 <__tcf_0+0xc>)
 800f32a:	f7ff fe4b 	bl	800efc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	20008558 	.word	0x20008558

0800f334 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b08a      	sub	sp, #40	; 0x28
 800f338:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f33a:	4b15      	ldr	r3, [pc, #84]	; (800f390 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f003 0301 	and.w	r3, r3, #1
 800f342:	2b00      	cmp	r3, #0
 800f344:	d11f      	bne.n	800f386 <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 800f346:	2300      	movs	r3, #0
 800f348:	9309      	str	r3, [sp, #36]	; 0x24
 800f34a:	2300      	movs	r3, #0
 800f34c:	9308      	str	r3, [sp, #32]
 800f34e:	2300      	movs	r3, #0
 800f350:	9307      	str	r3, [sp, #28]
 800f352:	4b10      	ldr	r3, [pc, #64]	; (800f394 <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 800f354:	9306      	str	r3, [sp, #24]
 800f356:	4b10      	ldr	r3, [pc, #64]	; (800f398 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 800f358:	9305      	str	r3, [sp, #20]
 800f35a:	2300      	movs	r3, #0
 800f35c:	9304      	str	r3, [sp, #16]
 800f35e:	2300      	movs	r3, #0
 800f360:	9303      	str	r3, [sp, #12]
 800f362:	2301      	movs	r3, #1
 800f364:	9302      	str	r3, [sp, #8]
 800f366:	2304      	movs	r3, #4
 800f368:	9301      	str	r3, [sp, #4]
 800f36a:	2300      	movs	r3, #0
 800f36c:	9300      	str	r3, [sp, #0]
 800f36e:	2312      	movs	r3, #18
 800f370:	220d      	movs	r2, #13
 800f372:	490a      	ldr	r1, [pc, #40]	; (800f39c <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 800f374:	480a      	ldr	r0, [pc, #40]	; (800f3a0 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 800f376:	f7ff fec9 	bl	800f10c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f37a:	4b05      	ldr	r3, [pc, #20]	; (800f390 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f37c:	2201      	movs	r2, #1
 800f37e:	601a      	str	r2, [r3, #0]
 800f380:	4808      	ldr	r0, [pc, #32]	; (800f3a4 <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 800f382:	f015 fcd3 	bl	8024d2c <atexit>
    return Asap_Bold_18_4bpp;
 800f386:	4b06      	ldr	r3, [pc, #24]	; (800f3a0 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 800f388:	4618      	mov	r0, r3
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
 800f38e:	bf00      	nop
 800f390:	2000857c 	.word	0x2000857c
 800f394:	0802d804 	.word	0x0802d804
 800f398:	08026570 	.word	0x08026570
 800f39c:	0802d9d8 	.word	0x0802d9d8
 800f3a0:	20008558 	.word	0x20008558
 800f3a4:	0800f325 	.word	0x0800f325

0800f3a8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	4801      	ldr	r0, [pc, #4]	; (800f3b4 <__tcf_0+0xc>)
 800f3ae:	f7ff fe09 	bl	800efc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	20008580 	.word	0x20008580

0800f3b8 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b08a      	sub	sp, #40	; 0x28
 800f3bc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f3be:	4b15      	ldr	r3, [pc, #84]	; (800f414 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f003 0301 	and.w	r3, r3, #1
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d11f      	bne.n	800f40a <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	9308      	str	r3, [sp, #32]
 800f3d2:	233f      	movs	r3, #63	; 0x3f
 800f3d4:	9307      	str	r3, [sp, #28]
 800f3d6:	4b10      	ldr	r3, [pc, #64]	; (800f418 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 800f3d8:	9306      	str	r3, [sp, #24]
 800f3da:	4b10      	ldr	r3, [pc, #64]	; (800f41c <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 800f3dc:	9305      	str	r3, [sp, #20]
 800f3de:	2301      	movs	r3, #1
 800f3e0:	9304      	str	r3, [sp, #16]
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	9303      	str	r3, [sp, #12]
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	9302      	str	r3, [sp, #8]
 800f3ea:	2304      	movs	r3, #4
 800f3ec:	9301      	str	r3, [sp, #4]
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	9300      	str	r3, [sp, #0]
 800f3f2:	2315      	movs	r3, #21
 800f3f4:	220d      	movs	r2, #13
 800f3f6:	490a      	ldr	r1, [pc, #40]	; (800f420 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 800f3f8:	480a      	ldr	r0, [pc, #40]	; (800f424 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 800f3fa:	f7ff fe87 	bl	800f10c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f3fe:	4b05      	ldr	r3, [pc, #20]	; (800f414 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f400:	2201      	movs	r2, #1
 800f402:	601a      	str	r2, [r3, #0]
 800f404:	4808      	ldr	r0, [pc, #32]	; (800f428 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 800f406:	f015 fc91 	bl	8024d2c <atexit>
    return Asap_Bold_21_4bpp;
 800f40a:	4b06      	ldr	r3, [pc, #24]	; (800f424 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop
 800f414:	200085a4 	.word	0x200085a4
 800f418:	0802d808 	.word	0x0802d808
 800f41c:	08026574 	.word	0x08026574
 800f420:	0802da90 	.word	0x0802da90
 800f424:	20008580 	.word	0x20008580
 800f428:	0800f3a9 	.word	0x0800f3a9

0800f42c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f42c:	b580      	push	{r7, lr}
 800f42e:	af00      	add	r7, sp, #0
 800f430:	4801      	ldr	r0, [pc, #4]	; (800f438 <__tcf_0+0xc>)
 800f432:	f7ff fdc7 	bl	800efc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f436:	bd80      	pop	{r7, pc}
 800f438:	200085a8 	.word	0x200085a8

0800f43c <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b08a      	sub	sp, #40	; 0x28
 800f440:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f442:	4b15      	ldr	r3, [pc, #84]	; (800f498 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	f003 0301 	and.w	r3, r3, #1
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d11f      	bne.n	800f48e <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 800f44e:	2300      	movs	r3, #0
 800f450:	9309      	str	r3, [sp, #36]	; 0x24
 800f452:	2300      	movs	r3, #0
 800f454:	9308      	str	r3, [sp, #32]
 800f456:	233f      	movs	r3, #63	; 0x3f
 800f458:	9307      	str	r3, [sp, #28]
 800f45a:	4b10      	ldr	r3, [pc, #64]	; (800f49c <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 800f45c:	9306      	str	r3, [sp, #24]
 800f45e:	4b10      	ldr	r3, [pc, #64]	; (800f4a0 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 800f460:	9305      	str	r3, [sp, #20]
 800f462:	2301      	movs	r3, #1
 800f464:	9304      	str	r3, [sp, #16]
 800f466:	2300      	movs	r3, #0
 800f468:	9303      	str	r3, [sp, #12]
 800f46a:	2301      	movs	r3, #1
 800f46c:	9302      	str	r3, [sp, #8]
 800f46e:	2304      	movs	r3, #4
 800f470:	9301      	str	r3, [sp, #4]
 800f472:	2300      	movs	r3, #0
 800f474:	9300      	str	r3, [sp, #0]
 800f476:	231e      	movs	r3, #30
 800f478:	220d      	movs	r2, #13
 800f47a:	490a      	ldr	r1, [pc, #40]	; (800f4a4 <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 800f47c:	480a      	ldr	r0, [pc, #40]	; (800f4a8 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 800f47e:	f7ff fe45 	bl	800f10c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f482:	4b05      	ldr	r3, [pc, #20]	; (800f498 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f484:	2201      	movs	r2, #1
 800f486:	601a      	str	r2, [r3, #0]
 800f488:	4808      	ldr	r0, [pc, #32]	; (800f4ac <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 800f48a:	f015 fc4f 	bl	8024d2c <atexit>
    return Asap_Bold_30_4bpp;
 800f48e:	4b06      	ldr	r3, [pc, #24]	; (800f4a8 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 800f490:	4618      	mov	r0, r3
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	200085cc 	.word	0x200085cc
 800f49c:	0802d80c 	.word	0x0802d80c
 800f4a0:	08026578 	.word	0x08026578
 800f4a4:	0802db48 	.word	0x0802db48
 800f4a8:	200085a8 	.word	0x200085a8
 800f4ac:	0800f42d 	.word	0x0800f42d

0800f4b0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	4801      	ldr	r0, [pc, #4]	; (800f4bc <__tcf_0+0xc>)
 800f4b6:	f7ff fd85 	bl	800efc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	200085d0 	.word	0x200085d0

0800f4c0 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b08a      	sub	sp, #40	; 0x28
 800f4c4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f4c6:	4b15      	ldr	r3, [pc, #84]	; (800f51c <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f003 0301 	and.w	r3, r3, #1
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d11f      	bne.n	800f512 <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	9308      	str	r3, [sp, #32]
 800f4da:	233f      	movs	r3, #63	; 0x3f
 800f4dc:	9307      	str	r3, [sp, #28]
 800f4de:	4b10      	ldr	r3, [pc, #64]	; (800f520 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 800f4e0:	9306      	str	r3, [sp, #24]
 800f4e2:	4b10      	ldr	r3, [pc, #64]	; (800f524 <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 800f4e4:	9305      	str	r3, [sp, #20]
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	9304      	str	r3, [sp, #16]
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	9303      	str	r3, [sp, #12]
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	9302      	str	r3, [sp, #8]
 800f4f2:	2304      	movs	r3, #4
 800f4f4:	9301      	str	r3, [sp, #4]
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	9300      	str	r3, [sp, #0]
 800f4fa:	2328      	movs	r3, #40	; 0x28
 800f4fc:	220c      	movs	r2, #12
 800f4fe:	490a      	ldr	r1, [pc, #40]	; (800f528 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 800f500:	480a      	ldr	r0, [pc, #40]	; (800f52c <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 800f502:	f7ff fe03 	bl	800f10c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f506:	4b05      	ldr	r3, [pc, #20]	; (800f51c <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f508:	2201      	movs	r2, #1
 800f50a:	601a      	str	r2, [r3, #0]
 800f50c:	4808      	ldr	r0, [pc, #32]	; (800f530 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 800f50e:	f015 fc0d 	bl	8024d2c <atexit>
    return Asap_Bold_40_4bpp;
 800f512:	4b06      	ldr	r3, [pc, #24]	; (800f52c <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 800f514:	4618      	mov	r0, r3
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	200085f4 	.word	0x200085f4
 800f520:	0802d810 	.word	0x0802d810
 800f524:	0802657c 	.word	0x0802657c
 800f528:	0802dc00 	.word	0x0802dc00
 800f52c:	200085d0 	.word	0x200085d0
 800f530:	0800f4b1 	.word	0x0800f4b1

0800f534 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f534:	b580      	push	{r7, lr}
 800f536:	af00      	add	r7, sp, #0
 800f538:	4801      	ldr	r0, [pc, #4]	; (800f540 <__tcf_0+0xc>)
 800f53a:	f7ff fd43 	bl	800efc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	200085f8 	.word	0x200085f8

0800f544 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b08a      	sub	sp, #40	; 0x28
 800f548:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f54a:	4b15      	ldr	r3, [pc, #84]	; (800f5a0 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f003 0301 	and.w	r3, r3, #1
 800f552:	2b00      	cmp	r3, #0
 800f554:	d11f      	bne.n	800f596 <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 800f556:	2300      	movs	r3, #0
 800f558:	9309      	str	r3, [sp, #36]	; 0x24
 800f55a:	2300      	movs	r3, #0
 800f55c:	9308      	str	r3, [sp, #32]
 800f55e:	233f      	movs	r3, #63	; 0x3f
 800f560:	9307      	str	r3, [sp, #28]
 800f562:	4b10      	ldr	r3, [pc, #64]	; (800f5a4 <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 800f564:	9306      	str	r3, [sp, #24]
 800f566:	4b10      	ldr	r3, [pc, #64]	; (800f5a8 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 800f568:	9305      	str	r3, [sp, #20]
 800f56a:	2300      	movs	r3, #0
 800f56c:	9304      	str	r3, [sp, #16]
 800f56e:	2300      	movs	r3, #0
 800f570:	9303      	str	r3, [sp, #12]
 800f572:	2301      	movs	r3, #1
 800f574:	9302      	str	r3, [sp, #8]
 800f576:	2304      	movs	r3, #4
 800f578:	9301      	str	r3, [sp, #4]
 800f57a:	2300      	movs	r3, #0
 800f57c:	9300      	str	r3, [sp, #0]
 800f57e:	233c      	movs	r3, #60	; 0x3c
 800f580:	220c      	movs	r2, #12
 800f582:	490a      	ldr	r1, [pc, #40]	; (800f5ac <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 800f584:	480a      	ldr	r0, [pc, #40]	; (800f5b0 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 800f586:	f7ff fdc1 	bl	800f10c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f58a:	4b05      	ldr	r3, [pc, #20]	; (800f5a0 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f58c:	2201      	movs	r2, #1
 800f58e:	601a      	str	r2, [r3, #0]
 800f590:	4808      	ldr	r0, [pc, #32]	; (800f5b4 <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 800f592:	f015 fbcb 	bl	8024d2c <atexit>
    return Asap_Bold_60_4bpp;
 800f596:	4b06      	ldr	r3, [pc, #24]	; (800f5b0 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 800f598:	4618      	mov	r0, r3
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
 800f59e:	bf00      	nop
 800f5a0:	2000861c 	.word	0x2000861c
 800f5a4:	0802d814 	.word	0x0802d814
 800f5a8:	08026580 	.word	0x08026580
 800f5ac:	0802dca8 	.word	0x0802dca8
 800f5b0:	200085f8 	.word	0x200085f8
 800f5b4:	0800f535 	.word	0x0800f535

0800f5b8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
    {
    }
 800f5da:	bf00      	nop
 800f5dc:	370c      	adds	r7, #12
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr

0800f5e6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f5e6:	b480      	push	{r7}
 800f5e8:	b083      	sub	sp, #12
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
 800f5ee:	6039      	str	r1, [r7, #0]
    {
    }
 800f5f0:	bf00      	nop
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f5fc:	b480      	push	{r7}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
    {
    }
 800f606:	bf00      	nop
 800f608:	370c      	adds	r7, #12
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr

0800f612 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f612:	b480      	push	{r7}
 800f614:	b083      	sub	sp, #12
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]
 800f61a:	460b      	mov	r3, r1
 800f61c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f61e:	bf00      	nop
 800f620:	370c      	adds	r7, #12
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr

0800f62a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f62a:	b480      	push	{r7}
 800f62c:	b083      	sub	sp, #12
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
    {
    }
 800f632:	bf00      	nop
 800f634:	370c      	adds	r7, #12
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr

0800f63e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800f63e:	b480      	push	{r7}
 800f640:	b083      	sub	sp, #12
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
    {
    }
 800f646:	bf00      	nop
 800f648:	370c      	adds	r7, #12
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
	...

0800f654 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
    {
 800f65c:	4a04      	ldr	r2, [pc, #16]	; (800f670 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	601a      	str	r2, [r3, #0]
    }
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	4618      	mov	r0, r3
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr
 800f670:	08026674 	.word	0x08026674

0800f674 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
    }
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f7ff ffe9 	bl	800f654 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f682:	2104      	movs	r1, #4
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f015 fb08 	bl	8024c9a <_ZdlPvj>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4618      	mov	r0, r3
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800f69c:	4a07      	ldr	r2, [pc, #28]	; (800f6bc <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	601a      	str	r2, [r3, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	605a      	str	r2, [r3, #4]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	721a      	strb	r2, [r3, #8]
    {
    }
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	370c      	adds	r7, #12
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr
 800f6bc:	08026654 	.word	0x08026654

0800f6c0 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
    {
 800f6c8:	4a04      	ldr	r2, [pc, #16]	; (800f6dc <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	601a      	str	r2, [r3, #0]
    }
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr
 800f6dc:	08026654 	.word	0x08026654

0800f6e0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
    }
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7ff ffe9 	bl	800f6c0 <_ZN8touchgfx10TransitionD1Ev>
 800f6ee:	210c      	movs	r1, #12
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f015 fad2 	bl	8024c9a <_ZdlPvj>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800f700:	b480      	push	{r7}
 800f702:	b083      	sub	sp, #12
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	bf00      	nop
 800f70a:	370c      	adds	r7, #12
 800f70c:	46bd      	mov	sp, r7
 800f70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f712:	4770      	bx	lr

0800f714 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	bf00      	nop
 800f71e:	370c      	adds	r7, #12
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr

0800f728 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800f728:	b480      	push	{r7}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	bf00      	nop
 800f732:	370c      	adds	r7, #12
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr

0800f73c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f73c:	b480      	push	{r7}
 800f73e:	b083      	sub	sp, #12
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	683a      	ldr	r2, [r7, #0]
 800f74a:	605a      	str	r2, [r3, #4]
    }
 800f74c:	bf00      	nop
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	460b      	mov	r3, r1
 800f762:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f764:	bf00      	nop
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
    {
 800f778:	4a04      	ldr	r2, [pc, #16]	; (800f78c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	601a      	str	r2, [r3, #0]
    }
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4618      	mov	r0, r3
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr
 800f78c:	0802663c 	.word	0x0802663c

0800f790 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
    }
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f7ff ffe9 	bl	800f770 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f79e:	2104      	movs	r1, #4
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f015 fa7a 	bl	8024c9a <_ZdlPvj>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f7b0:	b480      	push	{r7}
 800f7b2:	af00      	add	r7, sp, #0
    {
        return instance;
 800f7b4:	4b03      	ldr	r3, [pc, #12]	; (800f7c4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
    }
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c0:	4770      	bx	lr
 800f7c2:	bf00      	nop
 800f7c4:	2000bcc8 	.word	0x2000bcc8

0800f7c8 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f7c8:	b480      	push	{r7}
 800f7ca:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f7cc:	4b0b      	ldr	r3, [pc, #44]	; (800f7fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d008      	beq.n	800f7ea <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f7d8:	4b08      	ldr	r3, [pc, #32]	; (800f7fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d003      	beq.n	800f7ea <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f7e2:	4b06      	ldr	r3, [pc, #24]	; (800f7fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7e8:	e002      	b.n	800f7f0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800f7ea:	4b04      	ldr	r3, [pc, #16]	; (800f7fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	689b      	ldr	r3, [r3, #8]
        }
    }
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop
 800f7fc:	2000bcc8 	.word	0x2000bcc8

0800f800 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	4a05      	ldr	r2, [pc, #20]	; (800f820 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	601a      	str	r2, [r3, #0]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4618      	mov	r0, r3
 800f812:	f7ff ff1f 	bl	800f654 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4618      	mov	r0, r3
 800f81a:	3708      	adds	r7, #8
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	0802867c 	.word	0x0802867c

0800f824 <_ZN8touchgfx11ApplicationD0Ev>:
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7ff ffe7 	bl	800f800 <_ZN8touchgfx11ApplicationD1Ev>
 800f832:	f44f 7198 	mov.w	r1, #304	; 0x130
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f015 fa2f 	bl	8024c9a <_ZdlPvj>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	4618      	mov	r0, r3
 800f840:	3708      	adds	r7, #8
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
	...

0800f848 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	4618      	mov	r0, r3
 800f854:	f009 fa7a 	bl	8018d4c <_ZN8touchgfx11ApplicationC1Ev>
 800f858:	4a09      	ldr	r2, [pc, #36]	; (800f880 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	601a      	str	r2, [r3, #0]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2200      	movs	r2, #0
 800f862:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2200      	movs	r2, #0
 800f86a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4a04      	ldr	r2, [pc, #16]	; (800f884 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800f872:	6013      	str	r3, [r2, #0]
    }
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4618      	mov	r0, r3
 800f878:	3708      	adds	r7, #8
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	08026600 	.word	0x08026600
 800f884:	2000bd54 	.word	0x2000bd54

0800f888 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	4a05      	ldr	r2, [pc, #20]	; (800f8a8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	601a      	str	r2, [r3, #0]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4618      	mov	r0, r3
 800f89a:	f7ff ffb1 	bl	800f800 <_ZN8touchgfx11ApplicationD1Ev>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	08026600 	.word	0x08026600

0800f8ac <_ZN8touchgfx14MVPApplicationD0Ev>:
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7ff ffe7 	bl	800f888 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f8ba:	f44f 719c 	mov.w	r1, #312	; 0x138
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f015 f9eb 	bl	8024c9a <_ZdlPvj>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b082      	sub	sp, #8
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 f804 	bl	800f8e4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800f8dc:	bf00      	nop
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00f      	beq.n	800f916 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	330c      	adds	r3, #12
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4610      	mov	r0, r2
 800f90a:	4798      	blx	r3
 800f90c:	4603      	mov	r3, r0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d001      	beq.n	800f916 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f912:	2301      	movs	r3, #1
 800f914:	e000      	b.n	800f918 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800f916:	2300      	movs	r3, #0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d00e      	beq.n	800f93a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	3308      	adds	r3, #8
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4610      	mov	r0, r2
 800f930:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2200      	movs	r2, #0
 800f936:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800f93a:	bf00      	nop
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}

0800f942 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800f942:	b580      	push	{r7, lr}
 800f944:	b084      	sub	sp, #16
 800f946:	af00      	add	r7, sp, #0
 800f948:	60f8      	str	r0, [r7, #12]
 800f94a:	60b9      	str	r1, [r7, #8]
 800f94c:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800f94e:	f009 f9db 	bl	8018d08 <_ZN8touchgfx11Application11getInstanceEv>
 800f952:	4603      	mov	r3, r0
 800f954:	4618      	mov	r0, r3
 800f956:	f009 f9dd 	bl	8018d14 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d008      	beq.n	800f974 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	330c      	adds	r3, #12
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4610      	mov	r0, r2
 800f972:	4798      	blx	r3
    }
    if (*currentTrans)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d007      	beq.n	800f98c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4610      	mov	r0, r2
 800f98a:	4798      	blx	r3
    }
    if (*currentScreen)
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d008      	beq.n	800f9a6 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681a      	ldr	r2, [r3, #0]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	3314      	adds	r3, #20
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4610      	mov	r0, r2
 800f9a4:	4798      	blx	r3
    }
    if (*currentPresenter)
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d008      	beq.n	800f9c0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	3304      	adds	r3, #4
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	4610      	mov	r0, r2
 800f9be:	4798      	blx	r3
    }
    if (*currentScreen)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d007      	beq.n	800f9d8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4610      	mov	r0, r2
 800f9d6:	4798      	blx	r3
    }
    if (*currentPresenter)
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d008      	beq.n	800f9f2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	681a      	ldr	r2, [r3, #0]
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	3308      	adds	r3, #8
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	4610      	mov	r0, r2
 800f9f0:	4798      	blx	r3
    }
}
 800f9f2:	bf00      	nop
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	60f8      	str	r0, [r7, #12]
 800fa02:	60b9      	str	r1, [r7, #8]
 800fa04:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	330c      	adds	r3, #12
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	4798      	blx	r3
    newPresenter->activate();
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	68b8      	ldr	r0, [r7, #8]
 800fa1a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800fa1c:	6879      	ldr	r1, [r7, #4]
 800fa1e:	68f8      	ldr	r0, [r7, #12]
 800fa20:	f00a fa82 	bl	8019f28 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	3310      	adds	r3, #16
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	4798      	blx	r3

    Application::getInstance()->draw();
 800fa30:	f009 f96a 	bl	8018d08 <_ZN8touchgfx11Application11getInstanceEv>
 800fa34:	4602      	mov	r2, r0
 800fa36:	6813      	ldr	r3, [r2, #0]
 800fa38:	3328      	adds	r3, #40	; 0x28
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	4798      	blx	r3
}
 800fa40:	bf00      	nop
 800fa42:	3710      	adds	r7, #16
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	683a      	ldr	r2, [r7, #0]
 800fa56:	601a      	str	r2, [r3, #0]
    }
 800fa58:	bf00      	nop
 800fa5a:	370c      	adds	r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	4a08      	ldr	r2, [pc, #32]	; (800fa90 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	601a      	str	r2, [r3, #0]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f000 fa5f 	bl	800ff3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7ff ff01 	bl	800f888 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	080265ac 	.word	0x080265ac

0800fa94 <_ZN23FrontendApplicationBaseD0Ev>:
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7ff ffe1 	bl	800fa64 <_ZN23FrontendApplicationBaseD1Ev>
 800faa2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f015 f8f7 	bl	8024c9a <_ZdlPvj>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4618      	mov	r0, r3
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
	...

0800fab8 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7ff fde6 	bl	800f694 <_ZN8touchgfx10TransitionC1Ev>
 800fac8:	4a03      	ldr	r2, [pc, #12]	; (800fad8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	601a      	str	r2, [r3, #0]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	4618      	mov	r0, r3
 800fad2:	3708      	adds	r7, #8
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	0802658c 	.word	0x0802658c

0800fadc <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	4a05      	ldr	r2, [pc, #20]	; (800fafc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	601a      	str	r2, [r3, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4618      	mov	r0, r3
 800faee:	f7ff fde7 	bl	800f6c0 <_ZN8touchgfx10TransitionD1Ev>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4618      	mov	r0, r3
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	0802658c 	.word	0x0802658c

0800fb00 <_ZN8touchgfx12NoTransitionD0Ev>:
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7ff ffe7 	bl	800fadc <_ZN8touchgfx12NoTransitionD1Ev>
 800fb0e:	210c      	movs	r1, #12
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f015 f8c2 	bl	8024c9a <_ZdlPvj>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800fb20:	b480      	push	{r7}
 800fb22:	b083      	sub	sp, #12
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	721a      	strb	r2, [r3, #8]
    }
 800fb2e:	bf00      	nop
 800fb30:	370c      	adds	r7, #12
 800fb32:	46bd      	mov	sp, r7
 800fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb38:	4770      	bx	lr

0800fb3a <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800fb3a:	b480      	push	{r7}
 800fb3c:	b083      	sub	sp, #12
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	6078      	str	r0, [r7, #4]
 800fb42:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	683a      	ldr	r2, [r7, #0]
 800fb48:	605a      	str	r2, [r3, #4]
    }
 800fb4a:	bf00      	nop
 800fb4c:	370c      	adds	r7, #12
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr
	...

0800fb58 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	60f8      	str	r0, [r7, #12]
 800fb60:	60b9      	str	r1, [r7, #8]
 800fb62:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7ff fe6e 	bl	800f848 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fb6c:	4a13      	ldr	r2, [pc, #76]	; (800fbbc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	601a      	str	r2, [r3, #0]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f000 f89f 	bl	800fcbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	68ba      	ldr	r2, [r7, #8]
 800fb8a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fb8e:	f7ff fe0f 	bl	800f7b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800fb92:	4602      	mov	r2, r0
 800fb94:	6813      	ldr	r3, [r2, #0]
 800fb96:	3308      	adds	r3, #8
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2100      	movs	r1, #0
 800fb9c:	4610      	mov	r0, r2
 800fb9e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800fba0:	2000      	movs	r0, #0
 800fba2:	f002 fd7b 	bl	801269c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fba6:	f7ff fe0f 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	4618      	mov	r0, r3
 800fbae:	f00e fd82 	bl	801e6b6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3710      	adds	r7, #16
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	080265ac 	.word	0x080265ac

0800fbc0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fbc0:	b480      	push	{r7}
 800fbc2:	b083      	sub	sp, #12
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4618      	mov	r0, r3
 800fbce:	370c      	adds	r7, #12
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr

0800fbd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	683a      	ldr	r2, [r7, #0]
 800fbe6:	4611      	mov	r1, r2
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7ff ffe9 	bl	800fbc0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	685a      	ldr	r2, [r3, #4]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	605a      	str	r2, [r3, #4]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	683a      	ldr	r2, [r7, #0]
 800fbfa:	3308      	adds	r3, #8
 800fbfc:	3208      	adds	r2, #8
 800fbfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc02:	e883 0003 	stmia.w	r3, {r0, r1}
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800fc10:	b590      	push	{r4, r7, lr}
 800fc12:	b089      	sub	sp, #36	; 0x24
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800fc1e:	4b10      	ldr	r3, [pc, #64]	; (800fc60 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800fc20:	61bb      	str	r3, [r7, #24]
 800fc22:	2300      	movs	r3, #0
 800fc24:	61fb      	str	r3, [r7, #28]
 800fc26:	f107 0008 	add.w	r0, r7, #8
 800fc2a:	f107 0318 	add.w	r3, r7, #24
 800fc2e:	cb0c      	ldmia	r3, {r2, r3}
 800fc30:	6879      	ldr	r1, [r7, #4]
 800fc32:	f000 f85f 	bl	800fcf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fc36:	f107 0308 	add.w	r3, r7, #8
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	f7ff ffcb 	bl	800fbd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fc42:	f107 0308 	add.w	r3, r7, #8
 800fc46:	4618      	mov	r0, r3
 800fc48:	f000 f978 	bl	800ff3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800fc58:	bf00      	nop
 800fc5a:	3724      	adds	r7, #36	; 0x24
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd90      	pop	{r4, r7, pc}
 800fc60:	0800fc65 	.word	0x0800fc65

0800fc64 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af02      	add	r7, sp, #8
 800fc6a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800fc78:	461a      	mov	r2, r3
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800fc80:	9300      	str	r3, [sp, #0]
 800fc82:	4b04      	ldr	r3, [pc, #16]	; (800fc94 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800fc84:	4804      	ldr	r0, [pc, #16]	; (800fc98 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800fc86:	f000 f855 	bl	800fd34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fc8a:	bf00      	nop
 800fc8c:	3708      	adds	r7, #8
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop
 800fc94:	2000bd48 	.word	0x2000bd48
 800fc98:	2000bd44 	.word	0x2000bd44

0800fc9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	4a04      	ldr	r2, [pc, #16]	; (800fcb8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	601a      	str	r2, [r3, #0]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	4618      	mov	r0, r3
 800fcae:	370c      	adds	r7, #12
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr
 800fcb8:	0802663c 	.word	0x0802663c

0800fcbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7ff ffe8 	bl	800fc9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fccc:	4a08      	ldr	r2, [pc, #32]	; (800fcf0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	601a      	str	r2, [r3, #0]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	605a      	str	r2, [r3, #4]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	609a      	str	r2, [r3, #8]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2200      	movs	r2, #0
 800fce2:	60da      	str	r2, [r3, #12]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	4618      	mov	r0, r3
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	080265e8 	.word	0x080265e8

0800fcf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	4639      	mov	r1, r7
 800fd00:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7ff ffc8 	bl	800fc9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fd0c:	4a08      	ldr	r2, [pc, #32]	; (800fd30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	68ba      	ldr	r2, [r7, #8]
 800fd16:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	3308      	adds	r3, #8
 800fd1c:	463a      	mov	r2, r7
 800fd1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd22:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3710      	adds	r7, #16
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	080265e8 	.word	0x080265e8

0800fd34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800fd34:	b590      	push	{r4, r7, lr}
 800fd36:	b089      	sub	sp, #36	; 0x24
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	607a      	str	r2, [r7, #4]
 800fd40:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	689a      	ldr	r2, [r3, #8]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	689b      	ldr	r3, [r3, #8]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	3320      	adds	r3, #32
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4610      	mov	r0, r2
 800fd52:	4798      	blx	r3
 800fd54:	4602      	mov	r2, r0
 800fd56:	f242 737b 	movw	r3, #10107	; 0x277b
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d805      	bhi.n	800fd6a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800fd5e:	4b4e      	ldr	r3, [pc, #312]	; (800fe98 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800fd60:	4a4e      	ldr	r2, [pc, #312]	; (800fe9c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fd62:	21c2      	movs	r1, #194	; 0xc2
 800fd64:	484e      	ldr	r0, [pc, #312]	; (800fea0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fd66:	f014 ffc3 	bl	8024cf0 <__assert_func>
 800fd6a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	685a      	ldr	r2, [r3, #4]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	3320      	adds	r3, #32
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4610      	mov	r0, r2
 800fd7c:	4798      	blx	r3
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b0f      	cmp	r3, #15
 800fd82:	d805      	bhi.n	800fd90 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800fd84:	4b47      	ldr	r3, [pc, #284]	; (800fea4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800fd86:	4a45      	ldr	r2, [pc, #276]	; (800fe9c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fd88:	21c3      	movs	r1, #195	; 0xc3
 800fd8a:	4845      	ldr	r0, [pc, #276]	; (800fea0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fd8c:	f014 ffb0 	bl	8024cf0 <__assert_func>
 800fd90:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	68da      	ldr	r2, [r3, #12]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	3320      	adds	r3, #32
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4610      	mov	r0, r2
 800fda2:	4798      	blx	r3
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b0b      	cmp	r3, #11
 800fda8:	d805      	bhi.n	800fdb6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800fdaa:	4b3f      	ldr	r3, [pc, #252]	; (800fea8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800fdac:	4a3b      	ldr	r2, [pc, #236]	; (800fe9c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fdae:	21c4      	movs	r1, #196	; 0xc4
 800fdb0:	483b      	ldr	r0, [pc, #236]	; (800fea0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fdb2:	f014 ff9d 	bl	8024cf0 <__assert_func>
 800fdb6:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800fdb8:	683a      	ldr	r2, [r7, #0]
 800fdba:	68b9      	ldr	r1, [r7, #8]
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	f7ff fdc0 	bl	800f942 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	68db      	ldr	r3, [r3, #12]
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f000 f86f 	bl	800feac <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	200c      	movs	r0, #12
 800fdd4:	f7ff fbf0 	bl	800f5b8 <_ZnwjPv>
 800fdd8:	4604      	mov	r4, r0
 800fdda:	2c00      	cmp	r4, #0
 800fddc:	d004      	beq.n	800fde8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800fdde:	4620      	mov	r0, r4
 800fde0:	f7ff fe6a 	bl	800fab8 <_ZN8touchgfx12NoTransitionC1Ev>
 800fde4:	4623      	mov	r3, r4
 800fde6:	e000      	b.n	800fdea <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800fde8:	4623      	mov	r3, r4
 800fdea:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	689b      	ldr	r3, [r3, #8]
 800fdf0:	2100      	movs	r1, #0
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f000 f86d 	bl	800fed2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	f242 707c 	movw	r0, #10108	; 0x277c
 800fe00:	f7ff fbda 	bl	800f5b8 <_ZnwjPv>
 800fe04:	4604      	mov	r4, r0
 800fe06:	2c00      	cmp	r4, #0
 800fe08:	d004      	beq.n	800fe14 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f002 fece 	bl	8012bac <_ZN8MainViewC1Ev>
 800fe10:	4623      	mov	r3, r4
 800fe12:	e000      	b.n	800fe16 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800fe14:	4623      	mov	r3, r4
 800fe16:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	2100      	movs	r1, #0
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f000 f86a 	bl	800fef8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800fe24:	4603      	mov	r3, r0
 800fe26:	4619      	mov	r1, r3
 800fe28:	2010      	movs	r0, #16
 800fe2a:	f7ff fbc5 	bl	800f5b8 <_ZnwjPv>
 800fe2e:	4604      	mov	r4, r0
 800fe30:	2c00      	cmp	r4, #0
 800fe32:	d005      	beq.n	800fe40 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800fe34:	69b9      	ldr	r1, [r7, #24]
 800fe36:	4620      	mov	r0, r4
 800fe38:	f002 fdfe 	bl	8012a38 <_ZN13MainPresenterC1ER8MainView>
 800fe3c:	4623      	mov	r3, r4
 800fe3e:	e000      	b.n	800fe42 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800fe40:	4623      	mov	r3, r4
 800fe42:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	69fa      	ldr	r2, [r7, #28]
 800fe48:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	697a      	ldr	r2, [r7, #20]
 800fe4e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	69ba      	ldr	r2, [r7, #24]
 800fe54:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d002      	beq.n	800fe62 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	3304      	adds	r3, #4
 800fe60:	e000      	b.n	800fe64 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800fe62:	2300      	movs	r3, #0
 800fe64:	4619      	mov	r1, r3
 800fe66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe68:	f7ff fdee 	bl	800fa48 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	3304      	adds	r3, #4
 800fe70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7ff fe61 	bl	800fb3a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	6979      	ldr	r1, [r7, #20]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f000 f84e 	bl	800ff1e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800fe82:	69fa      	ldr	r2, [r7, #28]
 800fe84:	6979      	ldr	r1, [r7, #20]
 800fe86:	69b8      	ldr	r0, [r7, #24]
 800fe88:	f7ff fdb7 	bl	800f9fa <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800fe8c:	697b      	ldr	r3, [r7, #20]
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3724      	adds	r7, #36	; 0x24
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd90      	pop	{r4, r7, pc}
 800fe96:	bf00      	nop
 800fe98:	08025e84 	.word	0x08025e84
 800fe9c:	08026694 	.word	0x08026694
 800fea0:	08025f14 	.word	0x08025f14
 800fea4:	08025f58 	.word	0x08025f58
 800fea8:	08025ffc 	.word	0x08025ffc

0800feac <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	460b      	mov	r3, r1
 800feb6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	3324      	adds	r3, #36	; 0x24
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	887a      	ldrh	r2, [r7, #2]
 800fec2:	4611      	mov	r1, r2
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	4798      	blx	r3
 800fec8:	4603      	mov	r3, r0
    }
 800feca:	4618      	mov	r0, r3
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800fed2:	b580      	push	{r7, lr}
 800fed4:	b082      	sub	sp, #8
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
 800feda:	460b      	mov	r3, r1
 800fedc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	3324      	adds	r3, #36	; 0x24
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	887a      	ldrh	r2, [r7, #2]
 800fee8:	4611      	mov	r1, r2
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	4798      	blx	r3
 800feee:	4603      	mov	r3, r0
    }
 800fef0:	4618      	mov	r0, r3
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	460b      	mov	r3, r1
 800ff02:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	3324      	adds	r3, #36	; 0x24
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	887a      	ldrh	r2, [r7, #2]
 800ff0e:	4611      	mov	r1, r2
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	4798      	blx	r3
 800ff14:	4603      	mov	r3, r0
    }
 800ff16:	4618      	mov	r0, r3
 800ff18:	3708      	adds	r7, #8
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800ff1e:	b480      	push	{r7}
 800ff20:	b083      	sub	sp, #12
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
 800ff26:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	683a      	ldr	r2, [r7, #0]
 800ff2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ff2e:	bf00      	nop
 800ff30:	370c      	adds	r7, #12
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr
	...

0800ff3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	4a05      	ldr	r2, [pc, #20]	; (800ff5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	601a      	str	r2, [r3, #0]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7ff fc0f 	bl	800f770 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4618      	mov	r0, r3
 800ff56:	3708      	adds	r7, #8
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	080265e8 	.word	0x080265e8

0800ff60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f7ff ffe7 	bl	800ff3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ff6e:	2110      	movs	r1, #16
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f014 fe92 	bl	8024c9a <_ZdlPvj>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3708      	adds	r7, #8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	68d2      	ldr	r2, [r2, #12]
 800ff90:	1052      	asrs	r2, r2, #1
 800ff92:	1899      	adds	r1, r3, r2
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	f003 0301 	and.w	r3, r3, #1
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d102      	bne.n	800ffa6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	689b      	ldr	r3, [r3, #8]
 800ffa4:	e00a      	b.n	800ffbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	687a      	ldr	r2, [r7, #4]
 800ffac:	68d2      	ldr	r2, [r2, #12]
 800ffae:	1052      	asrs	r2, r2, #1
 800ffb0:	4413      	add	r3, r2
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	6892      	ldr	r2, [r2, #8]
 800ffb8:	4413      	add	r3, r2
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4608      	mov	r0, r1
 800ffbe:	4798      	blx	r3
    }
 800ffc0:	bf00      	nop
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800ffc8:	b480      	push	{r7}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d010      	beq.n	800fffa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	689b      	ldr	r3, [r3, #8]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d107      	bne.n	800fff0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	f003 0301 	and.w	r3, r3, #1
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d101      	bne.n	800fff0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ffec:	2301      	movs	r3, #1
 800ffee:	e000      	b.n	800fff2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800fff0:	2300      	movs	r3, #0
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d001      	beq.n	800fffa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800fff6:	2301      	movs	r3, #1
 800fff8:	e000      	b.n	800fffc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800fffa:	2300      	movs	r3, #0
    }
 800fffc:	4618      	mov	r0, r3
 800fffe:	370c      	adds	r7, #12
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	683a      	ldr	r2, [r7, #0]
 8010016:	601a      	str	r2, [r3, #0]
    }
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	4618      	mov	r0, r3
 801001c:	370c      	adds	r7, #12
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr

08010026 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8010026:	b480      	push	{r7}
 8010028:	b083      	sub	sp, #12
 801002a:	af00      	add	r7, sp, #0
 801002c:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2200      	movs	r2, #0
 8010032:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2200      	movs	r2, #0
 8010038:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2200      	movs	r2, #0
 801003e:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2200      	movs	r2, #0
 8010044:	80da      	strh	r2, [r3, #6]
    }
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4618      	mov	r0, r3
 801004a:	370c      	adds	r7, #12
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	4608      	mov	r0, r1
 801005e:	4611      	mov	r1, r2
 8010060:	461a      	mov	r2, r3
 8010062:	4603      	mov	r3, r0
 8010064:	817b      	strh	r3, [r7, #10]
 8010066:	460b      	mov	r3, r1
 8010068:	813b      	strh	r3, [r7, #8]
 801006a:	4613      	mov	r3, r2
 801006c:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	897a      	ldrh	r2, [r7, #10]
 8010072:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	893a      	ldrh	r2, [r7, #8]
 8010078:	805a      	strh	r2, [r3, #2]
        this->width = width;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	88fa      	ldrh	r2, [r7, #6]
 801007e:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	8b3a      	ldrh	r2, [r7, #24]
 8010084:	80da      	strh	r2, [r3, #6]
    }
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	4618      	mov	r0, r3
 801008a:	3714      	adds	r7, #20
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr

08010094 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8010094:	b480      	push	{r7}
 8010096:	b083      	sub	sp, #12
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	460b      	mov	r3, r1
 801009e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	887a      	ldrh	r2, [r7, #2]
 80100a4:	801a      	strh	r2, [r3, #0]
    {
    }
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	4618      	mov	r0, r3
 80100aa:	370c      	adds	r7, #12
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr

080100b4 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af02      	add	r7, sp, #8
 80100ba:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 80100bc:	4a13      	ldr	r2, [pc, #76]	; (801010c <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	601a      	str	r2, [r3, #0]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	1d18      	adds	r0, r3, #4
 80100c6:	2300      	movs	r3, #0
 80100c8:	9300      	str	r3, [sp, #0]
 80100ca:	2300      	movs	r3, #0
 80100cc:	2200      	movs	r2, #0
 80100ce:	2100      	movs	r1, #0
 80100d0:	f7ff ffc0 	bl	8010054 <_ZN8touchgfx4RectC1Essss>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	330c      	adds	r3, #12
 80100d8:	4618      	mov	r0, r3
 80100da:	f7ff ffa4 	bl	8010026 <_ZN8touchgfx4RectC1Ev>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	615a      	str	r2, [r3, #20]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2200      	movs	r2, #0
 80100e8:	619a      	str	r2, [r3, #24]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2200      	movs	r2, #0
 80100ee:	61da      	str	r2, [r3, #28]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2200      	movs	r2, #0
 80100f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2201      	movs	r2, #1
 80100fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4618      	mov	r0, r3
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	080287b4 	.word	0x080287b4

08010110 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	4a04      	ldr	r2, [pc, #16]	; (801012c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	601a      	str	r2, [r3, #0]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	4618      	mov	r0, r3
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr
 801012c:	080287b4 	.word	0x080287b4

08010130 <_ZN8touchgfx8DrawableD0Ev>:
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f7ff ffe9 	bl	8010110 <_ZN8touchgfx8DrawableD1Ev>
 801013e:	2128      	movs	r1, #40	; 0x28
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f014 fdaa 	bl	8024c9a <_ZdlPvj>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	4618      	mov	r0, r3
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	4608      	mov	r0, r1
 801015a:	4611      	mov	r1, r2
 801015c:	461a      	mov	r2, r3
 801015e:	4603      	mov	r3, r0
 8010160:	817b      	strh	r3, [r7, #10]
 8010162:	460b      	mov	r3, r1
 8010164:	813b      	strh	r3, [r7, #8]
 8010166:	4613      	mov	r3, r2
 8010168:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	3334      	adds	r3, #52	; 0x34
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010176:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801017a:	68f8      	ldr	r0, [r7, #12]
 801017c:	4798      	blx	r3
        setWidth(width);
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	3338      	adds	r3, #56	; 0x38
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801018a:	4611      	mov	r1, r2
 801018c:	68f8      	ldr	r0, [r7, #12]
 801018e:	4798      	blx	r3
        setHeight(height);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	333c      	adds	r3, #60	; 0x3c
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801019c:	4611      	mov	r1, r2
 801019e:	68f8      	ldr	r0, [r7, #12]
 80101a0:	4798      	blx	r3
    }
 80101a2:	bf00      	nop
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}

080101aa <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 80101aa:	b480      	push	{r7}
 80101ac:	b083      	sub	sp, #12
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
 80101b2:	460b      	mov	r3, r1
 80101b4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	887a      	ldrh	r2, [r7, #2]
 80101ba:	809a      	strh	r2, [r3, #4]
    }
 80101bc:	bf00      	nop
 80101be:	370c      	adds	r7, #12
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	460b      	mov	r3, r1
 80101d2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	887a      	ldrh	r2, [r7, #2]
 80101d8:	80da      	strh	r2, [r3, #6]
    }
 80101da:	bf00      	nop
 80101dc:	370c      	adds	r7, #12
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr

080101e6 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 80101e6:	b580      	push	{r7, lr}
 80101e8:	b082      	sub	sp, #8
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	6078      	str	r0, [r7, #4]
 80101ee:	460b      	mov	r3, r1
 80101f0:	807b      	strh	r3, [r7, #2]
 80101f2:	4613      	mov	r3, r2
 80101f4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	332c      	adds	r3, #44	; 0x2c
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010202:	4611      	mov	r1, r2
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	4798      	blx	r3
        setY(y);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	3330      	adds	r3, #48	; 0x30
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010214:	4611      	mov	r1, r2
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	4798      	blx	r3
    }
 801021a:	bf00      	nop
 801021c:	3708      	adds	r7, #8
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}

08010222 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8010222:	b480      	push	{r7}
 8010224:	b083      	sub	sp, #12
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
 801022a:	460b      	mov	r3, r1
 801022c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	887a      	ldrh	r2, [r7, #2]
 8010232:	811a      	strh	r2, [r3, #8]
    }
 8010234:	bf00      	nop
 8010236:	370c      	adds	r7, #12
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr

08010240 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 8010240:	b480      	push	{r7}
 8010242:	b083      	sub	sp, #12
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	460b      	mov	r3, r1
 801024a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	887a      	ldrh	r2, [r7, #2]
 8010250:	815a      	strh	r2, [r3, #10]
    }
 8010252:	bf00      	nop
 8010254:	370c      	adds	r7, #12
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr

0801025e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 801025e:	b480      	push	{r7}
 8010260:	b083      	sub	sp, #12
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
 8010266:	bf00      	nop
 8010268:	370c      	adds	r7, #12
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr

08010272 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8010272:	b480      	push	{r7}
 8010274:	b083      	sub	sp, #12
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
 801027a:	6039      	str	r1, [r7, #0]
 801027c:	bf00      	nop
 801027e:	370c      	adds	r7, #12
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr

08010288 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8010288:	b480      	push	{r7}
 801028a:	b083      	sub	sp, #12
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
 8010292:	bf00      	nop
 8010294:	370c      	adds	r7, #12
 8010296:	46bd      	mov	sp, r7
 8010298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029c:	4770      	bx	lr

0801029e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801029e:	b480      	push	{r7}
 80102a0:	b083      	sub	sp, #12
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	6078      	str	r0, [r7, #4]
 80102a6:	6039      	str	r1, [r7, #0]
 80102a8:	bf00      	nop
 80102aa:	370c      	adds	r7, #12
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	bf00      	nop
 80102be:	370c      	adds	r7, #12
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr

080102c8 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 80102c8:	b480      	push	{r7}
 80102ca:	b083      	sub	sp, #12
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	460b      	mov	r3, r1
 80102d2:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	78fa      	ldrb	r2, [r7, #3]
 80102d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80102dc:	bf00      	nop
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80102f6:	4618      	mov	r0, r3
 80102f8:	370c      	adds	r7, #12
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr

08010302 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010302:	b480      	push	{r7}
 8010304:	b083      	sub	sp, #12
 8010306:	af00      	add	r7, sp, #0
 8010308:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010310:	4618      	mov	r0, r3
 8010312:	370c      	adds	r7, #12
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr

0801031c <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	460b      	mov	r3, r1
 8010326:	807b      	strh	r3, [r7, #2]
 8010328:	4613      	mov	r3, r2
 801032a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	3354      	adds	r3, #84	; 0x54
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	8879      	ldrh	r1, [r7, #2]
 8010336:	687a      	ldr	r2, [r7, #4]
 8010338:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801033c:	b292      	uxth	r2, r2
 801033e:	1a8a      	subs	r2, r1, r2
 8010340:	b292      	uxth	r2, r2
 8010342:	b210      	sxth	r0, r2
 8010344:	8839      	ldrh	r1, [r7, #0]
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801034c:	b292      	uxth	r2, r2
 801034e:	1a8a      	subs	r2, r1, r2
 8010350:	b292      	uxth	r2, r2
 8010352:	b212      	sxth	r2, r2
 8010354:	4601      	mov	r1, r0
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	4798      	blx	r3
    }
 801035a:	bf00      	nop
 801035c:	3708      	adds	r7, #8
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}

08010362 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010362:	b480      	push	{r7}
 8010364:	b083      	sub	sp, #12
 8010366:	af00      	add	r7, sp, #0
 8010368:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010370:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010378:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010380:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010382:	bf00      	nop
 8010384:	370c      	adds	r7, #12
 8010386:	46bd      	mov	sp, r7
 8010388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038c:	4770      	bx	lr

0801038e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801038e:	b580      	push	{r7, lr}
 8010390:	b084      	sub	sp, #16
 8010392:	af00      	add	r7, sp, #0
 8010394:	60f8      	str	r0, [r7, #12]
 8010396:	60b9      	str	r1, [r7, #8]
 8010398:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 801039a:	68f8      	ldr	r0, [r7, #12]
 801039c:	f7ff ffe1 	bl	8010362 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681a      	ldr	r2, [r3, #0]
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	601a      	str	r2, [r3, #0]
    }
 80103ae:	bf00      	nop
 80103b0:	3710      	adds	r7, #16
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
	...

080103b8 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	4a05      	ldr	r2, [pc, #20]	; (80103d8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	601a      	str	r2, [r3, #0]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7ff fea1 	bl	8010110 <_ZN8touchgfx8DrawableD1Ev>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	4618      	mov	r0, r3
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	08027580 	.word	0x08027580

080103dc <_ZN8touchgfx9ContainerD0Ev>:
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7ff ffe7 	bl	80103b8 <_ZN8touchgfx9ContainerD1Ev>
 80103ea:	212c      	movs	r1, #44	; 0x2c
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f014 fc54 	bl	8024c9a <_ZdlPvj>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	4618      	mov	r0, r3
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	4a06      	ldr	r2, [pc, #24]	; (8010420 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	601a      	str	r2, [r3, #0]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	3304      	adds	r3, #4
 801040e:	4618      	mov	r0, r3
 8010410:	f7ff ffd2 	bl	80103b8 <_ZN8touchgfx9ContainerD1Ev>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	4618      	mov	r0, r3
 8010418:	3708      	adds	r7, #8
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	080288ac 	.word	0x080288ac

08010424 <_ZN8touchgfx6ScreenD0Ev>:
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f7ff ffe5 	bl	80103fc <_ZN8touchgfx6ScreenD1Ev>
 8010432:	213c      	movs	r1, #60	; 0x3c
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f014 fc30 	bl	8024c9a <_ZdlPvj>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	4618      	mov	r0, r3
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8010444:	b480      	push	{r7}
 8010446:	b083      	sub	sp, #12
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	bf00      	nop
 801044e:	370c      	adds	r7, #12
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr

08010458 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8010458:	b480      	push	{r7}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	bf00      	nop
 8010462:	370c      	adds	r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr

0801046c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	bf00      	nop
 8010476:	370c      	adds	r7, #12
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr

08010480 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010480:	b480      	push	{r7}
 8010482:	b083      	sub	sp, #12
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
    {
    }
 8010488:	bf00      	nop
 801048a:	370c      	adds	r7, #12
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr

08010494 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	460b      	mov	r3, r1
 801049e:	70fb      	strb	r3, [r7, #3]
    {
    }
 80104a0:	bf00      	nop
 80104a2:	370c      	adds	r7, #12
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr

080104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	3304      	adds	r3, #4
 80104ba:	6839      	ldr	r1, [r7, #0]
 80104bc:	4618      	mov	r0, r3
 80104be:	f005 fa87 	bl	80159d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80104c2:	bf00      	nop
 80104c4:	3708      	adds	r7, #8
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
	...

080104cc <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7ff fdec 	bl	80100b4 <_ZN8touchgfx8DrawableC1Ev>
 80104dc:	4a03      	ldr	r2, [pc, #12]	; (80104ec <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	601a      	str	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4618      	mov	r0, r3
 80104e6:	3708      	adds	r7, #8
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	08026880 	.word	0x08026880

080104f0 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	4a05      	ldr	r2, [pc, #20]	; (8010510 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	601a      	str	r2, [r3, #0]
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4618      	mov	r0, r3
 8010502:	f7ff fe05 	bl	8010110 <_ZN8touchgfx8DrawableD1Ev>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4618      	mov	r0, r3
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	08026880 	.word	0x08026880

08010514 <_ZN8touchgfx6WidgetD0Ev>:
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f7ff ffe7 	bl	80104f0 <_ZN8touchgfx6WidgetD1Ev>
 8010522:	2128      	movs	r1, #40	; 0x28
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f014 fbb8 	bl	8024c9a <_ZdlPvj>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	4618      	mov	r0, r3
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010534:	b580      	push	{r7, lr}
 8010536:	b084      	sub	sp, #16
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	607b      	str	r3, [r7, #4]
 801053e:	460b      	mov	r3, r1
 8010540:	817b      	strh	r3, [r7, #10]
 8010542:	4613      	mov	r3, r2
 8010544:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	4618      	mov	r0, r3
 801054a:	f7ff fecd 	bl	80102e8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 801054e:	4603      	mov	r3, r0
 8010550:	2b00      	cmp	r3, #0
 8010552:	d008      	beq.n	8010566 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	4618      	mov	r0, r3
 8010558:	f7ff fed3 	bl	8010302 <_ZNK8touchgfx8Drawable11isTouchableEv>
 801055c:	4603      	mov	r3, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	d001      	beq.n	8010566 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010562:	2301      	movs	r3, #1
 8010564:	e000      	b.n	8010568 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010566:	2300      	movs	r3, #0
 8010568:	2b00      	cmp	r3, #0
 801056a:	d002      	beq.n	8010572 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	601a      	str	r2, [r3, #0]
        }
    }
 8010572:	bf00      	nop
 8010574:	3710      	adds	r7, #16
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
	...

0801057c <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	4618      	mov	r0, r3
 8010588:	f7ff ffa0 	bl	80104cc <_ZN8touchgfx6WidgetC1Ev>
 801058c:	4a0a      	ldr	r2, [pc, #40]	; (80105b8 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	601a      	str	r2, [r3, #0]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	22ff      	movs	r2, #255	; 0xff
 8010596:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	3328      	adds	r3, #40	; 0x28
 801059e:	2100      	movs	r1, #0
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7ff fd31 	bl	8010008 <_ZN8touchgfx9colortypeC1Em>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2200      	movs	r2, #0
 80105aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4618      	mov	r0, r3
 80105b2:	3708      	adds	r7, #8
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	080282b8 	.word	0x080282b8

080105bc <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	4a05      	ldr	r2, [pc, #20]	; (80105dc <_ZN8touchgfx3BoxD1Ev+0x20>)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	601a      	str	r2, [r3, #0]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7ff ff8f 	bl	80104f0 <_ZN8touchgfx6WidgetD1Ev>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	4618      	mov	r0, r3
 80105d6:	3708      	adds	r7, #8
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	080282b8 	.word	0x080282b8

080105e0 <_ZN8touchgfx3BoxD0Ev>:
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f7ff ffe7 	bl	80105bc <_ZN8touchgfx3BoxD1Ev>
 80105ee:	2130      	movs	r1, #48	; 0x30
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f014 fb52 	bl	8024c9a <_ZdlPvj>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	4618      	mov	r0, r3
 80105fa:	3708      	adds	r7, #8
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	683a      	ldr	r2, [r7, #0]
 801060e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010610:	bf00      	nop
 8010612:	370c      	adds	r7, #12
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr

0801061c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	460b      	mov	r3, r1
 8010626:	807b      	strh	r3, [r7, #2]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	887a      	ldrh	r2, [r7, #2]
 801062c:	801a      	strh	r2, [r3, #0]
    }
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	4618      	mov	r0, r3
 8010632:	370c      	adds	r7, #12
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
        assertValid();
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f7fe fd13 	bl	800f070 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 801064a:	4b06      	ldr	r3, [pc, #24]	; (8010664 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	881b      	ldrh	r3, [r3, #0]
 8010652:	4619      	mov	r1, r3
 8010654:	4610      	mov	r0, r2
 8010656:	f002 f877 	bl	8012748 <_ZNK8touchgfx5Texts7getTextEt>
 801065a:	4603      	mov	r3, r0
    }
 801065c:	4618      	mov	r0, r3
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}
 8010664:	2000bd64 	.word	0x2000bd64

08010668 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	4618      	mov	r0, r3
 8010674:	f7ff ff2a 	bl	80104cc <_ZN8touchgfx6WidgetC1Ev>
 8010678:	4a13      	ldr	r2, [pc, #76]	; (80106c8 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	601a      	str	r2, [r3, #0]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	3326      	adds	r3, #38	; 0x26
 8010682:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010686:	4618      	mov	r0, r3
 8010688:	f7ff ffc8 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	3328      	adds	r3, #40	; 0x28
 8010690:	2100      	movs	r1, #0
 8010692:	4618      	mov	r0, r3
 8010694:	f7ff fcb8 	bl	8010008 <_ZN8touchgfx9colortypeC1Em>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2200      	movs	r2, #0
 801069c:	859a      	strh	r2, [r3, #44]	; 0x2c
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	22ff      	movs	r2, #255	; 0xff
 80106a2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2200      	movs	r2, #0
 80106b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2200      	movs	r2, #0
 80106ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4618      	mov	r0, r3
 80106c2:	3708      	adds	r7, #8
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	0802823c 	.word	0x0802823c

080106cc <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af02      	add	r7, sp, #8
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 80106d6:	2300      	movs	r3, #0
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	2300      	movs	r3, #0
 80106dc:	2200      	movs	r2, #0
 80106de:	2100      	movs	r1, #0
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f7ff fcb7 	bl	8010054 <_ZN8touchgfx4RectC1Essss>
    }
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	3708      	adds	r7, #8
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 80106ee:	b480      	push	{r7}
 80106f0:	b083      	sub	sp, #12
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
 80106f6:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	683a      	ldr	r2, [r7, #0]
 80106fc:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80106fe:	bf00      	nop
 8010700:	370c      	adds	r7, #12
 8010702:	46bd      	mov	sp, r7
 8010704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010708:	4770      	bx	lr

0801070a <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 801070a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801070c:	b085      	sub	sp, #20
 801070e:	af00      	add	r7, sp, #0
 8010710:	6078      	str	r0, [r7, #4]
 8010712:	460b      	mov	r3, r1
 8010714:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8010716:	687e      	ldr	r6, [r7, #4]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	3330      	adds	r3, #48	; 0x30
 801071e:	681c      	ldr	r4, [r3, #0]
 8010720:	887d      	ldrh	r5, [r7, #2]
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f000 f845 	bl	80107b2 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8010728:	4603      	mov	r3, r0
 801072a:	81bb      	strh	r3, [r7, #12]
 801072c:	f107 030c 	add.w	r3, r7, #12
 8010730:	4618      	mov	r0, r3
 8010732:	f7fe fc69 	bl	800f008 <_ZNK8touchgfx9TypedText7getFontEv>
 8010736:	4602      	mov	r2, r0
 8010738:	6813      	ldr	r3, [r2, #0]
 801073a:	332c      	adds	r3, #44	; 0x2c
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	4610      	mov	r0, r2
 8010740:	4798      	blx	r3
 8010742:	4603      	mov	r3, r0
 8010744:	1aeb      	subs	r3, r5, r3
 8010746:	b29b      	uxth	r3, r3
 8010748:	b21b      	sxth	r3, r3
 801074a:	4619      	mov	r1, r3
 801074c:	4630      	mov	r0, r6
 801074e:	47a0      	blx	r4
    }
 8010750:	bf00      	nop
 8010752:	3714      	adds	r7, #20
 8010754:	46bd      	mov	sp, r7
 8010756:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010758 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	460b      	mov	r3, r1
 8010762:	807b      	strh	r3, [r7, #2]
 8010764:	4613      	mov	r3, r2
 8010766:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	332c      	adds	r3, #44	; 0x2c
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010776:	4610      	mov	r0, r2
 8010778:	4798      	blx	r3
        setBaselineY(baselineY);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	3360      	adds	r3, #96	; 0x60
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010786:	4611      	mov	r1, r2
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	4798      	blx	r3
    }
 801078c:	bf00      	nop
 801078e:	3708      	adds	r7, #8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	460b      	mov	r3, r1
 801079e:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	887a      	ldrh	r2, [r7, #2]
 80107a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 80107a6:	bf00      	nop
 80107a8:	370c      	adds	r7, #12
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr

080107b2 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 80107b2:	b480      	push	{r7}
 80107b4:	b083      	sub	sp, #12
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 80107be:	4618      	mov	r0, r3
 80107c0:	370c      	adds	r7, #12
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr
	...

080107cc <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	4a05      	ldr	r2, [pc, #20]	; (80107ec <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	601a      	str	r2, [r3, #0]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	4618      	mov	r0, r3
 80107de:	f7ff fe87 	bl	80104f0 <_ZN8touchgfx6WidgetD1Ev>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	4618      	mov	r0, r3
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	0802823c 	.word	0x0802823c

080107f0 <_ZN8touchgfx8TextAreaD0Ev>:
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f7ff ffe7 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 80107fe:	2134      	movs	r1, #52	; 0x34
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f014 fa4a 	bl	8024c9a <_ZdlPvj>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4618      	mov	r0, r3
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
        : TextArea()
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	4618      	mov	r0, r3
 801081c:	f7ff ff24 	bl	8010668 <_ZN8touchgfx8TextAreaC1Ev>
 8010820:	4a03      	ldr	r2, [pc, #12]	; (8010830 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	601a      	str	r2, [r3, #0]
    {
    }
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	4618      	mov	r0, r3
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	08026804 	.word	0x08026804

08010834 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	4a05      	ldr	r2, [pc, #20]	; (8010854 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	601a      	str	r2, [r3, #0]
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	4618      	mov	r0, r3
 8010846:	f7ff ffc1 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	4618      	mov	r0, r3
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	08026804 	.word	0x08026804

08010858 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f7ff ffe7 	bl	8010834 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010866:	2134      	movs	r1, #52	; 0x34
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f014 fa16 	bl	8024c9a <_ZdlPvj>
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	4618      	mov	r0, r3
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	4618      	mov	r0, r3
 8010884:	f7ff ffc4 	bl	8010810 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8010888:	4a05      	ldr	r2, [pc, #20]	; (80108a0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	601a      	str	r2, [r3, #0]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2200      	movs	r2, #0
 8010892:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	4618      	mov	r0, r3
 8010898:	3708      	adds	r7, #8
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
 801089e:	bf00      	nop
 80108a0:	080283a4 	.word	0x080283a4

080108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	683a      	ldr	r2, [r7, #0]
 80108b2:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80108b4:	bf00      	nop
 80108b6:	370c      	adds	r7, #12
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr

080108c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7ff fdfd 	bl	80104cc <_ZN8touchgfx6WidgetC1Ev>
 80108d2:	4a0b      	ldr	r2, [pc, #44]	; (8010900 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	601a      	str	r2, [r3, #0]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	3326      	adds	r3, #38	; 0x26
 80108dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7ff fbd7 	bl	8010094 <_ZN8touchgfx6BitmapC1Et>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	22ff      	movs	r2, #255	; 0xff
 80108ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 80108ee:	6839      	ldr	r1, [r7, #0]
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f007 f95b 	bl	8017bac <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	4618      	mov	r0, r3
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	08028420 	.word	0x08028420

08010904 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8010904:	b480      	push	{r7}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	683a      	ldr	r2, [r7, #0]
 8010912:	601a      	str	r2, [r3, #0]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	4618      	mov	r0, r3
 8010918:	370c      	adds	r7, #12
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr

08010922 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8010922:	b480      	push	{r7}
 8010924:	b083      	sub	sp, #12
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
        {
            return v;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
        }
 801092e:	4618      	mov	r0, r3
 8010930:	370c      	adds	r7, #12
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr

0801093a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 801093a:	b590      	push	{r4, r7, lr}
 801093c:	b083      	sub	sp, #12
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
 8010942:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	3340      	adds	r3, #64	; 0x40
 8010948:	4618      	mov	r0, r3
 801094a:	f7ff ffea 	bl	8010922 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801094e:	4604      	mov	r4, r0
 8010950:	463b      	mov	r3, r7
 8010952:	4618      	mov	r0, r3
 8010954:	f7ff ffe5 	bl	8010922 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010958:	4603      	mov	r3, r0
 801095a:	429c      	cmp	r4, r3
 801095c:	bf0c      	ite	eq
 801095e:	2301      	moveq	r3, #1
 8010960:	2300      	movne	r3, #0
 8010962:	b2db      	uxtb	r3, r3
 8010964:	2b00      	cmp	r3, #0
 8010966:	d106      	bne.n	8010976 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	683a      	ldr	r2, [r7, #0]
 801096c:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f006 fb96 	bl	80170a0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8010974:	e000      	b.n	8010978 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8010976:	bf00      	nop
    }
 8010978:	370c      	adds	r7, #12
 801097a:	46bd      	mov	sp, r7
 801097c:	bd90      	pop	{r4, r7, pc}
	...

08010980 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	4a05      	ldr	r2, [pc, #20]	; (80109a0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	601a      	str	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	4618      	mov	r0, r3
 8010992:	f006 f999 	bl	8016cc8 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	4618      	mov	r0, r3
 801099a:	3708      	adds	r7, #8
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	08027d90 	.word	0x08027d90

080109a4 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f7ff ffe7 	bl	8010980 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80109b2:	2114      	movs	r1, #20
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f014 f970 	bl	8024c9a <_ZdlPvj>
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	4618      	mov	r0, r3
 80109be:	3708      	adds	r7, #8
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}

080109c4 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	4a05      	ldr	r2, [pc, #20]	; (80109e4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	601a      	str	r2, [r3, #0]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7ff fd8b 	bl	80104f0 <_ZN8touchgfx6WidgetD1Ev>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4618      	mov	r0, r3
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	08028420 	.word	0x08028420

080109e8 <_ZN8touchgfx5ImageD0Ev>:
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f7ff ffe7 	bl	80109c4 <_ZN8touchgfx5ImageD1Ev>
 80109f6:	212c      	movs	r1, #44	; 0x2c
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f014 f94e 	bl	8024c9a <_ZdlPvj>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	4618      	mov	r0, r3
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	4a05      	ldr	r2, [pc, #20]	; (8010a28 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	601a      	str	r2, [r3, #0]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7ff fcef 	bl	80103fc <_ZN8touchgfx6ScreenD1Ev>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	3708      	adds	r7, #8
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	080267d0 	.word	0x080267d0

08010a2c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f7ff ffe7 	bl	8010a08 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010a3a:	2140      	movs	r1, #64	; 0x40
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f014 f92c 	bl	8024c9a <_ZdlPvj>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	4618      	mov	r0, r3
 8010a46:	3708      	adds	r7, #8
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	4a81      	ldr	r2, [pc, #516]	; (8010c5c <_ZN12MainViewBaseD1Ev+0x210>)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	601a      	str	r2, [r3, #0]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8010a60:	4618      	mov	r0, r3
 8010a62:	f001 fd87 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f001 fd81 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f001 fd7b 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7ff fea1 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8010a90:	4618      	mov	r0, r3
 8010a92:	f001 fd6f 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f004 fc9b 	bl	80153d8 <_ZN8touchgfx13ImageProgressD1Ev>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f001 fd63 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f001 fda1 	bl	80125fc <_ZN8touchgfx13PainterRGB888D1Ev>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f001 fd79 	bl	80125b8 <_ZN8touchgfx4LineD1Ev>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8010acc:	4618      	mov	r0, r3
 8010ace:	f001 fd95 	bl	80125fc <_ZN8touchgfx13PainterRGB888D1Ev>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f001 fd6d 	bl	80125b8 <_ZN8touchgfx4LineD1Ev>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f004 fb77 	bl	80151d8 <_ZN8touchgfx11BoxProgressD1Ev>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7ff fe6b 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8010afc:	4618      	mov	r0, r3
 8010afe:	f001 fd39 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f001 fd33 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7ff fe59 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7ff fe53 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f001 fd21 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f001 fd1b 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7ff fe41 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7ff fe3b 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f001 fd4d 	bl	80125fc <_ZN8touchgfx13PainterRGB888D1Ev>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f001 fd25 	bl	80125b8 <_ZN8touchgfx4LineD1Ev>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8010b74:	4618      	mov	r0, r3
 8010b76:	f001 fcfd 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010b80:	4618      	mov	r0, r3
 8010b82:	f001 fcf7 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f001 fcf1 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f001 fceb 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f001 fce5 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f001 fcdf 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f001 fcd9 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f001 fcd3 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f001 fccd 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010be0:	4618      	mov	r0, r3
 8010be2:	f001 fcc7 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7ff fee9 	bl	80109c4 <_ZN8touchgfx5ImageD1Ev>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f001 fcbb 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010c04:	4618      	mov	r0, r3
 8010c06:	f001 fcb5 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7ff fddb 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7ff fdd5 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	33d8      	adds	r3, #216	; 0xd8
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7ff fdd0 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	33a4      	adds	r3, #164	; 0xa4
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7ff fdcb 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	3370      	adds	r3, #112	; 0x70
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7ff fdc6 	bl	80107cc <_ZN8touchgfx8TextAreaD1Ev>
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	3340      	adds	r3, #64	; 0x40
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7ff fcb9 	bl	80105bc <_ZN8touchgfx3BoxD1Ev>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7ff fedb 	bl	8010a08 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4618      	mov	r0, r3
 8010c56:	3708      	adds	r7, #8
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	0802679c 	.word	0x0802679c

08010c60 <_ZN12MainViewBaseD0Ev>:
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f7ff feef 	bl	8010a4c <_ZN12MainViewBaseD1Ev>
 8010c6e:	f242 717c 	movw	r1, #10108	; 0x277c
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f014 f811 	bl	8024c9a <_ZdlPvj>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3708      	adds	r7, #8
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
	...

08010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8010c84:	b590      	push	{r4, r7, lr}
 8010c86:	b083      	sub	sp, #12
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	71fb      	strb	r3, [r7, #7]
 8010c8e:	460b      	mov	r3, r1
 8010c90:	71bb      	strb	r3, [r7, #6]
 8010c92:	4613      	mov	r3, r2
 8010c94:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8010c96:	f7fe fd8b 	bl	800f7b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d105      	bne.n	8010cac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010ca0:	4b0a      	ldr	r3, [pc, #40]	; (8010ccc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8010ca2:	4a0b      	ldr	r2, [pc, #44]	; (8010cd0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010ca4:	2138      	movs	r1, #56	; 0x38
 8010ca6:	480b      	ldr	r0, [pc, #44]	; (8010cd4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010ca8:	f014 f822 	bl	8024cf0 <__assert_func>
 8010cac:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8010cae:	f7fe fd8b 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8010cb2:	6803      	ldr	r3, [r0, #0]
 8010cb4:	332c      	adds	r3, #44	; 0x2c
 8010cb6:	681c      	ldr	r4, [r3, #0]
 8010cb8:	797b      	ldrb	r3, [r7, #5]
 8010cba:	79ba      	ldrb	r2, [r7, #6]
 8010cbc:	79f9      	ldrb	r1, [r7, #7]
 8010cbe:	47a0      	blx	r4
 8010cc0:	4603      	mov	r3, r0
    }
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	370c      	adds	r7, #12
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd90      	pop	{r4, r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	0802617c 	.word	0x0802617c
 8010cd0:	080268e0 	.word	0x080268e0
 8010cd4:	080261c0 	.word	0x080261c0

08010cd8 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 8010cd8:	b590      	push	{r4, r7, lr}
 8010cda:	b0bf      	sub	sp, #252	; 0xfc
 8010cdc:	af02      	add	r7, sp, #8
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f001 fbcc 	bl	8012480 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010ce8:	4adc      	ldr	r2, [pc, #880]	; (801105c <_ZN12MainViewBaseC1Ev+0x384>)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	601a      	str	r2, [r3, #0]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	3340      	adds	r3, #64	; 0x40
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7ff fc42 	bl	801057c <_ZN8touchgfx3BoxC1Ev>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	3370      	adds	r3, #112	; 0x70
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7ff fcb3 	bl	8010668 <_ZN8touchgfx8TextAreaC1Ev>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	33a4      	adds	r3, #164	; 0xa4
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7ff fcae 	bl	8010668 <_ZN8touchgfx8TextAreaC1Ev>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	33d8      	adds	r3, #216	; 0xd8
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7ff fca9 	bl	8010668 <_ZN8touchgfx8TextAreaC1Ev>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7ff fca3 	bl	8010668 <_ZN8touchgfx8TextAreaC1Ev>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7ff fc9d 	bl	8010668 <_ZN8touchgfx8TextAreaC1Ev>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7ff fd9f 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7ff fd99 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8010d4c:	f107 0308 	add.w	r3, r7, #8
 8010d50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7ff f99d 	bl	8010094 <_ZN8touchgfx6BitmapC1Et>
 8010d5a:	f107 0308 	add.w	r3, r7, #8
 8010d5e:	4619      	mov	r1, r3
 8010d60:	4620      	mov	r0, r4
 8010d62:	f7ff fdad 	bl	80108c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7ff fd83 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7ff fd7d 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7ff fd77 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7ff fd71 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7ff fd6b 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ff fd65 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff fd5f 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7ff fd59 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7ff fd53 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7ff fd4d 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010de4:	4618      	mov	r0, r3
 8010de6:	f006 f93b 	bl	8017060 <_ZN8touchgfx4LineC1Ev>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f203 44b4 	addw	r4, r3, #1204	; 0x4b4
 8010df0:	f107 030c 	add.w	r3, r7, #12
 8010df4:	2100      	movs	r1, #0
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7ff f906 	bl	8010008 <_ZN8touchgfx9colortypeC1Em>
 8010dfc:	22ff      	movs	r2, #255	; 0xff
 8010dfe:	68f9      	ldr	r1, [r7, #12]
 8010e00:	4620      	mov	r0, r4
 8010e02:	f005 ff1f 	bl	8016c44 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7ff fc2b 	bl	8010668 <_ZN8touchgfx8TextAreaC1Ev>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7ff fc25 	bl	8010668 <_ZN8touchgfx8TextAreaC1Ev>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7ff fd27 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7ff fd21 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7ff fc13 	bl	8010668 <_ZN8touchgfx8TextAreaC1Ev>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7ff fc0d 	bl	8010668 <_ZN8touchgfx8TextAreaC1Ev>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7ff fd0f 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7ff fd09 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7ff fbfb 	bl	8010668 <_ZN8touchgfx8TextAreaC1Ev>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f004 f9c1 	bl	8015200 <_ZN8touchgfx11BoxProgressC1Ev>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8010e84:	4618      	mov	r0, r3
 8010e86:	f006 f8eb 	bl	8017060 <_ZN8touchgfx4LineC1Ev>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 8010e90:	f107 0310 	add.w	r3, r7, #16
 8010e94:	2100      	movs	r1, #0
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7ff f8b6 	bl	8010008 <_ZN8touchgfx9colortypeC1Em>
 8010e9c:	22ff      	movs	r2, #255	; 0xff
 8010e9e:	6939      	ldr	r1, [r7, #16]
 8010ea0:	4620      	mov	r0, r4
 8010ea2:	f005 fecf 	bl	8016c44 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8010eac:	4618      	mov	r0, r3
 8010eae:	f006 f8d7 	bl	8017060 <_ZN8touchgfx4LineC1Ev>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f503 6407 	add.w	r4, r3, #2160	; 0x870
 8010eb8:	f107 0314 	add.w	r3, r7, #20
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7ff f8a2 	bl	8010008 <_ZN8touchgfx9colortypeC1Em>
 8010ec4:	22ff      	movs	r2, #255	; 0xff
 8010ec6:	6979      	ldr	r1, [r7, #20]
 8010ec8:	4620      	mov	r0, r4
 8010eca:	f005 febb 	bl	8016c44 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7ff fccf 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f004 faa3 	bl	801542c <_ZN8touchgfx13ImageProgressC1Ev>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7ff fcc3 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7ff fbb5 	bl	8010668 <_ZN8touchgfx8TextAreaC1Ev>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7ff fcb7 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7ff fcb1 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7ff fcab 	bl	8010878 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f603 335a 	addw	r3, r3, #2906	; 0xb5a
 8010f28:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f006 feab 	bl	8017c88 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010f38:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010f3c:	9300      	str	r3, [sp, #0]
 8010f3e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8010f42:	2200      	movs	r2, #0
 8010f44:	2100      	movs	r1, #0
 8010f46:	f7ff f903 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010f50:	2200      	movs	r2, #0
 8010f52:	2100      	movs	r1, #0
 8010f54:	2000      	movs	r0, #0
 8010f56:	f7ff fe95 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7ff fb4e 	bl	8010600 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    RpmDescriptor.setXY(228, 138);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	3370      	adds	r3, #112	; 0x70
 8010f68:	228a      	movs	r2, #138	; 0x8a
 8010f6a:	21e4      	movs	r1, #228	; 0xe4
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7ff f93a 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    RpmDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010f78:	2200      	movs	r2, #0
 8010f7a:	21dc      	movs	r1, #220	; 0xdc
 8010f7c:	20ff      	movs	r0, #255	; 0xff
 8010f7e:	f7ff fe81 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f82:	4603      	mov	r3, r0
 8010f84:	4619      	mov	r1, r3
 8010f86:	4620      	mov	r0, r4
 8010f88:	f7ff fbb1 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RpmDescriptor.setLinespacing(0);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	3370      	adds	r3, #112	; 0x70
 8010f90:	2100      	movs	r1, #0
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7ff fbfe 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    RpmDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010f9e:	f107 0318 	add.w	r3, r7, #24
 8010fa2:	210e      	movs	r1, #14
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7ff fb39 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8010faa:	8b39      	ldrh	r1, [r7, #24]
 8010fac:	4620      	mov	r0, r4
 8010fae:	f006 fb5d 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KpaDescriptor.setXY(428, 126);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	33a4      	adds	r3, #164	; 0xa4
 8010fb6:	227e      	movs	r2, #126	; 0x7e
 8010fb8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7ff f912 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8010fc8:	2200      	movs	r2, #0
 8010fca:	21dc      	movs	r1, #220	; 0xdc
 8010fcc:	20ff      	movs	r0, #255	; 0xff
 8010fce:	f7ff fe59 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	f7ff fb89 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	33a4      	adds	r3, #164	; 0xa4
 8010fe0:	2100      	movs	r1, #0
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7ff fbd6 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8010fee:	f107 031c 	add.w	r3, r7, #28
 8010ff2:	211d      	movs	r1, #29
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7ff fb11 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8010ffa:	8bb9      	ldrh	r1, [r7, #28]
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f006 fb35 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(346, 126);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	33d8      	adds	r3, #216	; 0xd8
 8011006:	227e      	movs	r2, #126	; 0x7e
 8011008:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 801100c:	4618      	mov	r0, r3
 801100e:	f7ff f8ea 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8011018:	2200      	movs	r2, #0
 801101a:	21dc      	movs	r1, #220	; 0xdc
 801101c:	20ff      	movs	r0, #255	; 0xff
 801101e:	f7ff fe31 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011022:	4603      	mov	r3, r0
 8011024:	4619      	mov	r1, r3
 8011026:	4620      	mov	r0, r4
 8011028:	f7ff fb61 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	33d8      	adds	r3, #216	; 0xd8
 8011030:	2100      	movs	r1, #0
 8011032:	4618      	mov	r0, r3
 8011034:	f7ff fbae 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801103e:	f107 0320 	add.w	r3, r7, #32
 8011042:	211c      	movs	r1, #28
 8011044:	4618      	mov	r0, r3
 8011046:	f7ff fae9 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 801104a:	8c39      	ldrh	r1, [r7, #32]
 801104c:	4620      	mov	r0, r4
 801104e:	f006 fb0d 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(38, 126);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011058:	e002      	b.n	8011060 <_ZN12MainViewBaseC1Ev+0x388>
 801105a:	bf00      	nop
 801105c:	0802679c 	.word	0x0802679c
 8011060:	227e      	movs	r2, #126	; 0x7e
 8011062:	2126      	movs	r1, #38	; 0x26
 8011064:	4618      	mov	r0, r3
 8011066:	f7ff f8be 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011070:	2200      	movs	r2, #0
 8011072:	21dc      	movs	r1, #220	; 0xdc
 8011074:	20ff      	movs	r0, #255	; 0xff
 8011076:	f7ff fe05 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801107a:	4603      	mov	r3, r0
 801107c:	4619      	mov	r1, r3
 801107e:	4620      	mov	r0, r4
 8011080:	f7ff fb35 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801108a:	2100      	movs	r1, #0
 801108c:	4618      	mov	r0, r3
 801108e:	f7ff fb81 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801109c:	2116      	movs	r1, #22
 801109e:	4618      	mov	r0, r3
 80110a0:	f7ff fabc 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80110a4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80110a6:	4620      	mov	r0, r4
 80110a8:	f006 fae0 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(119, 126);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80110b2:	227e      	movs	r2, #126	; 0x7e
 80110b4:	2177      	movs	r1, #119	; 0x77
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7ff f895 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80110c2:	2200      	movs	r2, #0
 80110c4:	21dc      	movs	r1, #220	; 0xdc
 80110c6:	20ff      	movs	r0, #255	; 0xff
 80110c8:	f7ff fddc 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80110cc:	4603      	mov	r3, r0
 80110ce:	4619      	mov	r1, r3
 80110d0:	4620      	mov	r0, r4
 80110d2:	f7ff fb0c 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80110dc:	2100      	movs	r1, #0
 80110de:	4618      	mov	r0, r3
 80110e0:	f7ff fb58 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80110ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110ee:	2115      	movs	r1, #21
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7ff fa93 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80110f6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80110f8:	4620      	mov	r0, r4
 80110fa:	f006 fab7 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(24, 91, 60, 35);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f503 70ba 	add.w	r0, r3, #372	; 0x174
 8011104:	2323      	movs	r3, #35	; 0x23
 8011106:	9300      	str	r3, [sp, #0]
 8011108:	233c      	movs	r3, #60	; 0x3c
 801110a:	225b      	movs	r2, #91	; 0x5b
 801110c:	2118      	movs	r1, #24
 801110e:	f7ff f81f 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8011118:	22ff      	movs	r2, #255	; 0xff
 801111a:	21ff      	movs	r1, #255	; 0xff
 801111c:	20ff      	movs	r0, #255	; 0xff
 801111e:	f7ff fdb1 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011122:	4603      	mov	r3, r0
 8011124:	4619      	mov	r1, r3
 8011126:	4620      	mov	r0, r4
 8011128:	f7ff fae1 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011132:	2100      	movs	r1, #0
 8011134:	4618      	mov	r0, r3
 8011136:	f7ff fb2d 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f603 24c4 	addw	r4, r3, #2756	; 0xac4
 8011140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011144:	2103      	movs	r1, #3
 8011146:	4618      	mov	r0, r3
 8011148:	f7ff fa68 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 801114c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011150:	4618      	mov	r0, r3
 8011152:	f7ff fa73 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8011156:	4603      	mov	r3, r0
 8011158:	4ae0      	ldr	r2, [pc, #896]	; (80114dc <_ZN12MainViewBaseC1Ev+0x804>)
 801115a:	2105      	movs	r1, #5
 801115c:	4620      	mov	r0, r4
 801115e:	f009 fe2f 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 801116e:	4619      	mov	r1, r3
 8011170:	4610      	mov	r0, r2
 8011172:	f7ff fb97 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 801117c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011180:	2102      	movs	r1, #2
 8011182:	4618      	mov	r0, r3
 8011184:	f7ff fa4a 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011188:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 801118a:	4620      	mov	r0, r4
 801118c:	f006 fa6e 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(104, 91, 60, 35);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 8011196:	2323      	movs	r3, #35	; 0x23
 8011198:	9300      	str	r3, [sp, #0]
 801119a:	233c      	movs	r3, #60	; 0x3c
 801119c:	225b      	movs	r2, #91	; 0x5b
 801119e:	2168      	movs	r1, #104	; 0x68
 80111a0:	f7fe ffd6 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 80111aa:	22ff      	movs	r2, #255	; 0xff
 80111ac:	21ff      	movs	r1, #255	; 0xff
 80111ae:	20ff      	movs	r0, #255	; 0xff
 80111b0:	f7ff fd68 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80111b4:	4603      	mov	r3, r0
 80111b6:	4619      	mov	r1, r3
 80111b8:	4620      	mov	r0, r4
 80111ba:	f7ff fa98 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80111c4:	2100      	movs	r1, #0
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7ff fae4 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f603 24ce 	addw	r4, r3, #2766	; 0xace
 80111d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80111d6:	2101      	movs	r1, #1
 80111d8:	4618      	mov	r0, r3
 80111da:	f7ff fa1f 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80111de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7ff fa2a 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 80111e8:	4603      	mov	r3, r0
 80111ea:	4abc      	ldr	r2, [pc, #752]	; (80114dc <_ZN12MainViewBaseC1Ev+0x804>)
 80111ec:	2105      	movs	r1, #5
 80111ee:	4620      	mov	r0, r4
 80111f0:	f009 fde6 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f603 23ce 	addw	r3, r3, #2766	; 0xace
 8011200:	4619      	mov	r1, r3
 8011202:	4610      	mov	r0, r2
 8011204:	f7ff fb4e 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 801120e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011212:	2100      	movs	r1, #0
 8011214:	4618      	mov	r0, r3
 8011216:	f7ff fa01 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 801121a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 801121c:	4620      	mov	r0, r4
 801121e:	f006 fa25 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011228:	223f      	movs	r2, #63	; 0x3f
 801122a:	21b3      	movs	r1, #179	; 0xb3
 801122c:	4618      	mov	r0, r3
 801122e:	f7fe ffda 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011238:	2100      	movs	r1, #0
 801123a:	4618      	mov	r0, r3
 801123c:	f7ff f844 	bl	80102c8 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(41, 61, 18, 14);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f503 7004 	add.w	r0, r3, #528	; 0x210
 8011246:	230e      	movs	r3, #14
 8011248:	9300      	str	r3, [sp, #0]
 801124a:	2312      	movs	r3, #18
 801124c:	223d      	movs	r2, #61	; 0x3d
 801124e:	2129      	movs	r1, #41	; 0x29
 8011250:	f7fe ff7e 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f503 7404 	add.w	r4, r3, #528	; 0x210
 801125a:	22ff      	movs	r2, #255	; 0xff
 801125c:	21ff      	movs	r1, #255	; 0xff
 801125e:	20ff      	movs	r0, #255	; 0xff
 8011260:	f7ff fd10 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011264:	4603      	mov	r3, r0
 8011266:	4619      	mov	r1, r3
 8011268:	4620      	mov	r0, r4
 801126a:	f7ff fa40 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8011274:	2100      	movs	r1, #0
 8011276:	4618      	mov	r0, r3
 8011278:	f7ff fa8c 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f603 24d8 	addw	r4, r3, #2776	; 0xad8
 8011282:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011286:	212b      	movs	r1, #43	; 0x2b
 8011288:	4618      	mov	r0, r3
 801128a:	f7ff f9c7 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 801128e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011292:	4618      	mov	r0, r3
 8011294:	f7ff f9d2 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8011298:	4603      	mov	r3, r0
 801129a:	4a90      	ldr	r2, [pc, #576]	; (80114dc <_ZN12MainViewBaseC1Ev+0x804>)
 801129c:	2102      	movs	r1, #2
 801129e:	4620      	mov	r0, r4
 80112a0:	f009 fd8e 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 80112b0:	4619      	mov	r1, r3
 80112b2:	4610      	mov	r0, r2
 80112b4:	f7ff faf6 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f503 7404 	add.w	r4, r3, #528	; 0x210
 80112be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80112c2:	2104      	movs	r1, #4
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7ff f9a9 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80112ca:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80112ce:	4620      	mov	r0, r4
 80112d0:	f006 f9cc 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(87, 61, 18, 14);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f503 7012 	add.w	r0, r3, #584	; 0x248
 80112da:	230e      	movs	r3, #14
 80112dc:	9300      	str	r3, [sp, #0]
 80112de:	2312      	movs	r3, #18
 80112e0:	223d      	movs	r2, #61	; 0x3d
 80112e2:	2157      	movs	r1, #87	; 0x57
 80112e4:	f7fe ff34 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f503 7412 	add.w	r4, r3, #584	; 0x248
 80112ee:	22ff      	movs	r2, #255	; 0xff
 80112f0:	21ff      	movs	r1, #255	; 0xff
 80112f2:	20ff      	movs	r0, #255	; 0xff
 80112f4:	f7ff fcc6 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80112f8:	4603      	mov	r3, r0
 80112fa:	4619      	mov	r1, r3
 80112fc:	4620      	mov	r0, r4
 80112fe:	f7ff f9f6 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8011308:	2100      	movs	r1, #0
 801130a:	4618      	mov	r0, r3
 801130c:	f7ff fa42 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f603 24dc 	addw	r4, r3, #2780	; 0xadc
 8011316:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801131a:	212c      	movs	r1, #44	; 0x2c
 801131c:	4618      	mov	r0, r3
 801131e:	f7ff f97d 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011322:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011326:	4618      	mov	r0, r3
 8011328:	f7ff f988 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 801132c:	4603      	mov	r3, r0
 801132e:	4a6b      	ldr	r2, [pc, #428]	; (80114dc <_ZN12MainViewBaseC1Ev+0x804>)
 8011330:	2102      	movs	r1, #2
 8011332:	4620      	mov	r0, r4
 8011334:	f009 fd44 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f503 7212 	add.w	r2, r3, #584	; 0x248
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 8011344:	4619      	mov	r1, r3
 8011346:	4610      	mov	r0, r2
 8011348:	f7ff faac 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f503 7412 	add.w	r4, r3, #584	; 0x248
 8011352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011356:	2105      	movs	r1, #5
 8011358:	4618      	mov	r0, r3
 801135a:	f7ff f95f 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 801135e:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8011362:	4620      	mov	r0, r4
 8011364:	f006 f982 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(136, 61, 18, 14);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f503 7020 	add.w	r0, r3, #640	; 0x280
 801136e:	230e      	movs	r3, #14
 8011370:	9300      	str	r3, [sp, #0]
 8011372:	2312      	movs	r3, #18
 8011374:	223d      	movs	r2, #61	; 0x3d
 8011376:	2188      	movs	r1, #136	; 0x88
 8011378:	f7fe feea 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f503 7420 	add.w	r4, r3, #640	; 0x280
 8011382:	22ff      	movs	r2, #255	; 0xff
 8011384:	21ff      	movs	r1, #255	; 0xff
 8011386:	20ff      	movs	r0, #255	; 0xff
 8011388:	f7ff fc7c 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801138c:	4603      	mov	r3, r0
 801138e:	4619      	mov	r1, r3
 8011390:	4620      	mov	r0, r4
 8011392:	f7ff f9ac 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801139c:	2100      	movs	r1, #0
 801139e:	4618      	mov	r0, r3
 80113a0:	f7ff f9f8 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f503 642e 	add.w	r4, r3, #2784	; 0xae0
 80113aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80113ae:	212d      	movs	r1, #45	; 0x2d
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7ff f933 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80113b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7ff f93e 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 80113c0:	4603      	mov	r3, r0
 80113c2:	4a46      	ldr	r2, [pc, #280]	; (80114dc <_ZN12MainViewBaseC1Ev+0x804>)
 80113c4:	2102      	movs	r1, #2
 80113c6:	4620      	mov	r0, r4
 80113c8:	f009 fcfa 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f503 7220 	add.w	r2, r3, #640	; 0x280
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 80113d8:	4619      	mov	r1, r3
 80113da:	4610      	mov	r0, r2
 80113dc:	f7ff fa62 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f503 7420 	add.w	r4, r3, #640	; 0x280
 80113e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80113ea:	2106      	movs	r1, #6
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7ff f915 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80113f2:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80113f6:	4620      	mov	r0, r4
 80113f8:	f006 f938 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(183, 61, 18, 14);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8011402:	230e      	movs	r3, #14
 8011404:	9300      	str	r3, [sp, #0]
 8011406:	2312      	movs	r3, #18
 8011408:	223d      	movs	r2, #61	; 0x3d
 801140a:	21b7      	movs	r1, #183	; 0xb7
 801140c:	f7fe fea0 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 8011416:	22ff      	movs	r2, #255	; 0xff
 8011418:	21ff      	movs	r1, #255	; 0xff
 801141a:	20ff      	movs	r0, #255	; 0xff
 801141c:	f7ff fc32 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011420:	4603      	mov	r3, r0
 8011422:	4619      	mov	r1, r3
 8011424:	4620      	mov	r0, r4
 8011426:	f7ff f962 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8011430:	2100      	movs	r1, #0
 8011432:	4618      	mov	r0, r3
 8011434:	f7ff f9ae 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f603 24e4 	addw	r4, r3, #2788	; 0xae4
 801143e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011442:	212e      	movs	r1, #46	; 0x2e
 8011444:	4618      	mov	r0, r3
 8011446:	f7ff f8e9 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 801144a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801144e:	4618      	mov	r0, r3
 8011450:	f7ff f8f4 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8011454:	4603      	mov	r3, r0
 8011456:	4a21      	ldr	r2, [pc, #132]	; (80114dc <_ZN12MainViewBaseC1Ev+0x804>)
 8011458:	2102      	movs	r1, #2
 801145a:	4620      	mov	r0, r4
 801145c:	f009 fcb0 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f503 722e 	add.w	r2, r3, #696	; 0x2b8
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f603 23e4 	addw	r3, r3, #2788	; 0xae4
 801146c:	4619      	mov	r1, r3
 801146e:	4610      	mov	r0, r2
 8011470:	f7ff fa18 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 801147a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801147e:	2107      	movs	r1, #7
 8011480:	4618      	mov	r0, r3
 8011482:	f7ff f8cb 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011486:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 801148a:	4620      	mov	r0, r4
 801148c:	f006 f8ee 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(232, 61, 18, 14);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 8011496:	230e      	movs	r3, #14
 8011498:	9300      	str	r3, [sp, #0]
 801149a:	2312      	movs	r3, #18
 801149c:	223d      	movs	r2, #61	; 0x3d
 801149e:	21e8      	movs	r1, #232	; 0xe8
 80114a0:	f7fe fe56 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
 80114aa:	22ff      	movs	r2, #255	; 0xff
 80114ac:	21ff      	movs	r1, #255	; 0xff
 80114ae:	20ff      	movs	r0, #255	; 0xff
 80114b0:	f7ff fbe8 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80114b4:	4603      	mov	r3, r0
 80114b6:	4619      	mov	r1, r3
 80114b8:	4620      	mov	r0, r4
 80114ba:	f7ff f918 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 80114c4:	2100      	movs	r1, #0
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7ff f964 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f603 24e8 	addw	r4, r3, #2792	; 0xae8
 80114d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80114d6:	212f      	movs	r1, #47	; 0x2f
 80114d8:	4618      	mov	r0, r3
 80114da:	e001      	b.n	80114e0 <_ZN12MainViewBaseC1Ev+0x808>
 80114dc:	08026200 	.word	0x08026200
 80114e0:	f7ff f89c 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80114e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7ff f8a7 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 80114ee:	4603      	mov	r3, r0
 80114f0:	4ae2      	ldr	r2, [pc, #904]	; (801187c <_ZN12MainViewBaseC1Ev+0xba4>)
 80114f2:	2102      	movs	r1, #2
 80114f4:	4620      	mov	r0, r4
 80114f6:	f009 fc63 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f503 723c 	add.w	r2, r3, #752	; 0x2f0
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 8011506:	4619      	mov	r1, r3
 8011508:	4610      	mov	r0, r2
 801150a:	f7ff f9cb 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
 8011514:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011518:	2108      	movs	r1, #8
 801151a:	4618      	mov	r0, r3
 801151c:	f7ff f87e 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011520:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8011524:	4620      	mov	r0, r4
 8011526:	f006 f8a1 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(279, 61, 18, 14);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f503 704a 	add.w	r0, r3, #808	; 0x328
 8011530:	230e      	movs	r3, #14
 8011532:	9300      	str	r3, [sp, #0]
 8011534:	2312      	movs	r3, #18
 8011536:	223d      	movs	r2, #61	; 0x3d
 8011538:	f240 1117 	movw	r1, #279	; 0x117
 801153c:	f7fe fe08 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f503 744a 	add.w	r4, r3, #808	; 0x328
 8011546:	22ff      	movs	r2, #255	; 0xff
 8011548:	21ff      	movs	r1, #255	; 0xff
 801154a:	20ff      	movs	r0, #255	; 0xff
 801154c:	f7ff fb9a 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011550:	4603      	mov	r3, r0
 8011552:	4619      	mov	r1, r3
 8011554:	4620      	mov	r0, r4
 8011556:	f7ff f8ca 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8011560:	2100      	movs	r1, #0
 8011562:	4618      	mov	r0, r3
 8011564:	f7ff f916 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f603 24ec 	addw	r4, r3, #2796	; 0xaec
 801156e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011572:	2130      	movs	r1, #48	; 0x30
 8011574:	4618      	mov	r0, r3
 8011576:	f7ff f851 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 801157a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801157e:	4618      	mov	r0, r3
 8011580:	f7ff f85c 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8011584:	4603      	mov	r3, r0
 8011586:	4abd      	ldr	r2, [pc, #756]	; (801187c <_ZN12MainViewBaseC1Ev+0xba4>)
 8011588:	2102      	movs	r1, #2
 801158a:	4620      	mov	r0, r4
 801158c:	f009 fc18 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f503 724a 	add.w	r2, r3, #808	; 0x328
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 801159c:	4619      	mov	r1, r3
 801159e:	4610      	mov	r0, r2
 80115a0:	f7ff f980 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f503 744a 	add.w	r4, r3, #808	; 0x328
 80115aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80115ae:	2109      	movs	r1, #9
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7ff f833 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80115b6:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 80115ba:	4620      	mov	r0, r4
 80115bc:	f006 f856 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(328, 61, 18, 14);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80115c6:	230e      	movs	r3, #14
 80115c8:	9300      	str	r3, [sp, #0]
 80115ca:	2312      	movs	r3, #18
 80115cc:	223d      	movs	r2, #61	; 0x3d
 80115ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80115d2:	f7fe fdbd 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f503 7458 	add.w	r4, r3, #864	; 0x360
 80115dc:	22ff      	movs	r2, #255	; 0xff
 80115de:	21ff      	movs	r1, #255	; 0xff
 80115e0:	20ff      	movs	r0, #255	; 0xff
 80115e2:	f7ff fb4f 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80115e6:	4603      	mov	r3, r0
 80115e8:	4619      	mov	r1, r3
 80115ea:	4620      	mov	r0, r4
 80115ec:	f7ff f87f 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80115f6:	2100      	movs	r1, #0
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7ff f8cb 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f503 642f 	add.w	r4, r3, #2800	; 0xaf0
 8011604:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011608:	2131      	movs	r1, #49	; 0x31
 801160a:	4618      	mov	r0, r3
 801160c:	f7ff f806 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011610:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011614:	4618      	mov	r0, r3
 8011616:	f7ff f811 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 801161a:	4603      	mov	r3, r0
 801161c:	4a97      	ldr	r2, [pc, #604]	; (801187c <_ZN12MainViewBaseC1Ev+0xba4>)
 801161e:	2102      	movs	r1, #2
 8011620:	4620      	mov	r0, r4
 8011622:	f009 fbcd 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f503 7258 	add.w	r2, r3, #864	; 0x360
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8011632:	4619      	mov	r1, r3
 8011634:	4610      	mov	r0, r2
 8011636:	f7ff f935 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f503 7458 	add.w	r4, r3, #864	; 0x360
 8011640:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011644:	210a      	movs	r1, #10
 8011646:	4618      	mov	r0, r3
 8011648:	f7fe ffe8 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 801164c:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8011650:	4620      	mov	r0, r4
 8011652:	f006 f80b 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(376, 61, 18, 14);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f503 7066 	add.w	r0, r3, #920	; 0x398
 801165c:	230e      	movs	r3, #14
 801165e:	9300      	str	r3, [sp, #0]
 8011660:	2312      	movs	r3, #18
 8011662:	223d      	movs	r2, #61	; 0x3d
 8011664:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8011668:	f7fe fd72 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f503 7466 	add.w	r4, r3, #920	; 0x398
 8011672:	22ff      	movs	r2, #255	; 0xff
 8011674:	21ff      	movs	r1, #255	; 0xff
 8011676:	20ff      	movs	r0, #255	; 0xff
 8011678:	f7ff fb04 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801167c:	4603      	mov	r3, r0
 801167e:	4619      	mov	r1, r3
 8011680:	4620      	mov	r0, r4
 8011682:	f7ff f834 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f503 7366 	add.w	r3, r3, #920	; 0x398
 801168c:	2100      	movs	r1, #0
 801168e:	4618      	mov	r0, r3
 8011690:	f7ff f880 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f603 24f4 	addw	r4, r3, #2804	; 0xaf4
 801169a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801169e:	2132      	movs	r1, #50	; 0x32
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fe ffbb 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80116a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7fe ffc6 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 80116b0:	4603      	mov	r3, r0
 80116b2:	4a72      	ldr	r2, [pc, #456]	; (801187c <_ZN12MainViewBaseC1Ev+0xba4>)
 80116b4:	2102      	movs	r1, #2
 80116b6:	4620      	mov	r0, r4
 80116b8:	f009 fb82 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f503 7266 	add.w	r2, r3, #920	; 0x398
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f603 23f4 	addw	r3, r3, #2804	; 0xaf4
 80116c8:	4619      	mov	r1, r3
 80116ca:	4610      	mov	r0, r2
 80116cc:	f7ff f8ea 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f503 7466 	add.w	r4, r3, #920	; 0x398
 80116d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80116da:	210b      	movs	r1, #11
 80116dc:	4618      	mov	r0, r3
 80116de:	f7fe ff9d 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80116e2:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 80116e6:	4620      	mov	r0, r4
 80116e8:	f005 ffc0 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm9.setPosition(424, 60, 18, 14);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f503 7074 	add.w	r0, r3, #976	; 0x3d0
 80116f2:	230e      	movs	r3, #14
 80116f4:	9300      	str	r3, [sp, #0]
 80116f6:	2312      	movs	r3, #18
 80116f8:	223c      	movs	r2, #60	; 0x3c
 80116fa:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80116fe:	f7fe fd27 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm9.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f503 7474 	add.w	r4, r3, #976	; 0x3d0
 8011708:	22ff      	movs	r2, #255	; 0xff
 801170a:	21ff      	movs	r1, #255	; 0xff
 801170c:	20ff      	movs	r0, #255	; 0xff
 801170e:	f7ff fab9 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011712:	4603      	mov	r3, r0
 8011714:	4619      	mov	r1, r3
 8011716:	4620      	mov	r0, r4
 8011718:	f7fe ffe9 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm9.setLinespacing(0);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8011722:	2100      	movs	r1, #0
 8011724:	4618      	mov	r0, r3
 8011726:	f7ff f835 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm9Buffer, RPM9_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID68).getText());
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f603 24f8 	addw	r4, r3, #2808	; 0xaf8
 8011730:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011734:	2133      	movs	r1, #51	; 0x33
 8011736:	4618      	mov	r0, r3
 8011738:	f7fe ff70 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 801173c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011740:	4618      	mov	r0, r3
 8011742:	f7fe ff7b 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8011746:	4603      	mov	r3, r0
 8011748:	4a4c      	ldr	r2, [pc, #304]	; (801187c <_ZN12MainViewBaseC1Ev+0xba4>)
 801174a:	2102      	movs	r1, #2
 801174c:	4620      	mov	r0, r4
 801174e:	f009 fb37 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm9.setWildcard(rpm9Buffer);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f503 7274 	add.w	r2, r3, #976	; 0x3d0
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 801175e:	4619      	mov	r1, r3
 8011760:	4610      	mov	r0, r2
 8011762:	f7ff f89f 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm9.setTypedText(touchgfx::TypedText(T_SINGLEUSEID19));
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f503 7474 	add.w	r4, r3, #976	; 0x3d0
 801176c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011770:	210c      	movs	r1, #12
 8011772:	4618      	mov	r0, r3
 8011774:	f7fe ff52 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011778:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 801177c:	4620      	mov	r0, r4
 801177e:	f005 ff75 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm10.setPosition(463, 61, 18, 14);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8011788:	230e      	movs	r3, #14
 801178a:	9300      	str	r3, [sp, #0]
 801178c:	2312      	movs	r3, #18
 801178e:	223d      	movs	r2, #61	; 0x3d
 8011790:	f240 11cf 	movw	r1, #463	; 0x1cf
 8011794:	f7fe fcdc 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm10.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f503 6481 	add.w	r4, r3, #1032	; 0x408
 801179e:	22ff      	movs	r2, #255	; 0xff
 80117a0:	21ff      	movs	r1, #255	; 0xff
 80117a2:	20ff      	movs	r0, #255	; 0xff
 80117a4:	f7ff fa6e 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80117a8:	4603      	mov	r3, r0
 80117aa:	4619      	mov	r1, r3
 80117ac:	4620      	mov	r0, r4
 80117ae:	f7fe ff9e 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm10.setLinespacing(0);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80117b8:	2100      	movs	r1, #0
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7fe ffea 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm10Buffer, RPM10_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f603 24fc 	addw	r4, r3, #2812	; 0xafc
 80117c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80117ca:	2134      	movs	r1, #52	; 0x34
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7fe ff25 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80117d2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fe ff30 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 80117dc:	4603      	mov	r3, r0
 80117de:	4a27      	ldr	r2, [pc, #156]	; (801187c <_ZN12MainViewBaseC1Ev+0xba4>)
 80117e0:	2102      	movs	r1, #2
 80117e2:	4620      	mov	r0, r4
 80117e4:	f009 faec 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm10.setWildcard(rpm10Buffer);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f503 6281 	add.w	r2, r3, #1032	; 0x408
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f603 23fc 	addw	r3, r3, #2812	; 0xafc
 80117f4:	4619      	mov	r1, r3
 80117f6:	4610      	mov	r0, r2
 80117f8:	f7ff f854 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm10.setTypedText(touchgfx::TypedText(T_SINGLEUSEID20));
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f503 6481 	add.w	r4, r3, #1032	; 0x408
 8011802:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011806:	210d      	movs	r1, #13
 8011808:	4618      	mov	r0, r3
 801180a:	f7fe ff07 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 801180e:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8011812:	4620      	mov	r0, r4
 8011814:	f005 ff2a 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f503 6088 	add.w	r0, r3, #1088	; 0x440
 801181e:	2305      	movs	r3, #5
 8011820:	9300      	str	r3, [sp, #0]
 8011822:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8011826:	223a      	movs	r2, #58	; 0x3a
 8011828:	f06f 0101 	mvn.w	r1, #1
 801182c:	f7fe fc90 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f203 44b4 	addw	r4, r3, #1204	; 0x4b4
 8011836:	22ff      	movs	r2, #255	; 0xff
 8011838:	21ff      	movs	r1, #255	; 0xff
 801183a:	20ff      	movs	r0, #255	; 0xff
 801183c:	f7ff fa22 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011840:	4603      	mov	r3, r0
 8011842:	22ff      	movs	r2, #255	; 0xff
 8011844:	4619      	mov	r1, r3
 8011846:	4620      	mov	r0, r4
 8011848:	f005 f9e1 	bl	8016c0e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f503 6288 	add.w	r2, r3, #1088	; 0x440
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8011858:	4619      	mov	r1, r3
 801185a:	4610      	mov	r0, r2
 801185c:	f005 fa40 	bl	8016ce0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011866:	2203      	movs	r2, #3
 8011868:	2100      	movs	r1, #0
 801186a:	4618      	mov	r0, r3
 801186c:	f000 fe1e 	bl	80124ac <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011876:	2203      	movs	r2, #3
 8011878:	e002      	b.n	8011880 <_ZN12MainViewBaseC1Ev+0xba8>
 801187a:	bf00      	nop
 801187c:	08026200 	.word	0x08026200
 8011880:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8011884:	4618      	mov	r0, r3
 8011886:	f000 fe37 	bl	80124f8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011890:	2102      	movs	r1, #2
 8011892:	4618      	mov	r0, r3
 8011894:	f000 fe56 	bl	8012544 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801189e:	2101      	movs	r1, #1
 80118a0:	4618      	mov	r0, r3
 80118a2:	f005 fd37 	bl	8017314 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(46, 188);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 80118ac:	22bc      	movs	r2, #188	; 0xbc
 80118ae:	212e      	movs	r1, #46	; 0x2e
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7fe fc98 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f203 44cc 	addw	r4, r3, #1228	; 0x4cc
 80118bc:	2200      	movs	r2, #0
 80118be:	21dc      	movs	r1, #220	; 0xdc
 80118c0:	20ff      	movs	r0, #255	; 0xff
 80118c2:	f7ff f9df 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80118c6:	4603      	mov	r3, r0
 80118c8:	4619      	mov	r1, r3
 80118ca:	4620      	mov	r0, r4
 80118cc:	f7fe ff0f 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 80118d6:	2100      	movs	r1, #0
 80118d8:	4618      	mov	r0, r3
 80118da:	f7fe ff5b 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f203 44cc 	addw	r4, r3, #1228	; 0x4cc
 80118e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80118e8:	2113      	movs	r1, #19
 80118ea:	4618      	mov	r0, r3
 80118ec:	f7fe fe96 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80118f0:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 80118f4:	4620      	mov	r0, r4
 80118f6:	f005 feb9 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor.setXY(124, 188);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011900:	22bc      	movs	r2, #188	; 0xbc
 8011902:	217c      	movs	r1, #124	; 0x7c
 8011904:	4618      	mov	r0, r3
 8011906:	f7fe fc6e 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8011910:	2200      	movs	r2, #0
 8011912:	21dc      	movs	r1, #220	; 0xdc
 8011914:	20ff      	movs	r0, #255	; 0xff
 8011916:	f7ff f9b5 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801191a:	4603      	mov	r3, r0
 801191c:	4619      	mov	r1, r3
 801191e:	4620      	mov	r0, r4
 8011920:	f7fe fee5 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor.setLinespacing(0);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801192a:	2100      	movs	r1, #0
 801192c:	4618      	mov	r0, r3
 801192e:	f7fe ff31 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8011938:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801193c:	2114      	movs	r1, #20
 801193e:	4618      	mov	r0, r3
 8011940:	f7fe fe6c 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011944:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8011948:	4620      	mov	r0, r4
 801194a:	f005 fe8f 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(26, 153, 60, 35);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f203 5034 	addw	r0, r3, #1332	; 0x534
 8011954:	2323      	movs	r3, #35	; 0x23
 8011956:	9300      	str	r3, [sp, #0]
 8011958:	233c      	movs	r3, #60	; 0x3c
 801195a:	2299      	movs	r2, #153	; 0x99
 801195c:	211a      	movs	r1, #26
 801195e:	f7fe fbf7 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8011968:	22ff      	movs	r2, #255	; 0xff
 801196a:	21ff      	movs	r1, #255	; 0xff
 801196c:	20ff      	movs	r0, #255	; 0xff
 801196e:	f7ff f989 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011972:	4603      	mov	r3, r0
 8011974:	4619      	mov	r1, r3
 8011976:	4620      	mov	r0, r4
 8011978:	f7fe feb9 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011982:	2100      	movs	r1, #0
 8011984:	4618      	mov	r0, r3
 8011986:	f7fe ff05 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8011990:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011994:	2110      	movs	r1, #16
 8011996:	4618      	mov	r0, r3
 8011998:	f7fe fe40 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 801199c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fe fe4b 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 80119a6:	4603      	mov	r3, r0
 80119a8:	4ae3      	ldr	r2, [pc, #908]	; (8011d38 <_ZN12MainViewBaseC1Ev+0x1060>)
 80119aa:	2105      	movs	r1, #5
 80119ac:	4620      	mov	r0, r4
 80119ae:	f009 fa07 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f203 5234 	addw	r2, r3, #1332	; 0x534
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119be:	4619      	mov	r1, r3
 80119c0:	4610      	mov	r0, r2
 80119c2:	f7fe ff6f 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f203 5434 	addw	r4, r3, #1332	; 0x534
 80119cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80119d0:	210f      	movs	r1, #15
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fe fe22 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80119d8:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 80119dc:	4620      	mov	r0, r4
 80119de:	f005 fe45 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(104, 153, 60, 35);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 80119e8:	2323      	movs	r3, #35	; 0x23
 80119ea:	9300      	str	r3, [sp, #0]
 80119ec:	233c      	movs	r3, #60	; 0x3c
 80119ee:	2299      	movs	r2, #153	; 0x99
 80119f0:	2168      	movs	r1, #104	; 0x68
 80119f2:	f7fe fbad 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 80119fc:	22ff      	movs	r2, #255	; 0xff
 80119fe:	21ff      	movs	r1, #255	; 0xff
 8011a00:	20ff      	movs	r0, #255	; 0xff
 8011a02:	f7ff f93f 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a06:	4603      	mov	r3, r0
 8011a08:	4619      	mov	r1, r3
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	f7fe fe6f 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011a16:	2100      	movs	r1, #0
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f7fe febb 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f603 340a 	addw	r4, r3, #2826	; 0xb0a
 8011a24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011a28:	2112      	movs	r1, #18
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7fe fdf6 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011a30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7fe fe01 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	4abe      	ldr	r2, [pc, #760]	; (8011d38 <_ZN12MainViewBaseC1Ev+0x1060>)
 8011a3e:	2105      	movs	r1, #5
 8011a40:	4620      	mov	r0, r4
 8011a42:	f009 f9bd 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f203 526c 	addw	r2, r3, #1388	; 0x56c
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f603 330a 	addw	r3, r3, #2826	; 0xb0a
 8011a52:	4619      	mov	r1, r3
 8011a54:	4610      	mov	r0, r2
 8011a56:	f7fe ff25 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 8011a60:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011a64:	2111      	movs	r1, #17
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fe fdd8 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011a6c:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 8011a70:	4620      	mov	r0, r4
 8011a72:	f005 fdfb 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(343, 188);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 8011a7c:	22bc      	movs	r2, #188	; 0xbc
 8011a7e:	f240 1157 	movw	r1, #343	; 0x157
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fe fbaf 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f203 54a4 	addw	r4, r3, #1444	; 0x5a4
 8011a8e:	2200      	movs	r2, #0
 8011a90:	21dc      	movs	r1, #220	; 0xdc
 8011a92:	20ff      	movs	r0, #255	; 0xff
 8011a94:	f7ff f8f6 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	4619      	mov	r1, r3
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	f7fe fe26 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 8011aa8:	2100      	movs	r1, #0
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7fe fe72 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f203 54a4 	addw	r4, r3, #1444	; 0x5a4
 8011ab6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011aba:	2117      	movs	r1, #23
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7fe fdad 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011ac2:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	f005 fdd0 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(426, 188);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8011ad2:	22bc      	movs	r2, #188	; 0xbc
 8011ad4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7fe fb84 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	21dc      	movs	r1, #220	; 0xdc
 8011ae8:	20ff      	movs	r0, #255	; 0xff
 8011aea:	f7ff f8cb 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011aee:	4603      	mov	r3, r0
 8011af0:	4619      	mov	r1, r3
 8011af2:	4620      	mov	r0, r4
 8011af4:	f7fe fdfb 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8011afe:	2100      	movs	r1, #0
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7fe fe47 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 8011b0c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011b10:	2118      	movs	r1, #24
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7fe fd82 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011b18:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	f005 fda5 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(328, 153, 60, 35);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8011b28:	2323      	movs	r3, #35	; 0x23
 8011b2a:	9300      	str	r3, [sp, #0]
 8011b2c:	233c      	movs	r3, #60	; 0x3c
 8011b2e:	2299      	movs	r2, #153	; 0x99
 8011b30:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8011b34:	f7fe fb0c 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8011b3e:	22ff      	movs	r2, #255	; 0xff
 8011b40:	21ff      	movs	r1, #255	; 0xff
 8011b42:	20ff      	movs	r0, #255	; 0xff
 8011b44:	f7ff f89e 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	f7fe fdce 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8011b58:	2100      	movs	r1, #0
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7fe fe1a 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f603 3414 	addw	r4, r3, #2836	; 0xb14
 8011b66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011b6a:	211a      	movs	r1, #26
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7fe fd55 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011b72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7fe fd60 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	4a6e      	ldr	r2, [pc, #440]	; (8011d38 <_ZN12MainViewBaseC1Ev+0x1060>)
 8011b80:	2105      	movs	r1, #5
 8011b82:	4620      	mov	r0, r4
 8011b84:	f009 f91c 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f203 620c 	addw	r2, r3, #1548	; 0x60c
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f603 3314 	addw	r3, r3, #2836	; 0xb14
 8011b94:	4619      	mov	r1, r3
 8011b96:	4610      	mov	r0, r2
 8011b98:	f7fe fe84 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8011ba2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011ba6:	2119      	movs	r1, #25
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7fe fd37 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011bae:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f005 fd5a 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(411, 153, 60, 35);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f203 6044 	addw	r0, r3, #1604	; 0x644
 8011bbe:	2323      	movs	r3, #35	; 0x23
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	233c      	movs	r3, #60	; 0x3c
 8011bc4:	2299      	movs	r2, #153	; 0x99
 8011bc6:	f240 119b 	movw	r1, #411	; 0x19b
 8011bca:	f7fe fac1 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f203 6444 	addw	r4, r3, #1604	; 0x644
 8011bd4:	22ff      	movs	r2, #255	; 0xff
 8011bd6:	21ff      	movs	r1, #255	; 0xff
 8011bd8:	20ff      	movs	r0, #255	; 0xff
 8011bda:	f7ff f853 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011bde:	4603      	mov	r3, r0
 8011be0:	4619      	mov	r1, r3
 8011be2:	4620      	mov	r0, r4
 8011be4:	f7fe fd83 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8011bee:	2100      	movs	r1, #0
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7fe fdcf 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f603 341e 	addw	r4, r3, #2846	; 0xb1e
 8011bfc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011c00:	2128      	movs	r1, #40	; 0x28
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fe fd0a 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011c08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7fe fd15 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8011c12:	4603      	mov	r3, r0
 8011c14:	4a48      	ldr	r2, [pc, #288]	; (8011d38 <_ZN12MainViewBaseC1Ev+0x1060>)
 8011c16:	2105      	movs	r1, #5
 8011c18:	4620      	mov	r0, r4
 8011c1a:	f009 f8d1 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f203 6244 	addw	r2, r3, #1604	; 0x644
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f603 331e 	addw	r3, r3, #2846	; 0xb1e
 8011c2a:	4619      	mov	r1, r3
 8011c2c:	4610      	mov	r0, r2
 8011c2e:	f7fe fe39 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f203 6444 	addw	r4, r3, #1604	; 0x644
 8011c38:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011c3c:	211b      	movs	r1, #27
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7fe fcec 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011c44:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8011c48:	4620      	mov	r0, r4
 8011c4a:	f005 fd0f 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8011c54:	22f0      	movs	r2, #240	; 0xf0
 8011c56:	f240 1197 	movw	r1, #407	; 0x197
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7fe fac3 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f203 647c 	addw	r4, r3, #1660	; 0x67c
 8011c66:	2200      	movs	r2, #0
 8011c68:	21dc      	movs	r1, #220	; 0xdc
 8011c6a:	20ff      	movs	r0, #255	; 0xff
 8011c6c:	f7ff f80a 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c70:	4603      	mov	r3, r0
 8011c72:	4619      	mov	r1, r3
 8011c74:	4620      	mov	r0, r4
 8011c76:	f7fe fd3a 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8011c80:	2100      	movs	r1, #0
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7fe fd86 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f203 647c 	addw	r4, r3, #1660	; 0x67c
 8011c8e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011c92:	211e      	movs	r1, #30
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7fe fcc1 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011c9a:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	f005 fce4 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(365, 226);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 8011caa:	22e2      	movs	r2, #226	; 0xe2
 8011cac:	f240 116d 	movw	r1, #365	; 0x16d
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f7fe fa98 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f503 60d6 	add.w	r0, r3, #1712	; 0x6b0
 8011cbc:	230a      	movs	r3, #10
 8011cbe:	9300      	str	r3, [sp, #0]
 8011cc0:	2364      	movs	r3, #100	; 0x64
 8011cc2:	2202      	movs	r2, #2
 8011cc4:	2102      	movs	r1, #2
 8011cc6:	f003 fad1 	bl	801526c <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f503 60d6 	add.w	r0, r3, #1712	; 0x6b0
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	9300      	str	r3, [sp, #0]
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	2264      	movs	r2, #100	; 0x64
 8011cd8:	2100      	movs	r1, #0
 8011cda:	f003 fd45 	bl	8015768 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f003 fb20 	bl	801532c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f503 64d6 	add.w	r4, r3, #1712	; 0x6b0
 8011cf2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011cf6:	2100      	movs	r1, #0
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7fe f9cb 	bl	8010094 <_ZN8touchgfx6BitmapC1Et>
 8011cfe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011d02:	4619      	mov	r1, r3
 8011d04:	4620      	mov	r0, r4
 8011d06:	f003 fd24 	bl	8015752 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f503 64d6 	add.w	r4, r3, #1712	; 0x6b0
 8011d10:	2200      	movs	r2, #0
 8011d12:	21dc      	movs	r1, #220	; 0xdc
 8011d14:	20ff      	movs	r0, #255	; 0xff
 8011d16:	f7fe ffb5 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	4620      	mov	r0, r4
 8011d20:	f003 fa4e 	bl	80151c0 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 8011d2a:	213c      	movs	r1, #60	; 0x3c
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f003 fab5 	bl	801529c <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	e002      	b.n	8011d3c <_ZN12MainViewBaseC1Ev+0x1064>
 8011d36:	bf00      	nop
 8011d38:	08026200 	.word	0x08026200
 8011d3c:	f503 60ee 	add.w	r0, r3, #1904	; 0x770
 8011d40:	230a      	movs	r3, #10
 8011d42:	9300      	str	r3, [sp, #0]
 8011d44:	23b4      	movs	r3, #180	; 0xb4
 8011d46:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011d4a:	210e      	movs	r1, #14
 8011d4c:	f7fe fa00 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 8011d56:	22ff      	movs	r2, #255	; 0xff
 8011d58:	21ff      	movs	r1, #255	; 0xff
 8011d5a:	20ff      	movs	r0, #255	; 0xff
 8011d5c:	f7fe ff92 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d60:	4603      	mov	r3, r0
 8011d62:	22ff      	movs	r2, #255	; 0xff
 8011d64:	4619      	mov	r1, r3
 8011d66:	4620      	mov	r0, r4
 8011d68:	f004 ff51 	bl	8016c0e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f503 62ee 	add.w	r2, r3, #1904	; 0x770
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8011d78:	4619      	mov	r1, r3
 8011d7a:	4610      	mov	r0, r2
 8011d7c:	f004 ffb0 	bl	8016ce0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8011d86:	2205      	movs	r2, #5
 8011d88:	2100      	movs	r1, #0
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f000 fb8e 	bl	80124ac <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8011d96:	2205      	movs	r2, #5
 8011d98:	21b4      	movs	r1, #180	; 0xb4
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f000 fbac 	bl	80124f8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8011da6:	2102      	movs	r1, #2
 8011da8:	4618      	mov	r0, r3
 8011daa:	f000 fbcb 	bl	8012544 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8011db4:	2100      	movs	r1, #0
 8011db6:	4618      	mov	r0, r3
 8011db8:	f005 faac 	bl	8017314 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f203 70fc 	addw	r0, r3, #2044	; 0x7fc
 8011dc2:	230a      	movs	r3, #10
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	23b4      	movs	r3, #180	; 0xb4
 8011dc8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011dcc:	f240 111f 	movw	r1, #287	; 0x11f
 8011dd0:	f7fe f9be 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f503 6407 	add.w	r4, r3, #2160	; 0x870
 8011dda:	22ff      	movs	r2, #255	; 0xff
 8011ddc:	21ff      	movs	r1, #255	; 0xff
 8011dde:	20ff      	movs	r0, #255	; 0xff
 8011de0:	f7fe ff50 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011de4:	4603      	mov	r3, r0
 8011de6:	22ff      	movs	r2, #255	; 0xff
 8011de8:	4619      	mov	r1, r3
 8011dea:	4620      	mov	r0, r4
 8011dec:	f004 ff0f 	bl	8016c0e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f203 72fc 	addw	r2, r3, #2044	; 0x7fc
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	4610      	mov	r0, r2
 8011e00:	f004 ff6e 	bl	8016ce0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8011e0a:	2205      	movs	r2, #5
 8011e0c:	2100      	movs	r1, #0
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f000 fb4c 	bl	80124ac <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8011e1a:	2205      	movs	r2, #5
 8011e1c:	21b4      	movs	r1, #180	; 0xb4
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f000 fb6a 	bl	80124f8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8011e2a:	2102      	movs	r1, #2
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f000 fb89 	bl	8012544 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8011e38:	2100      	movs	r1, #0
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f005 fa6a 	bl	8017314 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f603 0088 	addw	r0, r3, #2184	; 0x888
 8011e46:	2315      	movs	r3, #21
 8011e48:	9300      	str	r3, [sp, #0]
 8011e4a:	233c      	movs	r3, #60	; 0x3c
 8011e4c:	22f7      	movs	r2, #247	; 0xf7
 8011e4e:	21d2      	movs	r1, #210	; 0xd2
 8011e50:	f7fe f97e 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f603 0488 	addw	r4, r3, #2184	; 0x888
 8011e5a:	22ff      	movs	r2, #255	; 0xff
 8011e5c:	21ff      	movs	r1, #255	; 0xff
 8011e5e:	20ff      	movs	r0, #255	; 0xff
 8011e60:	f7fe ff10 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e64:	4603      	mov	r3, r0
 8011e66:	4619      	mov	r1, r3
 8011e68:	4620      	mov	r0, r4
 8011e6a:	f7fe fc40 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8011e74:	2100      	movs	r1, #0
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7fe fc8c 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f603 3428 	addw	r4, r3, #2856	; 0xb28
 8011e82:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011e86:	2120      	movs	r1, #32
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7fe fbc7 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011e8e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7fe fbd2 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	4ae1      	ldr	r2, [pc, #900]	; (8012220 <_ZN12MainViewBaseC1Ev+0x1548>)
 8011e9c:	2105      	movs	r1, #5
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f008 ff8e 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f603 0288 	addw	r2, r3, #2184	; 0x888
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8011eb0:	4619      	mov	r1, r3
 8011eb2:	4610      	mov	r0, r2
 8011eb4:	f7fe fcf6 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f603 0488 	addw	r4, r3, #2184	; 0x888
 8011ebe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8011ec2:	211f      	movs	r1, #31
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f7fe fba9 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011eca:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f005 fbcc 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8011eda:	2201      	movs	r2, #1
 8011edc:	2101      	movs	r1, #1
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7fe f981 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f503 600c 	add.w	r0, r3, #2240	; 0x8c0
 8011eea:	2337      	movs	r3, #55	; 0x37
 8011eec:	9300      	str	r3, [sp, #0]
 8011eee:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8011ef2:	2202      	movs	r2, #2
 8011ef4:	2102      	movs	r1, #2
 8011ef6:	f003 fb09 	bl	801550c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 10000);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f503 600c 	add.w	r0, r3, #2240	; 0x8c0
 8011f00:	2300      	movs	r3, #0
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	2300      	movs	r3, #0
 8011f06:	f242 7210 	movw	r2, #10000	; 0x2710
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	f003 fc2c 	bl	8015768 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8011f16:	2100      	movs	r1, #0
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f003 fa07 	bl	801532c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8011f24:	2101      	movs	r1, #1
 8011f26:	4618      	mov	r0, r3
 8011f28:	f003 fa4b 	bl	80153c2 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(9900);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8011f32:	f242 61ac 	movw	r1, #9900	; 0x26ac
 8011f36:	4618      	mov	r0, r3
 8011f38:	f003 fb00 	bl	801553c <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8011f42:	2101      	movs	r1, #1
 8011f44:	4618      	mov	r0, r3
 8011f46:	f003 fa25 	bl	8015394 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 8011f50:	2316      	movs	r3, #22
 8011f52:	9300      	str	r3, [sp, #0]
 8011f54:	2337      	movs	r3, #55	; 0x37
 8011f56:	2204      	movs	r2, #4
 8011f58:	2119      	movs	r1, #25
 8011f5a:	f7fe f8f9 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8011f64:	22ff      	movs	r2, #255	; 0xff
 8011f66:	21ff      	movs	r1, #255	; 0xff
 8011f68:	20ff      	movs	r0, #255	; 0xff
 8011f6a:	f7fe fe8b 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	4619      	mov	r1, r3
 8011f72:	4620      	mov	r0, r4
 8011f74:	f7fe fbbb 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8011f7e:	2100      	movs	r1, #0
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7fe fc07 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f603 3432 	addw	r4, r3, #2866	; 0xb32
 8011f8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011f90:	2122      	movs	r1, #34	; 0x22
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7fe fb42 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011f98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fe fb4d 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	4a9e      	ldr	r2, [pc, #632]	; (8012220 <_ZN12MainViewBaseC1Ev+0x1548>)
 8011fa6:	2105      	movs	r1, #5
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f008 ff09 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f503 621b 	add.w	r2, r3, #2480	; 0x9b0
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f603 3332 	addw	r3, r3, #2866	; 0xb32
 8011fba:	4619      	mov	r1, r3
 8011fbc:	4610      	mov	r0, r2
 8011fbe:	f7fe fc71 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8011fc8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011fcc:	2121      	movs	r1, #33	; 0x21
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7fe fb24 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8011fd4:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	; 0xd0
 8011fd8:	4620      	mov	r0, r4
 8011fda:	f005 fb47 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8011fe4:	220f      	movs	r2, #15
 8011fe6:	2152      	movs	r1, #82	; 0x52
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7fe f8fc 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 8011ff4:	22ff      	movs	r2, #255	; 0xff
 8011ff6:	21ff      	movs	r1, #255	; 0xff
 8011ff8:	20ff      	movs	r0, #255	; 0xff
 8011ffa:	f7fe fe43 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ffe:	4603      	mov	r3, r0
 8012000:	4619      	mov	r1, r3
 8012002:	4620      	mov	r0, r4
 8012004:	f7fe fb73 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 801200e:	2100      	movs	r1, #0
 8012010:	4618      	mov	r0, r3
 8012012:	f7fe fbbf 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 801201c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012020:	2123      	movs	r1, #35	; 0x23
 8012022:	4618      	mov	r0, r3
 8012024:	f7fe fafa 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8012028:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 801202c:	4620      	mov	r0, r4
 801202e:	f005 fb1d 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(328, 91, 60, 35);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f603 201c 	addw	r0, r3, #2588	; 0xa1c
 8012038:	2323      	movs	r3, #35	; 0x23
 801203a:	9300      	str	r3, [sp, #0]
 801203c:	233c      	movs	r3, #60	; 0x3c
 801203e:	225b      	movs	r2, #91	; 0x5b
 8012040:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8012044:	f7fe f884 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	f603 241c 	addw	r4, r3, #2588	; 0xa1c
 801204e:	22ff      	movs	r2, #255	; 0xff
 8012050:	21ff      	movs	r1, #255	; 0xff
 8012052:	20ff      	movs	r0, #255	; 0xff
 8012054:	f7fe fe16 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012058:	4603      	mov	r3, r0
 801205a:	4619      	mov	r1, r3
 801205c:	4620      	mov	r0, r4
 801205e:	f7fe fb46 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 8012068:	2100      	movs	r1, #0
 801206a:	4618      	mov	r0, r3
 801206c:	f7fe fb92 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f603 343c 	addw	r4, r3, #2876	; 0xb3c
 8012076:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801207a:	2125      	movs	r1, #37	; 0x25
 801207c:	4618      	mov	r0, r3
 801207e:	f7fe facd 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8012082:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8012086:	4618      	mov	r0, r3
 8012088:	f7fe fad8 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 801208c:	4603      	mov	r3, r0
 801208e:	4a64      	ldr	r2, [pc, #400]	; (8012220 <_ZN12MainViewBaseC1Ev+0x1548>)
 8012090:	2105      	movs	r1, #5
 8012092:	4620      	mov	r0, r4
 8012094:	f008 fe94 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f603 221c 	addw	r2, r3, #2588	; 0xa1c
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f603 333c 	addw	r3, r3, #2876	; 0xb3c
 80120a4:	4619      	mov	r1, r3
 80120a6:	4610      	mov	r0, r2
 80120a8:	f7fe fbfc 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f603 241c 	addw	r4, r3, #2588	; 0xa1c
 80120b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80120b6:	2124      	movs	r1, #36	; 0x24
 80120b8:	4618      	mov	r0, r3
 80120ba:	f7fe faaf 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80120be:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 80120c2:	4620      	mov	r0, r4
 80120c4:	f005 fad2 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(409, 91, 60, 35);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 80120ce:	2323      	movs	r3, #35	; 0x23
 80120d0:	9300      	str	r3, [sp, #0]
 80120d2:	233c      	movs	r3, #60	; 0x3c
 80120d4:	225b      	movs	r2, #91	; 0x5b
 80120d6:	f240 1199 	movw	r1, #409	; 0x199
 80120da:	f7fe f839 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 80120e4:	22ff      	movs	r2, #255	; 0xff
 80120e6:	21ff      	movs	r1, #255	; 0xff
 80120e8:	20ff      	movs	r0, #255	; 0xff
 80120ea:	f7fe fdcb 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80120ee:	4603      	mov	r3, r0
 80120f0:	4619      	mov	r1, r3
 80120f2:	4620      	mov	r0, r4
 80120f4:	f7fe fafb 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80120fe:	2100      	movs	r1, #0
 8012100:	4618      	mov	r0, r3
 8012102:	f7fe fb47 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f603 3446 	addw	r4, r3, #2886	; 0xb46
 801210c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8012110:	2127      	movs	r1, #39	; 0x27
 8012112:	4618      	mov	r0, r3
 8012114:	f7fe fa82 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8012118:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801211c:	4618      	mov	r0, r3
 801211e:	f7fe fa8d 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8012122:	4603      	mov	r3, r0
 8012124:	4a3e      	ldr	r2, [pc, #248]	; (8012220 <_ZN12MainViewBaseC1Ev+0x1548>)
 8012126:	2105      	movs	r1, #5
 8012128:	4620      	mov	r0, r4
 801212a:	f008 fe49 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f603 2254 	addw	r2, r3, #2644	; 0xa54
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f603 3346 	addw	r3, r3, #2886	; 0xb46
 801213a:	4619      	mov	r1, r3
 801213c:	4610      	mov	r0, r2
 801213e:	f7fe fbb1 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 8012148:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801214c:	2126      	movs	r1, #38	; 0x26
 801214e:	4618      	mov	r0, r3
 8012150:	f7fe fa64 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 8012154:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 8012158:	4620      	mov	r0, r4
 801215a:	f005 fa87 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KMHValue.setPosition(185, 76, 110, 69);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f603 208c 	addw	r0, r3, #2700	; 0xa8c
 8012164:	2345      	movs	r3, #69	; 0x45
 8012166:	9300      	str	r3, [sp, #0]
 8012168:	236e      	movs	r3, #110	; 0x6e
 801216a:	224c      	movs	r2, #76	; 0x4c
 801216c:	21b9      	movs	r1, #185	; 0xb9
 801216e:	f7fd ffef 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
    KMHValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8012178:	22ff      	movs	r2, #255	; 0xff
 801217a:	21ff      	movs	r1, #255	; 0xff
 801217c:	20ff      	movs	r0, #255	; 0xff
 801217e:	f7fe fd81 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012182:	4603      	mov	r3, r0
 8012184:	4619      	mov	r1, r3
 8012186:	4620      	mov	r0, r4
 8012188:	f7fe fab1 	bl	80106ee <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KMHValue.setLinespacing(0);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8012192:	2100      	movs	r1, #0
 8012194:	4618      	mov	r0, r3
 8012196:	f7fe fafd 	bl	8010794 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(KMHValueBuffer, KMHVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID59).getText());
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f503 6435 	add.w	r4, r3, #2896	; 0xb50
 80121a0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80121a4:	212a      	movs	r1, #42	; 0x2a
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fe fa38 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80121ac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fe fa43 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 80121b6:	4603      	mov	r3, r0
 80121b8:	4a19      	ldr	r2, [pc, #100]	; (8012220 <_ZN12MainViewBaseC1Ev+0x1548>)
 80121ba:	2105      	movs	r1, #5
 80121bc:	4620      	mov	r0, r4
 80121be:	f008 fdff 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    KMHValue.setWildcard(KMHValueBuffer);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f603 228c 	addw	r2, r3, #2700	; 0xa8c
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 80121ce:	4619      	mov	r1, r3
 80121d0:	4610      	mov	r0, r2
 80121d2:	f7fe fb67 	bl	80108a4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    KMHValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID58));
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 80121dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80121e0:	2129      	movs	r1, #41	; 0x29
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7fe fa1a 	bl	801061c <_ZN8touchgfx9TypedTextC1Et>
 80121e8:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	; 0xec
 80121ec:	4620      	mov	r0, r4
 80121ee:	f005 fa3d 	bl	801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	3340      	adds	r3, #64	; 0x40
 80121f8:	4619      	mov	r1, r3
 80121fa:	4610      	mov	r0, r2
 80121fc:	f7fe f956 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RpmDescriptor);
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	3370      	adds	r3, #112	; 0x70
 8012206:	4619      	mov	r1, r3
 8012208:	4610      	mov	r0, r2
 801220a:	f7fe f94f 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	33a4      	adds	r3, #164	; 0xa4
 8012214:	4619      	mov	r1, r3
 8012216:	4610      	mov	r0, r2
 8012218:	f7fe f948 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
 801221c:	e002      	b.n	8012224 <_ZN12MainViewBaseC1Ev+0x154c>
 801221e:	bf00      	nop
 8012220:	08026200 	.word	0x08026200
    add(CltDecsriptor);
 8012224:	687a      	ldr	r2, [r7, #4]
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	33d8      	adds	r3, #216	; 0xd8
 801222a:	4619      	mov	r1, r3
 801222c:	4610      	mov	r0, r2
 801222e:	f7fe f93d 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801223a:	4619      	mov	r1, r3
 801223c:	4610      	mov	r0, r2
 801223e:	f7fe f935 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8012242:	687a      	ldr	r2, [r7, #4]
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801224a:	4619      	mov	r1, r3
 801224c:	4610      	mov	r0, r2
 801224e:	f7fe f92d 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8012252:	687a      	ldr	r2, [r7, #4]
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801225a:	4619      	mov	r1, r3
 801225c:	4610      	mov	r0, r2
 801225e:	f7fe f925 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801226a:	4619      	mov	r1, r3
 801226c:	4610      	mov	r0, r2
 801226e:	f7fe f91d 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8012272:	687a      	ldr	r2, [r7, #4]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801227a:	4619      	mov	r1, r3
 801227c:	4610      	mov	r0, r2
 801227e:	f7fe f915 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 8012282:	687a      	ldr	r2, [r7, #4]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801228a:	4619      	mov	r1, r3
 801228c:	4610      	mov	r0, r2
 801228e:	f7fe f90d 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801229a:	4619      	mov	r1, r3
 801229c:	4610      	mov	r0, r2
 801229e:	f7fe f905 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 80122a2:	687a      	ldr	r2, [r7, #4]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80122aa:	4619      	mov	r1, r3
 80122ac:	4610      	mov	r0, r2
 80122ae:	f7fe f8fd 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 80122b2:	687a      	ldr	r2, [r7, #4]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80122ba:	4619      	mov	r1, r3
 80122bc:	4610      	mov	r0, r2
 80122be:	f7fe f8f5 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 80122c2:	687a      	ldr	r2, [r7, #4]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 80122ca:	4619      	mov	r1, r3
 80122cc:	4610      	mov	r0, r2
 80122ce:	f7fe f8ed 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 80122d2:	687a      	ldr	r2, [r7, #4]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80122da:	4619      	mov	r1, r3
 80122dc:	4610      	mov	r0, r2
 80122de:	f7fe f8e5 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 80122e2:	687a      	ldr	r2, [r7, #4]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80122ea:	4619      	mov	r1, r3
 80122ec:	4610      	mov	r0, r2
 80122ee:	f7fe f8dd 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80122fa:	4619      	mov	r1, r3
 80122fc:	4610      	mov	r0, r2
 80122fe:	f7fe f8d5 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm9);
 8012302:	687a      	ldr	r2, [r7, #4]
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 801230a:	4619      	mov	r1, r3
 801230c:	4610      	mov	r0, r2
 801230e:	f7fe f8cd 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm10);
 8012312:	687a      	ldr	r2, [r7, #4]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801231a:	4619      	mov	r1, r3
 801231c:	4610      	mov	r0, r2
 801231e:	f7fe f8c5 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 8012322:	687a      	ldr	r2, [r7, #4]
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801232a:	4619      	mov	r1, r3
 801232c:	4610      	mov	r0, r2
 801232e:	f7fe f8bd 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 801233a:	4619      	mov	r1, r3
 801233c:	4610      	mov	r0, r2
 801233e:	f7fe f8b5 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor);
 8012342:	687a      	ldr	r2, [r7, #4]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801234a:	4619      	mov	r1, r3
 801234c:	4610      	mov	r0, r2
 801234e:	f7fe f8ad 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8012352:	687a      	ldr	r2, [r7, #4]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801235a:	4619      	mov	r1, r3
 801235c:	4610      	mov	r0, r2
 801235e:	f7fe f8a5 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 8012362:	687a      	ldr	r2, [r7, #4]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801236a:	4619      	mov	r1, r3
 801236c:	4610      	mov	r0, r2
 801236e:	f7fe f89d 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8012372:	687a      	ldr	r2, [r7, #4]
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 801237a:	4619      	mov	r1, r3
 801237c:	4610      	mov	r0, r2
 801237e:	f7fe f895 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8012382:	687a      	ldr	r2, [r7, #4]
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 801238a:	4619      	mov	r1, r3
 801238c:	4610      	mov	r0, r2
 801238e:	f7fe f88d 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 8012392:	687a      	ldr	r2, [r7, #4]
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801239a:	4619      	mov	r1, r3
 801239c:	4610      	mov	r0, r2
 801239e:	f7fe f885 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f203 6344 	addw	r3, r3, #1604	; 0x644
 80123aa:	4619      	mov	r1, r3
 80123ac:	4610      	mov	r0, r2
 80123ae:	f7fe f87d 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 80123ba:	4619      	mov	r1, r3
 80123bc:	4610      	mov	r0, r2
 80123be:	f7fe f875 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 80123ca:	4619      	mov	r1, r3
 80123cc:	4610      	mov	r0, r2
 80123ce:	f7fe f86d 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 80123da:	4619      	mov	r1, r3
 80123dc:	4610      	mov	r0, r2
 80123de:	f7fe f865 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 80123e2:	687a      	ldr	r2, [r7, #4]
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 80123ea:	4619      	mov	r1, r3
 80123ec:	4610      	mov	r0, r2
 80123ee:	f7fe f85d 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80123fa:	4619      	mov	r1, r3
 80123fc:	4610      	mov	r0, r2
 80123fe:	f7fe f855 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8012402:	687a      	ldr	r2, [r7, #4]
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 801240a:	4619      	mov	r1, r3
 801240c:	4610      	mov	r0, r2
 801240e:	f7fe f84d 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8012412:	687a      	ldr	r2, [r7, #4]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 801241a:	4619      	mov	r1, r3
 801241c:	4610      	mov	r0, r2
 801241e:	f7fe f845 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 801242a:	4619      	mov	r1, r3
 801242c:	4610      	mov	r0, r2
 801242e:	f7fe f83d 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 801243a:	4619      	mov	r1, r3
 801243c:	4610      	mov	r0, r2
 801243e:	f7fe f835 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 801244a:	4619      	mov	r1, r3
 801244c:	4610      	mov	r0, r2
 801244e:	f7fe f82d 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KMHValue);
 8012452:	687a      	ldr	r2, [r7, #4]
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 801245a:	4619      	mov	r1, r3
 801245c:	4610      	mov	r0, r2
 801245e:	f7fe f825 	bl	80104ac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	4618      	mov	r0, r3
 8012466:	37f4      	adds	r7, #244	; 0xf4
 8012468:	46bd      	mov	sp, r7
 801246a:	bd90      	pop	{r4, r7, pc}

0801246c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]

}
 8012474:	bf00      	nop
 8012476:	370c      	adds	r7, #12
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr

08012480 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8012480:	b580      	push	{r7, lr}
 8012482:	b082      	sub	sp, #8
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	4618      	mov	r0, r3
 801248c:	f007 fbd2 	bl	8019c34 <_ZN8touchgfx6ScreenC1Ev>
 8012490:	4a05      	ldr	r2, [pc, #20]	; (80124a8 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	601a      	str	r2, [r3, #0]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2200      	movs	r2, #0
 801249a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	4618      	mov	r0, r3
 80124a0:	3708      	adds	r7, #8
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	080267d0 	.word	0x080267d0

080124ac <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 80124ac:	b590      	push	{r4, r7, lr}
 80124ae:	b089      	sub	sp, #36	; 0x24
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	60f8      	str	r0, [r7, #12]
 80124b4:	60b9      	str	r1, [r7, #8]
 80124b6:	607a      	str	r2, [r7, #4]
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	015a      	lsls	r2, r3, #5
 80124c0:	f107 0314 	add.w	r3, r7, #20
 80124c4:	4611      	mov	r1, r2
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7fe fa1c 	bl	8010904 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	461c      	mov	r4, r3
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	61fb      	str	r3, [r7, #28]
 80124d4:	69fb      	ldr	r3, [r7, #28]
 80124d6:	015a      	lsls	r2, r3, #5
 80124d8:	f107 0310 	add.w	r3, r7, #16
 80124dc:	4611      	mov	r1, r2
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fe fa10 	bl	8010904 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80124e4:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80124e6:	461a      	mov	r2, r3
 80124e8:	4621      	mov	r1, r4
 80124ea:	68f8      	ldr	r0, [r7, #12]
 80124ec:	f004 fefc 	bl	80172e8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 80124f0:	bf00      	nop
 80124f2:	3724      	adds	r7, #36	; 0x24
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd90      	pop	{r4, r7, pc}

080124f8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 80124f8:	b590      	push	{r4, r7, lr}
 80124fa:	b089      	sub	sp, #36	; 0x24
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	60f8      	str	r0, [r7, #12]
 8012500:	60b9      	str	r1, [r7, #8]
 8012502:	607a      	str	r2, [r7, #4]
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	61bb      	str	r3, [r7, #24]
 8012508:	69bb      	ldr	r3, [r7, #24]
 801250a:	015a      	lsls	r2, r3, #5
 801250c:	f107 0314 	add.w	r3, r7, #20
 8012510:	4611      	mov	r1, r2
 8012512:	4618      	mov	r0, r3
 8012514:	f7fe f9f6 	bl	8010904 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	461c      	mov	r4, r3
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	61fb      	str	r3, [r7, #28]
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	015a      	lsls	r2, r3, #5
 8012524:	f107 0310 	add.w	r3, r7, #16
 8012528:	4611      	mov	r1, r2
 801252a:	4618      	mov	r0, r3
 801252c:	f7fe f9ea 	bl	8010904 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012530:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012532:	461a      	mov	r2, r3
 8012534:	4621      	mov	r1, r4
 8012536:	68f8      	ldr	r0, [r7, #12]
 8012538:	f004 fee1 	bl	80172fe <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 801253c:	bf00      	nop
 801253e:	3724      	adds	r7, #36	; 0x24
 8012540:	46bd      	mov	sp, r7
 8012542:	bd90      	pop	{r4, r7, pc}

08012544 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	60fb      	str	r3, [r7, #12]
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	015a      	lsls	r2, r3, #5
 8012556:	f107 0308 	add.w	r3, r7, #8
 801255a:	4611      	mov	r1, r2
 801255c:	4618      	mov	r0, r3
 801255e:	f7fe f9d1 	bl	8010904 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012562:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8012564:	4619      	mov	r1, r3
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f7fe f9e7 	bl	801093a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 801256c:	bf00      	nop
 801256e:	3710      	adds	r7, #16
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	4a05      	ldr	r2, [pc, #20]	; (8012594 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	601a      	str	r2, [r3, #0]
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	4618      	mov	r0, r3
 8012586:	f7fe f955 	bl	8010834 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	4618      	mov	r0, r3
 801258e:	3708      	adds	r7, #8
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}
 8012594:	080283a4 	.word	0x080283a4

08012598 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f7ff ffe7 	bl	8012574 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80125a6:	2138      	movs	r1, #56	; 0x38
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f012 fb76 	bl	8024c9a <_ZdlPvj>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4618      	mov	r0, r3
 80125b2:	3708      	adds	r7, #8
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	4a05      	ldr	r2, [pc, #20]	; (80125d8 <_ZN8touchgfx4LineD1Ev+0x20>)
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	601a      	str	r2, [r3, #0]
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	4618      	mov	r0, r3
 80125ca:	f004 fc67 	bl	8016e9c <_ZN8touchgfx12CanvasWidgetD1Ev>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	4618      	mov	r0, r3
 80125d2:	3708      	adds	r7, #8
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	08028150 	.word	0x08028150

080125dc <_ZN8touchgfx4LineD0Ev>:
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f7ff ffe7 	bl	80125b8 <_ZN8touchgfx4LineD1Ev>
 80125ea:	2174      	movs	r1, #116	; 0x74
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f012 fb54 	bl	8024c9a <_ZdlPvj>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	4618      	mov	r0, r3
 80125f6:	3708      	adds	r7, #8
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	4a05      	ldr	r2, [pc, #20]	; (801261c <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	601a      	str	r2, [r3, #0]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	4618      	mov	r0, r3
 801260e:	f7fe f9b7 	bl	8010980 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	4618      	mov	r0, r3
 8012616:	3708      	adds	r7, #8
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	08027e54 	.word	0x08027e54

08012620 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f7ff ffe7 	bl	80125fc <_ZN8touchgfx13PainterRGB888D1Ev>
 801262e:	2118      	movs	r1, #24
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f012 fb32 	bl	8024c9a <_ZdlPvj>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	4618      	mov	r0, r3
 801263a:	3708      	adds	r7, #8
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}

08012640 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012640:	b480      	push	{r7}
 8012642:	af00      	add	r7, sp, #0
    return bitmap_database;
 8012644:	4b02      	ldr	r3, [pc, #8]	; (8012650 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8012646:	4618      	mov	r0, r3
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr
 8012650:	0802693c 	.word	0x0802693c

08012654 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012654:	b480      	push	{r7}
 8012656:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012658:	2303      	movs	r3, #3
}
 801265a:	4618      	mov	r0, r3
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr

08012664 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012664:	b480      	push	{r7}
 8012666:	b085      	sub	sp, #20
 8012668:	af00      	add	r7, sp, #0
 801266a:	60f8      	str	r0, [r7, #12]
 801266c:	60b9      	str	r1, [r7, #8]
 801266e:	4613      	mov	r3, r2
 8012670:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8012672:	4a07      	ldr	r2, [pc, #28]	; (8012690 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	6013      	str	r3, [r2, #0]
        fonts = f;
 8012678:	4a06      	ldr	r2, [pc, #24]	; (8012694 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801267e:	4a06      	ldr	r2, [pc, #24]	; (8012698 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8012680:	88fb      	ldrh	r3, [r7, #6]
 8012682:	8013      	strh	r3, [r2, #0]
    }
 8012684:	bf00      	nop
 8012686:	3714      	adds	r7, #20
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr
 8012690:	2000bd58 	.word	0x2000bd58
 8012694:	2000bd60 	.word	0x2000bd60
 8012698:	2000bd5c 	.word	0x2000bd5c

0801269c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 801269c:	b590      	push	{r4, r7, lr}
 801269e:	b085      	sub	sp, #20
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	4603      	mov	r3, r0
 80126a4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80126a6:	2300      	movs	r3, #0
 80126a8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80126aa:	88fb      	ldrh	r3, [r7, #6]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d127      	bne.n	8012700 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80126b0:	88fb      	ldrh	r3, [r7, #6]
 80126b2:	4a1e      	ldr	r2, [pc, #120]	; (801272c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80126b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d016      	beq.n	80126ea <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80126bc:	88fb      	ldrh	r3, [r7, #6]
 80126be:	4a1b      	ldr	r2, [pc, #108]	; (801272c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80126c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126c4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80126c6:	68bb      	ldr	r3, [r7, #8]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	68ba      	ldr	r2, [r7, #8]
 80126cc:	4413      	add	r3, r2
 80126ce:	4a18      	ldr	r2, [pc, #96]	; (8012730 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80126d0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	68ba      	ldr	r2, [r7, #8]
 80126d8:	4413      	add	r3, r2
 80126da:	4a16      	ldr	r2, [pc, #88]	; (8012734 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80126dc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	689b      	ldr	r3, [r3, #8]
 80126e2:	68ba      	ldr	r2, [r7, #8]
 80126e4:	4413      	add	r3, r2
 80126e6:	60fb      	str	r3, [r7, #12]
 80126e8:	e00a      	b.n	8012700 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80126ea:	4b11      	ldr	r3, [pc, #68]	; (8012730 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80126ec:	4a12      	ldr	r2, [pc, #72]	; (8012738 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80126ee:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80126f0:	4a12      	ldr	r2, [pc, #72]	; (801273c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80126f2:	4b10      	ldr	r3, [pc, #64]	; (8012734 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80126f4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80126f6:	88fb      	ldrh	r3, [r7, #6]
 80126f8:	4a11      	ldr	r2, [pc, #68]	; (8012740 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80126fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126fe:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d00d      	beq.n	8012722 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8012706:	4a0f      	ldr	r2, [pc, #60]	; (8012744 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012708:	88fb      	ldrh	r3, [r7, #6]
 801270a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 801270c:	f000 f83e 	bl	801278c <_ZN17TypedTextDatabase8getFontsEv>
 8012710:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8012712:	f000 f833 	bl	801277c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8012716:	4603      	mov	r3, r0
 8012718:	461a      	mov	r2, r3
 801271a:	4621      	mov	r1, r4
 801271c:	68f8      	ldr	r0, [r7, #12]
 801271e:	f7ff ffa1 	bl	8012664 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8012722:	bf00      	nop
 8012724:	3714      	adds	r7, #20
 8012726:	46bd      	mov	sp, r7
 8012728:	bd90      	pop	{r4, r7, pc}
 801272a:	bf00      	nop
 801272c:	20008630 	.word	0x20008630
 8012730:	20008638 	.word	0x20008638
 8012734:	2000863c 	.word	0x2000863c
 8012738:	0806131c 	.word	0x0806131c
 801273c:	08061248 	.word	0x08061248
 8012740:	0806147c 	.word	0x0806147c
 8012744:	20008634 	.word	0x20008634

08012748 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8012748:	b480      	push	{r7}
 801274a:	b083      	sub	sp, #12
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	460b      	mov	r3, r1
 8012752:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8012754:	4b07      	ldr	r3, [pc, #28]	; (8012774 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8012756:	681a      	ldr	r2, [r3, #0]
 8012758:	4b07      	ldr	r3, [pc, #28]	; (8012778 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801275a:	6819      	ldr	r1, [r3, #0]
 801275c:	887b      	ldrh	r3, [r7, #2]
 801275e:	009b      	lsls	r3, r3, #2
 8012760:	440b      	add	r3, r1
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	005b      	lsls	r3, r3, #1
 8012766:	4413      	add	r3, r2
}
 8012768:	4618      	mov	r0, r3
 801276a:	370c      	adds	r7, #12
 801276c:	46bd      	mov	sp, r7
 801276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012772:	4770      	bx	lr
 8012774:	20008638 	.word	0x20008638
 8012778:	2000863c 	.word	0x2000863c

0801277c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 801277c:	b480      	push	{r7}
 801277e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8012780:	2335      	movs	r3, #53	; 0x35
}
 8012782:	4618      	mov	r0, r3
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr

0801278c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 801278c:	b480      	push	{r7}
 801278e:	af00      	add	r7, sp, #0
    return _fonts;
 8012790:	4b02      	ldr	r3, [pc, #8]	; (801279c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8012792:	4618      	mov	r0, r3
 8012794:	46bd      	mov	sp, r7
 8012796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279a:	4770      	bx	lr
 801279c:	20008640 	.word	0x20008640

080127a0 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b082      	sub	sp, #8
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
 80127a8:	6039      	str	r1, [r7, #0]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2b01      	cmp	r3, #1
 80127ae:	d127      	bne.n	8012800 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d122      	bne.n	8012800 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 80127ba:	f7fc fdbb 	bl	800f334 <_Z25getFont_Asap_Bold_18_4bppv>
 80127be:	4602      	mov	r2, r0
};
 80127c0:	4b11      	ldr	r3, [pc, #68]	; (8012808 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80127c2:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 80127c4:	f7fc fe7c 	bl	800f4c0 <_Z25getFont_Asap_Bold_40_4bppv>
 80127c8:	4602      	mov	r2, r0
};
 80127ca:	4b0f      	ldr	r3, [pc, #60]	; (8012808 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80127cc:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 80127ce:	f7fc fe35 	bl	800f43c <_Z25getFont_Asap_Bold_30_4bppv>
 80127d2:	4602      	mov	r2, r0
};
 80127d4:	4b0c      	ldr	r3, [pc, #48]	; (8012808 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80127d6:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 80127d8:	f7fc fd6a 	bl	800f2b0 <_Z25getFont_Asap_Bold_12_4bppv>
 80127dc:	4602      	mov	r2, r0
};
 80127de:	4b0a      	ldr	r3, [pc, #40]	; (8012808 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80127e0:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 80127e2:	f7fc feaf 	bl	800f544 <_Z25getFont_Asap_Bold_60_4bppv>
 80127e6:	4602      	mov	r2, r0
};
 80127e8:	4b07      	ldr	r3, [pc, #28]	; (8012808 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80127ea:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 80127ec:	f7fc fde4 	bl	800f3b8 <_Z25getFont_Asap_Bold_21_4bppv>
 80127f0:	4602      	mov	r2, r0
};
 80127f2:	4b05      	ldr	r3, [pc, #20]	; (8012808 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80127f4:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 80127f6:	f7fc fd19 	bl	800f22c <_Z25getFont_Asap_Bold_10_4bppv>
 80127fa:	4602      	mov	r2, r0
};
 80127fc:	4b02      	ldr	r3, [pc, #8]	; (8012808 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80127fe:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 8012800:	bf00      	nop
 8012802:	3708      	adds	r7, #8
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}
 8012808:	20008640 	.word	0x20008640

0801280c <_GLOBAL__sub_I__fonts>:
 801280c:	b580      	push	{r7, lr}
 801280e:	af00      	add	r7, sp, #0
 8012810:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012814:	2001      	movs	r0, #1
 8012816:	f7ff ffc3 	bl	80127a0 <_Z41__static_initialization_and_destruction_0ii>
 801281a:	bd80      	pop	{r7, pc}

0801281c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	4a05      	ldr	r2, [pc, #20]	; (801283c <_ZN19FrontendApplicationD1Ev+0x20>)
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	601a      	str	r2, [r3, #0]
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	4618      	mov	r0, r3
 801282e:	f7fd f919 	bl	800fa64 <_ZN23FrontendApplicationBaseD1Ev>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	4618      	mov	r0, r3
 8012836:	3708      	adds	r7, #8
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}
 801283c:	08026980 	.word	0x08026980

08012840 <_ZN19FrontendApplicationD0Ev>:
 8012840:	b580      	push	{r7, lr}
 8012842:	b082      	sub	sp, #8
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f7ff ffe7 	bl	801281c <_ZN19FrontendApplicationD1Ev>
 801284e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f012 fa21 	bl	8024c9a <_ZdlPvj>
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	4618      	mov	r0, r3
 801285c:	3708      	adds	r7, #8
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}

08012862 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8012862:	b580      	push	{r7, lr}
 8012864:	b082      	sub	sp, #8
 8012866:	af00      	add	r7, sp, #0
 8012868:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012870:	4618      	mov	r0, r3
 8012872:	f000 fd49 	bl	8013308 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	4618      	mov	r0, r3
 801287a:	f006 f95f 	bl	8018b3c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801287e:	bf00      	nop
 8012880:	3708      	adds	r7, #8
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
	...

08012888 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012888:	b580      	push	{r7, lr}
 801288a:	b084      	sub	sp, #16
 801288c:	af00      	add	r7, sp, #0
 801288e:	60f8      	str	r0, [r7, #12]
 8012890:	60b9      	str	r1, [r7, #8]
 8012892:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	68b9      	ldr	r1, [r7, #8]
 801289a:	4618      	mov	r0, r3
 801289c:	f7fd f95c 	bl	800fb58 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80128a0:	4a03      	ldr	r2, [pc, #12]	; (80128b0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	601a      	str	r2, [r3, #0]
{
}
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	4618      	mov	r0, r3
 80128aa:	3710      	adds	r7, #16
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}
 80128b0:	08026980 	.word	0x08026980

080128b4 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80128b4:	b480      	push	{r7}
 80128b6:	b083      	sub	sp, #12
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
    {
    }
 80128bc:	bf00      	nop
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr

080128c8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80128c8:	b480      	push	{r7}
 80128ca:	b083      	sub	sp, #12
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
    {
    }
 80128d0:	bf00      	nop
 80128d2:	370c      	adds	r7, #12
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr

080128dc <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 80128dc:	b480      	push	{r7}
 80128de:	b083      	sub	sp, #12
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
    {
 80128e4:	4a04      	ldr	r2, [pc, #16]	; (80128f8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	601a      	str	r2, [r3, #0]
    }
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	4618      	mov	r0, r3
 80128ee:	370c      	adds	r7, #12
 80128f0:	46bd      	mov	sp, r7
 80128f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f6:	4770      	bx	lr
 80128f8:	08026a0c 	.word	0x08026a0c

080128fc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
    }
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f7ff ffe9 	bl	80128dc <_ZN8touchgfx9PresenterD1Ev>
 801290a:	2104      	movs	r1, #4
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f012 f9c4 	bl	8024c9a <_ZdlPvj>
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4618      	mov	r0, r3
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
    {
 8012924:	4a04      	ldr	r2, [pc, #16]	; (8012938 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	601a      	str	r2, [r3, #0]
    }
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	4618      	mov	r0, r3
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr
 8012938:	08026a0c 	.word	0x08026a0c

0801293c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801293c:	b480      	push	{r7}
 801293e:	b083      	sub	sp, #12
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	4a06      	ldr	r2, [pc, #24]	; (8012960 <_ZN13ModelListenerC1Ev+0x24>)
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	601a      	str	r2, [r3, #0]
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2200      	movs	r2, #0
 801294e:	605a      	str	r2, [r3, #4]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	4618      	mov	r0, r3
 8012954:	370c      	adds	r7, #12
 8012956:	46bd      	mov	sp, r7
 8012958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295c:	4770      	bx	lr
 801295e:	bf00      	nop
 8012960:	080269f4 	.word	0x080269f4

08012964 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012964:	b480      	push	{r7}
 8012966:	b083      	sub	sp, #12
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	4a04      	ldr	r2, [pc, #16]	; (8012980 <_ZN13ModelListenerD1Ev+0x1c>)
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	601a      	str	r2, [r3, #0]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	4618      	mov	r0, r3
 8012976:	370c      	adds	r7, #12
 8012978:	46bd      	mov	sp, r7
 801297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297e:	4770      	bx	lr
 8012980:	080269f4 	.word	0x080269f4

08012984 <_ZN13ModelListenerD0Ev>:
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f7ff ffe9 	bl	8012964 <_ZN13ModelListenerD1Ev>
 8012992:	2108      	movs	r1, #8
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f012 f980 	bl	8024c9a <_ZdlPvj>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	4618      	mov	r0, r3
 801299e:	3708      	adds	r7, #8
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 80129a4:	b480      	push	{r7}
 80129a6:	b083      	sub	sp, #12
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
 80129ac:	6039      	str	r1, [r7, #0]
 80129ae:	bf00      	nop
 80129b0:	370c      	adds	r7, #12
 80129b2:	46bd      	mov	sp, r7
 80129b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b8:	4770      	bx	lr

080129ba <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 80129ba:	b480      	push	{r7}
 80129bc:	b083      	sub	sp, #12
 80129be:	af00      	add	r7, sp, #0
 80129c0:	6078      	str	r0, [r7, #4]
 80129c2:	6039      	str	r1, [r7, #0]
 80129c4:	bf00      	nop
 80129c6:	370c      	adds	r7, #12
 80129c8:	46bd      	mov	sp, r7
 80129ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ce:	4770      	bx	lr

080129d0 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
 80129d8:	4a09      	ldr	r2, [pc, #36]	; (8012a00 <_ZN13MainPresenterD1Ev+0x30>)
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	601a      	str	r2, [r3, #0]
 80129de:	4a09      	ldr	r2, [pc, #36]	; (8012a04 <_ZN13MainPresenterD1Ev+0x34>)
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	605a      	str	r2, [r3, #4]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	3304      	adds	r3, #4
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7ff ffbb 	bl	8012964 <_ZN13ModelListenerD1Ev>
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7ff ff73 	bl	80128dc <_ZN8touchgfx9PresenterD1Ev>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	4618      	mov	r0, r3
 80129fa:	3708      	adds	r7, #8
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	080269bc 	.word	0x080269bc
 8012a04:	080269dc 	.word	0x080269dc

08012a08 <_ZThn4_N13MainPresenterD1Ev>:
 8012a08:	f1a0 0004 	sub.w	r0, r0, #4
 8012a0c:	e7e0      	b.n	80129d0 <_ZN13MainPresenterD1Ev>
 8012a0e:	bf00      	nop

08012a10 <_ZN13MainPresenterD0Ev>:
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f7ff ffd9 	bl	80129d0 <_ZN13MainPresenterD1Ev>
 8012a1e:	2110      	movs	r1, #16
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f012 f93a 	bl	8024c9a <_ZdlPvj>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3708      	adds	r7, #8
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}

08012a30 <_ZThn4_N13MainPresenterD0Ev>:
 8012a30:	f1a0 0004 	sub.w	r0, r0, #4
 8012a34:	e7ec      	b.n	8012a10 <_ZN13MainPresenterD0Ev>
	...

08012a38 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	6039      	str	r1, [r7, #0]
    : view(v)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	4618      	mov	r0, r3
 8012a46:	f7ff ff69 	bl	801291c <_ZN8touchgfx9PresenterC1Ev>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	3304      	adds	r3, #4
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7ff ff74 	bl	801293c <_ZN13ModelListenerC1Ev>
 8012a54:	4a06      	ldr	r2, [pc, #24]	; (8012a70 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	601a      	str	r2, [r3, #0]
 8012a5a:	4a06      	ldr	r2, [pc, #24]	; (8012a74 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	605a      	str	r2, [r3, #4]
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	683a      	ldr	r2, [r7, #0]
 8012a64:	60da      	str	r2, [r3, #12]
{
}
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3708      	adds	r7, #8
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}
 8012a70:	080269bc 	.word	0x080269bc
 8012a74:	080269dc 	.word	0x080269dc

08012a78 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b083      	sub	sp, #12
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
}
 8012a80:	bf00      	nop
 8012a82:	370c      	adds	r7, #12
 8012a84:	46bd      	mov	sp, r7
 8012a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8a:	4770      	bx	lr

08012a8c <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8012a8c:	b480      	push	{r7}
 8012a8e:	b083      	sub	sp, #12
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
}
 8012a94:	bf00      	nop
 8012a96:	370c      	adds	r7, #12
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9e:	4770      	bx	lr

08012aa0 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	68db      	ldr	r3, [r3, #12]
 8012aae:	6839      	ldr	r1, [r7, #0]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f000 faed 	bl	8013090 <_ZN8MainView9updateValEPh>
}
 8012ab6:	bf00      	nop
 8012ab8:	3708      	adds	r7, #8
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}

08012abe <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 8012abe:	f1a0 0004 	sub.w	r0, r0, #4
 8012ac2:	f7ff bfed 	b.w	8012aa0 <_ZN13MainPresenter11setNewValueEPh>

08012ac6 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	b082      	sub	sp, #8
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
 8012ace:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	68db      	ldr	r3, [r3, #12]
 8012ad4:	6839      	ldr	r1, [r7, #0]
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f000 f908 	bl	8012cec <_ZN8MainView14updateSettingsEPh>
}
 8012adc:	bf00      	nop
 8012ade:	3708      	adds	r7, #8
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}

08012ae4 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8012ae4:	f1a0 0004 	sub.w	r0, r0, #4
 8012ae8:	f7ff bfed 	b.w	8012ac6 <_ZN13MainPresenter21updateDisplaySettingsEPh>

08012aec <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8012aec:	b480      	push	{r7}
 8012aee:	b083      	sub	sp, #12
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2200      	movs	r2, #0
 8012af8:	601a      	str	r2, [r3, #0]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	4618      	mov	r0, r3
 8012afe:	370c      	adds	r7, #12
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr

08012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b084      	sub	sp, #16
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	60f8      	str	r0, [r7, #12]
 8012b10:	460b      	mov	r3, r1
 8012b12:	607a      	str	r2, [r7, #4]
 8012b14:	ed87 0a00 	vstr	s0, [r7]
 8012b18:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8012b1a:	463b      	mov	r3, r7
 8012b1c:	8979      	ldrh	r1, [r7, #10]
 8012b1e:	687a      	ldr	r2, [r7, #4]
 8012b20:	68f8      	ldr	r0, [r7, #12]
 8012b22:	f008 faa7 	bl	801b074 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8012b26:	4603      	mov	r3, r0
    }
 8012b28:	4618      	mov	r0, r3
 8012b2a:	3710      	adds	r7, #16
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}

08012b30 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8012b30:	b480      	push	{r7}
 8012b32:	b083      	sub	sp, #12
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
        return rect.width;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8012b3e:	4618      	mov	r0, r3
 8012b40:	370c      	adds	r7, #12
 8012b42:	46bd      	mov	sp, r7
 8012b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b48:	4770      	bx	lr

08012b4a <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8012b4a:	b480      	push	{r7}
 8012b4c:	b083      	sub	sp, #12
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	6078      	str	r0, [r7, #4]
        return rect.height;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8012b58:	4618      	mov	r0, r3
 8012b5a:	370c      	adds	r7, #12
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	4a05      	ldr	r2, [pc, #20]	; (8012b84 <_ZN8MainViewD1Ev+0x20>)
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	601a      	str	r2, [r3, #0]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7fd ff69 	bl	8010a4c <_ZN12MainViewBaseD1Ev>
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3708      	adds	r7, #8
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	08026a24 	.word	0x08026a24

08012b88 <_ZN8MainViewD0Ev>:
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f7ff ffe7 	bl	8012b64 <_ZN8MainViewD1Ev>
 8012b96:	f242 717c 	movw	r1, #10108	; 0x277c
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f012 f87d 	bl	8024c9a <_ZdlPvj>
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3708      	adds	r7, #8
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
	...

08012bac <_ZN8MainViewC1Ev>:
#include <touchgfx/Color.hpp>

static int color_index = 0;
static int rev_limit = 9000;

MainView::MainView()
 8012bac:	b590      	push	{r4, r7, lr}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7fe f88e 	bl	8010cd8 <_ZN12MainViewBaseC1Ev>
 8012bbc:	4a15      	ldr	r2, [pc, #84]	; (8012c14 <_ZN8MainViewC1Ev+0x68>)
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012bc2:	4b15      	ldr	r3, [pc, #84]	; (8012c18 <_ZN8MainViewC1Ev+0x6c>)
 8012bc4:	881b      	ldrh	r3, [r3, #0]
 8012bc6:	461c      	mov	r4, r3
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7ff ffae 	bl	8012b30 <_ZNK8touchgfx8Drawable8getWidthEv>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	429c      	cmp	r4, r3
 8012bd8:	dc0b      	bgt.n	8012bf2 <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8012bda:	4b10      	ldr	r3, [pc, #64]	; (8012c1c <_ZN8MainViewC1Ev+0x70>)
 8012bdc:	881b      	ldrh	r3, [r3, #0]
 8012bde:	461c      	mov	r4, r3
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7ff ffaf 	bl	8012b4a <_ZNK8touchgfx8Drawable9getHeightEv>
 8012bec:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012bee:	429c      	cmp	r4, r3
 8012bf0:	dd01      	ble.n	8012bf6 <_ZN8MainViewC1Ev+0x4a>
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	e000      	b.n	8012bf8 <_ZN8MainViewC1Ev+0x4c>
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d005      	beq.n	8012c08 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	3340      	adds	r3, #64	; 0x40
 8012c00:	2101      	movs	r1, #1
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7fd fb60 	bl	80102c8 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	370c      	adds	r7, #12
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd90      	pop	{r4, r7, pc}
 8012c12:	bf00      	nop
 8012c14:	08026a24 	.word	0x08026a24
 8012c18:	2000bcbc 	.word	0x2000bcbc
 8012c1c:	2000bcbe 	.word	0x2000bcbe

08012c20 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8012c20:	b480      	push	{r7}
 8012c22:	b083      	sub	sp, #12
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
}
 8012c28:	bf00      	nop
 8012c2a:	370c      	adds	r7, #12
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c32:	4770      	bx	lr

08012c34 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
}
 8012c3c:	bf00      	nop
 8012c3e:	370c      	adds	r7, #12
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr

08012c48 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8012c4e:	2200      	movs	r2, #0
 8012c50:	2100      	movs	r1, #0
 8012c52:	2000      	movs	r0, #0
 8012c54:	f7fe f816 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	607b      	str	r3, [r7, #4]
}
 8012c5c:	bf00      	nop
 8012c5e:	4618      	mov	r0, r3
 8012c60:	3708      	adds	r7, #8
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}
	...

08012c68 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0

	color_index ++;
 8012c6e:	4b1e      	ldr	r3, [pc, #120]	; (8012ce8 <_ZL20getColorFromRevLimitv+0x80>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	3301      	adds	r3, #1
 8012c74:	4a1c      	ldr	r2, [pc, #112]	; (8012ce8 <_ZL20getColorFromRevLimitv+0x80>)
 8012c76:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 8012c78:	4b1b      	ldr	r3, [pc, #108]	; (8012ce8 <_ZL20getColorFromRevLimitv+0x80>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2b02      	cmp	r3, #2
 8012c7e:	dd02      	ble.n	8012c86 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 8012c80:	4b19      	ldr	r3, [pc, #100]	; (8012ce8 <_ZL20getColorFromRevLimitv+0x80>)
 8012c82:	2200      	movs	r2, #0
 8012c84:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8012c86:	2200      	movs	r2, #0
 8012c88:	2100      	movs	r1, #0
 8012c8a:	20ff      	movs	r0, #255	; 0xff
 8012c8c:	f7fd fffa 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012c90:	4603      	mov	r3, r0
 8012c92:	60fb      	str	r3, [r7, #12]
	colortype green_color = touchgfx::Color::getColorFrom24BitRGB(0,255,0);
 8012c94:	2200      	movs	r2, #0
 8012c96:	21ff      	movs	r1, #255	; 0xff
 8012c98:	2000      	movs	r0, #0
 8012c9a:	f7fd fff3 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 8012ca2:	22ff      	movs	r2, #255	; 0xff
 8012ca4:	21ff      	movs	r1, #255	; 0xff
 8012ca6:	20ff      	movs	r0, #255	; 0xff
 8012ca8:	f7fd ffec 	bl	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012cac:	4603      	mov	r3, r0
 8012cae:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8012cb0:	463b      	mov	r3, r7
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7ff ff1a 	bl	8012aec <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8012cb8:	4b0b      	ldr	r3, [pc, #44]	; (8012ce8 <_ZL20getColorFromRevLimitv+0x80>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d101      	bne.n	8012cc4 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8012cc4:	4b08      	ldr	r3, [pc, #32]	; (8012ce8 <_ZL20getColorFromRevLimitv+0x80>)
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	2b01      	cmp	r3, #1
 8012cca:	d101      	bne.n	8012cd0 <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = green_color;
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 8012cd0:	4b05      	ldr	r3, [pc, #20]	; (8012ce8 <_ZL20getColorFromRevLimitv+0x80>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	2b02      	cmp	r3, #2
 8012cd6:	d101      	bne.n	8012cdc <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8012cdc:	683b      	ldr	r3, [r7, #0]
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3710      	adds	r7, #16
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	2000865c 	.word	0x2000865c

08012cec <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 8012cec:	b5b0      	push	{r4, r5, r7, lr}
 8012cee:	b086      	sub	sp, #24
 8012cf0:	af02      	add	r7, sp, #8
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	4a6b      	ldr	r2, [pc, #428]	; (8012eac <_ZN8MainView14updateSettingsEPh+0x1c0>)
 8012d00:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (new_settings->rpm10*1000), 0, 0);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f503 600c 	add.w	r0, r3, #2240	; 0x8c0
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8012d0e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8012eb0 <_ZN8MainView14updateSettingsEPh+0x1c4>
 8012d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012d16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d1a:	ee17 3a90 	vmov	r3, s15
 8012d1e:	b21a      	sxth	r2, r3
 8012d20:	2300      	movs	r3, #0
 8012d22:	9300      	str	r3, [sp, #0]
 8012d24:	2300      	movs	r3, #0
 8012d26:	2100      	movs	r1, #0
 8012d28:	f002 fd1e 	bl	8015768 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8012d32:	4618      	mov	r0, r3
 8012d34:	f006 fc16 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	if(new_settings->has_float)
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	f000 80bb 	beq.w	8012eb8 <_ZN8MainView14updateSettingsEPh+0x1cc>
	{
		Unicode::snprintfFloat(rpm1Buffer, RPM1_SIZE, "%.1f", new_settings->rpm1);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f603 20d8 	addw	r0, r3, #2776	; 0xad8
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8012d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8012d52:	4a58      	ldr	r2, [pc, #352]	; (8012eb4 <_ZN8MainView14updateSettingsEPh+0x1c8>)
 8012d54:	2102      	movs	r1, #2
 8012d56:	f7ff fed7 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		rpm1.invalidate();
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8012d60:	4618      	mov	r0, r3
 8012d62:	f006 fbff 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintfFloat(rpm2Buffer, RPM2_SIZE, "%.1f", new_settings->rpm2);
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	f603 20dc 	addw	r0, r3, #2780	; 0xadc
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012d72:	eeb0 0a67 	vmov.f32	s0, s15
 8012d76:	4a4f      	ldr	r2, [pc, #316]	; (8012eb4 <_ZN8MainView14updateSettingsEPh+0x1c8>)
 8012d78:	2102      	movs	r1, #2
 8012d7a:	f7ff fec5 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		rpm2.invalidate();
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8012d84:	4618      	mov	r0, r3
 8012d86:	f006 fbed 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintfFloat(rpm3Buffer, RPM3_SIZE, "%.1f", new_settings->rpm3);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f503 602e 	add.w	r0, r3, #2784	; 0xae0
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	edd3 7a03 	vldr	s15, [r3, #12]
 8012d96:	eeb0 0a67 	vmov.f32	s0, s15
 8012d9a:	4a46      	ldr	r2, [pc, #280]	; (8012eb4 <_ZN8MainView14updateSettingsEPh+0x1c8>)
 8012d9c:	2102      	movs	r1, #2
 8012d9e:	f7ff feb3 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		rpm3.invalidate();
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8012da8:	4618      	mov	r0, r3
 8012daa:	f006 fbdb 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintfFloat(rpm4Buffer, RPM4_SIZE, "%.1f", new_settings->rpm4);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f603 20e4 	addw	r0, r3, #2788	; 0xae4
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	edd3 7a04 	vldr	s15, [r3, #16]
 8012dba:	eeb0 0a67 	vmov.f32	s0, s15
 8012dbe:	4a3d      	ldr	r2, [pc, #244]	; (8012eb4 <_ZN8MainView14updateSettingsEPh+0x1c8>)
 8012dc0:	2102      	movs	r1, #2
 8012dc2:	f7ff fea1 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		rpm4.invalidate();
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f006 fbc9 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintfFloat(rpm5Buffer, RPM5_SIZE, "%.1f", new_settings->rpm5);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f603 20e8 	addw	r0, r3, #2792	; 0xae8
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	edd3 7a05 	vldr	s15, [r3, #20]
 8012dde:	eeb0 0a67 	vmov.f32	s0, s15
 8012de2:	4a34      	ldr	r2, [pc, #208]	; (8012eb4 <_ZN8MainView14updateSettingsEPh+0x1c8>)
 8012de4:	2102      	movs	r1, #2
 8012de6:	f7ff fe8f 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		rpm5.invalidate();
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8012df0:	4618      	mov	r0, r3
 8012df2:	f006 fbb7 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintfFloat(rpm6Buffer, RPM6_SIZE, "%.1f", new_settings->rpm6);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f603 20ec 	addw	r0, r3, #2796	; 0xaec
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	edd3 7a06 	vldr	s15, [r3, #24]
 8012e02:	eeb0 0a67 	vmov.f32	s0, s15
 8012e06:	4a2b      	ldr	r2, [pc, #172]	; (8012eb4 <_ZN8MainView14updateSettingsEPh+0x1c8>)
 8012e08:	2102      	movs	r1, #2
 8012e0a:	f7ff fe7d 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		rpm6.invalidate();
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8012e14:	4618      	mov	r0, r3
 8012e16:	f006 fba5 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintfFloat(rpm7Buffer, RPM7_SIZE, "%.1f", new_settings->rpm7);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	f503 602f 	add.w	r0, r3, #2800	; 0xaf0
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	edd3 7a07 	vldr	s15, [r3, #28]
 8012e26:	eeb0 0a67 	vmov.f32	s0, s15
 8012e2a:	4a22      	ldr	r2, [pc, #136]	; (8012eb4 <_ZN8MainView14updateSettingsEPh+0x1c8>)
 8012e2c:	2102      	movs	r1, #2
 8012e2e:	f7ff fe6b 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		rpm7.invalidate();
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f006 fb93 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintfFloat(rpm8Buffer, RPM8_SIZE, "%.1f", new_settings->rpm8);
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f603 20f4 	addw	r0, r3, #2804	; 0xaf4
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	edd3 7a08 	vldr	s15, [r3, #32]
 8012e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8012e4e:	4a19      	ldr	r2, [pc, #100]	; (8012eb4 <_ZN8MainView14updateSettingsEPh+0x1c8>)
 8012e50:	2102      	movs	r1, #2
 8012e52:	f7ff fe59 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		rpm8.invalidate();
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f006 fb81 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintfFloat(rpm9Buffer, RPM9_SIZE, "%.1f", new_settings->rpm9);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8012e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8012e72:	4a10      	ldr	r2, [pc, #64]	; (8012eb4 <_ZN8MainView14updateSettingsEPh+0x1c8>)
 8012e74:	2102      	movs	r1, #2
 8012e76:	f7ff fe47 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		rpm9.invalidate();
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8012e80:	4618      	mov	r0, r3
 8012e82:	f006 fb6f 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintfFloat(rpm10Buffer, RPM10_SIZE, "%.1f", new_settings->rpm10);
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	f603 20fc 	addw	r0, r3, #2812	; 0xafc
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8012e92:	eeb0 0a67 	vmov.f32	s0, s15
 8012e96:	4a07      	ldr	r2, [pc, #28]	; (8012eb4 <_ZN8MainView14updateSettingsEPh+0x1c8>)
 8012e98:	2102      	movs	r1, #2
 8012e9a:	f7ff fe35 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		rpm10.invalidate();
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f006 fb5d 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
			rpm9.invalidate();
			Unicode::snprintf(rpm10Buffer, RPM10_SIZE, "%d", new_settings->rpm10);
			rpm10.invalidate();
	}

}
 8012eaa:	e0eb      	b.n	8013084 <_ZN8MainView14updateSettingsEPh+0x398>
 8012eac:	20000038 	.word	0x20000038
 8012eb0:	447a0000 	.word	0x447a0000
 8012eb4:	08026364 	.word	0x08026364
			Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	f603 25d8 	addw	r5, r3, #2776	; 0xad8
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7ed fb58 	bl	8000578 <__aeabi_f2d>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	460c      	mov	r4, r1
 8012ecc:	e9cd 3400 	strd	r3, r4, [sp]
 8012ed0:	4a6e      	ldr	r2, [pc, #440]	; (801308c <_ZN8MainView14updateSettingsEPh+0x3a0>)
 8012ed2:	2102      	movs	r1, #2
 8012ed4:	4628      	mov	r0, r5
 8012ed6:	f007 ff73 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			rpm1.invalidate();
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f006 fb3f 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
			Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f603 25dc 	addw	r5, r3, #2780	; 0xadc
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	689b      	ldr	r3, [r3, #8]
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f7ed fb41 	bl	8000578 <__aeabi_f2d>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	460c      	mov	r4, r1
 8012efa:	e9cd 3400 	strd	r3, r4, [sp]
 8012efe:	4a63      	ldr	r2, [pc, #396]	; (801308c <_ZN8MainView14updateSettingsEPh+0x3a0>)
 8012f00:	2102      	movs	r1, #2
 8012f02:	4628      	mov	r0, r5
 8012f04:	f007 ff5c 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			rpm2.invalidate();
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f006 fb28 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
			Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f503 652e 	add.w	r5, r3, #2784	; 0xae0
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	68db      	ldr	r3, [r3, #12]
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7ed fb2a 	bl	8000578 <__aeabi_f2d>
 8012f24:	4603      	mov	r3, r0
 8012f26:	460c      	mov	r4, r1
 8012f28:	e9cd 3400 	strd	r3, r4, [sp]
 8012f2c:	4a57      	ldr	r2, [pc, #348]	; (801308c <_ZN8MainView14updateSettingsEPh+0x3a0>)
 8012f2e:	2102      	movs	r1, #2
 8012f30:	4628      	mov	r0, r5
 8012f32:	f007 ff45 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			rpm3.invalidate();
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f006 fb11 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
			Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f603 25e4 	addw	r5, r3, #2788	; 0xae4
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	691b      	ldr	r3, [r3, #16]
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7ed fb13 	bl	8000578 <__aeabi_f2d>
 8012f52:	4603      	mov	r3, r0
 8012f54:	460c      	mov	r4, r1
 8012f56:	e9cd 3400 	strd	r3, r4, [sp]
 8012f5a:	4a4c      	ldr	r2, [pc, #304]	; (801308c <_ZN8MainView14updateSettingsEPh+0x3a0>)
 8012f5c:	2102      	movs	r1, #2
 8012f5e:	4628      	mov	r0, r5
 8012f60:	f007 ff2e 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			rpm4.invalidate();
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f006 fafa 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
			Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f603 25e8 	addw	r5, r3, #2792	; 0xae8
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	695b      	ldr	r3, [r3, #20]
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7ed fafc 	bl	8000578 <__aeabi_f2d>
 8012f80:	4603      	mov	r3, r0
 8012f82:	460c      	mov	r4, r1
 8012f84:	e9cd 3400 	strd	r3, r4, [sp]
 8012f88:	4a40      	ldr	r2, [pc, #256]	; (801308c <_ZN8MainView14updateSettingsEPh+0x3a0>)
 8012f8a:	2102      	movs	r1, #2
 8012f8c:	4628      	mov	r0, r5
 8012f8e:	f007 ff17 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			rpm5.invalidate();
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f006 fae3 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
			Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f603 25ec 	addw	r5, r3, #2796	; 0xaec
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	699b      	ldr	r3, [r3, #24]
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7ed fae5 	bl	8000578 <__aeabi_f2d>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	460c      	mov	r4, r1
 8012fb2:	e9cd 3400 	strd	r3, r4, [sp]
 8012fb6:	4a35      	ldr	r2, [pc, #212]	; (801308c <_ZN8MainView14updateSettingsEPh+0x3a0>)
 8012fb8:	2102      	movs	r1, #2
 8012fba:	4628      	mov	r0, r5
 8012fbc:	f007 ff00 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			rpm6.invalidate();
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f006 facc 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
			Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f503 652f 	add.w	r5, r3, #2800	; 0xaf0
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	69db      	ldr	r3, [r3, #28]
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7ed face 	bl	8000578 <__aeabi_f2d>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	460c      	mov	r4, r1
 8012fe0:	e9cd 3400 	strd	r3, r4, [sp]
 8012fe4:	4a29      	ldr	r2, [pc, #164]	; (801308c <_ZN8MainView14updateSettingsEPh+0x3a0>)
 8012fe6:	2102      	movs	r1, #2
 8012fe8:	4628      	mov	r0, r5
 8012fea:	f007 fee9 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			rpm7.invalidate();
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f006 fab5 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
			Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f603 25f4 	addw	r5, r3, #2804	; 0xaf4
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	6a1b      	ldr	r3, [r3, #32]
 8013004:	4618      	mov	r0, r3
 8013006:	f7ed fab7 	bl	8000578 <__aeabi_f2d>
 801300a:	4603      	mov	r3, r0
 801300c:	460c      	mov	r4, r1
 801300e:	e9cd 3400 	strd	r3, r4, [sp]
 8013012:	4a1e      	ldr	r2, [pc, #120]	; (801308c <_ZN8MainView14updateSettingsEPh+0x3a0>)
 8013014:	2102      	movs	r1, #2
 8013016:	4628      	mov	r0, r5
 8013018:	f007 fed2 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			rpm8.invalidate();
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8013022:	4618      	mov	r0, r3
 8013024:	f006 fa9e 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
			Unicode::snprintf(rpm9Buffer, RPM9_SIZE, "%d", new_settings->rpm9);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f603 25f8 	addw	r5, r3, #2808	; 0xaf8
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013032:	4618      	mov	r0, r3
 8013034:	f7ed faa0 	bl	8000578 <__aeabi_f2d>
 8013038:	4603      	mov	r3, r0
 801303a:	460c      	mov	r4, r1
 801303c:	e9cd 3400 	strd	r3, r4, [sp]
 8013040:	4a12      	ldr	r2, [pc, #72]	; (801308c <_ZN8MainView14updateSettingsEPh+0x3a0>)
 8013042:	2102      	movs	r1, #2
 8013044:	4628      	mov	r0, r5
 8013046:	f007 febb 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			rpm9.invalidate();
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8013050:	4618      	mov	r0, r3
 8013052:	f006 fa87 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
			Unicode::snprintf(rpm10Buffer, RPM10_SIZE, "%d", new_settings->rpm10);
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f603 25fc 	addw	r5, r3, #2812	; 0xafc
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013060:	4618      	mov	r0, r3
 8013062:	f7ed fa89 	bl	8000578 <__aeabi_f2d>
 8013066:	4603      	mov	r3, r0
 8013068:	460c      	mov	r4, r1
 801306a:	e9cd 3400 	strd	r3, r4, [sp]
 801306e:	4a07      	ldr	r2, [pc, #28]	; (801308c <_ZN8MainView14updateSettingsEPh+0x3a0>)
 8013070:	2102      	movs	r1, #2
 8013072:	4628      	mov	r0, r5
 8013074:	f007 fea4 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			rpm10.invalidate();
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801307e:	4618      	mov	r0, r3
 8013080:	f006 fa70 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8013084:	bf00      	nop
 8013086:	3710      	adds	r7, #16
 8013088:	46bd      	mov	sp, r7
 801308a:	bdb0      	pop	{r4, r5, r7, pc}
 801308c:	0802636c 	.word	0x0802636c

08013090 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8013090:	b590      	push	{r4, r7, lr}
 8013092:	b085      	sub	sp, #20
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	681a      	ldr	r2, [r3, #0]
 80130a2:	4b84      	ldr	r3, [pc, #528]	; (80132b4 <_ZN8MainView9updateValEPh+0x224>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	bfac      	ite	ge
 80130aa:	2301      	movge	r3, #1
 80130ac:	2300      	movlt	r3, #0
 80130ae:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 80130b0:	7afb      	ldrb	r3, [r7, #11]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d012      	beq.n	80130dc <_ZN8MainView9updateValEPh+0x4c>
	{
		background_is_black = false;
 80130b6:	4b80      	ldr	r3, [pc, #512]	; (80132b8 <_ZN8MainView9updateValEPh+0x228>)
 80130b8:	2200      	movs	r2, #0
 80130ba:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80130c2:	f7ff fdd1 	bl	8012c68 <_ZL20getColorFromRevLimitv>
 80130c6:	4603      	mov	r3, r0
 80130c8:	4619      	mov	r1, r3
 80130ca:	4620      	mov	r0, r4
 80130cc:	f7fd fa98 	bl	8010600 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	3340      	adds	r3, #64	; 0x40
 80130d4:	4618      	mov	r0, r3
 80130d6:	f006 fa45 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
 80130da:	e018      	b.n	801310e <_ZN8MainView9updateValEPh+0x7e>
	}
	else if(!background_is_black){
 80130dc:	4b76      	ldr	r3, [pc, #472]	; (80132b8 <_ZN8MainView9updateValEPh+0x228>)
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	f083 0301 	eor.w	r3, r3, #1
 80130e4:	b2db      	uxtb	r3, r3
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d011      	beq.n	801310e <_ZN8MainView9updateValEPh+0x7e>
		backgroundBox.setColor(getBlackColor());
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80130f0:	f7ff fdaa 	bl	8012c48 <_ZL13getBlackColorv>
 80130f4:	4603      	mov	r3, r0
 80130f6:	4619      	mov	r1, r3
 80130f8:	4620      	mov	r0, r4
 80130fa:	f7fd fa81 	bl	8010600 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	3340      	adds	r3, #64	; 0x40
 8013102:	4618      	mov	r0, r3
 8013104:	f006 fa2e 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8013108:	4b6b      	ldr	r3, [pc, #428]	; (80132b8 <_ZN8MainView9updateValEPh+0x228>)
 801310a:	2201      	movs	r2, #1
 801310c:	701a      	strb	r2, [r3, #0]
	}

	RPMProgressBar.setValue(values->rpm);
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	f503 620c 	add.w	r2, r3, #2240	; 0x8c0
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	4619      	mov	r1, r3
 801311a:	4610      	mov	r0, r2
 801311c:	f002 fa0e 	bl	801553c <_ZN8touchgfx13ImageProgress8setValueEi>
	RPMProgressBar.invalidate();
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8013126:	4618      	mov	r0, r3
 8013128:	f006 fa1c 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f603 3032 	addw	r0, r3, #2866	; 0xb32
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	4a61      	ldr	r2, [pc, #388]	; (80132bc <_ZN8MainView9updateValEPh+0x22c>)
 8013138:	2105      	movs	r1, #5
 801313a:	f007 fe41 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RPMValue.invalidate();
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8013144:	4618      	mov	r0, r3
 8013146:	f006 fa0d 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	f603 3046 	addw	r0, r3, #2886	; 0xb46
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	689b      	ldr	r3, [r3, #8]
 8013154:	4a59      	ldr	r2, [pc, #356]	; (80132bc <_ZN8MainView9updateValEPh+0x22c>)
 8013156:	2105      	movs	r1, #5
 8013158:	f007 fe32 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	MAPValue.invalidate();
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8013162:	4618      	mov	r0, r3
 8013164:	f006 f9fe 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f603 303c 	addw	r0, r3, #2876	; 0xb3c
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	4a52      	ldr	r2, [pc, #328]	; (80132bc <_ZN8MainView9updateValEPh+0x22c>)
 8013174:	2105      	movs	r1, #5
 8013176:	f007 fe23 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	CLTValue.invalidate();
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 8013180:	4618      	mov	r0, r3
 8013182:	f006 f9ef 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f603 20c4 	addw	r0, r3, #2756	; 0xac4
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	edd3 7a03 	vldr	s15, [r3, #12]
 8013192:	eeb0 0a67 	vmov.f32	s0, s15
 8013196:	4a4a      	ldr	r2, [pc, #296]	; (80132c0 <_ZN8MainView9updateValEPh+0x230>)
 8013198:	2105      	movs	r1, #5
 801319a:	f7ff fcb5 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	LambdaValue.invalidate();
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80131a4:	4618      	mov	r0, r3
 80131a6:	f006 f9dd 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f603 20ce 	addw	r0, r3, #2766	; 0xace
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80131b6:	eeb0 0a67 	vmov.f32	s0, s15
 80131ba:	4a41      	ldr	r2, [pc, #260]	; (80132c0 <_ZN8MainView9updateValEPh+0x230>)
 80131bc:	2105      	movs	r1, #5
 80131be:	f7ff fca3 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	TrgtValue.invalidate();
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80131c8:	4618      	mov	r0, r3
 80131ca:	f006 f9cb 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(KMHValueBuffer, KMHVALUE_SIZE, "%d",values->vehicle_spd);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f503 6035 	add.w	r0, r3, #2896	; 0xb50
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	695b      	ldr	r3, [r3, #20]
 80131d8:	4a38      	ldr	r2, [pc, #224]	; (80132bc <_ZN8MainView9updateValEPh+0x22c>)
 80131da:	2105      	movs	r1, #5
 80131dc:	f007 fdf0 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	KMHValue.invalidate();
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80131e6:	4618      	mov	r0, r3
 80131e8:	f006 f9bc 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f603 301e 	addw	r0, r3, #2846	; 0xb1e
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80131f8:	eeb0 0a67 	vmov.f32	s0, s15
 80131fc:	4a31      	ldr	r2, [pc, #196]	; (80132c4 <_ZN8MainView9updateValEPh+0x234>)
 80131fe:	2105      	movs	r1, #5
 8013200:	f7ff fc82 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	OILPressureValue.invalidate();
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f203 6344 	addw	r3, r3, #1604	; 0x644
 801320a:	4618      	mov	r0, r3
 801320c:	f006 f9aa 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f603 3014 	addw	r0, r3, #2836	; 0xb14
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	699b      	ldr	r3, [r3, #24]
 801321a:	4a28      	ldr	r2, [pc, #160]	; (80132bc <_ZN8MainView9updateValEPh+0x22c>)
 801321c:	2105      	movs	r1, #5
 801321e:	f007 fdcf 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	OILTempValue.invalidate();
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013228:	4618      	mov	r0, r3
 801322a:	f006 f99b 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f503 6030 	add.w	r0, r3, #2816	; 0xb00
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	6a1b      	ldr	r3, [r3, #32]
 8013238:	4a20      	ldr	r2, [pc, #128]	; (80132bc <_ZN8MainView9updateValEPh+0x22c>)
 801323a:	2105      	movs	r1, #5
 801323c:	f007 fdc0 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	IATValue.invalidate();
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8013246:	4618      	mov	r0, r3
 8013248:	f006 f98c 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d",values->egt);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f603 300a 	addw	r0, r3, #2826	; 0xb0a
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013256:	4a19      	ldr	r2, [pc, #100]	; (80132bc <_ZN8MainView9updateValEPh+0x22c>)
 8013258:	2105      	movs	r1, #5
 801325a:	f007 fdb1 	bl	801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	EGTValue.invalidate();
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8013264:	4618      	mov	r0, r3
 8013266:	f006 f97d 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	TPSProgress.setValue(values->tps);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	f503 62d6 	add.w	r2, r3, #1712	; 0x6b0
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013274:	4619      	mov	r1, r3
 8013276:	4610      	mov	r0, r2
 8013278:	f002 f810 	bl	801529c <_ZN8touchgfx11BoxProgress8setValueEi>
	RPMProgressBar.invalidate();
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8013282:	4618      	mov	r0, r3
 8013284:	f006 f96e 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f603 3028 	addw	r0, r3, #2856	; 0xb28
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8013294:	eeb0 0a67 	vmov.f32	s0, s15
 8013298:	4a09      	ldr	r2, [pc, #36]	; (80132c0 <_ZN8MainView9updateValEPh+0x230>)
 801329a:	2105      	movs	r1, #5
 801329c:	f7ff fc34 	bl	8012b08 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	BatteryVoltage.invalidate();
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80132a6:	4618      	mov	r0, r3
 80132a8:	f006 f95c 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80132ac:	bf00      	nop
 80132ae:	3714      	adds	r7, #20
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd90      	pop	{r4, r7, pc}
 80132b4:	20000038 	.word	0x20000038
 80132b8:	20008660 	.word	0x20008660
 80132bc:	0802636c 	.word	0x0802636c
 80132c0:	08026370 	.word	0x08026370
 80132c4:	08026364 	.word	0x08026364

080132c8 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2200      	movs	r2, #0
 80132d4:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 80132d6:	2200      	movs	r2, #0
 80132d8:	2130      	movs	r1, #48	; 0x30
 80132da:	2001      	movs	r0, #1
 80132dc:	f7f9 fa89 	bl	800c7f2 <xQueueGenericCreate>
 80132e0:	4602      	mov	r2, r0
 80132e2:	4b07      	ldr	r3, [pc, #28]	; (8013300 <_ZN5ModelC1Ev+0x38>)
 80132e4:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 80132e6:	2200      	movs	r2, #0
 80132e8:	2130      	movs	r1, #48	; 0x30
 80132ea:	2001      	movs	r0, #1
 80132ec:	f7f9 fa81 	bl	800c7f2 <xQueueGenericCreate>
 80132f0:	4602      	mov	r2, r0
 80132f2:	4b04      	ldr	r3, [pc, #16]	; (8013304 <_ZN5ModelC1Ev+0x3c>)
 80132f4:	601a      	str	r2, [r3, #0]
}
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	4618      	mov	r0, r3
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	20008694 	.word	0x20008694
 8013304:	20008698 	.word	0x20008698

08013308 <_ZN5Model4tickEv>:

void Model::tick()
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8013310:	4b1a      	ldr	r3, [pc, #104]	; (801337c <_ZN5Model4tickEv+0x74>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	2200      	movs	r2, #0
 8013316:	491a      	ldr	r1, [pc, #104]	; (8013380 <_ZN5Model4tickEv+0x78>)
 8013318:	4618      	mov	r0, r3
 801331a:	f7f9 fcfb 	bl	800cd14 <xQueueReceive>
 801331e:	4603      	mov	r3, r0
 8013320:	2b01      	cmp	r3, #1
 8013322:	bf0c      	ite	eq
 8013324:	2301      	moveq	r3, #1
 8013326:	2300      	movne	r3, #0
 8013328:	b2db      	uxtb	r3, r3
 801332a:	2b00      	cmp	r3, #0
 801332c:	d009      	beq.n	8013342 <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681a      	ldr	r2, [r3, #0]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	3308      	adds	r3, #8
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	4910      	ldr	r1, [pc, #64]	; (8013380 <_ZN5Model4tickEv+0x78>)
 801333e:	4610      	mov	r0, r2
 8013340:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &values , 0) == pdTRUE)
 8013342:	4b10      	ldr	r3, [pc, #64]	; (8013384 <_ZN5Model4tickEv+0x7c>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	2200      	movs	r2, #0
 8013348:	490d      	ldr	r1, [pc, #52]	; (8013380 <_ZN5Model4tickEv+0x78>)
 801334a:	4618      	mov	r0, r3
 801334c:	f7f9 fce2 	bl	800cd14 <xQueueReceive>
 8013350:	4603      	mov	r3, r0
 8013352:	2b01      	cmp	r3, #1
 8013354:	bf0c      	ite	eq
 8013356:	2301      	moveq	r3, #1
 8013358:	2300      	movne	r3, #0
 801335a:	b2db      	uxtb	r3, r3
 801335c:	2b00      	cmp	r3, #0
 801335e:	d009      	beq.n	8013374 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(values);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681a      	ldr	r2, [r3, #0]
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	330c      	adds	r3, #12
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	4904      	ldr	r1, [pc, #16]	; (8013380 <_ZN5Model4tickEv+0x78>)
 8013370:	4610      	mov	r0, r2
 8013372:	4798      	blx	r3
	}
}
 8013374:	bf00      	nop
 8013376:	3708      	adds	r7, #8
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}
 801337c:	20008694 	.word	0x20008694
 8013380:	20008664 	.word	0x20008664
 8013384:	20008698 	.word	0x20008698

08013388 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8013388:	b480      	push	{r7}
 801338a:	b083      	sub	sp, #12
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
    {
 8013390:	4a04      	ldr	r2, [pc, #16]	; (80133a4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	601a      	str	r2, [r3, #0]
    }
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	4618      	mov	r0, r3
 801339a:	370c      	adds	r7, #12
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr
 80133a4:	08026a70 	.word	0x08026a70

080133a8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
    }
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	f7ff ffe9 	bl	8013388 <_ZN8touchgfx15TouchControllerD1Ev>
 80133b6:	2104      	movs	r1, #4
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f011 fc6e 	bl	8024c9a <_ZdlPvj>
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	4618      	mov	r0, r3
 80133c2:	3708      	adds	r7, #8
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}

080133c8 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80133c8:	b480      	push	{r7}
 80133ca:	b083      	sub	sp, #12
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80133d0:	bf00      	nop
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr

080133dc <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80133dc:	b480      	push	{r7}
 80133de:	b085      	sub	sp, #20
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	60f8      	str	r0, [r7, #12]
 80133e4:	60b9      	str	r1, [r7, #8]
 80133e6:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80133e8:	2300      	movs	r3, #0
}
 80133ea:	4618      	mov	r0, r3
 80133ec:	3714      	adds	r7, #20
 80133ee:	46bd      	mov	sp, r7
 80133f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f4:	4770      	bx	lr
	...

080133f8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	4a05      	ldr	r2, [pc, #20]	; (8013418 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	601a      	str	r2, [r3, #0]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	4618      	mov	r0, r3
 801340a:	f7ff ffbd 	bl	8013388 <_ZN8touchgfx15TouchControllerD1Ev>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	4618      	mov	r0, r3
 8013412:	3708      	adds	r7, #8
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	08026a58 	.word	0x08026a58

0801341c <_ZN20STM32TouchControllerD0Ev>:
 801341c:	b580      	push	{r7, lr}
 801341e:	b082      	sub	sp, #8
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f7ff ffe7 	bl	80133f8 <_ZN20STM32TouchControllerD1Ev>
 801342a:	2104      	movs	r1, #4
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f011 fc34 	bl	8024c9a <_ZdlPvj>
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	4618      	mov	r0, r3
 8013436:	3708      	adds	r7, #8
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}

0801343c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 801343c:	b480      	push	{r7}
 801343e:	b083      	sub	sp, #12
 8013440:	af00      	add	r7, sp, #0
 8013442:	4603      	mov	r3, r0
 8013444:	71fb      	strb	r3, [r7, #7]

}
 8013446:	bf00      	nop
 8013448:	370c      	adds	r7, #12
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr

08013452 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8013452:	b480      	push	{r7}
 8013454:	b083      	sub	sp, #12
 8013456:	af00      	add	r7, sp, #0
 8013458:	4603      	mov	r3, r0
 801345a:	71fb      	strb	r3, [r7, #7]

}
 801345c:	bf00      	nop
 801345e:	370c      	adds	r7, #12
 8013460:	46bd      	mov	sp, r7
 8013462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013466:	4770      	bx	lr

08013468 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013468:	b480      	push	{r7}
 801346a:	b083      	sub	sp, #12
 801346c:	af00      	add	r7, sp, #0
 801346e:	4603      	mov	r3, r0
 8013470:	71fb      	strb	r3, [r7, #7]

}
 8013472:	bf00      	nop
 8013474:	370c      	adds	r7, #12
 8013476:	46bd      	mov	sp, r7
 8013478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347c:	4770      	bx	lr
	...

08013480 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8013480:	b480      	push	{r7}
 8013482:	b083      	sub	sp, #12
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
    {
 8013488:	4a04      	ldr	r2, [pc, #16]	; (801349c <_ZN8touchgfx3HALD1Ev+0x1c>)
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	601a      	str	r2, [r3, #0]
    }
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	4618      	mov	r0, r3
 8013492:	370c      	adds	r7, #12
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr
 801349c:	08027828 	.word	0x08027828

080134a0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
    }
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f7ff ffe9 	bl	8013480 <_ZN8touchgfx3HALD1Ev>
 80134ae:	2178      	movs	r1, #120	; 0x78
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f011 fbf2 	bl	8024c9a <_ZdlPvj>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	4618      	mov	r0, r3
 80134ba:	3708      	adds	r7, #8
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
 80134c8:	460b      	mov	r3, r1
 80134ca:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	78fa      	ldrb	r2, [r7, #3]
 80134d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2201      	movs	r2, #1
 80134d8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80134dc:	bf00      	nop
 80134de:	370c      	adds	r7, #12
 80134e0:	46bd      	mov	sp, r7
 80134e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e6:	4770      	bx	lr

080134e8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b082      	sub	sp, #8
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	685a      	ldr	r2, [r3, #4]
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	4610      	mov	r0, r2
 80134fe:	4798      	blx	r3
 8013500:	4603      	mov	r3, r0
    }
 8013502:	4618      	mov	r0, r3
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}

0801350a <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 801350a:	b580      	push	{r7, lr}
 801350c:	b082      	sub	sp, #8
 801350e:	af00      	add	r7, sp, #0
 8013510:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8013512:	6878      	ldr	r0, [r7, #4]
 8013514:	f003 f91c 	bl	8016750 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	3390      	adds	r3, #144	; 0x90
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	4798      	blx	r3
    }
 8013524:	bf00      	nop
 8013526:	3708      	adds	r7, #8
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}

0801352c <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 801352c:	b480      	push	{r7}
 801352e:	b083      	sub	sp, #12
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
    {
        return false;
 8013536:	2300      	movs	r3, #0
    }
 8013538:	4618      	mov	r0, r3
 801353a:	370c      	adds	r7, #12
 801353c:	46bd      	mov	sp, r7
 801353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013542:	4770      	bx	lr

08013544 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8013544:	b590      	push	{r4, r7, lr}
 8013546:	b08b      	sub	sp, #44	; 0x2c
 8013548:	af00      	add	r7, sp, #0
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	4611      	mov	r1, r2
 8013550:	461a      	mov	r2, r3
 8013552:	460b      	mov	r3, r1
 8013554:	80fb      	strh	r3, [r7, #6]
 8013556:	4613      	mov	r3, r2
 8013558:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 801355a:	f7fc f935 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 801355e:	4602      	mov	r2, r0
 8013560:	6813      	ldr	r3, [r2, #0]
 8013562:	3328      	adds	r3, #40	; 0x28
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	4610      	mov	r0, r2
 8013568:	4798      	blx	r3
 801356a:	4603      	mov	r3, r0
 801356c:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 801356e:	8b7b      	ldrh	r3, [r7, #26]
 8013570:	4a3d      	ldr	r2, [pc, #244]	; (8013668 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8013572:	8812      	ldrh	r2, [r2, #0]
 8013574:	fb02 f303 	mul.w	r3, r2, r3
 8013578:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 801357e:	2300      	movs	r3, #0
 8013580:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8013582:	2300      	movs	r3, #0
 8013584:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8013586:	797b      	ldrb	r3, [r7, #5]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d005      	beq.n	8013598 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 801358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	4413      	add	r3, r2
 8013592:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8013594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013596:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8013598:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801359c:	2b00      	cmp	r3, #0
 801359e:	d005      	beq.n	80135ac <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 80135a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	4413      	add	r3, r2
 80135a6:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 80135a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135aa:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 80135ac:	88fb      	ldrh	r3, [r7, #6]
 80135ae:	3b01      	subs	r3, #1
 80135b0:	2b1f      	cmp	r3, #31
 80135b2:	d84d      	bhi.n	8013650 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 80135b4:	a201      	add	r2, pc, #4	; (adr r2, 80135bc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 80135b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135ba:	bf00      	nop
 80135bc:	0801363d 	.word	0x0801363d
 80135c0:	0801363d 	.word	0x0801363d
 80135c4:	08013651 	.word	0x08013651
 80135c8:	0801363d 	.word	0x0801363d
 80135cc:	08013651 	.word	0x08013651
 80135d0:	08013651 	.word	0x08013651
 80135d4:	08013651 	.word	0x08013651
 80135d8:	0801363d 	.word	0x0801363d
 80135dc:	08013651 	.word	0x08013651
 80135e0:	08013651 	.word	0x08013651
 80135e4:	08013651 	.word	0x08013651
 80135e8:	08013651 	.word	0x08013651
 80135ec:	08013651 	.word	0x08013651
 80135f0:	08013651 	.word	0x08013651
 80135f4:	08013651 	.word	0x08013651
 80135f8:	0801363d 	.word	0x0801363d
 80135fc:	08013651 	.word	0x08013651
 8013600:	08013651 	.word	0x08013651
 8013604:	08013651 	.word	0x08013651
 8013608:	08013651 	.word	0x08013651
 801360c:	08013651 	.word	0x08013651
 8013610:	08013651 	.word	0x08013651
 8013614:	08013651 	.word	0x08013651
 8013618:	0801363d 	.word	0x0801363d
 801361c:	08013651 	.word	0x08013651
 8013620:	08013651 	.word	0x08013651
 8013624:	08013651 	.word	0x08013651
 8013628:	08013651 	.word	0x08013651
 801362c:	08013651 	.word	0x08013651
 8013630:	08013651 	.word	0x08013651
 8013634:	08013651 	.word	0x08013651
 8013638:	0801363d 	.word	0x0801363d
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	3374      	adds	r3, #116	; 0x74
 8013642:	681c      	ldr	r4, [r3, #0]
 8013644:	69fb      	ldr	r3, [r7, #28]
 8013646:	6a3a      	ldr	r2, [r7, #32]
 8013648:	68b9      	ldr	r1, [r7, #8]
 801364a:	68f8      	ldr	r0, [r7, #12]
 801364c:	47a0      	blx	r4
            break;
 801364e:	e006      	b.n	801365e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8013650:	4b06      	ldr	r3, [pc, #24]	; (801366c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8013652:	4a07      	ldr	r2, [pc, #28]	; (8013670 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8013654:	f240 3125 	movw	r1, #805	; 0x325
 8013658:	4806      	ldr	r0, [pc, #24]	; (8013674 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 801365a:	f011 fb49 	bl	8024cf0 <__assert_func>
            break;
        }
    }
 801365e:	bf00      	nop
 8013660:	372c      	adds	r7, #44	; 0x2c
 8013662:	46bd      	mov	sp, r7
 8013664:	bd90      	pop	{r4, r7, pc}
 8013666:	bf00      	nop
 8013668:	2000bcc4 	.word	0x2000bcc4
 801366c:	08026378 	.word	0x08026378
 8013670:	08026b84 	.word	0x08026b84
 8013674:	08026398 	.word	0x08026398

08013678 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013678:	b580      	push	{r7, lr}
 801367a:	b084      	sub	sp, #16
 801367c:	af00      	add	r7, sp, #0
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	60b9      	str	r1, [r7, #8]
 8013682:	607a      	str	r2, [r7, #4]
 8013684:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d106      	bne.n	801369a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 801368c:	4b11      	ldr	r3, [pc, #68]	; (80136d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801368e:	4a12      	ldr	r2, [pc, #72]	; (80136d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8013690:	f240 3137 	movw	r1, #823	; 0x337
 8013694:	4811      	ldr	r0, [pc, #68]	; (80136dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8013696:	f011 fb2b 	bl	8024cf0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	68ba      	ldr	r2, [r7, #8]
 801369e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	683a      	ldr	r2, [r7, #0]
 80136aa:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	bf14      	ite	ne
 80136b2:	2301      	movne	r3, #1
 80136b4:	2300      	moveq	r3, #0
 80136b6:	b2da      	uxtb	r2, r3
 80136b8:	4b09      	ldr	r3, [pc, #36]	; (80136e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80136ba:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	bf14      	ite	ne
 80136c2:	2301      	movne	r3, #1
 80136c4:	2300      	moveq	r3, #0
 80136c6:	b2da      	uxtb	r2, r3
 80136c8:	4b06      	ldr	r3, [pc, #24]	; (80136e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80136ca:	701a      	strb	r2, [r3, #0]
    }
 80136cc:	bf00      	nop
 80136ce:	3710      	adds	r7, #16
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}
 80136d4:	080263dc 	.word	0x080263dc
 80136d8:	08026b34 	.word	0x08026b34
 80136dc:	08026398 	.word	0x08026398
 80136e0:	2000bcc6 	.word	0x2000bcc6
 80136e4:	2000bcc7 	.word	0x2000bcc7

080136e8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	460b      	mov	r3, r1
 80136f2:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d004      	beq.n	8013706 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013700:	887a      	ldrh	r2, [r7, #2]
 8013702:	4610      	mov	r0, r2
 8013704:	4798      	blx	r3
        }
    }
 8013706:	bf00      	nop
 8013708:	3708      	adds	r7, #8
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}

0801370e <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801370e:	b580      	push	{r7, lr}
 8013710:	b082      	sub	sp, #8
 8013712:	af00      	add	r7, sp, #0
 8013714:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	685a      	ldr	r2, [r3, #4]
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	3318      	adds	r3, #24
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	4610      	mov	r0, r2
 8013726:	4798      	blx	r3
 8013728:	4603      	mov	r3, r0
    }
 801372a:	4618      	mov	r0, r3
 801372c:	3708      	adds	r7, #8
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}
	...

08013734 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8013734:	b480      	push	{r7}
 8013736:	b083      	sub	sp, #12
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013748:	429a      	cmp	r2, r3
 801374a:	d017      	beq.n	801377c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 801374c:	4b1a      	ldr	r3, [pc, #104]	; (80137b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801374e:	781b      	ldrb	r3, [r3, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d12a      	bne.n	80137aa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013754:	4b19      	ldr	r3, [pc, #100]	; (80137bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013756:	881a      	ldrh	r2, [r3, #0]
 8013758:	4b19      	ldr	r3, [pc, #100]	; (80137c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801375a:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801375c:	4b19      	ldr	r3, [pc, #100]	; (80137c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801375e:	881a      	ldrh	r2, [r3, #0]
 8013760:	4b19      	ldr	r3, [pc, #100]	; (80137c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013762:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8013764:	4b16      	ldr	r3, [pc, #88]	; (80137c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013766:	881a      	ldrh	r2, [r3, #0]
 8013768:	4b16      	ldr	r3, [pc, #88]	; (80137c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801376a:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 801376c:	4b16      	ldr	r3, [pc, #88]	; (80137c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801376e:	881a      	ldrh	r2, [r3, #0]
 8013770:	4b12      	ldr	r3, [pc, #72]	; (80137bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013772:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013774:	4b10      	ldr	r3, [pc, #64]	; (80137b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013776:	2201      	movs	r2, #1
 8013778:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801377a:	e016      	b.n	80137aa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 801377c:	4b0e      	ldr	r3, [pc, #56]	; (80137b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d012      	beq.n	80137aa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8013784:	4b0f      	ldr	r3, [pc, #60]	; (80137c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013786:	881a      	ldrh	r2, [r3, #0]
 8013788:	4b0d      	ldr	r3, [pc, #52]	; (80137c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801378a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 801378c:	4b0b      	ldr	r3, [pc, #44]	; (80137bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801378e:	881a      	ldrh	r2, [r3, #0]
 8013790:	4b0d      	ldr	r3, [pc, #52]	; (80137c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013792:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8013794:	4b0c      	ldr	r3, [pc, #48]	; (80137c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013796:	881a      	ldrh	r2, [r3, #0]
 8013798:	4b0a      	ldr	r3, [pc, #40]	; (80137c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801379a:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 801379c:	4b08      	ldr	r3, [pc, #32]	; (80137c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801379e:	881a      	ldrh	r2, [r3, #0]
 80137a0:	4b06      	ldr	r3, [pc, #24]	; (80137bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80137a2:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80137a4:	4b04      	ldr	r3, [pc, #16]	; (80137b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80137a6:	2200      	movs	r2, #0
 80137a8:	701a      	strb	r2, [r3, #0]
    }
 80137aa:	bf00      	nop
 80137ac:	370c      	adds	r7, #12
 80137ae:	46bd      	mov	sp, r7
 80137b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b4:	4770      	bx	lr
 80137b6:	bf00      	nop
 80137b8:	2000bcc0 	.word	0x2000bcc0
 80137bc:	2000bcbc 	.word	0x2000bcbc
 80137c0:	2000bcc2 	.word	0x2000bcc2
 80137c4:	2000bcbe 	.word	0x2000bcbe
 80137c8:	2000bcc4 	.word	0x2000bcc4

080137cc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	4618      	mov	r0, r3
 80137d8:	f002 fa3c 	bl	8015c54 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80137dc:	bf00      	nop
 80137de:	3708      	adds	r7, #8
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}

080137e4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b082      	sub	sp, #8
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
 80137ec:	4a05      	ldr	r2, [pc, #20]	; (8013804 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	601a      	str	r2, [r3, #0]
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7ff fe43 	bl	8013480 <_ZN8touchgfx3HALD1Ev>
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	4618      	mov	r0, r3
 80137fe:	3708      	adds	r7, #8
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}
 8013804:	08026d5c 	.word	0x08026d5c

08013808 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f7ff ffe7 	bl	80137e4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013816:	2178      	movs	r1, #120	; 0x78
 8013818:	6878      	ldr	r0, [r7, #4]
 801381a:	f011 fa3e 	bl	8024c9a <_ZdlPvj>
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	4618      	mov	r0, r3
 8013822:	3708      	adds	r7, #8
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}

08013828 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	4618      	mov	r0, r3
 8013834:	f7ff ffca 	bl	80137cc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013838:	bf00      	nop
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b082      	sub	sp, #8
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	4618      	mov	r0, r3
 801384c:	f001 fb0a 	bl	8014e64 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8013850:	bf00      	nop
 8013852:	3708      	adds	r7, #8
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	4618      	mov	r0, r3
 8013864:	f001 fb8a 	bl	8014f7c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8013868:	4603      	mov	r3, r0
}
 801386a:	4618      	mov	r0, r3
 801386c:	3708      	adds	r7, #8
 801386e:	46bd      	mov	sp, r7
 8013870:	bd80      	pop	{r7, pc}

08013872 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8013872:	b580      	push	{r7, lr}
 8013874:	b082      	sub	sp, #8
 8013876:	af00      	add	r7, sp, #0
 8013878:	6078      	str	r0, [r7, #4]
 801387a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6839      	ldr	r1, [r7, #0]
 8013880:	4618      	mov	r0, r3
 8013882:	f001 fb89 	bl	8014f98 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8013886:	bf00      	nop
 8013888:	3708      	adds	r7, #8
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}

0801388e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801388e:	b580      	push	{r7, lr}
 8013890:	b082      	sub	sp, #8
 8013892:	af00      	add	r7, sp, #0
 8013894:	6078      	str	r0, [r7, #4]
 8013896:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	6839      	ldr	r1, [r7, #0]
 801389c:	4618      	mov	r0, r3
 801389e:	f001 fb91 	bl	8014fc4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 80138a2:	bf00      	nop
 80138a4:	3708      	adds	r7, #8
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}

080138aa <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80138aa:	b580      	push	{r7, lr}
 80138ac:	b082      	sub	sp, #8
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	4618      	mov	r0, r3
 80138b6:	f001 fb07 	bl	8014ec8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80138ba:	bf00      	nop
 80138bc:	3708      	adds	r7, #8
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}

080138c2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80138c2:	b580      	push	{r7, lr}
 80138c4:	b082      	sub	sp, #8
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	4618      	mov	r0, r3
 80138ce:	f001 fb0b 	bl	8014ee8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80138d2:	bf00      	nop
 80138d4:	3708      	adds	r7, #8
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}

080138da <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80138da:	b580      	push	{r7, lr}
 80138dc:	b082      	sub	sp, #8
 80138de:	af00      	add	r7, sp, #0
 80138e0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	4618      	mov	r0, r3
 80138e6:	f001 fb0d 	bl	8014f04 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80138ea:	bf00      	nop
 80138ec:	3708      	adds	r7, #8
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}

080138f2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80138f2:	b580      	push	{r7, lr}
 80138f4:	b082      	sub	sp, #8
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	4618      	mov	r0, r3
 80138fe:	f001 fb0f 	bl	8014f20 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8013902:	bf00      	nop
 8013904:	3708      	adds	r7, #8
 8013906:	46bd      	mov	sp, r7
 8013908:	bd80      	pop	{r7, pc}
	...

0801390c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801390c:	b580      	push	{r7, lr}
 801390e:	b082      	sub	sp, #8
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	4a05      	ldr	r2, [pc, #20]	; (801392c <_ZN11TouchGFXHALD1Ev+0x20>)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	601a      	str	r2, [r3, #0]
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	4618      	mov	r0, r3
 801391e:	f7ff ff61 	bl	80137e4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	4618      	mov	r0, r3
 8013926:	3708      	adds	r7, #8
 8013928:	46bd      	mov	sp, r7
 801392a:	bd80      	pop	{r7, pc}
 801392c:	08026a88 	.word	0x08026a88

08013930 <_ZN11TouchGFXHALD0Ev>:
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f7ff ffe7 	bl	801390c <_ZN11TouchGFXHALD1Ev>
 801393e:	2178      	movs	r1, #120	; 0x78
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f011 f9aa 	bl	8024c9a <_ZdlPvj>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	4618      	mov	r0, r3
 801394a:	3708      	adds	r7, #8
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}

08013950 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8013950:	b580      	push	{r7, lr}
 8013952:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8013954:	2203      	movs	r2, #3
 8013956:	2100      	movs	r1, #0
 8013958:	2001      	movs	r0, #1
 801395a:	f7f8 ff4a 	bl	800c7f2 <xQueueGenericCreate>
 801395e:	4602      	mov	r2, r0
 8013960:	4b0b      	ldr	r3, [pc, #44]	; (8013990 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013962:	601a      	str	r2, [r3, #0]
 8013964:	4b0a      	ldr	r3, [pc, #40]	; (8013990 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d006      	beq.n	801397a <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 801396c:	4b08      	ldr	r3, [pc, #32]	; (8013990 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801396e:	6818      	ldr	r0, [r3, #0]
 8013970:	2300      	movs	r3, #0
 8013972:	2200      	movs	r2, #0
 8013974:	2100      	movs	r1, #0
 8013976:	f7f8 ff9d 	bl	800c8b4 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 801397a:	2200      	movs	r2, #0
 801397c:	2101      	movs	r1, #1
 801397e:	2001      	movs	r0, #1
 8013980:	f7f8 ff37 	bl	800c7f2 <xQueueGenericCreate>
 8013984:	4602      	mov	r2, r0
 8013986:	4b03      	ldr	r3, [pc, #12]	; (8013994 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8013988:	601a      	str	r2, [r3, #0]
}
 801398a:	bf00      	nop
 801398c:	bd80      	pop	{r7, pc}
 801398e:	bf00      	nop
 8013990:	2000869c 	.word	0x2000869c
 8013994:	200086a0 	.word	0x200086a0

08013998 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8013998:	b580      	push	{r7, lr}
 801399a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 801399c:	4b04      	ldr	r3, [pc, #16]	; (80139b0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	f04f 31ff 	mov.w	r1, #4294967295
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7f9 fa97 	bl	800ced8 <xQueueSemaphoreTake>
}
 80139aa:	bf00      	nop
 80139ac:	bd80      	pop	{r7, pc}
 80139ae:	bf00      	nop
 80139b0:	2000869c 	.word	0x2000869c

080139b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80139b8:	4b04      	ldr	r3, [pc, #16]	; (80139cc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80139ba:	6818      	ldr	r0, [r3, #0]
 80139bc:	2300      	movs	r3, #0
 80139be:	2200      	movs	r2, #0
 80139c0:	2100      	movs	r1, #0
 80139c2:	f7f8 ff77 	bl	800c8b4 <xQueueGenericSend>
}
 80139c6:	bf00      	nop
 80139c8:	bd80      	pop	{r7, pc}
 80139ca:	bf00      	nop
 80139cc:	2000869c 	.word	0x2000869c

080139d0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 80139d4:	4b03      	ldr	r3, [pc, #12]	; (80139e4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	2100      	movs	r1, #0
 80139da:	4618      	mov	r0, r3
 80139dc:	f7f9 fa7c 	bl	800ced8 <xQueueSemaphoreTake>
}
 80139e0:	bf00      	nop
 80139e2:	bd80      	pop	{r7, pc}
 80139e4:	2000869c 	.word	0x2000869c

080139e8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80139ee:	2300      	movs	r3, #0
 80139f0:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80139f2:	4b0b      	ldr	r3, [pc, #44]	; (8013a20 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	1d3a      	adds	r2, r7, #4
 80139f8:	4611      	mov	r1, r2
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7f9 f8f8 	bl	800cbf0 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d007      	beq.n	8013a16 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8013a06:	4b07      	ldr	r3, [pc, #28]	; (8013a24 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8013a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a0c:	601a      	str	r2, [r3, #0]
 8013a0e:	f3bf 8f4f 	dsb	sy
 8013a12:	f3bf 8f6f 	isb	sy
}
 8013a16:	bf00      	nop
 8013a18:	3708      	adds	r7, #8
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	2000869c 	.word	0x2000869c
 8013a24:	e000ed04 	.word	0xe000ed04

08013a28 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
    if (vsync_q)
 8013a2e:	4b0e      	ldr	r3, [pc, #56]	; (8013a68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d013      	beq.n	8013a5e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8013a36:	2300      	movs	r3, #0
 8013a38:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8013a3a:	4b0b      	ldr	r3, [pc, #44]	; (8013a68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013a3c:	6818      	ldr	r0, [r3, #0]
 8013a3e:	1d3a      	adds	r2, r7, #4
 8013a40:	2300      	movs	r3, #0
 8013a42:	490a      	ldr	r1, [pc, #40]	; (8013a6c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8013a44:	f7f9 f838 	bl	800cab8 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d007      	beq.n	8013a5e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8013a4e:	4b08      	ldr	r3, [pc, #32]	; (8013a70 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8013a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a54:	601a      	str	r2, [r3, #0]
 8013a56:	f3bf 8f4f 	dsb	sy
 8013a5a:	f3bf 8f6f 	isb	sy
    }
}
 8013a5e:	bf00      	nop
 8013a60:	3708      	adds	r7, #8
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}
 8013a66:	bf00      	nop
 8013a68:	200086a0 	.word	0x200086a0
 8013a6c:	2000003c 	.word	0x2000003c
 8013a70:	e000ed04 	.word	0xe000ed04

08013a74 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8013a78:	4b08      	ldr	r3, [pc, #32]	; (8013a9c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	4908      	ldr	r1, [pc, #32]	; (8013aa0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7f9 f947 	bl	800cd14 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8013a86:	4b05      	ldr	r3, [pc, #20]	; (8013a9c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a8e:	4904      	ldr	r1, [pc, #16]	; (8013aa0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7f9 f93f 	bl	800cd14 <xQueueReceive>
}
 8013a96:	bf00      	nop
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	200086a0 	.word	0x200086a0
 8013aa0:	2000003c 	.word	0x2000003c

08013aa4 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b082      	sub	sp, #8
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	4603      	mov	r3, r0
 8013aac:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8013aae:	88fb      	ldrh	r3, [r7, #6]
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f7f9 fe6f 	bl	800d794 <vTaskDelay>
}
 8013ab6:	bf00      	nop
 8013ab8:	3708      	adds	r7, #8
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}
	...

08013ac0 <__NVIC_EnableIRQ>:
{
 8013ac0:	b480      	push	{r7}
 8013ac2:	b083      	sub	sp, #12
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	db0d      	blt.n	8013aee <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	f003 021f 	and.w	r2, r3, #31
 8013adc:	4907      	ldr	r1, [pc, #28]	; (8013afc <__NVIC_EnableIRQ+0x3c>)
 8013ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ae2:	095b      	lsrs	r3, r3, #5
 8013ae4:	2001      	movs	r0, #1
 8013ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8013aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013aee:	bf00      	nop
 8013af0:	370c      	adds	r7, #12
 8013af2:	46bd      	mov	sp, r7
 8013af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af8:	4770      	bx	lr
 8013afa:	bf00      	nop
 8013afc:	e000e100 	.word	0xe000e100

08013b00 <__NVIC_DisableIRQ>:
{
 8013b00:	b480      	push	{r7}
 8013b02:	b083      	sub	sp, #12
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	4603      	mov	r3, r0
 8013b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	db12      	blt.n	8013b38 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	f003 021f 	and.w	r2, r3, #31
 8013b1c:	4909      	ldr	r1, [pc, #36]	; (8013b44 <__NVIC_DisableIRQ+0x44>)
 8013b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b22:	095b      	lsrs	r3, r3, #5
 8013b24:	2001      	movs	r0, #1
 8013b26:	fa00 f202 	lsl.w	r2, r0, r2
 8013b2a:	3320      	adds	r3, #32
 8013b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013b30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013b34:	f3bf 8f6f 	isb	sy
}
 8013b38:	bf00      	nop
 8013b3a:	370c      	adds	r7, #12
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b42:	4770      	bx	lr
 8013b44:	e000e100 	.word	0xe000e100

08013b48 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8013b48:	b480      	push	{r7}
 8013b4a:	b083      	sub	sp, #12
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
        return color;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
    }
 8013b54:	4618      	mov	r0, r3
 8013b56:	370c      	adds	r7, #12
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5e:	4770      	bx	lr

08013b60 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8013b60:	b480      	push	{r7}
 8013b62:	b083      	sub	sp, #12
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	b29b      	uxth	r3, r3
    }
 8013b6e:	4618      	mov	r0, r3
 8013b70:	370c      	adds	r7, #12
 8013b72:	46bd      	mov	sp, r7
 8013b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b78:	4770      	bx	lr
	...

08013b7c <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8013b7c:	b480      	push	{r7}
 8013b7e:	b083      	sub	sp, #12
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
    {
 8013b84:	4a04      	ldr	r2, [pc, #16]	; (8013b98 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	601a      	str	r2, [r3, #0]
    }
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	370c      	adds	r7, #12
 8013b90:	46bd      	mov	sp, r7
 8013b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b96:	4770      	bx	lr
 8013b98:	08026c30 	.word	0x08026c30

08013b9c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
    }
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f7ff ffe9 	bl	8013b7c <_ZN8touchgfx9DMA_QueueD1Ev>
 8013baa:	2104      	movs	r1, #4
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f011 f874 	bl	8024c9a <_ZdlPvj>
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3708      	adds	r7, #8
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}

08013bbc <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	3344      	adds	r3, #68	; 0x44
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	4798      	blx	r3
    }
 8013bd0:	bf00      	nop
 8013bd2:	3708      	adds	r7, #8
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}

08013bd8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8013bd8:	b480      	push	{r7}
 8013bda:	b083      	sub	sp, #12
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8013be0:	2300      	movs	r3, #0
    }
 8013be2:	4618      	mov	r0, r3
 8013be4:	370c      	adds	r7, #12
 8013be6:	46bd      	mov	sp, r7
 8013be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bec:	4770      	bx	lr
	...

08013bf0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8013bf0:	b480      	push	{r7}
 8013bf2:	b083      	sub	sp, #12
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
    {
 8013bf8:	4a04      	ldr	r2, [pc, #16]	; (8013c0c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	601a      	str	r2, [r3, #0]
    }
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	4618      	mov	r0, r3
 8013c02:	370c      	adds	r7, #12
 8013c04:	46bd      	mov	sp, r7
 8013c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0a:	4770      	bx	lr
 8013c0c:	08027c6c 	.word	0x08027c6c

08013c10 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b082      	sub	sp, #8
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
    }
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f7ff ffe9 	bl	8013bf0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8013c1e:	210c      	movs	r1, #12
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f011 f83a 	bl	8024c9a <_ZdlPvj>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3708      	adds	r7, #8
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}

08013c30 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8013c30:	b480      	push	{r7}
 8013c32:	b083      	sub	sp, #12
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8013c3a:	4a09      	ldr	r2, [pc, #36]	; (8013c60 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	601a      	str	r2, [r3, #0]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	683a      	ldr	r2, [r7, #0]
 8013c44:	605a      	str	r2, [r3, #4]
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	2200      	movs	r2, #0
 8013c4a:	721a      	strb	r2, [r3, #8]
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	725a      	strb	r2, [r3, #9]
    {
    }
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	4618      	mov	r0, r3
 8013c56:	370c      	adds	r7, #12
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr
 8013c60:	08027c6c 	.word	0x08027c6c

08013c64 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	685a      	ldr	r2, [r3, #4]
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	685b      	ldr	r3, [r3, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	3314      	adds	r3, #20
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	4610      	mov	r0, r2
 8013c7c:	4798      	blx	r3
    }
 8013c7e:	bf00      	nop
 8013c80:	3708      	adds	r7, #8
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}

08013c86 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8013c86:	b580      	push	{r7, lr}
 8013c88:	b082      	sub	sp, #8
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8013c8e:	687a      	ldr	r2, [r7, #4]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	3328      	adds	r3, #40	; 0x28
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	4610      	mov	r0, r2
 8013c9a:	4798      	blx	r3
    }
 8013c9c:	bf00      	nop
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8013ca4:	b480      	push	{r7}
 8013ca6:	b085      	sub	sp, #20
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	60f8      	str	r0, [r7, #12]
 8013cac:	60b9      	str	r1, [r7, #8]
 8013cae:	607a      	str	r2, [r7, #4]
 8013cb0:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8013cbc:	68ba      	ldr	r2, [r7, #8]
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	430a      	orrs	r2, r1
 8013cc4:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ccc:	f023 0107 	bic.w	r1, r3, #7
 8013cd0:	687a      	ldr	r2, [r7, #4]
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	430a      	orrs	r2, r1
 8013cd8:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013ce0:	4b06      	ldr	r3, [pc, #24]	; (8013cfc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8013ce2:	4013      	ands	r3, r2
 8013ce4:	6839      	ldr	r1, [r7, #0]
 8013ce6:	68fa      	ldr	r2, [r7, #12]
 8013ce8:	6812      	ldr	r2, [r2, #0]
 8013cea:	430b      	orrs	r3, r1
 8013cec:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8013cee:	2300      	movs	r3, #0
}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	3714      	adds	r7, #20
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfa:	4770      	bx	lr
 8013cfc:	ffffc000 	.word	0xffffc000

08013d00 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013d08:	f7fb fd52 	bl	800f7b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7ff ffa8 	bl	8013c64 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8013d14:	bf00      	nop
 8013d16:	3708      	adds	r7, #8
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}

08013d1c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b082      	sub	sp, #8
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
    assert(0);
 8013d24:	4b02      	ldr	r3, [pc, #8]	; (8013d30 <DMA2D_XferErrorCallback+0x14>)
 8013d26:	4a03      	ldr	r2, [pc, #12]	; (8013d34 <DMA2D_XferErrorCallback+0x18>)
 8013d28:	213e      	movs	r1, #62	; 0x3e
 8013d2a:	4803      	ldr	r0, [pc, #12]	; (8013d38 <DMA2D_XferErrorCallback+0x1c>)
 8013d2c:	f010 ffe0 	bl	8024cf0 <__assert_func>
 8013d30:	08026414 	.word	0x08026414
 8013d34:	08026c4c 	.word	0x08026c4c
 8013d38:	08026418 	.word	0x08026418

08013d3c <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b082      	sub	sp, #8
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	3318      	adds	r3, #24
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fe fecf 	bl	8012aec <_ZN8touchgfx9colortypeC1Ev>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	4618      	mov	r0, r3
 8013d52:	3708      	adds	r7, #8
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}

08013d58 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8013d58:	b5b0      	push	{r4, r5, r7, lr}
 8013d5a:	b082      	sub	sp, #8
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8013d60:	687a      	ldr	r2, [r7, #4]
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	330c      	adds	r3, #12
 8013d66:	4619      	mov	r1, r3
 8013d68:	4610      	mov	r0, r2
 8013d6a:	f7ff ff61 	bl	8013c30 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8013d6e:	4a0e      	ldr	r2, [pc, #56]	; (8013da8 <_ZN10STM32F7DMAC1Ev+0x50>)
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	601a      	str	r2, [r3, #0]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f103 000c 	add.w	r0, r3, #12
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	3320      	adds	r3, #32
 8013d7e:	2260      	movs	r2, #96	; 0x60
 8013d80:	4619      	mov	r1, r3
 8013d82:	f002 fe0b 	bl	801699c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	3320      	adds	r3, #32
 8013d8a:	245f      	movs	r4, #95	; 0x5f
 8013d8c:	461d      	mov	r5, r3
 8013d8e:	2c00      	cmp	r4, #0
 8013d90:	db05      	blt.n	8013d9e <_ZN10STM32F7DMAC1Ev+0x46>
 8013d92:	4628      	mov	r0, r5
 8013d94:	f7ff ffd2 	bl	8013d3c <_ZN8touchgfx6BlitOpC1Ev>
 8013d98:	3520      	adds	r5, #32
 8013d9a:	3c01      	subs	r4, #1
 8013d9c:	e7f7      	b.n	8013d8e <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	4618      	mov	r0, r3
 8013da2:	3708      	adds	r7, #8
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bdb0      	pop	{r4, r5, r7, pc}
 8013da8:	08026be0 	.word	0x08026be0

08013dac <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	4a0b      	ldr	r2, [pc, #44]	; (8013de4 <_ZN10STM32F7DMAD1Ev+0x38>)
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8013dba:	480b      	ldr	r0, [pc, #44]	; (8013de8 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8013dbc:	f7f1 f8da 	bl	8004f74 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013dc0:	205a      	movs	r0, #90	; 0x5a
 8013dc2:	f7ff fe9d 	bl	8013b00 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	330c      	adds	r3, #12
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f000 faa0 	bl	8014310 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7ff ff0c 	bl	8013bf0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	4618      	mov	r0, r3
 8013ddc:	3708      	adds	r7, #8
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}
 8013de2:	bf00      	nop
 8013de4:	08026be0 	.word	0x08026be0
 8013de8:	2000c54c 	.word	0x2000c54c

08013dec <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b082      	sub	sp, #8
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
}
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f7ff ffd9 	bl	8013dac <_ZN10STM32F7DMAD1Ev>
 8013dfa:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8013dfe:	6878      	ldr	r0, [r7, #4]
 8013e00:	f010 ff4b 	bl	8024c9a <_ZdlPvj>
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	4618      	mov	r0, r3
 8013e08:	3708      	adds	r7, #8
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}
	...

08013e10 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8013e18:	4b09      	ldr	r3, [pc, #36]	; (8013e40 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013e1a:	4a0a      	ldr	r2, [pc, #40]	; (8013e44 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8013e1c:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8013e1e:	4808      	ldr	r0, [pc, #32]	; (8013e40 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013e20:	f7f1 f85e 	bl	8004ee0 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8013e24:	4b06      	ldr	r3, [pc, #24]	; (8013e40 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013e26:	4a08      	ldr	r2, [pc, #32]	; (8013e48 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8013e28:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8013e2a:	4b05      	ldr	r3, [pc, #20]	; (8013e40 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013e2c:	4a07      	ldr	r2, [pc, #28]	; (8013e4c <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8013e2e:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8013e30:	205a      	movs	r0, #90	; 0x5a
 8013e32:	f7ff fe45 	bl	8013ac0 <__NVIC_EnableIRQ>
}
 8013e36:	bf00      	nop
 8013e38:	3708      	adds	r7, #8
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}
 8013e3e:	bf00      	nop
 8013e40:	2000c54c 	.word	0x2000c54c
 8013e44:	4002b000 	.word	0x4002b000
 8013e48:	08013d01 	.word	0x08013d01
 8013e4c:	08013d1d 	.word	0x08013d1d

08013e50 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8013e50:	b480      	push	{r7}
 8013e52:	b083      	sub	sp, #12
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8013e58:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	370c      	adds	r7, #12
 8013e60:	46bd      	mov	sp, r7
 8013e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e66:	4770      	bx	lr

08013e68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8013e68:	b590      	push	{r4, r7, lr}
 8013e6a:	b08d      	sub	sp, #52	; 0x34
 8013e6c:	af02      	add	r7, sp, #8
 8013e6e:	6078      	str	r0, [r7, #4]
 8013e70:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8013e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013e76:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013e80:	2b20      	cmp	r3, #32
 8013e82:	d007      	beq.n	8013e94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	2b40      	cmp	r3, #64	; 0x40
 8013e8a:	d003      	beq.n	8013e94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	2b04      	cmp	r3, #4
 8013e92:	d101      	bne.n	8013e98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8013e94:	2301      	movs	r3, #1
 8013e96:	e000      	b.n	8013e9a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8013e98:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8013e9a:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8013ea0:	2b80      	cmp	r3, #128	; 0x80
 8013ea2:	d004      	beq.n	8013eae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013eac:	d101      	bne.n	8013eb2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8013eae:	2301      	movs	r3, #1
 8013eb0:	e000      	b.n	8013eb4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8013eb2:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8013eb4:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8013eb6:	f7fb fc87 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8013eba:	4602      	mov	r2, r0
 8013ebc:	6813      	ldr	r3, [r2, #0]
 8013ebe:	3320      	adds	r3, #32
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	4610      	mov	r0, r2
 8013ec4:	4798      	blx	r3
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8013eca:	683b      	ldr	r3, [r7, #0]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	2b40      	cmp	r3, #64	; 0x40
 8013ed0:	d01d      	beq.n	8013f0e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8013ed2:	2b40      	cmp	r3, #64	; 0x40
 8013ed4:	d804      	bhi.n	8013ee0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8013ed6:	2b04      	cmp	r3, #4
 8013ed8:	d00e      	beq.n	8013ef8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8013eda:	2b20      	cmp	r3, #32
 8013edc:	d017      	beq.n	8013f0e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8013ede:	e019      	b.n	8013f14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8013ee0:	2b80      	cmp	r3, #128	; 0x80
 8013ee2:	d003      	beq.n	8013eec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8013ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013ee8:	d003      	beq.n	8013ef2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8013eea:	e013      	b.n	8013f14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8013eec:	230a      	movs	r3, #10
 8013eee:	623b      	str	r3, [r7, #32]
        break;
 8013ef0:	e01a      	b.n	8013f28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8013ef2:	2309      	movs	r3, #9
 8013ef4:	623b      	str	r3, [r7, #32]
        break;
 8013ef6:	e017      	b.n	8013f28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013efc:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013efe:	7f7b      	ldrb	r3, [r7, #29]
 8013f00:	2b10      	cmp	r3, #16
 8013f02:	d101      	bne.n	8013f08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8013f04:	2302      	movs	r3, #2
 8013f06:	e000      	b.n	8013f0a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8013f08:	2301      	movs	r3, #1
 8013f0a:	623b      	str	r3, [r7, #32]
        break;
 8013f0c:	e00c      	b.n	8013f28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	623b      	str	r3, [r7, #32]
        break;
 8013f12:	e009      	b.n	8013f28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8013f14:	2300      	movs	r3, #0
 8013f16:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013f18:	7f7b      	ldrb	r3, [r7, #29]
 8013f1a:	2b10      	cmp	r3, #16
 8013f1c:	d101      	bne.n	8013f22 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8013f1e:	2302      	movs	r3, #2
 8013f20:	e000      	b.n	8013f24 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8013f22:	2301      	movs	r3, #1
 8013f24:	623b      	str	r3, [r7, #32]
        break;
 8013f26:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013f28:	4a76      	ldr	r2, [pc, #472]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f2c:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013f2e:	7f7b      	ldrb	r3, [r7, #29]
 8013f30:	2b10      	cmp	r3, #16
 8013f32:	d101      	bne.n	8013f38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8013f34:	2302      	movs	r3, #2
 8013f36:	e000      	b.n	8013f3a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8013f38:	2301      	movs	r3, #1
 8013f3a:	4a72      	ldr	r2, [pc, #456]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013f3c:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	8adb      	ldrh	r3, [r3, #22]
 8013f42:	461a      	mov	r2, r3
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	8a1b      	ldrh	r3, [r3, #16]
 8013f48:	1ad3      	subs	r3, r2, r3
 8013f4a:	461a      	mov	r2, r3
 8013f4c:	4b6d      	ldr	r3, [pc, #436]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013f4e:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013f50:	7f7b      	ldrb	r3, [r7, #29]
 8013f52:	2b10      	cmp	r3, #16
 8013f54:	d101      	bne.n	8013f5a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8013f56:	2202      	movs	r2, #2
 8013f58:	e000      	b.n	8013f5c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8013f5a:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	8adb      	ldrh	r3, [r3, #22]
 8013f60:	4619      	mov	r1, r3
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	8a1b      	ldrh	r3, [r3, #16]
 8013f66:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f6a:	4866      	ldr	r0, [pc, #408]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013f6c:	f7ff fe9a 	bl	8013ca4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013f70:	4a64      	ldr	r2, [pc, #400]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013f72:	6a3b      	ldr	r3, [r7, #32]
 8013f74:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	8a9b      	ldrh	r3, [r3, #20]
 8013f7a:	461a      	mov	r2, r3
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	8a1b      	ldrh	r3, [r3, #16]
 8013f80:	1ad3      	subs	r3, r2, r3
 8013f82:	461a      	mov	r2, r3
 8013f84:	4b5f      	ldr	r3, [pc, #380]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013f86:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8013f88:	7ffb      	ldrb	r3, [r7, #31]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d103      	bne.n	8013f96 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8013f8e:	7fbb      	ldrb	r3, [r7, #30]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	f000 8082 	beq.w	801409a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	7f1b      	ldrb	r3, [r3, #28]
 8013f9a:	2bff      	cmp	r3, #255	; 0xff
 8013f9c:	d008      	beq.n	8013fb0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8013f9e:	4b59      	ldr	r3, [pc, #356]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013fa0:	2202      	movs	r2, #2
 8013fa2:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	7f1b      	ldrb	r3, [r3, #28]
 8013fa8:	461a      	mov	r2, r3
 8013faa:	4b56      	ldr	r3, [pc, #344]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013fac:	635a      	str	r2, [r3, #52]	; 0x34
 8013fae:	e002      	b.n	8013fb6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8013fb0:	4b54      	ldr	r3, [pc, #336]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8013fb6:	7fbb      	ldrb	r3, [r7, #30]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d059      	beq.n	8014070 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8013fbc:	7f7b      	ldrb	r3, [r7, #29]
 8013fbe:	2b10      	cmp	r3, #16
 8013fc0:	d14a      	bne.n	8014058 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	3318      	adds	r3, #24
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7ff fdca 	bl	8013b60 <_ZNK8touchgfx9colortypecvtEv>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	12db      	asrs	r3, r3, #11
 8013fd0:	f003 021f 	and.w	r2, r3, #31
 8013fd4:	4613      	mov	r3, r2
 8013fd6:	021b      	lsls	r3, r3, #8
 8013fd8:	1a9b      	subs	r3, r3, r2
 8013fda:	4a4b      	ldr	r2, [pc, #300]	; (8014108 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013fdc:	fb82 1203 	smull	r1, r2, r2, r3
 8013fe0:	441a      	add	r2, r3
 8013fe2:	1112      	asrs	r2, r2, #4
 8013fe4:	17db      	asrs	r3, r3, #31
 8013fe6:	1ad3      	subs	r3, r2, r3
 8013fe8:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	3318      	adds	r3, #24
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7ff fdb6 	bl	8013b60 <_ZNK8touchgfx9colortypecvtEv>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	115b      	asrs	r3, r3, #5
 8013ff8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013ffc:	4613      	mov	r3, r2
 8013ffe:	021b      	lsls	r3, r3, #8
 8014000:	1a9b      	subs	r3, r3, r2
 8014002:	4a42      	ldr	r2, [pc, #264]	; (801410c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8014004:	fb82 1203 	smull	r1, r2, r2, r3
 8014008:	441a      	add	r2, r3
 801400a:	1152      	asrs	r2, r2, #5
 801400c:	17db      	asrs	r3, r3, #31
 801400e:	1ad3      	subs	r3, r2, r3
 8014010:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	3318      	adds	r3, #24
 8014016:	4618      	mov	r0, r3
 8014018:	f7ff fda2 	bl	8013b60 <_ZNK8touchgfx9colortypecvtEv>
 801401c:	4603      	mov	r3, r0
 801401e:	f003 021f 	and.w	r2, r3, #31
 8014022:	4613      	mov	r3, r2
 8014024:	021b      	lsls	r3, r3, #8
 8014026:	1a9b      	subs	r3, r3, r2
 8014028:	4a37      	ldr	r2, [pc, #220]	; (8014108 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801402a:	fb82 1203 	smull	r1, r2, r2, r3
 801402e:	441a      	add	r2, r3
 8014030:	1112      	asrs	r2, r2, #4
 8014032:	17db      	asrs	r3, r3, #31
 8014034:	1ad3      	subs	r3, r2, r3
 8014036:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	7f1b      	ldrb	r3, [r3, #28]
 801403c:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	061a      	lsls	r2, r3, #24
 8014042:	69bb      	ldr	r3, [r7, #24]
 8014044:	041b      	lsls	r3, r3, #16
 8014046:	431a      	orrs	r2, r3
 8014048:	697b      	ldr	r3, [r7, #20]
 801404a:	021b      	lsls	r3, r3, #8
 801404c:	431a      	orrs	r2, r3
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	4313      	orrs	r3, r2
 8014052:	4a2c      	ldr	r2, [pc, #176]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014054:	6353      	str	r3, [r2, #52]	; 0x34
 8014056:	e00b      	b.n	8014070 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	3318      	adds	r3, #24
 801405c:	4618      	mov	r0, r3
 801405e:	f7ff fd73 	bl	8013b48 <_ZNK8touchgfx9colortype10getColor32Ev>
 8014062:	4602      	mov	r2, r0
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	7f1b      	ldrb	r3, [r3, #28]
 8014068:	061b      	lsls	r3, r3, #24
 801406a:	4313      	orrs	r3, r2
 801406c:	4a25      	ldr	r2, [pc, #148]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801406e:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	8adb      	ldrh	r3, [r3, #22]
 8014074:	461a      	mov	r2, r3
 8014076:	683b      	ldr	r3, [r7, #0]
 8014078:	8a1b      	ldrh	r3, [r3, #16]
 801407a:	1ad3      	subs	r3, r2, r3
 801407c:	461a      	mov	r2, r3
 801407e:	4b21      	ldr	r3, [pc, #132]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014080:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014082:	7f7b      	ldrb	r3, [r7, #29]
 8014084:	2b10      	cmp	r3, #16
 8014086:	d101      	bne.n	801408c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8014088:	2302      	movs	r3, #2
 801408a:	e000      	b.n	801408e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 801408c:	2301      	movs	r3, #1
 801408e:	4a1d      	ldr	r2, [pc, #116]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014090:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014092:	2100      	movs	r1, #0
 8014094:	481b      	ldr	r0, [pc, #108]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014096:	f7f1 f9ed 	bl	8005474 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801409a:	2101      	movs	r1, #1
 801409c:	4819      	ldr	r0, [pc, #100]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801409e:	f7f1 f9e9 	bl	8005474 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 80140a2:	7ffb      	ldrb	r3, [r7, #31]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d102      	bne.n	80140ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 80140a8:	7fbb      	ldrb	r3, [r7, #30]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d015      	beq.n	80140da <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80140b2:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80140b8:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80140ba:	683b      	ldr	r3, [r7, #0]
 80140bc:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80140be:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80140c0:	683b      	ldr	r3, [r7, #0]
 80140c2:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80140c4:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80140ca:	9301      	str	r3, [sp, #4]
 80140cc:	9200      	str	r2, [sp, #0]
 80140ce:	4623      	mov	r3, r4
 80140d0:	4602      	mov	r2, r0
 80140d2:	480c      	ldr	r0, [pc, #48]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80140d4:	f7f0 fff1 	bl	80050ba <HAL_DMA2D_BlendingStart_IT>
 80140d8:	e00f      	b.n	80140fa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 80140de:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80140e4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 80140ea:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80140f0:	9300      	str	r3, [sp, #0]
 80140f2:	4603      	mov	r3, r0
 80140f4:	4803      	ldr	r0, [pc, #12]	; (8014104 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80140f6:	f7f0 ffad 	bl	8005054 <HAL_DMA2D_Start_IT>
    }
}
 80140fa:	bf00      	nop
 80140fc:	372c      	adds	r7, #44	; 0x2c
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd90      	pop	{r4, r7, pc}
 8014102:	bf00      	nop
 8014104:	2000c54c 	.word	0x2000c54c
 8014108:	84210843 	.word	0x84210843
 801410c:	82082083 	.word	0x82082083

08014110 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8014110:	b590      	push	{r4, r7, lr}
 8014112:	b08d      	sub	sp, #52	; 0x34
 8014114:	af02      	add	r7, sp, #8
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 801411a:	f7fb fb55 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 801411e:	4602      	mov	r2, r0
 8014120:	6813      	ldr	r3, [r2, #0]
 8014122:	3320      	adds	r3, #32
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	4610      	mov	r0, r2
 8014128:	4798      	blx	r3
 801412a:	4603      	mov	r3, r0
 801412c:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801412e:	7ffb      	ldrb	r3, [r7, #31]
 8014130:	2b10      	cmp	r3, #16
 8014132:	d101      	bne.n	8014138 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8014134:	2302      	movs	r3, #2
 8014136:	e000      	b.n	801413a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8014138:	2301      	movs	r3, #1
 801413a:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 801413c:	2300      	movs	r3, #0
 801413e:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8014140:	7ffb      	ldrb	r3, [r7, #31]
 8014142:	2b10      	cmp	r3, #16
 8014144:	d149      	bne.n	80141da <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	3318      	adds	r3, #24
 801414a:	4618      	mov	r0, r3
 801414c:	f7ff fd08 	bl	8013b60 <_ZNK8touchgfx9colortypecvtEv>
 8014150:	4603      	mov	r3, r0
 8014152:	12db      	asrs	r3, r3, #11
 8014154:	f003 021f 	and.w	r2, r3, #31
 8014158:	4613      	mov	r3, r2
 801415a:	021b      	lsls	r3, r3, #8
 801415c:	1a9b      	subs	r3, r3, r2
 801415e:	4a69      	ldr	r2, [pc, #420]	; (8014304 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8014160:	fb82 1203 	smull	r1, r2, r2, r3
 8014164:	441a      	add	r2, r3
 8014166:	1112      	asrs	r2, r2, #4
 8014168:	17db      	asrs	r3, r3, #31
 801416a:	1ad3      	subs	r3, r2, r3
 801416c:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	3318      	adds	r3, #24
 8014172:	4618      	mov	r0, r3
 8014174:	f7ff fcf4 	bl	8013b60 <_ZNK8touchgfx9colortypecvtEv>
 8014178:	4603      	mov	r3, r0
 801417a:	115b      	asrs	r3, r3, #5
 801417c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014180:	4613      	mov	r3, r2
 8014182:	021b      	lsls	r3, r3, #8
 8014184:	1a9b      	subs	r3, r3, r2
 8014186:	4a60      	ldr	r2, [pc, #384]	; (8014308 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8014188:	fb82 1203 	smull	r1, r2, r2, r3
 801418c:	441a      	add	r2, r3
 801418e:	1152      	asrs	r2, r2, #5
 8014190:	17db      	asrs	r3, r3, #31
 8014192:	1ad3      	subs	r3, r2, r3
 8014194:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	3318      	adds	r3, #24
 801419a:	4618      	mov	r0, r3
 801419c:	f7ff fce0 	bl	8013b60 <_ZNK8touchgfx9colortypecvtEv>
 80141a0:	4603      	mov	r3, r0
 80141a2:	f003 021f 	and.w	r2, r3, #31
 80141a6:	4613      	mov	r3, r2
 80141a8:	021b      	lsls	r3, r3, #8
 80141aa:	1a9b      	subs	r3, r3, r2
 80141ac:	4a55      	ldr	r2, [pc, #340]	; (8014304 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80141ae:	fb82 1203 	smull	r1, r2, r2, r3
 80141b2:	441a      	add	r2, r3
 80141b4:	1112      	asrs	r2, r2, #4
 80141b6:	17db      	asrs	r3, r3, #31
 80141b8:	1ad3      	subs	r3, r2, r3
 80141ba:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	7f1b      	ldrb	r3, [r3, #28]
 80141c0:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	061a      	lsls	r2, r3, #24
 80141c6:	697b      	ldr	r3, [r7, #20]
 80141c8:	041b      	lsls	r3, r3, #16
 80141ca:	431a      	orrs	r2, r3
 80141cc:	693b      	ldr	r3, [r7, #16]
 80141ce:	021b      	lsls	r3, r3, #8
 80141d0:	4313      	orrs	r3, r2
 80141d2:	68fa      	ldr	r2, [r7, #12]
 80141d4:	4313      	orrs	r3, r2
 80141d6:	623b      	str	r3, [r7, #32]
 80141d8:	e00b      	b.n	80141f2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	7f1b      	ldrb	r3, [r3, #28]
 80141de:	061b      	lsls	r3, r3, #24
 80141e0:	461c      	mov	r4, r3
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	3318      	adds	r3, #24
 80141e6:	4618      	mov	r0, r3
 80141e8:	f7ff fcae 	bl	8013b48 <_ZNK8touchgfx9colortype10getColor32Ev>
 80141ec:	4603      	mov	r3, r0
 80141ee:	4323      	orrs	r3, r4
 80141f0:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	2b08      	cmp	r3, #8
 80141f8:	d103      	bne.n	8014202 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80141fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80141fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014200:	e003      	b.n	801420a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8014202:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8014206:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014208:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801420a:	4a40      	ldr	r2, [pc, #256]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420e:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8014210:	7ffb      	ldrb	r3, [r7, #31]
 8014212:	2b10      	cmp	r3, #16
 8014214:	d101      	bne.n	801421a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8014216:	2302      	movs	r3, #2
 8014218:	e000      	b.n	801421c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 801421a:	2301      	movs	r3, #1
 801421c:	4a3b      	ldr	r2, [pc, #236]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801421e:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	8adb      	ldrh	r3, [r3, #22]
 8014224:	461a      	mov	r2, r3
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	8a1b      	ldrh	r3, [r3, #16]
 801422a:	1ad3      	subs	r3, r2, r3
 801422c:	461a      	mov	r2, r3
 801422e:	4b37      	ldr	r3, [pc, #220]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014230:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014232:	7ffb      	ldrb	r3, [r7, #31]
 8014234:	2b10      	cmp	r3, #16
 8014236:	d101      	bne.n	801423c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8014238:	2202      	movs	r2, #2
 801423a:	e000      	b.n	801423e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 801423c:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	8adb      	ldrh	r3, [r3, #22]
 8014242:	4619      	mov	r1, r3
 8014244:	683b      	ldr	r3, [r7, #0]
 8014246:	8a1b      	ldrh	r3, [r3, #16]
 8014248:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801424a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801424c:	482f      	ldr	r0, [pc, #188]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801424e:	f7ff fd29 	bl	8013ca4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8014252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014258:	d11e      	bne.n	8014298 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801425a:	4b2c      	ldr	r3, [pc, #176]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801425c:	2201      	movs	r2, #1
 801425e:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8014260:	4a2a      	ldr	r2, [pc, #168]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014262:	6a3b      	ldr	r3, [r7, #32]
 8014264:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8014266:	4b29      	ldr	r3, [pc, #164]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014268:	2209      	movs	r2, #9
 801426a:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	8adb      	ldrh	r3, [r3, #22]
 8014270:	461a      	mov	r2, r3
 8014272:	683b      	ldr	r3, [r7, #0]
 8014274:	8a1b      	ldrh	r3, [r3, #16]
 8014276:	1ad3      	subs	r3, r2, r3
 8014278:	461a      	mov	r2, r3
 801427a:	4b24      	ldr	r3, [pc, #144]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801427c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801427e:	7ffb      	ldrb	r3, [r7, #31]
 8014280:	2b10      	cmp	r3, #16
 8014282:	d101      	bne.n	8014288 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8014284:	2302      	movs	r3, #2
 8014286:	e000      	b.n	801428a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8014288:	2301      	movs	r3, #1
 801428a:	4a20      	ldr	r2, [pc, #128]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801428c:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801428e:	2100      	movs	r1, #0
 8014290:	481e      	ldr	r0, [pc, #120]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014292:	f7f1 f8ef 	bl	8005474 <HAL_DMA2D_ConfigLayer>
 8014296:	e005      	b.n	80142a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014298:	4a1c      	ldr	r2, [pc, #112]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801429a:	69bb      	ldr	r3, [r7, #24]
 801429c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 801429e:	4b1b      	ldr	r3, [pc, #108]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80142a0:	2200      	movs	r2, #0
 80142a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80142a4:	2101      	movs	r1, #1
 80142a6:	4819      	ldr	r0, [pc, #100]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80142a8:	f7f1 f8e4 	bl	8005474 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80142ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80142b2:	d115      	bne.n	80142e0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80142b8:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80142be:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80142c4:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80142ca:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80142d0:	9301      	str	r3, [sp, #4]
 80142d2:	9200      	str	r2, [sp, #0]
 80142d4:	4623      	mov	r3, r4
 80142d6:	4602      	mov	r2, r0
 80142d8:	480c      	ldr	r0, [pc, #48]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80142da:	f7f0 feee 	bl	80050ba <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 80142de:	e00d      	b.n	80142fc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80142e0:	683b      	ldr	r3, [r7, #0]
 80142e2:	68db      	ldr	r3, [r3, #12]
 80142e4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80142ea:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 80142ec:	683b      	ldr	r3, [r7, #0]
 80142ee:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80142f0:	9300      	str	r3, [sp, #0]
 80142f2:	460b      	mov	r3, r1
 80142f4:	6a39      	ldr	r1, [r7, #32]
 80142f6:	4805      	ldr	r0, [pc, #20]	; (801430c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80142f8:	f7f0 feac 	bl	8005054 <HAL_DMA2D_Start_IT>
}
 80142fc:	bf00      	nop
 80142fe:	372c      	adds	r7, #44	; 0x2c
 8014300:	46bd      	mov	sp, r7
 8014302:	bd90      	pop	{r4, r7, pc}
 8014304:	84210843 	.word	0x84210843
 8014308:	82082083 	.word	0x82082083
 801430c:	2000c54c 	.word	0x2000c54c

08014310 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014310:	b580      	push	{r7, lr}
 8014312:	b082      	sub	sp, #8
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	4a05      	ldr	r2, [pc, #20]	; (8014330 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	601a      	str	r2, [r3, #0]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	4618      	mov	r0, r3
 8014322:	f7ff fc2b 	bl	8013b7c <_ZN8touchgfx9DMA_QueueD1Ev>
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	4618      	mov	r0, r3
 801432a:	3708      	adds	r7, #8
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}
 8014330:	08027cbc 	.word	0x08027cbc

08014334 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014334:	b580      	push	{r7, lr}
 8014336:	b082      	sub	sp, #8
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f7ff ffe7 	bl	8014310 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014342:	2114      	movs	r1, #20
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f010 fca8 	bl	8024c9a <_ZdlPvj>
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	4618      	mov	r0, r3
 801434e:	3708      	adds	r7, #8
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}

08014354 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8014354:	b480      	push	{r7}
 8014356:	b083      	sub	sp, #12
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
        texts = t;
 801435c:	4a04      	ldr	r2, [pc, #16]	; (8014370 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	6013      	str	r3, [r2, #0]
    }
 8014362:	bf00      	nop
 8014364:	370c      	adds	r7, #12
 8014366:	46bd      	mov	sp, r7
 8014368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436c:	4770      	bx	lr
 801436e:	bf00      	nop
 8014370:	2000bd64 	.word	0x2000bd64

08014374 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014374:	b480      	push	{r7}
 8014376:	b085      	sub	sp, #20
 8014378:	af00      	add	r7, sp, #0
 801437a:	60f8      	str	r0, [r7, #12]
 801437c:	60b9      	str	r1, [r7, #8]
 801437e:	607a      	str	r2, [r7, #4]
 8014380:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8014382:	4a0b      	ldr	r2, [pc, #44]	; (80143b0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	601a      	str	r2, [r3, #0]
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	68ba      	ldr	r2, [r7, #8]
 801438c:	605a      	str	r2, [r3, #4]
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	687a      	ldr	r2, [r7, #4]
 8014392:	609a      	str	r2, [r3, #8]
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	683a      	ldr	r2, [r7, #0]
 8014398:	60da      	str	r2, [r3, #12]
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	69ba      	ldr	r2, [r7, #24]
 801439e:	611a      	str	r2, [r3, #16]
    {
    }
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	4618      	mov	r0, r3
 80143a4:	3714      	adds	r7, #20
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr
 80143ae:	bf00      	nop
 80143b0:	08026d4c 	.word	0x08026d4c

080143b4 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 80143b4:	b480      	push	{r7}
 80143b6:	b083      	sub	sp, #12
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
    {
 80143bc:	4a04      	ldr	r2, [pc, #16]	; (80143d0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	601a      	str	r2, [r3, #0]
    }
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	4618      	mov	r0, r3
 80143c6:	370c      	adds	r7, #12
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr
 80143d0:	08026d4c 	.word	0x08026d4c

080143d4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
    }
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f7ff ffe9 	bl	80143b4 <_ZN8touchgfx7MVPHeapD1Ev>
 80143e2:	2114      	movs	r1, #20
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f010 fc58 	bl	8024c9a <_ZdlPvj>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	4618      	mov	r0, r3
 80143ee:	3708      	adds	r7, #8
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}

080143f4 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 80143f4:	b480      	push	{r7}
 80143f6:	b083      	sub	sp, #12
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
    {
 80143fc:	4a04      	ldr	r2, [pc, #16]	; (8014410 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	601a      	str	r2, [r3, #0]
    }
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	4618      	mov	r0, r3
 8014406:	370c      	adds	r7, #12
 8014408:	46bd      	mov	sp, r7
 801440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440e:	4770      	bx	lr
 8014410:	080285a0 	.word	0x080285a0

08014414 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014414:	b580      	push	{r7, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
    }
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f7ff ffe9 	bl	80143f4 <_ZN8touchgfx3LCDD1Ev>
 8014422:	2108      	movs	r1, #8
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f010 fc38 	bl	8024c9a <_ZdlPvj>
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	4618      	mov	r0, r3
 801442e:	3708      	adds	r7, #8
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}

08014434 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8014434:	b480      	push	{r7}
 8014436:	b083      	sub	sp, #12
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	2200      	movs	r2, #0
 8014440:	801a      	strh	r2, [r3, #0]
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	2200      	movs	r2, #0
 8014446:	805a      	strh	r2, [r3, #2]
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2200      	movs	r2, #0
 801444c:	809a      	strh	r2, [r3, #4]
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	2200      	movs	r2, #0
 8014452:	80da      	strh	r2, [r3, #6]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2200      	movs	r2, #0
 8014458:	811a      	strh	r2, [r3, #8]
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2200      	movs	r2, #0
 801445e:	815a      	strh	r2, [r3, #10]
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2200      	movs	r2, #0
 8014464:	819a      	strh	r2, [r3, #12]
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2200      	movs	r2, #0
 801446a:	739a      	strb	r2, [r3, #14]
        {
        }
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	4618      	mov	r0, r3
 8014470:	370c      	adds	r7, #12
 8014472:	46bd      	mov	sp, r7
 8014474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014478:	4770      	bx	lr

0801447a <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 801447a:	b580      	push	{r7, lr}
 801447c:	b082      	sub	sp, #8
 801447e:	af00      	add	r7, sp, #0
 8014480:	6078      	str	r0, [r7, #4]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	4618      	mov	r0, r3
 8014486:	f7ff ffd5 	bl	8014434 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2200      	movs	r2, #0
 801448e:	611a      	str	r2, [r3, #16]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2200      	movs	r2, #0
 8014494:	829a      	strh	r2, [r3, #20]
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	4618      	mov	r0, r3
 801449a:	3708      	adds	r7, #8
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	60f8      	str	r0, [r7, #12]
 80144a8:	60b9      	str	r1, [r7, #8]
 80144aa:	607a      	str	r2, [r7, #4]
 80144ac:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 80144ae:	4a44      	ldr	r2, [pc, #272]	; (80145c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	601a      	str	r2, [r3, #0]
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	68ba      	ldr	r2, [r7, #8]
 80144b8:	605a      	str	r2, [r3, #4]
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	609a      	str	r2, [r3, #8]
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	683a      	ldr	r2, [r7, #0]
 80144c4:	60da      	str	r2, [r3, #12]
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	2200      	movs	r2, #0
 80144ca:	611a      	str	r2, [r3, #16]
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	2200      	movs	r2, #0
 80144d0:	615a      	str	r2, [r3, #20]
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	2200      	movs	r2, #0
 80144d6:	619a      	str	r2, [r3, #24]
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	331c      	adds	r3, #28
 80144dc:	4618      	mov	r0, r3
 80144de:	f7ff ffcc 	bl	801447a <_ZN8touchgfx8GesturesC1Ev>
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	2200      	movs	r2, #0
 80144e6:	639a      	str	r2, [r3, #56]	; 0x38
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	2200      	movs	r2, #0
 80144ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	2200      	movs	r2, #0
 80144f2:	641a      	str	r2, [r3, #64]	; 0x40
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	2200      	movs	r2, #0
 80144f8:	645a      	str	r2, [r3, #68]	; 0x44
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	2200      	movs	r2, #0
 80144fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	2201      	movs	r2, #1
 8014506:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	2201      	movs	r2, #1
 801450e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	2200      	movs	r2, #0
 8014516:	64da      	str	r2, [r3, #76]	; 0x4c
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	3350      	adds	r3, #80	; 0x50
 801451c:	4618      	mov	r0, r3
 801451e:	f7fb fd82 	bl	8010026 <_ZN8touchgfx4RectC1Ev>
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	2201      	movs	r2, #1
 8014526:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	2200      	movs	r2, #0
 801452e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	2200      	movs	r2, #0
 8014536:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	2201      	movs	r2, #1
 801453e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2200      	movs	r2, #0
 8014546:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	2200      	movs	r2, #0
 801454e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	2200      	movs	r2, #0
 8014556:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	2200      	movs	r2, #0
 801455e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	2200      	movs	r2, #0
 8014566:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	2200      	movs	r2, #0
 801456e:	671a      	str	r2, [r3, #112]	; 0x70
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	2200      	movs	r2, #0
 8014574:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8014578:	4a12      	ldr	r2, [pc, #72]	; (80145c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801457e:	4a12      	ldr	r2, [pc, #72]	; (80145c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014580:	8b3b      	ldrh	r3, [r7, #24]
 8014582:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014584:	4a11      	ldr	r2, [pc, #68]	; (80145cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014586:	8bbb      	ldrh	r3, [r7, #28]
 8014588:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801458a:	4b11      	ldr	r3, [pc, #68]	; (80145d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 801458c:	2200      	movs	r2, #0
 801458e:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014590:	4b0d      	ldr	r3, [pc, #52]	; (80145c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014592:	881a      	ldrh	r2, [r3, #0]
 8014594:	4b0f      	ldr	r3, [pc, #60]	; (80145d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8014596:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014598:	4b0c      	ldr	r3, [pc, #48]	; (80145cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801459a:	881a      	ldrh	r2, [r3, #0]
 801459c:	4b0e      	ldr	r3, [pc, #56]	; (80145d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 801459e:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80145a0:	8b3a      	ldrh	r2, [r7, #24]
 80145a2:	8bbb      	ldrh	r3, [r7, #28]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d301      	bcc.n	80145ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 80145a8:	2200      	movs	r2, #0
 80145aa:	e000      	b.n	80145ae <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 80145ac:	2201      	movs	r2, #1
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	4618      	mov	r0, r3
 80145b8:	3710      	adds	r7, #16
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
 80145be:	bf00      	nop
 80145c0:	08027828 	.word	0x08027828
 80145c4:	2000bcc8 	.word	0x2000bcc8
 80145c8:	2000bcbc 	.word	0x2000bcbc
 80145cc:	2000bcbe 	.word	0x2000bcbe
 80145d0:	2000bcc0 	.word	0x2000bcc0
 80145d4:	2000bcc2 	.word	0x2000bcc2
 80145d8:	2000bcc4 	.word	0x2000bcc4

080145dc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7fb fb11 	bl	800fc10 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 80145ee:	bf00      	nop
 80145f0:	3708      	adds	r7, #8
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bd80      	pop	{r7, pc}
	...

080145f8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b086      	sub	sp, #24
 80145fc:	af02      	add	r7, sp, #8
 80145fe:	60f8      	str	r0, [r7, #12]
 8014600:	60b9      	str	r1, [r7, #8]
 8014602:	607a      	str	r2, [r7, #4]
 8014604:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8014606:	68f8      	ldr	r0, [r7, #12]
 8014608:	69bb      	ldr	r3, [r7, #24]
 801460a:	9300      	str	r3, [sp, #0]
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	687a      	ldr	r2, [r7, #4]
 8014610:	68b9      	ldr	r1, [r7, #8]
 8014612:	f7ff feaf 	bl	8014374 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8014616:	4a04      	ldr	r2, [pc, #16]	; (8014628 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	601a      	str	r2, [r3, #0]
    {

    }
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	4618      	mov	r0, r3
 8014620:	3710      	adds	r7, #16
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}
 8014626:	bf00      	nop
 8014628:	08026d38 	.word	0x08026d38

0801462c <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801462c:	b580      	push	{r7, lr}
 801462e:	af00      	add	r7, sp, #0
 8014630:	4801      	ldr	r0, [pc, #4]	; (8014638 <__tcf_0+0xc>)
 8014632:	f000 f9dd 	bl	80149f0 <_ZN12FrontendHeapD1Ev>
 8014636:	bd80      	pop	{r7, pc}
 8014638:	200086a4 	.word	0x200086a4

0801463c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801463c:	b580      	push	{r7, lr}
 801463e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8014640:	4b08      	ldr	r3, [pc, #32]	; (8014664 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	f003 0301 	and.w	r3, r3, #1
 8014648:	2b00      	cmp	r3, #0
 801464a:	d108      	bne.n	801465e <_ZN12FrontendHeap11getInstanceEv+0x22>
 801464c:	4806      	ldr	r0, [pc, #24]	; (8014668 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 801464e:	f000 f831 	bl	80146b4 <_ZN12FrontendHeapC1Ev>
 8014652:	4b04      	ldr	r3, [pc, #16]	; (8014664 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014654:	2201      	movs	r2, #1
 8014656:	601a      	str	r2, [r3, #0]
 8014658:	4804      	ldr	r0, [pc, #16]	; (801466c <_ZN12FrontendHeap11getInstanceEv+0x30>)
 801465a:	f010 fb67 	bl	8024d2c <atexit>
        return instance;
 801465e:	4b02      	ldr	r3, [pc, #8]	; (8014668 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8014660:	4618      	mov	r0, r3
 8014662:	bd80      	pop	{r7, pc}
 8014664:	2000afbc 	.word	0x2000afbc
 8014668:	200086a4 	.word	0x200086a4
 801466c:	0801462d 	.word	0x0801462d

08014670 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8014670:	b580      	push	{r7, lr}
 8014672:	b082      	sub	sp, #8
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	4a05      	ldr	r2, [pc, #20]	; (8014690 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	601a      	str	r2, [r3, #0]
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	4618      	mov	r0, r3
 8014682:	f7ff fe97 	bl	80143b4 <_ZN8touchgfx7MVPHeapD1Ev>
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	4618      	mov	r0, r3
 801468a:	3708      	adds	r7, #8
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}
 8014690:	08026d38 	.word	0x08026d38

08014694 <_ZN16FrontendHeapBaseD0Ev>:
 8014694:	b580      	push	{r7, lr}
 8014696:	b082      	sub	sp, #8
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f7ff ffe7 	bl	8014670 <_ZN16FrontendHeapBaseD1Ev>
 80146a2:	2114      	movs	r1, #20
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f010 faf8 	bl	8024c9a <_ZdlPvj>
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	4618      	mov	r0, r3
 80146ae:	3708      	adds	r7, #8
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}

080146b4 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80146b4:	b5b0      	push	{r4, r5, r7, lr}
 80146b6:	b084      	sub	sp, #16
 80146b8:	af02      	add	r7, sp, #8
 80146ba:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	f103 0414 	add.w	r4, r3, #20
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f242 72b0 	movw	r2, #10160	; 0x27b0
 80146d0:	441a      	add	r2, r3
 80146d2:	6879      	ldr	r1, [r7, #4]
 80146d4:	f242 73c4 	movw	r3, #10180	; 0x27c4
 80146d8:	440b      	add	r3, r1
 80146da:	9300      	str	r3, [sp, #0]
 80146dc:	4613      	mov	r3, r2
 80146de:	462a      	mov	r2, r5
 80146e0:	4621      	mov	r1, r4
 80146e2:	f7ff ff89 	bl	80145f8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80146e6:	4a1a      	ldr	r2, [pc, #104]	; (8014750 <_ZN12FrontendHeapC1Ev+0x9c>)
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	601a      	str	r2, [r3, #0]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	3314      	adds	r3, #20
 80146f0:	4618      	mov	r0, r3
 80146f2:	f000 f8df 	bl	80148b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	332c      	adds	r3, #44	; 0x2c
 80146fa:	4618      	mov	r0, r3
 80146fc:	f000 f90e 	bl	801491c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014700:	687a      	ldr	r2, [r7, #4]
 8014702:	f242 73b0 	movw	r3, #10160	; 0x27b0
 8014706:	4413      	add	r3, r2
 8014708:	4618      	mov	r0, r3
 801470a:	f000 f93d 	bl	8014988 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	f242 73c4 	movw	r3, #10180	; 0x27c4
 8014714:	4413      	add	r3, r2
 8014716:	687a      	ldr	r2, [r7, #4]
 8014718:	f642 1114 	movw	r1, #10516	; 0x2914
 801471c:	4411      	add	r1, r2
 801471e:	687a      	ldr	r2, [r7, #4]
 8014720:	4618      	mov	r0, r3
 8014722:	f7fe f8b1 	bl	8012888 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8014726:	687a      	ldr	r2, [r7, #4]
 8014728:	f642 1314 	movw	r3, #10516	; 0x2914
 801472c:	4413      	add	r3, r2
 801472e:	4618      	mov	r0, r3
 8014730:	f7fe fdca 	bl	80132c8 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8014734:	6878      	ldr	r0, [r7, #4]
 8014736:	687a      	ldr	r2, [r7, #4]
 8014738:	f242 73c4 	movw	r3, #10180	; 0x27c4
 801473c:	4413      	add	r3, r2
 801473e:	4619      	mov	r1, r3
 8014740:	f7ff ff4c 	bl	80145dc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	4618      	mov	r0, r3
 8014748:	3708      	adds	r7, #8
 801474a:	46bd      	mov	sp, r7
 801474c:	bdb0      	pop	{r4, r5, r7, pc}
 801474e:	bf00      	nop
 8014750:	08026c88 	.word	0x08026c88

08014754 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
    {
 801475c:	4a05      	ldr	r2, [pc, #20]	; (8014774 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	601a      	str	r2, [r3, #0]
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	4618      	mov	r0, r3
 8014766:	f7ff fe45 	bl	80143f4 <_ZN8touchgfx3LCDD1Ev>
    }
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	4618      	mov	r0, r3
 801476e:	3708      	adds	r7, #8
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}
 8014774:	0802997c 	.word	0x0802997c

08014778 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8014778:	b580      	push	{r7, lr}
 801477a:	b082      	sub	sp, #8
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
    }
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f7ff ffe7 	bl	8014754 <_ZN8touchgfx8LCD24bppD1Ev>
 8014786:	2158      	movs	r1, #88	; 0x58
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f010 fa86 	bl	8024c9a <_ZdlPvj>
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	4618      	mov	r0, r3
 8014792:	3708      	adds	r7, #8
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}

08014798 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8014798:	b580      	push	{r7, lr}
 801479a:	b086      	sub	sp, #24
 801479c:	af02      	add	r7, sp, #8
 801479e:	60f8      	str	r0, [r7, #12]
 80147a0:	60b9      	str	r1, [r7, #8]
 80147a2:	607a      	str	r2, [r7, #4]
 80147a4:	603b      	str	r3, [r7, #0]
 80147a6:	68f8      	ldr	r0, [r7, #12]
 80147a8:	8bbb      	ldrh	r3, [r7, #28]
 80147aa:	9301      	str	r3, [sp, #4]
 80147ac:	8b3b      	ldrh	r3, [r7, #24]
 80147ae:	9300      	str	r3, [sp, #0]
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	687a      	ldr	r2, [r7, #4]
 80147b4:	68b9      	ldr	r1, [r7, #8]
 80147b6:	f7ff fe73 	bl	80144a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80147ba:	4a04      	ldr	r2, [pc, #16]	; (80147cc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	601a      	str	r2, [r3, #0]
    }
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	4618      	mov	r0, r3
 80147c4:	3710      	adds	r7, #16
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}
 80147ca:	bf00      	nop
 80147cc:	08026d5c 	.word	0x08026d5c

080147d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b086      	sub	sp, #24
 80147d4:	af02      	add	r7, sp, #8
 80147d6:	60f8      	str	r0, [r7, #12]
 80147d8:	60b9      	str	r1, [r7, #8]
 80147da:	607a      	str	r2, [r7, #4]
 80147dc:	603b      	str	r3, [r7, #0]
 80147de:	68f8      	ldr	r0, [r7, #12]
 80147e0:	8bbb      	ldrh	r3, [r7, #28]
 80147e2:	9301      	str	r3, [sp, #4]
 80147e4:	8b3b      	ldrh	r3, [r7, #24]
 80147e6:	9300      	str	r3, [sp, #0]
 80147e8:	683b      	ldr	r3, [r7, #0]
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	68b9      	ldr	r1, [r7, #8]
 80147ee:	f7ff ffd3 	bl	8014798 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80147f2:	4a04      	ldr	r2, [pc, #16]	; (8014804 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	601a      	str	r2, [r3, #0]
    }
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	4618      	mov	r0, r3
 80147fc:	3710      	adds	r7, #16
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	08026a88 	.word	0x08026a88

08014808 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014808:	b480      	push	{r7}
 801480a:	b083      	sub	sp, #12
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
 8014810:	4a04      	ldr	r2, [pc, #16]	; (8014824 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	601a      	str	r2, [r3, #0]
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	4618      	mov	r0, r3
 801481a:	370c      	adds	r7, #12
 801481c:	46bd      	mov	sp, r7
 801481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014822:	4770      	bx	lr
 8014824:	08026a70 	.word	0x08026a70

08014828 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	4618      	mov	r0, r3
 8014834:	f7ff ffe8 	bl	8014808 <_ZN8touchgfx15TouchControllerC1Ev>
 8014838:	4a03      	ldr	r2, [pc, #12]	; (8014848 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	601a      	str	r2, [r3, #0]
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	4618      	mov	r0, r3
 8014842:	3708      	adds	r7, #8
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}
 8014848:	08026a58 	.word	0x08026a58

0801484c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 801484c:	b590      	push	{r4, r7, lr}
 801484e:	b085      	sub	sp, #20
 8014850:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8014852:	f7fd fef5 	bl	8012640 <_ZN14BitmapDatabase11getInstanceEv>
 8014856:	4604      	mov	r4, r0
 8014858:	f7fd fefc 	bl	8012654 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801485c:	4603      	mov	r3, r0
 801485e:	4619      	mov	r1, r3
 8014860:	2300      	movs	r3, #0
 8014862:	9300      	str	r3, [sp, #0]
 8014864:	2300      	movs	r3, #0
 8014866:	2200      	movs	r2, #0
 8014868:	4620      	mov	r0, r4
 801486a:	f006 fcdb 	bl	801b224 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 801486e:	4809      	ldr	r0, [pc, #36]	; (8014894 <touchgfx_init+0x48>)
 8014870:	f7ff fd70 	bl	8014354 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8014874:	2000      	movs	r0, #0
 8014876:	f7fd ff11 	bl	801269c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 801487a:	4807      	ldr	r0, [pc, #28]	; (8014898 <touchgfx_init+0x4c>)
 801487c:	f006 fc20 	bl	801b0c0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8014880:	f7ff fedc 	bl	801463c <_ZN12FrontendHeap11getInstanceEv>
 8014884:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8014886:	4805      	ldr	r0, [pc, #20]	; (801489c <touchgfx_init+0x50>)
 8014888:	f7fe ffda 	bl	8013840 <_ZN11TouchGFXHAL10initializeEv>
}
 801488c:	bf00      	nop
 801488e:	370c      	adds	r7, #12
 8014890:	46bd      	mov	sp, r7
 8014892:	bd90      	pop	{r4, r7, pc}
 8014894:	2000bc3c 	.word	0x2000bc3c
 8014898:	20000040 	.word	0x20000040
 801489c:	2000bc40 	.word	0x2000bc40

080148a0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80148a4:	4802      	ldr	r0, [pc, #8]	; (80148b0 <touchgfx_taskEntry+0x10>)
 80148a6:	f001 fa06 	bl	8015cb6 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80148aa:	bf00      	nop
 80148ac:	bd80      	pop	{r7, pc}
 80148ae:	bf00      	nop
 80148b0:	2000bc40 	.word	0x2000bc40

080148b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	4618      	mov	r0, r3
 80148c0:	f000 fc76 	bl	80151b0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80148c4:	4a03      	ldr	r2, [pc, #12]	; (80148d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	601a      	str	r2, [r3, #0]
    {
    }
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	4618      	mov	r0, r3
 80148ce:	3708      	adds	r7, #8
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}
 80148d4:	08026d04 	.word	0x08026d04

080148d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
    {
    }
 80148e0:	4a05      	ldr	r2, [pc, #20]	; (80148f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	601a      	str	r2, [r3, #0]
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	4618      	mov	r0, r3
 80148ea:	f000 fc5f 	bl	80151ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	4618      	mov	r0, r3
 80148f2:	3708      	adds	r7, #8
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}
 80148f8:	08026d04 	.word	0x08026d04

080148fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b082      	sub	sp, #8
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
    }
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7ff ffe7 	bl	80148d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801490a:	2118      	movs	r1, #24
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f010 f9c4 	bl	8024c9a <_ZdlPvj>
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	4618      	mov	r0, r3
 8014916:	3708      	adds	r7, #8
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801491c:	b580      	push	{r7, lr}
 801491e:	b082      	sub	sp, #8
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	4618      	mov	r0, r3
 8014928:	f000 fc42 	bl	80151b0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801492c:	4a03      	ldr	r2, [pc, #12]	; (801493c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	601a      	str	r2, [r3, #0]
    }
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	4618      	mov	r0, r3
 8014936:	3708      	adds	r7, #8
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}
 801493c:	08026cd0 	.word	0x08026cd0

08014940 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
    }
 8014948:	4a05      	ldr	r2, [pc, #20]	; (8014960 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	601a      	str	r2, [r3, #0]
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	4618      	mov	r0, r3
 8014952:	f000 fc2b 	bl	80151ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	4618      	mov	r0, r3
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	08026cd0 	.word	0x08026cd0

08014964 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014964:	b580      	push	{r7, lr}
 8014966:	b082      	sub	sp, #8
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
    }
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f7ff ffe7 	bl	8014940 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014972:	f242 7184 	movw	r1, #10116	; 0x2784
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f010 f98f 	bl	8024c9a <_ZdlPvj>
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	4618      	mov	r0, r3
 8014980:	3708      	adds	r7, #8
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}
	...

08014988 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	4618      	mov	r0, r3
 8014994:	f000 fc0c 	bl	80151b0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014998:	4a03      	ldr	r2, [pc, #12]	; (80149a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	601a      	str	r2, [r3, #0]
    }
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	4618      	mov	r0, r3
 80149a2:	3708      	adds	r7, #8
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}
 80149a8:	08026c9c 	.word	0x08026c9c

080149ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
    }
 80149b4:	4a05      	ldr	r2, [pc, #20]	; (80149cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	601a      	str	r2, [r3, #0]
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	4618      	mov	r0, r3
 80149be:	f000 fbf5 	bl	80151ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	4618      	mov	r0, r3
 80149c6:	3708      	adds	r7, #8
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}
 80149cc:	08026c9c 	.word	0x08026c9c

080149d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b082      	sub	sp, #8
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
    }
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f7ff ffe7 	bl	80149ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80149de:	2114      	movs	r1, #20
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f010 f95a 	bl	8024c9a <_ZdlPvj>
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	4618      	mov	r0, r3
 80149ea:	3708      	adds	r7, #8
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}

080149f0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b082      	sub	sp, #8
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	4a11      	ldr	r2, [pc, #68]	; (8014a40 <_ZN12FrontendHeapD1Ev+0x50>)
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	601a      	str	r2, [r3, #0]
 80149fe:	687a      	ldr	r2, [r7, #4]
 8014a00:	f242 73c4 	movw	r3, #10180	; 0x27c4
 8014a04:	4413      	add	r3, r2
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7fd ff08 	bl	801281c <_ZN19FrontendApplicationD1Ev>
 8014a0c:	687a      	ldr	r2, [r7, #4]
 8014a0e:	f242 73b0 	movw	r3, #10160	; 0x27b0
 8014a12:	4413      	add	r3, r2
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7ff ffc9 	bl	80149ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	332c      	adds	r3, #44	; 0x2c
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7ff ff8e 	bl	8014940 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	3314      	adds	r3, #20
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7ff ff55 	bl	80148d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	4618      	mov	r0, r3
 8014a32:	f7ff fe1d 	bl	8014670 <_ZN16FrontendHeapBaseD1Ev>
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3708      	adds	r7, #8
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd80      	pop	{r7, pc}
 8014a40:	08026c88 	.word	0x08026c88

08014a44 <_ZN12FrontendHeapD0Ev>:
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f7ff ffcf 	bl	80149f0 <_ZN12FrontendHeapD1Ev>
 8014a52:	f642 1118 	movw	r1, #10520	; 0x2918
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f010 f91f 	bl	8024c9a <_ZdlPvj>
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3708      	adds	r7, #8
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
	...

08014a68 <_Z41__static_initialization_and_destruction_0ii>:
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b084      	sub	sp, #16
 8014a6c:	af02      	add	r7, sp, #8
 8014a6e:	6078      	str	r0, [r7, #4]
 8014a70:	6039      	str	r1, [r7, #0]
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	2b01      	cmp	r3, #1
 8014a76:	d119      	bne.n	8014aac <_Z41__static_initialization_and_destruction_0ii+0x44>
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d114      	bne.n	8014aac <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8014a82:	4818      	ldr	r0, [pc, #96]	; (8014ae4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014a84:	f7ff fed0 	bl	8014828 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8014a88:	4817      	ldr	r0, [pc, #92]	; (8014ae8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014a8a:	f7ff f965 	bl	8013d58 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8014a8e:	4817      	ldr	r0, [pc, #92]	; (8014aec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014a90:	f008 fdee 	bl	801d670 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8014a94:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014a98:	9301      	str	r3, [sp, #4]
 8014a9a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014a9e:	9300      	str	r3, [sp, #0]
 8014aa0:	4b10      	ldr	r3, [pc, #64]	; (8014ae4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014aa2:	4a12      	ldr	r2, [pc, #72]	; (8014aec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014aa4:	4910      	ldr	r1, [pc, #64]	; (8014ae8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014aa6:	4812      	ldr	r0, [pc, #72]	; (8014af0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014aa8:	f7ff fe92 	bl	80147d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d113      	bne.n	8014ada <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ab8:	4293      	cmp	r3, r2
 8014aba:	d10e      	bne.n	8014ada <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014abc:	480c      	ldr	r0, [pc, #48]	; (8014af0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014abe:	f7fe ff25 	bl	801390c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8014ac2:	480c      	ldr	r0, [pc, #48]	; (8014af4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8014ac4:	f7fa f9ac 	bl	800ee20 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8014ac8:	4808      	ldr	r0, [pc, #32]	; (8014aec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014aca:	f7ff fe43 	bl	8014754 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8014ace:	4806      	ldr	r0, [pc, #24]	; (8014ae8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014ad0:	f7ff f96c 	bl	8013dac <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8014ad4:	4803      	ldr	r0, [pc, #12]	; (8014ae4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014ad6:	f7fe fc8f 	bl	80133f8 <_ZN20STM32TouchControllerD1Ev>
}
 8014ada:	bf00      	nop
 8014adc:	3708      	adds	r7, #8
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
 8014ae2:	bf00      	nop
 8014ae4:	2000afc0 	.word	0x2000afc0
 8014ae8:	2000afc4 	.word	0x2000afc4
 8014aec:	2000bbe4 	.word	0x2000bbe4
 8014af0:	2000bc40 	.word	0x2000bc40
 8014af4:	20000040 	.word	0x20000040

08014af8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8014af8:	b480      	push	{r7}
 8014afa:	b083      	sub	sp, #12
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014b00:	2301      	movs	r3, #1
    }
 8014b02:	4618      	mov	r0, r3
 8014b04:	370c      	adds	r7, #12
 8014b06:	46bd      	mov	sp, r7
 8014b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0c:	4770      	bx	lr

08014b0e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8014b0e:	b480      	push	{r7}
 8014b10:	b083      	sub	sp, #12
 8014b12:	af00      	add	r7, sp, #0
 8014b14:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014b16:	230c      	movs	r3, #12
    }
 8014b18:	4618      	mov	r0, r3
 8014b1a:	370c      	adds	r7, #12
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b22:	4770      	bx	lr

08014b24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8014b24:	b480      	push	{r7}
 8014b26:	b083      	sub	sp, #12
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
 8014b2c:	460b      	mov	r3, r1
 8014b2e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014b30:	887a      	ldrh	r2, [r7, #2]
 8014b32:	4613      	mov	r3, r2
 8014b34:	005b      	lsls	r3, r3, #1
 8014b36:	4413      	add	r3, r2
 8014b38:	009b      	lsls	r3, r3, #2
 8014b3a:	3308      	adds	r3, #8
 8014b3c:	687a      	ldr	r2, [r7, #4]
 8014b3e:	4413      	add	r3, r2
    }
 8014b40:	4618      	mov	r0, r3
 8014b42:	370c      	adds	r7, #12
 8014b44:	46bd      	mov	sp, r7
 8014b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4a:	4770      	bx	lr

08014b4c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8014b4c:	b480      	push	{r7}
 8014b4e:	b083      	sub	sp, #12
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
 8014b54:	460b      	mov	r3, r1
 8014b56:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014b58:	887a      	ldrh	r2, [r7, #2]
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	005b      	lsls	r3, r3, #1
 8014b5e:	4413      	add	r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	3308      	adds	r3, #8
 8014b64:	687a      	ldr	r2, [r7, #4]
 8014b66:	4413      	add	r3, r2
    }
 8014b68:	4618      	mov	r0, r3
 8014b6a:	370c      	adds	r7, #12
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b72:	4770      	bx	lr

08014b74 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014b74:	b480      	push	{r7}
 8014b76:	b083      	sub	sp, #12
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014b7c:	2301      	movs	r3, #1
    }
 8014b7e:	4618      	mov	r0, r3
 8014b80:	370c      	adds	r7, #12
 8014b82:	46bd      	mov	sp, r7
 8014b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b88:	4770      	bx	lr

08014b8a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014b8a:	b480      	push	{r7}
 8014b8c:	b083      	sub	sp, #12
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014b92:	f242 737c 	movw	r3, #10108	; 0x277c
    }
 8014b96:	4618      	mov	r0, r3
 8014b98:	370c      	adds	r7, #12
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba0:	4770      	bx	lr

08014ba2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014ba2:	b480      	push	{r7}
 8014ba4:	b083      	sub	sp, #12
 8014ba6:	af00      	add	r7, sp, #0
 8014ba8:	6078      	str	r0, [r7, #4]
 8014baa:	460b      	mov	r3, r1
 8014bac:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014bae:	887b      	ldrh	r3, [r7, #2]
 8014bb0:	f242 727c 	movw	r2, #10108	; 0x277c
 8014bb4:	fb02 f303 	mul.w	r3, r2, r3
 8014bb8:	3308      	adds	r3, #8
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	4413      	add	r3, r2
    }
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	370c      	adds	r7, #12
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc8:	4770      	bx	lr

08014bca <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014bca:	b480      	push	{r7}
 8014bcc:	b083      	sub	sp, #12
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	6078      	str	r0, [r7, #4]
 8014bd2:	460b      	mov	r3, r1
 8014bd4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014bd6:	887b      	ldrh	r3, [r7, #2]
 8014bd8:	f242 727c 	movw	r2, #10108	; 0x277c
 8014bdc:	fb02 f303 	mul.w	r3, r2, r3
 8014be0:	3308      	adds	r3, #8
 8014be2:	687a      	ldr	r2, [r7, #4]
 8014be4:	4413      	add	r3, r2
    }
 8014be6:	4618      	mov	r0, r3
 8014be8:	370c      	adds	r7, #12
 8014bea:	46bd      	mov	sp, r7
 8014bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf0:	4770      	bx	lr

08014bf2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014bf2:	b480      	push	{r7}
 8014bf4:	b083      	sub	sp, #12
 8014bf6:	af00      	add	r7, sp, #0
 8014bf8:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014bfa:	2301      	movs	r3, #1
    }
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	370c      	adds	r7, #12
 8014c00:	46bd      	mov	sp, r7
 8014c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c06:	4770      	bx	lr

08014c08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014c08:	b480      	push	{r7}
 8014c0a:	b083      	sub	sp, #12
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014c10:	2310      	movs	r3, #16
    }
 8014c12:	4618      	mov	r0, r3
 8014c14:	370c      	adds	r7, #12
 8014c16:	46bd      	mov	sp, r7
 8014c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1c:	4770      	bx	lr

08014c1e <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014c1e:	b480      	push	{r7}
 8014c20:	b083      	sub	sp, #12
 8014c22:	af00      	add	r7, sp, #0
 8014c24:	6078      	str	r0, [r7, #4]
 8014c26:	460b      	mov	r3, r1
 8014c28:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014c2a:	887b      	ldrh	r3, [r7, #2]
 8014c2c:	011b      	lsls	r3, r3, #4
 8014c2e:	3308      	adds	r3, #8
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	4413      	add	r3, r2
    }
 8014c34:	4618      	mov	r0, r3
 8014c36:	370c      	adds	r7, #12
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3e:	4770      	bx	lr

08014c40 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014c40:	b480      	push	{r7}
 8014c42:	b083      	sub	sp, #12
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
 8014c48:	460b      	mov	r3, r1
 8014c4a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014c4c:	887b      	ldrh	r3, [r7, #2]
 8014c4e:	011b      	lsls	r3, r3, #4
 8014c50:	3308      	adds	r3, #8
 8014c52:	687a      	ldr	r2, [r7, #4]
 8014c54:	4413      	add	r3, r2
    }
 8014c56:	4618      	mov	r0, r3
 8014c58:	370c      	adds	r7, #12
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c60:	4770      	bx	lr

08014c62 <_GLOBAL__sub_I_touchgfx_init>:
 8014c62:	b580      	push	{r7, lr}
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014c6a:	2001      	movs	r0, #1
 8014c6c:	f7ff fefc 	bl	8014a68 <_Z41__static_initialization_and_destruction_0ii>
 8014c70:	bd80      	pop	{r7, pc}

08014c72 <_GLOBAL__sub_D_touchgfx_init>:
 8014c72:	b580      	push	{r7, lr}
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014c7a:	2000      	movs	r0, #0
 8014c7c:	f7ff fef4 	bl	8014a68 <_Z41__static_initialization_and_destruction_0ii>
 8014c80:	bd80      	pop	{r7, pc}

08014c82 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014c82:	b580      	push	{r7, lr}
 8014c84:	b082      	sub	sp, #8
 8014c86:	af00      	add	r7, sp, #0
 8014c88:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	3318      	adds	r3, #24
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	4798      	blx	r3
    }
 8014c96:	bf00      	nop
 8014c98:	3708      	adds	r7, #8
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}

08014c9e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8014c9e:	b480      	push	{r7}
 8014ca0:	b083      	sub	sp, #12
 8014ca2:	af00      	add	r7, sp, #0
 8014ca4:	6078      	str	r0, [r7, #4]
 8014ca6:	460b      	mov	r3, r1
 8014ca8:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	78fa      	ldrb	r2, [r7, #3]
 8014cae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8014cb2:	bf00      	nop
 8014cb4:	370c      	adds	r7, #12
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbc:	4770      	bx	lr

08014cbe <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8014cbe:	b480      	push	{r7}
 8014cc0:	b083      	sub	sp, #12
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8014ccc:	3301      	adds	r3, #1
 8014cce:	b2da      	uxtb	r2, r3
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8014cd6:	bf00      	nop
 8014cd8:	370c      	adds	r7, #12
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce0:	4770      	bx	lr
	...

08014ce4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b082      	sub	sp, #8
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	460b      	mov	r3, r1
 8014cee:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014cf0:	78fb      	ldrb	r3, [r7, #3]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d002      	beq.n	8014cfc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014cf6:	78fb      	ldrb	r3, [r7, #3]
 8014cf8:	2b02      	cmp	r3, #2
 8014cfa:	d105      	bne.n	8014d08 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	78fa      	ldrb	r2, [r7, #3]
 8014d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014d04:	2301      	movs	r3, #1
 8014d06:	e027      	b.n	8014d58 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014d08:	78fb      	ldrb	r3, [r7, #3]
 8014d0a:	2b01      	cmp	r3, #1
 8014d0c:	d123      	bne.n	8014d56 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d014      	beq.n	8014d40 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	3380      	adds	r3, #128	; 0x80
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	4798      	blx	r3
 8014d22:	4603      	mov	r3, r0
 8014d24:	461a      	mov	r2, r3
 8014d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	d008      	beq.n	8014d40 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014d2e:	4b0c      	ldr	r3, [pc, #48]	; (8014d60 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8014d30:	781b      	ldrb	r3, [r3, #0]
 8014d32:	f083 0301 	eor.w	r3, r3, #1
 8014d36:	b2db      	uxtb	r3, r3
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d001      	beq.n	8014d40 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014d3c:	2301      	movs	r3, #1
 8014d3e:	e000      	b.n	8014d42 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8014d40:	2300      	movs	r3, #0
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d005      	beq.n	8014d52 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	78fa      	ldrb	r2, [r7, #3]
 8014d4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8014d4e:	2301      	movs	r3, #1
 8014d50:	e002      	b.n	8014d58 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8014d52:	2300      	movs	r3, #0
 8014d54:	e000      	b.n	8014d58 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8014d56:	2300      	movs	r3, #0
    }
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3708      	adds	r7, #8
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}
 8014d60:	2000bcc6 	.word	0x2000bcc6

08014d64 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8014d64:	b480      	push	{r7}
 8014d66:	b083      	sub	sp, #12
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	683a      	ldr	r2, [r7, #0]
 8014d72:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8014d74:	bf00      	nop
 8014d76:	370c      	adds	r7, #12
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7e:	4770      	bx	lr

08014d80 <__NVIC_EnableIRQ>:
{
 8014d80:	b480      	push	{r7}
 8014d82:	b083      	sub	sp, #12
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	4603      	mov	r3, r0
 8014d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	db0d      	blt.n	8014dae <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d96:	b2db      	uxtb	r3, r3
 8014d98:	f003 021f 	and.w	r2, r3, #31
 8014d9c:	4907      	ldr	r1, [pc, #28]	; (8014dbc <__NVIC_EnableIRQ+0x3c>)
 8014d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014da2:	095b      	lsrs	r3, r3, #5
 8014da4:	2001      	movs	r0, #1
 8014da6:	fa00 f202 	lsl.w	r2, r0, r2
 8014daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014dae:	bf00      	nop
 8014db0:	370c      	adds	r7, #12
 8014db2:	46bd      	mov	sp, r7
 8014db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db8:	4770      	bx	lr
 8014dba:	bf00      	nop
 8014dbc:	e000e100 	.word	0xe000e100

08014dc0 <__NVIC_DisableIRQ>:
{
 8014dc0:	b480      	push	{r7}
 8014dc2:	b083      	sub	sp, #12
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	db12      	blt.n	8014df8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014dd6:	b2db      	uxtb	r3, r3
 8014dd8:	f003 021f 	and.w	r2, r3, #31
 8014ddc:	4909      	ldr	r1, [pc, #36]	; (8014e04 <__NVIC_DisableIRQ+0x44>)
 8014dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014de2:	095b      	lsrs	r3, r3, #5
 8014de4:	2001      	movs	r0, #1
 8014de6:	fa00 f202 	lsl.w	r2, r0, r2
 8014dea:	3320      	adds	r3, #32
 8014dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014df0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014df4:	f3bf 8f6f 	isb	sy
}
 8014df8:	bf00      	nop
 8014dfa:	370c      	adds	r7, #12
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr
 8014e04:	e000e100 	.word	0xe000e100

08014e08 <__NVIC_SetPriority>:
{
 8014e08:	b480      	push	{r7}
 8014e0a:	b083      	sub	sp, #12
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	4603      	mov	r3, r0
 8014e10:	6039      	str	r1, [r7, #0]
 8014e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	db0c      	blt.n	8014e36 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	b2db      	uxtb	r3, r3
 8014e20:	4a0e      	ldr	r2, [pc, #56]	; (8014e5c <__NVIC_SetPriority+0x54>)
 8014e22:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8014e26:	4608      	mov	r0, r1
 8014e28:	011b      	lsls	r3, r3, #4
 8014e2a:	b2d9      	uxtb	r1, r3
 8014e2c:	1813      	adds	r3, r2, r0
 8014e2e:	460a      	mov	r2, r1
 8014e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014e34:	e00c      	b.n	8014e50 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	b2da      	uxtb	r2, r3
 8014e3a:	4909      	ldr	r1, [pc, #36]	; (8014e60 <__NVIC_SetPriority+0x58>)
 8014e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e40:	b2db      	uxtb	r3, r3
 8014e42:	f003 030f 	and.w	r3, r3, #15
 8014e46:	3b04      	subs	r3, #4
 8014e48:	0112      	lsls	r2, r2, #4
 8014e4a:	b2d2      	uxtb	r2, r2
 8014e4c:	440b      	add	r3, r1
 8014e4e:	761a      	strb	r2, [r3, #24]
}
 8014e50:	bf00      	nop
 8014e52:	370c      	adds	r7, #12
 8014e54:	46bd      	mov	sp, r7
 8014e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5a:	4770      	bx	lr
 8014e5c:	e000e100 	.word	0xe000e100
 8014e60:	e000ed00 	.word	0xe000ed00

08014e64 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8014e64:	b5b0      	push	{r4, r5, r7, lr}
 8014e66:	b082      	sub	sp, #8
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f001 f9e6 	bl	8016240 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8014e74:	687d      	ldr	r5, [r7, #4]
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	334c      	adds	r3, #76	; 0x4c
 8014e7c:	681c      	ldr	r4, [r3, #0]
 8014e7e:	f003 ff43 	bl	8018d08 <_ZN8touchgfx11Application11getInstanceEv>
 8014e82:	4603      	mov	r3, r0
 8014e84:	4619      	mov	r1, r3
 8014e86:	4628      	mov	r0, r5
 8014e88:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	490d      	ldr	r1, [pc, #52]	; (8014ec4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7ff ff68 	bl	8014d64 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2101      	movs	r1, #1
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7ff ff23 	bl	8014ce4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	3374      	adds	r3, #116	; 0x74
 8014ea6:	681c      	ldr	r4, [r3, #0]
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	2200      	movs	r2, #0
 8014eac:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014eb0:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	2101      	movs	r1, #1
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f7ff fef1 	bl	8014c9e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8014ebc:	bf00      	nop
 8014ebe:	3708      	adds	r7, #8
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8014ec4:	08013aa5 	.word	0x08013aa5

08014ec8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b082      	sub	sp, #8
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8014ed0:	2109      	movs	r1, #9
 8014ed2:	205a      	movs	r0, #90	; 0x5a
 8014ed4:	f7ff ff98 	bl	8014e08 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8014ed8:	2109      	movs	r1, #9
 8014eda:	2058      	movs	r0, #88	; 0x58
 8014edc:	f7ff ff94 	bl	8014e08 <__NVIC_SetPriority>
}
 8014ee0:	bf00      	nop
 8014ee2:	3708      	adds	r7, #8
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}

08014ee8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b082      	sub	sp, #8
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014ef0:	205a      	movs	r0, #90	; 0x5a
 8014ef2:	f7ff ff45 	bl	8014d80 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8014ef6:	2058      	movs	r0, #88	; 0x58
 8014ef8:	f7ff ff42 	bl	8014d80 <__NVIC_EnableIRQ>
}
 8014efc:	bf00      	nop
 8014efe:	3708      	adds	r7, #8
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}

08014f04 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b082      	sub	sp, #8
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014f0c:	205a      	movs	r0, #90	; 0x5a
 8014f0e:	f7ff ff57 	bl	8014dc0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8014f12:	2058      	movs	r0, #88	; 0x58
 8014f14:	f7ff ff54 	bl	8014dc0 <__NVIC_DisableIRQ>
}
 8014f18:	bf00      	nop
 8014f1a:	3708      	adds	r7, #8
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}

08014f20 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014f20:	b480      	push	{r7}
 8014f22:	b083      	sub	sp, #12
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014f28:	4b11      	ldr	r3, [pc, #68]	; (8014f70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014f2a:	68db      	ldr	r3, [r3, #12]
 8014f2c:	b29b      	uxth	r3, r3
 8014f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014f32:	b29b      	uxth	r3, r3
 8014f34:	3b01      	subs	r3, #1
 8014f36:	b29a      	uxth	r2, r3
 8014f38:	4b0e      	ldr	r3, [pc, #56]	; (8014f74 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014f3a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8014f3c:	4b0c      	ldr	r3, [pc, #48]	; (8014f70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014f3e:	691b      	ldr	r3, [r3, #16]
 8014f40:	b29b      	uxth	r3, r3
 8014f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014f46:	b29b      	uxth	r3, r3
 8014f48:	3b01      	subs	r3, #1
 8014f4a:	b29a      	uxth	r2, r3
 8014f4c:	4b0a      	ldr	r3, [pc, #40]	; (8014f78 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8014f4e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8014f50:	4b08      	ldr	r3, [pc, #32]	; (8014f74 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014f52:	881a      	ldrh	r2, [r3, #0]
 8014f54:	4b06      	ldr	r3, [pc, #24]	; (8014f70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014f56:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8014f58:	4b05      	ldr	r3, [pc, #20]	; (8014f70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f5c:	4a04      	ldr	r2, [pc, #16]	; (8014f70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014f5e:	f043 0301 	orr.w	r3, r3, #1
 8014f62:	6353      	str	r3, [r2, #52]	; 0x34
}
 8014f64:	bf00      	nop
 8014f66:	370c      	adds	r7, #12
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6e:	4770      	bx	lr
 8014f70:	40016800 	.word	0x40016800
 8014f74:	2000bcb8 	.word	0x2000bcb8
 8014f78:	2000bcba 	.word	0x2000bcba

08014f7c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8014f7c:	b480      	push	{r7}
 8014f7e:	b083      	sub	sp, #12
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8014f84:	4b03      	ldr	r3, [pc, #12]	; (8014f94 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8014f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014f88:	4618      	mov	r0, r3
 8014f8a:	370c      	adds	r7, #12
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f92:	4770      	bx	lr
 8014f94:	40016884 	.word	0x40016884

08014f98 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8014f98:	b480      	push	{r7}
 8014f9a:	b083      	sub	sp, #12
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
 8014fa0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8014fa2:	4a06      	ldr	r2, [pc, #24]	; (8014fbc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8014fa4:	683b      	ldr	r3, [r7, #0]
 8014fa6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8014fa8:	4b05      	ldr	r3, [pc, #20]	; (8014fc0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8014faa:	2201      	movs	r2, #1
 8014fac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014fae:	bf00      	nop
 8014fb0:	370c      	adds	r7, #12
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb8:	4770      	bx	lr
 8014fba:	bf00      	nop
 8014fbc:	40016884 	.word	0x40016884
 8014fc0:	40016800 	.word	0x40016800

08014fc4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
 8014fcc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	6839      	ldr	r1, [r7, #0]
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f000 fe44 	bl	8015c60 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8014fd8:	bf00      	nop
 8014fda:	3708      	adds	r7, #8
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b085      	sub	sp, #20
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8014fe8:	4b0d      	ldr	r3, [pc, #52]	; (8015020 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fec:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8014fee:	4b0c      	ldr	r3, [pc, #48]	; (8015020 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014ff0:	68db      	ldr	r3, [r3, #12]
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014ff8:	b29b      	uxth	r3, r3
 8014ffa:	3301      	adds	r3, #1
 8014ffc:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8014ffe:	89fa      	ldrh	r2, [r7, #14]
 8015000:	89bb      	ldrh	r3, [r7, #12]
 8015002:	429a      	cmp	r2, r3
 8015004:	d201      	bcs.n	801500a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8015006:	2300      	movs	r3, #0
 8015008:	e003      	b.n	8015012 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 801500a:	89fa      	ldrh	r2, [r7, #14]
 801500c:	89bb      	ldrh	r3, [r7, #12]
 801500e:	1ad3      	subs	r3, r2, r3
 8015010:	b29b      	uxth	r3, r3
    }
}
 8015012:	4618      	mov	r0, r3
 8015014:	3714      	adds	r7, #20
 8015016:	46bd      	mov	sp, r7
 8015018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501c:	4770      	bx	lr
 801501e:	bf00      	nop
 8015020:	40016800 	.word	0x40016800

08015024 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8015024:	b580      	push	{r7, lr}
 8015026:	b082      	sub	sp, #8
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 801502c:	4b1a      	ldr	r3, [pc, #104]	; (8015098 <HAL_LTDC_LineEventCallback+0x74>)
 801502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015030:	4a1a      	ldr	r2, [pc, #104]	; (801509c <HAL_LTDC_LineEventCallback+0x78>)
 8015032:	8812      	ldrh	r2, [r2, #0]
 8015034:	4293      	cmp	r3, r2
 8015036:	bf0c      	ite	eq
 8015038:	2301      	moveq	r3, #1
 801503a:	2300      	movne	r3, #0
 801503c:	b2db      	uxtb	r3, r3
 801503e:	2b00      	cmp	r3, #0
 8015040:	d017      	beq.n	8015072 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8015042:	4b17      	ldr	r3, [pc, #92]	; (80150a0 <HAL_LTDC_LineEventCallback+0x7c>)
 8015044:	881b      	ldrh	r3, [r3, #0]
 8015046:	4619      	mov	r1, r3
 8015048:	6878      	ldr	r0, [r7, #4]
 801504a:	f7f0 fee3 	bl	8005e14 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801504e:	f7fa fbaf 	bl	800f7b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8015052:	4603      	mov	r3, r0
 8015054:	4618      	mov	r0, r3
 8015056:	f7ff fe32 	bl	8014cbe <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801505a:	f7fe fce5 	bl	8013a28 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801505e:	f7fa fba7 	bl	800f7b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8015062:	4603      	mov	r3, r0
 8015064:	4618      	mov	r0, r3
 8015066:	f001 fb73 	bl	8016750 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801506a:	2000      	movs	r0, #0
 801506c:	f7fe f9e6 	bl	801343c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8015070:	e00e      	b.n	8015090 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8015072:	4b0a      	ldr	r3, [pc, #40]	; (801509c <HAL_LTDC_LineEventCallback+0x78>)
 8015074:	881b      	ldrh	r3, [r3, #0]
 8015076:	4619      	mov	r1, r3
 8015078:	6878      	ldr	r0, [r7, #4]
 801507a:	f7f0 fecb 	bl	8005e14 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801507e:	2000      	movs	r0, #0
 8015080:	f7fe f9e7 	bl	8013452 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8015084:	f7fa fb94 	bl	800f7b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8015088:	4603      	mov	r3, r0
 801508a:	4618      	mov	r0, r3
 801508c:	f7ff fdf9 	bl	8014c82 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8015090:	bf00      	nop
 8015092:	3708      	adds	r7, #8
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}
 8015098:	40016800 	.word	0x40016800
 801509c:	2000bcb8 	.word	0x2000bcb8
 80150a0:	2000bcba 	.word	0x2000bcba

080150a4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80150a4:	8880      	ldrh	r0, [r0, #4]
 80150a6:	4770      	bx	lr

080150a8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80150a8:	2300      	movs	r3, #0
 80150aa:	8083      	strh	r3, [r0, #4]
 80150ac:	4770      	bx	lr
	...

080150b0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80150b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150b2:	6803      	ldr	r3, [r0, #0]
 80150b4:	460e      	mov	r6, r1
 80150b6:	2100      	movs	r1, #0
 80150b8:	4605      	mov	r5, r0
 80150ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150bc:	4798      	blx	r3
 80150be:	4604      	mov	r4, r0
 80150c0:	682b      	ldr	r3, [r5, #0]
 80150c2:	4628      	mov	r0, r5
 80150c4:	1b34      	subs	r4, r6, r4
 80150c6:	6a1b      	ldr	r3, [r3, #32]
 80150c8:	b2a4      	uxth	r4, r4
 80150ca:	4798      	blx	r3
 80150cc:	88ab      	ldrh	r3, [r5, #4]
 80150ce:	fbb4 f4f0 	udiv	r4, r4, r0
 80150d2:	42a3      	cmp	r3, r4
 80150d4:	d805      	bhi.n	80150e2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80150d6:	4b0e      	ldr	r3, [pc, #56]	; (8015110 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80150d8:	211e      	movs	r1, #30
 80150da:	4a0e      	ldr	r2, [pc, #56]	; (8015114 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80150dc:	480e      	ldr	r0, [pc, #56]	; (8015118 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80150de:	f00f fe07 	bl	8024cf0 <__assert_func>
 80150e2:	682b      	ldr	r3, [r5, #0]
 80150e4:	2100      	movs	r1, #0
 80150e6:	4628      	mov	r0, r5
 80150e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150ea:	4798      	blx	r3
 80150ec:	682b      	ldr	r3, [r5, #0]
 80150ee:	4607      	mov	r7, r0
 80150f0:	4628      	mov	r0, r5
 80150f2:	6a1b      	ldr	r3, [r3, #32]
 80150f4:	4798      	blx	r3
 80150f6:	1bf3      	subs	r3, r6, r7
 80150f8:	b29b      	uxth	r3, r3
 80150fa:	fbb3 f2f0 	udiv	r2, r3, r0
 80150fe:	fb02 3010 	mls	r0, r2, r0, r3
 8015102:	b118      	cbz	r0, 801510c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8015104:	4b05      	ldr	r3, [pc, #20]	; (801511c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8015106:	211f      	movs	r1, #31
 8015108:	4a02      	ldr	r2, [pc, #8]	; (8015114 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801510a:	e7e7      	b.n	80150dc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 801510c:	4620      	mov	r0, r4
 801510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015110:	08026e08 	.word	0x08026e08
 8015114:	08026f76 	.word	0x08026f76
 8015118:	08026e1d 	.word	0x08026e1d
 801511c:	08026e4b 	.word	0x08026e4b

08015120 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015120:	b538      	push	{r3, r4, r5, lr}
 8015122:	6803      	ldr	r3, [r0, #0]
 8015124:	460d      	mov	r5, r1
 8015126:	4604      	mov	r4, r0
 8015128:	6a1b      	ldr	r3, [r3, #32]
 801512a:	4798      	blx	r3
 801512c:	4285      	cmp	r5, r0
 801512e:	d905      	bls.n	801513c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8015130:	4b0c      	ldr	r3, [pc, #48]	; (8015164 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8015132:	212f      	movs	r1, #47	; 0x2f
 8015134:	4a0c      	ldr	r2, [pc, #48]	; (8015168 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015136:	480d      	ldr	r0, [pc, #52]	; (801516c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015138:	f00f fdda 	bl	8024cf0 <__assert_func>
 801513c:	6823      	ldr	r3, [r4, #0]
 801513e:	4620      	mov	r0, r4
 8015140:	88a5      	ldrh	r5, [r4, #4]
 8015142:	69db      	ldr	r3, [r3, #28]
 8015144:	4798      	blx	r3
 8015146:	4285      	cmp	r5, r0
 8015148:	d303      	bcc.n	8015152 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801514a:	4b09      	ldr	r3, [pc, #36]	; (8015170 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801514c:	2130      	movs	r1, #48	; 0x30
 801514e:	4a06      	ldr	r2, [pc, #24]	; (8015168 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015150:	e7f1      	b.n	8015136 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8015152:	6823      	ldr	r3, [r4, #0]
 8015154:	4620      	mov	r0, r4
 8015156:	88a1      	ldrh	r1, [r4, #4]
 8015158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801515a:	4798      	blx	r3
 801515c:	88a3      	ldrh	r3, [r4, #4]
 801515e:	3301      	adds	r3, #1
 8015160:	80a3      	strh	r3, [r4, #4]
 8015162:	bd38      	pop	{r3, r4, r5, pc}
 8015164:	08026ec5 	.word	0x08026ec5
 8015168:	08026fb9 	.word	0x08026fb9
 801516c:	08026e1d 	.word	0x08026e1d
 8015170:	08026edc 	.word	0x08026edc

08015174 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015174:	b570      	push	{r4, r5, r6, lr}
 8015176:	6803      	ldr	r3, [r0, #0]
 8015178:	4616      	mov	r6, r2
 801517a:	4604      	mov	r4, r0
 801517c:	460d      	mov	r5, r1
 801517e:	6a1b      	ldr	r3, [r3, #32]
 8015180:	4798      	blx	r3
 8015182:	4286      	cmp	r6, r0
 8015184:	d905      	bls.n	8015192 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8015186:	4b06      	ldr	r3, [pc, #24]	; (80151a0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015188:	2139      	movs	r1, #57	; 0x39
 801518a:	4a06      	ldr	r2, [pc, #24]	; (80151a4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801518c:	4806      	ldr	r0, [pc, #24]	; (80151a8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801518e:	f00f fdaf 	bl	8024cf0 <__assert_func>
 8015192:	6823      	ldr	r3, [r4, #0]
 8015194:	4629      	mov	r1, r5
 8015196:	4620      	mov	r0, r4
 8015198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801519a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801519e:	4718      	bx	r3
 80151a0:	08026ec5 	.word	0x08026ec5
 80151a4:	08026f2c 	.word	0x08026f2c
 80151a8:	08026e1d 	.word	0x08026e1d

080151ac <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80151ac:	4770      	bx	lr
	...

080151b0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80151b0:	4a02      	ldr	r2, [pc, #8]	; (80151bc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80151b2:	6002      	str	r2, [r0, #0]
 80151b4:	2200      	movs	r2, #0
 80151b6:	8082      	strh	r2, [r0, #4]
 80151b8:	4770      	bx	lr
 80151ba:	bf00      	nop
 80151bc:	08026f00 	.word	0x08026f00

080151c0 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 80151c0:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 80151c4:	4770      	bx	lr

080151c6 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 80151c6:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 80151ca:	4770      	bx	lr

080151cc <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 80151cc:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 80151d0:	4770      	bx	lr

080151d2 <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 80151d2:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 80151d6:	4770      	bx	lr

080151d8 <_ZN8touchgfx11BoxProgressD1Ev>:
 80151d8:	4b03      	ldr	r3, [pc, #12]	; (80151e8 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 80151da:	b510      	push	{r4, lr}
 80151dc:	4604      	mov	r4, r0
 80151de:	6003      	str	r3, [r0, #0]
 80151e0:	f000 f8b6 	bl	8015350 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80151e4:	4620      	mov	r0, r4
 80151e6:	bd10      	pop	{r4, pc}
 80151e8:	08027000 	.word	0x08027000

080151ec <_ZN8touchgfx11BoxProgressD0Ev>:
 80151ec:	b510      	push	{r4, lr}
 80151ee:	4604      	mov	r4, r0
 80151f0:	f7ff fff2 	bl	80151d8 <_ZN8touchgfx11BoxProgressD1Ev>
 80151f4:	21c0      	movs	r1, #192	; 0xc0
 80151f6:	4620      	mov	r0, r4
 80151f8:	f00f fd4f 	bl	8024c9a <_ZdlPvj>
 80151fc:	4620      	mov	r0, r4
 80151fe:	bd10      	pop	{r4, pc}

08015200 <_ZN8touchgfx11BoxProgressC1Ev>:
 8015200:	b510      	push	{r4, lr}
 8015202:	4604      	mov	r4, r0
 8015204:	f000 f8b8 	bl	8015378 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8015208:	2201      	movs	r2, #1
 801520a:	4b16      	ldr	r3, [pc, #88]	; (8015264 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 801520c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015210:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8015214:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8015218:	4a13      	ldr	r2, [pc, #76]	; (8015268 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 801521a:	6023      	str	r3, [r4, #0]
 801521c:	2300      	movs	r3, #0
 801521e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8015222:	22ff      	movs	r2, #255	; 0xff
 8015224:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8015228:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 801522c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8015230:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8015234:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8015238:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 801523c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8015240:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8015244:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8015248:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 801524c:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8015250:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8015254:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8015258:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 801525c:	f000 fbb8 	bl	80159d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015260:	4620      	mov	r0, r4
 8015262:	bd10      	pop	{r4, pc}
 8015264:	08027000 	.word	0x08027000
 8015268:	080282b8 	.word	0x080282b8

0801526c <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 801526c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015270:	4617      	mov	r7, r2
 8015272:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8015276:	2200      	movs	r2, #0
 8015278:	4604      	mov	r4, r0
 801527a:	460e      	mov	r6, r1
 801527c:	4698      	mov	r8, r3
 801527e:	4611      	mov	r1, r2
 8015280:	9500      	str	r5, [sp, #0]
 8015282:	3090      	adds	r0, #144	; 0x90
 8015284:	f7fa ff64 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015288:	4643      	mov	r3, r8
 801528a:	463a      	mov	r2, r7
 801528c:	4631      	mov	r1, r6
 801528e:	4620      	mov	r0, r4
 8015290:	9508      	str	r5, [sp, #32]
 8015292:	b002      	add	sp, #8
 8015294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015298:	f000 b9fa 	b.w	8015690 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801529c <_ZN8touchgfx11BoxProgress8setValueEi>:
 801529c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801529e:	4604      	mov	r4, r0
 80152a0:	f000 fa40 	bl	8015724 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80152a4:	f104 0590 	add.w	r5, r4, #144	; 0x90
 80152a8:	4628      	mov	r0, r5
 80152aa:	f004 f95b 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
 80152ae:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80152b2:	2b03      	cmp	r3, #3
 80152b4:	d814      	bhi.n	80152e0 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 80152b6:	e8df f003 	tbb	[pc, r3]
 80152ba:	0202      	.short	0x0202
 80152bc:	1010      	.short	0x1010
 80152be:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80152c2:	4620      	mov	r0, r4
 80152c4:	f000 fa88 	bl	80157d8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80152c8:	b200      	sxth	r0, r0
 80152ca:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80152ce:	2b03      	cmp	r3, #3
 80152d0:	d81a      	bhi.n	8015308 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 80152d2:	e8df f003 	tbb	[pc, r3]
 80152d6:	0e07      	.short	0x0e07
 80152d8:	231f      	.short	0x231f
 80152da:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80152de:	e7f0      	b.n	80152c2 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 80152e0:	2000      	movs	r0, #0
 80152e2:	e7f2      	b.n	80152ca <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 80152e4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80152e8:	9300      	str	r3, [sp, #0]
 80152ea:	4603      	mov	r3, r0
 80152ec:	2200      	movs	r2, #0
 80152ee:	2100      	movs	r1, #0
 80152f0:	e007      	b.n	8015302 <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 80152f2:	8921      	ldrh	r1, [r4, #8]
 80152f4:	2200      	movs	r2, #0
 80152f6:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80152fa:	1a09      	subs	r1, r1, r0
 80152fc:	9300      	str	r3, [sp, #0]
 80152fe:	4603      	mov	r3, r0
 8015300:	b209      	sxth	r1, r1
 8015302:	4628      	mov	r0, r5
 8015304:	f7fa ff24 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015308:	4628      	mov	r0, r5
 801530a:	b003      	add	sp, #12
 801530c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015310:	f004 b928 	b.w	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015314:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015318:	9000      	str	r0, [sp, #0]
 801531a:	e7e7      	b.n	80152ec <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 801531c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8015320:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015324:	1a12      	subs	r2, r2, r0
 8015326:	9000      	str	r0, [sp, #0]
 8015328:	b212      	sxth	r2, r2
 801532a:	e7e0      	b.n	80152ee <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

0801532c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 801532c:	b570      	push	{r4, r5, r6, lr}
 801532e:	6803      	ldr	r3, [r0, #0]
 8015330:	4604      	mov	r4, r0
 8015332:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8015336:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801533a:	4798      	blx	r3
 801533c:	4601      	mov	r1, r0
 801533e:	462b      	mov	r3, r5
 8015340:	4620      	mov	r0, r4
 8015342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015346:	4718      	bx	r3

08015348 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8015348:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 801534c:	4770      	bx	lr
	...

08015350 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8015350:	4b03      	ldr	r3, [pc, #12]	; (8015360 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8015352:	b510      	push	{r4, lr}
 8015354:	4604      	mov	r4, r0
 8015356:	6003      	str	r3, [r0, #0]
 8015358:	f000 f999 	bl	801568e <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 801535c:	4620      	mov	r0, r4
 801535e:	bd10      	pop	{r4, pc}
 8015360:	080270d8 	.word	0x080270d8

08015364 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8015364:	b510      	push	{r4, lr}
 8015366:	4604      	mov	r4, r0
 8015368:	f7ff fff2 	bl	8015350 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801536c:	2190      	movs	r1, #144	; 0x90
 801536e:	4620      	mov	r0, r4
 8015370:	f00f fc93 	bl	8024c9a <_ZdlPvj>
 8015374:	4620      	mov	r0, r4
 8015376:	bd10      	pop	{r4, pc}

08015378 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8015378:	b510      	push	{r4, lr}
 801537a:	4604      	mov	r4, r0
 801537c:	f000 fa4c 	bl	8015818 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8015380:	4b03      	ldr	r3, [pc, #12]	; (8015390 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8015382:	2100      	movs	r1, #0
 8015384:	4620      	mov	r0, r4
 8015386:	6023      	str	r3, [r4, #0]
 8015388:	f7ff ffd0 	bl	801532c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 801538c:	4620      	mov	r0, r4
 801538e:	bd10      	pop	{r4, pc}
 8015390:	080270d8 	.word	0x080270d8

08015394 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8015394:	b570      	push	{r4, r5, r6, lr}
 8015396:	6803      	ldr	r3, [r0, #0]
 8015398:	4604      	mov	r4, r0
 801539a:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 801539e:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 80153a2:	4798      	blx	r3
 80153a4:	4601      	mov	r1, r0
 80153a6:	462b      	mov	r3, r5
 80153a8:	4620      	mov	r0, r4
 80153aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153ae:	4718      	bx	r3

080153b0 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 80153b0:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 80153b4:	4770      	bx	lr

080153b6 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 80153b6:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 80153ba:	4770      	bx	lr

080153bc <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 80153bc:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 80153c0:	4770      	bx	lr

080153c2 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 80153c2:	b507      	push	{r0, r1, r2, lr}
 80153c4:	ab02      	add	r3, sp, #8
 80153c6:	30bc      	adds	r0, #188	; 0xbc
 80153c8:	f823 1d04 	strh.w	r1, [r3, #-4]!
 80153cc:	4619      	mov	r1, r3
 80153ce:	f002 f9a9 	bl	8017724 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 80153d2:	b003      	add	sp, #12
 80153d4:	f85d fb04 	ldr.w	pc, [sp], #4

080153d8 <_ZN8touchgfx13ImageProgressD1Ev>:
 80153d8:	4b03      	ldr	r3, [pc, #12]	; (80153e8 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 80153da:	b510      	push	{r4, lr}
 80153dc:	4604      	mov	r4, r0
 80153de:	6003      	str	r3, [r0, #0]
 80153e0:	f7ff ffb6 	bl	8015350 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80153e4:	4620      	mov	r0, r4
 80153e6:	bd10      	pop	{r4, pc}
 80153e8:	08027204 	.word	0x08027204

080153ec <_ZN8touchgfx13ImageProgressD0Ev>:
 80153ec:	b510      	push	{r4, lr}
 80153ee:	4604      	mov	r4, r0
 80153f0:	f7ff fff2 	bl	80153d8 <_ZN8touchgfx13ImageProgressD1Ev>
 80153f4:	21f0      	movs	r1, #240	; 0xf0
 80153f6:	4620      	mov	r0, r4
 80153f8:	f00f fc4f 	bl	8024c9a <_ZdlPvj>
 80153fc:	4620      	mov	r0, r4
 80153fe:	bd10      	pop	{r4, pc}

08015400 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8015400:	b508      	push	{r3, lr}
 8015402:	4b06      	ldr	r3, [pc, #24]	; (801541c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	b92b      	cbnz	r3, 8015414 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8015408:	4b05      	ldr	r3, [pc, #20]	; (8015420 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 801540a:	21b8      	movs	r1, #184	; 0xb8
 801540c:	4a05      	ldr	r2, [pc, #20]	; (8015424 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 801540e:	4806      	ldr	r0, [pc, #24]	; (8015428 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8015410:	f00f fc6e 	bl	8024cf0 <__assert_func>
 8015414:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8015418:	bd08      	pop	{r3, pc}
 801541a:	bf00      	nop
 801541c:	2000bd90 	.word	0x2000bd90
 8015420:	08027198 	.word	0x08027198
 8015424:	080272dc 	.word	0x080272dc
 8015428:	080271d4 	.word	0x080271d4

0801542c <_ZN8touchgfx13ImageProgressC1Ev>:
 801542c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015430:	4604      	mov	r4, r0
 8015432:	f7ff ffa1 	bl	8015378 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8015436:	4b31      	ldr	r3, [pc, #196]	; (80154fc <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8015438:	a902      	add	r1, sp, #8
 801543a:	4626      	mov	r6, r4
 801543c:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8015440:	2500      	movs	r5, #0
 8015442:	4a2f      	ldr	r2, [pc, #188]	; (8015500 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8015444:	f846 3b90 	str.w	r3, [r6], #144
 8015448:	2701      	movs	r7, #1
 801544a:	4b2e      	ldr	r3, [pc, #184]	; (8015504 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 801544c:	4640      	mov	r0, r8
 801544e:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 8015452:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8015456:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801545a:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 801545e:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8015462:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 8015466:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 801546a:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 801546e:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8015472:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 8015476:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 801547a:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 801547e:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8015482:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8015486:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 801548a:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 801548e:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 8015492:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8015496:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 801549a:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 801549e:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 80154a2:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 80154a6:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 80154aa:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 80154ae:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 80154b2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 80154b6:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 80154ba:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 80154be:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 80154c2:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 80154c6:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 80154ca:	f002 fb6f 	bl	8017bac <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80154ce:	4b0e      	ldr	r3, [pc, #56]	; (8015508 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 80154d0:	4641      	mov	r1, r8
 80154d2:	4630      	mov	r0, r6
 80154d4:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 80154d8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80154dc:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 80154e0:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 80154e4:	f000 fa74 	bl	80159d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80154e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80154ec:	4631      	mov	r1, r6
 80154ee:	f000 fa6f 	bl	80159d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80154f2:	4620      	mov	r0, r4
 80154f4:	b002      	add	sp, #8
 80154f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154fa:	bf00      	nop
 80154fc:	08027204 	.word	0x08027204
 8015500:	08028420 	.word	0x08028420
 8015504:	08027580 	.word	0x08027580
 8015508:	08028320 	.word	0x08028320

0801550c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 801550c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015510:	4617      	mov	r7, r2
 8015512:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8015516:	2200      	movs	r2, #0
 8015518:	4604      	mov	r4, r0
 801551a:	460e      	mov	r6, r1
 801551c:	4698      	mov	r8, r3
 801551e:	4611      	mov	r1, r2
 8015520:	9500      	str	r5, [sp, #0]
 8015522:	3090      	adds	r0, #144	; 0x90
 8015524:	f7fa fe14 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015528:	4643      	mov	r3, r8
 801552a:	463a      	mov	r2, r7
 801552c:	4631      	mov	r1, r6
 801552e:	4620      	mov	r0, r4
 8015530:	9508      	str	r5, [sp, #32]
 8015532:	b002      	add	sp, #8
 8015534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015538:	f000 b8aa 	b.w	8015690 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801553c <_ZN8touchgfx13ImageProgress8setValueEi>:
 801553c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801553e:	4604      	mov	r4, r0
 8015540:	f000 f8f0 	bl	8015724 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8015544:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8015548:	4638      	mov	r0, r7
 801554a:	f004 f80b 	bl	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
 801554e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8015552:	4620      	mov	r0, r4
 8015554:	2b01      	cmp	r3, #1
 8015556:	bf94      	ite	ls
 8015558:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 801555c:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8015560:	f000 f93a 	bl	80157d8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8015564:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8015568:	4606      	mov	r6, r0
 801556a:	b205      	sxth	r5, r0
 801556c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8015570:	2a00      	cmp	r2, #0
 8015572:	d056      	beq.n	8015622 <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8015574:	2b03      	cmp	r3, #3
 8015576:	d82c      	bhi.n	80155d2 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8015578:	e8df f003 	tbb	[pc, r3]
 801557c:	3d311202 	.word	0x3d311202
 8015580:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015584:	2200      	movs	r2, #0
 8015586:	9300      	str	r3, [sp, #0]
 8015588:	4611      	mov	r1, r2
 801558a:	462b      	mov	r3, r5
 801558c:	4638      	mov	r0, r7
 801558e:	f7fa fddf 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015592:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015596:	9300      	str	r3, [sp, #0]
 8015598:	462b      	mov	r3, r5
 801559a:	2200      	movs	r2, #0
 801559c:	4611      	mov	r1, r2
 801559e:	e014      	b.n	80155ca <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 80155a0:	8921      	ldrh	r1, [r4, #8]
 80155a2:	2200      	movs	r2, #0
 80155a4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80155a8:	1a09      	subs	r1, r1, r0
 80155aa:	4638      	mov	r0, r7
 80155ac:	9300      	str	r3, [sp, #0]
 80155ae:	462b      	mov	r3, r5
 80155b0:	b209      	sxth	r1, r1
 80155b2:	f7fa fdcd 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
 80155b6:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 80155ba:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80155be:	4249      	negs	r1, r1
 80155c0:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 80155c4:	9200      	str	r2, [sp, #0]
 80155c6:	b209      	sxth	r1, r1
 80155c8:	2200      	movs	r2, #0
 80155ca:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80155ce:	f7fa fdbf 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
 80155d2:	4638      	mov	r0, r7
 80155d4:	b003      	add	sp, #12
 80155d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80155da:	f003 bfc3 	b.w	8019564 <_ZNK8touchgfx8Drawable10invalidateEv>
 80155de:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80155e2:	2200      	movs	r2, #0
 80155e4:	9500      	str	r5, [sp, #0]
 80155e6:	2100      	movs	r1, #0
 80155e8:	4638      	mov	r0, r7
 80155ea:	f7fa fdb1 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
 80155ee:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80155f2:	9500      	str	r5, [sp, #0]
 80155f4:	e7d1      	b.n	801559a <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 80155f6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80155fa:	2100      	movs	r1, #0
 80155fc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015600:	1a12      	subs	r2, r2, r0
 8015602:	9500      	str	r5, [sp, #0]
 8015604:	4638      	mov	r0, r7
 8015606:	b212      	sxth	r2, r2
 8015608:	f7fa fda2 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
 801560c:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8015610:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8015614:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015618:	4252      	negs	r2, r2
 801561a:	9100      	str	r1, [sp, #0]
 801561c:	b212      	sxth	r2, r2
 801561e:	2100      	movs	r1, #0
 8015620:	e7d3      	b.n	80155ca <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8015622:	2b03      	cmp	r3, #3
 8015624:	d8d5      	bhi.n	80155d2 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8015626:	e8df f003 	tbb	[pc, r3]
 801562a:	1102      	.short	0x1102
 801562c:	2a1b      	.short	0x2a1b
 801562e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015632:	2200      	movs	r2, #0
 8015634:	4638      	mov	r0, r7
 8015636:	4611      	mov	r1, r2
 8015638:	9300      	str	r3, [sp, #0]
 801563a:	462b      	mov	r3, r5
 801563c:	f7fa fd88 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015640:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015644:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015648:	1af1      	subs	r1, r6, r3
 801564a:	e7bb      	b.n	80155c4 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 801564c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8015650:	2200      	movs	r2, #0
 8015652:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015656:	1a09      	subs	r1, r1, r0
 8015658:	9300      	str	r3, [sp, #0]
 801565a:	462b      	mov	r3, r5
 801565c:	b209      	sxth	r1, r1
 801565e:	e795      	b.n	801558c <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8015660:	2200      	movs	r2, #0
 8015662:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015666:	4638      	mov	r0, r7
 8015668:	9500      	str	r5, [sp, #0]
 801566a:	4611      	mov	r1, r2
 801566c:	f7fa fd70 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015670:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8015674:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015678:	1a32      	subs	r2, r6, r0
 801567a:	9000      	str	r0, [sp, #0]
 801567c:	e7ce      	b.n	801561c <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 801567e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8015682:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015686:	1a12      	subs	r2, r2, r0
 8015688:	9500      	str	r5, [sp, #0]
 801568a:	b212      	sxth	r2, r2
 801568c:	e7ab      	b.n	80155e6 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

0801568e <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 801568e:	4770      	bx	lr

08015690 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8015690:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015694:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8015698:	4604      	mov	r4, r0
 801569a:	460e      	mov	r6, r1
 801569c:	4698      	mov	r8, r3
 801569e:	9700      	str	r7, [sp, #0]
 80156a0:	3058      	adds	r0, #88	; 0x58
 80156a2:	4615      	mov	r5, r2
 80156a4:	f7fa fd54 	bl	8010150 <_ZN8touchgfx8Drawable11setPositionEssss>
 80156a8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80156ac:	eb06 0308 	add.w	r3, r6, r8
 80156b0:	429a      	cmp	r2, r3
 80156b2:	eb05 0207 	add.w	r2, r5, r7
 80156b6:	bfb8      	it	lt
 80156b8:	8123      	strhlt	r3, [r4, #8]
 80156ba:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80156be:	4293      	cmp	r3, r2
 80156c0:	bfb8      	it	lt
 80156c2:	8162      	strhlt	r2, [r4, #10]
 80156c4:	b002      	add	sp, #8
 80156c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080156ca <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 80156ca:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 80156ce:	4770      	bx	lr

080156d0 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 80156d0:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 80156d4:	4770      	bx	lr

080156d6 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80156d6:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 80156da:	4770      	bx	lr

080156dc <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80156dc:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 80156e0:	4770      	bx	lr

080156e2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 80156e2:	b510      	push	{r4, lr}
 80156e4:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80156e8:	800c      	strh	r4, [r1, #0]
 80156ea:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80156ee:	8011      	strh	r1, [r2, #0]
 80156f0:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80156f4:	801a      	strh	r2, [r3, #0]
 80156f6:	9b02      	ldr	r3, [sp, #8]
 80156f8:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 80156fc:	801a      	strh	r2, [r3, #0]
 80156fe:	bd10      	pop	{r4, pc}

08015700 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8015700:	b510      	push	{r4, lr}
 8015702:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8015706:	800c      	strh	r4, [r1, #0]
 8015708:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801570c:	8011      	strh	r1, [r2, #0]
 801570e:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8015712:	801a      	strh	r2, [r3, #0]
 8015714:	bd10      	pop	{r4, pc}

08015716 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8015716:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 801571a:	800b      	strh	r3, [r1, #0]
 801571c:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8015720:	8013      	strh	r3, [r2, #0]
 8015722:	4770      	bx	lr

08015724 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8015724:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8015728:	4299      	cmp	r1, r3
 801572a:	bfb8      	it	lt
 801572c:	4619      	movlt	r1, r3
 801572e:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8015732:	4299      	cmp	r1, r3
 8015734:	bfa8      	it	ge
 8015736:	4619      	movge	r1, r3
 8015738:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 801573c:	4770      	bx	lr

0801573e <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801573e:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8015742:	4770      	bx	lr

08015744 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8015744:	b510      	push	{r4, lr}
 8015746:	4604      	mov	r4, r0
 8015748:	2190      	movs	r1, #144	; 0x90
 801574a:	f00f faa6 	bl	8024c9a <_ZdlPvj>
 801574e:	4620      	mov	r0, r4
 8015750:	bd10      	pop	{r4, pc}

08015752 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8015752:	b510      	push	{r4, lr}
 8015754:	4604      	mov	r4, r0
 8015756:	302c      	adds	r0, #44	; 0x2c
 8015758:	f002 fa28 	bl	8017bac <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801575c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801575e:	8123      	strh	r3, [r4, #8]
 8015760:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015762:	8163      	strh	r3, [r4, #10]
 8015764:	bd10      	pop	{r4, pc}
	...

08015768 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8015768:	4291      	cmp	r1, r2
 801576a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801576e:	4604      	mov	r4, r0
 8015770:	460e      	mov	r6, r1
 8015772:	4615      	mov	r5, r2
 8015774:	4698      	mov	r8, r3
 8015776:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801577a:	db05      	blt.n	8015788 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 801577c:	4b12      	ldr	r3, [pc, #72]	; (80157c8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801577e:	214d      	movs	r1, #77	; 0x4d
 8015780:	4a12      	ldr	r2, [pc, #72]	; (80157cc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8015782:	4813      	ldr	r0, [pc, #76]	; (80157d0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8015784:	f00f fab4 	bl	8024cf0 <__assert_func>
 8015788:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 801578c:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8015790:	6803      	ldr	r3, [r0, #0]
 8015792:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8015796:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801579a:	4798      	blx	r3
 801579c:	f1b8 0f00 	cmp.w	r8, #0
 80157a0:	d10c      	bne.n	80157bc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 80157a2:	1bad      	subs	r5, r5, r6
 80157a4:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 80157a8:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 80157ac:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 80157b0:	42bb      	cmp	r3, r7
 80157b2:	d806      	bhi.n	80157c2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 80157b4:	4b07      	ldr	r3, [pc, #28]	; (80157d4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 80157b6:	215a      	movs	r1, #90	; 0x5a
 80157b8:	4a04      	ldr	r2, [pc, #16]	; (80157cc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80157ba:	e7e2      	b.n	8015782 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 80157bc:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 80157c0:	e7f2      	b.n	80157a8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 80157c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157c6:	bf00      	nop
 80157c8:	0802730f 	.word	0x0802730f
 80157cc:	0802744c 	.word	0x0802744c
 80157d0:	08027319 	.word	0x08027319
 80157d4:	08027370 	.word	0x08027370

080157d8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80157d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80157da:	4604      	mov	r4, r0
 80157dc:	460d      	mov	r5, r1
 80157de:	b1b9      	cbz	r1, 8015810 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 80157e0:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 80157e4:	ab01      	add	r3, sp, #4
 80157e6:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 80157ea:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 80157ee:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 80157f2:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 80157f6:	1a12      	subs	r2, r2, r0
 80157f8:	1b89      	subs	r1, r1, r6
 80157fa:	1a38      	subs	r0, r7, r0
 80157fc:	f003 fff3 	bl	80197e6 <_ZN8touchgfx6muldivElllRl>
 8015800:	4629      	mov	r1, r5
 8015802:	ab01      	add	r3, sp, #4
 8015804:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8015808:	4430      	add	r0, r6
 801580a:	f003 ffec 	bl	80197e6 <_ZN8touchgfx6muldivElllRl>
 801580e:	b285      	uxth	r5, r0
 8015810:	4628      	mov	r0, r5
 8015812:	b003      	add	sp, #12
 8015814:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015818 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8015818:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801581c:	4604      	mov	r4, r0
 801581e:	2600      	movs	r6, #0
 8015820:	f7fa fc48 	bl	80100b4 <_ZN8touchgfx8DrawableC1Ev>
 8015824:	4b1b      	ldr	r3, [pc, #108]	; (8015894 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8015826:	4625      	mov	r5, r4
 8015828:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801582c:	af02      	add	r7, sp, #8
 801582e:	62a6      	str	r6, [r4, #40]	; 0x28
 8015830:	f845 3b2c 	str.w	r3, [r5], #44
 8015834:	4628      	mov	r0, r5
 8015836:	f827 8d04 	strh.w	r8, [r7, #-4]!
 801583a:	f7fa fc3b 	bl	80100b4 <_ZN8touchgfx8DrawableC1Ev>
 801583e:	4b16      	ldr	r3, [pc, #88]	; (8015898 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 8015840:	4639      	mov	r1, r7
 8015842:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8015846:	4628      	mov	r0, r5
 8015848:	62e3      	str	r3, [r4, #44]	; 0x2c
 801584a:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801584e:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8015852:	f002 f9ab 	bl	8017bac <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015856:	4638      	mov	r0, r7
 8015858:	f7fa fc2c 	bl	80100b4 <_ZN8touchgfx8DrawableC1Ev>
 801585c:	4b0f      	ldr	r3, [pc, #60]	; (801589c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 801585e:	4632      	mov	r2, r6
 8015860:	4631      	mov	r1, r6
 8015862:	65a3      	str	r3, [r4, #88]	; 0x58
 8015864:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8015868:	4628      	mov	r0, r5
 801586a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801586e:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 8015872:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8015876:	f7fa fcb6 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
 801587a:	4629      	mov	r1, r5
 801587c:	4620      	mov	r0, r4
 801587e:	f000 f8a7 	bl	80159d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015882:	4620      	mov	r0, r4
 8015884:	4639      	mov	r1, r7
 8015886:	f000 f8a3 	bl	80159d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801588a:	4620      	mov	r0, r4
 801588c:	b002      	add	sp, #8
 801588e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015892:	bf00      	nop
 8015894:	08027394 	.word	0x08027394
 8015898:	08028420 	.word	0x08028420
 801589c:	08027580 	.word	0x08027580

080158a0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80158a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80158a2:	2000      	movs	r0, #0
 80158a4:	b12b      	cbz	r3, 80158b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80158a6:	b920      	cbnz	r0, 80158b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80158a8:	1a5a      	subs	r2, r3, r1
 80158aa:	699b      	ldr	r3, [r3, #24]
 80158ac:	4250      	negs	r0, r2
 80158ae:	4150      	adcs	r0, r2
 80158b0:	e7f8      	b.n	80158a4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80158b2:	4770      	bx	lr

080158b4 <_ZN8touchgfx9Container9removeAllEv>:
 80158b4:	2200      	movs	r2, #0
 80158b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80158b8:	b123      	cbz	r3, 80158c4 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80158ba:	6999      	ldr	r1, [r3, #24]
 80158bc:	6281      	str	r1, [r0, #40]	; 0x28
 80158be:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80158c2:	e7f8      	b.n	80158b6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80158c4:	4770      	bx	lr

080158c6 <_ZN8touchgfx9Container6unlinkEv>:
 80158c6:	2300      	movs	r3, #0
 80158c8:	6283      	str	r3, [r0, #40]	; 0x28
 80158ca:	4770      	bx	lr

080158cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80158cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158d0:	461f      	mov	r7, r3
 80158d2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80158d6:	460d      	mov	r5, r1
 80158d8:	4616      	mov	r6, r2
 80158da:	b103      	cbz	r3, 80158de <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80158dc:	6038      	str	r0, [r7, #0]
 80158de:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80158e0:	b314      	cbz	r4, 8015928 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80158e2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80158e6:	b1eb      	cbz	r3, 8015924 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80158e8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80158ec:	428d      	cmp	r5, r1
 80158ee:	db19      	blt.n	8015924 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80158f0:	b289      	uxth	r1, r1
 80158f2:	8923      	ldrh	r3, [r4, #8]
 80158f4:	440b      	add	r3, r1
 80158f6:	b21b      	sxth	r3, r3
 80158f8:	429d      	cmp	r5, r3
 80158fa:	da13      	bge.n	8015924 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80158fc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015900:	4296      	cmp	r6, r2
 8015902:	db0f      	blt.n	8015924 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015904:	b292      	uxth	r2, r2
 8015906:	8963      	ldrh	r3, [r4, #10]
 8015908:	4413      	add	r3, r2
 801590a:	b21b      	sxth	r3, r3
 801590c:	429e      	cmp	r6, r3
 801590e:	da09      	bge.n	8015924 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015910:	6823      	ldr	r3, [r4, #0]
 8015912:	1ab2      	subs	r2, r6, r2
 8015914:	1a69      	subs	r1, r5, r1
 8015916:	4620      	mov	r0, r4
 8015918:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801591c:	b212      	sxth	r2, r2
 801591e:	463b      	mov	r3, r7
 8015920:	b209      	sxth	r1, r1
 8015922:	47c0      	blx	r8
 8015924:	69a4      	ldr	r4, [r4, #24]
 8015926:	e7db      	b.n	80158e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801592c <_ZNK8touchgfx9Container12getSolidRectEv>:
 801592c:	2200      	movs	r2, #0
 801592e:	8002      	strh	r2, [r0, #0]
 8015930:	8042      	strh	r2, [r0, #2]
 8015932:	8082      	strh	r2, [r0, #4]
 8015934:	80c2      	strh	r2, [r0, #6]
 8015936:	4770      	bx	lr

08015938 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015938:	b570      	push	{r4, r5, r6, lr}
 801593a:	460d      	mov	r5, r1
 801593c:	4616      	mov	r6, r2
 801593e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015940:	b13c      	cbz	r4, 8015952 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015942:	6823      	ldr	r3, [r4, #0]
 8015944:	4620      	mov	r0, r4
 8015946:	4632      	mov	r2, r6
 8015948:	4629      	mov	r1, r5
 801594a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801594c:	4798      	blx	r3
 801594e:	69a4      	ldr	r4, [r4, #24]
 8015950:	e7f6      	b.n	8015940 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015952:	bd70      	pop	{r4, r5, r6, pc}

08015954 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015954:	b538      	push	{r3, r4, r5, lr}
 8015956:	460d      	mov	r5, r1
 8015958:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801595a:	b134      	cbz	r4, 801596a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801595c:	682b      	ldr	r3, [r5, #0]
 801595e:	4621      	mov	r1, r4
 8015960:	4628      	mov	r0, r5
 8015962:	689b      	ldr	r3, [r3, #8]
 8015964:	4798      	blx	r3
 8015966:	69a4      	ldr	r4, [r4, #24]
 8015968:	e7f7      	b.n	801595a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801596a:	bd38      	pop	{r3, r4, r5, pc}

0801596c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801596c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801596e:	b19b      	cbz	r3, 8015998 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015970:	428b      	cmp	r3, r1
 8015972:	d109      	bne.n	8015988 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015974:	699a      	ldr	r2, [r3, #24]
 8015976:	2100      	movs	r1, #0
 8015978:	6159      	str	r1, [r3, #20]
 801597a:	6282      	str	r2, [r0, #40]	; 0x28
 801597c:	b902      	cbnz	r2, 8015980 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801597e:	4770      	bx	lr
 8015980:	6199      	str	r1, [r3, #24]
 8015982:	4770      	bx	lr
 8015984:	4613      	mov	r3, r2
 8015986:	b13a      	cbz	r2, 8015998 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015988:	699a      	ldr	r2, [r3, #24]
 801598a:	428a      	cmp	r2, r1
 801598c:	d1fa      	bne.n	8015984 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801598e:	698a      	ldr	r2, [r1, #24]
 8015990:	619a      	str	r2, [r3, #24]
 8015992:	2300      	movs	r3, #0
 8015994:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015998:	4770      	bx	lr

0801599a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801599a:	b410      	push	{r4}
 801599c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801599e:	4604      	mov	r4, r0
 80159a0:	b92b      	cbnz	r3, 80159ae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80159a2:	6803      	ldr	r3, [r0, #0]
 80159a4:	4611      	mov	r1, r2
 80159a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80159ac:	4718      	bx	r3
 80159ae:	b941      	cbnz	r1, 80159c2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80159b0:	6193      	str	r3, [r2, #24]
 80159b2:	6282      	str	r2, [r0, #40]	; 0x28
 80159b4:	6154      	str	r4, [r2, #20]
 80159b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159ba:	4770      	bx	lr
 80159bc:	4603      	mov	r3, r0
 80159be:	2800      	cmp	r0, #0
 80159c0:	d0f9      	beq.n	80159b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80159c2:	4299      	cmp	r1, r3
 80159c4:	6998      	ldr	r0, [r3, #24]
 80159c6:	d1f9      	bne.n	80159bc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80159c8:	6190      	str	r0, [r2, #24]
 80159ca:	618a      	str	r2, [r1, #24]
 80159cc:	e7f2      	b.n	80159b4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080159d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80159d0:	4288      	cmp	r0, r1
 80159d2:	b508      	push	{r3, lr}
 80159d4:	d105      	bne.n	80159e2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80159d6:	4b11      	ldr	r3, [pc, #68]	; (8015a1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80159d8:	2123      	movs	r1, #35	; 0x23
 80159da:	4a11      	ldr	r2, [pc, #68]	; (8015a20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80159dc:	4811      	ldr	r0, [pc, #68]	; (8015a24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80159de:	f00f f987 	bl	8024cf0 <__assert_func>
 80159e2:	694b      	ldr	r3, [r1, #20]
 80159e4:	b11b      	cbz	r3, 80159ee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80159e6:	4b10      	ldr	r3, [pc, #64]	; (8015a28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80159e8:	2124      	movs	r1, #36	; 0x24
 80159ea:	4a0d      	ldr	r2, [pc, #52]	; (8015a20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80159ec:	e7f6      	b.n	80159dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80159ee:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80159f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80159f4:	b913      	cbnz	r3, 80159fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80159f6:	6281      	str	r1, [r0, #40]	; 0x28
 80159f8:	bd08      	pop	{r3, pc}
 80159fa:	4613      	mov	r3, r2
 80159fc:	699a      	ldr	r2, [r3, #24]
 80159fe:	b12a      	cbz	r2, 8015a0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015a00:	428b      	cmp	r3, r1
 8015a02:	d1fa      	bne.n	80159fa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015a04:	4b09      	ldr	r3, [pc, #36]	; (8015a2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015a06:	2135      	movs	r1, #53	; 0x35
 8015a08:	4a05      	ldr	r2, [pc, #20]	; (8015a20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015a0a:	e7e7      	b.n	80159dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015a0c:	428b      	cmp	r3, r1
 8015a0e:	d103      	bne.n	8015a18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015a10:	4b06      	ldr	r3, [pc, #24]	; (8015a2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015a12:	2138      	movs	r1, #56	; 0x38
 8015a14:	4a02      	ldr	r2, [pc, #8]	; (8015a20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015a16:	e7e1      	b.n	80159dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015a18:	6199      	str	r1, [r3, #24]
 8015a1a:	e7ed      	b.n	80159f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015a1c:	080274ad 	.word	0x080274ad
 8015a20:	08027604 	.word	0x08027604
 8015a24:	080274d9 	.word	0x080274d9
 8015a28:	0802750c 	.word	0x0802750c
 8015a2c:	08027542 	.word	0x08027542

08015a30 <_ZN8touchgfx4RectaNERKS0_>:
 8015a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a34:	888b      	ldrh	r3, [r1, #4]
 8015a36:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015a3a:	f9b0 a000 	ldrsh.w	sl, [r0]
 8015a3e:	444b      	add	r3, r9
 8015a40:	b29b      	uxth	r3, r3
 8015a42:	fa0f f883 	sxth.w	r8, r3
 8015a46:	45c2      	cmp	sl, r8
 8015a48:	da30      	bge.n	8015aac <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015a4a:	8882      	ldrh	r2, [r0, #4]
 8015a4c:	4452      	add	r2, sl
 8015a4e:	b292      	uxth	r2, r2
 8015a50:	fa0f fe82 	sxth.w	lr, r2
 8015a54:	45f1      	cmp	r9, lr
 8015a56:	da29      	bge.n	8015aac <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015a58:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015a5c:	88cc      	ldrh	r4, [r1, #6]
 8015a5e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015a62:	442c      	add	r4, r5
 8015a64:	b224      	sxth	r4, r4
 8015a66:	42a6      	cmp	r6, r4
 8015a68:	da20      	bge.n	8015aac <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015a6a:	88c7      	ldrh	r7, [r0, #6]
 8015a6c:	4437      	add	r7, r6
 8015a6e:	b2bf      	uxth	r7, r7
 8015a70:	fa0f fc87 	sxth.w	ip, r7
 8015a74:	4565      	cmp	r5, ip
 8015a76:	da19      	bge.n	8015aac <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015a78:	45ca      	cmp	sl, r9
 8015a7a:	4654      	mov	r4, sl
 8015a7c:	bfb8      	it	lt
 8015a7e:	464c      	movlt	r4, r9
 8015a80:	42b5      	cmp	r5, r6
 8015a82:	bfb8      	it	lt
 8015a84:	4635      	movlt	r5, r6
 8015a86:	45f0      	cmp	r8, lr
 8015a88:	bfc8      	it	gt
 8015a8a:	4613      	movgt	r3, r2
 8015a8c:	1b1b      	subs	r3, r3, r4
 8015a8e:	8083      	strh	r3, [r0, #4]
 8015a90:	88ca      	ldrh	r2, [r1, #6]
 8015a92:	884b      	ldrh	r3, [r1, #2]
 8015a94:	8004      	strh	r4, [r0, #0]
 8015a96:	4413      	add	r3, r2
 8015a98:	8045      	strh	r5, [r0, #2]
 8015a9a:	b29b      	uxth	r3, r3
 8015a9c:	b21a      	sxth	r2, r3
 8015a9e:	4594      	cmp	ip, r2
 8015aa0:	bfb8      	it	lt
 8015aa2:	463b      	movlt	r3, r7
 8015aa4:	1b5b      	subs	r3, r3, r5
 8015aa6:	80c3      	strh	r3, [r0, #6]
 8015aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015aac:	2300      	movs	r3, #0
 8015aae:	8003      	strh	r3, [r0, #0]
 8015ab0:	8043      	strh	r3, [r0, #2]
 8015ab2:	8083      	strh	r3, [r0, #4]
 8015ab4:	80c3      	strh	r3, [r0, #6]
 8015ab6:	e7f7      	b.n	8015aa8 <_ZN8touchgfx4RectaNERKS0_+0x78>

08015ab8 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015ab8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015abc:	b12b      	cbz	r3, 8015aca <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8015abe:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015ac2:	fab0 f080 	clz	r0, r0
 8015ac6:	0940      	lsrs	r0, r0, #5
 8015ac8:	4770      	bx	lr
 8015aca:	2001      	movs	r0, #1
 8015acc:	4770      	bx	lr

08015ace <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	4604      	mov	r4, r0
 8015ad6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015ad8:	8003      	strh	r3, [r0, #0]
 8015ada:	8043      	strh	r3, [r0, #2]
 8015adc:	8083      	strh	r3, [r0, #4]
 8015ade:	80c3      	strh	r3, [r0, #6]
 8015ae0:	2d00      	cmp	r5, #0
 8015ae2:	d040      	beq.n	8015b66 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015ae4:	1d28      	adds	r0, r5, #4
 8015ae6:	f7ff ffe7 	bl	8015ab8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015aea:	b988      	cbnz	r0, 8015b10 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015aec:	4620      	mov	r0, r4
 8015aee:	f7ff ffe3 	bl	8015ab8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015af2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015af6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015afa:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015afe:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015b02:	b138      	cbz	r0, 8015b14 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015b04:	8022      	strh	r2, [r4, #0]
 8015b06:	8063      	strh	r3, [r4, #2]
 8015b08:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015b0c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015b10:	69ad      	ldr	r5, [r5, #24]
 8015b12:	e7e5      	b.n	8015ae0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015b14:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015b18:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015b1c:	4290      	cmp	r0, r2
 8015b1e:	4607      	mov	r7, r0
 8015b20:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015b24:	460e      	mov	r6, r1
 8015b26:	bfa8      	it	ge
 8015b28:	4617      	movge	r7, r2
 8015b2a:	4299      	cmp	r1, r3
 8015b2c:	4472      	add	r2, lr
 8015b2e:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015b32:	bfa8      	it	ge
 8015b34:	461e      	movge	r6, r3
 8015b36:	4440      	add	r0, r8
 8015b38:	4471      	add	r1, lr
 8015b3a:	4463      	add	r3, ip
 8015b3c:	b200      	sxth	r0, r0
 8015b3e:	8027      	strh	r7, [r4, #0]
 8015b40:	b212      	sxth	r2, r2
 8015b42:	8066      	strh	r6, [r4, #2]
 8015b44:	b209      	sxth	r1, r1
 8015b46:	b21b      	sxth	r3, r3
 8015b48:	4290      	cmp	r0, r2
 8015b4a:	bfac      	ite	ge
 8015b4c:	ebc7 0200 	rsbge	r2, r7, r0
 8015b50:	ebc7 0202 	rsblt	r2, r7, r2
 8015b54:	4299      	cmp	r1, r3
 8015b56:	bfac      	ite	ge
 8015b58:	ebc6 0301 	rsbge	r3, r6, r1
 8015b5c:	ebc6 0303 	rsblt	r3, r6, r3
 8015b60:	80a2      	strh	r2, [r4, #4]
 8015b62:	80e3      	strh	r3, [r4, #6]
 8015b64:	e7d4      	b.n	8015b10 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015b66:	4620      	mov	r0, r4
 8015b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b6c <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015b6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015b70:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015b74:	b383      	cbz	r3, 8015bd8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015b76:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015b78:	b374      	cbz	r4, 8015bd8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015b7a:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015b7e:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015b82:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015b86:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015b8a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015b8e:	b303      	cbz	r3, 8015bd2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015b90:	4668      	mov	r0, sp
 8015b92:	1d21      	adds	r1, r4, #4
 8015b94:	f8ad 5000 	strh.w	r5, [sp]
 8015b98:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015b9c:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015ba0:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015ba4:	f7ff ff44 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 8015ba8:	4668      	mov	r0, sp
 8015baa:	f7ff ff85 	bl	8015ab8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015bae:	b980      	cbnz	r0, 8015bd2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015bb0:	f8bd 3000 	ldrh.w	r3, [sp]
 8015bb4:	4669      	mov	r1, sp
 8015bb6:	88a2      	ldrh	r2, [r4, #4]
 8015bb8:	4620      	mov	r0, r4
 8015bba:	1a9b      	subs	r3, r3, r2
 8015bbc:	88e2      	ldrh	r2, [r4, #6]
 8015bbe:	f8ad 3000 	strh.w	r3, [sp]
 8015bc2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015bc6:	1a9b      	subs	r3, r3, r2
 8015bc8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015bcc:	6823      	ldr	r3, [r4, #0]
 8015bce:	689b      	ldr	r3, [r3, #8]
 8015bd0:	4798      	blx	r3
 8015bd2:	69a4      	ldr	r4, [r4, #24]
 8015bd4:	2c00      	cmp	r4, #0
 8015bd6:	d1d8      	bne.n	8015b8a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015bd8:	b002      	add	sp, #8
 8015bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015bde <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015be0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015be4:	460d      	mov	r5, r1
 8015be6:	4616      	mov	r6, r2
 8015be8:	b323      	cbz	r3, 8015c34 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015bea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015bec:	b314      	cbz	r4, 8015c34 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015bee:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015bf2:	b1eb      	cbz	r3, 8015c30 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015bf4:	6828      	ldr	r0, [r5, #0]
 8015bf6:	466b      	mov	r3, sp
 8015bf8:	6869      	ldr	r1, [r5, #4]
 8015bfa:	c303      	stmia	r3!, {r0, r1}
 8015bfc:	4668      	mov	r0, sp
 8015bfe:	1d21      	adds	r1, r4, #4
 8015c00:	f7ff ff16 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 8015c04:	4668      	mov	r0, sp
 8015c06:	f7ff ff57 	bl	8015ab8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c0a:	b988      	cbnz	r0, 8015c30 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015c0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8015c10:	4669      	mov	r1, sp
 8015c12:	88a2      	ldrh	r2, [r4, #4]
 8015c14:	4620      	mov	r0, r4
 8015c16:	1a9b      	subs	r3, r3, r2
 8015c18:	88e2      	ldrh	r2, [r4, #6]
 8015c1a:	f8ad 3000 	strh.w	r3, [sp]
 8015c1e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015c22:	1a9b      	subs	r3, r3, r2
 8015c24:	4632      	mov	r2, r6
 8015c26:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015c2a:	6823      	ldr	r3, [r4, #0]
 8015c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c2e:	4798      	blx	r3
 8015c30:	69a4      	ldr	r4, [r4, #24]
 8015c32:	e7db      	b.n	8015bec <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015c34:	b002      	add	sp, #8
 8015c36:	bd70      	pop	{r4, r5, r6, pc}

08015c38 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015c38:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015c3c:	4770      	bx	lr

08015c3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015c3e:	6803      	ldr	r3, [r0, #0]
 8015c40:	b513      	push	{r0, r1, r4, lr}
 8015c42:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015c46:	2300      	movs	r3, #0
 8015c48:	e9cd 3300 	strd	r3, r3, [sp]
 8015c4c:	466b      	mov	r3, sp
 8015c4e:	47a0      	blx	r4
 8015c50:	b002      	add	sp, #8
 8015c52:	bd10      	pop	{r4, pc}

08015c54 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015c54:	2301      	movs	r3, #1
 8015c56:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015c5a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015c5e:	4770      	bx	lr

08015c60 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015c60:	2301      	movs	r3, #1
 8015c62:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015c66:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015c6a:	4770      	bx	lr

08015c6c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015c6c:	6843      	ldr	r3, [r0, #4]
 8015c6e:	2201      	movs	r2, #1
 8015c70:	725a      	strb	r2, [r3, #9]
 8015c72:	6840      	ldr	r0, [r0, #4]
 8015c74:	6803      	ldr	r3, [r0, #0]
 8015c76:	691b      	ldr	r3, [r3, #16]
 8015c78:	4718      	bx	r3

08015c7a <_ZN8touchgfx3HAL8flushDMAEv>:
 8015c7a:	6840      	ldr	r0, [r0, #4]
 8015c7c:	6803      	ldr	r3, [r0, #0]
 8015c7e:	689b      	ldr	r3, [r3, #8]
 8015c80:	4718      	bx	r3
	...

08015c84 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015c84:	4b04      	ldr	r3, [pc, #16]	; (8015c98 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015c86:	781b      	ldrb	r3, [r3, #0]
 8015c88:	b123      	cbz	r3, 8015c94 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015c8a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015c8e:	f080 0001 	eor.w	r0, r0, #1
 8015c92:	4770      	bx	lr
 8015c94:	2001      	movs	r0, #1
 8015c96:	4770      	bx	lr
 8015c98:	2000bcc6 	.word	0x2000bcc6

08015c9c <_ZN8touchgfx3HAL8endFrameEv>:
 8015c9c:	b510      	push	{r4, lr}
 8015c9e:	4604      	mov	r4, r0
 8015ca0:	6840      	ldr	r0, [r0, #4]
 8015ca2:	6803      	ldr	r3, [r0, #0]
 8015ca4:	689b      	ldr	r3, [r3, #8]
 8015ca6:	4798      	blx	r3
 8015ca8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015cac:	b113      	cbz	r3, 8015cb4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015cae:	2301      	movs	r3, #1
 8015cb0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015cb4:	bd10      	pop	{r4, pc}

08015cb6 <_ZN8touchgfx3HAL9taskEntryEv>:
 8015cb6:	b508      	push	{r3, lr}
 8015cb8:	6803      	ldr	r3, [r0, #0]
 8015cba:	4604      	mov	r4, r0
 8015cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015cbe:	4798      	blx	r3
 8015cc0:	6823      	ldr	r3, [r4, #0]
 8015cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015cc4:	4620      	mov	r0, r4
 8015cc6:	4798      	blx	r3
 8015cc8:	f7fd fed4 	bl	8013a74 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015ccc:	6823      	ldr	r3, [r4, #0]
 8015cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015cd0:	e7f8      	b.n	8015cc4 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015cd4 <_ZN8touchgfx3HAL4tickEv>:
 8015cd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015cd6:	6803      	ldr	r3, [r0, #0]
 8015cd8:	4604      	mov	r4, r0
 8015cda:	4d5c      	ldr	r5, [pc, #368]	; (8015e4c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015ce0:	4798      	blx	r3
 8015ce2:	2800      	cmp	r0, #0
 8015ce4:	f000 8097 	beq.w	8015e16 <_ZN8touchgfx3HAL4tickEv+0x142>
 8015ce8:	2001      	movs	r0, #1
 8015cea:	2600      	movs	r6, #0
 8015cec:	f7fd fba6 	bl	801343c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015cf0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015cf4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015cf8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015cfc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015d00:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015d04:	b133      	cbz	r3, 8015d14 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015d06:	6823      	ldr	r3, [r4, #0]
 8015d08:	4620      	mov	r0, r4
 8015d0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015d0e:	4798      	blx	r3
 8015d10:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015d14:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015d18:	2601      	movs	r6, #1
 8015d1a:	6862      	ldr	r2, [r4, #4]
 8015d1c:	f083 0301 	eor.w	r3, r3, #1
 8015d20:	702e      	strb	r6, [r5, #0]
 8015d22:	7253      	strb	r3, [r2, #9]
 8015d24:	f002 fff0 	bl	8018d08 <_ZN8touchgfx11Application11getInstanceEv>
 8015d28:	6803      	ldr	r3, [r0, #0]
 8015d2a:	4631      	mov	r1, r6
 8015d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d2e:	4798      	blx	r3
 8015d30:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015d34:	b90b      	cbnz	r3, 8015d3a <_ZN8touchgfx3HAL4tickEv+0x66>
 8015d36:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015d3a:	f002 ffe5 	bl	8018d08 <_ZN8touchgfx11Application11getInstanceEv>
 8015d3e:	6803      	ldr	r3, [r0, #0]
 8015d40:	695b      	ldr	r3, [r3, #20]
 8015d42:	4798      	blx	r3
 8015d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d46:	6803      	ldr	r3, [r0, #0]
 8015d48:	691b      	ldr	r3, [r3, #16]
 8015d4a:	4798      	blx	r3
 8015d4c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015d50:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015d54:	3b01      	subs	r3, #1
 8015d56:	b2db      	uxtb	r3, r3
 8015d58:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015d5c:	b10a      	cbz	r2, 8015d62 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d1eb      	bne.n	8015d3a <_ZN8touchgfx3HAL4tickEv+0x66>
 8015d62:	4a3b      	ldr	r2, [pc, #236]	; (8015e50 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015d64:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015d68:	7813      	ldrb	r3, [r2, #0]
 8015d6a:	3301      	adds	r3, #1
 8015d6c:	b25b      	sxtb	r3, r3
 8015d6e:	4299      	cmp	r1, r3
 8015d70:	7013      	strb	r3, [r2, #0]
 8015d72:	dc10      	bgt.n	8015d96 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015d74:	2300      	movs	r3, #0
 8015d76:	68e0      	ldr	r0, [r4, #12]
 8015d78:	a902      	add	r1, sp, #8
 8015d7a:	7013      	strb	r3, [r2, #0]
 8015d7c:	aa03      	add	r2, sp, #12
 8015d7e:	6803      	ldr	r3, [r0, #0]
 8015d80:	68db      	ldr	r3, [r3, #12]
 8015d82:	4798      	blx	r3
 8015d84:	6823      	ldr	r3, [r4, #0]
 8015d86:	2800      	cmp	r0, #0
 8015d88:	d051      	beq.n	8015e2e <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015d8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015d8e:	4620      	mov	r0, r4
 8015d90:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015d94:	4798      	blx	r3
 8015d96:	2300      	movs	r3, #0
 8015d98:	6960      	ldr	r0, [r4, #20]
 8015d9a:	f88d 3007 	strb.w	r3, [sp, #7]
 8015d9e:	b158      	cbz	r0, 8015db8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015da0:	6803      	ldr	r3, [r0, #0]
 8015da2:	f10d 0107 	add.w	r1, sp, #7
 8015da6:	68db      	ldr	r3, [r3, #12]
 8015da8:	4798      	blx	r3
 8015daa:	b128      	cbz	r0, 8015db8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015dae:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015db2:	6803      	ldr	r3, [r0, #0]
 8015db4:	68db      	ldr	r3, [r3, #12]
 8015db6:	4798      	blx	r3
 8015db8:	f104 001c 	add.w	r0, r4, #28
 8015dbc:	f00d facc 	bl	8023358 <_ZN8touchgfx8Gestures4tickEv>
 8015dc0:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015dc4:	b30b      	cbz	r3, 8015e0a <_ZN8touchgfx3HAL4tickEv+0x136>
 8015dc6:	6920      	ldr	r0, [r4, #16]
 8015dc8:	6803      	ldr	r3, [r0, #0]
 8015dca:	691b      	ldr	r3, [r3, #16]
 8015dcc:	4798      	blx	r3
 8015dce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015dd0:	4606      	mov	r6, r0
 8015dd2:	b903      	cbnz	r3, 8015dd6 <_ZN8touchgfx3HAL4tickEv+0x102>
 8015dd4:	6720      	str	r0, [r4, #112]	; 0x70
 8015dd6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015dd8:	4a1e      	ldr	r2, [pc, #120]	; (8015e54 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015dda:	1af3      	subs	r3, r6, r3
 8015ddc:	4293      	cmp	r3, r2
 8015dde:	d914      	bls.n	8015e0a <_ZN8touchgfx3HAL4tickEv+0x136>
 8015de0:	6920      	ldr	r0, [r4, #16]
 8015de2:	6803      	ldr	r3, [r0, #0]
 8015de4:	699b      	ldr	r3, [r3, #24]
 8015de6:	4798      	blx	r3
 8015de8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015dea:	2264      	movs	r2, #100	; 0x64
 8015dec:	1af3      	subs	r3, r6, r3
 8015dee:	fbb3 f3f2 	udiv	r3, r3, r2
 8015df2:	fbb0 f0f3 	udiv	r0, r0, r3
 8015df6:	2800      	cmp	r0, #0
 8015df8:	dc1e      	bgt.n	8015e38 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015dfa:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015dfe:	6920      	ldr	r0, [r4, #16]
 8015e00:	2100      	movs	r1, #0
 8015e02:	6803      	ldr	r3, [r0, #0]
 8015e04:	69db      	ldr	r3, [r3, #28]
 8015e06:	4798      	blx	r3
 8015e08:	6726      	str	r6, [r4, #112]	; 0x70
 8015e0a:	f002 ff7d 	bl	8018d08 <_ZN8touchgfx11Application11getInstanceEv>
 8015e0e:	6803      	ldr	r3, [r0, #0]
 8015e10:	2100      	movs	r1, #0
 8015e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e14:	4798      	blx	r3
 8015e16:	6823      	ldr	r3, [r4, #0]
 8015e18:	4620      	mov	r0, r4
 8015e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015e1e:	4798      	blx	r3
 8015e20:	2001      	movs	r0, #1
 8015e22:	f7fd fb16 	bl	8013452 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015e26:	2300      	movs	r3, #0
 8015e28:	702b      	strb	r3, [r5, #0]
 8015e2a:	b004      	add	sp, #16
 8015e2c:	bd70      	pop	{r4, r5, r6, pc}
 8015e2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015e32:	4620      	mov	r0, r4
 8015e34:	4798      	blx	r3
 8015e36:	e7ae      	b.n	8015d96 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015e38:	2863      	cmp	r0, #99	; 0x63
 8015e3a:	bfcb      	itete	gt
 8015e3c:	2300      	movgt	r3, #0
 8015e3e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015e42:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015e46:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015e4a:	e7d8      	b.n	8015dfe <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015e4c:	2000bccc 	.word	0x2000bccc
 8015e50:	2000bccd 	.word	0x2000bccd
 8015e54:	05f5e100 	.word	0x05f5e100

08015e58 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015e58:	f7fd bdac 	b.w	80139b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015e5c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015e5c:	6581      	str	r1, [r0, #88]	; 0x58
 8015e5e:	301c      	adds	r0, #28
 8015e60:	f00d ba78 	b.w	8023354 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015e64 <_ZN8touchgfx3HAL5touchEll>:
 8015e64:	b530      	push	{r4, r5, lr}
 8015e66:	b087      	sub	sp, #28
 8015e68:	4604      	mov	r4, r0
 8015e6a:	a804      	add	r0, sp, #16
 8015e6c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015e70:	f002 fd4e 	bl	8018910 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015e74:	9b04      	ldr	r3, [sp, #16]
 8015e76:	a906      	add	r1, sp, #24
 8015e78:	a803      	add	r0, sp, #12
 8015e7a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015e7e:	9b05      	ldr	r3, [sp, #20]
 8015e80:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015e84:	f002 fd92 	bl	80189ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015e88:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015e8c:	f104 001c 	add.w	r0, r4, #28
 8015e90:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015e94:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015e98:	b189      	cbz	r1, 8015ebe <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015e9a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015e9e:	9300      	str	r3, [sp, #0]
 8015ea0:	4613      	mov	r3, r2
 8015ea2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015ea6:	462a      	mov	r2, r5
 8015ea8:	f00d fa64 	bl	8023374 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015eac:	b128      	cbz	r0, 8015eba <_ZN8touchgfx3HAL5touchEll+0x56>
 8015eae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015eb2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015eb4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015eb8:	6623      	str	r3, [r4, #96]	; 0x60
 8015eba:	b007      	add	sp, #28
 8015ebc:	bd30      	pop	{r4, r5, pc}
 8015ebe:	f00d fa9d 	bl	80233fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015ec2:	2301      	movs	r3, #1
 8015ec4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015ec8:	e7f1      	b.n	8015eae <_ZN8touchgfx3HAL5touchEll+0x4a>

08015eca <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015eca:	b570      	push	{r4, r5, r6, lr}
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d050      	beq.n	8015f72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015ed0:	ea81 0002 	eor.w	r0, r1, r2
 8015ed4:	07c6      	lsls	r6, r0, #31
 8015ed6:	d508      	bpl.n	8015eea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015ed8:	3a01      	subs	r2, #1
 8015eda:	18cc      	adds	r4, r1, r3
 8015edc:	42a1      	cmp	r1, r4
 8015ede:	d048      	beq.n	8015f72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015ee0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015ee4:	f801 0b01 	strb.w	r0, [r1], #1
 8015ee8:	e7f8      	b.n	8015edc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015eea:	07d5      	lsls	r5, r2, #31
 8015eec:	bf42      	ittt	mi
 8015eee:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015ef2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015ef6:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015efa:	2b01      	cmp	r3, #1
 8015efc:	d915      	bls.n	8015f2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015efe:	ea82 0001 	eor.w	r0, r2, r1
 8015f02:	0784      	lsls	r4, r0, #30
 8015f04:	d02d      	beq.n	8015f62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015f06:	1e94      	subs	r4, r2, #2
 8015f08:	4608      	mov	r0, r1
 8015f0a:	18ce      	adds	r6, r1, r3
 8015f0c:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015f10:	f820 5b02 	strh.w	r5, [r0], #2
 8015f14:	1a35      	subs	r5, r6, r0
 8015f16:	2d01      	cmp	r5, #1
 8015f18:	d8f8      	bhi.n	8015f0c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015f1a:	1e98      	subs	r0, r3, #2
 8015f1c:	f003 0301 	and.w	r3, r3, #1
 8015f20:	f020 0001 	bic.w	r0, r0, #1
 8015f24:	3002      	adds	r0, #2
 8015f26:	4401      	add	r1, r0
 8015f28:	4402      	add	r2, r0
 8015f2a:	1f14      	subs	r4, r2, #4
 8015f2c:	4608      	mov	r0, r1
 8015f2e:	18ce      	adds	r6, r1, r3
 8015f30:	1a35      	subs	r5, r6, r0
 8015f32:	2d03      	cmp	r5, #3
 8015f34:	d810      	bhi.n	8015f58 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8015f36:	089c      	lsrs	r4, r3, #2
 8015f38:	00a0      	lsls	r0, r4, #2
 8015f3a:	4401      	add	r1, r0
 8015f3c:	3801      	subs	r0, #1
 8015f3e:	4402      	add	r2, r0
 8015f40:	f06f 0003 	mvn.w	r0, #3
 8015f44:	fb00 3404 	mla	r4, r0, r4, r3
 8015f48:	440c      	add	r4, r1
 8015f4a:	42a1      	cmp	r1, r4
 8015f4c:	d011      	beq.n	8015f72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015f4e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015f52:	f801 3b01 	strb.w	r3, [r1], #1
 8015f56:	e7f8      	b.n	8015f4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015f58:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015f5c:	f840 5b04 	str.w	r5, [r0], #4
 8015f60:	e7e6      	b.n	8015f30 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8015f62:	0790      	lsls	r0, r2, #30
 8015f64:	d0e1      	beq.n	8015f2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015f66:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015f6a:	3b02      	subs	r3, #2
 8015f6c:	f821 0b02 	strh.w	r0, [r1], #2
 8015f70:	e7db      	b.n	8015f2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015f72:	2001      	movs	r0, #1
 8015f74:	bd70      	pop	{r4, r5, r6, pc}

08015f76 <_ZN8touchgfx3HAL7noTouchEv>:
 8015f76:	b510      	push	{r4, lr}
 8015f78:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015f7c:	4604      	mov	r4, r0
 8015f7e:	b153      	cbz	r3, 8015f96 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015f80:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015f84:	2101      	movs	r1, #1
 8015f86:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015f8a:	301c      	adds	r0, #28
 8015f8c:	f00d fa36 	bl	80233fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015f90:	2300      	movs	r3, #0
 8015f92:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015f96:	bd10      	pop	{r4, pc}

08015f98 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f9c:	4605      	mov	r5, r0
 8015f9e:	6980      	ldr	r0, [r0, #24]
 8015fa0:	b085      	sub	sp, #20
 8015fa2:	460f      	mov	r7, r1
 8015fa4:	4690      	mov	r8, r2
 8015fa6:	4699      	mov	r9, r3
 8015fa8:	b930      	cbnz	r0, 8015fb8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015faa:	4b1f      	ldr	r3, [pc, #124]	; (8016028 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015fac:	f44f 7198 	mov.w	r1, #304	; 0x130
 8015fb0:	4a1e      	ldr	r2, [pc, #120]	; (801602c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015fb2:	481f      	ldr	r0, [pc, #124]	; (8016030 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8015fb4:	f00e fe9c 	bl	8024cf0 <__assert_func>
 8015fb8:	ac04      	add	r4, sp, #16
 8015fba:	2600      	movs	r6, #0
 8015fbc:	f844 6d04 	str.w	r6, [r4, #-4]!
 8015fc0:	6806      	ldr	r6, [r0, #0]
 8015fc2:	9401      	str	r4, [sp, #4]
 8015fc4:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015fc8:	9400      	str	r4, [sp, #0]
 8015fca:	6834      	ldr	r4, [r6, #0]
 8015fcc:	47a0      	blx	r4
 8015fce:	4c19      	ldr	r4, [pc, #100]	; (8016034 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8015fd0:	4606      	mov	r6, r0
 8015fd2:	f8a4 9000 	strh.w	r9, [r4]
 8015fd6:	f7f9 fbf7 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8015fda:	6803      	ldr	r3, [r0, #0]
 8015fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fde:	4798      	blx	r3
 8015fe0:	280c      	cmp	r0, #12
 8015fe2:	d80f      	bhi.n	8016004 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015fe4:	e8df f000 	tbb	[pc, r0]
 8015fe8:	1b1b1207 	.word	0x1b1b1207
 8015fec:	1b1b1b1b 	.word	0x1b1b1b1b
 8015ff0:	1b1b1b1b 	.word	0x1b1b1b1b
 8015ff4:	1b          	.byte	0x1b
 8015ff5:	00          	.byte	0x00
 8015ff6:	8823      	ldrh	r3, [r4, #0]
 8015ff8:	fb08 7203 	mla	r2, r8, r3, r7
 8015ffc:	9b03      	ldr	r3, [sp, #12]
 8015ffe:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016002:	63eb      	str	r3, [r5, #60]	; 0x3c
 8016004:	4630      	mov	r0, r6
 8016006:	b005      	add	sp, #20
 8016008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801600c:	8822      	ldrh	r2, [r4, #0]
 801600e:	9b03      	ldr	r3, [sp, #12]
 8016010:	fb08 7202 	mla	r2, r8, r2, r7
 8016014:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016018:	1a9a      	subs	r2, r3, r2
 801601a:	63ea      	str	r2, [r5, #60]	; 0x3c
 801601c:	e7f2      	b.n	8016004 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801601e:	4b06      	ldr	r3, [pc, #24]	; (8016038 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8016020:	f240 114d 	movw	r1, #333	; 0x14d
 8016024:	4a01      	ldr	r2, [pc, #4]	; (801602c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016026:	e7c4      	b.n	8015fb2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8016028:	080276ad 	.word	0x080276ad
 801602c:	080279be 	.word	0x080279be
 8016030:	080276f2 	.word	0x080276f2
 8016034:	2000bcc2 	.word	0x2000bcc2
 8016038:	08027718 	.word	0x08027718

0801603c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801603c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016040:	4698      	mov	r8, r3
 8016042:	6803      	ldr	r3, [r0, #0]
 8016044:	b087      	sub	sp, #28
 8016046:	460e      	mov	r6, r1
 8016048:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801604a:	4617      	mov	r7, r2
 801604c:	4b0d      	ldr	r3, [pc, #52]	; (8016084 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801604e:	4604      	mov	r4, r0
 8016050:	f8b3 9000 	ldrh.w	r9, [r3]
 8016054:	f7f9 fbb8 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8016058:	6803      	ldr	r3, [r0, #0]
 801605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801605c:	4798      	blx	r3
 801605e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016062:	463a      	mov	r2, r7
 8016064:	4631      	mov	r1, r6
 8016066:	9302      	str	r3, [sp, #8]
 8016068:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801606c:	9301      	str	r3, [sp, #4]
 801606e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016072:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8016076:	9300      	str	r3, [sp, #0]
 8016078:	4620      	mov	r0, r4
 801607a:	4643      	mov	r3, r8
 801607c:	47a8      	blx	r5
 801607e:	b007      	add	sp, #28
 8016080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016084:	2000bcc2 	.word	0x2000bcc2

08016088 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801608c:	4606      	mov	r6, r0
 801608e:	b089      	sub	sp, #36	; 0x24
 8016090:	4610      	mov	r0, r2
 8016092:	460c      	mov	r4, r1
 8016094:	4691      	mov	r9, r2
 8016096:	4698      	mov	r8, r3
 8016098:	f005 f818 	bl	801b0cc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801609c:	2800      	cmp	r0, #0
 801609e:	f000 8092 	beq.w	80161c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 80160a2:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80161e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80160a6:	ad08      	add	r5, sp, #32
 80160a8:	f8df b138 	ldr.w	fp, [pc, #312]	; 80161e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80160ac:	f8da 0000 	ldr.w	r0, [sl]
 80160b0:	4f4a      	ldr	r7, [pc, #296]	; (80161dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80160b2:	6802      	ldr	r2, [r0, #0]
 80160b4:	6a12      	ldr	r2, [r2, #32]
 80160b6:	4790      	blx	r2
 80160b8:	f8da 0000 	ldr.w	r0, [sl]
 80160bc:	6802      	ldr	r2, [r0, #0]
 80160be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80160c0:	4790      	blx	r2
 80160c2:	f8bb 3000 	ldrh.w	r3, [fp]
 80160c6:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80160ca:	4628      	mov	r0, r5
 80160cc:	9300      	str	r3, [sp, #0]
 80160ce:	883b      	ldrh	r3, [r7, #0]
 80160d0:	9301      	str	r3, [sp, #4]
 80160d2:	f005 f8bb 	bl	801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80160d6:	f8ab 0000 	strh.w	r0, [fp]
 80160da:	4628      	mov	r0, r5
 80160dc:	f005 f8f0 	bl	801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80160e0:	f8da b000 	ldr.w	fp, [sl]
 80160e4:	8038      	strh	r0, [r7, #0]
 80160e6:	4648      	mov	r0, r9
 80160e8:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80160ec:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80160f0:	9302      	str	r3, [sp, #8]
 80160f2:	f004 ffeb 	bl	801b0cc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80160f6:	f8da 2000 	ldr.w	r2, [sl]
 80160fa:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80160fe:	63d0      	str	r0, [r2, #60]	; 0x3c
 8016100:	4620      	mov	r0, r4
 8016102:	6822      	ldr	r2, [r4, #0]
 8016104:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8016108:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801610a:	2200      	movs	r2, #0
 801610c:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8016110:	4611      	mov	r1, r2
 8016112:	4798      	blx	r3
 8016114:	2201      	movs	r2, #1
 8016116:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801611a:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801611e:	1d22      	adds	r2, r4, #4
 8016120:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8016124:	2900      	cmp	r1, #0
 8016126:	d051      	beq.n	80161cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8016128:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 801612c:	2900      	cmp	r1, #0
 801612e:	d04d      	beq.n	80161cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8016130:	6810      	ldr	r0, [r2, #0]
 8016132:	f10d 0c18 	add.w	ip, sp, #24
 8016136:	6851      	ldr	r1, [r2, #4]
 8016138:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801613c:	4641      	mov	r1, r8
 801613e:	a806      	add	r0, sp, #24
 8016140:	f7ff fc76 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 8016144:	4628      	mov	r0, r5
 8016146:	f005 fa0d 	bl	801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801614a:	4680      	mov	r8, r0
 801614c:	f7f9 fb3c 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8016150:	6802      	ldr	r2, [r0, #0]
 8016152:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016154:	4790      	blx	r2
 8016156:	4580      	cmp	r8, r0
 8016158:	d03d      	beq.n	80161d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 801615a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801615c:	b150      	cbz	r0, 8016174 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801615e:	4628      	mov	r0, r5
 8016160:	f005 fa00 	bl	801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016164:	4605      	mov	r5, r0
 8016166:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016168:	6803      	ldr	r3, [r0, #0]
 801616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801616c:	4798      	blx	r3
 801616e:	1a2b      	subs	r3, r5, r0
 8016170:	4258      	negs	r0, r3
 8016172:	4158      	adcs	r0, r3
 8016174:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8016178:	2500      	movs	r5, #0
 801617a:	6963      	ldr	r3, [r4, #20]
 801617c:	4620      	mov	r0, r4
 801617e:	6822      	ldr	r2, [r4, #0]
 8016180:	a906      	add	r1, sp, #24
 8016182:	6165      	str	r5, [r4, #20]
 8016184:	9303      	str	r3, [sp, #12]
 8016186:	6892      	ldr	r2, [r2, #8]
 8016188:	4790      	blx	r2
 801618a:	9b03      	ldr	r3, [sp, #12]
 801618c:	4620      	mov	r0, r4
 801618e:	4652      	mov	r2, sl
 8016190:	6163      	str	r3, [r4, #20]
 8016192:	4649      	mov	r1, r9
 8016194:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8016198:	6823      	ldr	r3, [r4, #0]
 801619a:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 801619e:	4c10      	ldr	r4, [pc, #64]	; (80161e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 80161a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161a2:	4798      	blx	r3
 80161a4:	6820      	ldr	r0, [r4, #0]
 80161a6:	9b02      	ldr	r3, [sp, #8]
 80161a8:	9a00      	ldr	r2, [sp, #0]
 80161aa:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 80161ae:	4b0d      	ldr	r3, [pc, #52]	; (80161e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 80161b0:	801a      	strh	r2, [r3, #0]
 80161b2:	4b0a      	ldr	r3, [pc, #40]	; (80161dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80161b4:	9a01      	ldr	r2, [sp, #4]
 80161b6:	801a      	strh	r2, [r3, #0]
 80161b8:	6803      	ldr	r3, [r0, #0]
 80161ba:	6a1b      	ldr	r3, [r3, #32]
 80161bc:	4798      	blx	r3
 80161be:	6820      	ldr	r0, [r4, #0]
 80161c0:	6803      	ldr	r3, [r0, #0]
 80161c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161c4:	4798      	blx	r3
 80161c6:	b009      	add	sp, #36	; 0x24
 80161c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161cc:	ab06      	add	r3, sp, #24
 80161ce:	6810      	ldr	r0, [r2, #0]
 80161d0:	6851      	ldr	r1, [r2, #4]
 80161d2:	c303      	stmia	r3!, {r0, r1}
 80161d4:	e7b6      	b.n	8016144 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 80161d6:	2000      	movs	r0, #0
 80161d8:	e7cc      	b.n	8016174 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80161da:	bf00      	nop
 80161dc:	2000bcc4 	.word	0x2000bcc4
 80161e0:	2000bcc8 	.word	0x2000bcc8
 80161e4:	2000bcc2 	.word	0x2000bcc2

080161e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80161e8:	4b07      	ldr	r3, [pc, #28]	; (8016208 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80161ea:	b510      	push	{r4, lr}
 80161ec:	781b      	ldrb	r3, [r3, #0]
 80161ee:	4604      	mov	r4, r0
 80161f0:	b13b      	cbz	r3, 8016202 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80161f2:	6803      	ldr	r3, [r0, #0]
 80161f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161f6:	4798      	blx	r3
 80161f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80161fa:	4283      	cmp	r3, r0
 80161fc:	d101      	bne.n	8016202 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80161fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016200:	bd10      	pop	{r4, pc}
 8016202:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016204:	e7fc      	b.n	8016200 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8016206:	bf00      	nop
 8016208:	2000bcc6 	.word	0x2000bcc6

0801620c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801620c:	4b0b      	ldr	r3, [pc, #44]	; (801623c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 801620e:	b510      	push	{r4, lr}
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	4604      	mov	r4, r0
 8016214:	b95b      	cbnz	r3, 801622e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016216:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801621a:	2b02      	cmp	r3, #2
 801621c:	d007      	beq.n	801622e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801621e:	6840      	ldr	r0, [r0, #4]
 8016220:	f000 fbc8 	bl	80169b4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016224:	b118      	cbz	r0, 801622e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016226:	6862      	ldr	r2, [r4, #4]
 8016228:	7a53      	ldrb	r3, [r2, #9]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d0fc      	beq.n	8016228 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801622e:	f7fd fbb3 	bl	8013998 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016232:	4620      	mov	r0, r4
 8016234:	f7ff ffd8 	bl	80161e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016238:	bd10      	pop	{r4, pc}
 801623a:	bf00      	nop
 801623c:	2000bcc6 	.word	0x2000bcc6

08016240 <_ZN8touchgfx3HAL10initializeEv>:
 8016240:	b510      	push	{r4, lr}
 8016242:	4604      	mov	r4, r0
 8016244:	f7fd fb84 	bl	8013950 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016248:	6860      	ldr	r0, [r4, #4]
 801624a:	6803      	ldr	r3, [r0, #0]
 801624c:	68db      	ldr	r3, [r3, #12]
 801624e:	4798      	blx	r3
 8016250:	68e0      	ldr	r0, [r4, #12]
 8016252:	6803      	ldr	r3, [r0, #0]
 8016254:	689b      	ldr	r3, [r3, #8]
 8016256:	4798      	blx	r3
 8016258:	6823      	ldr	r3, [r4, #0]
 801625a:	4620      	mov	r0, r4
 801625c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801625e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016262:	4718      	bx	r3

08016264 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016264:	b508      	push	{r3, lr}
 8016266:	290c      	cmp	r1, #12
 8016268:	d817      	bhi.n	801629a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801626a:	e8df f001 	tbb	[pc, r1]
 801626e:	090b      	.short	0x090b
 8016270:	0d0d0d07 	.word	0x0d0d0d07
 8016274:	1414140d 	.word	0x1414140d
 8016278:	1414      	.short	0x1414
 801627a:	0d          	.byte	0x0d
 801627b:	00          	.byte	0x00
 801627c:	2020      	movs	r0, #32
 801627e:	bd08      	pop	{r3, pc}
 8016280:	2018      	movs	r0, #24
 8016282:	e7fc      	b.n	801627e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016284:	2010      	movs	r0, #16
 8016286:	e7fa      	b.n	801627e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016288:	4b05      	ldr	r3, [pc, #20]	; (80162a0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801628a:	f44f 710c 	mov.w	r1, #560	; 0x230
 801628e:	4a05      	ldr	r2, [pc, #20]	; (80162a4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8016290:	4805      	ldr	r0, [pc, #20]	; (80162a8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8016292:	f00e fd2d 	bl	8024cf0 <__assert_func>
 8016296:	2008      	movs	r0, #8
 8016298:	e7f1      	b.n	801627e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801629a:	2000      	movs	r0, #0
 801629c:	e7ef      	b.n	801627e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801629e:	bf00      	nop
 80162a0:	080277eb 	.word	0x080277eb
 80162a4:	08027b80 	.word	0x08027b80
 80162a8:	080276f2 	.word	0x080276f2

080162ac <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80162ac:	b570      	push	{r4, r5, r6, lr}
 80162ae:	460d      	mov	r5, r1
 80162b0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80162b4:	4616      	mov	r6, r2
 80162b6:	461c      	mov	r4, r3
 80162b8:	f7ff ffd4 	bl	8016264 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80162bc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80162c0:	10c0      	asrs	r0, r0, #3
 80162c2:	fb06 5101 	mla	r1, r6, r1, r5
 80162c6:	fb00 4001 	mla	r0, r0, r1, r4
 80162ca:	bd70      	pop	{r4, r5, r6, pc}

080162cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80162cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162d0:	b08a      	sub	sp, #40	; 0x28
 80162d2:	f04f 0c00 	mov.w	ip, #0
 80162d6:	4604      	mov	r4, r0
 80162d8:	469a      	mov	sl, r3
 80162da:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80162de:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80162e2:	f1b8 0f02 	cmp.w	r8, #2
 80162e6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80162ea:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80162ee:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80162f2:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80162f6:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80162fa:	f8cd c020 	str.w	ip, [sp, #32]
 80162fe:	d030      	beq.n	8016362 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8016300:	2bff      	cmp	r3, #255	; 0xff
 8016302:	d12c      	bne.n	801635e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8016304:	4560      	cmp	r0, ip
 8016306:	bf14      	ite	ne
 8016308:	2004      	movne	r0, #4
 801630a:	2001      	moveq	r0, #1
 801630c:	9204      	str	r2, [sp, #16]
 801630e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016312:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016316:	f8ad 201c 	strh.w	r2, [sp, #28]
 801631a:	f8ad 6018 	strh.w	r6, [sp, #24]
 801631e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8016322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016326:	4620      	mov	r0, r4
 8016328:	f7ff ff5e 	bl	80161e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801632c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016330:	4603      	mov	r3, r0
 8016332:	4651      	mov	r1, sl
 8016334:	4620      	mov	r0, r4
 8016336:	e9cd 9700 	strd	r9, r7, [sp]
 801633a:	f7ff ffb7 	bl	80162ac <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801633e:	f8ad 901e 	strh.w	r9, [sp, #30]
 8016342:	9005      	str	r0, [sp, #20]
 8016344:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8016348:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801634c:	b106      	cbz	r6, 8016350 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 801634e:	b98d      	cbnz	r5, 8016374 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8016350:	4b12      	ldr	r3, [pc, #72]	; (801639c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8016352:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8016356:	4a12      	ldr	r2, [pc, #72]	; (80163a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016358:	4812      	ldr	r0, [pc, #72]	; (80163a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801635a:	f00e fcc9 	bl	8024cf0 <__assert_func>
 801635e:	2004      	movs	r0, #4
 8016360:	e7d4      	b.n	801630c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016362:	2bff      	cmp	r3, #255	; 0xff
 8016364:	d104      	bne.n	8016370 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8016366:	2800      	cmp	r0, #0
 8016368:	bf14      	ite	ne
 801636a:	2040      	movne	r0, #64	; 0x40
 801636c:	2020      	moveq	r0, #32
 801636e:	e7cd      	b.n	801630c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016370:	2040      	movs	r0, #64	; 0x40
 8016372:	e7cb      	b.n	801630c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016374:	6823      	ldr	r3, [r4, #0]
 8016376:	4620      	mov	r0, r4
 8016378:	9d02      	ldr	r5, [sp, #8]
 801637a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801637c:	4798      	blx	r3
 801637e:	4228      	tst	r0, r5
 8016380:	d104      	bne.n	801638c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8016382:	4b09      	ldr	r3, [pc, #36]	; (80163a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016384:	f240 11b1 	movw	r1, #433	; 0x1b1
 8016388:	4a05      	ldr	r2, [pc, #20]	; (80163a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801638a:	e7e5      	b.n	8016358 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 801638c:	6860      	ldr	r0, [r4, #4]
 801638e:	a902      	add	r1, sp, #8
 8016390:	6803      	ldr	r3, [r0, #0]
 8016392:	685b      	ldr	r3, [r3, #4]
 8016394:	4798      	blx	r3
 8016396:	b00a      	add	sp, #40	; 0x28
 8016398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801639c:	0802776e 	.word	0x0802776e
 80163a0:	08027a22 	.word	0x08027a22
 80163a4:	080276f2 	.word	0x080276f2
 80163a8:	080277a6 	.word	0x080277a6

080163ac <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80163ac:	b510      	push	{r4, lr}
 80163ae:	b08a      	sub	sp, #40	; 0x28
 80163b0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80163b4:	9408      	str	r4, [sp, #32]
 80163b6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80163ba:	9407      	str	r4, [sp, #28]
 80163bc:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80163c0:	9406      	str	r4, [sp, #24]
 80163c2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80163c6:	9405      	str	r4, [sp, #20]
 80163c8:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80163cc:	9404      	str	r4, [sp, #16]
 80163ce:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80163d2:	9403      	str	r4, [sp, #12]
 80163d4:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80163d8:	9402      	str	r4, [sp, #8]
 80163da:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80163de:	e9cd 3400 	strd	r3, r4, [sp]
 80163e2:	4613      	mov	r3, r2
 80163e4:	2200      	movs	r2, #0
 80163e6:	f7ff ff71 	bl	80162cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80163ea:	b00a      	add	sp, #40	; 0x28
 80163ec:	bd10      	pop	{r4, pc}
	...

080163f0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80163f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163f2:	b08b      	sub	sp, #44	; 0x2c
 80163f4:	4616      	mov	r6, r2
 80163f6:	460d      	mov	r5, r1
 80163f8:	461f      	mov	r7, r3
 80163fa:	4604      	mov	r4, r0
 80163fc:	f7f9 f9e4 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8016400:	6803      	ldr	r3, [r0, #0]
 8016402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016404:	4798      	blx	r3
 8016406:	4b0e      	ldr	r3, [pc, #56]	; (8016440 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8016408:	2200      	movs	r2, #0
 801640a:	4629      	mov	r1, r5
 801640c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016410:	881b      	ldrh	r3, [r3, #0]
 8016412:	4620      	mov	r0, r4
 8016414:	9306      	str	r3, [sp, #24]
 8016416:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801641a:	9305      	str	r3, [sp, #20]
 801641c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016420:	9304      	str	r3, [sp, #16]
 8016422:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016426:	9303      	str	r3, [sp, #12]
 8016428:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801642c:	9302      	str	r3, [sp, #8]
 801642e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016432:	e9cd 7300 	strd	r7, r3, [sp]
 8016436:	4633      	mov	r3, r6
 8016438:	f7ff ff48 	bl	80162cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801643c:	b00b      	add	sp, #44	; 0x2c
 801643e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016440:	2000bcc2 	.word	0x2000bcc2

08016444 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8016444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016448:	461f      	mov	r7, r3
 801644a:	4b14      	ldr	r3, [pc, #80]	; (801649c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 801644c:	b08a      	sub	sp, #40	; 0x28
 801644e:	4616      	mov	r6, r2
 8016450:	f8b3 8000 	ldrh.w	r8, [r3]
 8016454:	460d      	mov	r5, r1
 8016456:	4604      	mov	r4, r0
 8016458:	f7f9 f9b6 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 801645c:	6803      	ldr	r3, [r0, #0]
 801645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016460:	4798      	blx	r3
 8016462:	2302      	movs	r3, #2
 8016464:	9008      	str	r0, [sp, #32]
 8016466:	2200      	movs	r2, #0
 8016468:	4629      	mov	r1, r5
 801646a:	4620      	mov	r0, r4
 801646c:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8016470:	2301      	movs	r3, #1
 8016472:	9305      	str	r3, [sp, #20]
 8016474:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016478:	9304      	str	r3, [sp, #16]
 801647a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801647e:	9303      	str	r3, [sp, #12]
 8016480:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016484:	9302      	str	r3, [sp, #8]
 8016486:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801648a:	e9cd 7300 	strd	r7, r3, [sp]
 801648e:	4633      	mov	r3, r6
 8016490:	f7ff ff1c 	bl	80162cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016494:	b00a      	add	sp, #40	; 0x28
 8016496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801649a:	bf00      	nop
 801649c:	2000bcc2 	.word	0x2000bcc2

080164a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80164a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164a4:	b08b      	sub	sp, #44	; 0x2c
 80164a6:	469b      	mov	fp, r3
 80164a8:	4604      	mov	r4, r0
 80164aa:	4692      	mov	sl, r2
 80164ac:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80164b0:	2600      	movs	r6, #0
 80164b2:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80164b6:	4689      	mov	r9, r1
 80164b8:	2fff      	cmp	r7, #255	; 0xff
 80164ba:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80164be:	9608      	str	r6, [sp, #32]
 80164c0:	bf14      	ite	ne
 80164c2:	2308      	movne	r3, #8
 80164c4:	2302      	moveq	r3, #2
 80164c6:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80164ca:	f7ff fe8d 	bl	80161e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80164ce:	465a      	mov	r2, fp
 80164d0:	4603      	mov	r3, r0
 80164d2:	4651      	mov	r1, sl
 80164d4:	4620      	mov	r0, r4
 80164d6:	e9cd 8500 	strd	r8, r5, [sp]
 80164da:	f7ff fee7 	bl	80162ac <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80164de:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80164e2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80164e6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80164ea:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80164ee:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80164f2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80164f6:	6823      	ldr	r3, [r4, #0]
 80164f8:	9d02      	ldr	r5, [sp, #8]
 80164fa:	9005      	str	r0, [sp, #20]
 80164fc:	4620      	mov	r0, r4
 80164fe:	f8ad 601c 	strh.w	r6, [sp, #28]
 8016502:	f8ad 801e 	strh.w	r8, [sp, #30]
 8016506:	f8cd 9020 	str.w	r9, [sp, #32]
 801650a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016510:	4798      	blx	r3
 8016512:	4228      	tst	r0, r5
 8016514:	d106      	bne.n	8016524 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8016516:	4b07      	ldr	r3, [pc, #28]	; (8016534 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8016518:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801651c:	4a06      	ldr	r2, [pc, #24]	; (8016538 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801651e:	4807      	ldr	r0, [pc, #28]	; (801653c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016520:	f00e fbe6 	bl	8024cf0 <__assert_func>
 8016524:	6860      	ldr	r0, [r4, #4]
 8016526:	a902      	add	r1, sp, #8
 8016528:	6803      	ldr	r3, [r0, #0]
 801652a:	685b      	ldr	r3, [r3, #4]
 801652c:	4798      	blx	r3
 801652e:	b00b      	add	sp, #44	; 0x2c
 8016530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016534:	080277a6 	.word	0x080277a6
 8016538:	08027aeb 	.word	0x08027aeb
 801653c:	080276f2 	.word	0x080276f2

08016540 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016540:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016544:	461f      	mov	r7, r3
 8016546:	4b0b      	ldr	r3, [pc, #44]	; (8016574 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016548:	460d      	mov	r5, r1
 801654a:	4616      	mov	r6, r2
 801654c:	f8b3 8000 	ldrh.w	r8, [r3]
 8016550:	4604      	mov	r4, r0
 8016552:	f7f9 f939 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8016556:	6803      	ldr	r3, [r0, #0]
 8016558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801655a:	4798      	blx	r3
 801655c:	463b      	mov	r3, r7
 801655e:	4632      	mov	r2, r6
 8016560:	4629      	mov	r1, r5
 8016562:	e9cd 8000 	strd	r8, r0, [sp]
 8016566:	4620      	mov	r0, r4
 8016568:	f7ff fea0 	bl	80162ac <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801656c:	b002      	add	sp, #8
 801656e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016572:	bf00      	nop
 8016574:	2000bcc2 	.word	0x2000bcc2

08016578 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8016578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801657c:	4698      	mov	r8, r3
 801657e:	b088      	sub	sp, #32
 8016580:	2300      	movs	r3, #0
 8016582:	4617      	mov	r7, r2
 8016584:	4604      	mov	r4, r0
 8016586:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801658a:	9306      	str	r3, [sp, #24]
 801658c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016590:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016594:	f8ad 6010 	strh.w	r6, [sp, #16]
 8016598:	f8ad 5012 	strh.w	r5, [sp, #18]
 801659c:	e9cd 3100 	strd	r3, r1, [sp]
 80165a0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80165a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80165a8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80165ac:	f88d 301c 	strb.w	r3, [sp, #28]
 80165b0:	f7ff fe1a 	bl	80161e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80165b4:	4642      	mov	r2, r8
 80165b6:	4603      	mov	r3, r0
 80165b8:	4639      	mov	r1, r7
 80165ba:	4620      	mov	r0, r4
 80165bc:	f7ff ffc0 	bl	8016540 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80165c0:	4b16      	ldr	r3, [pc, #88]	; (801661c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80165c2:	9003      	str	r0, [sp, #12]
 80165c4:	881b      	ldrh	r3, [r3, #0]
 80165c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165ca:	f7f9 f8fd 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 80165ce:	6803      	ldr	r3, [r0, #0]
 80165d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165d2:	4798      	blx	r3
 80165d4:	f88d 001e 	strb.w	r0, [sp, #30]
 80165d8:	f88d 001d 	strb.w	r0, [sp, #29]
 80165dc:	b106      	cbz	r6, 80165e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80165de:	b935      	cbnz	r5, 80165ee <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80165e0:	4b0f      	ldr	r3, [pc, #60]	; (8016620 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80165e2:	f240 11cd 	movw	r1, #461	; 0x1cd
 80165e6:	4a0f      	ldr	r2, [pc, #60]	; (8016624 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80165e8:	480f      	ldr	r0, [pc, #60]	; (8016628 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80165ea:	f00e fb81 	bl	8024cf0 <__assert_func>
 80165ee:	6823      	ldr	r3, [r4, #0]
 80165f0:	4620      	mov	r0, r4
 80165f2:	9d00      	ldr	r5, [sp, #0]
 80165f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165f6:	4798      	blx	r3
 80165f8:	4228      	tst	r0, r5
 80165fa:	d104      	bne.n	8016606 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80165fc:	4b0b      	ldr	r3, [pc, #44]	; (801662c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80165fe:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8016602:	4a08      	ldr	r2, [pc, #32]	; (8016624 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016604:	e7f0      	b.n	80165e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8016606:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016608:	4669      	mov	r1, sp
 801660a:	6860      	ldr	r0, [r4, #4]
 801660c:	9306      	str	r3, [sp, #24]
 801660e:	6803      	ldr	r3, [r0, #0]
 8016610:	685b      	ldr	r3, [r3, #4]
 8016612:	4798      	blx	r3
 8016614:	b008      	add	sp, #32
 8016616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801661a:	bf00      	nop
 801661c:	2000bcc2 	.word	0x2000bcc2
 8016620:	0802776e 	.word	0x0802776e
 8016624:	080278d4 	.word	0x080278d4
 8016628:	080276f2 	.word	0x080276f2
 801662c:	080277a6 	.word	0x080277a6

08016630 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016630:	b570      	push	{r4, r5, r6, lr}
 8016632:	b08a      	sub	sp, #40	; 0x28
 8016634:	4604      	mov	r4, r0
 8016636:	466b      	mov	r3, sp
 8016638:	e883 0006 	stmia.w	r3, {r1, r2}
 801663c:	4b1f      	ldr	r3, [pc, #124]	; (80166bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801663e:	781b      	ldrb	r3, [r3, #0]
 8016640:	b933      	cbnz	r3, 8016650 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016642:	4b1f      	ldr	r3, [pc, #124]	; (80166c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016644:	f240 11f9 	movw	r1, #505	; 0x1f9
 8016648:	4a1e      	ldr	r2, [pc, #120]	; (80166c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801664a:	481f      	ldr	r0, [pc, #124]	; (80166c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801664c:	f00e fb50 	bl	8024cf0 <__assert_func>
 8016650:	2300      	movs	r3, #0
 8016652:	f8bd 5000 	ldrh.w	r5, [sp]
 8016656:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801665a:	9308      	str	r3, [sp, #32]
 801665c:	2301      	movs	r3, #1
 801665e:	9302      	str	r3, [sp, #8]
 8016660:	6803      	ldr	r3, [r0, #0]
 8016662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016664:	4798      	blx	r3
 8016666:	4632      	mov	r2, r6
 8016668:	4629      	mov	r1, r5
 801666a:	4603      	mov	r3, r0
 801666c:	4620      	mov	r0, r4
 801666e:	f7ff ff67 	bl	8016540 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016672:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016674:	9003      	str	r0, [sp, #12]
 8016676:	9305      	str	r3, [sp, #20]
 8016678:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801667c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016680:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016684:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016688:	4b10      	ldr	r3, [pc, #64]	; (80166cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801668a:	881b      	ldrh	r3, [r3, #0]
 801668c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016690:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016694:	f7f9 f898 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8016698:	6803      	ldr	r3, [r0, #0]
 801669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801669c:	4798      	blx	r3
 801669e:	23ff      	movs	r3, #255	; 0xff
 80166a0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80166a4:	a902      	add	r1, sp, #8
 80166a6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80166aa:	6860      	ldr	r0, [r4, #4]
 80166ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80166b0:	6803      	ldr	r3, [r0, #0]
 80166b2:	685b      	ldr	r3, [r3, #4]
 80166b4:	4798      	blx	r3
 80166b6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80166b8:	b00a      	add	sp, #40	; 0x28
 80166ba:	bd70      	pop	{r4, r5, r6, pc}
 80166bc:	2000bcc7 	.word	0x2000bcc7
 80166c0:	0802763f 	.word	0x0802763f
 80166c4:	08027978 	.word	0x08027978
 80166c8:	080276f2 	.word	0x080276f2
 80166cc:	2000bcc2 	.word	0x2000bcc2

080166d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80166d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166d2:	b08b      	sub	sp, #44	; 0x2c
 80166d4:	4604      	mov	r4, r0
 80166d6:	466d      	mov	r5, sp
 80166d8:	e885 0006 	stmia.w	r5, {r1, r2}
 80166dc:	461d      	mov	r5, r3
 80166de:	2300      	movs	r3, #0
 80166e0:	f8bd 6000 	ldrh.w	r6, [sp]
 80166e4:	9308      	str	r3, [sp, #32]
 80166e6:	2301      	movs	r3, #1
 80166e8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80166ec:	9302      	str	r3, [sp, #8]
 80166ee:	6803      	ldr	r3, [r0, #0]
 80166f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166f2:	4798      	blx	r3
 80166f4:	463a      	mov	r2, r7
 80166f6:	4631      	mov	r1, r6
 80166f8:	4603      	mov	r3, r0
 80166fa:	4620      	mov	r0, r4
 80166fc:	f7ff ff20 	bl	8016540 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016700:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016704:	9003      	str	r0, [sp, #12]
 8016706:	f8ad 3018 	strh.w	r3, [sp, #24]
 801670a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801670e:	9505      	str	r5, [sp, #20]
 8016710:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016714:	4b0d      	ldr	r3, [pc, #52]	; (801674c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8016716:	881b      	ldrh	r3, [r3, #0]
 8016718:	f8ad 301c 	strh.w	r3, [sp, #28]
 801671c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801671e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016722:	f7f9 f851 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8016726:	6803      	ldr	r3, [r0, #0]
 8016728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801672a:	4798      	blx	r3
 801672c:	23ff      	movs	r3, #255	; 0xff
 801672e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016732:	a902      	add	r1, sp, #8
 8016734:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016738:	6860      	ldr	r0, [r4, #4]
 801673a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801673e:	6803      	ldr	r3, [r0, #0]
 8016740:	685b      	ldr	r3, [r3, #4]
 8016742:	4798      	blx	r3
 8016744:	4628      	mov	r0, r5
 8016746:	b00b      	add	sp, #44	; 0x2c
 8016748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801674a:	bf00      	nop
 801674c:	2000bcc2 	.word	0x2000bcc2

08016750 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016750:	b570      	push	{r4, r5, r6, lr}
 8016752:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016756:	4604      	mov	r4, r0
 8016758:	b19b      	cbz	r3, 8016782 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801675a:	2002      	movs	r0, #2
 801675c:	f7fc fe84 	bl	8013468 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016760:	2300      	movs	r3, #0
 8016762:	4620      	mov	r0, r4
 8016764:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016768:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801676c:	6823      	ldr	r3, [r4, #0]
 801676e:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8016772:	f7ff fd39 	bl	80161e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016776:	4601      	mov	r1, r0
 8016778:	4620      	mov	r0, r4
 801677a:	462b      	mov	r3, r5
 801677c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016780:	4718      	bx	r3
 8016782:	bd70      	pop	{r4, r5, r6, pc}

08016784 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016784:	4770      	bx	lr

08016786 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016786:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801678a:	1a13      	subs	r3, r2, r0
 801678c:	4258      	negs	r0, r3
 801678e:	4158      	adcs	r0, r3
 8016790:	4770      	bx	lr

08016792 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016792:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016796:	1a9b      	subs	r3, r3, r2
 8016798:	2b00      	cmp	r3, #0
 801679a:	bfdc      	itt	le
 801679c:	6882      	ldrle	r2, [r0, #8]
 801679e:	189b      	addle	r3, r3, r2
 80167a0:	2b01      	cmp	r3, #1
 80167a2:	bfcc      	ite	gt
 80167a4:	2000      	movgt	r0, #0
 80167a6:	2001      	movle	r0, #1
 80167a8:	4770      	bx	lr

080167aa <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80167aa:	6902      	ldr	r2, [r0, #16]
 80167ac:	6840      	ldr	r0, [r0, #4]
 80167ae:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80167b2:	4770      	bx	lr

080167b4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80167b4:	6803      	ldr	r3, [r0, #0]
 80167b6:	691b      	ldr	r3, [r3, #16]
 80167b8:	4718      	bx	r3

080167ba <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80167ba:	4770      	bx	lr

080167bc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80167bc:	4770      	bx	lr
	...

080167c0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80167c0:	2301      	movs	r3, #1
 80167c2:	b570      	push	{r4, r5, r6, lr}
 80167c4:	7203      	strb	r3, [r0, #8]
 80167c6:	4604      	mov	r4, r0
 80167c8:	6840      	ldr	r0, [r0, #4]
 80167ca:	6803      	ldr	r3, [r0, #0]
 80167cc:	699b      	ldr	r3, [r3, #24]
 80167ce:	4798      	blx	r3
 80167d0:	6803      	ldr	r3, [r0, #0]
 80167d2:	4605      	mov	r5, r0
 80167d4:	2b08      	cmp	r3, #8
 80167d6:	d01e      	beq.n	8016816 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80167d8:	d80b      	bhi.n	80167f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167da:	2b02      	cmp	r3, #2
 80167dc:	d027      	beq.n	801682e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80167de:	2b04      	cmp	r3, #4
 80167e0:	d011      	beq.n	8016806 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80167e2:	2b01      	cmp	r3, #1
 80167e4:	d028      	beq.n	8016838 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80167e6:	4b17      	ldr	r3, [pc, #92]	; (8016844 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80167e8:	218b      	movs	r1, #139	; 0x8b
 80167ea:	4a17      	ldr	r2, [pc, #92]	; (8016848 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80167ec:	4817      	ldr	r0, [pc, #92]	; (801684c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80167ee:	f00e fa7f 	bl	8024cf0 <__assert_func>
 80167f2:	2b40      	cmp	r3, #64	; 0x40
 80167f4:	d020      	beq.n	8016838 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80167f6:	d801      	bhi.n	80167fc <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80167f8:	2b20      	cmp	r3, #32
 80167fa:	e7f3      	b.n	80167e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80167fc:	2b80      	cmp	r3, #128	; 0x80
 80167fe:	d01b      	beq.n	8016838 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016804:	e7ee      	b.n	80167e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016806:	6823      	ldr	r3, [r4, #0]
 8016808:	7f01      	ldrb	r1, [r0, #28]
 801680a:	4620      	mov	r0, r4
 801680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801680e:	4798      	blx	r3
 8016810:	6823      	ldr	r3, [r4, #0]
 8016812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016814:	e006      	b.n	8016824 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016816:	6823      	ldr	r3, [r4, #0]
 8016818:	7f01      	ldrb	r1, [r0, #28]
 801681a:	4620      	mov	r0, r4
 801681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801681e:	4798      	blx	r3
 8016820:	6823      	ldr	r3, [r4, #0]
 8016822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016824:	4629      	mov	r1, r5
 8016826:	4620      	mov	r0, r4
 8016828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801682c:	4718      	bx	r3
 801682e:	6823      	ldr	r3, [r4, #0]
 8016830:	4620      	mov	r0, r4
 8016832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016834:	4798      	blx	r3
 8016836:	e7f3      	b.n	8016820 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016838:	6823      	ldr	r3, [r4, #0]
 801683a:	4620      	mov	r0, r4
 801683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801683e:	4798      	blx	r3
 8016840:	e7e6      	b.n	8016810 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8016842:	bf00      	nop
 8016844:	08027bc9 	.word	0x08027bc9
 8016848:	08027cd8 	.word	0x08027cd8
 801684c:	08027bee 	.word	0x08027bee

08016850 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016850:	b570      	push	{r4, r5, r6, lr}
 8016852:	4604      	mov	r4, r0
 8016854:	460e      	mov	r6, r1
 8016856:	6860      	ldr	r0, [r4, #4]
 8016858:	6803      	ldr	r3, [r0, #0]
 801685a:	685b      	ldr	r3, [r3, #4]
 801685c:	4798      	blx	r3
 801685e:	2800      	cmp	r0, #0
 8016860:	d1f9      	bne.n	8016856 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016862:	4d0b      	ldr	r5, [pc, #44]	; (8016890 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8016864:	6828      	ldr	r0, [r5, #0]
 8016866:	6803      	ldr	r3, [r0, #0]
 8016868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801686a:	4798      	blx	r3
 801686c:	f7fd f8b0 	bl	80139d0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016870:	6860      	ldr	r0, [r4, #4]
 8016872:	4631      	mov	r1, r6
 8016874:	6803      	ldr	r3, [r0, #0]
 8016876:	689b      	ldr	r3, [r3, #8]
 8016878:	4798      	blx	r3
 801687a:	6823      	ldr	r3, [r4, #0]
 801687c:	4620      	mov	r0, r4
 801687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016880:	4798      	blx	r3
 8016882:	6828      	ldr	r0, [r5, #0]
 8016884:	6803      	ldr	r3, [r0, #0]
 8016886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801688a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801688c:	4718      	bx	r3
 801688e:	bf00      	nop
 8016890:	2000bcc8 	.word	0x2000bcc8

08016894 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016894:	b508      	push	{r3, lr}
 8016896:	f7fd f87f 	bl	8013998 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801689a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801689e:	f7fd b889 	b.w	80139b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080168a2 <_ZN8touchgfx13DMA_Interface5startEv>:
 80168a2:	b510      	push	{r4, lr}
 80168a4:	4604      	mov	r4, r0
 80168a6:	6840      	ldr	r0, [r0, #4]
 80168a8:	6803      	ldr	r3, [r0, #0]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	4798      	blx	r3
 80168ae:	b948      	cbnz	r0, 80168c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80168b0:	7a63      	ldrb	r3, [r4, #9]
 80168b2:	b13b      	cbz	r3, 80168c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80168b4:	7a23      	ldrb	r3, [r4, #8]
 80168b6:	b92b      	cbnz	r3, 80168c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80168b8:	6823      	ldr	r3, [r4, #0]
 80168ba:	4620      	mov	r0, r4
 80168bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168c2:	4718      	bx	r3
 80168c4:	bd10      	pop	{r4, pc}
	...

080168c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80168c8:	b510      	push	{r4, lr}
 80168ca:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80168ce:	1b12      	subs	r2, r2, r4
 80168d0:	2a00      	cmp	r2, #0
 80168d2:	bfdc      	itt	le
 80168d4:	6883      	ldrle	r3, [r0, #8]
 80168d6:	18d2      	addle	r2, r2, r3
 80168d8:	2a01      	cmp	r2, #1
 80168da:	dd18      	ble.n	801690e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80168dc:	6843      	ldr	r3, [r0, #4]
 80168de:	f101 021c 	add.w	r2, r1, #28
 80168e2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80168e6:	f851 4b04 	ldr.w	r4, [r1], #4
 80168ea:	4291      	cmp	r1, r2
 80168ec:	f843 4b04 	str.w	r4, [r3], #4
 80168f0:	d1f9      	bne.n	80168e6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80168f2:	880a      	ldrh	r2, [r1, #0]
 80168f4:	801a      	strh	r2, [r3, #0]
 80168f6:	788a      	ldrb	r2, [r1, #2]
 80168f8:	709a      	strb	r2, [r3, #2]
 80168fa:	68c3      	ldr	r3, [r0, #12]
 80168fc:	6882      	ldr	r2, [r0, #8]
 80168fe:	f3bf 8f5b 	dmb	ish
 8016902:	3301      	adds	r3, #1
 8016904:	429a      	cmp	r2, r3
 8016906:	bfd8      	it	le
 8016908:	1a9b      	suble	r3, r3, r2
 801690a:	60c3      	str	r3, [r0, #12]
 801690c:	bd10      	pop	{r4, pc}
 801690e:	4b03      	ldr	r3, [pc, #12]	; (801691c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016910:	2139      	movs	r1, #57	; 0x39
 8016912:	4a03      	ldr	r2, [pc, #12]	; (8016920 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016914:	4803      	ldr	r0, [pc, #12]	; (8016924 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016916:	f00e f9eb 	bl	8024cf0 <__assert_func>
 801691a:	bf00      	nop
 801691c:	08027c14 	.word	0x08027c14
 8016920:	08027d08 	.word	0x08027d08
 8016924:	08027bee 	.word	0x08027bee

08016928 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016928:	b510      	push	{r4, lr}
 801692a:	6803      	ldr	r3, [r0, #0]
 801692c:	4604      	mov	r4, r0
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	4798      	blx	r3
 8016932:	b128      	cbz	r0, 8016940 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016934:	4b07      	ldr	r3, [pc, #28]	; (8016954 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016936:	213f      	movs	r1, #63	; 0x3f
 8016938:	4a07      	ldr	r2, [pc, #28]	; (8016958 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801693a:	4808      	ldr	r0, [pc, #32]	; (801695c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801693c:	f00e f9d8 	bl	8024cf0 <__assert_func>
 8016940:	6923      	ldr	r3, [r4, #16]
 8016942:	68a2      	ldr	r2, [r4, #8]
 8016944:	f3bf 8f5b 	dmb	ish
 8016948:	3301      	adds	r3, #1
 801694a:	429a      	cmp	r2, r3
 801694c:	bfd8      	it	le
 801694e:	1a9b      	suble	r3, r3, r2
 8016950:	6123      	str	r3, [r4, #16]
 8016952:	bd10      	pop	{r4, pc}
 8016954:	08027c37 	.word	0x08027c37
 8016958:	08027d56 	.word	0x08027d56
 801695c:	08027bee 	.word	0x08027bee

08016960 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016960:	b570      	push	{r4, r5, r6, lr}
 8016962:	4604      	mov	r4, r0
 8016964:	6840      	ldr	r0, [r0, #4]
 8016966:	6803      	ldr	r3, [r0, #0]
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	4798      	blx	r3
 801696c:	4605      	mov	r5, r0
 801696e:	b930      	cbnz	r0, 801697e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016970:	7a23      	ldrb	r3, [r4, #8]
 8016972:	b123      	cbz	r3, 801697e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016974:	6860      	ldr	r0, [r4, #4]
 8016976:	6803      	ldr	r3, [r0, #0]
 8016978:	695b      	ldr	r3, [r3, #20]
 801697a:	4798      	blx	r3
 801697c:	7225      	strb	r5, [r4, #8]
 801697e:	6860      	ldr	r0, [r4, #4]
 8016980:	6803      	ldr	r3, [r0, #0]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	4798      	blx	r3
 8016986:	b928      	cbnz	r0, 8016994 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016988:	6823      	ldr	r3, [r4, #0]
 801698a:	4620      	mov	r0, r4
 801698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801698e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016992:	4718      	bx	r3
 8016994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016998:	f7fd b826 	b.w	80139e8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801699c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801699c:	b510      	push	{r4, lr}
 801699e:	6082      	str	r2, [r0, #8]
 80169a0:	2200      	movs	r2, #0
 80169a2:	4c03      	ldr	r4, [pc, #12]	; (80169b0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80169a4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80169a8:	e9c0 4100 	strd	r4, r1, [r0]
 80169ac:	bd10      	pop	{r4, pc}
 80169ae:	bf00      	nop
 80169b0:	08027cbc 	.word	0x08027cbc

080169b4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80169b4:	6840      	ldr	r0, [r0, #4]
 80169b6:	6803      	ldr	r3, [r0, #0]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	4718      	bx	r3

080169bc <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 80169bc:	2001      	movs	r0, #1
 80169be:	4770      	bx	lr

080169c0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 80169c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80169c4:	460d      	mov	r5, r1
 80169c6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80169ca:	b085      	sub	sp, #20
 80169cc:	4690      	mov	r8, r2
 80169ce:	4411      	add	r1, r2
 80169d0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80169d4:	4699      	mov	r9, r3
 80169d6:	6803      	ldr	r3, [r0, #0]
 80169d8:	60c1      	str	r1, [r0, #12]
 80169da:	4604      	mov	r4, r0
 80169dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80169de:	440a      	add	r2, r1
 80169e0:	6102      	str	r2, [r0, #16]
 80169e2:	68db      	ldr	r3, [r3, #12]
 80169e4:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80169e8:	4798      	blx	r3
 80169ea:	2800      	cmp	r0, #0
 80169ec:	d039      	beq.n	8016a62 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 80169ee:	44c8      	add	r8, r9
 80169f0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80169f4:	4445      	add	r5, r8
 80169f6:	6823      	ldr	r3, [r4, #0]
 80169f8:	f10d 020f 	add.w	r2, sp, #15
 80169fc:	a903      	add	r1, sp, #12
 80169fe:	4620      	mov	r0, r4
 8016a00:	9200      	str	r2, [sp, #0]
 8016a02:	f10d 020d 	add.w	r2, sp, #13
 8016a06:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8016a0a:	f10d 030e 	add.w	r3, sp, #14
 8016a0e:	47c0      	blx	r8
 8016a10:	b1f8      	cbz	r0, 8016a52 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8016a12:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016a16:	7a20      	ldrb	r0, [r4, #8]
 8016a18:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016a1c:	4358      	muls	r0, r3
 8016a1e:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8016a22:	1c43      	adds	r3, r0, #1
 8016a24:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016a28:	f817 0b01 	ldrb.w	r0, [r7], #1
 8016a2c:	121b      	asrs	r3, r3, #8
 8016a2e:	fb10 f003 	smulbb	r0, r0, r3
 8016a32:	b283      	uxth	r3, r0
 8016a34:	1c58      	adds	r0, r3, #1
 8016a36:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016a3a:	6823      	ldr	r3, [r4, #0]
 8016a3c:	1200      	asrs	r0, r0, #8
 8016a3e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8016a42:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016a46:	28ff      	cmp	r0, #255	; 0xff
 8016a48:	d10e      	bne.n	8016a68 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8016a4a:	9100      	str	r1, [sp, #0]
 8016a4c:	4629      	mov	r1, r5
 8016a4e:	4620      	mov	r0, r4
 8016a50:	47c0      	blx	r8
 8016a52:	68e3      	ldr	r3, [r4, #12]
 8016a54:	3e01      	subs	r6, #1
 8016a56:	f105 0503 	add.w	r5, r5, #3
 8016a5a:	f103 0301 	add.w	r3, r3, #1
 8016a5e:	60e3      	str	r3, [r4, #12]
 8016a60:	d1c9      	bne.n	80169f6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8016a62:	b005      	add	sp, #20
 8016a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a68:	fa1f fc80 	uxth.w	ip, r0
 8016a6c:	43c0      	mvns	r0, r0
 8016a6e:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016a72:	fb12 f20c 	smulbb	r2, r2, ip
 8016a76:	b2c0      	uxtb	r0, r0
 8016a78:	fb13 f30c 	smulbb	r3, r3, ip
 8016a7c:	fb0e 2200 	mla	r2, lr, r0, r2
 8016a80:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016a84:	fb11 f10c 	smulbb	r1, r1, ip
 8016a88:	fb0e 3300 	mla	r3, lr, r0, r3
 8016a8c:	f895 e000 	ldrb.w	lr, [r5]
 8016a90:	b292      	uxth	r2, r2
 8016a92:	b29b      	uxth	r3, r3
 8016a94:	fb0e 1000 	mla	r0, lr, r0, r1
 8016a98:	1c59      	adds	r1, r3, #1
 8016a9a:	b280      	uxth	r0, r0
 8016a9c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016aa0:	1c51      	adds	r1, r2, #1
 8016aa2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016aa6:	1c41      	adds	r1, r0, #1
 8016aa8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016aac:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016ab0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016ab4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016ab8:	9000      	str	r0, [sp, #0]
 8016aba:	e7c7      	b.n	8016a4c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08016abc <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8016abc:	f89d 0000 	ldrb.w	r0, [sp]
 8016ac0:	704b      	strb	r3, [r1, #1]
 8016ac2:	7008      	strb	r0, [r1, #0]
 8016ac4:	708a      	strb	r2, [r1, #2]
 8016ac6:	4770      	bx	lr

08016ac8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8016ac8:	4413      	add	r3, r2
 8016aca:	7dc2      	ldrb	r2, [r0, #23]
 8016acc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016ad0:	4419      	add	r1, r3
 8016ad2:	7a03      	ldrb	r3, [r0, #8]
 8016ad4:	435a      	muls	r2, r3
 8016ad6:	1c53      	adds	r3, r2, #1
 8016ad8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016adc:	121b      	asrs	r3, r3, #8
 8016ade:	2bff      	cmp	r3, #255	; 0xff
 8016ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ae2:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8016ae6:	d13e      	bne.n	8016b66 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8016ae8:	4427      	add	r7, r4
 8016aea:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016aee:	3103      	adds	r1, #3
 8016af0:	7d86      	ldrb	r6, [r0, #22]
 8016af2:	2bff      	cmp	r3, #255	; 0xff
 8016af4:	d10a      	bne.n	8016b0c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8016af6:	f801 6c03 	strb.w	r6, [r1, #-3]
 8016afa:	7d43      	ldrb	r3, [r0, #21]
 8016afc:	f801 3c02 	strb.w	r3, [r1, #-2]
 8016b00:	7d03      	ldrb	r3, [r0, #20]
 8016b02:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016b06:	42a7      	cmp	r7, r4
 8016b08:	d1ef      	bne.n	8016aea <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8016b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b0c:	b29a      	uxth	r2, r3
 8016b0e:	43db      	mvns	r3, r3
 8016b10:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8016b14:	fb16 f602 	smulbb	r6, r6, r2
 8016b18:	b2db      	uxtb	r3, r3
 8016b1a:	fb05 6503 	mla	r5, r5, r3, r6
 8016b1e:	b2ad      	uxth	r5, r5
 8016b20:	1c6e      	adds	r6, r5, #1
 8016b22:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016b26:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8016b2a:	fb16 f603 	smulbb	r6, r6, r3
 8016b2e:	122d      	asrs	r5, r5, #8
 8016b30:	f801 5c03 	strb.w	r5, [r1, #-3]
 8016b34:	7d45      	ldrb	r5, [r0, #21]
 8016b36:	fb05 6502 	mla	r5, r5, r2, r6
 8016b3a:	b2ad      	uxth	r5, r5
 8016b3c:	1c6e      	adds	r6, r5, #1
 8016b3e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016b42:	122d      	asrs	r5, r5, #8
 8016b44:	f801 5c02 	strb.w	r5, [r1, #-2]
 8016b48:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016b4c:	7d06      	ldrb	r6, [r0, #20]
 8016b4e:	fb15 f303 	smulbb	r3, r5, r3
 8016b52:	fb06 3202 	mla	r2, r6, r2, r3
 8016b56:	b292      	uxth	r2, r2
 8016b58:	1c53      	adds	r3, r2, #1
 8016b5a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016b5e:	1212      	asrs	r2, r2, #8
 8016b60:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016b64:	e7cf      	b.n	8016b06 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8016b66:	b2de      	uxtb	r6, r3
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d0ce      	beq.n	8016b0a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8016b6c:	3103      	adds	r1, #3
 8016b6e:	4427      	add	r7, r4
 8016b70:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016b74:	3103      	adds	r1, #3
 8016b76:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8016b7a:	fb02 f306 	mul.w	r3, r2, r6
 8016b7e:	42bc      	cmp	r4, r7
 8016b80:	f103 0201 	add.w	r2, r3, #1
 8016b84:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016b88:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016b8c:	b295      	uxth	r5, r2
 8016b8e:	ea6f 0202 	mvn.w	r2, r2
 8016b92:	b2d3      	uxtb	r3, r2
 8016b94:	7d82      	ldrb	r2, [r0, #22]
 8016b96:	fb1c fc03 	smulbb	ip, ip, r3
 8016b9a:	fb02 c205 	mla	r2, r2, r5, ip
 8016b9e:	b292      	uxth	r2, r2
 8016ba0:	f102 0c01 	add.w	ip, r2, #1
 8016ba4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016ba8:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8016bac:	fb1c fc03 	smulbb	ip, ip, r3
 8016bb0:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016bb4:	f801 2c06 	strb.w	r2, [r1, #-6]
 8016bb8:	7d42      	ldrb	r2, [r0, #21]
 8016bba:	fb02 c205 	mla	r2, r2, r5, ip
 8016bbe:	b292      	uxth	r2, r2
 8016bc0:	f102 0c01 	add.w	ip, r2, #1
 8016bc4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016bc8:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016bcc:	f801 2c05 	strb.w	r2, [r1, #-5]
 8016bd0:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8016bd4:	f890 c014 	ldrb.w	ip, [r0, #20]
 8016bd8:	fb12 f303 	smulbb	r3, r2, r3
 8016bdc:	fb0c 3305 	mla	r3, ip, r5, r3
 8016be0:	b29b      	uxth	r3, r3
 8016be2:	f103 0201 	add.w	r2, r3, #1
 8016be6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016bea:	ea4f 2323 	mov.w	r3, r3, asr #8
 8016bee:	f801 3c04 	strb.w	r3, [r1, #-4]
 8016bf2:	d1bd      	bne.n	8016b70 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8016bf4:	e789      	b.n	8016b0a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08016bf6 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8016bf6:	b510      	push	{r4, lr}
 8016bf8:	7d04      	ldrb	r4, [r0, #20]
 8016bfa:	700c      	strb	r4, [r1, #0]
 8016bfc:	7d41      	ldrb	r1, [r0, #21]
 8016bfe:	7011      	strb	r1, [r2, #0]
 8016c00:	7d82      	ldrb	r2, [r0, #22]
 8016c02:	701a      	strb	r2, [r3, #0]
 8016c04:	9b02      	ldr	r3, [sp, #8]
 8016c06:	7dc2      	ldrb	r2, [r0, #23]
 8016c08:	2001      	movs	r0, #1
 8016c0a:	701a      	strb	r2, [r3, #0]
 8016c0c:	bd10      	pop	{r4, pc}

08016c0e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 8016c0e:	b570      	push	{r4, r5, r6, lr}
 8016c10:	4616      	mov	r6, r2
 8016c12:	4604      	mov	r4, r0
 8016c14:	460d      	mov	r5, r1
 8016c16:	f7f8 fdd7 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8016c1a:	6803      	ldr	r3, [r0, #0]
 8016c1c:	4629      	mov	r1, r5
 8016c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c20:	4798      	blx	r3
 8016c22:	7520      	strb	r0, [r4, #20]
 8016c24:	f7f8 fdd0 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8016c28:	6803      	ldr	r3, [r0, #0]
 8016c2a:	4629      	mov	r1, r5
 8016c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c2e:	4798      	blx	r3
 8016c30:	7560      	strb	r0, [r4, #21]
 8016c32:	f7f8 fdc9 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8016c36:	6803      	ldr	r3, [r0, #0]
 8016c38:	4629      	mov	r1, r5
 8016c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c3c:	4798      	blx	r3
 8016c3e:	75e6      	strb	r6, [r4, #23]
 8016c40:	75a0      	strb	r0, [r4, #22]
 8016c42:	bd70      	pop	{r4, r5, r6, pc}

08016c44 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8016c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c46:	460e      	mov	r6, r1
 8016c48:	4617      	mov	r7, r2
 8016c4a:	4604      	mov	r4, r0
 8016c4c:	f000 f832 	bl	8016cb4 <_ZN8touchgfx15AbstractPainterC1Ev>
 8016c50:	4b12      	ldr	r3, [pc, #72]	; (8016c9c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 8016c52:	6023      	str	r3, [r4, #0]
 8016c54:	f7f8 fdb8 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8016c58:	6803      	ldr	r3, [r0, #0]
 8016c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c5c:	4798      	blx	r3
 8016c5e:	1e43      	subs	r3, r0, #1
 8016c60:	425d      	negs	r5, r3
 8016c62:	415d      	adcs	r5, r3
 8016c64:	4b0e      	ldr	r3, [pc, #56]	; (8016ca0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016c6a:	b130      	cbz	r0, 8016c7a <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8016c6c:	6803      	ldr	r3, [r0, #0]
 8016c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c70:	4798      	blx	r3
 8016c72:	2801      	cmp	r0, #1
 8016c74:	bf08      	it	eq
 8016c76:	f045 0501 	orreq.w	r5, r5, #1
 8016c7a:	b92d      	cbnz	r5, 8016c88 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8016c7c:	4b09      	ldr	r3, [pc, #36]	; (8016ca4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 8016c7e:	2129      	movs	r1, #41	; 0x29
 8016c80:	4a09      	ldr	r2, [pc, #36]	; (8016ca8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 8016c82:	480a      	ldr	r0, [pc, #40]	; (8016cac <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8016c84:	f00e f834 	bl	8024cf0 <__assert_func>
 8016c88:	4b09      	ldr	r3, [pc, #36]	; (8016cb0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8016c8a:	4620      	mov	r0, r4
 8016c8c:	463a      	mov	r2, r7
 8016c8e:	4631      	mov	r1, r6
 8016c90:	6023      	str	r3, [r4, #0]
 8016c92:	f7ff ffbc 	bl	8016c0e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 8016c96:	4620      	mov	r0, r4
 8016c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c9a:	bf00      	nop
 8016c9c:	08027d90 	.word	0x08027d90
 8016ca0:	2000bcc8 	.word	0x2000bcc8
 8016ca4:	08027da8 	.word	0x08027da8
 8016ca8:	08027e6c 	.word	0x08027e6c
 8016cac:	08027e06 	.word	0x08027e06
 8016cb0:	08027e54 	.word	0x08027e54

08016cb4 <_ZN8touchgfx15AbstractPainterC1Ev>:
 8016cb4:	4a03      	ldr	r2, [pc, #12]	; (8016cc4 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8016cb6:	6002      	str	r2, [r0, #0]
 8016cb8:	2200      	movs	r2, #0
 8016cba:	6042      	str	r2, [r0, #4]
 8016cbc:	22ff      	movs	r2, #255	; 0xff
 8016cbe:	7202      	strb	r2, [r0, #8]
 8016cc0:	4770      	bx	lr
 8016cc2:	bf00      	nop
 8016cc4:	08027eb0 	.word	0x08027eb0

08016cc8 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8016cc8:	4770      	bx	lr

08016cca <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 8016cca:	8081      	strh	r1, [r0, #4]
 8016ccc:	80c2      	strh	r2, [r0, #6]
 8016cce:	4770      	bx	lr

08016cd0 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8016cd0:	7201      	strb	r1, [r0, #8]
 8016cd2:	4770      	bx	lr

08016cd4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8016cd4:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8016cd8:	4770      	bx	lr

08016cda <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8016cda:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8016cde:	4770      	bx	lr

08016ce0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8016ce0:	6281      	str	r1, [r0, #40]	; 0x28
 8016ce2:	4770      	bx	lr

08016ce4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016ce4:	b513      	push	{r0, r1, r4, lr}
 8016ce6:	6803      	ldr	r3, [r0, #0]
 8016ce8:	4604      	mov	r4, r0
 8016cea:	4601      	mov	r1, r0
 8016cec:	4668      	mov	r0, sp
 8016cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cf0:	4798      	blx	r3
 8016cf2:	6823      	ldr	r3, [r4, #0]
 8016cf4:	4669      	mov	r1, sp
 8016cf6:	4620      	mov	r0, r4
 8016cf8:	691b      	ldr	r3, [r3, #16]
 8016cfa:	4798      	blx	r3
 8016cfc:	b002      	add	sp, #8
 8016cfe:	bd10      	pop	{r4, pc}

08016d00 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016d00:	b510      	push	{r4, lr}
 8016d02:	2200      	movs	r2, #0
 8016d04:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016d08:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8016d0c:	8002      	strh	r2, [r0, #0]
 8016d0e:	8042      	strh	r2, [r0, #2]
 8016d10:	8084      	strh	r4, [r0, #4]
 8016d12:	80c1      	strh	r1, [r0, #6]
 8016d14:	bd10      	pop	{r4, pc}

08016d16 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8016d16:	2200      	movs	r2, #0
 8016d18:	8002      	strh	r2, [r0, #0]
 8016d1a:	8042      	strh	r2, [r0, #2]
 8016d1c:	8082      	strh	r2, [r0, #4]
 8016d1e:	80c2      	strh	r2, [r0, #6]
 8016d20:	4770      	bx	lr
	...

08016d24 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8016d24:	b508      	push	{r3, lr}
 8016d26:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016d28:	b928      	cbnz	r0, 8016d36 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8016d2a:	4b03      	ldr	r3, [pc, #12]	; (8016d38 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8016d2c:	2127      	movs	r1, #39	; 0x27
 8016d2e:	4a03      	ldr	r2, [pc, #12]	; (8016d3c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016d30:	4803      	ldr	r0, [pc, #12]	; (8016d40 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8016d32:	f00d ffdd 	bl	8024cf0 <__assert_func>
 8016d36:	bd08      	pop	{r3, pc}
 8016d38:	08027ebc 	.word	0x08027ebc
 8016d3c:	08027fa0 	.word	0x08027fa0
 8016d40:	08027ee3 	.word	0x08027ee3

08016d44 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d48:	b089      	sub	sp, #36	; 0x24
 8016d4a:	4604      	mov	r4, r0
 8016d4c:	6808      	ldr	r0, [r1, #0]
 8016d4e:	f04f 0a00 	mov.w	sl, #0
 8016d52:	6849      	ldr	r1, [r1, #4]
 8016d54:	ab02      	add	r3, sp, #8
 8016d56:	f04f 0b01 	mov.w	fp, #1
 8016d5a:	c303      	stmia	r3!, {r0, r1}
 8016d5c:	4b3f      	ldr	r3, [pc, #252]	; (8016e5c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8016d5e:	4621      	mov	r1, r4
 8016d60:	a804      	add	r0, sp, #16
 8016d62:	781b      	ldrb	r3, [r3, #0]
 8016d64:	2b01      	cmp	r3, #1
 8016d66:	6823      	ldr	r3, [r4, #0]
 8016d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d6a:	bf1f      	itttt	ne
 8016d6c:	f10d 0906 	addne.w	r9, sp, #6
 8016d70:	ae03      	addne	r6, sp, #12
 8016d72:	f10d 050e 	addne.w	r5, sp, #14
 8016d76:	f10d 080a 	addne.w	r8, sp, #10
 8016d7a:	bf01      	itttt	eq
 8016d7c:	f10d 090e 	addeq.w	r9, sp, #14
 8016d80:	f10d 0606 	addeq.w	r6, sp, #6
 8016d84:	ad03      	addeq	r5, sp, #12
 8016d86:	f10d 0808 	addeq.w	r8, sp, #8
 8016d8a:	4798      	blx	r3
 8016d8c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016d90:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d056      	beq.n	8016e46 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8016d98:	4293      	cmp	r3, r2
 8016d9a:	bfa8      	it	ge
 8016d9c:	4613      	movge	r3, r2
 8016d9e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016da2:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8016da6:	2f00      	cmp	r7, #0
 8016da8:	dd34      	ble.n	8016e14 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8016daa:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8016dae:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8016db2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8016db6:	4484      	add	ip, r0
 8016db8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016dbc:	f9b6 e000 	ldrsh.w	lr, [r6]
 8016dc0:	fa0f fc8c 	sxth.w	ip, ip
 8016dc4:	f9b9 1000 	ldrsh.w	r1, [r9]
 8016dc8:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016dcc:	4562      	cmp	r2, ip
 8016dce:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016dd2:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016dd6:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016dda:	da29      	bge.n	8016e30 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016ddc:	4472      	add	r2, lr
 8016dde:	b212      	sxth	r2, r2
 8016de0:	4290      	cmp	r0, r2
 8016de2:	da25      	bge.n	8016e30 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016de4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016de8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016dec:	4402      	add	r2, r0
 8016dee:	b212      	sxth	r2, r2
 8016df0:	4293      	cmp	r3, r2
 8016df2:	da1d      	bge.n	8016e30 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016df4:	440b      	add	r3, r1
 8016df6:	b21b      	sxth	r3, r3
 8016df8:	4298      	cmp	r0, r3
 8016dfa:	da19      	bge.n	8016e30 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016dfc:	6823      	ldr	r3, [r4, #0]
 8016dfe:	a906      	add	r1, sp, #24
 8016e00:	4620      	mov	r0, r4
 8016e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016e04:	4798      	blx	r3
 8016e06:	b998      	cbnz	r0, 8016e30 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016e08:	107f      	asrs	r7, r7, #1
 8016e0a:	f04f 0a01 	mov.w	sl, #1
 8016e0e:	f8ad 7006 	strh.w	r7, [sp, #6]
 8016e12:	e7c6      	b.n	8016da2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016e14:	d10c      	bne.n	8016e30 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016e16:	f8ad b006 	strh.w	fp, [sp, #6]
 8016e1a:	f8b8 2000 	ldrh.w	r2, [r8]
 8016e1e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8016e22:	440a      	add	r2, r1
 8016e24:	f8a8 2000 	strh.w	r2, [r8]
 8016e28:	882b      	ldrh	r3, [r5, #0]
 8016e2a:	1a5b      	subs	r3, r3, r1
 8016e2c:	802b      	strh	r3, [r5, #0]
 8016e2e:	e7ad      	b.n	8016d8c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016e30:	f1ba 0f00 	cmp.w	sl, #0
 8016e34:	d0f1      	beq.n	8016e1a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016e36:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016e3a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016e3e:	429a      	cmp	r2, r3
 8016e40:	bf08      	it	eq
 8016e42:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016e44:	e7e9      	b.n	8016e1a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016e46:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016e4a:	429a      	cmp	r2, r3
 8016e4c:	bf04      	itt	eq
 8016e4e:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8016e52:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016e54:	b009      	add	sp, #36	; 0x24
 8016e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e5a:	bf00      	nop
 8016e5c:	2000bcc0 	.word	0x2000bcc0

08016e60 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016e60:	2200      	movs	r2, #0
 8016e62:	2101      	movs	r1, #1
 8016e64:	8082      	strh	r2, [r0, #4]
 8016e66:	80c2      	strh	r2, [r0, #6]
 8016e68:	8102      	strh	r2, [r0, #8]
 8016e6a:	8142      	strh	r2, [r0, #10]
 8016e6c:	8182      	strh	r2, [r0, #12]
 8016e6e:	81c2      	strh	r2, [r0, #14]
 8016e70:	8202      	strh	r2, [r0, #16]
 8016e72:	8242      	strh	r2, [r0, #18]
 8016e74:	61c2      	str	r2, [r0, #28]
 8016e76:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016e7a:	6282      	str	r2, [r0, #40]	; 0x28
 8016e7c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016e80:	4905      	ldr	r1, [pc, #20]	; (8016e98 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8016e82:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016e86:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016e8a:	6001      	str	r1, [r0, #0]
 8016e8c:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016e8e:	22ff      	movs	r2, #255	; 0xff
 8016e90:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8016e94:	4770      	bx	lr
 8016e96:	bf00      	nop
 8016e98:	08027f28 	.word	0x08027f28

08016e9c <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8016e9c:	4770      	bx	lr

08016e9e <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8016e9e:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8016ea2:	4602      	mov	r2, r0
 8016ea4:	cb03      	ldmia	r3!, {r0, r1}
 8016ea6:	6010      	str	r0, [r2, #0]
 8016ea8:	4610      	mov	r0, r2
 8016eaa:	6051      	str	r1, [r2, #4]
 8016eac:	4770      	bx	lr

08016eae <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eb2:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8016eb6:	b395      	cbz	r5, 8016f1e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016eb8:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8016ebc:	f1bc 0f00 	cmp.w	ip, #0
 8016ec0:	d02d      	beq.n	8016f1e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016ec2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016ec6:	f9b1 e000 	ldrsh.w	lr, [r1]
 8016eca:	b354      	cbz	r4, 8016f22 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016ecc:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8016ed0:	b33f      	cbz	r7, 8016f22 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016ed2:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016ed6:	4475      	add	r5, lr
 8016ed8:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8016edc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016ee0:	45f0      	cmp	r8, lr
 8016ee2:	4646      	mov	r6, r8
 8016ee4:	4444      	add	r4, r8
 8016ee6:	bfa8      	it	ge
 8016ee8:	4676      	movge	r6, lr
 8016eea:	4293      	cmp	r3, r2
 8016eec:	4619      	mov	r1, r3
 8016eee:	443b      	add	r3, r7
 8016ef0:	bfa8      	it	ge
 8016ef2:	4611      	movge	r1, r2
 8016ef4:	4462      	add	r2, ip
 8016ef6:	b22d      	sxth	r5, r5
 8016ef8:	8006      	strh	r6, [r0, #0]
 8016efa:	b224      	sxth	r4, r4
 8016efc:	8041      	strh	r1, [r0, #2]
 8016efe:	b212      	sxth	r2, r2
 8016f00:	b21b      	sxth	r3, r3
 8016f02:	42a5      	cmp	r5, r4
 8016f04:	bfac      	ite	ge
 8016f06:	ebc6 0405 	rsbge	r4, r6, r5
 8016f0a:	ebc6 0404 	rsblt	r4, r6, r4
 8016f0e:	429a      	cmp	r2, r3
 8016f10:	bfac      	ite	ge
 8016f12:	ebc1 0302 	rsbge	r3, r1, r2
 8016f16:	ebc1 0303 	rsblt	r3, r1, r3
 8016f1a:	8084      	strh	r4, [r0, #4]
 8016f1c:	80c3      	strh	r3, [r0, #6]
 8016f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f22:	f8a0 e000 	strh.w	lr, [r0]
 8016f26:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016f2a:	8043      	strh	r3, [r0, #2]
 8016f2c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016f30:	8083      	strh	r3, [r0, #4]
 8016f32:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016f36:	e7f1      	b.n	8016f1c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08016f38 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016f38:	b507      	push	{r0, r1, r2, lr}
 8016f3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016f3e:	ab01      	add	r3, sp, #4
 8016f40:	6809      	ldr	r1, [r1, #0]
 8016f42:	6800      	ldr	r0, [r0, #0]
 8016f44:	f002 fc4f 	bl	80197e6 <_ZN8touchgfx6muldivElllRl>
 8016f48:	b003      	add	sp, #12
 8016f4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016f50 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016f50:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016f54:	fb90 f3f2 	sdiv	r3, r0, r2
 8016f58:	fb03 0312 	mls	r3, r3, r2, r0
 8016f5c:	4413      	add	r3, r2
 8016f5e:	fb93 f0f2 	sdiv	r0, r3, r2
 8016f62:	fb02 3010 	mls	r0, r2, r0, r3
 8016f66:	4b0a      	ldr	r3, [pc, #40]	; (8016f90 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016f68:	285a      	cmp	r0, #90	; 0x5a
 8016f6a:	dc02      	bgt.n	8016f72 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016f6c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016f70:	4770      	bx	lr
 8016f72:	28b4      	cmp	r0, #180	; 0xb4
 8016f74:	dc02      	bgt.n	8016f7c <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016f76:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016f7a:	e7f7      	b.n	8016f6c <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016f7c:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016f80:	bfd4      	ite	le
 8016f82:	38b4      	suble	r0, #180	; 0xb4
 8016f84:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016f88:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016f8c:	4240      	negs	r0, r0
 8016f8e:	4770      	bx	lr
 8016f90:	0802804a 	.word	0x0802804a

08016f94 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8016f94:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016f98:	f04f 0300 	mov.w	r3, #0
 8016f9c:	bf2c      	ite	cs
 8016f9e:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8016fa2:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8016fa6:	1899      	adds	r1, r3, r2
 8016fa8:	4288      	cmp	r0, r1
 8016faa:	bf24      	itt	cs
 8016fac:	1853      	addcs	r3, r2, r1
 8016fae:	1a40      	subcs	r0, r0, r1
 8016fb0:	0892      	lsrs	r2, r2, #2
 8016fb2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8016fb6:	d1f6      	bne.n	8016fa6 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8016fb8:	4618      	mov	r0, r3
 8016fba:	4770      	bx	lr

08016fbc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8016fbc:	2800      	cmp	r0, #0
 8016fbe:	b508      	push	{r3, lr}
 8016fc0:	da05      	bge.n	8016fce <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8016fc2:	4240      	negs	r0, r0
 8016fc4:	f7ff fffa 	bl	8016fbc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016fc8:	4240      	negs	r0, r0
 8016fca:	b240      	sxtb	r0, r0
 8016fcc:	bd08      	pop	{r3, pc}
 8016fce:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016fd2:	dc11      	bgt.n	8016ff8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8016fd4:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8016fd8:	dd09      	ble.n	8016fee <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8016fda:	4340      	muls	r0, r0
 8016fdc:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8016fe0:	f7ff ffd8 	bl	8016f94 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016fe4:	f7ff ffea 	bl	8016fbc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016fe8:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016fec:	e7ed      	b.n	8016fca <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8016fee:	3003      	adds	r0, #3
 8016ff0:	4b02      	ldr	r3, [pc, #8]	; (8016ffc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8016ff2:	10c0      	asrs	r0, r0, #3
 8016ff4:	5618      	ldrsb	r0, [r3, r0]
 8016ff6:	e7e9      	b.n	8016fcc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016ff8:	2000      	movs	r0, #0
 8016ffa:	e7e7      	b.n	8016fcc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016ffc:	08027fee 	.word	0x08027fee

08017000 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8017000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017002:	460c      	mov	r4, r1
 8017004:	1e01      	subs	r1, r0, #0
 8017006:	4615      	mov	r5, r2
 8017008:	db01      	blt.n	801700e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 801700a:	2c00      	cmp	r4, #0
 801700c:	da06      	bge.n	801701c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801700e:	4b11      	ldr	r3, [pc, #68]	; (8017054 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8017010:	f240 3197 	movw	r1, #919	; 0x397
 8017014:	4a10      	ldr	r2, [pc, #64]	; (8017058 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8017016:	4811      	ldr	r0, [pc, #68]	; (801705c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8017018:	f00d fe6a 	bl	8024cf0 <__assert_func>
 801701c:	428c      	cmp	r4, r1
 801701e:	dd06      	ble.n	801702e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8017020:	4620      	mov	r0, r4
 8017022:	f7ff ffed 	bl	8017000 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017026:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801702a:	b003      	add	sp, #12
 801702c:	bd30      	pop	{r4, r5, pc}
 801702e:	4349      	muls	r1, r1
 8017030:	fb04 1004 	mla	r0, r4, r4, r1
 8017034:	f7ff ffae 	bl	8016f94 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8017038:	6028      	str	r0, [r5, #0]
 801703a:	2800      	cmp	r0, #0
 801703c:	d0f5      	beq.n	801702a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801703e:	4602      	mov	r2, r0
 8017040:	ab01      	add	r3, sp, #4
 8017042:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017046:	4620      	mov	r0, r4
 8017048:	f002 fbcd 	bl	80197e6 <_ZN8touchgfx6muldivElllRl>
 801704c:	f7ff ffb6 	bl	8016fbc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017050:	e7eb      	b.n	801702a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8017052:	bf00      	nop
 8017054:	08028100 	.word	0x08028100
 8017058:	080281c8 	.word	0x080281c8
 801705c:	08028111 	.word	0x08028111

08017060 <_ZN8touchgfx4LineC1Ev>:
 8017060:	b510      	push	{r4, lr}
 8017062:	4604      	mov	r4, r0
 8017064:	f7ff fefc 	bl	8016e60 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8017068:	4b0c      	ldr	r3, [pc, #48]	; (801709c <_ZN8touchgfx4LineC1Ev+0x3c>)
 801706a:	2220      	movs	r2, #32
 801706c:	4620      	mov	r0, r4
 801706e:	6023      	str	r3, [r4, #0]
 8017070:	2300      	movs	r3, #0
 8017072:	6422      	str	r2, [r4, #64]	; 0x40
 8017074:	2212      	movs	r2, #18
 8017076:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801707a:	6722      	str	r2, [r4, #112]	; 0x70
 801707c:	60a3      	str	r3, [r4, #8]
 801707e:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8017082:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8017086:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801708a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801708e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8017092:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8017096:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 801709a:	bd10      	pop	{r4, pc}
 801709c:	08028150 	.word	0x08028150

080170a0 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80170a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170a4:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80170a6:	b085      	sub	sp, #20
 80170a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80170aa:	4604      	mov	r4, r0
 80170ac:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80170ae:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80170b0:	1af6      	subs	r6, r6, r3
 80170b2:	eba5 0502 	sub.w	r5, r5, r2
 80170b6:	f040 809b 	bne.w	80171f0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 80170ba:	b955      	cbnz	r5, 80170d2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 80170bc:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80170c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80170c4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80170c8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80170cc:	b005      	add	sp, #20
 80170ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d2:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 80170d6:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 80170da:	f04f 0802 	mov.w	r8, #2
 80170de:	463a      	mov	r2, r7
 80170e0:	4629      	mov	r1, r5
 80170e2:	ab03      	add	r3, sp, #12
 80170e4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80170e6:	f002 fb7e 	bl	80197e6 <_ZN8touchgfx6muldivElllRl>
 80170ea:	ab03      	add	r3, sp, #12
 80170ec:	463a      	mov	r2, r7
 80170ee:	4631      	mov	r1, r6
 80170f0:	fb90 f5f8 	sdiv	r5, r0, r8
 80170f4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80170f6:	f002 fb76 	bl	80197e6 <_ZN8touchgfx6muldivElllRl>
 80170fa:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 80170fe:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8017102:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8017106:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8017108:	fb90 f0f8 	sdiv	r0, r0, r8
 801710c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8017110:	eba8 0305 	sub.w	r3, r8, r5
 8017114:	f1ba 0f00 	cmp.w	sl, #0
 8017118:	f040 80c3 	bne.w	80172a2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 801711c:	64a3      	str	r3, [r4, #72]	; 0x48
 801711e:	19c3      	adds	r3, r0, r7
 8017120:	65a3      	str	r3, [r4, #88]	; 0x58
 8017122:	ebae 0305 	sub.w	r3, lr, r5
 8017126:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017128:	eb00 030c 	add.w	r3, r0, ip
 801712c:	65e3      	str	r3, [r4, #92]	; 0x5c
 801712e:	eb05 030e 	add.w	r3, r5, lr
 8017132:	6523      	str	r3, [r4, #80]	; 0x50
 8017134:	ebac 0300 	sub.w	r3, ip, r0
 8017138:	6623      	str	r3, [r4, #96]	; 0x60
 801713a:	eb05 0308 	add.w	r3, r5, r8
 801713e:	6563      	str	r3, [r4, #84]	; 0x54
 8017140:	1a3b      	subs	r3, r7, r0
 8017142:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8017144:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8017148:	6663      	str	r3, [r4, #100]	; 0x64
 801714a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801714e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017150:	4632      	mov	r2, r6
 8017152:	9301      	str	r3, [sp, #4]
 8017154:	9100      	str	r1, [sp, #0]
 8017156:	f859 bb04 	ldr.w	fp, [r9], #4
 801715a:	9b00      	ldr	r3, [sp, #0]
 801715c:	455e      	cmp	r6, fp
 801715e:	bfa8      	it	ge
 8017160:	465e      	movge	r6, fp
 8017162:	455a      	cmp	r2, fp
 8017164:	bfb8      	it	lt
 8017166:	465a      	movlt	r2, fp
 8017168:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 801716c:	4559      	cmp	r1, fp
 801716e:	bfa8      	it	ge
 8017170:	4659      	movge	r1, fp
 8017172:	455b      	cmp	r3, fp
 8017174:	bfb8      	it	lt
 8017176:	465b      	movlt	r3, fp
 8017178:	9300      	str	r3, [sp, #0]
 801717a:	9b01      	ldr	r3, [sp, #4]
 801717c:	454b      	cmp	r3, r9
 801717e:	d1ea      	bne.n	8017156 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 8017180:	f04f 0b20 	mov.w	fp, #32
 8017184:	b209      	sxth	r1, r1
 8017186:	b212      	sxth	r2, r2
 8017188:	f1ba 0f01 	cmp.w	sl, #1
 801718c:	b236      	sxth	r6, r6
 801718e:	fb91 f9fb 	sdiv	r9, r1, fp
 8017192:	f9bd 1000 	ldrsh.w	r1, [sp]
 8017196:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 801719a:	fb92 f2fb 	sdiv	r2, r2, fp
 801719e:	fb91 f1fb 	sdiv	r1, r1, fp
 80171a2:	fb96 f6fb 	sdiv	r6, r6, fp
 80171a6:	f102 0201 	add.w	r2, r2, #1
 80171aa:	f101 0101 	add.w	r1, r1, #1
 80171ae:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 80171b2:	eba1 0109 	sub.w	r1, r1, r9
 80171b6:	eba2 0606 	sub.w	r6, r2, r6
 80171ba:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 80171be:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 80171c2:	d183      	bne.n	80170cc <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 80171c4:	eba8 0305 	sub.w	r3, r8, r5
 80171c8:	64a3      	str	r3, [r4, #72]	; 0x48
 80171ca:	19c3      	adds	r3, r0, r7
 80171cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80171ce:	ebae 0305 	sub.w	r3, lr, r5
 80171d2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80171d4:	eb00 030c 	add.w	r3, r0, ip
 80171d8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80171da:	eb05 030e 	add.w	r3, r5, lr
 80171de:	4445      	add	r5, r8
 80171e0:	6523      	str	r3, [r4, #80]	; 0x50
 80171e2:	ebac 0300 	sub.w	r3, ip, r0
 80171e6:	1a38      	subs	r0, r7, r0
 80171e8:	6565      	str	r5, [r4, #84]	; 0x54
 80171ea:	6623      	str	r3, [r4, #96]	; 0x60
 80171ec:	6660      	str	r0, [r4, #100]	; 0x64
 80171ee:	e76d      	b.n	80170cc <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 80171f0:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 80171f4:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 80171f8:	2d00      	cmp	r5, #0
 80171fa:	f43f af6e 	beq.w	80170da <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 80171fe:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8017202:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8017206:	fb93 f2f7 	sdiv	r2, r3, r7
 801720a:	fb07 3312 	mls	r3, r7, r2, r3
 801720e:	b34b      	cbz	r3, 8017264 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8017210:	fb97 f2f3 	sdiv	r2, r7, r3
 8017214:	fb03 7712 	mls	r7, r3, r2, r7
 8017218:	2f00      	cmp	r7, #0
 801721a:	d1f4      	bne.n	8017206 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801721c:	2b01      	cmp	r3, #1
 801721e:	f24b 5204 	movw	r2, #46340	; 0xb504
 8017222:	bf18      	it	ne
 8017224:	fb96 f6f3 	sdivne	r6, r6, r3
 8017228:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 801722c:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8017230:	bf18      	it	ne
 8017232:	fb95 f5f3 	sdivne	r5, r5, r3
 8017236:	4291      	cmp	r1, r2
 8017238:	dd16      	ble.n	8017268 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801723a:	2d00      	cmp	r5, #0
 801723c:	da4d      	bge.n	80172da <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801723e:	4b29      	ldr	r3, [pc, #164]	; (80172e4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8017240:	429d      	cmp	r5, r3
 8017242:	da27      	bge.n	8017294 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8017244:	426a      	negs	r2, r5
 8017246:	f24b 5304 	movw	r3, #46340	; 0xb504
 801724a:	fb91 f1f3 	sdiv	r1, r1, r3
 801724e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017252:	4299      	cmp	r1, r3
 8017254:	bfcc      	ite	gt
 8017256:	1c4b      	addgt	r3, r1, #1
 8017258:	3301      	addle	r3, #1
 801725a:	fb96 f6f3 	sdiv	r6, r6, r3
 801725e:	fb95 f5f3 	sdiv	r5, r5, r3
 8017262:	e00f      	b.n	8017284 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8017264:	463b      	mov	r3, r7
 8017266:	e7d9      	b.n	801721c <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8017268:	2d00      	cmp	r5, #0
 801726a:	fb92 f2f1 	sdiv	r2, r2, r1
 801726e:	da13      	bge.n	8017298 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8017270:	4269      	negs	r1, r5
 8017272:	f24b 5304 	movw	r3, #46340	; 0xb504
 8017276:	fb93 f3f1 	sdiv	r3, r3, r1
 801727a:	429a      	cmp	r2, r3
 801727c:	bfa8      	it	ge
 801727e:	461a      	movge	r2, r3
 8017280:	4356      	muls	r6, r2
 8017282:	4355      	muls	r5, r2
 8017284:	fb05 f005 	mul.w	r0, r5, r5
 8017288:	fb06 0006 	mla	r0, r6, r6, r0
 801728c:	f7ff fe82 	bl	8016f94 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8017290:	4607      	mov	r7, r0
 8017292:	e722      	b.n	80170da <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8017294:	2200      	movs	r2, #0
 8017296:	e7eb      	b.n	8017270 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8017298:	4629      	mov	r1, r5
 801729a:	e7ea      	b.n	8017272 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801729c:	4629      	mov	r1, r5
 801729e:	2200      	movs	r2, #0
 80172a0:	e7e7      	b.n	8017272 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 80172a2:	1a1b      	subs	r3, r3, r0
 80172a4:	64a3      	str	r3, [r4, #72]	; 0x48
 80172a6:	19c3      	adds	r3, r0, r7
 80172a8:	1b5b      	subs	r3, r3, r5
 80172aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80172ac:	ebae 0305 	sub.w	r3, lr, r5
 80172b0:	4403      	add	r3, r0
 80172b2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80172b4:	eb00 030c 	add.w	r3, r0, ip
 80172b8:	442b      	add	r3, r5
 80172ba:	65e3      	str	r3, [r4, #92]	; 0x5c
 80172bc:	eb05 030e 	add.w	r3, r5, lr
 80172c0:	4403      	add	r3, r0
 80172c2:	6523      	str	r3, [r4, #80]	; 0x50
 80172c4:	ebac 0300 	sub.w	r3, ip, r0
 80172c8:	442b      	add	r3, r5
 80172ca:	6623      	str	r3, [r4, #96]	; 0x60
 80172cc:	eb05 0308 	add.w	r3, r5, r8
 80172d0:	1a1b      	subs	r3, r3, r0
 80172d2:	6563      	str	r3, [r4, #84]	; 0x54
 80172d4:	1a3b      	subs	r3, r7, r0
 80172d6:	1b5b      	subs	r3, r3, r5
 80172d8:	e733      	b.n	8017142 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 80172da:	4295      	cmp	r5, r2
 80172dc:	ddde      	ble.n	801729c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 80172de:	462a      	mov	r2, r5
 80172e0:	e7b1      	b.n	8017246 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 80172e2:	bf00      	nop
 80172e4:	ffff4afc 	.word	0xffff4afc

080172e8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 80172e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80172ea:	428b      	cmp	r3, r1
 80172ec:	d102      	bne.n	80172f4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 80172ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80172f0:	4293      	cmp	r3, r2
 80172f2:	d003      	beq.n	80172fc <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 80172f4:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 80172f8:	f7ff bed2 	b.w	80170a0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80172fc:	4770      	bx	lr

080172fe <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 80172fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017300:	428b      	cmp	r3, r1
 8017302:	d102      	bne.n	801730a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8017304:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8017306:	4293      	cmp	r3, r2
 8017308:	d003      	beq.n	8017312 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801730a:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801730e:	f7ff bec7 	b.w	80170a0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8017312:	4770      	bx	lr

08017314 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8017314:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8017318:	f7ff bec2 	b.w	80170a0 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801731c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801731c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017320:	b0b3      	sub	sp, #204	; 0xcc
 8017322:	4604      	mov	r4, r0
 8017324:	460a      	mov	r2, r1
 8017326:	4601      	mov	r1, r0
 8017328:	a804      	add	r0, sp, #16
 801732a:	ad32      	add	r5, sp, #200	; 0xc8
 801732c:	f00c f914 	bl	8023558 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8017330:	2300      	movs	r3, #0
 8017332:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8017334:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8017338:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801733a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801733c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801733e:	1ac0      	subs	r0, r0, r3
 8017340:	eba1 0102 	sub.w	r1, r1, r2
 8017344:	d43c      	bmi.n	80173c0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8017346:	2900      	cmp	r1, #0
 8017348:	462a      	mov	r2, r5
 801734a:	db33      	blt.n	80173b4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 801734c:	f7ff fe58 	bl	8017000 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017350:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8017354:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8017356:	a804      	add	r0, sp, #16
 8017358:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801735a:	f00c fac6 	bl	80238ea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801735e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8017360:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8017362:	a804      	add	r0, sp, #16
 8017364:	f00c fa50 	bl	8023808 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017368:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801736c:	2b01      	cmp	r3, #1
 801736e:	d137      	bne.n	80173e0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017370:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8017372:	2eb3      	cmp	r6, #179	; 0xb3
 8017374:	dc34      	bgt.n	80173e0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017376:	eba7 0906 	sub.w	r9, r7, r6
 801737a:	4648      	mov	r0, r9
 801737c:	f7ff fde8 	bl	8016f50 <_ZN8touchgfx7CWRUtil4sineEi>
 8017380:	a902      	add	r1, sp, #8
 8017382:	9002      	str	r0, [sp, #8]
 8017384:	4628      	mov	r0, r5
 8017386:	f7ff fdd7 	bl	8016f38 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801738a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801738c:	eb00 0801 	add.w	r8, r0, r1
 8017390:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017394:	f7ff fddc 	bl	8016f50 <_ZN8touchgfx7CWRUtil4sineEi>
 8017398:	a903      	add	r1, sp, #12
 801739a:	9003      	str	r0, [sp, #12]
 801739c:	4628      	mov	r0, r5
 801739e:	f7ff fdcb 	bl	8016f38 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80173a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80173a4:	4641      	mov	r1, r8
 80173a6:	1a12      	subs	r2, r2, r0
 80173a8:	a804      	add	r0, sp, #16
 80173aa:	f00c fa2d 	bl	8023808 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80173ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80173b0:	441e      	add	r6, r3
 80173b2:	e7de      	b.n	8017372 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 80173b4:	4249      	negs	r1, r1
 80173b6:	f7ff fe23 	bl	8017000 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80173ba:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 80173be:	e7c9      	b.n	8017354 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80173c0:	2900      	cmp	r1, #0
 80173c2:	f1c0 0000 	rsb	r0, r0, #0
 80173c6:	462a      	mov	r2, r5
 80173c8:	db04      	blt.n	80173d4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 80173ca:	f7ff fe19 	bl	8017000 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80173ce:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 80173d2:	e7bf      	b.n	8017354 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80173d4:	4249      	negs	r1, r1
 80173d6:	f7ff fe13 	bl	8017000 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80173da:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 80173de:	e7b9      	b.n	8017354 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80173e0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80173e2:	a804      	add	r0, sp, #16
 80173e4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80173e6:	f00c fa0f 	bl	8023808 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80173ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80173ec:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80173ee:	a804      	add	r0, sp, #16
 80173f0:	f00c fa0a 	bl	8023808 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80173f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80173f8:	2b01      	cmp	r3, #1
 80173fa:	d123      	bne.n	8017444 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 80173fc:	6f26      	ldr	r6, [r4, #112]	; 0x70
 80173fe:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8017402:	2e00      	cmp	r6, #0
 8017404:	dd1e      	ble.n	8017444 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8017406:	eb06 0907 	add.w	r9, r6, r7
 801740a:	4648      	mov	r0, r9
 801740c:	f7ff fda0 	bl	8016f50 <_ZN8touchgfx7CWRUtil4sineEi>
 8017410:	a902      	add	r1, sp, #8
 8017412:	9002      	str	r0, [sp, #8]
 8017414:	4628      	mov	r0, r5
 8017416:	f7ff fd8f 	bl	8016f38 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801741a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801741c:	eb00 0801 	add.w	r8, r0, r1
 8017420:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017424:	f7ff fd94 	bl	8016f50 <_ZN8touchgfx7CWRUtil4sineEi>
 8017428:	a903      	add	r1, sp, #12
 801742a:	9003      	str	r0, [sp, #12]
 801742c:	4628      	mov	r0, r5
 801742e:	f7ff fd83 	bl	8016f38 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017432:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017434:	4641      	mov	r1, r8
 8017436:	1a12      	subs	r2, r2, r0
 8017438:	a804      	add	r0, sp, #16
 801743a:	f00c f9e5 	bl	8023808 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801743e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017440:	1af6      	subs	r6, r6, r3
 8017442:	e7de      	b.n	8017402 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8017444:	a804      	add	r0, sp, #16
 8017446:	f00c fb54 	bl	8023af2 <_ZN8touchgfx6Canvas6renderEv>
 801744a:	4604      	mov	r4, r0
 801744c:	a804      	add	r0, sp, #16
 801744e:	f00c fb91 	bl	8023b74 <_ZN8touchgfx6CanvasD1Ev>
 8017452:	4620      	mov	r0, r4
 8017454:	b033      	add	sp, #204	; 0xcc
 8017456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801745a <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801745a:	b570      	push	{r4, r5, r6, lr}
 801745c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017460:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017462:	4604      	mov	r4, r0
 8017464:	429a      	cmp	r2, r3
 8017466:	d00c      	beq.n	8017482 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8017468:	f850 3b26 	ldr.w	r3, [r0], #38
 801746c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801746e:	f7f9 f8e5 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8017472:	2300      	movs	r3, #0
 8017474:	4601      	mov	r1, r0
 8017476:	46ac      	mov	ip, r5
 8017478:	4620      	mov	r0, r4
 801747a:	461a      	mov	r2, r3
 801747c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017480:	4760      	bx	ip
 8017482:	2000      	movs	r0, #0
 8017484:	bd70      	pop	{r4, r5, r6, pc}

08017486 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801748c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801748e:	429a      	cmp	r2, r3
 8017490:	d016      	beq.n	80174c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8017492:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8017496:	4620      	mov	r0, r4
 8017498:	f7f7 fdb6 	bl	800f008 <_ZNK8touchgfx9TypedText7getFontEv>
 801749c:	6803      	ldr	r3, [r0, #0]
 801749e:	4605      	mov	r5, r0
 80174a0:	4620      	mov	r0, r4
 80174a2:	69de      	ldr	r6, [r3, #28]
 80174a4:	f7f7 fdcc 	bl	800f040 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80174a8:	4607      	mov	r7, r0
 80174aa:	4620      	mov	r0, r4
 80174ac:	f7f9 f8c6 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 80174b0:	2300      	movs	r3, #0
 80174b2:	4602      	mov	r2, r0
 80174b4:	4639      	mov	r1, r7
 80174b6:	9300      	str	r3, [sp, #0]
 80174b8:	4628      	mov	r0, r5
 80174ba:	47b0      	blx	r6
 80174bc:	b003      	add	sp, #12
 80174be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174c0:	2000      	movs	r0, #0
 80174c2:	e7fb      	b.n	80174bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

080174c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80174c4:	b40e      	push	{r1, r2, r3}
 80174c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174ce:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80174d0:	b09b      	sub	sp, #108	; 0x6c
 80174d2:	4604      	mov	r4, r0
 80174d4:	429a      	cmp	r2, r3
 80174d6:	d03f      	beq.n	8017558 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 80174d8:	f100 0726 	add.w	r7, r0, #38	; 0x26
 80174dc:	ab22      	add	r3, sp, #136	; 0x88
 80174de:	4638      	mov	r0, r7
 80174e0:	9303      	str	r3, [sp, #12]
 80174e2:	f7f7 fd91 	bl	800f008 <_ZNK8touchgfx9TypedText7getFontEv>
 80174e6:	6803      	ldr	r3, [r0, #0]
 80174e8:	4680      	mov	r8, r0
 80174ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174ec:	4798      	blx	r3
 80174ee:	4606      	mov	r6, r0
 80174f0:	b205      	sxth	r5, r0
 80174f2:	a804      	add	r0, sp, #16
 80174f4:	f002 ff7e 	bl	801a3f4 <_ZN8touchgfx12TextProviderC1Ev>
 80174f8:	f8d8 3000 	ldr.w	r3, [r8]
 80174fc:	4640      	mov	r0, r8
 80174fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017500:	4798      	blx	r3
 8017502:	9a03      	ldr	r2, [sp, #12]
 8017504:	4603      	mov	r3, r0
 8017506:	9921      	ldr	r1, [sp, #132]	; 0x84
 8017508:	a804      	add	r0, sp, #16
 801750a:	f002 ff90 	bl	801a42e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801750e:	4638      	mov	r0, r7
 8017510:	f7f7 fd96 	bl	800f040 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017514:	4680      	mov	r8, r0
 8017516:	4638      	mov	r0, r7
 8017518:	f7f7 fd76 	bl	800f008 <_ZNK8touchgfx9TypedText7getFontEv>
 801751c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017520:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8017524:	4642      	mov	r2, r8
 8017526:	9300      	str	r3, [sp, #0]
 8017528:	4603      	mov	r3, r0
 801752a:	a804      	add	r0, sp, #16
 801752c:	f001 f815 	bl	801855a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017530:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017534:	b203      	sxth	r3, r0
 8017536:	18a9      	adds	r1, r5, r2
 8017538:	2900      	cmp	r1, #0
 801753a:	dd0b      	ble.n	8017554 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 801753c:	3b01      	subs	r3, #1
 801753e:	fb13 f302 	smulbb	r3, r3, r2
 8017542:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017546:	b21d      	sxth	r5, r3
 8017548:	4628      	mov	r0, r5
 801754a:	b01b      	add	sp, #108	; 0x6c
 801754c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017550:	b003      	add	sp, #12
 8017552:	4770      	bx	lr
 8017554:	2b00      	cmp	r3, #0
 8017556:	dcf7      	bgt.n	8017548 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8017558:	2500      	movs	r5, #0
 801755a:	e7f5      	b.n	8017548 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

0801755c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017564:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017566:	b08d      	sub	sp, #52	; 0x34
 8017568:	4604      	mov	r4, r0
 801756a:	429e      	cmp	r6, r3
 801756c:	4688      	mov	r8, r1
 801756e:	d04b      	beq.n	8017608 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8017570:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017574:	4628      	mov	r0, r5
 8017576:	f7f7 fd47 	bl	800f008 <_ZNK8touchgfx9TypedText7getFontEv>
 801757a:	4607      	mov	r7, r0
 801757c:	2800      	cmp	r0, #0
 801757e:	d043      	beq.n	8017608 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8017580:	4628      	mov	r0, r5
 8017582:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017586:	f7f7 fd73 	bl	800f070 <_ZNK8touchgfx9TypedText11assertValidEv>
 801758a:	4b21      	ldr	r3, [pc, #132]	; (8017610 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 801758c:	4628      	mov	r0, r5
 801758e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017598:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801759c:	785e      	ldrb	r6, [r3, #1]
 801759e:	f7f7 fd4f 	bl	800f040 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80175a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80175a4:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80175a8:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80175ac:	9309      	str	r3, [sp, #36]	; 0x24
 80175ae:	4b19      	ldr	r3, [pc, #100]	; (8017614 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 80175b0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80175ba:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80175be:	9707      	str	r7, [sp, #28]
 80175c0:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80175c4:	f88d 6020 	strb.w	r6, [sp, #32]
 80175c8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80175cc:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 80175d0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80175d4:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80175d8:	b10a      	cbz	r2, 80175de <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 80175da:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80175dc:	b906      	cbnz	r6, 80175e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 80175de:	689e      	ldr	r6, [r3, #8]
 80175e0:	af05      	add	r7, sp, #20
 80175e2:	4621      	mov	r1, r4
 80175e4:	4638      	mov	r0, r7
 80175e6:	f002 f864 	bl	80196b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80175ea:	4628      	mov	r0, r5
 80175ec:	f7f9 f826 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 80175f0:	2300      	movs	r3, #0
 80175f2:	9001      	str	r0, [sp, #4]
 80175f4:	4630      	mov	r0, r6
 80175f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80175fa:	ab07      	add	r3, sp, #28
 80175fc:	9300      	str	r3, [sp, #0]
 80175fe:	4643      	mov	r3, r8
 8017600:	e897 0006 	ldmia.w	r7, {r1, r2}
 8017604:	f000 fd76 	bl	80180f4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017608:	b00d      	add	sp, #52	; 0x34
 801760a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801760e:	bf00      	nop
 8017610:	2000bd58 	.word	0x2000bd58
 8017614:	2000bcc8 	.word	0x2000bcc8

08017618 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017618:	b570      	push	{r4, r5, r6, lr}
 801761a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801761e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017620:	4604      	mov	r4, r0
 8017622:	429a      	cmp	r2, r3
 8017624:	d021      	beq.n	801766a <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8017626:	6803      	ldr	r3, [r0, #0]
 8017628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801762a:	4798      	blx	r3
 801762c:	6823      	ldr	r3, [r4, #0]
 801762e:	4605      	mov	r5, r0
 8017630:	4620      	mov	r0, r4
 8017632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017634:	4798      	blx	r3
 8017636:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801763a:	4606      	mov	r6, r0
 801763c:	b22d      	sxth	r5, r5
 801763e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017642:	6823      	ldr	r3, [r4, #0]
 8017644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017646:	d109      	bne.n	801765c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8017648:	4629      	mov	r1, r5
 801764a:	4620      	mov	r0, r4
 801764c:	4798      	blx	r3
 801764e:	6823      	ldr	r3, [r4, #0]
 8017650:	4631      	mov	r1, r6
 8017652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017654:	4620      	mov	r0, r4
 8017656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801765a:	4718      	bx	r3
 801765c:	4601      	mov	r1, r0
 801765e:	4620      	mov	r0, r4
 8017660:	4798      	blx	r3
 8017662:	6823      	ldr	r3, [r4, #0]
 8017664:	4629      	mov	r1, r5
 8017666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017668:	e7f4      	b.n	8017654 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801766a:	bd70      	pop	{r4, r5, r6, pc}

0801766c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801766c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017670:	84c1      	strh	r1, [r0, #38]	; 0x26
 8017672:	b922      	cbnz	r2, 801767e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8017674:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017678:	b90b      	cbnz	r3, 801767e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801767a:	f7ff bfcd 	b.w	8017618 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801767e:	4770      	bx	lr

08017680 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017680:	2300      	movs	r3, #0
 8017682:	8003      	strh	r3, [r0, #0]
 8017684:	8043      	strh	r3, [r0, #2]
 8017686:	8083      	strh	r3, [r0, #4]
 8017688:	80c3      	strh	r3, [r0, #6]
 801768a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801768e:	b91b      	cbnz	r3, 8017698 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8017690:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017694:	2bff      	cmp	r3, #255	; 0xff
 8017696:	d103      	bne.n	80176a0 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8017698:	890b      	ldrh	r3, [r1, #8]
 801769a:	8083      	strh	r3, [r0, #4]
 801769c:	894b      	ldrh	r3, [r1, #10]
 801769e:	80c3      	strh	r3, [r0, #6]
 80176a0:	4770      	bx	lr
	...

080176a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80176a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176a6:	4604      	mov	r4, r0
 80176a8:	466b      	mov	r3, sp
 80176aa:	6808      	ldr	r0, [r1, #0]
 80176ac:	6849      	ldr	r1, [r1, #4]
 80176ae:	c303      	stmia	r3!, {r0, r1}
 80176b0:	6823      	ldr	r3, [r4, #0]
 80176b2:	4669      	mov	r1, sp
 80176b4:	4620      	mov	r0, r4
 80176b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176b8:	4798      	blx	r3
 80176ba:	4b08      	ldr	r3, [pc, #32]	; (80176dc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80176c2:	b10a      	cbz	r2, 80176c8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80176c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80176c6:	b900      	cbnz	r0, 80176ca <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80176c8:	6898      	ldr	r0, [r3, #8]
 80176ca:	6803      	ldr	r3, [r0, #0]
 80176cc:	4669      	mov	r1, sp
 80176ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80176d0:	69dd      	ldr	r5, [r3, #28]
 80176d2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80176d6:	47a8      	blx	r5
 80176d8:	b003      	add	sp, #12
 80176da:	bd30      	pop	{r4, r5, pc}
 80176dc:	2000bcc8 	.word	0x2000bcc8

080176e0 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 80176e0:	b570      	push	{r4, r5, r6, lr}
 80176e2:	6803      	ldr	r3, [r0, #0]
 80176e4:	4604      	mov	r4, r0
 80176e6:	4615      	mov	r5, r2
 80176e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80176ea:	4798      	blx	r3
 80176ec:	6823      	ldr	r3, [r4, #0]
 80176ee:	4629      	mov	r1, r5
 80176f0:	4620      	mov	r0, r4
 80176f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176f8:	4718      	bx	r3

080176fa <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 80176fa:	b570      	push	{r4, r5, r6, lr}
 80176fc:	6803      	ldr	r3, [r0, #0]
 80176fe:	4604      	mov	r4, r0
 8017700:	460e      	mov	r6, r1
 8017702:	4615      	mov	r5, r2
 8017704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017706:	4798      	blx	r3
 8017708:	8030      	strh	r0, [r6, #0]
 801770a:	6823      	ldr	r3, [r4, #0]
 801770c:	4620      	mov	r0, r4
 801770e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017710:	4798      	blx	r3
 8017712:	8028      	strh	r0, [r5, #0]
 8017714:	bd70      	pop	{r4, r5, r6, pc}

08017716 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8017716:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801771a:	4770      	bx	lr

0801771c <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801771c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8017720:	4770      	bx	lr

08017722 <_ZN8touchgfx10TiledImageD1Ev>:
 8017722:	4770      	bx	lr

08017724 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8017724:	b510      	push	{r4, lr}
 8017726:	4604      	mov	r4, r0
 8017728:	f000 fa40 	bl	8017bac <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801772c:	6823      	ldr	r3, [r4, #0]
 801772e:	4620      	mov	r0, r4
 8017730:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017734:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8017738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801773a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801773e:	4718      	bx	r3

08017740 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8017740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017742:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8017746:	4605      	mov	r5, r0
 8017748:	8541      	strh	r1, [r0, #42]	; 0x2a
 801774a:	4630      	mov	r0, r6
 801774c:	f003 fd7e 	bl	801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017750:	b1a0      	cbz	r0, 801777c <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 8017752:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 8017756:	4630      	mov	r0, r6
 8017758:	f003 fd78 	bl	801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801775c:	fb97 f4f0 	sdiv	r4, r7, r0
 8017760:	fb04 7410 	mls	r4, r4, r0, r7
 8017764:	4630      	mov	r0, r6
 8017766:	f003 fd71 	bl	801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801776a:	4404      	add	r4, r0
 801776c:	4630      	mov	r0, r6
 801776e:	f003 fd6d 	bl	801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017772:	fb94 f3f0 	sdiv	r3, r4, r0
 8017776:	fb03 4010 	mls	r0, r3, r0, r4
 801777a:	8568      	strh	r0, [r5, #42]	; 0x2a
 801777c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801777e <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801777e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017780:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8017784:	4605      	mov	r5, r0
 8017786:	8581      	strh	r1, [r0, #44]	; 0x2c
 8017788:	4630      	mov	r0, r6
 801778a:	f003 fd99 	bl	801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801778e:	b1a0      	cbz	r0, 80177ba <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 8017790:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 8017794:	4630      	mov	r0, r6
 8017796:	f003 fd93 	bl	801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801779a:	fb97 f4f0 	sdiv	r4, r7, r0
 801779e:	fb04 7410 	mls	r4, r4, r0, r7
 80177a2:	4630      	mov	r0, r6
 80177a4:	f003 fd8c 	bl	801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80177a8:	4404      	add	r4, r0
 80177aa:	4630      	mov	r0, r6
 80177ac:	f003 fd88 	bl	801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80177b0:	fb94 f3f0 	sdiv	r3, r4, r0
 80177b4:	fb03 4010 	mls	r0, r3, r0, r4
 80177b8:	85a8      	strh	r0, [r5, #44]	; 0x2c
 80177ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080177bc <_ZN8touchgfx10TiledImageD0Ev>:
 80177bc:	b510      	push	{r4, lr}
 80177be:	4604      	mov	r4, r0
 80177c0:	2130      	movs	r1, #48	; 0x30
 80177c2:	f00d fa6a 	bl	8024c9a <_ZdlPvj>
 80177c6:	4620      	mov	r0, r4
 80177c8:	bd10      	pop	{r4, pc}
	...

080177cc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 80177cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177d0:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 80177d4:	b093      	sub	sp, #76	; 0x4c
 80177d6:	4607      	mov	r7, r0
 80177d8:	460e      	mov	r6, r1
 80177da:	4658      	mov	r0, fp
 80177dc:	f003 fd36 	bl	801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80177e0:	4605      	mov	r5, r0
 80177e2:	4658      	mov	r0, fp
 80177e4:	f003 fd6c 	bl	801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80177e8:	4680      	mov	r8, r0
 80177ea:	2d00      	cmp	r5, #0
 80177ec:	f000 80c5 	beq.w	801797a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80177f0:	2800      	cmp	r0, #0
 80177f2:	f000 80c2 	beq.w	801797a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80177f6:	2300      	movs	r3, #0
 80177f8:	a90e      	add	r1, sp, #56	; 0x38
 80177fa:	4638      	mov	r0, r7
 80177fc:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8017800:	683b      	ldr	r3, [r7, #0]
 8017802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017804:	4798      	blx	r3
 8017806:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801780a:	f9b6 3000 	ldrsh.w	r3, [r6]
 801780e:	88b1      	ldrh	r1, [r6, #4]
 8017810:	189c      	adds	r4, r3, r2
 8017812:	440b      	add	r3, r1
 8017814:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8017818:	fa02 f383 	sxtah	r3, r2, r3
 801781c:	3b01      	subs	r3, #1
 801781e:	fb93 f3f5 	sdiv	r3, r3, r5
 8017822:	fb94 f4f5 	sdiv	r4, r4, r5
 8017826:	fb13 f305 	smulbb	r3, r3, r5
 801782a:	fb14 f405 	smulbb	r4, r4, r5
 801782e:	b21b      	sxth	r3, r3
 8017830:	1aa4      	subs	r4, r4, r2
 8017832:	930b      	str	r3, [sp, #44]	; 0x2c
 8017834:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017838:	b2a4      	uxth	r4, r4
 801783a:	185a      	adds	r2, r3, r1
 801783c:	fb92 f2f8 	sdiv	r2, r2, r8
 8017840:	fb12 f208 	smulbb	r2, r2, r8
 8017844:	1a52      	subs	r2, r2, r1
 8017846:	b212      	sxth	r2, r2
 8017848:	920c      	str	r2, [sp, #48]	; 0x30
 801784a:	88f2      	ldrh	r2, [r6, #6]
 801784c:	4413      	add	r3, r2
 801784e:	fa01 f383 	sxtah	r3, r1, r3
 8017852:	3b01      	subs	r3, #1
 8017854:	fb93 f3f8 	sdiv	r3, r3, r8
 8017858:	fb13 f308 	smulbb	r3, r3, r8
 801785c:	b21b      	sxth	r3, r3
 801785e:	930d      	str	r3, [sp, #52]	; 0x34
 8017860:	1963      	adds	r3, r4, r5
 8017862:	fa1f fa83 	uxth.w	sl, r3
 8017866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017868:	b223      	sxth	r3, r4
 801786a:	4293      	cmp	r3, r2
 801786c:	9305      	str	r3, [sp, #20]
 801786e:	f300 8084 	bgt.w	801797a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017872:	fa0f f38a 	sxth.w	r3, sl
 8017876:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801787a:	9309      	str	r3, [sp, #36]	; 0x24
 801787c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801787e:	4599      	cmp	r9, r3
 8017880:	dd04      	ble.n	801788c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 8017882:	442c      	add	r4, r5
 8017884:	eb05 030a 	add.w	r3, r5, sl
 8017888:	b2a4      	uxth	r4, r4
 801788a:	e7ea      	b.n	8017862 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801788c:	f9b6 c000 	ldrsh.w	ip, [r6]
 8017890:	88b2      	ldrh	r2, [r6, #4]
 8017892:	4462      	add	r2, ip
 8017894:	b292      	uxth	r2, r2
 8017896:	b213      	sxth	r3, r2
 8017898:	9308      	str	r3, [sp, #32]
 801789a:	fa1f f389 	uxth.w	r3, r9
 801789e:	eb08 0103 	add.w	r1, r8, r3
 80178a2:	9307      	str	r3, [sp, #28]
 80178a4:	b289      	uxth	r1, r1
 80178a6:	b208      	sxth	r0, r1
 80178a8:	9006      	str	r0, [sp, #24]
 80178aa:	9805      	ldr	r0, [sp, #20]
 80178ac:	4603      	mov	r3, r0
 80178ae:	9808      	ldr	r0, [sp, #32]
 80178b0:	4283      	cmp	r3, r0
 80178b2:	da5e      	bge.n	8017972 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80178b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178b6:	4584      	cmp	ip, r0
 80178b8:	da5b      	bge.n	8017972 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80178ba:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80178be:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 80178c2:	4486      	add	lr, r0
 80178c4:	fa1f fe8e 	uxth.w	lr, lr
 80178c8:	fa0f f38e 	sxth.w	r3, lr
 80178cc:	4599      	cmp	r9, r3
 80178ce:	930a      	str	r3, [sp, #40]	; 0x28
 80178d0:	da4f      	bge.n	8017972 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80178d2:	9b06      	ldr	r3, [sp, #24]
 80178d4:	4298      	cmp	r0, r3
 80178d6:	da4c      	bge.n	8017972 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80178d8:	9b05      	ldr	r3, [sp, #20]
 80178da:	459c      	cmp	ip, r3
 80178dc:	bfb8      	it	lt
 80178de:	469c      	movlt	ip, r3
 80178e0:	4548      	cmp	r0, r9
 80178e2:	9b08      	ldr	r3, [sp, #32]
 80178e4:	bfb8      	it	lt
 80178e6:	4648      	movlt	r0, r9
 80178e8:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 80178ec:	4699      	mov	r9, r3
 80178ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178f0:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 80178f4:	4599      	cmp	r9, r3
 80178f6:	bfc8      	it	gt
 80178f8:	4652      	movgt	r2, sl
 80178fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178fc:	eba2 020c 	sub.w	r2, r2, ip
 8017900:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8017904:	9a06      	ldr	r2, [sp, #24]
 8017906:	4293      	cmp	r3, r2
 8017908:	bfd8      	it	le
 801790a:	4671      	movle	r1, lr
 801790c:	1a09      	subs	r1, r1, r0
 801790e:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8017912:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8017916:	9b07      	ldr	r3, [sp, #28]
 8017918:	1b12      	subs	r2, r2, r4
 801791a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801791e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017922:	1ad2      	subs	r2, r2, r3
 8017924:	4b16      	ldr	r3, [pc, #88]	; (8017980 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8017926:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801792a:	681a      	ldr	r2, [r3, #0]
 801792c:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8017930:	b109      	cbz	r1, 8017936 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 8017932:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8017934:	b900      	cbnz	r0, 8017938 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8017936:	6890      	ldr	r0, [r2, #8]
 8017938:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801793c:	f04f 0c01 	mov.w	ip, #1
 8017940:	9b07      	ldr	r3, [sp, #28]
 8017942:	6801      	ldr	r1, [r0, #0]
 8017944:	4413      	add	r3, r2
 8017946:	f8cd c008 	str.w	ip, [sp, #8]
 801794a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801794e:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8017952:	b21b      	sxth	r3, r3
 8017954:	4422      	add	r2, r4
 8017956:	f8cd c004 	str.w	ip, [sp, #4]
 801795a:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801795e:	b212      	sxth	r2, r2
 8017960:	f8cd c000 	str.w	ip, [sp]
 8017964:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8017968:	4659      	mov	r1, fp
 801796a:	47c8      	blx	r9
 801796c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017970:	e784      	b.n	801787c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 8017972:	2300      	movs	r3, #0
 8017974:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8017978:	e7cb      	b.n	8017912 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801797a:	b013      	add	sp, #76	; 0x4c
 801797c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017980:	2000bcc8 	.word	0x2000bcc8

08017984 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8017984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017988:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801798c:	4606      	mov	r6, r0
 801798e:	4689      	mov	r9, r1
 8017990:	2bff      	cmp	r3, #255	; 0xff
 8017992:	d008      	beq.n	80179a6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8017994:	2300      	movs	r3, #0
 8017996:	8003      	strh	r3, [r0, #0]
 8017998:	8043      	strh	r3, [r0, #2]
 801799a:	8083      	strh	r3, [r0, #4]
 801799c:	4630      	mov	r0, r6
 801799e:	80f3      	strh	r3, [r6, #6]
 80179a0:	b003      	add	sp, #12
 80179a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179a6:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 80179aa:	4668      	mov	r0, sp
 80179ac:	4659      	mov	r1, fp
 80179ae:	f003 fcc1 	bl	801b334 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80179b2:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80179b6:	4658      	mov	r0, fp
 80179b8:	f9bd 7000 	ldrsh.w	r7, [sp]
 80179bc:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80179c0:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 80179c4:	f003 fc42 	bl	801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80179c8:	4284      	cmp	r4, r0
 80179ca:	d10d      	bne.n	80179e8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 80179cc:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 80179d0:	4658      	mov	r0, fp
 80179d2:	f003 fc75 	bl	801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80179d6:	4580      	cmp	r8, r0
 80179d8:	d12a      	bne.n	8017a30 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 80179da:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80179de:	8037      	strh	r7, [r6, #0]
 80179e0:	f8a6 a002 	strh.w	sl, [r6, #2]
 80179e4:	80b5      	strh	r5, [r6, #4]
 80179e6:	e7d9      	b.n	801799c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 80179e8:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 80179ec:	4658      	mov	r0, fp
 80179ee:	f003 fc2d 	bl	801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80179f2:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 80179f6:	1b7f      	subs	r7, r7, r5
 80179f8:	b2a3      	uxth	r3, r4
 80179fa:	b2bd      	uxth	r5, r7
 80179fc:	b22f      	sxth	r7, r5
 80179fe:	4428      	add	r0, r5
 8017a00:	2f00      	cmp	r7, #0
 8017a02:	b280      	uxth	r0, r0
 8017a04:	bfb8      	it	lt
 8017a06:	18ed      	addlt	r5, r5, r3
 8017a08:	4403      	add	r3, r0
 8017a0a:	bfac      	ite	ge
 8017a0c:	4625      	movge	r5, r4
 8017a0e:	2700      	movlt	r7, #0
 8017a10:	b29b      	uxth	r3, r3
 8017a12:	bfb8      	it	lt
 8017a14:	b22d      	sxthlt	r5, r5
 8017a16:	b219      	sxth	r1, r3
 8017a18:	bfb8      	it	lt
 8017a1a:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8017a1e:	4291      	cmp	r1, r2
 8017a20:	bfc4      	itt	gt
 8017a22:	1a9c      	subgt	r4, r3, r2
 8017a24:	b224      	sxthgt	r4, r4
 8017a26:	42ac      	cmp	r4, r5
 8017a28:	bfc4      	itt	gt
 8017a2a:	b207      	sxthgt	r7, r0
 8017a2c:	4625      	movgt	r5, r4
 8017a2e:	e7cf      	b.n	80179d0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8017a30:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8017a34:	4658      	mov	r0, fp
 8017a36:	f003 fc43 	bl	801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017a3a:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8017a3e:	ebaa 0404 	sub.w	r4, sl, r4
 8017a42:	fa1f f288 	uxth.w	r2, r8
 8017a46:	b2a4      	uxth	r4, r4
 8017a48:	fa0f fa84 	sxth.w	sl, r4
 8017a4c:	4420      	add	r0, r4
 8017a4e:	f1ba 0f00 	cmp.w	sl, #0
 8017a52:	b280      	uxth	r0, r0
 8017a54:	bfb8      	it	lt
 8017a56:	18a3      	addlt	r3, r4, r2
 8017a58:	4402      	add	r2, r0
 8017a5a:	bfac      	ite	ge
 8017a5c:	4643      	movge	r3, r8
 8017a5e:	f04f 0a00 	movlt.w	sl, #0
 8017a62:	b292      	uxth	r2, r2
 8017a64:	bfb8      	it	lt
 8017a66:	b21b      	sxthlt	r3, r3
 8017a68:	b214      	sxth	r4, r2
 8017a6a:	bfb8      	it	lt
 8017a6c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017a70:	428c      	cmp	r4, r1
 8017a72:	bfc4      	itt	gt
 8017a74:	eba2 0801 	subgt.w	r8, r2, r1
 8017a78:	fa0f f888 	sxthgt.w	r8, r8
 8017a7c:	4543      	cmp	r3, r8
 8017a7e:	bfbc      	itt	lt
 8017a80:	fa0f fa80 	sxthlt.w	sl, r0
 8017a84:	4643      	movlt	r3, r8
 8017a86:	e7aa      	b.n	80179de <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08017a88 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017a88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a90:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017a92:	4604      	mov	r4, r0
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d018      	beq.n	8017aca <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 8017a98:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017a9c:	4628      	mov	r0, r5
 8017a9e:	f7f7 fab3 	bl	800f008 <_ZNK8touchgfx9TypedText7getFontEv>
 8017aa2:	6803      	ldr	r3, [r0, #0]
 8017aa4:	4606      	mov	r6, r0
 8017aa6:	4628      	mov	r0, r5
 8017aa8:	69df      	ldr	r7, [r3, #28]
 8017aaa:	f7f7 fac9 	bl	800f040 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017aae:	4680      	mov	r8, r0
 8017ab0:	4628      	mov	r0, r5
 8017ab2:	f7f8 fdc3 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	4602      	mov	r2, r0
 8017aba:	4641      	mov	r1, r8
 8017abc:	9300      	str	r3, [sp, #0]
 8017abe:	4630      	mov	r0, r6
 8017ac0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ac2:	47b8      	blx	r7
 8017ac4:	b002      	add	sp, #8
 8017ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017aca:	2000      	movs	r0, #0
 8017acc:	e7fa      	b.n	8017ac4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

08017ace <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017ace:	b570      	push	{r4, r5, r6, lr}
 8017ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ad4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017ad6:	4604      	mov	r4, r0
 8017ad8:	429a      	cmp	r2, r3
 8017ada:	d00c      	beq.n	8017af6 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8017adc:	f850 3b26 	ldr.w	r3, [r0], #38
 8017ae0:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017ae2:	f7f8 fdab 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8017ae6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017ae8:	4601      	mov	r1, r0
 8017aea:	46ac      	mov	ip, r5
 8017aec:	4620      	mov	r0, r4
 8017aee:	2300      	movs	r3, #0
 8017af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017af4:	4760      	bx	ip
 8017af6:	2000      	movs	r0, #0
 8017af8:	bd70      	pop	{r4, r5, r6, pc}
	...

08017afc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8017afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b04:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017b06:	b08d      	sub	sp, #52	; 0x34
 8017b08:	4604      	mov	r4, r0
 8017b0a:	429e      	cmp	r6, r3
 8017b0c:	460f      	mov	r7, r1
 8017b0e:	d048      	beq.n	8017ba2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017b10:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017b14:	4628      	mov	r0, r5
 8017b16:	f7f7 fa77 	bl	800f008 <_ZNK8touchgfx9TypedText7getFontEv>
 8017b1a:	4680      	mov	r8, r0
 8017b1c:	2800      	cmp	r0, #0
 8017b1e:	d040      	beq.n	8017ba2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017b20:	4628      	mov	r0, r5
 8017b22:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017b26:	f7f7 faa3 	bl	800f070 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017b2a:	4b1f      	ldr	r3, [pc, #124]	; (8017ba8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8017b2c:	4628      	mov	r0, r5
 8017b2e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017b38:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8017b3c:	785e      	ldrb	r6, [r3, #1]
 8017b3e:	f7f7 fa7f 	bl	800f040 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017b42:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017b46:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8017b4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017b4c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8017b50:	f88d 6020 	strb.w	r6, [sp, #32]
 8017b54:	ae05      	add	r6, sp, #20
 8017b56:	9309      	str	r3, [sp, #36]	; 0x24
 8017b58:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8017b5c:	f8cd 801c 	str.w	r8, [sp, #28]
 8017b60:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017b64:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017b68:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017b6c:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017b70:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017b74:	f7f7 fe28 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 8017b78:	4621      	mov	r1, r4
 8017b7a:	4680      	mov	r8, r0
 8017b7c:	4630      	mov	r0, r6
 8017b7e:	f001 fd98 	bl	80196b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b82:	4628      	mov	r0, r5
 8017b84:	f7f8 fd5a 	bl	801063c <_ZNK8touchgfx9TypedText7getTextEv>
 8017b88:	2300      	movs	r3, #0
 8017b8a:	9303      	str	r3, [sp, #12]
 8017b8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b8e:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8017b92:	ab07      	add	r3, sp, #28
 8017b94:	4640      	mov	r0, r8
 8017b96:	9300      	str	r3, [sp, #0]
 8017b98:	463b      	mov	r3, r7
 8017b9a:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017b9e:	f000 faa9 	bl	80180f4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017ba2:	b00d      	add	sp, #52	; 0x34
 8017ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ba8:	2000bd58 	.word	0x2000bd58

08017bac <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8017bac:	b570      	push	{r4, r5, r6, lr}
 8017bae:	4605      	mov	r5, r0
 8017bb0:	880b      	ldrh	r3, [r1, #0]
 8017bb2:	4604      	mov	r4, r0
 8017bb4:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017bb6:	f855 3b26 	ldr.w	r3, [r5], #38
 8017bba:	4628      	mov	r0, r5
 8017bbc:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8017bbe:	f003 fb45 	bl	801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017bc2:	b201      	sxth	r1, r0
 8017bc4:	4620      	mov	r0, r4
 8017bc6:	47b0      	blx	r6
 8017bc8:	6823      	ldr	r3, [r4, #0]
 8017bca:	4628      	mov	r0, r5
 8017bcc:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8017bce:	f003 fb77 	bl	801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017bd2:	b201      	sxth	r1, r0
 8017bd4:	4620      	mov	r0, r4
 8017bd6:	47b0      	blx	r6
 8017bd8:	4628      	mov	r0, r5
 8017bda:	f003 fc05 	bl	801b3e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8017bde:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8017be2:	bd70      	pop	{r4, r5, r6, pc}

08017be4 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8017be4:	b510      	push	{r4, lr}
 8017be6:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017bea:	4604      	mov	r4, r0
 8017bec:	2bff      	cmp	r3, #255	; 0xff
 8017bee:	d006      	beq.n	8017bfe <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	8003      	strh	r3, [r0, #0]
 8017bf4:	8043      	strh	r3, [r0, #2]
 8017bf6:	8083      	strh	r3, [r0, #4]
 8017bf8:	80c3      	strh	r3, [r0, #6]
 8017bfa:	4620      	mov	r0, r4
 8017bfc:	bd10      	pop	{r4, pc}
 8017bfe:	3126      	adds	r1, #38	; 0x26
 8017c00:	f003 fb98 	bl	801b334 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017c04:	e7f9      	b.n	8017bfa <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08017c08 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c0c:	4604      	mov	r4, r0
 8017c0e:	b088      	sub	sp, #32
 8017c10:	2500      	movs	r5, #0
 8017c12:	460f      	mov	r7, r1
 8017c14:	f854 3b26 	ldr.w	r3, [r4], #38
 8017c18:	a904      	add	r1, sp, #16
 8017c1a:	4606      	mov	r6, r0
 8017c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017c22:	4798      	blx	r3
 8017c24:	4620      	mov	r0, r4
 8017c26:	f003 fb11 	bl	801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017c2a:	4680      	mov	r8, r0
 8017c2c:	4620      	mov	r0, r4
 8017c2e:	f003 fb47 	bl	801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017c32:	9506      	str	r5, [sp, #24]
 8017c34:	ad06      	add	r5, sp, #24
 8017c36:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017c3a:	4639      	mov	r1, r7
 8017c3c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017c40:	4628      	mov	r0, r5
 8017c42:	f7fd fef5 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 8017c46:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017c4a:	b1c3      	cbz	r3, 8017c7e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017c4c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017c50:	b1ab      	cbz	r3, 8017c7e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017c52:	4b0c      	ldr	r3, [pc, #48]	; (8017c84 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017c5a:	b10a      	cbz	r2, 8017c60 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8017c5c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017c5e:	b900      	cbnz	r0, 8017c62 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 8017c60:	6898      	ldr	r0, [r3, #8]
 8017c62:	2701      	movs	r7, #1
 8017c64:	6801      	ldr	r1, [r0, #0]
 8017c66:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8017c6a:	9702      	str	r7, [sp, #8]
 8017c6c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8017c70:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017c74:	e9cd 5600 	strd	r5, r6, [sp]
 8017c78:	68cd      	ldr	r5, [r1, #12]
 8017c7a:	4621      	mov	r1, r4
 8017c7c:	47a8      	blx	r5
 8017c7e:	b008      	add	sp, #32
 8017c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c84:	2000bcc8 	.word	0x2000bcc8

08017c88 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017c88:	4b02      	ldr	r3, [pc, #8]	; (8017c94 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017c8a:	6018      	str	r0, [r3, #0]
 8017c8c:	4b02      	ldr	r3, [pc, #8]	; (8017c98 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017c8e:	6019      	str	r1, [r3, #0]
 8017c90:	4770      	bx	lr
 8017c92:	bf00      	nop
 8017c94:	2000bcd0 	.word	0x2000bcd0
 8017c98:	2000bce4 	.word	0x2000bce4

08017c9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8017c9c:	b538      	push	{r3, r4, r5, lr}
 8017c9e:	4c2b      	ldr	r4, [pc, #172]	; (8017d4c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8017ca0:	4b2b      	ldr	r3, [pc, #172]	; (8017d50 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8017ca2:	6821      	ldr	r1, [r4, #0]
 8017ca4:	681a      	ldr	r2, [r3, #0]
 8017ca6:	4281      	cmp	r1, r0
 8017ca8:	4d2a      	ldr	r5, [pc, #168]	; (8017d54 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8017caa:	492b      	ldr	r1, [pc, #172]	; (8017d58 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8017cac:	d108      	bne.n	8017cc0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017cae:	682b      	ldr	r3, [r5, #0]
 8017cb0:	4293      	cmp	r3, r2
 8017cb2:	d105      	bne.n	8017cc0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017cb4:	6808      	ldr	r0, [r1, #0]
 8017cb6:	280f      	cmp	r0, #15
 8017cb8:	bf94      	ite	ls
 8017cba:	2000      	movls	r0, #0
 8017cbc:	2001      	movhi	r0, #1
 8017cbe:	bd38      	pop	{r3, r4, r5, pc}
 8017cc0:	4b26      	ldr	r3, [pc, #152]	; (8017d5c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8017cc2:	6020      	str	r0, [r4, #0]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	602a      	str	r2, [r5, #0]
 8017cc8:	4298      	cmp	r0, r3
 8017cca:	d905      	bls.n	8017cd8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8017ccc:	4b24      	ldr	r3, [pc, #144]	; (8017d60 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017cce:	2137      	movs	r1, #55	; 0x37
 8017cd0:	4a24      	ldr	r2, [pc, #144]	; (8017d64 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017cd2:	4825      	ldr	r0, [pc, #148]	; (8017d68 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8017cd4:	f00d f80c 	bl	8024cf0 <__assert_func>
 8017cd8:	f010 0403 	ands.w	r4, r0, #3
 8017cdc:	bf1f      	itttt	ne
 8017cde:	f1c4 0504 	rsbne	r5, r4, #4
 8017ce2:	3b04      	subne	r3, #4
 8017ce4:	1952      	addne	r2, r2, r5
 8017ce6:	191b      	addne	r3, r3, r4
 8017ce8:	4d20      	ldr	r5, [pc, #128]	; (8017d6c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8017cea:	4402      	add	r2, r0
 8017cec:	1a1b      	subs	r3, r3, r0
 8017cee:	3001      	adds	r0, #1
 8017cf0:	602a      	str	r2, [r5, #0]
 8017cf2:	f020 0401 	bic.w	r4, r0, #1
 8017cf6:	42a3      	cmp	r3, r4
 8017cf8:	d203      	bcs.n	8017d02 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8017cfa:	4b19      	ldr	r3, [pc, #100]	; (8017d60 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017cfc:	214a      	movs	r1, #74	; 0x4a
 8017cfe:	4a19      	ldr	r2, [pc, #100]	; (8017d64 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017d00:	e7e7      	b.n	8017cd2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017d02:	f010 0002 	ands.w	r0, r0, #2
 8017d06:	bf1f      	itttt	ne
 8017d08:	f1c0 0504 	rsbne	r5, r0, #4
 8017d0c:	1952      	addne	r2, r2, r5
 8017d0e:	1f05      	subne	r5, r0, #4
 8017d10:	195b      	addne	r3, r3, r5
 8017d12:	4422      	add	r2, r4
 8017d14:	4d16      	ldr	r5, [pc, #88]	; (8017d70 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8017d16:	1b1b      	subs	r3, r3, r4
 8017d18:	602a      	str	r2, [r5, #0]
 8017d1a:	429c      	cmp	r4, r3
 8017d1c:	d903      	bls.n	8017d26 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8017d1e:	4b10      	ldr	r3, [pc, #64]	; (8017d60 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017d20:	215d      	movs	r1, #93	; 0x5d
 8017d22:	4a10      	ldr	r2, [pc, #64]	; (8017d64 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017d24:	e7d5      	b.n	8017cd2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017d26:	b120      	cbz	r0, 8017d32 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017d28:	f1c0 0504 	rsb	r5, r0, #4
 8017d2c:	3804      	subs	r0, #4
 8017d2e:	442a      	add	r2, r5
 8017d30:	4403      	add	r3, r0
 8017d32:	1b1b      	subs	r3, r3, r4
 8017d34:	4422      	add	r2, r4
 8017d36:	480f      	ldr	r0, [pc, #60]	; (8017d74 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017d38:	2b0f      	cmp	r3, #15
 8017d3a:	600b      	str	r3, [r1, #0]
 8017d3c:	6002      	str	r2, [r0, #0]
 8017d3e:	d803      	bhi.n	8017d48 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017d40:	4b0d      	ldr	r3, [pc, #52]	; (8017d78 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8017d42:	2170      	movs	r1, #112	; 0x70
 8017d44:	4a07      	ldr	r2, [pc, #28]	; (8017d64 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017d46:	e7c4      	b.n	8017cd2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017d48:	2001      	movs	r0, #1
 8017d4a:	e7b8      	b.n	8017cbe <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8017d4c:	2000bcd8 	.word	0x2000bcd8
 8017d50:	2000bcd0 	.word	0x2000bcd0
 8017d54:	2000bce0 	.word	0x2000bce0
 8017d58:	2000bce8 	.word	0x2000bce8
 8017d5c:	2000bce4 	.word	0x2000bce4
 8017d60:	08028484 	.word	0x08028484
 8017d64:	0802854c 	.word	0x0802854c
 8017d68:	080284bd 	.word	0x080284bd
 8017d6c:	2000bcec 	.word	0x2000bcec
 8017d70:	2000bcdc 	.word	0x2000bcdc
 8017d74:	2000bcd4 	.word	0x2000bcd4
 8017d78:	08028507 	.word	0x08028507

08017d7c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8017d7c:	4b04      	ldr	r3, [pc, #16]	; (8017d90 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8017d7e:	6818      	ldr	r0, [r3, #0]
 8017d80:	b120      	cbz	r0, 8017d8c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8017d82:	4b04      	ldr	r3, [pc, #16]	; (8017d94 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8017d84:	6818      	ldr	r0, [r3, #0]
 8017d86:	3000      	adds	r0, #0
 8017d88:	bf18      	it	ne
 8017d8a:	2001      	movne	r0, #1
 8017d8c:	4770      	bx	lr
 8017d8e:	bf00      	nop
 8017d90:	2000bcd0 	.word	0x2000bcd0
 8017d94:	2000bce4 	.word	0x2000bce4

08017d98 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8017d98:	4b01      	ldr	r3, [pc, #4]	; (8017da0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8017d9a:	6818      	ldr	r0, [r3, #0]
 8017d9c:	4770      	bx	lr
 8017d9e:	bf00      	nop
 8017da0:	2000bcd8 	.word	0x2000bcd8

08017da4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8017da4:	4b01      	ldr	r3, [pc, #4]	; (8017dac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8017da6:	6818      	ldr	r0, [r3, #0]
 8017da8:	4770      	bx	lr
 8017daa:	bf00      	nop
 8017dac:	2000bce0 	.word	0x2000bce0

08017db0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8017db0:	4b01      	ldr	r3, [pc, #4]	; (8017db8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8017db2:	6818      	ldr	r0, [r3, #0]
 8017db4:	4770      	bx	lr
 8017db6:	bf00      	nop
 8017db8:	2000bcec 	.word	0x2000bcec

08017dbc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8017dbc:	4b01      	ldr	r3, [pc, #4]	; (8017dc4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8017dbe:	6818      	ldr	r0, [r3, #0]
 8017dc0:	4770      	bx	lr
 8017dc2:	bf00      	nop
 8017dc4:	2000bcdc 	.word	0x2000bcdc

08017dc8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017dc8:	4b01      	ldr	r3, [pc, #4]	; (8017dd0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8017dca:	6818      	ldr	r0, [r3, #0]
 8017dcc:	4770      	bx	lr
 8017dce:	bf00      	nop
 8017dd0:	2000bcd4 	.word	0x2000bcd4

08017dd4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8017dd4:	4b01      	ldr	r3, [pc, #4]	; (8017ddc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8017dd6:	6818      	ldr	r0, [r3, #0]
 8017dd8:	4770      	bx	lr
 8017dda:	bf00      	nop
 8017ddc:	2000bce8 	.word	0x2000bce8

08017de0 <_ZN8touchgfx3LCD4initEv>:
 8017de0:	4770      	bx	lr

08017de2 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017de2:	2000      	movs	r0, #0
 8017de4:	4770      	bx	lr

08017de6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017de6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dea:	b091      	sub	sp, #68	; 0x44
 8017dec:	4699      	mov	r9, r3
 8017dee:	4617      	mov	r7, r2
 8017df0:	2500      	movs	r5, #0
 8017df2:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8017df6:	4680      	mov	r8, r0
 8017df8:	a80e      	add	r0, sp, #56	; 0x38
 8017dfa:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8017dfc:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8017e00:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8017e04:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017e08:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017e0c:	910d      	str	r1, [sp, #52]	; 0x34
 8017e0e:	950e      	str	r5, [sp, #56]	; 0x38
 8017e10:	f000 fe3a 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017e14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017e16:	f8d9 6000 	ldr.w	r6, [r9]
 8017e1a:	6818      	ldr	r0, [r3, #0]
 8017e1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017e1e:	f9b4 b000 	ldrsh.w	fp, [r4]
 8017e22:	1b80      	subs	r0, r0, r6
 8017e24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017e28:	eb02 0c06 	add.w	ip, r2, r6
 8017e2c:	ebab 0e0c 	sub.w	lr, fp, ip
 8017e30:	4570      	cmp	r0, lr
 8017e32:	f340 80bc 	ble.w	8017fae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017e36:	88a1      	ldrh	r1, [r4, #4]
 8017e38:	4459      	add	r1, fp
 8017e3a:	b209      	sxth	r1, r1
 8017e3c:	458c      	cmp	ip, r1
 8017e3e:	f300 80b6 	bgt.w	8017fae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017e42:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8017e46:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8017e4a:	4283      	cmp	r3, r0
 8017e4c:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8017e50:	edd9 6a07 	vldr	s13, [r9, #28]
 8017e54:	bfa8      	it	ge
 8017e56:	4603      	movge	r3, r0
 8017e58:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8017e5c:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8017e60:	45e3      	cmp	fp, ip
 8017e62:	ee07 3a90 	vmov	s15, r3
 8017e66:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017e6a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8017e6e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017e72:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017e76:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017e7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017e7e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017e82:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017e86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017e8a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017e8e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017e92:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017e96:	f340 808d 	ble.w	8017fb4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8017e9a:	fb9e f5f3 	sdiv	r5, lr, r3
 8017e9e:	ee07 5a10 	vmov	s14, r5
 8017ea2:	2d00      	cmp	r5, #0
 8017ea4:	fb03 e415 	mls	r4, r3, r5, lr
 8017ea8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017eac:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017eb0:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017eb4:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017eb8:	dd12      	ble.n	8017ee0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8017eba:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017ebe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017ec2:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017ec6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ece:	bf14      	ite	ne
 8017ed0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017ed4:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017ed8:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017edc:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017ee0:	fb05 f703 	mul.w	r7, r5, r3
 8017ee4:	1bc0      	subs	r0, r0, r7
 8017ee6:	443e      	add	r6, r7
 8017ee8:	1997      	adds	r7, r2, r6
 8017eea:	4407      	add	r7, r0
 8017eec:	42b9      	cmp	r1, r7
 8017eee:	bfbc      	itt	lt
 8017ef0:	1a88      	sublt	r0, r1, r2
 8017ef2:	1b80      	sublt	r0, r0, r6
 8017ef4:	2800      	cmp	r0, #0
 8017ef6:	dd5a      	ble.n	8017fae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017ef8:	fb90 f1f3 	sdiv	r1, r0, r3
 8017efc:	fb03 0211 	mls	r2, r3, r1, r0
 8017f00:	b90a      	cbnz	r2, 8017f06 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8017f02:	3901      	subs	r1, #1
 8017f04:	461a      	mov	r2, r3
 8017f06:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017f0a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8017f0e:	44a4      	add	ip, r4
 8017f10:	2900      	cmp	r1, #0
 8017f12:	bfcc      	ite	gt
 8017f14:	469e      	movgt	lr, r3
 8017f16:	4696      	movle	lr, r2
 8017f18:	fb03 c505 	mla	r5, r3, r5, ip
 8017f1c:	eef0 6a42 	vmov.f32	s13, s4
 8017f20:	eeb0 7a61 	vmov.f32	s14, s3
 8017f24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017f28:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017f2c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017f30:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017f34:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017f38:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017f3c:	ee17 0a90 	vmov	r0, s15
 8017f40:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017f44:	fb90 f6f3 	sdiv	r6, r0, r3
 8017f48:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017f4c:	ee17 0a90 	vmov	r0, s15
 8017f50:	fb90 f7f3 	sdiv	r7, r0, r3
 8017f54:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017f58:	f8d0 8000 	ldr.w	r8, [r0]
 8017f5c:	900c      	str	r0, [sp, #48]	; 0x30
 8017f5e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017f60:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017f64:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8017f68:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017f6c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8017f70:	f8cd a020 	str.w	sl, [sp, #32]
 8017f74:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8017f78:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017f7a:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8017f7e:	9603      	str	r6, [sp, #12]
 8017f80:	44ca      	add	sl, r9
 8017f82:	9506      	str	r5, [sp, #24]
 8017f84:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8017f88:	ee16 0a90 	vmov	r0, s13
 8017f8c:	f8cd a01c 	str.w	sl, [sp, #28]
 8017f90:	fb07 0704 	mla	r7, r7, r4, r0
 8017f94:	ee17 0a10 	vmov	r0, s14
 8017f98:	fb06 0604 	mla	r6, r6, r4, r0
 8017f9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017f9e:	9702      	str	r7, [sp, #8]
 8017fa0:	e9cd 3600 	strd	r3, r6, [sp]
 8017fa4:	ebae 0304 	sub.w	r3, lr, r4
 8017fa8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017fac:	47a8      	blx	r5
 8017fae:	b011      	add	sp, #68	; 0x44
 8017fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fb4:	462c      	mov	r4, r5
 8017fb6:	e797      	b.n	8017ee8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08017fb8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017fb8:	b570      	push	{r4, r5, r6, lr}
 8017fba:	4604      	mov	r4, r0
 8017fbc:	2500      	movs	r5, #0
 8017fbe:	9804      	ldr	r0, [sp, #16]
 8017fc0:	7223      	strb	r3, [r4, #8]
 8017fc2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017fc6:	8025      	strh	r5, [r4, #0]
 8017fc8:	6061      	str	r1, [r4, #4]
 8017fca:	7263      	strb	r3, [r4, #9]
 8017fcc:	60e0      	str	r0, [r4, #12]
 8017fce:	8222      	strh	r2, [r4, #16]
 8017fd0:	8265      	strh	r5, [r4, #18]
 8017fd2:	82a5      	strh	r5, [r4, #20]
 8017fd4:	82e5      	strh	r5, [r4, #22]
 8017fd6:	8325      	strh	r5, [r4, #24]
 8017fd8:	8365      	strh	r5, [r4, #26]
 8017fda:	83a5      	strh	r5, [r4, #28]
 8017fdc:	77a5      	strb	r5, [r4, #30]
 8017fde:	6803      	ldr	r3, [r0, #0]
 8017fe0:	695b      	ldr	r3, [r3, #20]
 8017fe2:	4798      	blx	r3
 8017fe4:	4606      	mov	r6, r0
 8017fe6:	b1f8      	cbz	r0, 8018028 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017fe8:	68e0      	ldr	r0, [r4, #12]
 8017fea:	4631      	mov	r1, r6
 8017fec:	6803      	ldr	r3, [r0, #0]
 8017fee:	68db      	ldr	r3, [r3, #12]
 8017ff0:	4798      	blx	r3
 8017ff2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8017ff6:	4605      	mov	r5, r0
 8017ff8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017ffc:	7a83      	ldrb	r3, [r0, #10]
 8017ffe:	4313      	orrs	r3, r2
 8018000:	83a3      	strh	r3, [r4, #28]
 8018002:	7a63      	ldrb	r3, [r4, #9]
 8018004:	2b04      	cmp	r3, #4
 8018006:	d10f      	bne.n	8018028 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8018008:	68e0      	ldr	r0, [r4, #12]
 801800a:	462a      	mov	r2, r5
 801800c:	4631      	mov	r1, r6
 801800e:	6803      	ldr	r3, [r0, #0]
 8018010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018012:	4798      	blx	r3
 8018014:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8018018:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801801c:	7aab      	ldrb	r3, [r5, #10]
 801801e:	4313      	orrs	r3, r2
 8018020:	4418      	add	r0, r3
 8018022:	8ba3      	ldrh	r3, [r4, #28]
 8018024:	4418      	add	r0, r3
 8018026:	83a0      	strh	r0, [r4, #28]
 8018028:	4620      	mov	r0, r4
 801802a:	bd70      	pop	{r4, r5, r6, pc}

0801802c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801802c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018030:	2400      	movs	r4, #0
 8018032:	b085      	sub	sp, #20
 8018034:	4681      	mov	r9, r0
 8018036:	460f      	mov	r7, r1
 8018038:	4692      	mov	sl, r2
 801803a:	469b      	mov	fp, r3
 801803c:	46a0      	mov	r8, r4
 801803e:	4626      	mov	r6, r4
 8018040:	4554      	cmp	r4, sl
 8018042:	da21      	bge.n	8018088 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8018044:	2300      	movs	r3, #0
 8018046:	463a      	mov	r2, r7
 8018048:	4659      	mov	r1, fp
 801804a:	4648      	mov	r0, r9
 801804c:	9303      	str	r3, [sp, #12]
 801804e:	ab03      	add	r3, sp, #12
 8018050:	f002 fb52 	bl	801a6f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018054:	4605      	mov	r5, r0
 8018056:	b1b8      	cbz	r0, 8018088 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8018058:	280a      	cmp	r0, #10
 801805a:	d015      	beq.n	8018088 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801805c:	9a03      	ldr	r2, [sp, #12]
 801805e:	b182      	cbz	r2, 8018082 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8018060:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8018064:	4641      	mov	r1, r8
 8018066:	7a93      	ldrb	r3, [r2, #10]
 8018068:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801806c:	8895      	ldrh	r5, [r2, #4]
 801806e:	4303      	orrs	r3, r0
 8018070:	4638      	mov	r0, r7
 8018072:	9301      	str	r3, [sp, #4]
 8018074:	683b      	ldr	r3, [r7, #0]
 8018076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018078:	4798      	blx	r3
 801807a:	9b01      	ldr	r3, [sp, #4]
 801807c:	4418      	add	r0, r3
 801807e:	4406      	add	r6, r0
 8018080:	b2b6      	uxth	r6, r6
 8018082:	3401      	adds	r4, #1
 8018084:	46a8      	mov	r8, r5
 8018086:	e7db      	b.n	8018040 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8018088:	4630      	mov	r0, r6
 801808a:	b005      	add	sp, #20
 801808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018090 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8018090:	2a02      	cmp	r2, #2
 8018092:	b530      	push	{r4, r5, lr}
 8018094:	d011      	beq.n	80180ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018096:	2a03      	cmp	r2, #3
 8018098:	d01c      	beq.n	80180d4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801809a:	2a01      	cmp	r2, #1
 801809c:	d10c      	bne.n	80180b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801809e:	888b      	ldrh	r3, [r1, #4]
 80180a0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80180a4:	8801      	ldrh	r1, [r0, #0]
 80180a6:	1a9b      	subs	r3, r3, r2
 80180a8:	8844      	ldrh	r4, [r0, #2]
 80180aa:	1a5b      	subs	r3, r3, r1
 80180ac:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80180b0:	8004      	strh	r4, [r0, #0]
 80180b2:	8043      	strh	r3, [r0, #2]
 80180b4:	8081      	strh	r1, [r0, #4]
 80180b6:	80c2      	strh	r2, [r0, #6]
 80180b8:	bd30      	pop	{r4, r5, pc}
 80180ba:	88cb      	ldrh	r3, [r1, #6]
 80180bc:	88c2      	ldrh	r2, [r0, #6]
 80180be:	1a9b      	subs	r3, r3, r2
 80180c0:	8842      	ldrh	r2, [r0, #2]
 80180c2:	1a9b      	subs	r3, r3, r2
 80180c4:	888a      	ldrh	r2, [r1, #4]
 80180c6:	8881      	ldrh	r1, [r0, #4]
 80180c8:	8043      	strh	r3, [r0, #2]
 80180ca:	1a52      	subs	r2, r2, r1
 80180cc:	8801      	ldrh	r1, [r0, #0]
 80180ce:	1a52      	subs	r2, r2, r1
 80180d0:	8002      	strh	r2, [r0, #0]
 80180d2:	e7f1      	b.n	80180b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80180d4:	88cb      	ldrh	r3, [r1, #6]
 80180d6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80180da:	8841      	ldrh	r1, [r0, #2]
 80180dc:	1a9b      	subs	r3, r3, r2
 80180de:	f9b0 5000 	ldrsh.w	r5, [r0]
 80180e2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80180e6:	1a5b      	subs	r3, r3, r1
 80180e8:	8045      	strh	r5, [r0, #2]
 80180ea:	8082      	strh	r2, [r0, #4]
 80180ec:	8003      	strh	r3, [r0, #0]
 80180ee:	80c4      	strh	r4, [r0, #6]
 80180f0:	e7e2      	b.n	80180b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

080180f4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 80180f4:	b570      	push	{r4, r5, r6, lr}
 80180f6:	b086      	sub	sp, #24
 80180f8:	ac02      	add	r4, sp, #8
 80180fa:	e884 0006 	stmia.w	r4, {r1, r2}
 80180fe:	461a      	mov	r2, r3
 8018100:	ab0c      	add	r3, sp, #48	; 0x30
 8018102:	9305      	str	r3, [sp, #20]
 8018104:	4b0a      	ldr	r3, [pc, #40]	; (8018130 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8018106:	685d      	ldr	r5, [r3, #4]
 8018108:	1069      	asrs	r1, r5, #1
 801810a:	07ed      	lsls	r5, r5, #31
 801810c:	eb00 0601 	add.w	r6, r0, r1
 8018110:	bf46      	itte	mi
 8018112:	681b      	ldrmi	r3, [r3, #0]
 8018114:	5841      	ldrmi	r1, [r0, r1]
 8018116:	681d      	ldrpl	r5, [r3, #0]
 8018118:	4630      	mov	r0, r6
 801811a:	bf48      	it	mi
 801811c:	58cd      	ldrmi	r5, [r1, r3]
 801811e:	4621      	mov	r1, r4
 8018120:	9b05      	ldr	r3, [sp, #20]
 8018122:	9301      	str	r3, [sp, #4]
 8018124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018126:	9300      	str	r3, [sp, #0]
 8018128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801812a:	47a8      	blx	r5
 801812c:	b006      	add	sp, #24
 801812e:	bd70      	pop	{r4, r5, r6, pc}
 8018130:	20000030 	.word	0x20000030

08018134 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018138:	b09d      	sub	sp, #116	; 0x74
 801813a:	9114      	str	r1, [sp, #80]	; 0x50
 801813c:	9315      	str	r3, [sp, #84]	; 0x54
 801813e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018140:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018142:	8809      	ldrh	r1, [r1, #0]
 8018144:	889b      	ldrh	r3, [r3, #4]
 8018146:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8018148:	440b      	add	r3, r1
 801814a:	9210      	str	r2, [sp, #64]	; 0x40
 801814c:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8018150:	b21b      	sxth	r3, r3
 8018152:	900f      	str	r0, [sp, #60]	; 0x3c
 8018154:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8018158:	930e      	str	r3, [sp, #56]	; 0x38
 801815a:	6833      	ldr	r3, [r6, #0]
 801815c:	7a59      	ldrb	r1, [r3, #9]
 801815e:	7a1b      	ldrb	r3, [r3, #8]
 8018160:	9113      	str	r1, [sp, #76]	; 0x4c
 8018162:	9312      	str	r3, [sp, #72]	; 0x48
 8018164:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018166:	f9b3 4000 	ldrsh.w	r4, [r3]
 801816a:	2a00      	cmp	r2, #0
 801816c:	d059      	beq.n	8018222 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801816e:	7c33      	ldrb	r3, [r6, #16]
 8018170:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018172:	2b04      	cmp	r3, #4
 8018174:	bf14      	ite	ne
 8018176:	2301      	movne	r3, #1
 8018178:	2302      	moveq	r3, #2
 801817a:	4413      	add	r3, r2
 801817c:	f04f 0800 	mov.w	r8, #0
 8018180:	930d      	str	r3, [sp, #52]	; 0x34
 8018182:	4645      	mov	r5, r8
 8018184:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8018188:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801818c:	4293      	cmp	r3, r2
 801818e:	da75      	bge.n	801827c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8018190:	2300      	movs	r3, #0
 8018192:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018194:	6832      	ldr	r2, [r6, #0]
 8018196:	931a      	str	r3, [sp, #104]	; 0x68
 8018198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801819a:	428b      	cmp	r3, r1
 801819c:	db43      	blt.n	8018226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 801819e:	6813      	ldr	r3, [r2, #0]
 80181a0:	4610      	mov	r0, r2
 80181a2:	695b      	ldr	r3, [r3, #20]
 80181a4:	4798      	blx	r3
 80181a6:	4681      	mov	r9, r0
 80181a8:	6830      	ldr	r0, [r6, #0]
 80181aa:	aa1b      	add	r2, sp, #108	; 0x6c
 80181ac:	4649      	mov	r1, r9
 80181ae:	6803      	ldr	r3, [r0, #0]
 80181b0:	689f      	ldr	r7, [r3, #8]
 80181b2:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80181b6:	47b8      	blx	r7
 80181b8:	901a      	str	r0, [sp, #104]	; 0x68
 80181ba:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 80181be:	45d1      	cmp	r9, sl
 80181c0:	d045      	beq.n	801824e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80181c2:	f242 070b 	movw	r7, #8203	; 0x200b
 80181c6:	45b9      	cmp	r9, r7
 80181c8:	d041      	beq.n	801824e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80181ca:	f1b9 0f00 	cmp.w	r9, #0
 80181ce:	f000 80ee 	beq.w	80183ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80181d2:	f1b9 0f0a 	cmp.w	r9, #10
 80181d6:	d057      	beq.n	8018288 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80181d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80181da:	b383      	cbz	r3, 801823e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 80181dc:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80181e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80181e2:	2a00      	cmp	r2, #0
 80181e4:	f000 80d2 	beq.w	801838c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 80181e8:	f1bb 0f00 	cmp.w	fp, #0
 80181ec:	d100      	bne.n	80181f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 80181ee:	4444      	add	r4, r8
 80181f0:	f992 800d 	ldrsb.w	r8, [r2, #13]
 80181f4:	f1bb 0f01 	cmp.w	fp, #1
 80181f8:	f408 7380 	and.w	r3, r8, #256	; 0x100
 80181fc:	f892 800a 	ldrb.w	r8, [r2, #10]
 8018200:	ea48 0803 	orr.w	r8, r8, r3
 8018204:	d128      	bne.n	8018258 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8018206:	eba4 0408 	sub.w	r4, r4, r8
 801820a:	2d00      	cmp	r5, #0
 801820c:	d143      	bne.n	8018296 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801820e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018210:	eb08 0304 	add.w	r3, r8, r4
 8018214:	4413      	add	r3, r2
 8018216:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018218:	f9b2 2000 	ldrsh.w	r2, [r2]
 801821c:	4293      	cmp	r3, r2
 801821e:	da44      	bge.n	80182aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018220:	e02b      	b.n	801827a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8018222:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018224:	e7aa      	b.n	801817c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8018226:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801822a:	4659      	mov	r1, fp
 801822c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801822e:	9301      	str	r3, [sp, #4]
 8018230:	ab1b      	add	r3, sp, #108	; 0x6c
 8018232:	9300      	str	r3, [sp, #0]
 8018234:	ab1a      	add	r3, sp, #104	; 0x68
 8018236:	f002 fa93 	bl	801a760 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801823a:	4681      	mov	r9, r0
 801823c:	e7bd      	b.n	80181ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801823e:	6830      	ldr	r0, [r6, #0]
 8018240:	6803      	ldr	r3, [r0, #0]
 8018242:	691b      	ldr	r3, [r3, #16]
 8018244:	4798      	blx	r3
 8018246:	4550      	cmp	r0, sl
 8018248:	d001      	beq.n	801824e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801824a:	42b8      	cmp	r0, r7
 801824c:	d1c8      	bne.n	80181e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801824e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018250:	464d      	mov	r5, r9
 8018252:	3301      	adds	r3, #1
 8018254:	930c      	str	r3, [sp, #48]	; 0x30
 8018256:	e797      	b.n	8018188 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8018258:	2d00      	cmp	r5, #0
 801825a:	f000 80aa 	beq.w	80183b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801825e:	f1bb 0f00 	cmp.w	fp, #0
 8018262:	d118      	bne.n	8018296 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8018264:	6830      	ldr	r0, [r6, #0]
 8018266:	4629      	mov	r1, r5
 8018268:	6803      	ldr	r3, [r0, #0]
 801826a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801826c:	4798      	blx	r3
 801826e:	4404      	add	r4, r0
 8018270:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018274:	1ae3      	subs	r3, r4, r3
 8018276:	4293      	cmp	r3, r2
 8018278:	dd17      	ble.n	80182aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801827a:	464d      	mov	r5, r9
 801827c:	2d00      	cmp	r5, #0
 801827e:	f000 8096 	beq.w	80183ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8018282:	2d0a      	cmp	r5, #10
 8018284:	f040 8084 	bne.w	8018390 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8018288:	250a      	movs	r5, #10
 801828a:	fab5 f085 	clz	r0, r5
 801828e:	0940      	lsrs	r0, r0, #5
 8018290:	b01d      	add	sp, #116	; 0x74
 8018292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018296:	6830      	ldr	r0, [r6, #0]
 8018298:	4629      	mov	r1, r5
 801829a:	6803      	ldr	r3, [r0, #0]
 801829c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801829e:	4798      	blx	r3
 80182a0:	f1bb 0f01 	cmp.w	fp, #1
 80182a4:	eba4 0400 	sub.w	r4, r4, r0
 80182a8:	d0b1      	beq.n	801820e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80182aa:	981a      	ldr	r0, [sp, #104]	; 0x68
 80182ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80182ae:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80182b2:	f9b3 5000 	ldrsh.w	r5, [r3]
 80182b6:	7b43      	ldrb	r3, [r0, #13]
 80182b8:	4421      	add	r1, r4
 80182ba:	015b      	lsls	r3, r3, #5
 80182bc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80182c0:	7983      	ldrb	r3, [r0, #6]
 80182c2:	4313      	orrs	r3, r2
 80182c4:	440b      	add	r3, r1
 80182c6:	42ab      	cmp	r3, r5
 80182c8:	dbc1      	blt.n	801824e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80182ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182cc:	4299      	cmp	r1, r3
 80182ce:	dabe      	bge.n	801824e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80182d0:	6830      	ldr	r0, [r6, #0]
 80182d2:	42a5      	cmp	r5, r4
 80182d4:	6803      	ldr	r3, [r0, #0]
 80182d6:	bfcc      	ite	gt
 80182d8:	1b2d      	subgt	r5, r5, r4
 80182da:	2500      	movle	r5, #0
 80182dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182de:	bfc8      	it	gt
 80182e0:	b2ad      	uxthgt	r5, r5
 80182e2:	4798      	blx	r3
 80182e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80182e6:	4935      	ldr	r1, [pc, #212]	; (80183bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 80182e8:	7b5a      	ldrb	r2, [r3, #13]
 80182ea:	f893 e008 	ldrb.w	lr, [r3, #8]
 80182ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80182f2:	bf18      	it	ne
 80182f4:	468c      	movne	ip, r1
 80182f6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80182f8:	bf08      	it	eq
 80182fa:	f04f 0c00 	moveq.w	ip, #0
 80182fe:	4408      	add	r0, r1
 8018300:	00d1      	lsls	r1, r2, #3
 8018302:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018306:	ea41 070e 	orr.w	r7, r1, lr
 801830a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801830c:	ea4c 0707 	orr.w	r7, ip, r7
 8018310:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018314:	1bc7      	subs	r7, r0, r7
 8018316:	b2bf      	uxth	r7, r7
 8018318:	fa0f fa87 	sxth.w	sl, r7
 801831c:	4551      	cmp	r1, sl
 801831e:	dd33      	ble.n	8018388 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8018320:	0112      	lsls	r2, r2, #4
 8018322:	79d8      	ldrb	r0, [r3, #7]
 8018324:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018328:	4302      	orrs	r2, r0
 801832a:	4492      	add	sl, r2
 801832c:	4551      	cmp	r1, sl
 801832e:	dc8e      	bgt.n	801824e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018330:	1bcf      	subs	r7, r1, r7
 8018332:	468a      	mov	sl, r1
 8018334:	b2bf      	uxth	r7, r7
 8018336:	9317      	str	r3, [sp, #92]	; 0x5c
 8018338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801833a:	6830      	ldr	r0, [r6, #0]
 801833c:	681a      	ldr	r2, [r3, #0]
 801833e:	6801      	ldr	r1, [r0, #0]
 8018340:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8018342:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018344:	9311      	str	r3, [sp, #68]	; 0x44
 8018346:	9216      	str	r2, [sp, #88]	; 0x58
 8018348:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801834a:	4788      	blx	r1
 801834c:	79b1      	ldrb	r1, [r6, #6]
 801834e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018350:	910b      	str	r1, [sp, #44]	; 0x2c
 8018352:	7bb1      	ldrb	r1, [r6, #14]
 8018354:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018356:	910a      	str	r1, [sp, #40]	; 0x28
 8018358:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801835c:	9109      	str	r1, [sp, #36]	; 0x24
 801835e:	68b1      	ldr	r1, [r6, #8]
 8018360:	9305      	str	r3, [sp, #20]
 8018362:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018364:	9206      	str	r2, [sp, #24]
 8018366:	e9cd a501 	strd	sl, r5, [sp, #4]
 801836a:	4425      	add	r5, r4
 801836c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8018370:	b22d      	sxth	r5, r5
 8018372:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018374:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018378:	9500      	str	r5, [sp, #0]
 801837a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801837c:	681a      	ldr	r2, [r3, #0]
 801837e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018380:	685b      	ldr	r3, [r3, #4]
 8018382:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018384:	47a8      	blx	r5
 8018386:	e762      	b.n	801824e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018388:	2700      	movs	r7, #0
 801838a:	e7d4      	b.n	8018336 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 801838c:	4690      	mov	r8, r2
 801838e:	e75e      	b.n	801824e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018390:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018392:	3401      	adds	r4, #1
 8018394:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018396:	429c      	cmp	r4, r3
 8018398:	f6bf af77 	bge.w	801828a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801839c:	4659      	mov	r1, fp
 801839e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80183a0:	f002 f96a 	bl	801a678 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80183a4:	4605      	mov	r5, r0
 80183a6:	b110      	cbz	r0, 80183ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80183a8:	280a      	cmp	r0, #10
 80183aa:	d1f2      	bne.n	8018392 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 80183ac:	e76c      	b.n	8018288 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80183ae:	2500      	movs	r5, #0
 80183b0:	e76b      	b.n	801828a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 80183b2:	f1bb 0f00 	cmp.w	fp, #0
 80183b6:	f43f af5b 	beq.w	8018270 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 80183ba:	e776      	b.n	80182aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80183bc:	fffffe00 	.word	0xfffffe00

080183c0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80183c0:	b530      	push	{r4, r5, lr}
 80183c2:	8a44      	ldrh	r4, [r0, #18]
 80183c4:	8ac5      	ldrh	r5, [r0, #22]
 80183c6:	82c3      	strh	r3, [r0, #22]
 80183c8:	442c      	add	r4, r5
 80183ca:	1ae4      	subs	r4, r4, r3
 80183cc:	8b03      	ldrh	r3, [r0, #24]
 80183ce:	8244      	strh	r4, [r0, #18]
 80183d0:	8a84      	ldrh	r4, [r0, #20]
 80183d2:	4422      	add	r2, r4
 80183d4:	440c      	add	r4, r1
 80183d6:	1a59      	subs	r1, r3, r1
 80183d8:	8342      	strh	r2, [r0, #26]
 80183da:	8284      	strh	r4, [r0, #20]
 80183dc:	8301      	strh	r1, [r0, #24]
 80183de:	bd30      	pop	{r4, r5, pc}

080183e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80183e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183e4:	7a45      	ldrb	r5, [r0, #9]
 80183e6:	b085      	sub	sp, #20
 80183e8:	4604      	mov	r4, r0
 80183ea:	4689      	mov	r9, r1
 80183ec:	1eeb      	subs	r3, r5, #3
 80183ee:	b2db      	uxtb	r3, r3
 80183f0:	b329      	cbz	r1, 801843e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 80183f2:	2b01      	cmp	r3, #1
 80183f4:	d921      	bls.n	801843a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 80183f6:	1e69      	subs	r1, r5, #1
 80183f8:	f1d1 0b00 	rsbs	fp, r1, #0
 80183fc:	eb4b 0b01 	adc.w	fp, fp, r1
 8018400:	1eaa      	subs	r2, r5, #2
 8018402:	2500      	movs	r5, #0
 8018404:	4253      	negs	r3, r2
 8018406:	9500      	str	r5, [sp, #0]
 8018408:	4153      	adcs	r3, r2
 801840a:	9301      	str	r3, [sp, #4]
 801840c:	2600      	movs	r6, #0
 801840e:	f242 080b 	movw	r8, #8203	; 0x200b
 8018412:	8266      	strh	r6, [r4, #18]
 8018414:	82a6      	strh	r6, [r4, #20]
 8018416:	2300      	movs	r3, #0
 8018418:	68e2      	ldr	r2, [r4, #12]
 801841a:	7a21      	ldrb	r1, [r4, #8]
 801841c:	9303      	str	r3, [sp, #12]
 801841e:	ab03      	add	r3, sp, #12
 8018420:	6860      	ldr	r0, [r4, #4]
 8018422:	8827      	ldrh	r7, [r4, #0]
 8018424:	f002 f968 	bl	801a6f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018428:	8020      	strh	r0, [r4, #0]
 801842a:	b9b0      	cbnz	r0, 801845a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801842c:	8b22      	ldrh	r2, [r4, #24]
 801842e:	2300      	movs	r3, #0
 8018430:	4611      	mov	r1, r2
 8018432:	4620      	mov	r0, r4
 8018434:	f7ff ffc4 	bl	80183c0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018438:	e062      	b.n	8018500 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801843a:	468b      	mov	fp, r1
 801843c:	e7e0      	b.n	8018400 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801843e:	2b01      	cmp	r3, #1
 8018440:	f105 35ff 	add.w	r5, r5, #4294967295
 8018444:	9101      	str	r1, [sp, #4]
 8018446:	468b      	mov	fp, r1
 8018448:	bf8c      	ite	hi
 801844a:	2300      	movhi	r3, #0
 801844c:	2301      	movls	r3, #1
 801844e:	2d01      	cmp	r5, #1
 8018450:	9300      	str	r3, [sp, #0]
 8018452:	bf8c      	ite	hi
 8018454:	2500      	movhi	r5, #0
 8018456:	2501      	movls	r5, #1
 8018458:	e7d8      	b.n	801840c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801845a:	8ae3      	ldrh	r3, [r4, #22]
 801845c:	280a      	cmp	r0, #10
 801845e:	f103 0301 	add.w	r3, r3, #1
 8018462:	82e3      	strh	r3, [r4, #22]
 8018464:	d0e2      	beq.n	801842c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8018466:	9a03      	ldr	r2, [sp, #12]
 8018468:	b972      	cbnz	r2, 8018488 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801846a:	4540      	cmp	r0, r8
 801846c:	d1d3      	bne.n	8018416 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801846e:	8823      	ldrh	r3, [r4, #0]
 8018470:	8b21      	ldrh	r1, [r4, #24]
 8018472:	2b20      	cmp	r3, #32
 8018474:	d001      	beq.n	801847a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 8018476:	4543      	cmp	r3, r8
 8018478:	d11d      	bne.n	80184b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801847a:	2f20      	cmp	r7, #32
 801847c:	d002      	beq.n	8018484 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801847e:	4547      	cmp	r7, r8
 8018480:	bf18      	it	ne
 8018482:	460e      	movne	r6, r1
 8018484:	2001      	movs	r0, #1
 8018486:	e017      	b.n	80184b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8018488:	4540      	cmp	r0, r8
 801848a:	d012      	beq.n	80184b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 801848c:	8893      	ldrh	r3, [r2, #4]
 801848e:	4639      	mov	r1, r7
 8018490:	8023      	strh	r3, [r4, #0]
 8018492:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8018496:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 801849a:	f892 a00a 	ldrb.w	sl, [r2, #10]
 801849e:	ea4a 0a00 	orr.w	sl, sl, r0
 80184a2:	68e0      	ldr	r0, [r4, #12]
 80184a4:	6803      	ldr	r3, [r0, #0]
 80184a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184a8:	4798      	blx	r3
 80184aa:	eb0a 0200 	add.w	r2, sl, r0
 80184ae:	b292      	uxth	r2, r2
 80184b0:	e7dd      	b.n	801846e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 80184b2:	2200      	movs	r2, #0
 80184b4:	e7db      	b.n	801846e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 80184b6:	2000      	movs	r0, #0
 80184b8:	440a      	add	r2, r1
 80184ba:	8aa3      	ldrh	r3, [r4, #20]
 80184bc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80184c0:	b292      	uxth	r2, r2
 80184c2:	8322      	strh	r2, [r4, #24]
 80184c4:	4413      	add	r3, r2
 80184c6:	f1b9 0f00 	cmp.w	r9, #0
 80184ca:	d022      	beq.n	8018512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 80184cc:	f1bb 0f00 	cmp.w	fp, #0
 80184d0:	d102      	bne.n	80184d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 80184d2:	9901      	ldr	r1, [sp, #4]
 80184d4:	b149      	cbz	r1, 80184ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 80184d6:	b140      	cbz	r0, 80184ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 80184d8:	8ba1      	ldrh	r1, [r4, #28]
 80184da:	4419      	add	r1, r3
 80184dc:	458c      	cmp	ip, r1
 80184de:	da12      	bge.n	8018506 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 80184e0:	8a61      	ldrh	r1, [r4, #18]
 80184e2:	b181      	cbz	r1, 8018506 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 80184e4:	4563      	cmp	r3, ip
 80184e6:	dd96      	ble.n	8018416 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80184e8:	e004      	b.n	80184f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 80184ea:	4563      	cmp	r3, ip
 80184ec:	dd93      	ble.n	8018416 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80184ee:	8a63      	ldrh	r3, [r4, #18]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d090      	beq.n	8018416 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80184f4:	2301      	movs	r3, #1
 80184f6:	8ba2      	ldrh	r2, [r4, #28]
 80184f8:	77a3      	strb	r3, [r4, #30]
 80184fa:	8b63      	ldrh	r3, [r4, #26]
 80184fc:	4413      	add	r3, r2
 80184fe:	8363      	strh	r3, [r4, #26]
 8018500:	b005      	add	sp, #20
 8018502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018506:	2300      	movs	r3, #0
 8018508:	4611      	mov	r1, r2
 801850a:	4620      	mov	r0, r4
 801850c:	f7ff ff58 	bl	80183c0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018510:	e781      	b.n	8018416 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018512:	4563      	cmp	r3, ip
 8018514:	dd16      	ble.n	8018544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8018516:	9b00      	ldr	r3, [sp, #0]
 8018518:	b113      	cbz	r3, 8018520 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801851a:	2301      	movs	r3, #1
 801851c:	460a      	mov	r2, r1
 801851e:	e787      	b.n	8018430 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8018520:	2d00      	cmp	r5, #0
 8018522:	f43f af78 	beq.w	8018416 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018526:	2800      	cmp	r0, #0
 8018528:	f47f af75 	bne.w	8018416 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801852c:	2f20      	cmp	r7, #32
 801852e:	d001      	beq.n	8018534 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8018530:	4547      	cmp	r7, r8
 8018532:	d102      	bne.n	801853a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8018534:	2301      	movs	r3, #1
 8018536:	4632      	mov	r2, r6
 8018538:	e77b      	b.n	8018432 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801853a:	8a63      	ldrh	r3, [r4, #18]
 801853c:	2b00      	cmp	r3, #0
 801853e:	f43f af6a 	beq.w	8018416 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018542:	e7dd      	b.n	8018500 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8018544:	2800      	cmp	r0, #0
 8018546:	f47f af66 	bne.w	8018416 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801854a:	2f20      	cmp	r7, #32
 801854c:	d002      	beq.n	8018554 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801854e:	4547      	cmp	r7, r8
 8018550:	f47f af61 	bne.w	8018416 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018554:	2301      	movs	r3, #1
 8018556:	4632      	mov	r2, r6
 8018558:	e7d7      	b.n	801850a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801855a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801855a:	b570      	push	{r4, r5, r6, lr}
 801855c:	4606      	mov	r6, r0
 801855e:	b08a      	sub	sp, #40	; 0x28
 8018560:	4615      	mov	r5, r2
 8018562:	b191      	cbz	r1, 801858a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8018564:	2401      	movs	r4, #1
 8018566:	e9cd 3100 	strd	r3, r1, [sp]
 801856a:	4613      	mov	r3, r2
 801856c:	4601      	mov	r1, r0
 801856e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018572:	a802      	add	r0, sp, #8
 8018574:	f7ff fd20 	bl	8017fb8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018578:	2100      	movs	r1, #0
 801857a:	a802      	add	r0, sp, #8
 801857c:	f7ff ff30 	bl	80183e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018580:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018584:	b173      	cbz	r3, 80185a4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8018586:	3401      	adds	r4, #1
 8018588:	e7f6      	b.n	8018578 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801858a:	2401      	movs	r4, #1
 801858c:	4611      	mov	r1, r2
 801858e:	f002 f873 	bl	801a678 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018592:	280a      	cmp	r0, #10
 8018594:	4629      	mov	r1, r5
 8018596:	4630      	mov	r0, r6
 8018598:	bf08      	it	eq
 801859a:	3401      	addeq	r4, #1
 801859c:	f002 f86c 	bl	801a678 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80185a0:	2800      	cmp	r0, #0
 80185a2:	d1f6      	bne.n	8018592 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 80185a4:	b2a0      	uxth	r0, r4
 80185a6:	b00a      	add	sp, #40	; 0x28
 80185a8:	bd70      	pop	{r4, r5, r6, pc}

080185aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80185aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185ae:	b0db      	sub	sp, #364	; 0x16c
 80185b0:	468a      	mov	sl, r1
 80185b2:	461c      	mov	r4, r3
 80185b4:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 80185b8:	9009      	str	r0, [sp, #36]	; 0x24
 80185ba:	f1bb 0f00 	cmp.w	fp, #0
 80185be:	f000 80c7 	beq.w	8018750 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	f000 80c3 	beq.w	8018750 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80185ca:	7ba3      	ldrb	r3, [r4, #14]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	f000 80bf 	beq.w	8018750 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80185d2:	af0c      	add	r7, sp, #48	; 0x30
 80185d4:	6810      	ldr	r0, [r2, #0]
 80185d6:	6851      	ldr	r1, [r2, #4]
 80185d8:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 80185dc:	463b      	mov	r3, r7
 80185de:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 80185e2:	c303      	stmia	r3!, {r0, r1}
 80185e4:	2100      	movs	r1, #0
 80185e6:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 80185ea:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80185ee:	4638      	mov	r0, r7
 80185f0:	910e      	str	r1, [sp, #56]	; 0x38
 80185f2:	a90e      	add	r1, sp, #56	; 0x38
 80185f4:	79a2      	ldrb	r2, [r4, #6]
 80185f6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80185fa:	f7ff fd49 	bl	8018090 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80185fe:	a90e      	add	r1, sp, #56	; 0x38
 8018600:	79a2      	ldrb	r2, [r4, #6]
 8018602:	4608      	mov	r0, r1
 8018604:	f7ff fd44 	bl	8018090 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018608:	4648      	mov	r0, r9
 801860a:	f001 fef3 	bl	801a3f4 <_ZN8touchgfx12TextProviderC1Ev>
 801860e:	6820      	ldr	r0, [r4, #0]
 8018610:	6803      	ldr	r3, [r0, #0]
 8018612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018614:	4798      	blx	r3
 8018616:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018618:	4603      	mov	r3, r0
 801861a:	4659      	mov	r1, fp
 801861c:	4648      	mov	r0, r9
 801861e:	f001 ff06 	bl	801a42e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018622:	a82e      	add	r0, sp, #184	; 0xb8
 8018624:	f001 fee6 	bl	801a3f4 <_ZN8touchgfx12TextProviderC1Ev>
 8018628:	f894 8004 	ldrb.w	r8, [r4, #4]
 801862c:	f1b8 0f00 	cmp.w	r8, #0
 8018630:	d009      	beq.n	8018646 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8018632:	6820      	ldr	r0, [r4, #0]
 8018634:	6803      	ldr	r3, [r0, #0]
 8018636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018638:	4798      	blx	r3
 801863a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801863c:	4603      	mov	r3, r0
 801863e:	4659      	mov	r1, fp
 8018640:	a82e      	add	r0, sp, #184	; 0xb8
 8018642:	f001 fef4 	bl	801a42e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018646:	6820      	ldr	r0, [r4, #0]
 8018648:	6803      	ldr	r3, [r0, #0]
 801864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801864c:	4798      	blx	r3
 801864e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018652:	182e      	adds	r6, r5, r0
 8018654:	2e00      	cmp	r6, #0
 8018656:	dd45      	ble.n	80186e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8018658:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801865c:	4283      	cmp	r3, r0
 801865e:	db41      	blt.n	80186e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8018660:	441d      	add	r5, r3
 8018662:	fb95 f5f6 	sdiv	r5, r5, r6
 8018666:	a844      	add	r0, sp, #272	; 0x110
 8018668:	f001 fec4 	bl	801a3f4 <_ZN8touchgfx12TextProviderC1Ev>
 801866c:	7c23      	ldrb	r3, [r4, #16]
 801866e:	b14b      	cbz	r3, 8018684 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 8018670:	6820      	ldr	r0, [r4, #0]
 8018672:	6803      	ldr	r3, [r0, #0]
 8018674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018676:	4798      	blx	r3
 8018678:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801867a:	4603      	mov	r3, r0
 801867c:	4659      	mov	r1, fp
 801867e:	a844      	add	r0, sp, #272	; 0x110
 8018680:	f001 fed5 	bl	801a42e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018684:	7c21      	ldrb	r1, [r4, #16]
 8018686:	a810      	add	r0, sp, #64	; 0x40
 8018688:	7963      	ldrb	r3, [r4, #5]
 801868a:	9101      	str	r1, [sp, #4]
 801868c:	6821      	ldr	r1, [r4, #0]
 801868e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8018692:	9100      	str	r1, [sp, #0]
 8018694:	a944      	add	r1, sp, #272	; 0x110
 8018696:	f7ff fc8f 	bl	8017fb8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801869a:	7c23      	ldrb	r3, [r4, #16]
 801869c:	bb23      	cbnz	r3, 80186e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801869e:	fa1f fb86 	uxth.w	fp, r6
 80186a2:	2d00      	cmp	r5, #0
 80186a4:	dd57      	ble.n	8018756 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 80186a6:	7961      	ldrb	r1, [r4, #5]
 80186a8:	4648      	mov	r0, r9
 80186aa:	f001 ffe5 	bl	801a678 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80186ae:	4603      	mov	r3, r0
 80186b0:	f1b8 0f00 	cmp.w	r8, #0
 80186b4:	d005      	beq.n	80186c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 80186b6:	9008      	str	r0, [sp, #32]
 80186b8:	a82e      	add	r0, sp, #184	; 0xb8
 80186ba:	7961      	ldrb	r1, [r4, #5]
 80186bc:	f001 ffdc 	bl	801a678 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80186c0:	9b08      	ldr	r3, [sp, #32]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d044      	beq.n	8018750 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80186c6:	2b0a      	cmp	r3, #10
 80186c8:	d1eb      	bne.n	80186a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 80186ca:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80186ce:	3d01      	subs	r5, #1
 80186d0:	445b      	add	r3, fp
 80186d2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80186d6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80186da:	eba3 030b 	sub.w	r3, r3, fp
 80186de:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80186e2:	e7de      	b.n	80186a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 80186e4:	2500      	movs	r5, #0
 80186e6:	e7be      	b.n	8018666 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 80186e8:	0073      	lsls	r3, r6, #1
 80186ea:	9308      	str	r3, [sp, #32]
 80186ec:	2d00      	cmp	r5, #0
 80186ee:	dd32      	ble.n	8018756 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 80186f0:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 80186f4:	a810      	add	r0, sp, #64	; 0x40
 80186f6:	9b08      	ldr	r3, [sp, #32]
 80186f8:	428b      	cmp	r3, r1
 80186fa:	bfd4      	ite	le
 80186fc:	2100      	movle	r1, #0
 80186fe:	2101      	movgt	r1, #1
 8018700:	f7ff fe6e 	bl	80183e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018704:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8018708:	f10b 33ff 	add.w	r3, fp, #4294967295
 801870c:	fa1f fb83 	uxth.w	fp, r3
 8018710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018714:	459b      	cmp	fp, r3
 8018716:	d00b      	beq.n	8018730 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8018718:	7961      	ldrb	r1, [r4, #5]
 801871a:	4648      	mov	r0, r9
 801871c:	f001 ffac 	bl	801a678 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018720:	f1b8 0f00 	cmp.w	r8, #0
 8018724:	d0f0      	beq.n	8018708 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8018726:	7961      	ldrb	r1, [r4, #5]
 8018728:	a82e      	add	r0, sp, #184	; 0xb8
 801872a:	f001 ffa5 	bl	801a678 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801872e:	e7eb      	b.n	8018708 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8018730:	b2b3      	uxth	r3, r6
 8018732:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018736:	3d01      	subs	r5, #1
 8018738:	441a      	add	r2, r3
 801873a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801873e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8018742:	1ad3      	subs	r3, r2, r3
 8018744:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018748:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801874c:	2b00      	cmp	r3, #0
 801874e:	d1cd      	bne.n	80186ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8018750:	b05b      	add	sp, #364	; 0x16c
 8018752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018756:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801875a:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801875e:	7c23      	ldrb	r3, [r4, #16]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d05f      	beq.n	8018824 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8018764:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018768:	a810      	add	r0, sp, #64	; 0x40
 801876a:	458b      	cmp	fp, r1
 801876c:	bfd4      	ite	le
 801876e:	2100      	movle	r1, #0
 8018770:	2101      	movgt	r1, #1
 8018772:	f7ff fe35 	bl	80183e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018776:	f1b8 0f00 	cmp.w	r8, #0
 801877a:	d04c      	beq.n	8018816 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801877c:	7c23      	ldrb	r3, [r4, #16]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d053      	beq.n	801882a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 8018782:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8018786:	7922      	ldrb	r2, [r4, #4]
 8018788:	2a01      	cmp	r2, #1
 801878a:	d13c      	bne.n	8018806 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801878c:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8018790:	1ac0      	subs	r0, r0, r3
 8018792:	2302      	movs	r3, #2
 8018794:	fb90 f0f3 	sdiv	r0, r0, r3
 8018798:	b200      	sxth	r0, r0
 801879a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801879e:	4418      	add	r0, r3
 80187a0:	7c23      	ldrb	r3, [r4, #16]
 80187a2:	8028      	strh	r0, [r5, #0]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d03a      	beq.n	801881e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 80187a8:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80187ac:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 80187b0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80187b4:	f8cd 9010 	str.w	r9, [sp, #16]
 80187b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187ba:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80187be:	2200      	movs	r2, #0
 80187c0:	2100      	movs	r1, #0
 80187c2:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80187c6:	e9cd 5700 	strd	r5, r7, [sp]
 80187ca:	4652      	mov	r2, sl
 80187cc:	f7ff fcb2 	bl	8018134 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80187d0:	2800      	cmp	r0, #0
 80187d2:	d1bd      	bne.n	8018750 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80187d4:	b2b2      	uxth	r2, r6
 80187d6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80187da:	4611      	mov	r1, r2
 80187dc:	4413      	add	r3, r2
 80187de:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80187e2:	b21b      	sxth	r3, r3
 80187e4:	1a52      	subs	r2, r2, r1
 80187e6:	7c21      	ldrb	r1, [r4, #16]
 80187e8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80187ec:	b212      	sxth	r2, r2
 80187ee:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80187f2:	b109      	cbz	r1, 80187f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 80187f4:	42b2      	cmp	r2, r6
 80187f6:	dbab      	blt.n	8018750 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80187f8:	887a      	ldrh	r2, [r7, #2]
 80187fa:	88f9      	ldrh	r1, [r7, #6]
 80187fc:	440a      	add	r2, r1
 80187fe:	b212      	sxth	r2, r2
 8018800:	4293      	cmp	r3, r2
 8018802:	ddac      	ble.n	801875e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8018804:	e7a4      	b.n	8018750 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018806:	2a02      	cmp	r2, #2
 8018808:	d107      	bne.n	801881a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801880a:	7be2      	ldrb	r2, [r4, #15]
 801880c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8018810:	1a80      	subs	r0, r0, r2
 8018812:	1ac0      	subs	r0, r0, r3
 8018814:	e7c0      	b.n	8018798 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8018816:	7be0      	ldrb	r0, [r4, #15]
 8018818:	e7bf      	b.n	801879a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801881a:	2000      	movs	r0, #0
 801881c:	e7bd      	b.n	801879a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801881e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018822:	e7c3      	b.n	80187ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8018824:	f1b8 0f00 	cmp.w	r8, #0
 8018828:	d0f5      	beq.n	8018816 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801882a:	2300      	movs	r3, #0
 801882c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018830:	6821      	ldr	r1, [r4, #0]
 8018832:	a82e      	add	r0, sp, #184	; 0xb8
 8018834:	f7ff fbfa 	bl	801802c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018838:	b203      	sxth	r3, r0
 801883a:	e7a4      	b.n	8018786 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801883c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801883c:	2b02      	cmp	r3, #2
 801883e:	b510      	push	{r4, lr}
 8018840:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018844:	d00b      	beq.n	801885e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018846:	2b03      	cmp	r3, #3
 8018848:	d00e      	beq.n	8018868 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801884a:	2b01      	cmp	r3, #1
 801884c:	d001      	beq.n	8018852 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801884e:	1860      	adds	r0, r4, r1
 8018850:	bd10      	pop	{r4, pc}
 8018852:	8880      	ldrh	r0, [r0, #4]
 8018854:	4420      	add	r0, r4
 8018856:	b200      	sxth	r0, r0
 8018858:	1a80      	subs	r0, r0, r2
 801885a:	3801      	subs	r0, #1
 801885c:	e7f8      	b.n	8018850 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801885e:	8880      	ldrh	r0, [r0, #4]
 8018860:	4420      	add	r0, r4
 8018862:	b200      	sxth	r0, r0
 8018864:	1a40      	subs	r0, r0, r1
 8018866:	e7f8      	b.n	801885a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018868:	18a0      	adds	r0, r4, r2
 801886a:	e7f1      	b.n	8018850 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801886c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801886c:	2b02      	cmp	r3, #2
 801886e:	b510      	push	{r4, lr}
 8018870:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018874:	d006      	beq.n	8018884 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018876:	2b03      	cmp	r3, #3
 8018878:	d00a      	beq.n	8018890 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801887a:	2b01      	cmp	r3, #1
 801887c:	bf14      	ite	ne
 801887e:	18a0      	addne	r0, r4, r2
 8018880:	1860      	addeq	r0, r4, r1
 8018882:	bd10      	pop	{r4, pc}
 8018884:	88c0      	ldrh	r0, [r0, #6]
 8018886:	4420      	add	r0, r4
 8018888:	b200      	sxth	r0, r0
 801888a:	1a80      	subs	r0, r0, r2
 801888c:	3801      	subs	r0, #1
 801888e:	e7f8      	b.n	8018882 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018890:	88c0      	ldrh	r0, [r0, #6]
 8018892:	4420      	add	r0, r4
 8018894:	b200      	sxth	r0, r0
 8018896:	1a40      	subs	r0, r0, r1
 8018898:	e7f8      	b.n	801888c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801889c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801889c:	4b01      	ldr	r3, [pc, #4]	; (80188a4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801889e:	2200      	movs	r2, #0
 80188a0:	601a      	str	r2, [r3, #0]
 80188a2:	4770      	bx	lr
 80188a4:	2000bcf0 	.word	0x2000bcf0

080188a8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 80188a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188aa:	1e05      	subs	r5, r0, #0
 80188ac:	f04f 0601 	mov.w	r6, #1
 80188b0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80188b4:	bfba      	itte	lt
 80188b6:	f04f 37ff 	movlt.w	r7, #4294967295
 80188ba:	426d      	neglt	r5, r5
 80188bc:	2701      	movge	r7, #1
 80188be:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 80188c2:	f1be 0f00 	cmp.w	lr, #0
 80188c6:	bfbc      	itt	lt
 80188c8:	f1ce 0e00 	rsblt	lr, lr, #0
 80188cc:	427f      	neglt	r7, r7
 80188ce:	2c00      	cmp	r4, #0
 80188d0:	fa4e f001 	asr.w	r0, lr, r1
 80188d4:	fa06 f101 	lsl.w	r1, r6, r1
 80188d8:	bfbc      	itt	lt
 80188da:	4264      	neglt	r4, r4
 80188dc:	427f      	neglt	r7, r7
 80188de:	3901      	subs	r1, #1
 80188e0:	ea01 010e 	and.w	r1, r1, lr
 80188e4:	434d      	muls	r5, r1
 80188e6:	f8dc 1000 	ldr.w	r1, [ip]
 80188ea:	fb03 1300 	mla	r3, r3, r0, r1
 80188ee:	fb95 f1f4 	sdiv	r1, r5, r4
 80188f2:	fb04 5511 	mls	r5, r4, r1, r5
 80188f6:	441d      	add	r5, r3
 80188f8:	fb95 f3f4 	sdiv	r3, r5, r4
 80188fc:	4419      	add	r1, r3
 80188fe:	fb04 5413 	mls	r4, r4, r3, r5
 8018902:	fb02 1000 	mla	r0, r2, r0, r1
 8018906:	f8cc 4000 	str.w	r4, [ip]
 801890a:	4378      	muls	r0, r7
 801890c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018910 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018914:	4c24      	ldr	r4, [pc, #144]	; (80189a8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8018916:	b086      	sub	sp, #24
 8018918:	4605      	mov	r5, r0
 801891a:	6807      	ldr	r7, [r0, #0]
 801891c:	69a3      	ldr	r3, [r4, #24]
 801891e:	b92b      	cbnz	r3, 801892c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8018920:	6840      	ldr	r0, [r0, #4]
 8018922:	e9c5 7000 	strd	r7, r0, [r5]
 8018926:	b006      	add	sp, #24
 8018928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801892c:	f04f 0802 	mov.w	r8, #2
 8018930:	68a2      	ldr	r2, [r4, #8]
 8018932:	ae06      	add	r6, sp, #24
 8018934:	6820      	ldr	r0, [r4, #0]
 8018936:	fb93 f1f8 	sdiv	r1, r3, r8
 801893a:	440a      	add	r2, r1
 801893c:	69e1      	ldr	r1, [r4, #28]
 801893e:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018942:	9700      	str	r7, [sp, #0]
 8018944:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018946:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801894a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801894c:	f7ff ffac 	bl	80188a8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018950:	69a3      	ldr	r3, [r4, #24]
 8018952:	4607      	mov	r7, r0
 8018954:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018956:	9301      	str	r3, [sp, #4]
 8018958:	686b      	ldr	r3, [r5, #4]
 801895a:	6a21      	ldr	r1, [r4, #32]
 801895c:	9300      	str	r3, [sp, #0]
 801895e:	9602      	str	r6, [sp, #8]
 8018960:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018962:	6860      	ldr	r0, [r4, #4]
 8018964:	f7ff ffa0 	bl	80188a8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018968:	69a2      	ldr	r2, [r4, #24]
 801896a:	6963      	ldr	r3, [r4, #20]
 801896c:	4407      	add	r7, r0
 801896e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018970:	68e0      	ldr	r0, [r4, #12]
 8018972:	fb92 f8f8 	sdiv	r8, r2, r8
 8018976:	4443      	add	r3, r8
 8018978:	9305      	str	r3, [sp, #20]
 801897a:	682b      	ldr	r3, [r5, #0]
 801897c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8018980:	9300      	str	r3, [sp, #0]
 8018982:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018984:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018986:	f7ff ff8f 	bl	80188a8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801898a:	69a3      	ldr	r3, [r4, #24]
 801898c:	4680      	mov	r8, r0
 801898e:	9602      	str	r6, [sp, #8]
 8018990:	9301      	str	r3, [sp, #4]
 8018992:	686b      	ldr	r3, [r5, #4]
 8018994:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018996:	9300      	str	r3, [sp, #0]
 8018998:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801899a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801899c:	6920      	ldr	r0, [r4, #16]
 801899e:	f7ff ff83 	bl	80188a8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80189a2:	4440      	add	r0, r8
 80189a4:	e7bd      	b.n	8018922 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80189a6:	bf00      	nop
 80189a8:	2000bcf4 	.word	0x2000bcf4

080189ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80189ac:	4b07      	ldr	r3, [pc, #28]	; (80189cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80189ae:	b510      	push	{r4, lr}
 80189b0:	781b      	ldrb	r3, [r3, #0]
 80189b2:	2b01      	cmp	r3, #1
 80189b4:	d108      	bne.n	80189c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80189b6:	4b06      	ldr	r3, [pc, #24]	; (80189d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80189b8:	880c      	ldrh	r4, [r1, #0]
 80189ba:	881b      	ldrh	r3, [r3, #0]
 80189bc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80189c0:	3b01      	subs	r3, #1
 80189c2:	1b1b      	subs	r3, r3, r4
 80189c4:	8003      	strh	r3, [r0, #0]
 80189c6:	800a      	strh	r2, [r1, #0]
 80189c8:	bd10      	pop	{r4, pc}
 80189ca:	bf00      	nop
 80189cc:	2000bcc0 	.word	0x2000bcc0
 80189d0:	2000bcc4 	.word	0x2000bcc4

080189d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80189d4:	4b0a      	ldr	r3, [pc, #40]	; (8018a00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80189d6:	b510      	push	{r4, lr}
 80189d8:	781b      	ldrb	r3, [r3, #0]
 80189da:	2b01      	cmp	r3, #1
 80189dc:	d10e      	bne.n	80189fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80189de:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80189e2:	8843      	ldrh	r3, [r0, #2]
 80189e4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80189e8:	18ca      	adds	r2, r1, r3
 80189ea:	4b06      	ldr	r3, [pc, #24]	; (8018a04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80189ec:	8044      	strh	r4, [r0, #2]
 80189ee:	881b      	ldrh	r3, [r3, #0]
 80189f0:	1a9b      	subs	r3, r3, r2
 80189f2:	8003      	strh	r3, [r0, #0]
 80189f4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80189f8:	8081      	strh	r1, [r0, #4]
 80189fa:	80c3      	strh	r3, [r0, #6]
 80189fc:	bd10      	pop	{r4, pc}
 80189fe:	bf00      	nop
 8018a00:	2000bcc0 	.word	0x2000bcc0
 8018a04:	2000bcbc 	.word	0x2000bcbc

08018a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018a08:	4b07      	ldr	r3, [pc, #28]	; (8018a28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018a0a:	b510      	push	{r4, lr}
 8018a0c:	781b      	ldrb	r3, [r3, #0]
 8018a0e:	2b01      	cmp	r3, #1
 8018a10:	d108      	bne.n	8018a24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018a12:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018a16:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018a1a:	8003      	strh	r3, [r0, #0]
 8018a1c:	8893      	ldrh	r3, [r2, #4]
 8018a1e:	3b01      	subs	r3, #1
 8018a20:	1b1b      	subs	r3, r3, r4
 8018a22:	800b      	strh	r3, [r1, #0]
 8018a24:	bd10      	pop	{r4, pc}
 8018a26:	bf00      	nop
 8018a28:	2000bcc0 	.word	0x2000bcc0

08018a2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018a2c:	4b08      	ldr	r3, [pc, #32]	; (8018a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018a2e:	b513      	push	{r0, r1, r4, lr}
 8018a30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a34:	2400      	movs	r4, #0
 8018a36:	4b07      	ldr	r3, [pc, #28]	; (8018a54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018a38:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018a3c:	466a      	mov	r2, sp
 8018a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a42:	9400      	str	r4, [sp, #0]
 8018a44:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018a48:	f7ff ffde 	bl	8018a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018a4c:	b002      	add	sp, #8
 8018a4e:	bd10      	pop	{r4, pc}
 8018a50:	2000bcbc 	.word	0x2000bcbc
 8018a54:	2000bcbe 	.word	0x2000bcbe

08018a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018a58:	4b0a      	ldr	r3, [pc, #40]	; (8018a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018a5a:	460a      	mov	r2, r1
 8018a5c:	b510      	push	{r4, lr}
 8018a5e:	781b      	ldrb	r3, [r3, #0]
 8018a60:	2b01      	cmp	r3, #1
 8018a62:	d10d      	bne.n	8018a80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018a64:	8881      	ldrh	r1, [r0, #4]
 8018a66:	8803      	ldrh	r3, [r0, #0]
 8018a68:	440b      	add	r3, r1
 8018a6a:	4601      	mov	r1, r0
 8018a6c:	3b01      	subs	r3, #1
 8018a6e:	f821 3b02 	strh.w	r3, [r1], #2
 8018a72:	f7ff ffc9 	bl	8018a08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018a76:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018a7a:	88c2      	ldrh	r2, [r0, #6]
 8018a7c:	80c3      	strh	r3, [r0, #6]
 8018a7e:	8082      	strh	r2, [r0, #4]
 8018a80:	bd10      	pop	{r4, pc}
 8018a82:	bf00      	nop
 8018a84:	2000bcc0 	.word	0x2000bcc0

08018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018a88:	4b09      	ldr	r3, [pc, #36]	; (8018ab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018a8a:	b507      	push	{r0, r1, r2, lr}
 8018a8c:	2100      	movs	r1, #0
 8018a8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a92:	4b08      	ldr	r3, [pc, #32]	; (8018ab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8018a94:	9100      	str	r1, [sp, #0]
 8018a96:	4669      	mov	r1, sp
 8018a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a9c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018aa0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018aa4:	f7ff ffd8 	bl	8018a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018aa8:	b003      	add	sp, #12
 8018aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8018aae:	bf00      	nop
 8018ab0:	2000bcbc 	.word	0x2000bcbc
 8018ab4:	2000bcbe 	.word	0x2000bcbe

08018ab8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018ab8:	4b03      	ldr	r3, [pc, #12]	; (8018ac8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018aba:	6818      	ldr	r0, [r3, #0]
 8018abc:	b110      	cbz	r0, 8018ac4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018abe:	6803      	ldr	r3, [r0, #0]
 8018ac0:	699b      	ldr	r3, [r3, #24]
 8018ac2:	4718      	bx	r3
 8018ac4:	4770      	bx	lr
 8018ac6:	bf00      	nop
 8018ac8:	2000bd44 	.word	0x2000bd44

08018acc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018acc:	4770      	bx	lr
	...

08018ad0 <_ZN8touchgfx11Application4drawEv>:
 8018ad0:	4b09      	ldr	r3, [pc, #36]	; (8018af8 <_ZN8touchgfx11Application4drawEv+0x28>)
 8018ad2:	b507      	push	{r0, r1, r2, lr}
 8018ad4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ad8:	2100      	movs	r1, #0
 8018ada:	4b08      	ldr	r3, [pc, #32]	; (8018afc <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018adc:	9100      	str	r1, [sp, #0]
 8018ade:	4669      	mov	r1, sp
 8018ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ae4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018ae8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018aec:	6803      	ldr	r3, [r0, #0]
 8018aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018af0:	4798      	blx	r3
 8018af2:	b003      	add	sp, #12
 8018af4:	f85d fb04 	ldr.w	pc, [sp], #4
 8018af8:	2000bcbc 	.word	0x2000bcbc
 8018afc:	2000bcbe 	.word	0x2000bcbe

08018b00 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018b00:	4b03      	ldr	r3, [pc, #12]	; (8018b10 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018b02:	6818      	ldr	r0, [r3, #0]
 8018b04:	b110      	cbz	r0, 8018b0c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018b06:	6803      	ldr	r3, [r0, #0]
 8018b08:	69db      	ldr	r3, [r3, #28]
 8018b0a:	4718      	bx	r3
 8018b0c:	4770      	bx	lr
 8018b0e:	bf00      	nop
 8018b10:	2000bd44 	.word	0x2000bd44

08018b14 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018b14:	4b03      	ldr	r3, [pc, #12]	; (8018b24 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018b16:	6818      	ldr	r0, [r3, #0]
 8018b18:	b110      	cbz	r0, 8018b20 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018b1a:	6803      	ldr	r3, [r0, #0]
 8018b1c:	6a1b      	ldr	r3, [r3, #32]
 8018b1e:	4718      	bx	r3
 8018b20:	4770      	bx	lr
 8018b22:	bf00      	nop
 8018b24:	2000bd44 	.word	0x2000bd44

08018b28 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018b28:	4b03      	ldr	r3, [pc, #12]	; (8018b38 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018b2a:	6818      	ldr	r0, [r3, #0]
 8018b2c:	b110      	cbz	r0, 8018b34 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018b2e:	6803      	ldr	r3, [r0, #0]
 8018b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b32:	4718      	bx	r3
 8018b34:	4770      	bx	lr
 8018b36:	bf00      	nop
 8018b38:	2000bd44 	.word	0x2000bd44

08018b3c <_ZN8touchgfx11Application15handleTickEventEv>:
 8018b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b40:	4d3a      	ldr	r5, [pc, #232]	; (8018c2c <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8018b42:	4604      	mov	r4, r0
 8018b44:	6828      	ldr	r0, [r5, #0]
 8018b46:	b140      	cbz	r0, 8018b5a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018b48:	7a03      	ldrb	r3, [r0, #8]
 8018b4a:	b933      	cbnz	r3, 8018b5a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018b4c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018b50:	6803      	ldr	r3, [r0, #0]
 8018b52:	689b      	ldr	r3, [r3, #8]
 8018b54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b58:	4718      	bx	r3
 8018b5a:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8018b5e:	b97b      	cbnz	r3, 8018b80 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018b60:	b170      	cbz	r0, 8018b80 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018b62:	7a03      	ldrb	r3, [r0, #8]
 8018b64:	b163      	cbz	r3, 8018b80 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018b66:	4b32      	ldr	r3, [pc, #200]	; (8018c30 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018b68:	6818      	ldr	r0, [r3, #0]
 8018b6a:	b110      	cbz	r0, 8018b72 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8018b6c:	6803      	ldr	r3, [r0, #0]
 8018b6e:	691b      	ldr	r3, [r3, #16]
 8018b70:	4798      	blx	r3
 8018b72:	6828      	ldr	r0, [r5, #0]
 8018b74:	6803      	ldr	r3, [r0, #0]
 8018b76:	68db      	ldr	r3, [r3, #12]
 8018b78:	4798      	blx	r3
 8018b7a:	2301      	movs	r3, #1
 8018b7c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018b80:	2500      	movs	r5, #0
 8018b82:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8018b86:	42a8      	cmp	r0, r5
 8018b88:	dd0c      	ble.n	8018ba4 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 8018b8a:	1963      	adds	r3, r4, r5
 8018b8c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018b90:	b132      	cbz	r2, 8018ba0 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8018b92:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8018b96:	4413      	add	r3, r2
 8018b98:	6858      	ldr	r0, [r3, #4]
 8018b9a:	6803      	ldr	r3, [r0, #0]
 8018b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b9e:	4798      	blx	r3
 8018ba0:	3501      	adds	r5, #1
 8018ba2:	e7ee      	b.n	8018b82 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8018ba4:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 8018ba8:	3801      	subs	r0, #1
 8018baa:	f04f 0c00 	mov.w	ip, #0
 8018bae:	3678      	adds	r6, #120	; 0x78
 8018bb0:	1c43      	adds	r3, r0, #1
 8018bb2:	d033      	beq.n	8018c1c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8018bb4:	1823      	adds	r3, r4, r0
 8018bb6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018bba:	bb6a      	cbnz	r2, 8018c18 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8018bbc:	b281      	uxth	r1, r0
 8018bbe:	1d25      	adds	r5, r4, #4
 8018bc0:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8018bc4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8018bc8:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8018bcc:	4293      	cmp	r3, r2
 8018bce:	dc0a      	bgt.n	8018be6 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8018bd0:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8018bd4:	4422      	add	r2, r4
 8018bd6:	18b1      	adds	r1, r6, r2
 8018bd8:	b289      	uxth	r1, r1
 8018bda:	428b      	cmp	r3, r1
 8018bdc:	d919      	bls.n	8018c12 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8018bde:	7851      	ldrb	r1, [r2, #1]
 8018be0:	f802 1b01 	strb.w	r1, [r2], #1
 8018be4:	e7f7      	b.n	8018bd6 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8018be6:	682f      	ldr	r7, [r5, #0]
 8018be8:	f105 0804 	add.w	r8, r5, #4
 8018bec:	45b9      	cmp	r9, r7
 8018bee:	d10d      	bne.n	8018c0c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8018bf0:	4696      	mov	lr, r2
 8018bf2:	f1be 0f1e 	cmp.w	lr, #30
 8018bf6:	dc06      	bgt.n	8018c06 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8018bf8:	f10e 0e01 	add.w	lr, lr, #1
 8018bfc:	686f      	ldr	r7, [r5, #4]
 8018bfe:	4573      	cmp	r3, lr
 8018c00:	f845 7b04 	str.w	r7, [r5], #4
 8018c04:	dcf5      	bgt.n	8018bf2 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8018c06:	3b01      	subs	r3, #1
 8018c08:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8018c0c:	3201      	adds	r2, #1
 8018c0e:	4645      	mov	r5, r8
 8018c10:	e7da      	b.n	8018bc8 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8018c12:	4423      	add	r3, r4
 8018c14:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8018c18:	3801      	subs	r0, #1
 8018c1a:	e7c9      	b.n	8018bb0 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8018c1c:	4b04      	ldr	r3, [pc, #16]	; (8018c30 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018c1e:	6818      	ldr	r0, [r3, #0]
 8018c20:	b110      	cbz	r0, 8018c28 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8018c22:	6803      	ldr	r3, [r0, #0]
 8018c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c26:	e795      	b.n	8018b54 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8018c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c2c:	2000bd48 	.word	0x2000bd48
 8018c30:	2000bd44 	.word	0x2000bd44

08018c34 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018c34:	b570      	push	{r4, r5, r6, lr}
 8018c36:	4606      	mov	r6, r0
 8018c38:	460c      	mov	r4, r1
 8018c3a:	b929      	cbnz	r1, 8018c48 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018c3c:	4b0c      	ldr	r3, [pc, #48]	; (8018c70 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018c3e:	2164      	movs	r1, #100	; 0x64
 8018c40:	4a0c      	ldr	r2, [pc, #48]	; (8018c74 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018c42:	480d      	ldr	r0, [pc, #52]	; (8018c78 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018c44:	f00c f854 	bl	8024cf0 <__assert_func>
 8018c48:	2300      	movs	r3, #0
 8018c4a:	4d0c      	ldr	r5, [pc, #48]	; (8018c7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018c4c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018c50:	6828      	ldr	r0, [r5, #0]
 8018c52:	b110      	cbz	r0, 8018c5a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018c54:	6803      	ldr	r3, [r0, #0]
 8018c56:	695b      	ldr	r3, [r3, #20]
 8018c58:	4798      	blx	r3
 8018c5a:	602c      	str	r4, [r5, #0]
 8018c5c:	4620      	mov	r0, r4
 8018c5e:	6823      	ldr	r3, [r4, #0]
 8018c60:	68db      	ldr	r3, [r3, #12]
 8018c62:	4798      	blx	r3
 8018c64:	6833      	ldr	r3, [r6, #0]
 8018c66:	4630      	mov	r0, r6
 8018c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c6e:	4718      	bx	r3
 8018c70:	080285e8 	.word	0x080285e8
 8018c74:	080286b0 	.word	0x080286b0
 8018c78:	080285f2 	.word	0x080285f2
 8018c7c:	2000bd44 	.word	0x2000bd44

08018c80 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018c80:	b510      	push	{r4, lr}
 8018c82:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018c86:	888a      	ldrh	r2, [r1, #4]
 8018c88:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018c8c:	4422      	add	r2, r4
 8018c8e:	b212      	sxth	r2, r2
 8018c90:	4293      	cmp	r3, r2
 8018c92:	da15      	bge.n	8018cc0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018c94:	8882      	ldrh	r2, [r0, #4]
 8018c96:	4413      	add	r3, r2
 8018c98:	b21b      	sxth	r3, r3
 8018c9a:	429c      	cmp	r4, r3
 8018c9c:	da10      	bge.n	8018cc0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018c9e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018ca2:	88c9      	ldrh	r1, [r1, #6]
 8018ca4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018ca8:	4419      	add	r1, r3
 8018caa:	b209      	sxth	r1, r1
 8018cac:	428a      	cmp	r2, r1
 8018cae:	da07      	bge.n	8018cc0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018cb0:	88c0      	ldrh	r0, [r0, #6]
 8018cb2:	4410      	add	r0, r2
 8018cb4:	b200      	sxth	r0, r0
 8018cb6:	4283      	cmp	r3, r0
 8018cb8:	bfac      	ite	ge
 8018cba:	2000      	movge	r0, #0
 8018cbc:	2001      	movlt	r0, #1
 8018cbe:	bd10      	pop	{r4, pc}
 8018cc0:	2000      	movs	r0, #0
 8018cc2:	e7fc      	b.n	8018cbe <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018cc4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018cc4:	b570      	push	{r4, r5, r6, lr}
 8018cc6:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018cca:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018cce:	42ac      	cmp	r4, r5
 8018cd0:	db18      	blt.n	8018d04 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018cd2:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8018cd6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018cda:	429a      	cmp	r2, r3
 8018cdc:	db12      	blt.n	8018d04 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018cde:	8886      	ldrh	r6, [r0, #4]
 8018ce0:	4435      	add	r5, r6
 8018ce2:	888e      	ldrh	r6, [r1, #4]
 8018ce4:	4434      	add	r4, r6
 8018ce6:	b22d      	sxth	r5, r5
 8018ce8:	b224      	sxth	r4, r4
 8018cea:	42a5      	cmp	r5, r4
 8018cec:	db0a      	blt.n	8018d04 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018cee:	88c0      	ldrh	r0, [r0, #6]
 8018cf0:	4418      	add	r0, r3
 8018cf2:	88cb      	ldrh	r3, [r1, #6]
 8018cf4:	441a      	add	r2, r3
 8018cf6:	b200      	sxth	r0, r0
 8018cf8:	b212      	sxth	r2, r2
 8018cfa:	4290      	cmp	r0, r2
 8018cfc:	bfb4      	ite	lt
 8018cfe:	2000      	movlt	r0, #0
 8018d00:	2001      	movge	r0, #1
 8018d02:	bd70      	pop	{r4, r5, r6, pc}
 8018d04:	2000      	movs	r0, #0
 8018d06:	e7fc      	b.n	8018d02 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018d08 <_ZN8touchgfx11Application11getInstanceEv>:
 8018d08:	4b01      	ldr	r3, [pc, #4]	; (8018d10 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018d0a:	6818      	ldr	r0, [r3, #0]
 8018d0c:	4770      	bx	lr
 8018d0e:	bf00      	nop
 8018d10:	2000bd54 	.word	0x2000bd54

08018d14 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018d14:	2300      	movs	r3, #0
 8018d16:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018d1a:	30a8      	adds	r0, #168	; 0xa8
 8018d1c:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018d20:	f802 3b01 	strb.w	r3, [r2], #1
 8018d24:	4282      	cmp	r2, r0
 8018d26:	d1fb      	bne.n	8018d20 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018d28:	4770      	bx	lr

08018d2a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018d30:	2200      	movs	r2, #0
 8018d32:	801a      	strh	r2, [r3, #0]
 8018d34:	3308      	adds	r3, #8
 8018d36:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018d3a:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018d3e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018d42:	428b      	cmp	r3, r1
 8018d44:	d1f5      	bne.n	8018d32 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018d46:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018d4a:	4770      	bx	lr

08018d4c <_ZN8touchgfx11ApplicationC1Ev>:
 8018d4c:	b570      	push	{r4, r5, r6, lr}
 8018d4e:	4b16      	ldr	r3, [pc, #88]	; (8018da8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8018d50:	2500      	movs	r5, #0
 8018d52:	4604      	mov	r4, r0
 8018d54:	30a8      	adds	r0, #168	; 0xa8
 8018d56:	f840 3ca8 	str.w	r3, [r0, #-168]
 8018d5a:	f820 5c24 	strh.w	r5, [r0, #-36]
 8018d5e:	f7ff ffe4 	bl	8018d2a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018d62:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018d66:	f7ff ffe0 	bl	8018d2a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018d6a:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8018d6e:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8018d72:	490e      	ldr	r1, [pc, #56]	; (8018dac <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8018d74:	480e      	ldr	r0, [pc, #56]	; (8018db0 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8018d76:	f00a faa1 	bl	80232bc <CRC_Lock>
 8018d7a:	4e0e      	ldr	r6, [pc, #56]	; (8018db4 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8018d7c:	4b0e      	ldr	r3, [pc, #56]	; (8018db8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018d7e:	b158      	cbz	r0, 8018d98 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 8018d80:	801d      	strh	r5, [r3, #0]
 8018d82:	2300      	movs	r3, #0
 8018d84:	4a0d      	ldr	r2, [pc, #52]	; (8018dbc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018d86:	4620      	mov	r0, r4
 8018d88:	6013      	str	r3, [r2, #0]
 8018d8a:	4a0d      	ldr	r2, [pc, #52]	; (8018dc0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018d8c:	6033      	str	r3, [r6, #0]
 8018d8e:	6013      	str	r3, [r2, #0]
 8018d90:	f7ff ffc0 	bl	8018d14 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018d94:	4620      	mov	r0, r4
 8018d96:	bd70      	pop	{r4, r5, r6, pc}
 8018d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018d9c:	2002      	movs	r0, #2
 8018d9e:	801a      	strh	r2, [r3, #0]
 8018da0:	6030      	str	r0, [r6, #0]
 8018da2:	f000 ff81 	bl	8019ca8 <_ZN8touchgfx6Screen4drawEv>
 8018da6:	e7ec      	b.n	8018d82 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 8018da8:	0802867c 	.word	0x0802867c
 8018dac:	b5e8b5cd 	.word	0xb5e8b5cd
 8018db0:	f407a5c2 	.word	0xf407a5c2
 8018db4:	2000bd44 	.word	0x2000bd44
 8018db8:	20000044 	.word	0x20000044
 8018dbc:	2000bd54 	.word	0x2000bd54
 8018dc0:	2000bd48 	.word	0x2000bd48

08018dc4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	8003      	strh	r3, [r0, #0]
 8018dc8:	8043      	strh	r3, [r0, #2]
 8018dca:	8083      	strh	r3, [r0, #4]
 8018dcc:	80c3      	strh	r3, [r0, #6]
 8018dce:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8018dd2:	4293      	cmp	r3, r2
 8018dd4:	b530      	push	{r4, r5, lr}
 8018dd6:	d912      	bls.n	8018dfe <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018dd8:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8018ddc:	3b01      	subs	r3, #1
 8018dde:	6825      	ldr	r5, [r4, #0]
 8018de0:	b29b      	uxth	r3, r3
 8018de2:	6005      	str	r5, [r0, #0]
 8018de4:	4293      	cmp	r3, r2
 8018de6:	6865      	ldr	r5, [r4, #4]
 8018de8:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8018dec:	6045      	str	r5, [r0, #4]
 8018dee:	d906      	bls.n	8018dfe <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018df0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8018df4:	681d      	ldr	r5, [r3, #0]
 8018df6:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8018dfa:	685d      	ldr	r5, [r3, #4]
 8018dfc:	6065      	str	r5, [r4, #4]
 8018dfe:	bd30      	pop	{r4, r5, pc}

08018e00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018e02:	466b      	mov	r3, sp
 8018e04:	4604      	mov	r4, r0
 8018e06:	e883 0006 	stmia.w	r3, {r1, r2}
 8018e0a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8018e0e:	2a07      	cmp	r2, #7
 8018e10:	d906      	bls.n	8018e20 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018e12:	4b09      	ldr	r3, [pc, #36]	; (8018e38 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018e14:	f44f 7102 	mov.w	r1, #520	; 0x208
 8018e18:	4a08      	ldr	r2, [pc, #32]	; (8018e3c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8018e1a:	4809      	ldr	r0, [pc, #36]	; (8018e40 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8018e1c:	f00b ff68 	bl	8024cf0 <__assert_func>
 8018e20:	1c51      	adds	r1, r2, #1
 8018e22:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018e26:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018e2a:	cb03      	ldmia	r3!, {r0, r1}
 8018e2c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018e30:	6069      	str	r1, [r5, #4]
 8018e32:	b003      	add	sp, #12
 8018e34:	bd30      	pop	{r4, r5, pc}
 8018e36:	bf00      	nop
 8018e38:	0802861c 	.word	0x0802861c
 8018e3c:	080286f4 	.word	0x080286f4
 8018e40:	0802864b 	.word	0x0802864b

08018e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e48:	b089      	sub	sp, #36	; 0x24
 8018e4a:	4606      	mov	r6, r0
 8018e4c:	466c      	mov	r4, sp
 8018e4e:	4620      	mov	r0, r4
 8018e50:	e884 0006 	stmia.w	r4, {r1, r2}
 8018e54:	f7fc fe30 	bl	8015ab8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018e58:	bbb0      	cbnz	r0, 8018ec8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8018e5a:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8018e5e:	b1fd      	cbz	r5, 8018ea0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8018e60:	3d01      	subs	r5, #1
 8018e62:	af04      	add	r7, sp, #16
 8018e64:	f04f 090a 	mov.w	r9, #10
 8018e68:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8018e6c:	ab02      	add	r3, sp, #8
 8018e6e:	fa1f f885 	uxth.w	r8, r5
 8018e72:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018e76:	6851      	ldr	r1, [r2, #4]
 8018e78:	c303      	stmia	r3!, {r0, r1}
 8018e7a:	4621      	mov	r1, r4
 8018e7c:	a802      	add	r0, sp, #8
 8018e7e:	f7ff ff21 	bl	8018cc4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018e82:	bb08      	cbnz	r0, 8018ec8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8018e84:	a902      	add	r1, sp, #8
 8018e86:	4620      	mov	r0, r4
 8018e88:	f7ff ff1c 	bl	8018cc4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018e8c:	b1f8      	cbz	r0, 8018ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8018e8e:	4642      	mov	r2, r8
 8018e90:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018e94:	a806      	add	r0, sp, #24
 8018e96:	f7ff ff95 	bl	8018dc4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018e9a:	f115 35ff 	adds.w	r5, r5, #4294967295
 8018e9e:	d2e3      	bcs.n	8018e68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8018ea0:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8018ea4:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8018ea8:	2b08      	cmp	r3, #8
 8018eaa:	d108      	bne.n	8018ebe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8018eac:	4629      	mov	r1, r5
 8018eae:	a806      	add	r0, sp, #24
 8018eb0:	2207      	movs	r2, #7
 8018eb2:	f7ff ff87 	bl	8018dc4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018eb6:	a906      	add	r1, sp, #24
 8018eb8:	4620      	mov	r0, r4
 8018eba:	f7fd fff8 	bl	8016eae <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018ebe:	4628      	mov	r0, r5
 8018ec0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8018ec4:	f7ff ff9c 	bl	8018e00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018ec8:	b009      	add	sp, #36	; 0x24
 8018eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ece:	4621      	mov	r1, r4
 8018ed0:	a802      	add	r0, sp, #8
 8018ed2:	f7ff fed5 	bl	8018c80 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018ed6:	b150      	cbz	r0, 8018eee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8018ed8:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018edc:	a806      	add	r0, sp, #24
 8018ede:	4642      	mov	r2, r8
 8018ee0:	f7ff ff70 	bl	8018dc4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018ee4:	a902      	add	r1, sp, #8
 8018ee6:	4620      	mov	r0, r4
 8018ee8:	f7fd ffe1 	bl	8016eae <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018eec:	e7d5      	b.n	8018e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018eee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8018ef2:	e887 0003 	stmia.w	r7, {r0, r1}
 8018ef6:	a902      	add	r1, sp, #8
 8018ef8:	4638      	mov	r0, r7
 8018efa:	f7fd ffd8 	bl	8016eae <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018efe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018f02:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018f06:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018f0a:	fb13 f302 	smulbb	r3, r3, r2
 8018f0e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018f12:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018f16:	fb11 f102 	smulbb	r1, r1, r2
 8018f1a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8018f1e:	fb09 f303 	mul.w	r3, r9, r3
 8018f22:	fb12 1100 	smlabb	r1, r2, r0, r1
 8018f26:	220b      	movs	r2, #11
 8018f28:	434a      	muls	r2, r1
 8018f2a:	4293      	cmp	r3, r2
 8018f2c:	dab5      	bge.n	8018e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018f2e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018f32:	a806      	add	r0, sp, #24
 8018f34:	4642      	mov	r2, r8
 8018f36:	f7ff ff45 	bl	8018dc4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018f3a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018f3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018f42:	e7aa      	b.n	8018e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08018f44 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018f44:	4b1d      	ldr	r3, [pc, #116]	; (8018fbc <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8018f46:	b530      	push	{r4, r5, lr}
 8018f48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f4c:	b085      	sub	sp, #20
 8018f4e:	4b1c      	ldr	r3, [pc, #112]	; (8018fc0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8018f50:	460c      	mov	r4, r1
 8018f52:	2100      	movs	r1, #0
 8018f54:	4605      	mov	r5, r0
 8018f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f5a:	6820      	ldr	r0, [r4, #0]
 8018f5c:	9100      	str	r1, [sp, #0]
 8018f5e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018f62:	ab02      	add	r3, sp, #8
 8018f64:	6861      	ldr	r1, [r4, #4]
 8018f66:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018f6a:	c303      	stmia	r3!, {r0, r1}
 8018f6c:	4669      	mov	r1, sp
 8018f6e:	a802      	add	r0, sp, #8
 8018f70:	f7fc fd5e 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 8018f74:	ab02      	add	r3, sp, #8
 8018f76:	cb03      	ldmia	r3!, {r0, r1}
 8018f78:	4b12      	ldr	r3, [pc, #72]	; (8018fc4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8018f7a:	6020      	str	r0, [r4, #0]
 8018f7c:	6818      	ldr	r0, [r3, #0]
 8018f7e:	6061      	str	r1, [r4, #4]
 8018f80:	b138      	cbz	r0, 8018f92 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8018f82:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8018f86:	b133      	cbz	r3, 8018f96 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8018f88:	6821      	ldr	r1, [r4, #0]
 8018f8a:	4628      	mov	r0, r5
 8018f8c:	6862      	ldr	r2, [r4, #4]
 8018f8e:	f7ff ff59 	bl	8018e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018f92:	b005      	add	sp, #20
 8018f94:	bd30      	pop	{r4, r5, pc}
 8018f96:	6803      	ldr	r3, [r0, #0]
 8018f98:	4621      	mov	r1, r4
 8018f9a:	689b      	ldr	r3, [r3, #8]
 8018f9c:	4798      	blx	r3
 8018f9e:	4b0a      	ldr	r3, [pc, #40]	; (8018fc8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8018fa0:	6818      	ldr	r0, [r3, #0]
 8018fa2:	b118      	cbz	r0, 8018fac <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8018fa4:	6803      	ldr	r3, [r0, #0]
 8018fa6:	4621      	mov	r1, r4
 8018fa8:	689b      	ldr	r3, [r3, #8]
 8018faa:	4798      	blx	r3
 8018fac:	4b07      	ldr	r3, [pc, #28]	; (8018fcc <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8018fae:	4621      	mov	r1, r4
 8018fb0:	6818      	ldr	r0, [r3, #0]
 8018fb2:	6803      	ldr	r3, [r0, #0]
 8018fb4:	695b      	ldr	r3, [r3, #20]
 8018fb6:	4798      	blx	r3
 8018fb8:	e7eb      	b.n	8018f92 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8018fba:	bf00      	nop
 8018fbc:	2000bcbc 	.word	0x2000bcbc
 8018fc0:	2000bcbe 	.word	0x2000bcbe
 8018fc4:	2000bd44 	.word	0x2000bd44
 8018fc8:	2000bd40 	.word	0x2000bd40
 8018fcc:	2000bcc8 	.word	0x2000bcc8

08018fd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8018fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd4:	4604      	mov	r4, r0
 8018fd6:	b09b      	sub	sp, #108	; 0x6c
 8018fd8:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8018fdc:	b129      	cbz	r1, 8018fea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8018fde:	2300      	movs	r3, #0
 8018fe0:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8018fe4:	b01b      	add	sp, #108	; 0x6c
 8018fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fea:	4baf      	ldr	r3, [pc, #700]	; (80192a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	b33b      	cbz	r3, 8019040 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8018ff0:	4dae      	ldr	r5, [pc, #696]	; (80192ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8018ff2:	4628      	mov	r0, r5
 8018ff4:	f7fc fd60 	bl	8015ab8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018ff8:	4606      	mov	r6, r0
 8018ffa:	bb08      	cbnz	r0, 8019040 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8018ffc:	4628      	mov	r0, r5
 8018ffe:	f7ff fce9 	bl	80189d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019002:	6829      	ldr	r1, [r5, #0]
 8019004:	686a      	ldr	r2, [r5, #4]
 8019006:	4620      	mov	r0, r4
 8019008:	f7ff ff1c 	bl	8018e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801900c:	802e      	strh	r6, [r5, #0]
 801900e:	806e      	strh	r6, [r5, #2]
 8019010:	80ae      	strh	r6, [r5, #4]
 8019012:	80ee      	strh	r6, [r5, #6]
 8019014:	4fa6      	ldr	r7, [pc, #664]	; (80192b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8019016:	a809      	add	r0, sp, #36	; 0x24
 8019018:	f7ff fe87 	bl	8018d2a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801901c:	883d      	ldrh	r5, [r7, #0]
 801901e:	462e      	mov	r6, r5
 8019020:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019024:	42b3      	cmp	r3, r6
 8019026:	d910      	bls.n	801904a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8019028:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801902c:	3601      	adds	r6, #1
 801902e:	a809      	add	r0, sp, #36	; 0x24
 8019030:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019034:	b2b6      	uxth	r6, r6
 8019036:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801903a:	f7ff fee1 	bl	8018e00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801903e:	e7ef      	b.n	8019020 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8019040:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019044:	2b00      	cmp	r3, #0
 8019046:	d1e5      	bne.n	8019014 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8019048:	e7cc      	b.n	8018fe4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801904a:	462e      	mov	r6, r5
 801904c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8019050:	42b3      	cmp	r3, r6
 8019052:	d90b      	bls.n	801906c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8019054:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019058:	3601      	adds	r6, #1
 801905a:	4620      	mov	r0, r4
 801905c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019060:	b2b6      	uxth	r6, r6
 8019062:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8019066:	f7ff feed 	bl	8018e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801906a:	e7ef      	b.n	801904c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801906c:	4e91      	ldr	r6, [pc, #580]	; (80192b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801906e:	6833      	ldr	r3, [r6, #0]
 8019070:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8019074:	2b01      	cmp	r3, #1
 8019076:	f040 8092 	bne.w	801919e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801907a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801907e:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8019082:	f04f 0900 	mov.w	r9, #0
 8019086:	33aa      	adds	r3, #170	; 0xaa
 8019088:	42a8      	cmp	r0, r5
 801908a:	f103 0308 	add.w	r3, r3, #8
 801908e:	dd0a      	ble.n	80190a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8019090:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8019094:	3501      	adds	r5, #1
 8019096:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801909a:	440a      	add	r2, r1
 801909c:	b212      	sxth	r2, r2
 801909e:	4591      	cmp	r9, r2
 80190a0:	bfb8      	it	lt
 80190a2:	4691      	movlt	r9, r2
 80190a4:	e7f0      	b.n	8019088 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 80190a6:	4b84      	ldr	r3, [pc, #528]	; (80192b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80190a8:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80192c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 80190ac:	881d      	ldrh	r5, [r3, #0]
 80190ae:	2300      	movs	r3, #0
 80190b0:	2d0f      	cmp	r5, #15
 80190b2:	bf8c      	ite	hi
 80190b4:	08ed      	lsrhi	r5, r5, #3
 80190b6:	2501      	movls	r5, #1
 80190b8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80190bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80190c0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80190c4:	6830      	ldr	r0, [r6, #0]
 80190c6:	440b      	add	r3, r1
 80190c8:	6802      	ldr	r2, [r0, #0]
 80190ca:	b21b      	sxth	r3, r3
 80190cc:	4599      	cmp	r9, r3
 80190ce:	dd49      	ble.n	8019164 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 80190d0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80190d4:	4798      	blx	r3
 80190d6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80190da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80190de:	4413      	add	r3, r2
 80190e0:	b21b      	sxth	r3, r3
 80190e2:	195a      	adds	r2, r3, r5
 80190e4:	4290      	cmp	r0, r2
 80190e6:	da07      	bge.n	80190f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80190e8:	4581      	cmp	r9, r0
 80190ea:	dd05      	ble.n	80190f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80190ec:	4298      	cmp	r0, r3
 80190ee:	da33      	bge.n	8019158 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	dd31      	ble.n	8019158 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80190f4:	4648      	mov	r0, r9
 80190f6:	e004      	b.n	8019102 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 80190f8:	4298      	cmp	r0, r3
 80190fa:	dbfb      	blt.n	80190f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 80190fc:	4548      	cmp	r0, r9
 80190fe:	bfa8      	it	ge
 8019100:	4648      	movge	r0, r9
 8019102:	f9b8 2000 	ldrsh.w	r2, [r8]
 8019106:	2100      	movs	r1, #0
 8019108:	1ac0      	subs	r0, r0, r3
 801910a:	f8b7 a000 	ldrh.w	sl, [r7]
 801910e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019112:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019116:	f8ad 2018 	strh.w	r2, [sp, #24]
 801911a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801911e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019122:	4553      	cmp	r3, sl
 8019124:	d9ca      	bls.n	80190bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8019126:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801912a:	ab07      	add	r3, sp, #28
 801912c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019130:	6851      	ldr	r1, [r2, #4]
 8019132:	c303      	stmia	r3!, {r0, r1}
 8019134:	a807      	add	r0, sp, #28
 8019136:	a905      	add	r1, sp, #20
 8019138:	f7fc fc7a 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 801913c:	a807      	add	r0, sp, #28
 801913e:	f7fc fcbb 	bl	8015ab8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019142:	b920      	cbnz	r0, 801914e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8019144:	6823      	ldr	r3, [r4, #0]
 8019146:	a907      	add	r1, sp, #28
 8019148:	4620      	mov	r0, r4
 801914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801914c:	4798      	blx	r3
 801914e:	f10a 0a01 	add.w	sl, sl, #1
 8019152:	fa1f fa8a 	uxth.w	sl, sl
 8019156:	e7e2      	b.n	801911e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8019158:	6830      	ldr	r0, [r6, #0]
 801915a:	2101      	movs	r1, #1
 801915c:	6803      	ldr	r3, [r0, #0]
 801915e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019160:	4798      	blx	r3
 8019162:	e7ab      	b.n	80190bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8019164:	69d3      	ldr	r3, [r2, #28]
 8019166:	4798      	blx	r3
 8019168:	4b54      	ldr	r3, [pc, #336]	; (80192bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801916a:	781b      	ldrb	r3, [r3, #0]
 801916c:	2b00      	cmp	r3, #0
 801916e:	f43f af39 	beq.w	8018fe4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019172:	2300      	movs	r3, #0
 8019174:	883d      	ldrh	r5, [r7, #0]
 8019176:	34ea      	adds	r4, #234	; 0xea
 8019178:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801917c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8019180:	42ab      	cmp	r3, r5
 8019182:	f67f af2f 	bls.w	8018fe4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019186:	ab1a      	add	r3, sp, #104	; 0x68
 8019188:	4620      	mov	r0, r4
 801918a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801918e:	3501      	adds	r5, #1
 8019190:	3b44      	subs	r3, #68	; 0x44
 8019192:	b2ad      	uxth	r5, r5
 8019194:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019198:	f7ff fe32 	bl	8018e00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801919c:	e7ee      	b.n	801917c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801919e:	2b02      	cmp	r3, #2
 80191a0:	d16a      	bne.n	8019278 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80191a2:	f8df a120 	ldr.w	sl, [pc, #288]	; 80192c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80191a6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80191aa:	42ab      	cmp	r3, r5
 80191ac:	d9dc      	bls.n	8019168 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80191ae:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80191b2:	ab03      	add	r3, sp, #12
 80191b4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80191b8:	6851      	ldr	r1, [r2, #4]
 80191ba:	c303      	stmia	r3!, {r0, r1}
 80191bc:	f89a 3000 	ldrb.w	r3, [sl]
 80191c0:	2b01      	cmp	r3, #1
 80191c2:	d102      	bne.n	80191ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 80191c4:	a803      	add	r0, sp, #12
 80191c6:	f7ff fc5f 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80191ca:	a803      	add	r0, sp, #12
 80191cc:	f7fc fc74 	bl	8015ab8 <_ZNK8touchgfx4Rect7isEmptyEv>
 80191d0:	2800      	cmp	r0, #0
 80191d2:	d14a      	bne.n	801926a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 80191d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80191d8:	f10d 0914 	add.w	r9, sp, #20
 80191dc:	f10d 081c 	add.w	r8, sp, #28
 80191e0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80191e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80191e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80191ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80191f0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80191f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80191f8:	f8bd b012 	ldrh.w	fp, [sp, #18]
 80191fc:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8019200:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019204:	44dc      	add	ip, fp
 8019206:	6830      	ldr	r0, [r6, #0]
 8019208:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801920c:	ebac 0c02 	sub.w	ip, ip, r2
 8019210:	f8d0 e000 	ldr.w	lr, [r0]
 8019214:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019218:	fa1f fc8c 	uxth.w	ip, ip
 801921c:	f8cd c000 	str.w	ip, [sp]
 8019220:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8019224:	47d8      	blx	fp
 8019226:	f89a 3000 	ldrb.w	r3, [sl]
 801922a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801922e:	2b01      	cmp	r3, #1
 8019230:	d11e      	bne.n	8019270 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 8019232:	e899 0003 	ldmia.w	r9, {r0, r1}
 8019236:	e888 0003 	stmia.w	r8, {r0, r1}
 801923a:	4640      	mov	r0, r8
 801923c:	f7ff fbca 	bl	80189d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019240:	6823      	ldr	r3, [r4, #0]
 8019242:	4641      	mov	r1, r8
 8019244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019246:	4620      	mov	r0, r4
 8019248:	4798      	blx	r3
 801924a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801924e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019252:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8019256:	4413      	add	r3, r2
 8019258:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801925c:	440a      	add	r2, r1
 801925e:	b21b      	sxth	r3, r3
 8019260:	b212      	sxth	r2, r2
 8019262:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019266:	4293      	cmp	r3, r2
 8019268:	dbc6      	blt.n	80191f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801926a:	3501      	adds	r5, #1
 801926c:	b2ad      	uxth	r5, r5
 801926e:	e79a      	b.n	80191a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 8019270:	6823      	ldr	r3, [r4, #0]
 8019272:	4649      	mov	r1, r9
 8019274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019276:	e7e6      	b.n	8019246 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8019278:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801927c:	42ab      	cmp	r3, r5
 801927e:	f67f af73 	bls.w	8019168 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8019282:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019286:	ab07      	add	r3, sp, #28
 8019288:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801928c:	6851      	ldr	r1, [r2, #4]
 801928e:	c303      	stmia	r3!, {r0, r1}
 8019290:	a807      	add	r0, sp, #28
 8019292:	f7fc fc11 	bl	8015ab8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019296:	b920      	cbnz	r0, 80192a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8019298:	6823      	ldr	r3, [r4, #0]
 801929a:	a907      	add	r1, sp, #28
 801929c:	4620      	mov	r0, r4
 801929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192a0:	4798      	blx	r3
 80192a2:	3501      	adds	r5, #1
 80192a4:	b2ad      	uxth	r5, r5
 80192a6:	e7e7      	b.n	8019278 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80192a8:	2000bd40 	.word	0x2000bd40
 80192ac:	2000bd4c 	.word	0x2000bd4c
 80192b0:	20000044 	.word	0x20000044
 80192b4:	2000bcc8 	.word	0x2000bcc8
 80192b8:	2000bcbe 	.word	0x2000bcbe
 80192bc:	2000bcc6 	.word	0x2000bcc6
 80192c0:	2000bcbc 	.word	0x2000bcbc
 80192c4:	2000bcc0 	.word	0x2000bcc0

080192c8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80192c8:	4b03      	ldr	r3, [pc, #12]	; (80192d8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80192ca:	2200      	movs	r2, #0
 80192cc:	801a      	strh	r2, [r3, #0]
 80192ce:	805a      	strh	r2, [r3, #2]
 80192d0:	809a      	strh	r2, [r3, #4]
 80192d2:	80da      	strh	r2, [r3, #6]
 80192d4:	4770      	bx	lr
 80192d6:	bf00      	nop
 80192d8:	2000bd4c 	.word	0x2000bd4c

080192dc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 80192dc:	2000      	movs	r0, #0
 80192de:	4770      	bx	lr

080192e0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 80192e0:	2000      	movs	r0, #0
 80192e2:	4770      	bx	lr

080192e4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80192e4:	b508      	push	{r3, lr}
 80192e6:	6803      	ldr	r3, [r0, #0]
 80192e8:	68db      	ldr	r3, [r3, #12]
 80192ea:	4798      	blx	r3
 80192ec:	b128      	cbz	r0, 80192fa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80192ee:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80192f2:	7a80      	ldrb	r0, [r0, #10]
 80192f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80192f8:	4318      	orrs	r0, r3
 80192fa:	bd08      	pop	{r3, pc}

080192fc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 80192fc:	b40e      	push	{r1, r2, r3}
 80192fe:	b533      	push	{r0, r1, r4, r5, lr}
 8019300:	ab05      	add	r3, sp, #20
 8019302:	f853 2b04 	ldr.w	r2, [r3], #4
 8019306:	9301      	str	r3, [sp, #4]
 8019308:	4b0a      	ldr	r3, [pc, #40]	; (8019334 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801930a:	685c      	ldr	r4, [r3, #4]
 801930c:	1061      	asrs	r1, r4, #1
 801930e:	07e4      	lsls	r4, r4, #31
 8019310:	eb00 0501 	add.w	r5, r0, r1
 8019314:	bf46      	itte	mi
 8019316:	681b      	ldrmi	r3, [r3, #0]
 8019318:	5841      	ldrmi	r1, [r0, r1]
 801931a:	681c      	ldrpl	r4, [r3, #0]
 801931c:	4628      	mov	r0, r5
 801931e:	bf48      	it	mi
 8019320:	58cc      	ldrmi	r4, [r1, r3]
 8019322:	2100      	movs	r1, #0
 8019324:	9b01      	ldr	r3, [sp, #4]
 8019326:	47a0      	blx	r4
 8019328:	b002      	add	sp, #8
 801932a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801932e:	b003      	add	sp, #12
 8019330:	4770      	bx	lr
 8019332:	bf00      	nop
 8019334:	20000028 	.word	0x20000028

08019338 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8019338:	b40c      	push	{r2, r3}
 801933a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801933c:	ab06      	add	r3, sp, #24
 801933e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019342:	9301      	str	r3, [sp, #4]
 8019344:	4b09      	ldr	r3, [pc, #36]	; (801936c <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8019346:	685d      	ldr	r5, [r3, #4]
 8019348:	106c      	asrs	r4, r5, #1
 801934a:	07ed      	lsls	r5, r5, #31
 801934c:	eb00 0604 	add.w	r6, r0, r4
 8019350:	bf45      	ittet	mi
 8019352:	681b      	ldrmi	r3, [r3, #0]
 8019354:	5900      	ldrmi	r0, [r0, r4]
 8019356:	681c      	ldrpl	r4, [r3, #0]
 8019358:	58c4      	ldrmi	r4, [r0, r3]
 801935a:	4630      	mov	r0, r6
 801935c:	9b01      	ldr	r3, [sp, #4]
 801935e:	47a0      	blx	r4
 8019360:	b002      	add	sp, #8
 8019362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019366:	b002      	add	sp, #8
 8019368:	4770      	bx	lr
 801936a:	bf00      	nop
 801936c:	20000028 	.word	0x20000028

08019370 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019370:	b40e      	push	{r1, r2, r3}
 8019372:	b530      	push	{r4, r5, lr}
 8019374:	b098      	sub	sp, #96	; 0x60
 8019376:	4604      	mov	r4, r0
 8019378:	ab1b      	add	r3, sp, #108	; 0x6c
 801937a:	a802      	add	r0, sp, #8
 801937c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019380:	9301      	str	r3, [sp, #4]
 8019382:	f001 f837 	bl	801a3f4 <_ZN8touchgfx12TextProviderC1Ev>
 8019386:	6823      	ldr	r3, [r4, #0]
 8019388:	4620      	mov	r0, r4
 801938a:	2401      	movs	r4, #1
 801938c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801938e:	4798      	blx	r3
 8019390:	9a01      	ldr	r2, [sp, #4]
 8019392:	4603      	mov	r3, r0
 8019394:	4629      	mov	r1, r5
 8019396:	a802      	add	r0, sp, #8
 8019398:	f001 f849 	bl	801a42e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801939c:	a802      	add	r0, sp, #8
 801939e:	f001 f87f 	bl	801a4a0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80193a2:	b2a3      	uxth	r3, r4
 80193a4:	b138      	cbz	r0, 80193b6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 80193a6:	280a      	cmp	r0, #10
 80193a8:	a802      	add	r0, sp, #8
 80193aa:	bf04      	itt	eq
 80193ac:	3301      	addeq	r3, #1
 80193ae:	b21c      	sxtheq	r4, r3
 80193b0:	f001 f876 	bl	801a4a0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80193b4:	e7f5      	b.n	80193a2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 80193b6:	4618      	mov	r0, r3
 80193b8:	b018      	add	sp, #96	; 0x60
 80193ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80193be:	b003      	add	sp, #12
 80193c0:	4770      	bx	lr
	...

080193c4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80193c4:	b40e      	push	{r1, r2, r3}
 80193c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193c8:	b098      	sub	sp, #96	; 0x60
 80193ca:	4605      	mov	r5, r0
 80193cc:	4f25      	ldr	r7, [pc, #148]	; (8019464 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 80193ce:	ab1d      	add	r3, sp, #116	; 0x74
 80193d0:	a802      	add	r0, sp, #8
 80193d2:	ae18      	add	r6, sp, #96	; 0x60
 80193d4:	f853 4b04 	ldr.w	r4, [r3], #4
 80193d8:	9300      	str	r3, [sp, #0]
 80193da:	f001 f80b 	bl	801a3f4 <_ZN8touchgfx12TextProviderC1Ev>
 80193de:	682b      	ldr	r3, [r5, #0]
 80193e0:	4628      	mov	r0, r5
 80193e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193e4:	4798      	blx	r3
 80193e6:	4621      	mov	r1, r4
 80193e8:	2400      	movs	r4, #0
 80193ea:	4603      	mov	r3, r0
 80193ec:	9a00      	ldr	r2, [sp, #0]
 80193ee:	a802      	add	r0, sp, #8
 80193f0:	f001 f81d 	bl	801a42e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80193f4:	f846 4d5c 	str.w	r4, [r6, #-92]!
 80193f8:	462a      	mov	r2, r5
 80193fa:	4633      	mov	r3, r6
 80193fc:	4621      	mov	r1, r4
 80193fe:	a802      	add	r0, sp, #8
 8019400:	f001 f97a 	bl	801a6f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019404:	b340      	cbz	r0, 8019458 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 8019406:	280a      	cmp	r0, #10
 8019408:	d01f      	beq.n	801944a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801940a:	9901      	ldr	r1, [sp, #4]
 801940c:	b1e9      	cbz	r1, 801944a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801940e:	7b4b      	ldrb	r3, [r1, #13]
 8019410:	f891 c008 	ldrb.w	ip, [r1, #8]
 8019414:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019418:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801941c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019420:	79c9      	ldrb	r1, [r1, #7]
 8019422:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8019426:	bf18      	it	ne
 8019428:	4638      	movne	r0, r7
 801942a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801942e:	bf08      	it	eq
 8019430:	2000      	moveq	r0, #0
 8019432:	88aa      	ldrh	r2, [r5, #4]
 8019434:	ea41 010e 	orr.w	r1, r1, lr
 8019438:	ea43 030c 	orr.w	r3, r3, ip
 801943c:	440a      	add	r2, r1
 801943e:	4303      	orrs	r3, r0
 8019440:	1ad3      	subs	r3, r2, r3
 8019442:	b29b      	uxth	r3, r3
 8019444:	42a3      	cmp	r3, r4
 8019446:	bfc8      	it	gt
 8019448:	b21c      	sxthgt	r4, r3
 801944a:	4633      	mov	r3, r6
 801944c:	462a      	mov	r2, r5
 801944e:	2100      	movs	r1, #0
 8019450:	a802      	add	r0, sp, #8
 8019452:	f001 f951 	bl	801a6f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019456:	e7d5      	b.n	8019404 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8019458:	b2a0      	uxth	r0, r4
 801945a:	b018      	add	sp, #96	; 0x60
 801945c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019460:	b003      	add	sp, #12
 8019462:	4770      	bx	lr
 8019464:	fffffe00 	.word	0xfffffe00

08019468 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019468:	b40e      	push	{r1, r2, r3}
 801946a:	b570      	push	{r4, r5, r6, lr}
 801946c:	b099      	sub	sp, #100	; 0x64
 801946e:	4604      	mov	r4, r0
 8019470:	26ff      	movs	r6, #255	; 0xff
 8019472:	ab1d      	add	r3, sp, #116	; 0x74
 8019474:	a802      	add	r0, sp, #8
 8019476:	f853 5b04 	ldr.w	r5, [r3], #4
 801947a:	9300      	str	r3, [sp, #0]
 801947c:	f000 ffba 	bl	801a3f4 <_ZN8touchgfx12TextProviderC1Ev>
 8019480:	6823      	ldr	r3, [r4, #0]
 8019482:	4620      	mov	r0, r4
 8019484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019486:	4798      	blx	r3
 8019488:	4629      	mov	r1, r5
 801948a:	4603      	mov	r3, r0
 801948c:	9a00      	ldr	r2, [sp, #0]
 801948e:	a802      	add	r0, sp, #8
 8019490:	ad18      	add	r5, sp, #96	; 0x60
 8019492:	f000 ffcc 	bl	801a42e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019496:	2100      	movs	r1, #0
 8019498:	4622      	mov	r2, r4
 801949a:	a802      	add	r0, sp, #8
 801949c:	f845 1d5c 	str.w	r1, [r5, #-92]!
 80194a0:	462b      	mov	r3, r5
 80194a2:	f001 f929 	bl	801a6f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80194a6:	b190      	cbz	r0, 80194ce <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 80194a8:	280a      	cmp	r0, #10
 80194aa:	d009      	beq.n	80194c0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80194ac:	9a01      	ldr	r2, [sp, #4]
 80194ae:	b13a      	cbz	r2, 80194c0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80194b0:	7923      	ldrb	r3, [r4, #4]
 80194b2:	7a12      	ldrb	r2, [r2, #8]
 80194b4:	1a9b      	subs	r3, r3, r2
 80194b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80194ba:	429e      	cmp	r6, r3
 80194bc:	bf28      	it	cs
 80194be:	461e      	movcs	r6, r3
 80194c0:	462b      	mov	r3, r5
 80194c2:	4622      	mov	r2, r4
 80194c4:	2100      	movs	r1, #0
 80194c6:	a802      	add	r0, sp, #8
 80194c8:	f001 f916 	bl	801a6f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80194cc:	e7eb      	b.n	80194a6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 80194ce:	4630      	mov	r0, r6
 80194d0:	b019      	add	sp, #100	; 0x64
 80194d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194d6:	b003      	add	sp, #12
 80194d8:	4770      	bx	lr

080194da <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80194da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194de:	b099      	sub	sp, #100	; 0x64
 80194e0:	4606      	mov	r6, r0
 80194e2:	4614      	mov	r4, r2
 80194e4:	4688      	mov	r8, r1
 80194e6:	a802      	add	r0, sp, #8
 80194e8:	461d      	mov	r5, r3
 80194ea:	f04f 0b00 	mov.w	fp, #0
 80194ee:	f000 ff81 	bl	801a3f4 <_ZN8touchgfx12TextProviderC1Ev>
 80194f2:	6833      	ldr	r3, [r6, #0]
 80194f4:	4630      	mov	r0, r6
 80194f6:	465f      	mov	r7, fp
 80194f8:	46da      	mov	sl, fp
 80194fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80194fc:	46d9      	mov	r9, fp
 80194fe:	4798      	blx	r3
 8019500:	462a      	mov	r2, r5
 8019502:	4603      	mov	r3, r0
 8019504:	4621      	mov	r1, r4
 8019506:	a802      	add	r0, sp, #8
 8019508:	f000 ff91 	bl	801a42e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801950c:	ab01      	add	r3, sp, #4
 801950e:	4632      	mov	r2, r6
 8019510:	4641      	mov	r1, r8
 8019512:	a802      	add	r0, sp, #8
 8019514:	f8cd 9004 	str.w	r9, [sp, #4]
 8019518:	f001 f8ee 	bl	801a6f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801951c:	4605      	mov	r5, r0
 801951e:	b108      	cbz	r0, 8019524 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8019520:	280a      	cmp	r0, #10
 8019522:	d10b      	bne.n	801953c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8019524:	4557      	cmp	r7, sl
 8019526:	bf38      	it	cc
 8019528:	4657      	movcc	r7, sl
 801952a:	f04f 0a00 	mov.w	sl, #0
 801952e:	b91d      	cbnz	r5, 8019538 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8019530:	4638      	mov	r0, r7
 8019532:	b019      	add	sp, #100	; 0x64
 8019534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019538:	46ab      	mov	fp, r5
 801953a:	e7e7      	b.n	801950c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801953c:	9a01      	ldr	r2, [sp, #4]
 801953e:	2a00      	cmp	r2, #0
 8019540:	d0fa      	beq.n	8019538 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8019542:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8019546:	4659      	mov	r1, fp
 8019548:	6833      	ldr	r3, [r6, #0]
 801954a:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801954e:	7a94      	ldrb	r4, [r2, #10]
 8019550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019552:	4304      	orrs	r4, r0
 8019554:	4630      	mov	r0, r6
 8019556:	8895      	ldrh	r5, [r2, #4]
 8019558:	4798      	blx	r3
 801955a:	4420      	add	r0, r4
 801955c:	4450      	add	r0, sl
 801955e:	fa1f fa80 	uxth.w	sl, r0
 8019562:	e7e4      	b.n	801952e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08019564 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019564:	b513      	push	{r0, r1, r4, lr}
 8019566:	1d01      	adds	r1, r0, #4
 8019568:	4603      	mov	r3, r0
 801956a:	466a      	mov	r2, sp
 801956c:	c903      	ldmia	r1, {r0, r1}
 801956e:	e882 0003 	stmia.w	r2, {r0, r1}
 8019572:	2100      	movs	r1, #0
 8019574:	4618      	mov	r0, r3
 8019576:	9100      	str	r1, [sp, #0]
 8019578:	6819      	ldr	r1, [r3, #0]
 801957a:	690c      	ldr	r4, [r1, #16]
 801957c:	4611      	mov	r1, r2
 801957e:	47a0      	blx	r4
 8019580:	b002      	add	sp, #8
 8019582:	bd10      	pop	{r4, pc}

08019584 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019584:	b538      	push	{r3, r4, r5, lr}
 8019586:	680b      	ldr	r3, [r1, #0]
 8019588:	460c      	mov	r4, r1
 801958a:	4605      	mov	r5, r0
 801958c:	68db      	ldr	r3, [r3, #12]
 801958e:	4798      	blx	r3
 8019590:	6823      	ldr	r3, [r4, #0]
 8019592:	4620      	mov	r0, r4
 8019594:	4629      	mov	r1, r5
 8019596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019598:	4798      	blx	r3
 801959a:	4628      	mov	r0, r5
 801959c:	bd38      	pop	{r3, r4, r5, pc}

0801959e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801959e:	b410      	push	{r4}
 80195a0:	880a      	ldrh	r2, [r1, #0]
 80195a2:	8884      	ldrh	r4, [r0, #4]
 80195a4:	4422      	add	r2, r4
 80195a6:	800a      	strh	r2, [r1, #0]
 80195a8:	884a      	ldrh	r2, [r1, #2]
 80195aa:	88c4      	ldrh	r4, [r0, #6]
 80195ac:	4422      	add	r2, r4
 80195ae:	804a      	strh	r2, [r1, #2]
 80195b0:	6940      	ldr	r0, [r0, #20]
 80195b2:	b120      	cbz	r0, 80195be <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80195b4:	6803      	ldr	r3, [r0, #0]
 80195b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195bc:	4718      	bx	r3
 80195be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195c2:	4770      	bx	lr

080195c4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80195c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195c6:	460b      	mov	r3, r1
 80195c8:	b085      	sub	sp, #20
 80195ca:	4604      	mov	r4, r0
 80195cc:	b901      	cbnz	r1, 80195d0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80195ce:	b1fa      	cbz	r2, 8019610 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 80195d0:	1d27      	adds	r7, r4, #4
 80195d2:	466e      	mov	r6, sp
 80195d4:	ad02      	add	r5, sp, #8
 80195d6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80195da:	e886 0003 	stmia.w	r6, {r0, r1}
 80195de:	88e1      	ldrh	r1, [r4, #6]
 80195e0:	4620      	mov	r0, r4
 80195e2:	440a      	add	r2, r1
 80195e4:	88a1      	ldrh	r1, [r4, #4]
 80195e6:	4419      	add	r1, r3
 80195e8:	6823      	ldr	r3, [r4, #0]
 80195ea:	b212      	sxth	r2, r2
 80195ec:	b209      	sxth	r1, r1
 80195ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195f0:	4798      	blx	r3
 80195f2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80195f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80195fa:	6960      	ldr	r0, [r4, #20]
 80195fc:	b150      	cbz	r0, 8019614 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 80195fe:	6803      	ldr	r3, [r0, #0]
 8019600:	4631      	mov	r1, r6
 8019602:	691b      	ldr	r3, [r3, #16]
 8019604:	4798      	blx	r3
 8019606:	6960      	ldr	r0, [r4, #20]
 8019608:	6803      	ldr	r3, [r0, #0]
 801960a:	691b      	ldr	r3, [r3, #16]
 801960c:	4629      	mov	r1, r5
 801960e:	4798      	blx	r3
 8019610:	b005      	add	sp, #20
 8019612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019614:	f7ff fb78 	bl	8018d08 <_ZN8touchgfx11Application11getInstanceEv>
 8019618:	6803      	ldr	r3, [r0, #0]
 801961a:	4631      	mov	r1, r6
 801961c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801961e:	4798      	blx	r3
 8019620:	f7ff fb72 	bl	8018d08 <_ZN8touchgfx11Application11getInstanceEv>
 8019624:	6803      	ldr	r3, [r0, #0]
 8019626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019628:	e7f0      	b.n	801960c <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801962a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801962a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801962c:	8882      	ldrh	r2, [r0, #4]
 801962e:	4605      	mov	r5, r0
 8019630:	880b      	ldrh	r3, [r1, #0]
 8019632:	460c      	mov	r4, r1
 8019634:	4413      	add	r3, r2
 8019636:	800b      	strh	r3, [r1, #0]
 8019638:	884b      	ldrh	r3, [r1, #2]
 801963a:	88c2      	ldrh	r2, [r0, #6]
 801963c:	4413      	add	r3, r2
 801963e:	4602      	mov	r2, r0
 8019640:	804b      	strh	r3, [r1, #2]
 8019642:	466b      	mov	r3, sp
 8019644:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019648:	6851      	ldr	r1, [r2, #4]
 801964a:	c303      	stmia	r3!, {r0, r1}
 801964c:	4621      	mov	r1, r4
 801964e:	4668      	mov	r0, sp
 8019650:	f7fc f9ee 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 8019654:	466b      	mov	r3, sp
 8019656:	cb03      	ldmia	r3!, {r0, r1}
 8019658:	6020      	str	r0, [r4, #0]
 801965a:	6061      	str	r1, [r4, #4]
 801965c:	6968      	ldr	r0, [r5, #20]
 801965e:	b128      	cbz	r0, 801966c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019660:	6803      	ldr	r3, [r0, #0]
 8019662:	691b      	ldr	r3, [r3, #16]
 8019664:	4621      	mov	r1, r4
 8019666:	4798      	blx	r3
 8019668:	b003      	add	sp, #12
 801966a:	bd30      	pop	{r4, r5, pc}
 801966c:	f7ff fb4c 	bl	8018d08 <_ZN8touchgfx11Application11getInstanceEv>
 8019670:	6803      	ldr	r3, [r0, #0]
 8019672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019674:	e7f6      	b.n	8019664 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08019676 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019676:	b570      	push	{r4, r5, r6, lr}
 8019678:	8882      	ldrh	r2, [r0, #4]
 801967a:	460c      	mov	r4, r1
 801967c:	880b      	ldrh	r3, [r1, #0]
 801967e:	4605      	mov	r5, r0
 8019680:	4413      	add	r3, r2
 8019682:	800b      	strh	r3, [r1, #0]
 8019684:	884b      	ldrh	r3, [r1, #2]
 8019686:	88c2      	ldrh	r2, [r0, #6]
 8019688:	4413      	add	r3, r2
 801968a:	804b      	strh	r3, [r1, #2]
 801968c:	1d01      	adds	r1, r0, #4
 801968e:	4620      	mov	r0, r4
 8019690:	f7fc f9ce 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 8019694:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019698:	b153      	cbz	r3, 80196b0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801969a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801969e:	b13b      	cbz	r3, 80196b0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80196a0:	6968      	ldr	r0, [r5, #20]
 80196a2:	b128      	cbz	r0, 80196b0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80196a4:	6803      	ldr	r3, [r0, #0]
 80196a6:	4621      	mov	r1, r4
 80196a8:	6a1b      	ldr	r3, [r3, #32]
 80196aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196ae:	4718      	bx	r3
 80196b0:	bd70      	pop	{r4, r5, r6, pc}

080196b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80196b2:	b510      	push	{r4, lr}
 80196b4:	2300      	movs	r3, #0
 80196b6:	4604      	mov	r4, r0
 80196b8:	4608      	mov	r0, r1
 80196ba:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80196be:	8023      	strh	r3, [r4, #0]
 80196c0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80196c4:	8063      	strh	r3, [r4, #2]
 80196c6:	6803      	ldr	r3, [r0, #0]
 80196c8:	80a1      	strh	r1, [r4, #4]
 80196ca:	4621      	mov	r1, r4
 80196cc:	80e2      	strh	r2, [r4, #6]
 80196ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196d0:	4798      	blx	r3
 80196d2:	4620      	mov	r0, r4
 80196d4:	bd10      	pop	{r4, pc}
	...

080196d8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80196d8:	b530      	push	{r4, r5, lr}
 80196da:	8083      	strh	r3, [r0, #4]
 80196dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80196e0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80196e4:	7183      	strb	r3, [r0, #6]
 80196e6:	79c3      	ldrb	r3, [r0, #7]
 80196e8:	6101      	str	r1, [r0, #16]
 80196ea:	f365 0306 	bfi	r3, r5, #0, #7
 80196ee:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80196f2:	8282      	strh	r2, [r0, #20]
 80196f4:	f365 13c7 	bfi	r3, r5, #7, #1
 80196f8:	71c3      	strb	r3, [r0, #7]
 80196fa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80196fe:	7203      	strb	r3, [r0, #8]
 8019700:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019704:	7243      	strb	r3, [r0, #9]
 8019706:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801970a:	8143      	strh	r3, [r0, #10]
 801970c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019710:	8183      	strh	r3, [r0, #12]
 8019712:	4b01      	ldr	r3, [pc, #4]	; (8019718 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019714:	6003      	str	r3, [r0, #0]
 8019716:	bd30      	pop	{r4, r5, pc}
 8019718:	0802881c 	.word	0x0802881c

0801971c <_ZNK8touchgfx9ConstFont4findEt>:
 801971c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801971e:	8a84      	ldrh	r4, [r0, #20]
 8019720:	2500      	movs	r5, #0
 8019722:	260e      	movs	r6, #14
 8019724:	3c01      	subs	r4, #1
 8019726:	42a5      	cmp	r5, r4
 8019728:	dc0c      	bgt.n	8019744 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801972a:	192a      	adds	r2, r5, r4
 801972c:	6903      	ldr	r3, [r0, #16]
 801972e:	1052      	asrs	r2, r2, #1
 8019730:	fb06 3302 	mla	r3, r6, r2, r3
 8019734:	889f      	ldrh	r7, [r3, #4]
 8019736:	428f      	cmp	r7, r1
 8019738:	d901      	bls.n	801973e <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801973a:	1e54      	subs	r4, r2, #1
 801973c:	e7f3      	b.n	8019726 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801973e:	d202      	bcs.n	8019746 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8019740:	1c55      	adds	r5, r2, #1
 8019742:	e7f0      	b.n	8019726 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019744:	2300      	movs	r3, #0
 8019746:	4618      	mov	r0, r3
 8019748:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801974a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801974a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801974c:	4605      	mov	r5, r0
 801974e:	4617      	mov	r7, r2
 8019750:	461e      	mov	r6, r3
 8019752:	f7ff ffe3 	bl	801971c <_ZNK8touchgfx9ConstFont4findEt>
 8019756:	b9e0      	cbnz	r0, 8019792 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8019758:	b911      	cbnz	r1, 8019760 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801975a:	2400      	movs	r4, #0
 801975c:	4620      	mov	r0, r4
 801975e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019760:	290a      	cmp	r1, #10
 8019762:	d0fa      	beq.n	801975a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019764:	682b      	ldr	r3, [r5, #0]
 8019766:	4628      	mov	r0, r5
 8019768:	691b      	ldr	r3, [r3, #16]
 801976a:	4798      	blx	r3
 801976c:	4601      	mov	r1, r0
 801976e:	4628      	mov	r0, r5
 8019770:	f7ff ffd4 	bl	801971c <_ZNK8touchgfx9ConstFont4findEt>
 8019774:	4604      	mov	r4, r0
 8019776:	2800      	cmp	r0, #0
 8019778:	d0ef      	beq.n	801975a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801977a:	682b      	ldr	r3, [r5, #0]
 801977c:	4621      	mov	r1, r4
 801977e:	4628      	mov	r0, r5
 8019780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019782:	4798      	blx	r3
 8019784:	6038      	str	r0, [r7, #0]
 8019786:	682b      	ldr	r3, [r5, #0]
 8019788:	4628      	mov	r0, r5
 801978a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801978c:	4798      	blx	r3
 801978e:	7030      	strb	r0, [r6, #0]
 8019790:	e7e4      	b.n	801975c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8019792:	4604      	mov	r4, r0
 8019794:	e7f1      	b.n	801977a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08019796 <_ZN8touchgfx6memsetEPvhm>:
 8019796:	4402      	add	r2, r0
 8019798:	4290      	cmp	r0, r2
 801979a:	d002      	beq.n	80197a2 <_ZN8touchgfx6memsetEPvhm+0xc>
 801979c:	f800 1b01 	strb.w	r1, [r0], #1
 80197a0:	e7fa      	b.n	8019798 <_ZN8touchgfx6memsetEPvhm+0x2>
 80197a2:	4770      	bx	lr

080197a4 <_ZN8touchgfx3clzEl>:
 80197a4:	b1e8      	cbz	r0, 80197e2 <_ZN8touchgfx3clzEl+0x3e>
 80197a6:	2800      	cmp	r0, #0
 80197a8:	bfb8      	it	lt
 80197aa:	4240      	neglt	r0, r0
 80197ac:	0c03      	lsrs	r3, r0, #16
 80197ae:	041b      	lsls	r3, r3, #16
 80197b0:	b9ab      	cbnz	r3, 80197de <_ZN8touchgfx3clzEl+0x3a>
 80197b2:	0400      	lsls	r0, r0, #16
 80197b4:	2310      	movs	r3, #16
 80197b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80197ba:	bf04      	itt	eq
 80197bc:	0200      	lsleq	r0, r0, #8
 80197be:	3308      	addeq	r3, #8
 80197c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80197c4:	bf04      	itt	eq
 80197c6:	0100      	lsleq	r0, r0, #4
 80197c8:	3304      	addeq	r3, #4
 80197ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80197ce:	bf04      	itt	eq
 80197d0:	0080      	lsleq	r0, r0, #2
 80197d2:	3302      	addeq	r3, #2
 80197d4:	2800      	cmp	r0, #0
 80197d6:	bfa8      	it	ge
 80197d8:	3301      	addge	r3, #1
 80197da:	1e58      	subs	r0, r3, #1
 80197dc:	4770      	bx	lr
 80197de:	2300      	movs	r3, #0
 80197e0:	e7e9      	b.n	80197b6 <_ZN8touchgfx3clzEl+0x12>
 80197e2:	201f      	movs	r0, #31
 80197e4:	4770      	bx	lr

080197e6 <_ZN8touchgfx6muldivElllRl>:
 80197e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197ea:	4604      	mov	r4, r0
 80197ec:	4698      	mov	r8, r3
 80197ee:	2601      	movs	r6, #1
 80197f0:	f7ff ffd8 	bl	80197a4 <_ZN8touchgfx3clzEl>
 80197f4:	2c00      	cmp	r4, #0
 80197f6:	fa04 f500 	lsl.w	r5, r4, r0
 80197fa:	fa06 f600 	lsl.w	r6, r6, r0
 80197fe:	bfba      	itte	lt
 8019800:	f04f 37ff 	movlt.w	r7, #4294967295
 8019804:	4264      	neglt	r4, r4
 8019806:	2701      	movge	r7, #1
 8019808:	2900      	cmp	r1, #0
 801980a:	f106 36ff 	add.w	r6, r6, #4294967295
 801980e:	bfbc      	itt	lt
 8019810:	4249      	neglt	r1, r1
 8019812:	427f      	neglt	r7, r7
 8019814:	2a00      	cmp	r2, #0
 8019816:	fa41 fc00 	asr.w	ip, r1, r0
 801981a:	ea01 0106 	and.w	r1, r1, r6
 801981e:	bfb8      	it	lt
 8019820:	427f      	neglt	r7, r7
 8019822:	fb04 f401 	mul.w	r4, r4, r1
 8019826:	fb95 f3f2 	sdiv	r3, r5, r2
 801982a:	fb02 5513 	mls	r5, r2, r3, r5
 801982e:	bfb8      	it	lt
 8019830:	4252      	neglt	r2, r2
 8019832:	fb94 f0f2 	sdiv	r0, r4, r2
 8019836:	fb02 4410 	mls	r4, r2, r0, r4
 801983a:	fb0c 4405 	mla	r4, ip, r5, r4
 801983e:	fb94 f1f2 	sdiv	r1, r4, r2
 8019842:	4408      	add	r0, r1
 8019844:	fb02 4211 	mls	r2, r2, r1, r4
 8019848:	fb0c 0003 	mla	r0, ip, r3, r0
 801984c:	f8c8 2000 	str.w	r2, [r8]
 8019850:	4378      	muls	r0, r7
 8019852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019856 <_ZN8touchgfx10ClickEventD1Ev>:
 8019856:	4770      	bx	lr

08019858 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019858:	2000      	movs	r0, #0
 801985a:	4770      	bx	lr

0801985c <_ZN8touchgfx9DragEventD1Ev>:
 801985c:	4770      	bx	lr

0801985e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801985e:	2001      	movs	r0, #1
 8019860:	4770      	bx	lr

08019862 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019862:	2002      	movs	r0, #2
 8019864:	4770      	bx	lr

08019866 <_ZN8touchgfx12GestureEventD1Ev>:
 8019866:	4770      	bx	lr

08019868 <_ZN8touchgfx10ClickEventD0Ev>:
 8019868:	b510      	push	{r4, lr}
 801986a:	4604      	mov	r4, r0
 801986c:	210c      	movs	r1, #12
 801986e:	f00b fa14 	bl	8024c9a <_ZdlPvj>
 8019872:	4620      	mov	r0, r4
 8019874:	bd10      	pop	{r4, pc}

08019876 <_ZN8touchgfx9DragEventD0Ev>:
 8019876:	b510      	push	{r4, lr}
 8019878:	4604      	mov	r4, r0
 801987a:	2110      	movs	r1, #16
 801987c:	f00b fa0d 	bl	8024c9a <_ZdlPvj>
 8019880:	4620      	mov	r0, r4
 8019882:	bd10      	pop	{r4, pc}

08019884 <_ZN8touchgfx12GestureEventD0Ev>:
 8019884:	b510      	push	{r4, lr}
 8019886:	4604      	mov	r4, r0
 8019888:	210c      	movs	r1, #12
 801988a:	f00b fa06 	bl	8024c9a <_ZdlPvj>
 801988e:	4620      	mov	r0, r4
 8019890:	bd10      	pop	{r4, pc}
	...

08019894 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019894:	b530      	push	{r4, r5, lr}
 8019896:	460d      	mov	r5, r1
 8019898:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801989a:	b087      	sub	sp, #28
 801989c:	4604      	mov	r4, r0
 801989e:	b301      	cbz	r1, 80198e2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80198a0:	a801      	add	r0, sp, #4
 80198a2:	f7ff ff06 	bl	80196b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80198a6:	892a      	ldrh	r2, [r5, #8]
 80198a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80198ac:	7928      	ldrb	r0, [r5, #4]
 80198ae:	1ad2      	subs	r2, r2, r3
 80198b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80198b2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80198b6:	441a      	add	r2, r3
 80198b8:	896b      	ldrh	r3, [r5, #10]
 80198ba:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80198be:	f88d 0010 	strb.w	r0, [sp, #16]
 80198c2:	1b5b      	subs	r3, r3, r5
 80198c4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80198c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80198c8:	442b      	add	r3, r5
 80198ca:	4d07      	ldr	r5, [pc, #28]	; (80198e8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80198cc:	f8ad 1012 	strh.w	r1, [sp, #18]
 80198d0:	a903      	add	r1, sp, #12
 80198d2:	9503      	str	r5, [sp, #12]
 80198d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80198d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80198dc:	6803      	ldr	r3, [r0, #0]
 80198de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80198e0:	4798      	blx	r3
 80198e2:	b007      	add	sp, #28
 80198e4:	bd30      	pop	{r4, r5, pc}
 80198e6:	bf00      	nop
 80198e8:	08028898 	.word	0x08028898

080198ec <_ZNK8touchgfx4Rect9intersectEss>:
 80198ec:	b510      	push	{r4, lr}
 80198ee:	f9b0 3000 	ldrsh.w	r3, [r0]
 80198f2:	428b      	cmp	r3, r1
 80198f4:	dc10      	bgt.n	8019918 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80198f6:	8884      	ldrh	r4, [r0, #4]
 80198f8:	4423      	add	r3, r4
 80198fa:	b21b      	sxth	r3, r3
 80198fc:	4299      	cmp	r1, r3
 80198fe:	da0b      	bge.n	8019918 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019900:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019904:	4293      	cmp	r3, r2
 8019906:	dc07      	bgt.n	8019918 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019908:	88c0      	ldrh	r0, [r0, #6]
 801990a:	4418      	add	r0, r3
 801990c:	b200      	sxth	r0, r0
 801990e:	4282      	cmp	r2, r0
 8019910:	bfac      	ite	ge
 8019912:	2000      	movge	r0, #0
 8019914:	2001      	movlt	r0, #1
 8019916:	bd10      	pop	{r4, pc}
 8019918:	2000      	movs	r0, #0
 801991a:	e7fc      	b.n	8019916 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801991c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801991c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801991e:	460c      	mov	r4, r1
 8019920:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019922:	b089      	sub	sp, #36	; 0x24
 8019924:	4605      	mov	r5, r0
 8019926:	2900      	cmp	r1, #0
 8019928:	d054      	beq.n	80199d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801992a:	4668      	mov	r0, sp
 801992c:	f7ff fec1 	bl	80196b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019930:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8019932:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019934:	4668      	mov	r0, sp
 8019936:	8922      	ldrh	r2, [r4, #8]
 8019938:	88e1      	ldrh	r1, [r4, #6]
 801993a:	443a      	add	r2, r7
 801993c:	4431      	add	r1, r6
 801993e:	b212      	sxth	r2, r2
 8019940:	b209      	sxth	r1, r1
 8019942:	f7ff ffd3 	bl	80198ec <_ZNK8touchgfx4Rect9intersectEss>
 8019946:	b1d0      	cbz	r0, 801997e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019948:	89a2      	ldrh	r2, [r4, #12]
 801994a:	4668      	mov	r0, sp
 801994c:	8961      	ldrh	r1, [r4, #10]
 801994e:	443a      	add	r2, r7
 8019950:	4431      	add	r1, r6
 8019952:	b212      	sxth	r2, r2
 8019954:	b209      	sxth	r1, r1
 8019956:	f7ff ffc9 	bl	80198ec <_ZNK8touchgfx4Rect9intersectEss>
 801995a:	4603      	mov	r3, r0
 801995c:	b978      	cbnz	r0, 801997e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801995e:	4a1e      	ldr	r2, [pc, #120]	; (80199d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8019960:	a904      	add	r1, sp, #16
 8019962:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019964:	9204      	str	r2, [sp, #16]
 8019966:	2202      	movs	r2, #2
 8019968:	f8ad 3016 	strh.w	r3, [sp, #22]
 801996c:	f88d 2014 	strb.w	r2, [sp, #20]
 8019970:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019974:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019978:	6803      	ldr	r3, [r0, #0]
 801997a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801997c:	4798      	blx	r3
 801997e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8019980:	a802      	add	r0, sp, #8
 8019982:	f7ff fe96 	bl	80196b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019986:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801998a:	88e0      	ldrh	r0, [r4, #6]
 801998c:	8961      	ldrh	r1, [r4, #10]
 801998e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019992:	1a80      	subs	r0, r0, r2
 8019994:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8019998:	1a89      	subs	r1, r1, r2
 801999a:	8923      	ldrh	r3, [r4, #8]
 801999c:	4460      	add	r0, ip
 801999e:	89a2      	ldrh	r2, [r4, #12]
 80199a0:	4461      	add	r1, ip
 80199a2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80199a4:	eba3 030e 	sub.w	r3, r3, lr
 80199a8:	eba2 020e 	sub.w	r2, r2, lr
 80199ac:	f8ad 0016 	strh.w	r0, [sp, #22]
 80199b0:	7927      	ldrb	r7, [r4, #4]
 80199b2:	4433      	add	r3, r6
 80199b4:	4432      	add	r2, r6
 80199b6:	4c09      	ldr	r4, [pc, #36]	; (80199dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 80199b8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80199ba:	f8ad 101a 	strh.w	r1, [sp, #26]
 80199be:	a904      	add	r1, sp, #16
 80199c0:	9404      	str	r4, [sp, #16]
 80199c2:	f88d 7014 	strb.w	r7, [sp, #20]
 80199c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80199ca:	f8ad 201c 	strh.w	r2, [sp, #28]
 80199ce:	6803      	ldr	r3, [r0, #0]
 80199d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80199d2:	4798      	blx	r3
 80199d4:	b009      	add	sp, #36	; 0x24
 80199d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199d8:	08028870 	.word	0x08028870
 80199dc:	08028884 	.word	0x08028884

080199e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80199e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199e4:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 80199e8:	b0a1      	sub	sp, #132	; 0x84
 80199ea:	4604      	mov	r4, r0
 80199ec:	460d      	mov	r5, r1
 80199ee:	790b      	ldrb	r3, [r1, #4]
 80199f0:	f1b9 0f00 	cmp.w	r9, #0
 80199f4:	d00f      	beq.n	8019a16 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	f040 80a2 	bne.w	8019b40 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 80199fc:	b021      	add	sp, #132	; 0x84
 80199fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a02:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019a06:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019a0a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019a0e:	1d20      	adds	r0, r4, #4
 8019a10:	f7fb ff5c 	bl	80158cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019a14:	e094      	b.n	8019b40 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d1f0      	bne.n	80199fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019a1a:	4b5f      	ldr	r3, [pc, #380]	; (8019b98 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019a22:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8019a26:	f1ba 0f03 	cmp.w	sl, #3
 8019a2a:	ddea      	ble.n	8019a02 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019a2c:	f1ba 0f0c 	cmp.w	sl, #12
 8019a30:	f04f 0303 	mov.w	r3, #3
 8019a34:	f04f 0600 	mov.w	r6, #0
 8019a38:	4958      	ldr	r1, [pc, #352]	; (8019b9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8019a3a:	bfd8      	it	le
 8019a3c:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8019a40:	960a      	str	r6, [sp, #40]	; 0x28
 8019a42:	bfd8      	it	le
 8019a44:	fb92 f3f3 	sdivle	r3, r2, r3
 8019a48:	9301      	str	r3, [sp, #4]
 8019a4a:	4b55      	ldr	r3, [pc, #340]	; (8019ba0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8019a4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019a50:	4b54      	ldr	r3, [pc, #336]	; (8019ba4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8019a52:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019a56:	2248      	movs	r2, #72	; 0x48
 8019a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a5c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019a60:	ab0e      	add	r3, sp, #56	; 0x38
 8019a62:	4618      	mov	r0, r3
 8019a64:	f00b f9c2 	bl	8024dec <memcpy>
 8019a68:	f04f 32ff 	mov.w	r2, #4294967295
 8019a6c:	f8cd a008 	str.w	sl, [sp, #8]
 8019a70:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8019a74:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019a78:	46b3      	mov	fp, r6
 8019a7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8019a7e:	b29b      	uxth	r3, r3
 8019a80:	9303      	str	r3, [sp, #12]
 8019a82:	2300      	movs	r3, #0
 8019a84:	9a03      	ldr	r2, [sp, #12]
 8019a86:	88ef      	ldrh	r7, [r5, #6]
 8019a88:	a80a      	add	r0, sp, #40	; 0x28
 8019a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8019a8c:	9b07      	ldr	r3, [sp, #28]
 8019a8e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8019a92:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8019a96:	fb13 f302 	smulbb	r3, r3, r2
 8019a9a:	b29b      	uxth	r3, r3
 8019a9c:	9304      	str	r3, [sp, #16]
 8019a9e:	9b07      	ldr	r3, [sp, #28]
 8019aa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019aa4:	685b      	ldr	r3, [r3, #4]
 8019aa6:	fb13 f302 	smulbb	r3, r3, r2
 8019aaa:	b29b      	uxth	r3, r3
 8019aac:	9305      	str	r3, [sp, #20]
 8019aae:	9b04      	ldr	r3, [sp, #16]
 8019ab0:	441f      	add	r7, r3
 8019ab2:	9b05      	ldr	r3, [sp, #20]
 8019ab4:	4498      	add	r8, r3
 8019ab6:	b23f      	sxth	r7, r7
 8019ab8:	fa0f f888 	sxth.w	r8, r8
 8019abc:	4639      	mov	r1, r7
 8019abe:	4642      	mov	r2, r8
 8019ac0:	f7ff ff14 	bl	80198ec <_ZNK8touchgfx4Rect9intersectEss>
 8019ac4:	b380      	cbz	r0, 8019b28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019ac6:	4639      	mov	r1, r7
 8019ac8:	ab09      	add	r3, sp, #36	; 0x24
 8019aca:	4642      	mov	r2, r8
 8019acc:	1d20      	adds	r0, r4, #4
 8019ace:	f7fb fefd 	bl	80158cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019ad2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019ad4:	b341      	cbz	r1, 8019b28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019ad6:	4549      	cmp	r1, r9
 8019ad8:	d026      	beq.n	8019b28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019ada:	a80c      	add	r0, sp, #48	; 0x30
 8019adc:	f7ff fde9 	bl	80196b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019ae0:	2002      	movs	r0, #2
 8019ae2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8019ae6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8019aea:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019aee:	fb92 f2f0 	sdiv	r2, r2, r0
 8019af2:	440a      	add	r2, r1
 8019af4:	1a99      	subs	r1, r3, r2
 8019af6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8019afa:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019afe:	fb93 f3f0 	sdiv	r3, r3, r0
 8019b02:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8019b06:	4403      	add	r3, r0
 8019b08:	1ad3      	subs	r3, r2, r3
 8019b0a:	9a06      	ldr	r2, [sp, #24]
 8019b0c:	435b      	muls	r3, r3
 8019b0e:	fb01 3301 	mla	r3, r1, r1, r3
 8019b12:	4293      	cmp	r3, r2
 8019b14:	d208      	bcs.n	8019b28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019b16:	9a04      	ldr	r2, [sp, #16]
 8019b18:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019b1c:	86a2      	strh	r2, [r4, #52]	; 0x34
 8019b1e:	9a05      	ldr	r2, [sp, #20]
 8019b20:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019b24:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019b26:	9306      	str	r3, [sp, #24]
 8019b28:	f10b 0b02 	add.w	fp, fp, #2
 8019b2c:	f1bb 0f08 	cmp.w	fp, #8
 8019b30:	dda7      	ble.n	8019a82 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8019b32:	9b02      	ldr	r3, [sp, #8]
 8019b34:	3601      	adds	r6, #1
 8019b36:	4453      	add	r3, sl
 8019b38:	9302      	str	r3, [sp, #8]
 8019b3a:	9b01      	ldr	r3, [sp, #4]
 8019b3c:	42b3      	cmp	r3, r6
 8019b3e:	d199      	bne.n	8019a74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8019b40:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019b42:	2900      	cmp	r1, #0
 8019b44:	f43f af5a 	beq.w	80199fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019b48:	a80c      	add	r0, sp, #48	; 0x30
 8019b4a:	2600      	movs	r6, #0
 8019b4c:	f7ff fdb1 	bl	80196b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b50:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019b54:	88ea      	ldrh	r2, [r5, #6]
 8019b56:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8019b5a:	1ad2      	subs	r2, r2, r3
 8019b5c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019b5e:	7929      	ldrb	r1, [r5, #4]
 8019b60:	441a      	add	r2, r3
 8019b62:	892b      	ldrh	r3, [r5, #8]
 8019b64:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8019b68:	a90e      	add	r1, sp, #56	; 0x38
 8019b6a:	1a1b      	subs	r3, r3, r0
 8019b6c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019b6e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8019b72:	4403      	add	r3, r0
 8019b74:	480c      	ldr	r0, [pc, #48]	; (8019ba8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 8019b76:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8019b7a:	900e      	str	r0, [sp, #56]	; 0x38
 8019b7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019b7e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8019b82:	6803      	ldr	r3, [r0, #0]
 8019b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b86:	4798      	blx	r3
 8019b88:	792b      	ldrb	r3, [r5, #4]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	f43f af36 	beq.w	80199fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019b90:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019b94:	e732      	b.n	80199fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019b96:	bf00      	nop
 8019b98:	2000bcc8 	.word	0x2000bcc8
 8019b9c:	08026444 	.word	0x08026444
 8019ba0:	2000bcbc 	.word	0x2000bcbc
 8019ba4:	2000bcbe 	.word	0x2000bcbe
 8019ba8:	08028870 	.word	0x08028870

08019bac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019bae:	4604      	mov	r4, r0
 8019bb0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019bb4:	3201      	adds	r2, #1
 8019bb6:	d112      	bne.n	8019bde <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019bb8:	2500      	movs	r5, #0
 8019bba:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019bbe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019bc2:	6803      	ldr	r3, [r0, #0]
 8019bc4:	9500      	str	r5, [sp, #0]
 8019bc6:	466d      	mov	r5, sp
 8019bc8:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019bcc:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019bd0:	4629      	mov	r1, r5
 8019bd2:	6a1b      	ldr	r3, [r3, #32]
 8019bd4:	4798      	blx	r3
 8019bd6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019bda:	e884 0003 	stmia.w	r4, {r0, r1}
 8019bde:	4620      	mov	r0, r4
 8019be0:	b003      	add	sp, #12
 8019be2:	bd30      	pop	{r4, r5, pc}

08019be4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019be4:	b513      	push	{r0, r1, r4, lr}
 8019be6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019bea:	4604      	mov	r4, r0
 8019bec:	3301      	adds	r3, #1
 8019bee:	d109      	bne.n	8019c04 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019bf0:	4601      	mov	r1, r0
 8019bf2:	4668      	mov	r0, sp
 8019bf4:	f7ff fd5d 	bl	80196b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019bf8:	f8bd 3000 	ldrh.w	r3, [sp]
 8019bfc:	8423      	strh	r3, [r4, #32]
 8019bfe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019c02:	8463      	strh	r3, [r4, #34]	; 0x22
 8019c04:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019c08:	b002      	add	sp, #8
 8019c0a:	bd10      	pop	{r4, pc}

08019c0c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019c0c:	b513      	push	{r0, r1, r4, lr}
 8019c0e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019c12:	4604      	mov	r4, r0
 8019c14:	3301      	adds	r3, #1
 8019c16:	d109      	bne.n	8019c2c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019c18:	4601      	mov	r1, r0
 8019c1a:	4668      	mov	r0, sp
 8019c1c:	f7ff fd49 	bl	80196b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019c20:	f8bd 3000 	ldrh.w	r3, [sp]
 8019c24:	8423      	strh	r3, [r4, #32]
 8019c26:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019c2a:	8463      	strh	r3, [r4, #34]	; 0x22
 8019c2c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019c30:	b002      	add	sp, #8
 8019c32:	bd10      	pop	{r4, pc}

08019c34 <_ZN8touchgfx6ScreenC1Ev>:
 8019c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c36:	4605      	mov	r5, r0
 8019c38:	4b17      	ldr	r3, [pc, #92]	; (8019c98 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019c3a:	2200      	movs	r2, #0
 8019c3c:	4917      	ldr	r1, [pc, #92]	; (8019c9c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8019c3e:	f845 3b04 	str.w	r3, [r5], #4
 8019c42:	2301      	movs	r3, #1
 8019c44:	8102      	strh	r2, [r0, #8]
 8019c46:	4604      	mov	r4, r0
 8019c48:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8019c4c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019c50:	4b13      	ldr	r3, [pc, #76]	; (8019ca0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019c52:	8142      	strh	r2, [r0, #10]
 8019c54:	f9b3 7000 	ldrsh.w	r7, [r3]
 8019c58:	4b12      	ldr	r3, [pc, #72]	; (8019ca4 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8019c5a:	8182      	strh	r2, [r0, #12]
 8019c5c:	81c2      	strh	r2, [r0, #14]
 8019c5e:	8202      	strh	r2, [r0, #16]
 8019c60:	8242      	strh	r2, [r0, #18]
 8019c62:	8282      	strh	r2, [r0, #20]
 8019c64:	82c2      	strh	r2, [r0, #22]
 8019c66:	6202      	str	r2, [r0, #32]
 8019c68:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8019c6c:	6342      	str	r2, [r0, #52]	; 0x34
 8019c6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019c72:	6041      	str	r1, [r0, #4]
 8019c74:	4611      	mov	r1, r2
 8019c76:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8019c7a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8019c7e:	4628      	mov	r0, r5
 8019c80:	f7f6 fab1 	bl	80101e6 <_ZN8touchgfx8Drawable5setXYEss>
 8019c84:	4639      	mov	r1, r7
 8019c86:	4628      	mov	r0, r5
 8019c88:	f7f6 facb 	bl	8010222 <_ZN8touchgfx8Drawable8setWidthEs>
 8019c8c:	4628      	mov	r0, r5
 8019c8e:	4631      	mov	r1, r6
 8019c90:	f7f6 fad6 	bl	8010240 <_ZN8touchgfx8Drawable9setHeightEs>
 8019c94:	4620      	mov	r0, r4
 8019c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c98:	080288ac 	.word	0x080288ac
 8019c9c:	08027580 	.word	0x08027580
 8019ca0:	2000bcbc 	.word	0x2000bcbc
 8019ca4:	2000bcbe 	.word	0x2000bcbe

08019ca8 <_ZN8touchgfx6Screen4drawEv>:
 8019ca8:	4b09      	ldr	r3, [pc, #36]	; (8019cd0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019caa:	b507      	push	{r0, r1, r2, lr}
 8019cac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019cb0:	2100      	movs	r1, #0
 8019cb2:	4b08      	ldr	r3, [pc, #32]	; (8019cd4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019cb4:	9100      	str	r1, [sp, #0]
 8019cb6:	4669      	mov	r1, sp
 8019cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019cbc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019cc0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019cc4:	6803      	ldr	r3, [r0, #0]
 8019cc6:	689b      	ldr	r3, [r3, #8]
 8019cc8:	4798      	blx	r3
 8019cca:	b003      	add	sp, #12
 8019ccc:	f85d fb04 	ldr.w	pc, [sp], #4
 8019cd0:	2000bcbc 	.word	0x2000bcbc
 8019cd4:	2000bcbe 	.word	0x2000bcbe

08019cd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cdc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019ce0:	b089      	sub	sp, #36	; 0x24
 8019ce2:	4680      	mov	r8, r0
 8019ce4:	460c      	mov	r4, r1
 8019ce6:	4615      	mov	r5, r2
 8019ce8:	b16b      	cbz	r3, 8019d06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019cea:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019cee:	b153      	cbz	r3, 8019d06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019cf0:	4628      	mov	r0, r5
 8019cf2:	f7ff ff5b 	bl	8019bac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019cf6:	4621      	mov	r1, r4
 8019cf8:	f7fe ffc2 	bl	8018c80 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019cfc:	69eb      	ldr	r3, [r5, #28]
 8019cfe:	b928      	cbnz	r0, 8019d0c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8019d00:	461d      	mov	r5, r3
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d1f4      	bne.n	8019cf0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8019d06:	b009      	add	sp, #36	; 0x24
 8019d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d0c:	ae04      	add	r6, sp, #16
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d051      	beq.n	8019db6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019d12:	682b      	ldr	r3, [r5, #0]
 8019d14:	4629      	mov	r1, r5
 8019d16:	a802      	add	r0, sp, #8
 8019d18:	68db      	ldr	r3, [r3, #12]
 8019d1a:	4798      	blx	r3
 8019d1c:	4628      	mov	r0, r5
 8019d1e:	f7ff ff61 	bl	8019be4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019d22:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019d26:	4407      	add	r7, r0
 8019d28:	4628      	mov	r0, r5
 8019d2a:	f7ff ff6f 	bl	8019c0c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019d2e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019d32:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019d36:	b23f      	sxth	r7, r7
 8019d38:	4418      	add	r0, r3
 8019d3a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019d3e:	4621      	mov	r1, r4
 8019d40:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019d44:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019d48:	4630      	mov	r0, r6
 8019d4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019d4e:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019d52:	f7fb fe6d 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 8019d56:	4628      	mov	r0, r5
 8019d58:	f7ff ff28 	bl	8019bac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019d5c:	ab06      	add	r3, sp, #24
 8019d5e:	4602      	mov	r2, r0
 8019d60:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019d64:	e883 0003 	stmia.w	r3, {r0, r1}
 8019d68:	4611      	mov	r1, r2
 8019d6a:	4618      	mov	r0, r3
 8019d6c:	f7fb fe60 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 8019d70:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019d74:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019d78:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019d7c:	4299      	cmp	r1, r3
 8019d7e:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019d82:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019d86:	d10b      	bne.n	8019da0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019d88:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019d8c:	4552      	cmp	r2, sl
 8019d8e:	d107      	bne.n	8019da0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019d90:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019d94:	455a      	cmp	r2, fp
 8019d96:	d103      	bne.n	8019da0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019d98:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019d9c:	454a      	cmp	r2, r9
 8019d9e:	d00a      	beq.n	8019db6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019da0:	f1bb 0f00 	cmp.w	fp, #0
 8019da4:	d002      	beq.n	8019dac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8019da6:	f1b9 0f00 	cmp.w	r9, #0
 8019daa:	d12e      	bne.n	8019e0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8019dac:	69ea      	ldr	r2, [r5, #28]
 8019dae:	4621      	mov	r1, r4
 8019db0:	4640      	mov	r0, r8
 8019db2:	f7ff ff91 	bl	8019cd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019db6:	4628      	mov	r0, r5
 8019db8:	f7ff fef8 	bl	8019bac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019dbc:	6861      	ldr	r1, [r4, #4]
 8019dbe:	4602      	mov	r2, r0
 8019dc0:	4633      	mov	r3, r6
 8019dc2:	6820      	ldr	r0, [r4, #0]
 8019dc4:	c303      	stmia	r3!, {r0, r1}
 8019dc6:	4611      	mov	r1, r2
 8019dc8:	4630      	mov	r0, r6
 8019dca:	f7fb fe31 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 8019dce:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d097      	beq.n	8019d06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019dd6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d093      	beq.n	8019d06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019dde:	4628      	mov	r0, r5
 8019de0:	f7ff ff00 	bl	8019be4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019de4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019de8:	1a18      	subs	r0, r3, r0
 8019dea:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019dee:	4628      	mov	r0, r5
 8019df0:	f7ff ff0c 	bl	8019c0c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019df4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019df8:	4631      	mov	r1, r6
 8019dfa:	1a18      	subs	r0, r3, r0
 8019dfc:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019e00:	4628      	mov	r0, r5
 8019e02:	682b      	ldr	r3, [r5, #0]
 8019e04:	689b      	ldr	r3, [r3, #8]
 8019e06:	4798      	blx	r3
 8019e08:	e77d      	b.n	8019d06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019e0a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019e0e:	fa1f f08a 	uxth.w	r0, sl
 8019e12:	4552      	cmp	r2, sl
 8019e14:	9000      	str	r0, [sp, #0]
 8019e16:	da12      	bge.n	8019e3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8019e18:	9301      	str	r3, [sp, #4]
 8019e1a:	9b00      	ldr	r3, [sp, #0]
 8019e1c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019e20:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019e24:	1a9a      	subs	r2, r3, r2
 8019e26:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019e2a:	4631      	mov	r1, r6
 8019e2c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019e30:	4640      	mov	r0, r8
 8019e32:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019e36:	69ea      	ldr	r2, [r5, #28]
 8019e38:	f7ff ff4e 	bl	8019cd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019e3c:	9b01      	ldr	r3, [sp, #4]
 8019e3e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019e42:	b29f      	uxth	r7, r3
 8019e44:	429a      	cmp	r2, r3
 8019e46:	da0d      	bge.n	8019e64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8019e48:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019e4c:	1aba      	subs	r2, r7, r2
 8019e4e:	f8ad a012 	strh.w	sl, [sp, #18]
 8019e52:	4631      	mov	r1, r6
 8019e54:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019e58:	4640      	mov	r0, r8
 8019e5a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019e5e:	69ea      	ldr	r2, [r5, #28]
 8019e60:	f7ff ff3a 	bl	8019cd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019e64:	8822      	ldrh	r2, [r4, #0]
 8019e66:	445f      	add	r7, fp
 8019e68:	88a3      	ldrh	r3, [r4, #4]
 8019e6a:	b2bf      	uxth	r7, r7
 8019e6c:	4413      	add	r3, r2
 8019e6e:	b23a      	sxth	r2, r7
 8019e70:	b29b      	uxth	r3, r3
 8019e72:	b219      	sxth	r1, r3
 8019e74:	4291      	cmp	r1, r2
 8019e76:	dd0d      	ble.n	8019e94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8019e78:	1bdb      	subs	r3, r3, r7
 8019e7a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019e7e:	f8ad a012 	strh.w	sl, [sp, #18]
 8019e82:	4631      	mov	r1, r6
 8019e84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019e88:	4640      	mov	r0, r8
 8019e8a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019e8e:	69ea      	ldr	r2, [r5, #28]
 8019e90:	f7ff ff22 	bl	8019cd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019e94:	88e2      	ldrh	r2, [r4, #6]
 8019e96:	8863      	ldrh	r3, [r4, #2]
 8019e98:	4413      	add	r3, r2
 8019e9a:	9a00      	ldr	r2, [sp, #0]
 8019e9c:	444a      	add	r2, r9
 8019e9e:	b29b      	uxth	r3, r3
 8019ea0:	fa1f f982 	uxth.w	r9, r2
 8019ea4:	b219      	sxth	r1, r3
 8019ea6:	fa0f f289 	sxth.w	r2, r9
 8019eaa:	428a      	cmp	r2, r1
 8019eac:	da83      	bge.n	8019db6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019eae:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019eb2:	eba3 0309 	sub.w	r3, r3, r9
 8019eb6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019eba:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019ebe:	4631      	mov	r1, r6
 8019ec0:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019ec4:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019ec8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ecc:	69ea      	ldr	r2, [r5, #28]
 8019ece:	e76f      	b.n	8019db0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08019ed0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	aa02      	add	r2, sp, #8
 8019ed6:	4604      	mov	r4, r0
 8019ed8:	3004      	adds	r0, #4
 8019eda:	f842 3d04 	str.w	r3, [r2, #-4]!
 8019ede:	460d      	mov	r5, r1
 8019ee0:	f7fb fe7d 	bl	8015bde <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8019ee4:	9a01      	ldr	r2, [sp, #4]
 8019ee6:	b11a      	cbz	r2, 8019ef0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8019ee8:	4629      	mov	r1, r5
 8019eea:	4620      	mov	r0, r4
 8019eec:	f7ff fef4 	bl	8019cd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019ef0:	b003      	add	sp, #12
 8019ef2:	bd30      	pop	{r4, r5, pc}

08019ef4 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8019ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ef6:	4602      	mov	r2, r0
 8019ef8:	4604      	mov	r4, r0
 8019efa:	460d      	mov	r5, r1
 8019efc:	466b      	mov	r3, sp
 8019efe:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8019f02:	6851      	ldr	r1, [r2, #4]
 8019f04:	c303      	stmia	r3!, {r0, r1}
 8019f06:	4629      	mov	r1, r5
 8019f08:	4668      	mov	r0, sp
 8019f0a:	f7fb fd91 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 8019f0e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019f12:	4669      	mov	r1, sp
 8019f14:	b123      	cbz	r3, 8019f20 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8019f16:	4620      	mov	r0, r4
 8019f18:	f7ff ffda 	bl	8019ed0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019f1c:	b003      	add	sp, #12
 8019f1e:	bd30      	pop	{r4, r5, pc}
 8019f20:	1d20      	adds	r0, r4, #4
 8019f22:	f7fb fe23 	bl	8015b6c <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019f26:	e7f9      	b.n	8019f1c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08019f28 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019f28:	460b      	mov	r3, r1
 8019f2a:	680a      	ldr	r2, [r1, #0]
 8019f2c:	1d01      	adds	r1, r0, #4
 8019f2e:	6952      	ldr	r2, [r2, #20]
 8019f30:	4618      	mov	r0, r3
 8019f32:	4710      	bx	r2

08019f34 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 8019f34:	f011 0f40 	tst.w	r1, #64	; 0x40
 8019f38:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8019f3c:	4b03      	ldr	r3, [pc, #12]	; (8019f4c <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8019f3e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019f42:	bf08      	it	eq
 8019f44:	2300      	moveq	r3, #0
 8019f46:	4308      	orrs	r0, r1
 8019f48:	4318      	orrs	r0, r3
 8019f4a:	4770      	bx	lr
 8019f4c:	fffffe00 	.word	0xfffffe00

08019f50 <_ZN8touchgfx9GlyphNode6setTopEs>:
 8019f50:	7b43      	ldrb	r3, [r0, #13]
 8019f52:	7201      	strb	r1, [r0, #8]
 8019f54:	b289      	uxth	r1, r1
 8019f56:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8019f5a:	05ca      	lsls	r2, r1, #23
 8019f5c:	bf48      	it	mi
 8019f5e:	f043 0320 	orrmi.w	r3, r3, #32
 8019f62:	7343      	strb	r3, [r0, #13]
 8019f64:	058b      	lsls	r3, r1, #22
 8019f66:	bf42      	ittt	mi
 8019f68:	7b43      	ldrbmi	r3, [r0, #13]
 8019f6a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8019f6e:	7343      	strbmi	r3, [r0, #13]
 8019f70:	4770      	bx	lr

08019f72 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019f72:	b530      	push	{r4, r5, lr}
 8019f74:	2500      	movs	r5, #0
 8019f76:	2401      	movs	r4, #1
 8019f78:	6843      	ldr	r3, [r0, #4]
 8019f7a:	b913      	cbnz	r3, 8019f82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019f7c:	6803      	ldr	r3, [r0, #0]
 8019f7e:	b1f3      	cbz	r3, 8019fbe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8019f80:	6043      	str	r3, [r0, #4]
 8019f82:	7c03      	ldrb	r3, [r0, #16]
 8019f84:	b143      	cbz	r3, 8019f98 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019f86:	68c3      	ldr	r3, [r0, #12]
 8019f88:	b12b      	cbz	r3, 8019f96 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019f8a:	881a      	ldrh	r2, [r3, #0]
 8019f8c:	b11a      	cbz	r2, 8019f96 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019f8e:	1c9a      	adds	r2, r3, #2
 8019f90:	60c2      	str	r2, [r0, #12]
 8019f92:	8818      	ldrh	r0, [r3, #0]
 8019f94:	bd30      	pop	{r4, r5, pc}
 8019f96:	7405      	strb	r5, [r0, #16]
 8019f98:	6843      	ldr	r3, [r0, #4]
 8019f9a:	8819      	ldrh	r1, [r3, #0]
 8019f9c:	b179      	cbz	r1, 8019fbe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8019f9e:	1c9a      	adds	r2, r3, #2
 8019fa0:	2902      	cmp	r1, #2
 8019fa2:	6042      	str	r2, [r0, #4]
 8019fa4:	d1f5      	bne.n	8019f92 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019fa6:	6883      	ldr	r3, [r0, #8]
 8019fa8:	1d1a      	adds	r2, r3, #4
 8019faa:	6082      	str	r2, [r0, #8]
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	60c3      	str	r3, [r0, #12]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d0e1      	beq.n	8019f78 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019fb4:	881b      	ldrh	r3, [r3, #0]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d0de      	beq.n	8019f78 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019fba:	7404      	strb	r4, [r0, #16]
 8019fbc:	e7dc      	b.n	8019f78 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019fbe:	2000      	movs	r0, #0
 8019fc0:	e7e8      	b.n	8019f94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019fc2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019fc4:	4605      	mov	r5, r0
 8019fc6:	4608      	mov	r0, r1
 8019fc8:	b1f1      	cbz	r1, 801a008 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8019fca:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8019fce:	460b      	mov	r3, r1
 8019fd0:	f101 0708 	add.w	r7, r1, #8
 8019fd4:	4622      	mov	r2, r4
 8019fd6:	6818      	ldr	r0, [r3, #0]
 8019fd8:	3308      	adds	r3, #8
 8019fda:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019fde:	4626      	mov	r6, r4
 8019fe0:	42bb      	cmp	r3, r7
 8019fe2:	c603      	stmia	r6!, {r0, r1}
 8019fe4:	4634      	mov	r4, r6
 8019fe6:	d1f6      	bne.n	8019fd6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019fe8:	6818      	ldr	r0, [r3, #0]
 8019fea:	6030      	str	r0, [r6, #0]
 8019fec:	4610      	mov	r0, r2
 8019fee:	889b      	ldrh	r3, [r3, #4]
 8019ff0:	80b3      	strh	r3, [r6, #4]
 8019ff2:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8019ff6:	015b      	lsls	r3, r3, #5
 8019ff8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019ffc:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801a000:	430b      	orrs	r3, r1
 801a002:	425b      	negs	r3, r3
 801a004:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801a008:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a00a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a00a:	b538      	push	{r3, r4, r5, lr}
 801a00c:	460c      	mov	r4, r1
 801a00e:	6811      	ldr	r1, [r2, #0]
 801a010:	4610      	mov	r0, r2
 801a012:	68cd      	ldr	r5, [r1, #12]
 801a014:	4619      	mov	r1, r3
 801a016:	47a8      	blx	r5
 801a018:	2800      	cmp	r0, #0
 801a01a:	bf08      	it	eq
 801a01c:	4620      	moveq	r0, r4
 801a01e:	bd38      	pop	{r3, r4, r5, pc}

0801a020 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a020:	b570      	push	{r4, r5, r6, lr}
 801a022:	8810      	ldrh	r0, [r2, #0]
 801a024:	4298      	cmp	r0, r3
 801a026:	d817      	bhi.n	801a058 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a028:	1e48      	subs	r0, r1, #1
 801a02a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a02e:	4298      	cmp	r0, r3
 801a030:	d312      	bcc.n	801a058 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a032:	2400      	movs	r4, #0
 801a034:	428c      	cmp	r4, r1
 801a036:	d20f      	bcs.n	801a058 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a038:	1860      	adds	r0, r4, r1
 801a03a:	1040      	asrs	r0, r0, #1
 801a03c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a040:	0085      	lsls	r5, r0, #2
 801a042:	42b3      	cmp	r3, r6
 801a044:	d902      	bls.n	801a04c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a046:	3001      	adds	r0, #1
 801a048:	b284      	uxth	r4, r0
 801a04a:	e7f3      	b.n	801a034 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a04c:	d102      	bne.n	801a054 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801a04e:	442a      	add	r2, r5
 801a050:	8850      	ldrh	r0, [r2, #2]
 801a052:	bd70      	pop	{r4, r5, r6, pc}
 801a054:	b281      	uxth	r1, r0
 801a056:	e7ed      	b.n	801a034 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a058:	2000      	movs	r0, #0
 801a05a:	e7fa      	b.n	801a052 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801a05c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801a05c:	b510      	push	{r4, lr}
 801a05e:	8ac3      	ldrh	r3, [r0, #22]
 801a060:	428b      	cmp	r3, r1
 801a062:	d805      	bhi.n	801a070 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801a064:	4b07      	ldr	r3, [pc, #28]	; (801a084 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801a066:	21fd      	movs	r1, #253	; 0xfd
 801a068:	4a07      	ldr	r2, [pc, #28]	; (801a088 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801a06a:	4808      	ldr	r0, [pc, #32]	; (801a08c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801a06c:	f00a fe40 	bl	8024cf0 <__assert_func>
 801a070:	8a83      	ldrh	r3, [r0, #20]
 801a072:	240a      	movs	r4, #10
 801a074:	4419      	add	r1, r3
 801a076:	fbb1 f3f4 	udiv	r3, r1, r4
 801a07a:	fb04 1113 	mls	r1, r4, r3, r1
 801a07e:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a082:	bd10      	pop	{r4, pc}
 801a084:	080288f9 	.word	0x080288f9
 801a088:	08028d28 	.word	0x08028d28
 801a08c:	08028907 	.word	0x08028907

0801a090 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801a090:	b508      	push	{r3, lr}
 801a092:	8ac3      	ldrh	r3, [r0, #22]
 801a094:	428b      	cmp	r3, r1
 801a096:	d805      	bhi.n	801a0a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801a098:	4b07      	ldr	r3, [pc, #28]	; (801a0b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801a09a:	21d3      	movs	r1, #211	; 0xd3
 801a09c:	4a07      	ldr	r2, [pc, #28]	; (801a0bc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801a09e:	4808      	ldr	r0, [pc, #32]	; (801a0c0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801a0a0:	f00a fe26 	bl	8024cf0 <__assert_func>
 801a0a4:	8a83      	ldrh	r3, [r0, #20]
 801a0a6:	220a      	movs	r2, #10
 801a0a8:	4419      	add	r1, r3
 801a0aa:	fbb1 f3f2 	udiv	r3, r1, r2
 801a0ae:	fb02 1113 	mls	r1, r2, r3, r1
 801a0b2:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801a0b6:	bd08      	pop	{r3, pc}
 801a0b8:	080288f9 	.word	0x080288f9
 801a0bc:	08028a78 	.word	0x08028a78
 801a0c0:	08028907 	.word	0x08028907

0801a0c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a0c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0c8:	4604      	mov	r4, r0
 801a0ca:	4688      	mov	r8, r1
 801a0cc:	4615      	mov	r5, r2
 801a0ce:	b94a      	cbnz	r2, 801a0e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801a0d0:	4691      	mov	r9, r2
 801a0d2:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a0d6:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a0da:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a0de:	4648      	mov	r0, r9
 801a0e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0e4:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801a0e8:	8892      	ldrh	r2, [r2, #4]
 801a0ea:	462b      	mov	r3, r5
 801a0ec:	f105 0c08 	add.w	ip, r5, #8
 801a0f0:	46b3      	mov	fp, r6
 801a0f2:	6818      	ldr	r0, [r3, #0]
 801a0f4:	3308      	adds	r3, #8
 801a0f6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a0fa:	4637      	mov	r7, r6
 801a0fc:	4563      	cmp	r3, ip
 801a0fe:	c703      	stmia	r7!, {r0, r1}
 801a100:	463e      	mov	r6, r7
 801a102:	d1f6      	bne.n	801a0f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801a104:	6818      	ldr	r0, [r3, #0]
 801a106:	46d9      	mov	r9, fp
 801a108:	6038      	str	r0, [r7, #0]
 801a10a:	889b      	ldrh	r3, [r3, #4]
 801a10c:	80bb      	strh	r3, [r7, #4]
 801a10e:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801a112:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801a116:	18d3      	adds	r3, r2, r3
 801a118:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801a11c:	b298      	uxth	r0, r3
 801a11e:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801a122:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801a126:	281d      	cmp	r0, #29
 801a128:	ea4a 0a01 	orr.w	sl, sl, r1
 801a12c:	fa1f f68a 	uxth.w	r6, sl
 801a130:	d842      	bhi.n	801a1b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801a132:	2301      	movs	r3, #1
 801a134:	4950      	ldr	r1, [pc, #320]	; (801a278 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801a136:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801a13a:	4083      	lsls	r3, r0
 801a13c:	420b      	tst	r3, r1
 801a13e:	d114      	bne.n	801a16a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a140:	f413 7f60 	tst.w	r3, #896	; 0x380
 801a144:	d03c      	beq.n	801a1c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801a146:	fa1f fa8a 	uxth.w	sl, sl
 801a14a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a14e:	4658      	mov	r0, fp
 801a150:	eba1 010a 	sub.w	r1, r1, sl
 801a154:	b209      	sxth	r1, r1
 801a156:	f7ff fefb 	bl	8019f50 <_ZN8touchgfx9GlyphNode6setTopEs>
 801a15a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801a15e:	1b86      	subs	r6, r0, r6
 801a160:	eba6 0a0a 	sub.w	sl, r6, sl
 801a164:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801a168:	e7b9      	b.n	801a0de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a16a:	2100      	movs	r1, #0
 801a16c:	f104 001a 	add.w	r0, r4, #26
 801a170:	f7ff ff8e 	bl	801a090 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a174:	f640 6333 	movw	r3, #3635	; 0xe33
 801a178:	4601      	mov	r1, r0
 801a17a:	4298      	cmp	r0, r3
 801a17c:	d10a      	bne.n	801a194 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801a17e:	f8d8 3000 	ldr.w	r3, [r8]
 801a182:	4640      	mov	r0, r8
 801a184:	68db      	ldr	r3, [r3, #12]
 801a186:	4798      	blx	r3
 801a188:	7b41      	ldrb	r1, [r0, #13]
 801a18a:	7a00      	ldrb	r0, [r0, #8]
 801a18c:	f7ff fed2 	bl	8019f34 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a190:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a194:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801a198:	4658      	mov	r0, fp
 801a19a:	4431      	add	r1, r6
 801a19c:	4451      	add	r1, sl
 801a19e:	b209      	sxth	r1, r1
 801a1a0:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801a1a4:	f7ff fed4 	bl	8019f50 <_ZN8touchgfx9GlyphNode6setTopEs>
 801a1a8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a1ac:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801a1b0:	1a9b      	subs	r3, r3, r2
 801a1b2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801a1b6:	e792      	b.n	801a0de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a1b8:	f640 631b 	movw	r3, #3611	; 0xe1b
 801a1bc:	429a      	cmp	r2, r3
 801a1be:	d005      	beq.n	801a1cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801a1c0:	f022 0302 	bic.w	r3, r2, #2
 801a1c4:	f640 611d 	movw	r1, #3613	; 0xe1d
 801a1c8:	428b      	cmp	r3, r1
 801a1ca:	d119      	bne.n	801a200 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801a1cc:	1e53      	subs	r3, r2, #1
 801a1ce:	4629      	mov	r1, r5
 801a1d0:	4642      	mov	r2, r8
 801a1d2:	4620      	mov	r0, r4
 801a1d4:	b29b      	uxth	r3, r3
 801a1d6:	f7ff ff18 	bl	801a00a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a1da:	7b41      	ldrb	r1, [r0, #13]
 801a1dc:	7a00      	ldrb	r0, [r0, #8]
 801a1de:	f7ff fea9 	bl	8019f34 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a1e2:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801a1e6:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a1ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a1ee:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a1f2:	4313      	orrs	r3, r2
 801a1f4:	115a      	asrs	r2, r3, #5
 801a1f6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a1fa:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a1fe:	e02e      	b.n	801a25e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a200:	4639      	mov	r1, r7
 801a202:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a206:	f7ff fe95 	bl	8019f34 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a20a:	f640 6109 	movw	r1, #3593	; 0xe09
 801a20e:	f022 0310 	bic.w	r3, r2, #16
 801a212:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a216:	428b      	cmp	r3, r1
 801a218:	d003      	beq.n	801a222 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801a21a:	f640 6313 	movw	r3, #3603	; 0xe13
 801a21e:	429a      	cmp	r2, r3
 801a220:	d127      	bne.n	801a272 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801a222:	b27f      	sxtb	r7, r7
 801a224:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a228:	4629      	mov	r1, r5
 801a22a:	4620      	mov	r0, r4
 801a22c:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801a230:	431f      	orrs	r7, r3
 801a232:	f640 6313 	movw	r3, #3603	; 0xe13
 801a236:	429a      	cmp	r2, r3
 801a238:	bf14      	ite	ne
 801a23a:	f102 33ff 	addne.w	r3, r2, #4294967295
 801a23e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a242:	4642      	mov	r2, r8
 801a244:	bf18      	it	ne
 801a246:	b29b      	uxthne	r3, r3
 801a248:	f7ff fedf 	bl	801a00a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a24c:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a250:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a254:	7a83      	ldrb	r3, [r0, #10]
 801a256:	4313      	orrs	r3, r2
 801a258:	1aff      	subs	r7, r7, r3
 801a25a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801a25e:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801a262:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a266:	f7ff fe65 	bl	8019f34 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a26a:	1b80      	subs	r0, r0, r6
 801a26c:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801a270:	e735      	b.n	801a0de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a272:	2300      	movs	r3, #0
 801a274:	e7c1      	b.n	801a1fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801a276:	bf00      	nop
 801a278:	3fc00079 	.word	0x3fc00079

0801a27c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a27c:	3a01      	subs	r2, #1
 801a27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a282:	b292      	uxth	r2, r2
 801a284:	460c      	mov	r4, r1
 801a286:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a28a:	42b2      	cmp	r2, r6
 801a28c:	d018      	beq.n	801a2c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801a28e:	8b01      	ldrh	r1, [r0, #24]
 801a290:	f834 5b02 	ldrh.w	r5, [r4], #2
 801a294:	4291      	cmp	r1, r2
 801a296:	d805      	bhi.n	801a2a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801a298:	4b13      	ldr	r3, [pc, #76]	; (801a2e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801a29a:	21d3      	movs	r1, #211	; 0xd3
 801a29c:	4a13      	ldr	r2, [pc, #76]	; (801a2ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801a29e:	4814      	ldr	r0, [pc, #80]	; (801a2f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801a2a0:	f00a fd26 	bl	8024cf0 <__assert_func>
 801a2a4:	8ac1      	ldrh	r1, [r0, #22]
 801a2a6:	4411      	add	r1, r2
 801a2a8:	3a01      	subs	r2, #1
 801a2aa:	f001 0101 	and.w	r1, r1, #1
 801a2ae:	b292      	uxth	r2, r2
 801a2b0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a2b4:	8a49      	ldrh	r1, [r1, #18]
 801a2b6:	428d      	cmp	r5, r1
 801a2b8:	d0e7      	beq.n	801a28a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801a2ba:	2000      	movs	r0, #0
 801a2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2c0:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801a2c4:	2600      	movs	r6, #0
 801a2c6:	f100 051a 	add.w	r5, r0, #26
 801a2ca:	441f      	add	r7, r3
 801a2cc:	b2b1      	uxth	r1, r6
 801a2ce:	42b9      	cmp	r1, r7
 801a2d0:	da08      	bge.n	801a2e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801a2d2:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801a2d6:	4628      	mov	r0, r5
 801a2d8:	f7ff feda 	bl	801a090 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a2dc:	3601      	adds	r6, #1
 801a2de:	4540      	cmp	r0, r8
 801a2e0:	d0f4      	beq.n	801a2cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801a2e2:	e7ea      	b.n	801a2ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801a2e4:	2001      	movs	r0, #1
 801a2e6:	e7e9      	b.n	801a2bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801a2e8:	080288f9 	.word	0x080288f9
 801a2ec:	08028e88 	.word	0x08028e88
 801a2f0:	08028907 	.word	0x08028907

0801a2f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801a2f4:	b538      	push	{r3, r4, r5, lr}
 801a2f6:	8ac3      	ldrh	r3, [r0, #22]
 801a2f8:	428b      	cmp	r3, r1
 801a2fa:	d205      	bcs.n	801a308 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801a2fc:	4b08      	ldr	r3, [pc, #32]	; (801a320 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801a2fe:	21d8      	movs	r1, #216	; 0xd8
 801a300:	4a08      	ldr	r2, [pc, #32]	; (801a324 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801a302:	4809      	ldr	r0, [pc, #36]	; (801a328 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801a304:	f00a fcf4 	bl	8024cf0 <__assert_func>
 801a308:	8a82      	ldrh	r2, [r0, #20]
 801a30a:	250a      	movs	r5, #10
 801a30c:	1a5b      	subs	r3, r3, r1
 801a30e:	440a      	add	r2, r1
 801a310:	82c3      	strh	r3, [r0, #22]
 801a312:	fbb2 f4f5 	udiv	r4, r2, r5
 801a316:	fb05 2214 	mls	r2, r5, r4, r2
 801a31a:	8282      	strh	r2, [r0, #20]
 801a31c:	bd38      	pop	{r3, r4, r5, pc}
 801a31e:	bf00      	nop
 801a320:	080288ed 	.word	0x080288ed
 801a324:	08028ca4 	.word	0x08028ca4
 801a328:	08028907 	.word	0x08028907

0801a32c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801a32c:	b538      	push	{r3, r4, r5, lr}
 801a32e:	8ac3      	ldrh	r3, [r0, #22]
 801a330:	2b09      	cmp	r3, #9
 801a332:	d905      	bls.n	801a340 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801a334:	4b08      	ldr	r3, [pc, #32]	; (801a358 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801a336:	21f7      	movs	r1, #247	; 0xf7
 801a338:	4a08      	ldr	r2, [pc, #32]	; (801a35c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801a33a:	4809      	ldr	r0, [pc, #36]	; (801a360 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801a33c:	f00a fcd8 	bl	8024cf0 <__assert_func>
 801a340:	8a82      	ldrh	r2, [r0, #20]
 801a342:	250a      	movs	r5, #10
 801a344:	441a      	add	r2, r3
 801a346:	3301      	adds	r3, #1
 801a348:	fbb2 f4f5 	udiv	r4, r2, r5
 801a34c:	fb05 2214 	mls	r2, r5, r4, r2
 801a350:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801a354:	82c3      	strh	r3, [r0, #22]
 801a356:	bd38      	pop	{r3, r4, r5, pc}
 801a358:	080288e1 	.word	0x080288e1
 801a35c:	08028bf5 	.word	0x08028bf5
 801a360:	08028907 	.word	0x08028907

0801a364 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a364:	b538      	push	{r3, r4, r5, lr}
 801a366:	4604      	mov	r4, r0
 801a368:	f100 051a 	add.w	r5, r0, #26
 801a36c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a36e:	2b0a      	cmp	r3, #10
 801a370:	d01c      	beq.n	801a3ac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801a372:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801a374:	b962      	cbnz	r2, 801a390 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801a376:	f104 051a 	add.w	r5, r4, #26
 801a37a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a37c:	2b0a      	cmp	r3, #10
 801a37e:	d015      	beq.n	801a3ac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801a380:	4620      	mov	r0, r4
 801a382:	f7ff fdf6 	bl	8019f72 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a386:	4601      	mov	r1, r0
 801a388:	4628      	mov	r0, r5
 801a38a:	f7ff ffcf 	bl	801a32c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801a38e:	e7f4      	b.n	801a37a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801a390:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a392:	3a01      	subs	r2, #1
 801a394:	4628      	mov	r0, r5
 801a396:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801a39a:	3301      	adds	r3, #1
 801a39c:	f003 0301 	and.w	r3, r3, #1
 801a3a0:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801a3a2:	8722      	strh	r2, [r4, #56]	; 0x38
 801a3a4:	86e3      	strh	r3, [r4, #54]	; 0x36
 801a3a6:	f7ff ffc1 	bl	801a32c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801a3aa:	e7df      	b.n	801a36c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801a3ac:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a3b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801a3b0:	2300      	movs	r3, #0
 801a3b2:	b510      	push	{r4, lr}
 801a3b4:	6043      	str	r3, [r0, #4]
 801a3b6:	4604      	mov	r4, r0
 801a3b8:	60c3      	str	r3, [r0, #12]
 801a3ba:	7403      	strb	r3, [r0, #16]
 801a3bc:	8603      	strh	r3, [r0, #48]	; 0x30
 801a3be:	8303      	strh	r3, [r0, #24]
 801a3c0:	8703      	strh	r3, [r0, #56]	; 0x38
 801a3c2:	f7ff ffcf 	bl	801a364 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a3c6:	4a0a      	ldr	r2, [pc, #40]	; (801a3f0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801a3c8:	6813      	ldr	r3, [r2, #0]
 801a3ca:	4611      	mov	r1, r2
 801a3cc:	b913      	cbnz	r3, 801a3d4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801a3ce:	6852      	ldr	r2, [r2, #4]
 801a3d0:	07d0      	lsls	r0, r2, #31
 801a3d2:	d50b      	bpl.n	801a3ec <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801a3d4:	6849      	ldr	r1, [r1, #4]
 801a3d6:	104a      	asrs	r2, r1, #1
 801a3d8:	07c9      	lsls	r1, r1, #31
 801a3da:	eb04 0002 	add.w	r0, r4, r2
 801a3de:	bf48      	it	mi
 801a3e0:	58a2      	ldrmi	r2, [r4, r2]
 801a3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3e6:	bf48      	it	mi
 801a3e8:	58d3      	ldrmi	r3, [r2, r3]
 801a3ea:	4718      	bx	r3
 801a3ec:	bd10      	pop	{r4, pc}
 801a3ee:	bf00      	nop
 801a3f0:	20008620 	.word	0x20008620

0801a3f4 <_ZN8touchgfx12TextProviderC1Ev>:
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	2201      	movs	r2, #1
 801a3f8:	b510      	push	{r4, lr}
 801a3fa:	4604      	mov	r4, r0
 801a3fc:	60c3      	str	r3, [r0, #12]
 801a3fe:	7403      	strb	r3, [r0, #16]
 801a400:	82c3      	strh	r3, [r0, #22]
 801a402:	8303      	strh	r3, [r0, #24]
 801a404:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a406:	8603      	strh	r3, [r0, #48]	; 0x30
 801a408:	86c3      	strh	r3, [r0, #54]	; 0x36
 801a40a:	8703      	strh	r3, [r0, #56]	; 0x38
 801a40c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a40e:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801a412:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801a416:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801a41a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801a41e:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801a422:	e9c0 3300 	strd	r3, r3, [r0]
 801a426:	f7ff ffc3 	bl	801a3b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a42a:	4620      	mov	r0, r4
 801a42c:	bd10      	pop	{r4, pc}

0801a42e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801a42e:	b410      	push	{r4}
 801a430:	6082      	str	r2, [r0, #8]
 801a432:	6001      	str	r1, [r0, #0]
 801a434:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a436:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a43a:	f7ff bfb9 	b.w	801a3b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801a440 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801a440:	b508      	push	{r3, lr}
 801a442:	88c2      	ldrh	r2, [r0, #6]
 801a444:	440a      	add	r2, r1
 801a446:	2a02      	cmp	r2, #2
 801a448:	dd05      	ble.n	801a456 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801a44a:	4b06      	ldr	r3, [pc, #24]	; (801a464 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801a44c:	21ec      	movs	r1, #236	; 0xec
 801a44e:	4a06      	ldr	r2, [pc, #24]	; (801a468 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801a450:	4806      	ldr	r0, [pc, #24]	; (801a46c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801a452:	f00a fc4d 	bl	8024cf0 <__assert_func>
 801a456:	8883      	ldrh	r3, [r0, #4]
 801a458:	80c2      	strh	r2, [r0, #6]
 801a45a:	1a59      	subs	r1, r3, r1
 801a45c:	f001 0101 	and.w	r1, r1, #1
 801a460:	8081      	strh	r1, [r0, #4]
 801a462:	bd08      	pop	{r3, pc}
 801a464:	08028933 	.word	0x08028933
 801a468:	08028e01 	.word	0x08028e01
 801a46c:	08028907 	.word	0x08028907

0801a470 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801a470:	b508      	push	{r3, lr}
 801a472:	88c3      	ldrh	r3, [r0, #6]
 801a474:	428b      	cmp	r3, r1
 801a476:	d805      	bhi.n	801a484 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801a478:	4b06      	ldr	r3, [pc, #24]	; (801a494 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801a47a:	21fd      	movs	r1, #253	; 0xfd
 801a47c:	4a06      	ldr	r2, [pc, #24]	; (801a498 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801a47e:	4807      	ldr	r0, [pc, #28]	; (801a49c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801a480:	f00a fc36 	bl	8024cf0 <__assert_func>
 801a484:	8883      	ldrh	r3, [r0, #4]
 801a486:	4419      	add	r1, r3
 801a488:	f001 0101 	and.w	r1, r1, #1
 801a48c:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a490:	bd08      	pop	{r3, pc}
 801a492:	bf00      	nop
 801a494:	080288f9 	.word	0x080288f9
 801a498:	08028f59 	.word	0x08028f59
 801a49c:	08028907 	.word	0x08028907

0801a4a0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a4a0:	b570      	push	{r4, r5, r6, lr}
 801a4a2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801a4a4:	4604      	mov	r4, r0
 801a4a6:	b92a      	cbnz	r2, 801a4b4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801a4a8:	4b12      	ldr	r3, [pc, #72]	; (801a4f4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801a4aa:	21de      	movs	r1, #222	; 0xde
 801a4ac:	4a12      	ldr	r2, [pc, #72]	; (801a4f8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801a4ae:	4813      	ldr	r0, [pc, #76]	; (801a4fc <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801a4b0:	f00a fc1e 	bl	8024cf0 <__assert_func>
 801a4b4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801a4b6:	260a      	movs	r6, #10
 801a4b8:	3a01      	subs	r2, #1
 801a4ba:	3412      	adds	r4, #18
 801a4bc:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801a4c0:	3301      	adds	r3, #1
 801a4c2:	8b4d      	ldrh	r5, [r1, #26]
 801a4c4:	8602      	strh	r2, [r0, #48]	; 0x30
 801a4c6:	fbb3 f1f6 	udiv	r1, r3, r6
 801a4ca:	fb06 3311 	mls	r3, r6, r1, r3
 801a4ce:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a4d0:	f7ff ff48 	bl	801a364 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a4d4:	88e3      	ldrh	r3, [r4, #6]
 801a4d6:	2101      	movs	r1, #1
 801a4d8:	2b02      	cmp	r3, #2
 801a4da:	bf04      	itt	eq
 801a4dc:	2301      	moveq	r3, #1
 801a4de:	80e3      	strheq	r3, [r4, #6]
 801a4e0:	4620      	mov	r0, r4
 801a4e2:	f7ff ffad 	bl	801a440 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801a4e6:	4620      	mov	r0, r4
 801a4e8:	462a      	mov	r2, r5
 801a4ea:	2100      	movs	r1, #0
 801a4ec:	f7ff ffc0 	bl	801a470 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801a4f0:	4628      	mov	r0, r5
 801a4f2:	bd70      	pop	{r4, r5, r6, pc}
 801a4f4:	080288d8 	.word	0x080288d8
 801a4f8:	08028b4a 	.word	0x08028b4a
 801a4fc:	08028907 	.word	0x08028907

0801a500 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a500:	428a      	cmp	r2, r1
 801a502:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a506:	4604      	mov	r4, r0
 801a508:	460e      	mov	r6, r1
 801a50a:	4615      	mov	r5, r2
 801a50c:	469a      	mov	sl, r3
 801a50e:	d92b      	bls.n	801a568 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801a510:	1a57      	subs	r7, r2, r1
 801a512:	f04f 0800 	mov.w	r8, #0
 801a516:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801a51a:	f04f 0b0a 	mov.w	fp, #10
 801a51e:	b2bf      	uxth	r7, r7
 801a520:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a522:	b92b      	cbnz	r3, 801a530 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801a524:	4b24      	ldr	r3, [pc, #144]	; (801a5b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801a526:	21e6      	movs	r1, #230	; 0xe6
 801a528:	4a24      	ldr	r2, [pc, #144]	; (801a5bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801a52a:	4825      	ldr	r0, [pc, #148]	; (801a5c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801a52c:	f00a fbe0 	bl	8024cf0 <__assert_func>
 801a530:	3b01      	subs	r3, #1
 801a532:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801a534:	2101      	movs	r1, #1
 801a536:	4648      	mov	r0, r9
 801a538:	b29b      	uxth	r3, r3
 801a53a:	f108 0801 	add.w	r8, r8, #1
 801a53e:	441a      	add	r2, r3
 801a540:	8623      	strh	r3, [r4, #48]	; 0x30
 801a542:	fbb2 f3fb 	udiv	r3, r2, fp
 801a546:	fb0b 2313 	mls	r3, fp, r3, r2
 801a54a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a54e:	8b5a      	ldrh	r2, [r3, #26]
 801a550:	9201      	str	r2, [sp, #4]
 801a552:	f7ff ff75 	bl	801a440 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801a556:	9a01      	ldr	r2, [sp, #4]
 801a558:	2100      	movs	r1, #0
 801a55a:	4648      	mov	r0, r9
 801a55c:	f7ff ff88 	bl	801a470 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801a560:	fa1f f388 	uxth.w	r3, r8
 801a564:	429f      	cmp	r7, r3
 801a566:	d8db      	bhi.n	801a520 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801a568:	f104 071a 	add.w	r7, r4, #26
 801a56c:	4631      	mov	r1, r6
 801a56e:	260a      	movs	r6, #10
 801a570:	4638      	mov	r0, r7
 801a572:	f7ff febf 	bl	801a2f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a576:	b1c5      	cbz	r5, 801a5aa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801a578:	3d01      	subs	r5, #1
 801a57a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a57c:	b2ad      	uxth	r5, r5
 801a57e:	2b09      	cmp	r3, #9
 801a580:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801a584:	d903      	bls.n	801a58e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801a586:	4b0f      	ldr	r3, [pc, #60]	; (801a5c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801a588:	21ec      	movs	r1, #236	; 0xec
 801a58a:	4a0f      	ldr	r2, [pc, #60]	; (801a5c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801a58c:	e7cd      	b.n	801a52a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801a58e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801a590:	3301      	adds	r3, #1
 801a592:	3109      	adds	r1, #9
 801a594:	8623      	strh	r3, [r4, #48]	; 0x30
 801a596:	fbb1 f0f6 	udiv	r0, r1, r6
 801a59a:	fb06 1110 	mls	r1, r6, r0, r1
 801a59e:	4638      	mov	r0, r7
 801a5a0:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801a5a2:	2100      	movs	r1, #0
 801a5a4:	f7ff fd5a 	bl	801a05c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a5a8:	e7e5      	b.n	801a576 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801a5aa:	4620      	mov	r0, r4
 801a5ac:	b003      	add	sp, #12
 801a5ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5b2:	f7ff bed7 	b.w	801a364 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a5b6:	bf00      	nop
 801a5b8:	080288d8 	.word	0x080288d8
 801a5bc:	080289ce 	.word	0x080289ce
 801a5c0:	08028907 	.word	0x08028907
 801a5c4:	08028933 	.word	0x08028933
 801a5c8:	08028946 	.word	0x08028946

0801a5cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a5cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5d0:	4605      	mov	r5, r0
 801a5d2:	4616      	mov	r6, r2
 801a5d4:	1c8c      	adds	r4, r1, #2
 801a5d6:	8809      	ldrh	r1, [r1, #0]
 801a5d8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a5dc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a5e0:	42b3      	cmp	r3, r6
 801a5e2:	d124      	bne.n	801a62e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a5e4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a5e8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a5ec:	f001 070f 	and.w	r7, r1, #15
 801a5f0:	4652      	mov	r2, sl
 801a5f2:	f8cd 8000 	str.w	r8, [sp]
 801a5f6:	464b      	mov	r3, r9
 801a5f8:	4621      	mov	r1, r4
 801a5fa:	4628      	mov	r0, r5
 801a5fc:	f7ff fe3e 	bl	801a27c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a600:	4683      	mov	fp, r0
 801a602:	b168      	cbz	r0, 801a620 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a604:	eb0a 0109 	add.w	r1, sl, r9
 801a608:	463a      	mov	r2, r7
 801a60a:	4628      	mov	r0, r5
 801a60c:	4441      	add	r1, r8
 801a60e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a612:	4649      	mov	r1, r9
 801a614:	f7ff ff74 	bl	801a500 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a618:	4658      	mov	r0, fp
 801a61a:	b003      	add	sp, #12
 801a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a620:	eb07 010a 	add.w	r1, r7, sl
 801a624:	4449      	add	r1, r9
 801a626:	4441      	add	r1, r8
 801a628:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a62c:	e7d2      	b.n	801a5d4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a62e:	f04f 0b00 	mov.w	fp, #0
 801a632:	e7f1      	b.n	801a618 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a634 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a638:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a63a:	4604      	mov	r4, r0
 801a63c:	260b      	movs	r6, #11
 801a63e:	f100 091a 	add.w	r9, r0, #26
 801a642:	886f      	ldrh	r7, [r5, #2]
 801a644:	087f      	lsrs	r7, r7, #1
 801a646:	3e01      	subs	r6, #1
 801a648:	d013      	beq.n	801a672 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801a64a:	2100      	movs	r1, #0
 801a64c:	4648      	mov	r0, r9
 801a64e:	f7ff fd1f 	bl	801a090 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a652:	462a      	mov	r2, r5
 801a654:	4680      	mov	r8, r0
 801a656:	4603      	mov	r3, r0
 801a658:	4639      	mov	r1, r7
 801a65a:	4620      	mov	r0, r4
 801a65c:	f7ff fce0 	bl	801a020 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a660:	b138      	cbz	r0, 801a672 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801a662:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a666:	4642      	mov	r2, r8
 801a668:	4620      	mov	r0, r4
 801a66a:	f7ff ffaf 	bl	801a5cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a66e:	2800      	cmp	r0, #0
 801a670:	d1e9      	bne.n	801a646 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801a672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801a678 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801a678:	4b1e      	ldr	r3, [pc, #120]	; (801a6f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801a67a:	b570      	push	{r4, r5, r6, lr}
 801a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a680:	4604      	mov	r4, r0
 801a682:	f003 0501 	and.w	r5, r3, #1
 801a686:	b902      	cbnz	r2, 801a68a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801a688:	b165      	cbz	r5, 801a6a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801a68a:	105b      	asrs	r3, r3, #1
 801a68c:	f104 061a 	add.w	r6, r4, #26
 801a690:	18e0      	adds	r0, r4, r3
 801a692:	b10d      	cbz	r5, 801a698 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801a694:	58e3      	ldr	r3, [r4, r3]
 801a696:	589a      	ldr	r2, [r3, r2]
 801a698:	4790      	blx	r2
 801a69a:	2100      	movs	r1, #0
 801a69c:	4602      	mov	r2, r0
 801a69e:	4630      	mov	r0, r6
 801a6a0:	f7ff fcdc 	bl	801a05c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a6a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a6a6:	b303      	cbz	r3, 801a6ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a6a8:	f104 051a 	add.w	r5, r4, #26
 801a6ac:	2100      	movs	r1, #0
 801a6ae:	4628      	mov	r0, r5
 801a6b0:	f7ff fcee 	bl	801a090 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a6b4:	b1c8      	cbz	r0, 801a6ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a6b6:	4620      	mov	r0, r4
 801a6b8:	f7ff ffbc 	bl	801a634 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801a6bc:	2101      	movs	r1, #1
 801a6be:	4628      	mov	r0, r5
 801a6c0:	f7ff fce6 	bl	801a090 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a6c4:	f640 133f 	movw	r3, #2367	; 0x93f
 801a6c8:	4606      	mov	r6, r0
 801a6ca:	4298      	cmp	r0, r3
 801a6cc:	d10d      	bne.n	801a6ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a6ce:	2100      	movs	r1, #0
 801a6d0:	4628      	mov	r0, r5
 801a6d2:	f7ff fcdd 	bl	801a090 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a6d6:	2101      	movs	r1, #1
 801a6d8:	4602      	mov	r2, r0
 801a6da:	4628      	mov	r0, r5
 801a6dc:	f7ff fcbe 	bl	801a05c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a6e0:	4632      	mov	r2, r6
 801a6e2:	2100      	movs	r1, #0
 801a6e4:	4628      	mov	r0, r5
 801a6e6:	f7ff fcb9 	bl	801a05c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a6ea:	4620      	mov	r0, r4
 801a6ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a6f0:	f7ff bed6 	b.w	801a4a0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a6f4:	20008628 	.word	0x20008628

0801a6f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6fa:	4617      	mov	r7, r2
 801a6fc:	461e      	mov	r6, r3
 801a6fe:	4605      	mov	r5, r0
 801a700:	f7ff ffba 	bl	801a678 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a704:	683b      	ldr	r3, [r7, #0]
 801a706:	4604      	mov	r4, r0
 801a708:	4601      	mov	r1, r0
 801a70a:	4638      	mov	r0, r7
 801a70c:	68db      	ldr	r3, [r3, #12]
 801a70e:	4798      	blx	r3
 801a710:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a714:	4602      	mov	r2, r0
 801a716:	6030      	str	r0, [r6, #0]
 801a718:	b29b      	uxth	r3, r3
 801a71a:	2b7f      	cmp	r3, #127	; 0x7f
 801a71c:	d813      	bhi.n	801a746 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801a71e:	4639      	mov	r1, r7
 801a720:	4628      	mov	r0, r5
 801a722:	f7ff fccf 	bl	801a0c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a726:	6030      	str	r0, [r6, #0]
 801a728:	6833      	ldr	r3, [r6, #0]
 801a72a:	b143      	cbz	r3, 801a73e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a72c:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a730:	7a9b      	ldrb	r3, [r3, #10]
 801a732:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a736:	4313      	orrs	r3, r2
 801a738:	bf0c      	ite	eq
 801a73a:	2301      	moveq	r3, #1
 801a73c:	2300      	movne	r3, #0
 801a73e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a742:	4620      	mov	r0, r4
 801a744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a746:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d0ec      	beq.n	801a728 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a74e:	f640 1302 	movw	r3, #2306	; 0x902
 801a752:	429c      	cmp	r4, r3
 801a754:	d1e8      	bne.n	801a728 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a756:	4601      	mov	r1, r0
 801a758:	4628      	mov	r0, r5
 801a75a:	f7ff fc32 	bl	8019fc2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a75e:	e7e2      	b.n	801a726 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801a760 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a764:	4617      	mov	r7, r2
 801a766:	461e      	mov	r6, r3
 801a768:	4605      	mov	r5, r0
 801a76a:	f7ff ff85 	bl	801a678 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a76e:	683b      	ldr	r3, [r7, #0]
 801a770:	4604      	mov	r4, r0
 801a772:	4601      	mov	r1, r0
 801a774:	4638      	mov	r0, r7
 801a776:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801a77a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a77e:	47c0      	blx	r8
 801a780:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a784:	4602      	mov	r2, r0
 801a786:	6030      	str	r0, [r6, #0]
 801a788:	b29b      	uxth	r3, r3
 801a78a:	2b7f      	cmp	r3, #127	; 0x7f
 801a78c:	d814      	bhi.n	801a7b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801a78e:	4639      	mov	r1, r7
 801a790:	4628      	mov	r0, r5
 801a792:	f7ff fc97 	bl	801a0c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a796:	6030      	str	r0, [r6, #0]
 801a798:	6833      	ldr	r3, [r6, #0]
 801a79a:	b143      	cbz	r3, 801a7ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a79c:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a7a0:	7a9b      	ldrb	r3, [r3, #10]
 801a7a2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a7a6:	4313      	orrs	r3, r2
 801a7a8:	bf0c      	ite	eq
 801a7aa:	2301      	moveq	r3, #1
 801a7ac:	2300      	movne	r3, #0
 801a7ae:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a7b2:	4620      	mov	r0, r4
 801a7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7b8:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d0eb      	beq.n	801a798 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a7c0:	f640 1302 	movw	r3, #2306	; 0x902
 801a7c4:	429c      	cmp	r4, r3
 801a7c6:	d1e7      	bne.n	801a798 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a7c8:	4601      	mov	r1, r0
 801a7ca:	4628      	mov	r0, r5
 801a7cc:	f7ff fbf9 	bl	8019fc2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a7d0:	e7e1      	b.n	801a796 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801a7d2 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a7d2:	4602      	mov	r2, r0
 801a7d4:	b148      	cbz	r0, 801a7ea <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	b298      	uxth	r0, r3
 801a7da:	3301      	adds	r3, #1
 801a7dc:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a7e0:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a7e4:	2900      	cmp	r1, #0
 801a7e6:	d1f7      	bne.n	801a7d8 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a7e8:	4770      	bx	lr
 801a7ea:	4770      	bx	lr

0801a7ec <_ZN8touchgfx7Unicode6strlenEPKc>:
 801a7ec:	b140      	cbz	r0, 801a800 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801a7ee:	4602      	mov	r2, r0
 801a7f0:	1a13      	subs	r3, r2, r0
 801a7f2:	f812 1b01 	ldrb.w	r1, [r2], #1
 801a7f6:	b29b      	uxth	r3, r3
 801a7f8:	2900      	cmp	r1, #0
 801a7fa:	d1f9      	bne.n	801a7f0 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	4770      	bx	lr
 801a800:	4603      	mov	r3, r0
 801a802:	e7fb      	b.n	801a7fc <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801a804 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a804:	b530      	push	{r4, r5, lr}
 801a806:	4604      	mov	r4, r0
 801a808:	b159      	cbz	r1, 801a822 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a80a:	b148      	cbz	r0, 801a820 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a80c:	2300      	movs	r3, #0
 801a80e:	b298      	uxth	r0, r3
 801a810:	4282      	cmp	r2, r0
 801a812:	d905      	bls.n	801a820 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a814:	5ccd      	ldrb	r5, [r1, r3]
 801a816:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a81a:	3301      	adds	r3, #1
 801a81c:	2d00      	cmp	r5, #0
 801a81e:	d1f6      	bne.n	801a80e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a820:	bd30      	pop	{r4, r5, pc}
 801a822:	4608      	mov	r0, r1
 801a824:	e7fc      	b.n	801a820 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a826 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801a826:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a828:	468c      	mov	ip, r1
 801a82a:	b08b      	sub	sp, #44	; 0x2c
 801a82c:	2100      	movs	r1, #0
 801a82e:	ae01      	add	r6, sp, #4
 801a830:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a834:	211f      	movs	r1, #31
 801a836:	fbb0 f7f3 	udiv	r7, r0, r3
 801a83a:	fb03 0517 	mls	r5, r3, r7, r0
 801a83e:	4638      	mov	r0, r7
 801a840:	b2ec      	uxtb	r4, r5
 801a842:	2d09      	cmp	r5, #9
 801a844:	bfd4      	ite	le
 801a846:	3430      	addle	r4, #48	; 0x30
 801a848:	3457      	addgt	r4, #87	; 0x57
 801a84a:	b2e4      	uxtb	r4, r4
 801a84c:	558c      	strb	r4, [r1, r6]
 801a84e:	1e4c      	subs	r4, r1, #1
 801a850:	b92f      	cbnz	r7, 801a85e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801a852:	4431      	add	r1, r6
 801a854:	4660      	mov	r0, ip
 801a856:	f7ff ffd5 	bl	801a804 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a85a:	b00b      	add	sp, #44	; 0x2c
 801a85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a85e:	4621      	mov	r1, r4
 801a860:	e7e9      	b.n	801a836 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801a862 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801a862:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a864:	4607      	mov	r7, r0
 801a866:	b08b      	sub	sp, #44	; 0x2c
 801a868:	4608      	mov	r0, r1
 801a86a:	b341      	cbz	r1, 801a8be <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a86c:	1e99      	subs	r1, r3, #2
 801a86e:	290e      	cmp	r1, #14
 801a870:	d825      	bhi.n	801a8be <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a872:	2100      	movs	r1, #0
 801a874:	463c      	mov	r4, r7
 801a876:	261f      	movs	r6, #31
 801a878:	f10d 0c04 	add.w	ip, sp, #4
 801a87c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a880:	1e71      	subs	r1, r6, #1
 801a882:	fb94 fef3 	sdiv	lr, r4, r3
 801a886:	fb03 441e 	mls	r4, r3, lr, r4
 801a88a:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a88e:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a892:	b2ec      	uxtb	r4, r5
 801a894:	2d09      	cmp	r5, #9
 801a896:	bfd4      	ite	le
 801a898:	3430      	addle	r4, #48	; 0x30
 801a89a:	3457      	addgt	r4, #87	; 0x57
 801a89c:	b2e4      	uxtb	r4, r4
 801a89e:	f80c 4006 	strb.w	r4, [ip, r6]
 801a8a2:	4674      	mov	r4, lr
 801a8a4:	b96c      	cbnz	r4, 801a8c2 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801a8a6:	2f00      	cmp	r7, #0
 801a8a8:	da05      	bge.n	801a8b6 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801a8aa:	ab0a      	add	r3, sp, #40	; 0x28
 801a8ac:	4419      	add	r1, r3
 801a8ae:	232d      	movs	r3, #45	; 0x2d
 801a8b0:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a8b4:	1eb1      	subs	r1, r6, #2
 801a8b6:	3101      	adds	r1, #1
 801a8b8:	4461      	add	r1, ip
 801a8ba:	f7ff ffa3 	bl	801a804 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a8be:	b00b      	add	sp, #44	; 0x2c
 801a8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8c2:	460e      	mov	r6, r1
 801a8c4:	e7dc      	b.n	801a880 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801a8c6 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801a8c6:	b510      	push	{r4, lr}
 801a8c8:	b158      	cbz	r0, 801a8e2 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801a8ca:	1e82      	subs	r2, r0, #2
 801a8cc:	210a      	movs	r1, #10
 801a8ce:	2000      	movs	r0, #0
 801a8d0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a8d4:	3b30      	subs	r3, #48	; 0x30
 801a8d6:	b29c      	uxth	r4, r3
 801a8d8:	2c09      	cmp	r4, #9
 801a8da:	d802      	bhi.n	801a8e2 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801a8dc:	fb01 3000 	mla	r0, r1, r0, r3
 801a8e0:	e7f6      	b.n	801a8d0 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801a8e2:	bd10      	pop	{r4, pc}

0801a8e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801a8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8e8:	b085      	sub	sp, #20
 801a8ea:	f8d0 8000 	ldr.w	r8, [r0]
 801a8ee:	468a      	mov	sl, r1
 801a8f0:	461c      	mov	r4, r3
 801a8f2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801a8f6:	4681      	mov	r9, r0
 801a8f8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a8fc:	4640      	mov	r0, r8
 801a8fe:	9203      	str	r2, [sp, #12]
 801a900:	9102      	str	r1, [sp, #8]
 801a902:	9301      	str	r3, [sp, #4]
 801a904:	f7ff ff65 	bl	801a7d2 <_ZN8touchgfx7Unicode6strlenEPKt>
 801a908:	9a03      	ldr	r2, [sp, #12]
 801a90a:	f1ba 0f00 	cmp.w	sl, #0
 801a90e:	bf0c      	ite	eq
 801a910:	4684      	moveq	ip, r0
 801a912:	f100 0c01 	addne.w	ip, r0, #1
 801a916:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801a91a:	8812      	ldrh	r2, [r2, #0]
 801a91c:	fa1f fc8c 	uxth.w	ip, ip
 801a920:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a922:	2a69      	cmp	r2, #105	; 0x69
 801a924:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a926:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801a928:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801a92c:	d004      	beq.n	801a938 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a92e:	d844      	bhi.n	801a9ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801a930:	2a58      	cmp	r2, #88	; 0x58
 801a932:	d001      	beq.n	801a938 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a934:	2a64      	cmp	r2, #100	; 0x64
 801a936:	d14b      	bne.n	801a9d0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801a938:	b1a4      	cbz	r4, 801a964 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a93a:	b956      	cbnz	r6, 801a952 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801a93c:	2801      	cmp	r0, #1
 801a93e:	d108      	bne.n	801a952 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801a940:	f8b8 2000 	ldrh.w	r2, [r8]
 801a944:	2a30      	cmp	r2, #48	; 0x30
 801a946:	bf02      	ittt	eq
 801a948:	f108 0202 	addeq.w	r2, r8, #2
 801a94c:	4630      	moveq	r0, r6
 801a94e:	f8c9 2000 	streq.w	r2, [r9]
 801a952:	45b4      	cmp	ip, r6
 801a954:	da3e      	bge.n	801a9d4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801a956:	b2b6      	uxth	r6, r6
 801a958:	eba6 040c 	sub.w	r4, r6, ip
 801a95c:	46b4      	mov	ip, r6
 801a95e:	b2a4      	uxth	r4, r4
 801a960:	f04f 0b00 	mov.w	fp, #0
 801a964:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a968:	3a01      	subs	r2, #1
 801a96a:	b169      	cbz	r1, 801a988 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a96c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a96e:	458c      	cmp	ip, r1
 801a970:	da09      	bge.n	801a986 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801a972:	eba1 010c 	sub.w	r1, r1, ip
 801a976:	b289      	uxth	r1, r1
 801a978:	b933      	cbnz	r3, 801a988 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a97a:	f1bb 0f00 	cmp.w	fp, #0
 801a97e:	d02b      	beq.n	801a9d8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801a980:	b350      	cbz	r0, 801a9d8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801a982:	440c      	add	r4, r1
 801a984:	b2a4      	uxth	r4, r4
 801a986:	2100      	movs	r1, #0
 801a988:	682b      	ldr	r3, [r5, #0]
 801a98a:	4293      	cmp	r3, r2
 801a98c:	da07      	bge.n	801a99e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801a98e:	f1ba 0f00 	cmp.w	sl, #0
 801a992:	d004      	beq.n	801a99e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801a994:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801a998:	682b      	ldr	r3, [r5, #0]
 801a99a:	3301      	adds	r3, #1
 801a99c:	602b      	str	r3, [r5, #0]
 801a99e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801a9a2:	b354      	cbz	r4, 801a9fa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801a9a4:	682e      	ldr	r6, [r5, #0]
 801a9a6:	3c01      	subs	r4, #1
 801a9a8:	42b2      	cmp	r2, r6
 801a9aa:	b2a4      	uxth	r4, r4
 801a9ac:	dd25      	ble.n	801a9fa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801a9ae:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801a9b2:	682b      	ldr	r3, [r5, #0]
 801a9b4:	3301      	adds	r3, #1
 801a9b6:	602b      	str	r3, [r5, #0]
 801a9b8:	e7f3      	b.n	801a9a2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801a9ba:	2a73      	cmp	r2, #115	; 0x73
 801a9bc:	d003      	beq.n	801a9c6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801a9be:	2a78      	cmp	r2, #120	; 0x78
 801a9c0:	d0ba      	beq.n	801a938 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a9c2:	2a6f      	cmp	r2, #111	; 0x6f
 801a9c4:	e7b7      	b.n	801a936 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801a9c6:	2c00      	cmp	r4, #0
 801a9c8:	d0cc      	beq.n	801a964 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a9ca:	42b0      	cmp	r0, r6
 801a9cc:	dd00      	ble.n	801a9d0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801a9ce:	b2b0      	uxth	r0, r6
 801a9d0:	2400      	movs	r4, #0
 801a9d2:	e7c7      	b.n	801a964 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a9d4:	2400      	movs	r4, #0
 801a9d6:	e7c3      	b.n	801a960 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801a9d8:	2900      	cmp	r1, #0
 801a9da:	d0d5      	beq.n	801a988 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a9dc:	f04f 0c20 	mov.w	ip, #32
 801a9e0:	682e      	ldr	r6, [r5, #0]
 801a9e2:	2900      	cmp	r1, #0
 801a9e4:	d0d0      	beq.n	801a988 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a9e6:	3901      	subs	r1, #1
 801a9e8:	4296      	cmp	r6, r2
 801a9ea:	b289      	uxth	r1, r1
 801a9ec:	dacb      	bge.n	801a986 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801a9ee:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801a9f2:	682b      	ldr	r3, [r5, #0]
 801a9f4:	3301      	adds	r3, #1
 801a9f6:	602b      	str	r3, [r5, #0]
 801a9f8:	e7f2      	b.n	801a9e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801a9fa:	b198      	cbz	r0, 801aa24 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801a9fc:	f8d9 3000 	ldr.w	r3, [r9]
 801aa00:	881c      	ldrh	r4, [r3, #0]
 801aa02:	b17c      	cbz	r4, 801aa24 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801aa04:	682c      	ldr	r4, [r5, #0]
 801aa06:	3801      	subs	r0, #1
 801aa08:	42a2      	cmp	r2, r4
 801aa0a:	b280      	uxth	r0, r0
 801aa0c:	dd0a      	ble.n	801aa24 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801aa0e:	1c9c      	adds	r4, r3, #2
 801aa10:	f8c9 4000 	str.w	r4, [r9]
 801aa14:	881c      	ldrh	r4, [r3, #0]
 801aa16:	682b      	ldr	r3, [r5, #0]
 801aa18:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801aa1c:	682b      	ldr	r3, [r5, #0]
 801aa1e:	3301      	adds	r3, #1
 801aa20:	602b      	str	r3, [r5, #0]
 801aa22:	e7ea      	b.n	801a9fa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801aa24:	2620      	movs	r6, #32
 801aa26:	b151      	cbz	r1, 801aa3e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801aa28:	6828      	ldr	r0, [r5, #0]
 801aa2a:	3901      	subs	r1, #1
 801aa2c:	4282      	cmp	r2, r0
 801aa2e:	b289      	uxth	r1, r1
 801aa30:	dd05      	ble.n	801aa3e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801aa32:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801aa36:	682b      	ldr	r3, [r5, #0]
 801aa38:	3301      	adds	r3, #1
 801aa3a:	602b      	str	r3, [r5, #0]
 801aa3c:	e7f3      	b.n	801aa26 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801aa3e:	b005      	add	sp, #20
 801aa40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801aa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801aa4a:	4604      	mov	r4, r0
 801aa4c:	f04f 0801 	mov.w	r8, #1
 801aa50:	2000      	movs	r0, #0
 801aa52:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801aa56:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801aa5a:	8008      	strh	r0, [r1, #0]
 801aa5c:	7010      	strb	r0, [r2, #0]
 801aa5e:	7018      	strb	r0, [r3, #0]
 801aa60:	f88c 0000 	strb.w	r0, [ip]
 801aa64:	f88e 0000 	strb.w	r0, [lr]
 801aa68:	7030      	strb	r0, [r6, #0]
 801aa6a:	6820      	ldr	r0, [r4, #0]
 801aa6c:	8800      	ldrh	r0, [r0, #0]
 801aa6e:	b190      	cbz	r0, 801aa96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801aa70:	282b      	cmp	r0, #43	; 0x2b
 801aa72:	d001      	beq.n	801aa78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801aa74:	2820      	cmp	r0, #32
 801aa76:	d104      	bne.n	801aa82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801aa78:	8008      	strh	r0, [r1, #0]
 801aa7a:	6820      	ldr	r0, [r4, #0]
 801aa7c:	3002      	adds	r0, #2
 801aa7e:	6020      	str	r0, [r4, #0]
 801aa80:	e7f3      	b.n	801aa6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801aa82:	282d      	cmp	r0, #45	; 0x2d
 801aa84:	d102      	bne.n	801aa8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801aa86:	f882 8000 	strb.w	r8, [r2]
 801aa8a:	e7f6      	b.n	801aa7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801aa8c:	2823      	cmp	r0, #35	; 0x23
 801aa8e:	d102      	bne.n	801aa96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801aa90:	f883 8000 	strb.w	r8, [r3]
 801aa94:	e7f1      	b.n	801aa7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801aa96:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801aa9a:	2b09      	cmp	r3, #9
 801aa9c:	d901      	bls.n	801aaa2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801aa9e:	282a      	cmp	r0, #42	; 0x2a
 801aaa0:	d114      	bne.n	801aacc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801aaa2:	2201      	movs	r2, #1
 801aaa4:	f88e 2000 	strb.w	r2, [lr]
 801aaa8:	6823      	ldr	r3, [r4, #0]
 801aaaa:	8819      	ldrh	r1, [r3, #0]
 801aaac:	2930      	cmp	r1, #48	; 0x30
 801aaae:	bf02      	ittt	eq
 801aab0:	3302      	addeq	r3, #2
 801aab2:	6023      	streq	r3, [r4, #0]
 801aab4:	f88c 2000 	strbeq.w	r2, [ip]
 801aab8:	6820      	ldr	r0, [r4, #0]
 801aaba:	8803      	ldrh	r3, [r0, #0]
 801aabc:	2b2a      	cmp	r3, #42	; 0x2a
 801aabe:	d11e      	bne.n	801aafe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801aac0:	f04f 33ff 	mov.w	r3, #4294967295
 801aac4:	603b      	str	r3, [r7, #0]
 801aac6:	6823      	ldr	r3, [r4, #0]
 801aac8:	3302      	adds	r3, #2
 801aaca:	6023      	str	r3, [r4, #0]
 801aacc:	6823      	ldr	r3, [r4, #0]
 801aace:	881b      	ldrh	r3, [r3, #0]
 801aad0:	2b2e      	cmp	r3, #46	; 0x2e
 801aad2:	d112      	bne.n	801aafa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801aad4:	2301      	movs	r3, #1
 801aad6:	7033      	strb	r3, [r6, #0]
 801aad8:	6823      	ldr	r3, [r4, #0]
 801aada:	1c98      	adds	r0, r3, #2
 801aadc:	6020      	str	r0, [r4, #0]
 801aade:	885b      	ldrh	r3, [r3, #2]
 801aae0:	2b2a      	cmp	r3, #42	; 0x2a
 801aae2:	d117      	bne.n	801ab14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801aae4:	f04f 33ff 	mov.w	r3, #4294967295
 801aae8:	602b      	str	r3, [r5, #0]
 801aaea:	6823      	ldr	r3, [r4, #0]
 801aaec:	3302      	adds	r3, #2
 801aaee:	6023      	str	r3, [r4, #0]
 801aaf0:	682b      	ldr	r3, [r5, #0]
 801aaf2:	2b06      	cmp	r3, #6
 801aaf4:	bfa8      	it	ge
 801aaf6:	2306      	movge	r3, #6
 801aaf8:	602b      	str	r3, [r5, #0]
 801aafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aafe:	f7ff fee2 	bl	801a8c6 <_ZN8touchgfx7Unicode4atoiEPKt>
 801ab02:	6038      	str	r0, [r7, #0]
 801ab04:	6823      	ldr	r3, [r4, #0]
 801ab06:	881a      	ldrh	r2, [r3, #0]
 801ab08:	3a30      	subs	r2, #48	; 0x30
 801ab0a:	2a09      	cmp	r2, #9
 801ab0c:	d8de      	bhi.n	801aacc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801ab0e:	3302      	adds	r3, #2
 801ab10:	6023      	str	r3, [r4, #0]
 801ab12:	e7f7      	b.n	801ab04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801ab14:	f7ff fed7 	bl	801a8c6 <_ZN8touchgfx7Unicode4atoiEPKt>
 801ab18:	6028      	str	r0, [r5, #0]
 801ab1a:	6823      	ldr	r3, [r4, #0]
 801ab1c:	881a      	ldrh	r2, [r3, #0]
 801ab1e:	3a30      	subs	r2, #48	; 0x30
 801ab20:	2a09      	cmp	r2, #9
 801ab22:	d8e5      	bhi.n	801aaf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801ab24:	3302      	adds	r3, #2
 801ab26:	6023      	str	r3, [r4, #0]
 801ab28:	e7f7      	b.n	801ab1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801ab2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801ab2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab2e:	b0a2      	sub	sp, #136	; 0x88
 801ab30:	2500      	movs	r5, #0
 801ab32:	4606      	mov	r6, r0
 801ab34:	460f      	mov	r7, r1
 801ab36:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801ab3a:	9209      	str	r2, [sp, #36]	; 0x24
 801ab3c:	4629      	mov	r1, r5
 801ab3e:	2242      	movs	r2, #66	; 0x42
 801ab40:	4640      	mov	r0, r8
 801ab42:	461c      	mov	r4, r3
 801ab44:	950d      	str	r5, [sp, #52]	; 0x34
 801ab46:	f7fe fe26 	bl	8019796 <_ZN8touchgfx6memsetEPvhm>
 801ab4a:	b30e      	cbz	r6, 801ab90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801ab4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab4e:	b1f3      	cbz	r3, 801ab8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801ab50:	f107 3aff 	add.w	sl, r7, #4294967295
 801ab54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab58:	8812      	ldrh	r2, [r2, #0]
 801ab5a:	2a00      	cmp	r2, #0
 801ab5c:	f000 80b3 	beq.w	801acc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801ab60:	459a      	cmp	sl, r3
 801ab62:	f340 80b0 	ble.w	801acc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801ab66:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ab6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab6c:	f8b9 2000 	ldrh.w	r2, [r9]
 801ab70:	2a00      	cmp	r2, #0
 801ab72:	d0ef      	beq.n	801ab54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ab74:	2a25      	cmp	r2, #37	; 0x25
 801ab76:	f000 80aa 	beq.w	801acce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801ab7a:	459a      	cmp	sl, r3
 801ab7c:	ddea      	ble.n	801ab54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ab7e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ab82:	f109 0202 	add.w	r2, r9, #2
 801ab86:	3301      	adds	r3, #1
 801ab88:	9209      	str	r2, [sp, #36]	; 0x24
 801ab8a:	930d      	str	r3, [sp, #52]	; 0x34
 801ab8c:	e7eb      	b.n	801ab66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801ab8e:	8033      	strh	r3, [r6, #0]
 801ab90:	4630      	mov	r0, r6
 801ab92:	b022      	add	sp, #136	; 0x88
 801ab94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab98:	3b63      	subs	r3, #99	; 0x63
 801ab9a:	2b01      	cmp	r3, #1
 801ab9c:	f200 80df 	bhi.w	801ad5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801aba0:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801aba4:	8813      	ldrh	r3, [r2, #0]
 801aba6:	2b69      	cmp	r3, #105	; 0x69
 801aba8:	d058      	beq.n	801ac5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801abaa:	d81b      	bhi.n	801abe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801abac:	2b63      	cmp	r3, #99	; 0x63
 801abae:	d02e      	beq.n	801ac0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801abb0:	2b64      	cmp	r3, #100	; 0x64
 801abb2:	d053      	beq.n	801ac5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801abb4:	2b58      	cmp	r3, #88	; 0x58
 801abb6:	d06f      	beq.n	801ac98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801abb8:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801abbc:	46a1      	mov	r9, r4
 801abbe:	e02d      	b.n	801ac1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801abc0:	2b73      	cmp	r3, #115	; 0x73
 801abc2:	d0ed      	beq.n	801aba0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801abc4:	d803      	bhi.n	801abce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801abc6:	2b6f      	cmp	r3, #111	; 0x6f
 801abc8:	f040 80c9 	bne.w	801ad5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801abcc:	e7e8      	b.n	801aba0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801abce:	2b75      	cmp	r3, #117	; 0x75
 801abd0:	d0e6      	beq.n	801aba0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801abd2:	2b78      	cmp	r3, #120	; 0x78
 801abd4:	e7f8      	b.n	801abc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801abd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801abd8:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801abdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abde:	3302      	adds	r3, #2
 801abe0:	9309      	str	r3, [sp, #36]	; 0x24
 801abe2:	e7b7      	b.n	801ab54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801abe4:	2b73      	cmp	r3, #115	; 0x73
 801abe6:	d034      	beq.n	801ac52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801abe8:	d807      	bhi.n	801abfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801abea:	2b6f      	cmp	r3, #111	; 0x6f
 801abec:	d1e4      	bne.n	801abb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801abee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801abf0:	f104 0904 	add.w	r9, r4, #4
 801abf4:	2308      	movs	r3, #8
 801abf6:	1aba      	subs	r2, r7, r2
 801abf8:	e048      	b.n	801ac8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801abfa:	2b75      	cmp	r3, #117	; 0x75
 801abfc:	d041      	beq.n	801ac82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801abfe:	2b78      	cmp	r3, #120	; 0x78
 801ac00:	d1da      	bne.n	801abb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801ac02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac04:	f104 0904 	add.w	r9, r4, #4
 801ac08:	2310      	movs	r3, #16
 801ac0a:	1aba      	subs	r2, r7, r2
 801ac0c:	e03e      	b.n	801ac8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801ac0e:	7823      	ldrb	r3, [r4, #0]
 801ac10:	f104 0904 	add.w	r9, r4, #4
 801ac14:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801ac18:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801ac1c:	aa0d      	add	r2, sp, #52	; 0x34
 801ac1e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801ac22:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801ac26:	a810      	add	r0, sp, #64	; 0x40
 801ac28:	9205      	str	r2, [sp, #20]
 801ac2a:	464c      	mov	r4, r9
 801ac2c:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801ac30:	9204      	str	r2, [sp, #16]
 801ac32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ac34:	9203      	str	r2, [sp, #12]
 801ac36:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801ac3a:	9202      	str	r2, [sp, #8]
 801ac3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ac3e:	9201      	str	r2, [sp, #4]
 801ac40:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801ac44:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801ac48:	9200      	str	r2, [sp, #0]
 801ac4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac4c:	f7ff fe4a 	bl	801a8e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801ac50:	e7c4      	b.n	801abdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801ac52:	f104 0904 	add.w	r9, r4, #4
 801ac56:	6823      	ldr	r3, [r4, #0]
 801ac58:	9310      	str	r3, [sp, #64]	; 0x40
 801ac5a:	e7df      	b.n	801ac1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ac5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac5e:	230a      	movs	r3, #10
 801ac60:	4641      	mov	r1, r8
 801ac62:	6820      	ldr	r0, [r4, #0]
 801ac64:	1aba      	subs	r2, r7, r2
 801ac66:	f104 0904 	add.w	r9, r4, #4
 801ac6a:	b292      	uxth	r2, r2
 801ac6c:	f7ff fdf9 	bl	801a862 <_ZN8touchgfx7Unicode4itoaElPtti>
 801ac70:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ac74:	2b2d      	cmp	r3, #45	; 0x2d
 801ac76:	d1d1      	bne.n	801ac1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ac78:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ac7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ac7e:	3302      	adds	r3, #2
 801ac80:	e7ea      	b.n	801ac58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801ac82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac84:	f104 0904 	add.w	r9, r4, #4
 801ac88:	230a      	movs	r3, #10
 801ac8a:	1aba      	subs	r2, r7, r2
 801ac8c:	b292      	uxth	r2, r2
 801ac8e:	4641      	mov	r1, r8
 801ac90:	6820      	ldr	r0, [r4, #0]
 801ac92:	f7ff fdc8 	bl	801a826 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801ac96:	e7c1      	b.n	801ac1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ac98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac9a:	2310      	movs	r3, #16
 801ac9c:	4641      	mov	r1, r8
 801ac9e:	6820      	ldr	r0, [r4, #0]
 801aca0:	1aba      	subs	r2, r7, r2
 801aca2:	f104 0904 	add.w	r9, r4, #4
 801aca6:	b292      	uxth	r2, r2
 801aca8:	f7ff fdbd 	bl	801a826 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801acac:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801acb0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d0b1      	beq.n	801ac1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801acb8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801acbc:	2919      	cmp	r1, #25
 801acbe:	d8f7      	bhi.n	801acb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801acc0:	3b20      	subs	r3, #32
 801acc2:	8013      	strh	r3, [r2, #0]
 801acc4:	e7f4      	b.n	801acb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801acc6:	2200      	movs	r2, #0
 801acc8:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801accc:	e760      	b.n	801ab90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801acce:	459a      	cmp	sl, r3
 801acd0:	f77f af40 	ble.w	801ab54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801acd4:	f109 0302 	add.w	r3, r9, #2
 801acd8:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801acdc:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801ace0:	a809      	add	r0, sp, #36	; 0x24
 801ace2:	9309      	str	r3, [sp, #36]	; 0x24
 801ace4:	ab0f      	add	r3, sp, #60	; 0x3c
 801ace6:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801acea:	9304      	str	r3, [sp, #16]
 801acec:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801acf0:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801acf4:	9303      	str	r3, [sp, #12]
 801acf6:	ab0e      	add	r3, sp, #56	; 0x38
 801acf8:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801acfc:	9302      	str	r3, [sp, #8]
 801acfe:	ab0c      	add	r3, sp, #48	; 0x30
 801ad00:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801ad04:	9301      	str	r3, [sp, #4]
 801ad06:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ad0a:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801ad0e:	9300      	str	r3, [sp, #0]
 801ad10:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ad14:	950e      	str	r5, [sp, #56]	; 0x38
 801ad16:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801ad1a:	950f      	str	r5, [sp, #60]	; 0x3c
 801ad1c:	f7ff fe92 	bl	801aa44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801ad20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	bfbf      	itttt	lt
 801ad28:	6823      	ldrlt	r3, [r4, #0]
 801ad2a:	3404      	addlt	r4, #4
 801ad2c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ad30:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ad32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	bfbf      	itttt	lt
 801ad38:	6823      	ldrlt	r3, [r4, #0]
 801ad3a:	3404      	addlt	r4, #4
 801ad3c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ad40:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801ad42:	8813      	ldrh	r3, [r2, #0]
 801ad44:	2b69      	cmp	r3, #105	; 0x69
 801ad46:	f43f af2b 	beq.w	801aba0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ad4a:	f63f af39 	bhi.w	801abc0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801ad4e:	2b58      	cmp	r3, #88	; 0x58
 801ad50:	f43f af26 	beq.w	801aba0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ad54:	f63f af20 	bhi.w	801ab98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801ad58:	2b25      	cmp	r3, #37	; 0x25
 801ad5a:	f43f af3c 	beq.w	801abd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801ad5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad60:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ad64:	f8b9 2000 	ldrh.w	r2, [r9]
 801ad68:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ad6c:	3301      	adds	r3, #1
 801ad6e:	930d      	str	r3, [sp, #52]	; 0x34
 801ad70:	e734      	b.n	801abdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801ad74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ad74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad76:	4605      	mov	r5, r0
 801ad78:	b0a1      	sub	sp, #132	; 0x84
 801ad7a:	4610      	mov	r0, r2
 801ad7c:	460e      	mov	r6, r1
 801ad7e:	4614      	mov	r4, r2
 801ad80:	461f      	mov	r7, r3
 801ad82:	f7ff fd33 	bl	801a7ec <_ZN8touchgfx7Unicode6strlenEPKc>
 801ad86:	283f      	cmp	r0, #63	; 0x3f
 801ad88:	d906      	bls.n	801ad98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801ad8a:	4b0a      	ldr	r3, [pc, #40]	; (801adb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801ad8c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801ad90:	4a09      	ldr	r2, [pc, #36]	; (801adb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801ad92:	480a      	ldr	r0, [pc, #40]	; (801adbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801ad94:	f009 ffac 	bl	8024cf0 <__assert_func>
 801ad98:	4621      	mov	r1, r4
 801ad9a:	2240      	movs	r2, #64	; 0x40
 801ad9c:	4668      	mov	r0, sp
 801ad9e:	f7ff fd31 	bl	801a804 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ada2:	463b      	mov	r3, r7
 801ada4:	466a      	mov	r2, sp
 801ada6:	4631      	mov	r1, r6
 801ada8:	4628      	mov	r0, r5
 801adaa:	f7ff febe 	bl	801ab2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801adae:	b021      	add	sp, #132	; 0x84
 801adb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801adb2:	bf00      	nop
 801adb4:	08029031 	.word	0x08029031
 801adb8:	08029103 	.word	0x08029103
 801adbc:	0802904e 	.word	0x0802904e

0801adc0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801adc0:	b40c      	push	{r2, r3}
 801adc2:	b507      	push	{r0, r1, r2, lr}
 801adc4:	ab04      	add	r3, sp, #16
 801adc6:	f853 2b04 	ldr.w	r2, [r3], #4
 801adca:	9301      	str	r3, [sp, #4]
 801adcc:	f7ff ffd2 	bl	801ad74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801add0:	b003      	add	sp, #12
 801add2:	f85d eb04 	ldr.w	lr, [sp], #4
 801add6:	b002      	add	sp, #8
 801add8:	4770      	bx	lr
	...

0801addc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ade0:	b0c3      	sub	sp, #268	; 0x10c
 801ade2:	2400      	movs	r4, #0
 801ade4:	4606      	mov	r6, r0
 801ade6:	4689      	mov	r9, r1
 801ade8:	af10      	add	r7, sp, #64	; 0x40
 801adea:	9209      	str	r2, [sp, #36]	; 0x24
 801adec:	4621      	mov	r1, r4
 801adee:	22c8      	movs	r2, #200	; 0xc8
 801adf0:	4638      	mov	r0, r7
 801adf2:	469a      	mov	sl, r3
 801adf4:	940c      	str	r4, [sp, #48]	; 0x30
 801adf6:	f7fe fcce 	bl	8019796 <_ZN8touchgfx6memsetEPvhm>
 801adfa:	b116      	cbz	r6, 801ae02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801adfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adfe:	b923      	cbnz	r3, 801ae0a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801ae00:	8033      	strh	r3, [r6, #0]
 801ae02:	4630      	mov	r0, r6
 801ae04:	b043      	add	sp, #268	; 0x10c
 801ae06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae0a:	f109 3bff 	add.w	fp, r9, #4294967295
 801ae0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae12:	8812      	ldrh	r2, [r2, #0]
 801ae14:	2a00      	cmp	r2, #0
 801ae16:	f000 80d1 	beq.w	801afbc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801ae1a:	459b      	cmp	fp, r3
 801ae1c:	f340 80ce 	ble.w	801afbc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801ae20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ae22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae24:	882a      	ldrh	r2, [r5, #0]
 801ae26:	2a00      	cmp	r2, #0
 801ae28:	d0f1      	beq.n	801ae0e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801ae2a:	2a25      	cmp	r2, #37	; 0x25
 801ae2c:	f000 80ca 	beq.w	801afc4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801ae30:	459b      	cmp	fp, r3
 801ae32:	ddec      	ble.n	801ae0e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801ae34:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ae38:	3502      	adds	r5, #2
 801ae3a:	3301      	adds	r3, #1
 801ae3c:	9509      	str	r5, [sp, #36]	; 0x24
 801ae3e:	930c      	str	r3, [sp, #48]	; 0x30
 801ae40:	e7ee      	b.n	801ae20 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801ae42:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801ae46:	3202      	adds	r2, #2
 801ae48:	920c      	str	r2, [sp, #48]	; 0x30
 801ae4a:	e0ac      	b.n	801afa6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801ae4c:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801ae50:	970f      	str	r7, [sp, #60]	; 0x3c
 801ae52:	3401      	adds	r4, #1
 801ae54:	edd3 7a00 	vldr	s15, [r3]
 801ae58:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801ae5c:	b923      	cbnz	r3, 801ae68 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801ae5e:	2301      	movs	r3, #1
 801ae60:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801ae64:	2303      	movs	r3, #3
 801ae66:	930e      	str	r3, [sp, #56]	; 0x38
 801ae68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ae6c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ae6e:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801ae72:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801b070 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801ae76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae7a:	bf42      	ittt	mi
 801ae7c:	232d      	movmi	r3, #45	; 0x2d
 801ae7e:	eef1 7a67 	vnegmi.f32	s15, s15
 801ae82:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801ae86:	2300      	movs	r3, #0
 801ae88:	4298      	cmp	r0, r3
 801ae8a:	dd03      	ble.n	801ae94 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801ae8c:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801ae90:	3301      	adds	r3, #1
 801ae92:	e7f9      	b.n	801ae88 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801ae94:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ae98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ae9c:	eeb0 7a67 	vmov.f32	s14, s15
 801aea0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801aea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aea8:	da26      	bge.n	801aef8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801aeaa:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801aeae:	eba9 0202 	sub.w	r2, r9, r2
 801aeb2:	2100      	movs	r1, #0
 801aeb4:	eef4 6ae5 	vcmpe.f32	s13, s11
 801aeb8:	b28d      	uxth	r5, r1
 801aeba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aebe:	db21      	blt.n	801af04 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801aec0:	1a53      	subs	r3, r2, r1
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	dd1e      	ble.n	801af04 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801aec6:	2963      	cmp	r1, #99	; 0x63
 801aec8:	d01b      	beq.n	801af02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801aeca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801aece:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801aed2:	ee17 3a10 	vmov	r3, s14
 801aed6:	2b09      	cmp	r3, #9
 801aed8:	bfa8      	it	ge
 801aeda:	2309      	movge	r3, #9
 801aedc:	ee07 3a10 	vmov	s14, r3
 801aee0:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801aee4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aee8:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801aeec:	3101      	adds	r1, #1
 801aeee:	eee7 7a66 	vfms.f32	s15, s14, s13
 801aef2:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801aef6:	e7dd      	b.n	801aeb4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801aef8:	ee66 6a86 	vmul.f32	s13, s13, s12
 801aefc:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801af00:	e7ce      	b.n	801aea0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801af02:	460d      	mov	r5, r1
 801af04:	2a63      	cmp	r2, #99	; 0x63
 801af06:	bfd4      	ite	le
 801af08:	ebc5 0202 	rsble	r2, r5, r2
 801af0c:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801af10:	2a00      	cmp	r2, #0
 801af12:	dd4e      	ble.n	801afb2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801af14:	4603      	mov	r3, r0
 801af16:	f04f 0801 	mov.w	r8, #1
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	dd0e      	ble.n	801af3c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801af1e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801af22:	210a      	movs	r1, #10
 801af24:	3b01      	subs	r3, #1
 801af26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801af2a:	ee17 ca10 	vmov	ip, s14
 801af2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af32:	fb01 c808 	mla	r8, r1, r8, ip
 801af36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801af3a:	e7ee      	b.n	801af1a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801af3c:	2800      	cmp	r0, #0
 801af3e:	f100 33ff 	add.w	r3, r0, #4294967295
 801af42:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801af46:	bfac      	ite	ge
 801af48:	1a18      	subge	r0, r3, r0
 801af4a:	4618      	movlt	r0, r3
 801af4c:	b292      	uxth	r2, r2
 801af4e:	230a      	movs	r3, #10
 801af50:	900e      	str	r0, [sp, #56]	; 0x38
 801af52:	1979      	adds	r1, r7, r5
 801af54:	4640      	mov	r0, r8
 801af56:	f7ff fc84 	bl	801a862 <_ZN8touchgfx7Unicode4itoaElPtti>
 801af5a:	f1b8 0f01 	cmp.w	r8, #1
 801af5e:	dc26      	bgt.n	801afae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801af60:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801af64:	2b00      	cmp	r3, #0
 801af66:	bf0c      	ite	eq
 801af68:	2300      	moveq	r3, #0
 801af6a:	232e      	movne	r3, #46	; 0x2e
 801af6c:	aa42      	add	r2, sp, #264	; 0x108
 801af6e:	4415      	add	r5, r2
 801af70:	aa0c      	add	r2, sp, #48	; 0x30
 801af72:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801af76:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801af7a:	a80f      	add	r0, sp, #60	; 0x3c
 801af7c:	9205      	str	r2, [sp, #20]
 801af7e:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801af82:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801af86:	9204      	str	r2, [sp, #16]
 801af88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801af8a:	9203      	str	r2, [sp, #12]
 801af8c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801af90:	9202      	str	r2, [sp, #8]
 801af92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801af94:	9201      	str	r2, [sp, #4]
 801af96:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801af9a:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801af9e:	9200      	str	r2, [sp, #0]
 801afa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801afa2:	f7ff fc9f 	bl	801a8e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801afa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afa8:	3302      	adds	r3, #2
 801afaa:	9309      	str	r3, [sp, #36]	; 0x24
 801afac:	e72f      	b.n	801ae0e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801afae:	232e      	movs	r3, #46	; 0x2e
 801afb0:	e7dc      	b.n	801af6c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801afb2:	ab42      	add	r3, sp, #264	; 0x108
 801afb4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801afb8:	2300      	movs	r3, #0
 801afba:	e7d9      	b.n	801af70 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801afbc:	2200      	movs	r2, #0
 801afbe:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801afc2:	e71e      	b.n	801ae02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801afc4:	459b      	cmp	fp, r3
 801afc6:	f77f af22 	ble.w	801ae0e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801afca:	2300      	movs	r3, #0
 801afcc:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801afd0:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801afd4:	a809      	add	r0, sp, #36	; 0x24
 801afd6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801afda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801afde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801afe2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801afe6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801afea:	930d      	str	r3, [sp, #52]	; 0x34
 801afec:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801aff0:	930e      	str	r3, [sp, #56]	; 0x38
 801aff2:	1cab      	adds	r3, r5, #2
 801aff4:	9309      	str	r3, [sp, #36]	; 0x24
 801aff6:	ab0e      	add	r3, sp, #56	; 0x38
 801aff8:	9304      	str	r3, [sp, #16]
 801affa:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801affe:	9303      	str	r3, [sp, #12]
 801b000:	ab0d      	add	r3, sp, #52	; 0x34
 801b002:	9302      	str	r3, [sp, #8]
 801b004:	ab0b      	add	r3, sp, #44	; 0x2c
 801b006:	9301      	str	r3, [sp, #4]
 801b008:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801b00c:	9300      	str	r3, [sp, #0]
 801b00e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801b012:	f7ff fd17 	bl	801aa44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801b016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b018:	2b00      	cmp	r3, #0
 801b01a:	da0b      	bge.n	801b034 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801b01c:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b020:	3401      	adds	r4, #1
 801b022:	edd3 7a00 	vldr	s15, [r3]
 801b026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b02a:	ee17 3a90 	vmov	r3, s15
 801b02e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b032:	930d      	str	r3, [sp, #52]	; 0x34
 801b034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b036:	2b00      	cmp	r3, #0
 801b038:	da0b      	bge.n	801b052 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801b03a:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b03e:	3401      	adds	r4, #1
 801b040:	edd3 7a00 	vldr	s15, [r3]
 801b044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b048:	ee17 3a90 	vmov	r3, s15
 801b04c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b050:	930e      	str	r3, [sp, #56]	; 0x38
 801b052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b056:	881b      	ldrh	r3, [r3, #0]
 801b058:	2b25      	cmp	r3, #37	; 0x25
 801b05a:	f43f aef2 	beq.w	801ae42 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801b05e:	2b66      	cmp	r3, #102	; 0x66
 801b060:	f43f aef4 	beq.w	801ae4c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801b064:	9509      	str	r5, [sp, #36]	; 0x24
 801b066:	882b      	ldrh	r3, [r5, #0]
 801b068:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b06c:	3201      	adds	r2, #1
 801b06e:	e6eb      	b.n	801ae48 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801b070:	3f000002 	.word	0x3f000002

0801b074 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801b074:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b076:	4605      	mov	r5, r0
 801b078:	b0a1      	sub	sp, #132	; 0x84
 801b07a:	4610      	mov	r0, r2
 801b07c:	460e      	mov	r6, r1
 801b07e:	4614      	mov	r4, r2
 801b080:	461f      	mov	r7, r3
 801b082:	f7ff fbb3 	bl	801a7ec <_ZN8touchgfx7Unicode6strlenEPKc>
 801b086:	283f      	cmp	r0, #63	; 0x3f
 801b088:	d906      	bls.n	801b098 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801b08a:	4b0a      	ldr	r3, [pc, #40]	; (801b0b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801b08c:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801b090:	4a09      	ldr	r2, [pc, #36]	; (801b0b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801b092:	480a      	ldr	r0, [pc, #40]	; (801b0bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801b094:	f009 fe2c 	bl	8024cf0 <__assert_func>
 801b098:	4621      	mov	r1, r4
 801b09a:	2240      	movs	r2, #64	; 0x40
 801b09c:	4668      	mov	r0, sp
 801b09e:	f7ff fbb1 	bl	801a804 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b0a2:	463b      	mov	r3, r7
 801b0a4:	466a      	mov	r2, sp
 801b0a6:	4631      	mov	r1, r6
 801b0a8:	4628      	mov	r0, r5
 801b0aa:	f7ff fe97 	bl	801addc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801b0ae:	b021      	add	sp, #132	; 0x84
 801b0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0b2:	bf00      	nop
 801b0b4:	08029031 	.word	0x08029031
 801b0b8:	08029074 	.word	0x08029074
 801b0bc:	0802904e 	.word	0x0802904e

0801b0c0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b0c0:	4b01      	ldr	r3, [pc, #4]	; (801b0c8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b0c2:	6018      	str	r0, [r3, #0]
 801b0c4:	4770      	bx	lr
 801b0c6:	bf00      	nop
 801b0c8:	2000bd68 	.word	0x2000bd68

0801b0cc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b0cc:	4b07      	ldr	r3, [pc, #28]	; (801b0ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801b0ce:	881a      	ldrh	r2, [r3, #0]
 801b0d0:	4282      	cmp	r2, r0
 801b0d2:	d809      	bhi.n	801b0e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b0d4:	4b06      	ldr	r3, [pc, #24]	; (801b0f0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801b0d6:	881b      	ldrh	r3, [r3, #0]
 801b0d8:	4413      	add	r3, r2
 801b0da:	4298      	cmp	r0, r3
 801b0dc:	da04      	bge.n	801b0e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b0de:	4b05      	ldr	r3, [pc, #20]	; (801b0f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b0e6:	4770      	bx	lr
 801b0e8:	2000      	movs	r0, #0
 801b0ea:	4770      	bx	lr
 801b0ec:	2000bd88 	.word	0x2000bd88
 801b0f0:	2000bd8c 	.word	0x2000bd8c
 801b0f4:	2000bd6c 	.word	0x2000bd6c

0801b0f8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0fc:	4d26      	ldr	r5, [pc, #152]	; (801b198 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b0fe:	682b      	ldr	r3, [r5, #0]
 801b100:	2b00      	cmp	r3, #0
 801b102:	d046      	beq.n	801b192 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b104:	4a25      	ldr	r2, [pc, #148]	; (801b19c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b106:	4f26      	ldr	r7, [pc, #152]	; (801b1a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b108:	8810      	ldrh	r0, [r2, #0]
 801b10a:	883c      	ldrh	r4, [r7, #0]
 801b10c:	4e25      	ldr	r6, [pc, #148]	; (801b1a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b10e:	4420      	add	r0, r4
 801b110:	1c42      	adds	r2, r0, #1
 801b112:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801b116:	f022 0201 	bic.w	r2, r2, #1
 801b11a:	0412      	lsls	r2, r2, #16
 801b11c:	0c12      	lsrs	r2, r2, #16
 801b11e:	0051      	lsls	r1, r2, #1
 801b120:	220e      	movs	r2, #14
 801b122:	eb08 0e01 	add.w	lr, r8, r1
 801b126:	fb02 fc04 	mul.w	ip, r2, r4
 801b12a:	eb03 0208 	add.w	r2, r3, r8
 801b12e:	4c1e      	ldr	r4, [pc, #120]	; (801b1a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b130:	6022      	str	r2, [r4, #0]
 801b132:	eb03 020e 	add.w	r2, r3, lr
 801b136:	44e6      	add	lr, ip
 801b138:	6032      	str	r2, [r6, #0]
 801b13a:	4473      	add	r3, lr
 801b13c:	4a1b      	ldr	r2, [pc, #108]	; (801b1ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b13e:	6013      	str	r3, [r2, #0]
 801b140:	2300      	movs	r3, #0
 801b142:	4a1b      	ldr	r2, [pc, #108]	; (801b1b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b144:	8013      	strh	r3, [r2, #0]
 801b146:	4a1b      	ldr	r2, [pc, #108]	; (801b1b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b148:	6812      	ldr	r2, [r2, #0]
 801b14a:	eba2 0208 	sub.w	r2, r2, r8
 801b14e:	1a52      	subs	r2, r2, r1
 801b150:	4919      	ldr	r1, [pc, #100]	; (801b1b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b152:	eba2 020c 	sub.w	r2, r2, ip
 801b156:	469c      	mov	ip, r3
 801b158:	600a      	str	r2, [r1, #0]
 801b15a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b15e:	4a17      	ldr	r2, [pc, #92]	; (801b1bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b160:	8013      	strh	r3, [r2, #0]
 801b162:	4283      	cmp	r3, r0
 801b164:	d10d      	bne.n	801b182 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801b166:	883d      	ldrh	r5, [r7, #0]
 801b168:	2300      	movs	r3, #0
 801b16a:	6830      	ldr	r0, [r6, #0]
 801b16c:	240e      	movs	r4, #14
 801b16e:	429d      	cmp	r5, r3
 801b170:	d90f      	bls.n	801b192 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b172:	fb04 0203 	mla	r2, r4, r3, r0
 801b176:	3301      	adds	r3, #1
 801b178:	7b11      	ldrb	r1, [r2, #12]
 801b17a:	f36f 1145 	bfc	r1, #5, #1
 801b17e:	7311      	strb	r1, [r2, #12]
 801b180:	e7f5      	b.n	801b16e <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801b182:	682a      	ldr	r2, [r5, #0]
 801b184:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b188:	6822      	ldr	r2, [r4, #0]
 801b18a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b18e:	3301      	adds	r3, #1
 801b190:	e7e7      	b.n	801b162 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801b192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b196:	bf00      	nop
 801b198:	2000bd6c 	.word	0x2000bd6c
 801b19c:	2000bd88 	.word	0x2000bd88
 801b1a0:	2000bd8c 	.word	0x2000bd8c
 801b1a4:	2000bd70 	.word	0x2000bd70
 801b1a8:	2000bd80 	.word	0x2000bd80
 801b1ac:	2000bd78 	.word	0x2000bd78
 801b1b0:	2000bd8a 	.word	0x2000bd8a
 801b1b4:	2000bd74 	.word	0x2000bd74
 801b1b8:	2000bd84 	.word	0x2000bd84
 801b1bc:	2000bd7c 	.word	0x2000bd7c

0801b1c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b1c0:	4b10      	ldr	r3, [pc, #64]	; (801b204 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801b1c2:	b510      	push	{r4, lr}
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	b9db      	cbnz	r3, 801b200 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b1c8:	b1d1      	cbz	r1, 801b200 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b1ca:	4b0f      	ldr	r3, [pc, #60]	; (801b208 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801b1cc:	240e      	movs	r4, #14
 801b1ce:	801a      	strh	r2, [r3, #0]
 801b1d0:	b292      	uxth	r2, r2
 801b1d2:	4b0e      	ldr	r3, [pc, #56]	; (801b20c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801b1d4:	881b      	ldrh	r3, [r3, #0]
 801b1d6:	4413      	add	r3, r2
 801b1d8:	4362      	muls	r2, r4
 801b1da:	2406      	movs	r4, #6
 801b1dc:	fb04 2203 	mla	r2, r4, r3, r2
 801b1e0:	428a      	cmp	r2, r1
 801b1e2:	d305      	bcc.n	801b1f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801b1e4:	4b0a      	ldr	r3, [pc, #40]	; (801b210 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801b1e6:	2137      	movs	r1, #55	; 0x37
 801b1e8:	4a0a      	ldr	r2, [pc, #40]	; (801b214 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801b1ea:	480b      	ldr	r0, [pc, #44]	; (801b218 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801b1ec:	f009 fd80 	bl	8024cf0 <__assert_func>
 801b1f0:	4b0a      	ldr	r3, [pc, #40]	; (801b21c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801b1f2:	6019      	str	r1, [r3, #0]
 801b1f4:	4b0a      	ldr	r3, [pc, #40]	; (801b220 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801b1f6:	6018      	str	r0, [r3, #0]
 801b1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1fc:	f7ff bf7c 	b.w	801b0f8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b200:	bd10      	pop	{r4, pc}
 801b202:	bf00      	nop
 801b204:	2000bd78 	.word	0x2000bd78
 801b208:	2000bd8c 	.word	0x2000bd8c
 801b20c:	2000bd88 	.word	0x2000bd88
 801b210:	080291e5 	.word	0x080291e5
 801b214:	0802923e 	.word	0x0802923e
 801b218:	080291c0 	.word	0x080291c0
 801b21c:	2000bd74 	.word	0x2000bd74
 801b220:	2000bd6c 	.word	0x2000bd6c

0801b224 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b224:	b470      	push	{r4, r5, r6}
 801b226:	4c07      	ldr	r4, [pc, #28]	; (801b244 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b228:	4605      	mov	r5, r0
 801b22a:	4610      	mov	r0, r2
 801b22c:	9a03      	ldr	r2, [sp, #12]
 801b22e:	6826      	ldr	r6, [r4, #0]
 801b230:	b936      	cbnz	r6, 801b240 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b232:	6025      	str	r5, [r4, #0]
 801b234:	4c04      	ldr	r4, [pc, #16]	; (801b248 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b236:	8021      	strh	r1, [r4, #0]
 801b238:	4619      	mov	r1, r3
 801b23a:	bc70      	pop	{r4, r5, r6}
 801b23c:	f7ff bfc0 	b.w	801b1c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b240:	bc70      	pop	{r4, r5, r6}
 801b242:	4770      	bx	lr
 801b244:	2000bd90 	.word	0x2000bd90
 801b248:	2000bd88 	.word	0x2000bd88

0801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b24c:	b508      	push	{r3, lr}
 801b24e:	4b14      	ldr	r3, [pc, #80]	; (801b2a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b250:	6819      	ldr	r1, [r3, #0]
 801b252:	b931      	cbnz	r1, 801b262 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801b254:	4b13      	ldr	r3, [pc, #76]	; (801b2a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b256:	f240 21e6 	movw	r1, #742	; 0x2e6
 801b25a:	4a13      	ldr	r2, [pc, #76]	; (801b2a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b25c:	4813      	ldr	r0, [pc, #76]	; (801b2ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b25e:	f009 fd47 	bl	8024cf0 <__assert_func>
 801b262:	4a13      	ldr	r2, [pc, #76]	; (801b2b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b264:	8803      	ldrh	r3, [r0, #0]
 801b266:	8812      	ldrh	r2, [r2, #0]
 801b268:	4293      	cmp	r3, r2
 801b26a:	d204      	bcs.n	801b276 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801b26c:	2214      	movs	r2, #20
 801b26e:	fb02 1303 	mla	r3, r2, r3, r1
 801b272:	8918      	ldrh	r0, [r3, #8]
 801b274:	bd08      	pop	{r3, pc}
 801b276:	490f      	ldr	r1, [pc, #60]	; (801b2b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801b278:	8809      	ldrh	r1, [r1, #0]
 801b27a:	4411      	add	r1, r2
 801b27c:	428b      	cmp	r3, r1
 801b27e:	da06      	bge.n	801b28e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801b280:	1a9b      	subs	r3, r3, r2
 801b282:	4a0d      	ldr	r2, [pc, #52]	; (801b2b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801b284:	210e      	movs	r1, #14
 801b286:	6812      	ldr	r2, [r2, #0]
 801b288:	fb01 2303 	mla	r3, r1, r3, r2
 801b28c:	e7f1      	b.n	801b272 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801b28e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b292:	4293      	cmp	r3, r2
 801b294:	bf0a      	itet	eq
 801b296:	4b09      	ldreq	r3, [pc, #36]	; (801b2bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801b298:	2000      	movne	r0, #0
 801b29a:	8818      	ldrheq	r0, [r3, #0]
 801b29c:	e7ea      	b.n	801b274 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801b29e:	bf00      	nop
 801b2a0:	2000bd90 	.word	0x2000bd90
 801b2a4:	08027198 	.word	0x08027198
 801b2a8:	080292eb 	.word	0x080292eb
 801b2ac:	080291c0 	.word	0x080291c0
 801b2b0:	2000bd88 	.word	0x2000bd88
 801b2b4:	2000bd8c 	.word	0x2000bd8c
 801b2b8:	2000bd70 	.word	0x2000bd70
 801b2bc:	2000bcbc 	.word	0x2000bcbc

0801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b2c0:	b508      	push	{r3, lr}
 801b2c2:	4b14      	ldr	r3, [pc, #80]	; (801b314 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b2c4:	6819      	ldr	r1, [r3, #0]
 801b2c6:	b931      	cbnz	r1, 801b2d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801b2c8:	4b13      	ldr	r3, [pc, #76]	; (801b318 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b2ca:	f240 21fa 	movw	r1, #762	; 0x2fa
 801b2ce:	4a13      	ldr	r2, [pc, #76]	; (801b31c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b2d0:	4813      	ldr	r0, [pc, #76]	; (801b320 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b2d2:	f009 fd0d 	bl	8024cf0 <__assert_func>
 801b2d6:	4a13      	ldr	r2, [pc, #76]	; (801b324 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b2d8:	8803      	ldrh	r3, [r0, #0]
 801b2da:	8812      	ldrh	r2, [r2, #0]
 801b2dc:	4293      	cmp	r3, r2
 801b2de:	d204      	bcs.n	801b2ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801b2e0:	2214      	movs	r2, #20
 801b2e2:	fb02 1303 	mla	r3, r2, r3, r1
 801b2e6:	8958      	ldrh	r0, [r3, #10]
 801b2e8:	bd08      	pop	{r3, pc}
 801b2ea:	490f      	ldr	r1, [pc, #60]	; (801b328 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801b2ec:	8809      	ldrh	r1, [r1, #0]
 801b2ee:	4411      	add	r1, r2
 801b2f0:	428b      	cmp	r3, r1
 801b2f2:	da06      	bge.n	801b302 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801b2f4:	1a9b      	subs	r3, r3, r2
 801b2f6:	4a0d      	ldr	r2, [pc, #52]	; (801b32c <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801b2f8:	210e      	movs	r1, #14
 801b2fa:	6812      	ldr	r2, [r2, #0]
 801b2fc:	fb01 2303 	mla	r3, r1, r3, r2
 801b300:	e7f1      	b.n	801b2e6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801b302:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b306:	4293      	cmp	r3, r2
 801b308:	bf0a      	itet	eq
 801b30a:	4b09      	ldreq	r3, [pc, #36]	; (801b330 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801b30c:	2000      	movne	r0, #0
 801b30e:	8818      	ldrheq	r0, [r3, #0]
 801b310:	e7ea      	b.n	801b2e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801b312:	bf00      	nop
 801b314:	2000bd90 	.word	0x2000bd90
 801b318:	08027198 	.word	0x08027198
 801b31c:	08029317 	.word	0x08029317
 801b320:	080291c0 	.word	0x080291c0
 801b324:	2000bd88 	.word	0x2000bd88
 801b328:	2000bd8c 	.word	0x2000bd8c
 801b32c:	2000bd70 	.word	0x2000bd70
 801b330:	2000bcbe 	.word	0x2000bcbe

0801b334 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b334:	4b23      	ldr	r3, [pc, #140]	; (801b3c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b336:	b510      	push	{r4, lr}
 801b338:	681c      	ldr	r4, [r3, #0]
 801b33a:	b934      	cbnz	r4, 801b34a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801b33c:	4b22      	ldr	r3, [pc, #136]	; (801b3c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b33e:	f240 310e 	movw	r1, #782	; 0x30e
 801b342:	4a22      	ldr	r2, [pc, #136]	; (801b3cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801b344:	4822      	ldr	r0, [pc, #136]	; (801b3d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801b346:	f009 fcd3 	bl	8024cf0 <__assert_func>
 801b34a:	4a22      	ldr	r2, [pc, #136]	; (801b3d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801b34c:	880b      	ldrh	r3, [r1, #0]
 801b34e:	8812      	ldrh	r2, [r2, #0]
 801b350:	4293      	cmp	r3, r2
 801b352:	d211      	bcs.n	801b378 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801b354:	2214      	movs	r2, #20
 801b356:	fb02 4303 	mla	r3, r2, r3, r4
 801b35a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b35e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b362:	8a1a      	ldrh	r2, [r3, #16]
 801b364:	8a5b      	ldrh	r3, [r3, #18]
 801b366:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b36a:	8004      	strh	r4, [r0, #0]
 801b36c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b370:	8041      	strh	r1, [r0, #2]
 801b372:	8082      	strh	r2, [r0, #4]
 801b374:	80c3      	strh	r3, [r0, #6]
 801b376:	e00e      	b.n	801b396 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b378:	4917      	ldr	r1, [pc, #92]	; (801b3d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801b37a:	8809      	ldrh	r1, [r1, #0]
 801b37c:	4411      	add	r1, r2
 801b37e:	428b      	cmp	r3, r1
 801b380:	da0a      	bge.n	801b398 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801b382:	1a9b      	subs	r3, r3, r2
 801b384:	4a15      	ldr	r2, [pc, #84]	; (801b3dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801b386:	210e      	movs	r1, #14
 801b388:	6812      	ldr	r2, [r2, #0]
 801b38a:	fb01 2303 	mla	r3, r1, r3, r2
 801b38e:	681a      	ldr	r2, [r3, #0]
 801b390:	6002      	str	r2, [r0, #0]
 801b392:	685a      	ldr	r2, [r3, #4]
 801b394:	6042      	str	r2, [r0, #4]
 801b396:	bd10      	pop	{r4, pc}
 801b398:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b39c:	4293      	cmp	r3, r2
 801b39e:	d10b      	bne.n	801b3b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801b3a0:	4b0f      	ldr	r3, [pc, #60]	; (801b3e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801b3a2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b3a6:	4b0f      	ldr	r3, [pc, #60]	; (801b3e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801b3a8:	8081      	strh	r1, [r0, #4]
 801b3aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b3ae:	2300      	movs	r3, #0
 801b3b0:	80c2      	strh	r2, [r0, #6]
 801b3b2:	8003      	strh	r3, [r0, #0]
 801b3b4:	8043      	strh	r3, [r0, #2]
 801b3b6:	e7ee      	b.n	801b396 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b3b8:	2300      	movs	r3, #0
 801b3ba:	8003      	strh	r3, [r0, #0]
 801b3bc:	8043      	strh	r3, [r0, #2]
 801b3be:	8083      	strh	r3, [r0, #4]
 801b3c0:	e7d8      	b.n	801b374 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801b3c2:	bf00      	nop
 801b3c4:	2000bd90 	.word	0x2000bd90
 801b3c8:	08027198 	.word	0x08027198
 801b3cc:	08029284 	.word	0x08029284
 801b3d0:	080291c0 	.word	0x080291c0
 801b3d4:	2000bd88 	.word	0x2000bd88
 801b3d8:	2000bd8c 	.word	0x2000bd8c
 801b3dc:	2000bd70 	.word	0x2000bd70
 801b3e0:	2000bcbc 	.word	0x2000bcbc
 801b3e4:	2000bcbe 	.word	0x2000bcbe

0801b3e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b3e8:	4b18      	ldr	r3, [pc, #96]	; (801b44c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	b34b      	cbz	r3, 801b442 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b3ee:	4a18      	ldr	r2, [pc, #96]	; (801b450 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b3f0:	8800      	ldrh	r0, [r0, #0]
 801b3f2:	8812      	ldrh	r2, [r2, #0]
 801b3f4:	4290      	cmp	r0, r2
 801b3f6:	d211      	bcs.n	801b41c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801b3f8:	2214      	movs	r2, #20
 801b3fa:	fb02 3300 	mla	r3, r2, r0, r3
 801b3fe:	8a1a      	ldrh	r2, [r3, #16]
 801b400:	8919      	ldrh	r1, [r3, #8]
 801b402:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b406:	428a      	cmp	r2, r1
 801b408:	db1d      	blt.n	801b446 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b40a:	8a58      	ldrh	r0, [r3, #18]
 801b40c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b410:	895b      	ldrh	r3, [r3, #10]
 801b412:	4298      	cmp	r0, r3
 801b414:	bfac      	ite	ge
 801b416:	2000      	movge	r0, #0
 801b418:	2001      	movlt	r0, #1
 801b41a:	4770      	bx	lr
 801b41c:	4b0d      	ldr	r3, [pc, #52]	; (801b454 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b41e:	881b      	ldrh	r3, [r3, #0]
 801b420:	4413      	add	r3, r2
 801b422:	4298      	cmp	r0, r3
 801b424:	da0d      	bge.n	801b442 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b426:	4b0c      	ldr	r3, [pc, #48]	; (801b458 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801b428:	1a80      	subs	r0, r0, r2
 801b42a:	220e      	movs	r2, #14
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	fb02 3300 	mla	r3, r2, r0, r3
 801b432:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b436:	891a      	ldrh	r2, [r3, #8]
 801b438:	4291      	cmp	r1, r2
 801b43a:	db04      	blt.n	801b446 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b43c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b440:	e7e6      	b.n	801b410 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801b442:	2000      	movs	r0, #0
 801b444:	4770      	bx	lr
 801b446:	2001      	movs	r0, #1
 801b448:	4770      	bx	lr
 801b44a:	bf00      	nop
 801b44c:	2000bd90 	.word	0x2000bd90
 801b450:	2000bd88 	.word	0x2000bd88
 801b454:	2000bd8c 	.word	0x2000bd8c
 801b458:	2000bd70 	.word	0x2000bd70

0801b45c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b45c:	b508      	push	{r3, lr}
 801b45e:	4b12      	ldr	r3, [pc, #72]	; (801b4a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b460:	6819      	ldr	r1, [r3, #0]
 801b462:	b931      	cbnz	r1, 801b472 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b464:	4b11      	ldr	r3, [pc, #68]	; (801b4ac <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b466:	f240 3132 	movw	r1, #818	; 0x332
 801b46a:	4a11      	ldr	r2, [pc, #68]	; (801b4b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b46c:	4811      	ldr	r0, [pc, #68]	; (801b4b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b46e:	f009 fc3f 	bl	8024cf0 <__assert_func>
 801b472:	8803      	ldrh	r3, [r0, #0]
 801b474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b478:	4293      	cmp	r3, r2
 801b47a:	d012      	beq.n	801b4a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b47c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b480:	4293      	cmp	r3, r2
 801b482:	d103      	bne.n	801b48c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801b484:	4b0c      	ldr	r3, [pc, #48]	; (801b4b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b486:	681b      	ldr	r3, [r3, #0]
 801b488:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b48a:	bd08      	pop	{r3, pc}
 801b48c:	4a0b      	ldr	r2, [pc, #44]	; (801b4bc <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801b48e:	6812      	ldr	r2, [r2, #0]
 801b490:	b11a      	cbz	r2, 801b49a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801b492:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b496:	2800      	cmp	r0, #0
 801b498:	d1f7      	bne.n	801b48a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b49a:	2214      	movs	r2, #20
 801b49c:	4353      	muls	r3, r2
 801b49e:	58c8      	ldr	r0, [r1, r3]
 801b4a0:	e7f3      	b.n	801b48a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b4a2:	2000      	movs	r0, #0
 801b4a4:	e7f1      	b.n	801b48a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b4a6:	bf00      	nop
 801b4a8:	2000bd90 	.word	0x2000bd90
 801b4ac:	08027198 	.word	0x08027198
 801b4b0:	080292ba 	.word	0x080292ba
 801b4b4:	080291c0 	.word	0x080291c0
 801b4b8:	2000bcc8 	.word	0x2000bcc8
 801b4bc:	2000bd6c 	.word	0x2000bd6c

0801b4c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b4c0:	8802      	ldrh	r2, [r0, #0]
 801b4c2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801b4c6:	429a      	cmp	r2, r3
 801b4c8:	d840      	bhi.n	801b54c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b4ca:	4b21      	ldr	r3, [pc, #132]	; (801b550 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801b4cc:	881b      	ldrh	r3, [r3, #0]
 801b4ce:	429a      	cmp	r2, r3
 801b4d0:	d220      	bcs.n	801b514 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801b4d2:	4b20      	ldr	r3, [pc, #128]	; (801b554 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b4d4:	6819      	ldr	r1, [r3, #0]
 801b4d6:	2314      	movs	r3, #20
 801b4d8:	fb03 1302 	mla	r3, r3, r2, r1
 801b4dc:	6858      	ldr	r0, [r3, #4]
 801b4de:	2800      	cmp	r0, #0
 801b4e0:	d035      	beq.n	801b54e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b4e2:	491d      	ldr	r1, [pc, #116]	; (801b558 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b4e4:	6809      	ldr	r1, [r1, #0]
 801b4e6:	2900      	cmp	r1, #0
 801b4e8:	d031      	beq.n	801b54e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b4ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b4ee:	b371      	cbz	r1, 801b54e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b4f0:	895a      	ldrh	r2, [r3, #10]
 801b4f2:	8918      	ldrh	r0, [r3, #8]
 801b4f4:	4350      	muls	r0, r2
 801b4f6:	7c5a      	ldrb	r2, [r3, #17]
 801b4f8:	7cdb      	ldrb	r3, [r3, #19]
 801b4fa:	0952      	lsrs	r2, r2, #5
 801b4fc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b500:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b504:	2b0b      	cmp	r3, #11
 801b506:	bf18      	it	ne
 801b508:	0040      	lslne	r0, r0, #1
 801b50a:	3003      	adds	r0, #3
 801b50c:	f020 0003 	bic.w	r0, r0, #3
 801b510:	4408      	add	r0, r1
 801b512:	4770      	bx	lr
 801b514:	4911      	ldr	r1, [pc, #68]	; (801b55c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b516:	8809      	ldrh	r1, [r1, #0]
 801b518:	4419      	add	r1, r3
 801b51a:	428a      	cmp	r2, r1
 801b51c:	da16      	bge.n	801b54c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b51e:	4910      	ldr	r1, [pc, #64]	; (801b560 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b520:	1ad3      	subs	r3, r2, r3
 801b522:	200e      	movs	r0, #14
 801b524:	6809      	ldr	r1, [r1, #0]
 801b526:	fb00 1303 	mla	r3, r0, r3, r1
 801b52a:	7b19      	ldrb	r1, [r3, #12]
 801b52c:	f001 011f 	and.w	r1, r1, #31
 801b530:	290b      	cmp	r1, #11
 801b532:	d10b      	bne.n	801b54c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b534:	8919      	ldrh	r1, [r3, #8]
 801b536:	8958      	ldrh	r0, [r3, #10]
 801b538:	4b07      	ldr	r3, [pc, #28]	; (801b558 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b53a:	4348      	muls	r0, r1
 801b53c:	6819      	ldr	r1, [r3, #0]
 801b53e:	3003      	adds	r0, #3
 801b540:	f020 0303 	bic.w	r3, r0, #3
 801b544:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b548:	4418      	add	r0, r3
 801b54a:	4770      	bx	lr
 801b54c:	2000      	movs	r0, #0
 801b54e:	4770      	bx	lr
 801b550:	2000bd88 	.word	0x2000bd88
 801b554:	2000bd90 	.word	0x2000bd90
 801b558:	2000bd6c 	.word	0x2000bd6c
 801b55c:	2000bd8c 	.word	0x2000bd8c
 801b560:	2000bd70 	.word	0x2000bd70

0801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b564:	4b19      	ldr	r3, [pc, #100]	; (801b5cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b566:	6819      	ldr	r1, [r3, #0]
 801b568:	8803      	ldrh	r3, [r0, #0]
 801b56a:	b1e9      	cbz	r1, 801b5a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b56c:	4a18      	ldr	r2, [pc, #96]	; (801b5d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b56e:	8812      	ldrh	r2, [r2, #0]
 801b570:	429a      	cmp	r2, r3
 801b572:	d90a      	bls.n	801b58a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b574:	2214      	movs	r2, #20
 801b576:	fb02 1303 	mla	r3, r2, r3, r1
 801b57a:	7c58      	ldrb	r0, [r3, #17]
 801b57c:	0942      	lsrs	r2, r0, #5
 801b57e:	7cd8      	ldrb	r0, [r3, #19]
 801b580:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b584:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b588:	4770      	bx	lr
 801b58a:	4912      	ldr	r1, [pc, #72]	; (801b5d4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801b58c:	8809      	ldrh	r1, [r1, #0]
 801b58e:	4411      	add	r1, r2
 801b590:	428b      	cmp	r3, r1
 801b592:	da09      	bge.n	801b5a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b594:	1a9b      	subs	r3, r3, r2
 801b596:	4a10      	ldr	r2, [pc, #64]	; (801b5d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801b598:	210e      	movs	r1, #14
 801b59a:	6812      	ldr	r2, [r2, #0]
 801b59c:	fb01 2303 	mla	r3, r1, r3, r2
 801b5a0:	7b18      	ldrb	r0, [r3, #12]
 801b5a2:	f000 001f 	and.w	r0, r0, #31
 801b5a6:	4770      	bx	lr
 801b5a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b5ac:	4293      	cmp	r3, r2
 801b5ae:	d10a      	bne.n	801b5c6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801b5b0:	4b0a      	ldr	r3, [pc, #40]	; (801b5dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b5b8:	b10a      	cbz	r2, 801b5be <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b5ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b5bc:	b900      	cbnz	r0, 801b5c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801b5be:	6898      	ldr	r0, [r3, #8]
 801b5c0:	6803      	ldr	r3, [r0, #0]
 801b5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5c4:	4718      	bx	r3
 801b5c6:	2000      	movs	r0, #0
 801b5c8:	4770      	bx	lr
 801b5ca:	bf00      	nop
 801b5cc:	2000bd90 	.word	0x2000bd90
 801b5d0:	2000bd88 	.word	0x2000bd88
 801b5d4:	2000bd8c 	.word	0x2000bd8c
 801b5d8:	2000bd70 	.word	0x2000bd70
 801b5dc:	2000bcc8 	.word	0x2000bcc8

0801b5e0 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801b5e0:	2018      	movs	r0, #24
 801b5e2:	4770      	bx	lr

0801b5e4 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801b5e4:	2001      	movs	r0, #1
 801b5e6:	4770      	bx	lr

0801b5e8 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801b5e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b5ec:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801b5f0:	4770      	bx	lr

0801b5f2 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801b5f2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801b5f6:	4770      	bx	lr

0801b5f8 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801b5f8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801b5fc:	4770      	bx	lr

0801b5fe <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801b5fe:	b2c8      	uxtb	r0, r1
 801b600:	4770      	bx	lr

0801b602 <_ZN8touchgfx8LCD24bpp4initEv>:
 801b602:	4770      	bx	lr

0801b604 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b608:	b085      	sub	sp, #20
 801b60a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801b60c:	9203      	str	r2, [sp, #12]
 801b60e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801b612:	6878      	ldr	r0, [r7, #4]
 801b614:	9201      	str	r2, [sp, #4]
 801b616:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801b618:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801b61c:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801b620:	fa1f fc84 	uxth.w	ip, r4
 801b624:	43e4      	mvns	r4, r4
 801b626:	9100      	str	r1, [sp, #0]
 801b628:	b2e4      	uxtb	r4, r4
 801b62a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b62e:	fb00 2505 	mla	r5, r0, r5, r2
 801b632:	683a      	ldr	r2, [r7, #0]
 801b634:	6877      	ldr	r7, [r6, #4]
 801b636:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b63a:	3704      	adds	r7, #4
 801b63c:	4415      	add	r5, r2
 801b63e:	6832      	ldr	r2, [r6, #0]
 801b640:	9202      	str	r2, [sp, #8]
 801b642:	9a00      	ldr	r2, [sp, #0]
 801b644:	2a00      	cmp	r2, #0
 801b646:	dc03      	bgt.n	801b650 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801b648:	9a03      	ldr	r2, [sp, #12]
 801b64a:	2a00      	cmp	r2, #0
 801b64c:	f340 8116 	ble.w	801b87c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b652:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b656:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b658:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	dd0f      	ble.n	801b680 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801b660:	1406      	asrs	r6, r0, #16
 801b662:	d406      	bmi.n	801b672 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b664:	4546      	cmp	r6, r8
 801b666:	da04      	bge.n	801b672 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b668:	1416      	asrs	r6, r2, #16
 801b66a:	d402      	bmi.n	801b672 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b66c:	9901      	ldr	r1, [sp, #4]
 801b66e:	428e      	cmp	r6, r1
 801b670:	db07      	blt.n	801b682 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b672:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b674:	3b01      	subs	r3, #1
 801b676:	3503      	adds	r5, #3
 801b678:	4408      	add	r0, r1
 801b67a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b67c:	440a      	add	r2, r1
 801b67e:	e7ed      	b.n	801b65c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801b680:	d011      	beq.n	801b6a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801b682:	1e5e      	subs	r6, r3, #1
 801b684:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b686:	fb01 0e06 	mla	lr, r1, r6, r0
 801b68a:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801b68e:	d548      	bpl.n	801b722 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801b690:	4699      	mov	r9, r3
 801b692:	462e      	mov	r6, r5
 801b694:	f1b9 0f00 	cmp.w	r9, #0
 801b698:	f300 809e 	bgt.w	801b7d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801b69c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b6a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b6a4:	441d      	add	r5, r3
 801b6a6:	9b00      	ldr	r3, [sp, #0]
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	f340 80e7 	ble.w	801b87c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b6ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b6b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b6b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b6bc:	eef0 6a62 	vmov.f32	s13, s5
 801b6c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b6c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b6c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b6cc:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b6d0:	eef0 6a43 	vmov.f32	s13, s6
 801b6d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b6d8:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b6dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b6e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b6e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b6e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b6ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b6f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b6f4:	ee12 2a90 	vmov	r2, s5
 801b6f8:	eef0 2a47 	vmov.f32	s5, s14
 801b6fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b700:	ee13 2a10 	vmov	r2, s6
 801b704:	9311      	str	r3, [sp, #68]	; 0x44
 801b706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b708:	eeb0 3a67 	vmov.f32	s6, s15
 801b70c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b710:	9312      	str	r3, [sp, #72]	; 0x48
 801b712:	9b00      	ldr	r3, [sp, #0]
 801b714:	9a03      	ldr	r2, [sp, #12]
 801b716:	3b01      	subs	r3, #1
 801b718:	9300      	str	r3, [sp, #0]
 801b71a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b71c:	bf08      	it	eq
 801b71e:	4613      	moveq	r3, r2
 801b720:	e78f      	b.n	801b642 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801b722:	45c6      	cmp	lr, r8
 801b724:	dab4      	bge.n	801b690 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b726:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b728:	fb01 2606 	mla	r6, r1, r6, r2
 801b72c:	1436      	asrs	r6, r6, #16
 801b72e:	d4af      	bmi.n	801b690 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b730:	9901      	ldr	r1, [sp, #4]
 801b732:	428e      	cmp	r6, r1
 801b734:	daac      	bge.n	801b690 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b736:	1cee      	adds	r6, r5, #3
 801b738:	4699      	mov	r9, r3
 801b73a:	f1b9 0f00 	cmp.w	r9, #0
 801b73e:	f106 0603 	add.w	r6, r6, #3
 801b742:	ddab      	ble.n	801b69c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b744:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801b748:	9902      	ldr	r1, [sp, #8]
 801b74a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b74e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b752:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b756:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b758:	fb1b fb04 	smulbb	fp, fp, r4
 801b75c:	f109 39ff 	add.w	r9, r9, #4294967295
 801b760:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b764:	4408      	add	r0, r1
 801b766:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b768:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b76c:	440a      	add	r2, r1
 801b76e:	eb07 0a0e 	add.w	sl, r7, lr
 801b772:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b776:	fb0e be0c 	mla	lr, lr, ip, fp
 801b77a:	fa1f fe8e 	uxth.w	lr, lr
 801b77e:	f10e 0b01 	add.w	fp, lr, #1
 801b782:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b786:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b78a:	fb1b fb04 	smulbb	fp, fp, r4
 801b78e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b792:	f806 ec06 	strb.w	lr, [r6, #-6]
 801b796:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b79a:	fb0e be0c 	mla	lr, lr, ip, fp
 801b79e:	fa1f fe8e 	uxth.w	lr, lr
 801b7a2:	f10e 0b01 	add.w	fp, lr, #1
 801b7a6:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b7aa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b7ae:	f806 ec05 	strb.w	lr, [r6, #-5]
 801b7b2:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b7b6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b7ba:	fb1a fa04 	smulbb	sl, sl, r4
 801b7be:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b7c2:	fa1f fe8e 	uxth.w	lr, lr
 801b7c6:	f10e 0a01 	add.w	sl, lr, #1
 801b7ca:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b7ce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b7d2:	f806 ec04 	strb.w	lr, [r6, #-4]
 801b7d6:	e7b0      	b.n	801b73a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801b7d8:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b7dc:	d446      	bmi.n	801b86c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b7de:	45c2      	cmp	sl, r8
 801b7e0:	da44      	bge.n	801b86c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b7e2:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801b7e6:	d441      	bmi.n	801b86c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b7e8:	9901      	ldr	r1, [sp, #4]
 801b7ea:	458e      	cmp	lr, r1
 801b7ec:	da3e      	bge.n	801b86c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b7ee:	9902      	ldr	r1, [sp, #8]
 801b7f0:	f896 b000 	ldrb.w	fp, [r6]
 801b7f4:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b7f8:	fb1b fb04 	smulbb	fp, fp, r4
 801b7fc:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b800:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b804:	eb07 0a0e 	add.w	sl, r7, lr
 801b808:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b80c:	fb0e be0c 	mla	lr, lr, ip, fp
 801b810:	fa1f fe8e 	uxth.w	lr, lr
 801b814:	f10e 0b01 	add.w	fp, lr, #1
 801b818:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b81c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b820:	fb1b fb04 	smulbb	fp, fp, r4
 801b824:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b828:	f886 e000 	strb.w	lr, [r6]
 801b82c:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b830:	fb0e be0c 	mla	lr, lr, ip, fp
 801b834:	fa1f fe8e 	uxth.w	lr, lr
 801b838:	f10e 0b01 	add.w	fp, lr, #1
 801b83c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b840:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b844:	f886 e001 	strb.w	lr, [r6, #1]
 801b848:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b84c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b850:	fb1a fa04 	smulbb	sl, sl, r4
 801b854:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b858:	fa1f fe8e 	uxth.w	lr, lr
 801b85c:	f10e 0a01 	add.w	sl, lr, #1
 801b860:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b864:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b868:	f886 e002 	strb.w	lr, [r6, #2]
 801b86c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b86e:	3603      	adds	r6, #3
 801b870:	f109 39ff 	add.w	r9, r9, #4294967295
 801b874:	4408      	add	r0, r1
 801b876:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b878:	440a      	add	r2, r1
 801b87a:	e70b      	b.n	801b694 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801b87c:	b005      	add	sp, #20
 801b87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b882 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b882:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b886:	b085      	sub	sp, #20
 801b888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b88c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b88e:	9203      	str	r2, [sp, #12]
 801b890:	6870      	ldr	r0, [r6, #4]
 801b892:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801b894:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b898:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801b89c:	9101      	str	r1, [sp, #4]
 801b89e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b8a2:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801b8a6:	fb00 2404 	mla	r4, r0, r4, r2
 801b8aa:	6832      	ldr	r2, [r6, #0]
 801b8ac:	686e      	ldr	r6, [r5, #4]
 801b8ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b8b2:	3604      	adds	r6, #4
 801b8b4:	4414      	add	r4, r2
 801b8b6:	682a      	ldr	r2, [r5, #0]
 801b8b8:	9202      	str	r2, [sp, #8]
 801b8ba:	9a01      	ldr	r2, [sp, #4]
 801b8bc:	2a00      	cmp	r2, #0
 801b8be:	dc03      	bgt.n	801b8c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801b8c0:	9a03      	ldr	r2, [sp, #12]
 801b8c2:	2a00      	cmp	r2, #0
 801b8c4:	f340 80b2 	ble.w	801ba2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b8c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b8ca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b8ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b8d0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	dd0c      	ble.n	801b8f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b8d8:	1405      	asrs	r5, r0, #16
 801b8da:	d405      	bmi.n	801b8e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b8dc:	4575      	cmp	r5, lr
 801b8de:	da03      	bge.n	801b8e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b8e0:	1415      	asrs	r5, r2, #16
 801b8e2:	d401      	bmi.n	801b8e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b8e4:	4545      	cmp	r5, r8
 801b8e6:	db05      	blt.n	801b8f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b8e8:	4460      	add	r0, ip
 801b8ea:	443a      	add	r2, r7
 801b8ec:	3b01      	subs	r3, #1
 801b8ee:	3403      	adds	r4, #3
 801b8f0:	e7f0      	b.n	801b8d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801b8f2:	d03d      	beq.n	801b970 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801b8f4:	1e5d      	subs	r5, r3, #1
 801b8f6:	fb0c 0905 	mla	r9, ip, r5, r0
 801b8fa:	ea5f 4929 	movs.w	r9, r9, asr #16
 801b8fe:	d42c      	bmi.n	801b95a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b900:	45f1      	cmp	r9, lr
 801b902:	da2a      	bge.n	801b95a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b904:	fb07 2505 	mla	r5, r7, r5, r2
 801b908:	142d      	asrs	r5, r5, #16
 801b90a:	d426      	bmi.n	801b95a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b90c:	4545      	cmp	r5, r8
 801b90e:	da24      	bge.n	801b95a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b910:	1ce5      	adds	r5, r4, #3
 801b912:	469a      	mov	sl, r3
 801b914:	f1ba 0f00 	cmp.w	sl, #0
 801b918:	f105 0503 	add.w	r5, r5, #3
 801b91c:	dd23      	ble.n	801b966 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b91e:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b922:	9902      	ldr	r1, [sp, #8]
 801b924:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801b928:	443a      	add	r2, r7
 801b92a:	fb0e 1909 	mla	r9, lr, r9, r1
 801b92e:	4460      	add	r0, ip
 801b930:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b934:	f819 900b 	ldrb.w	r9, [r9, fp]
 801b938:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b93c:	eb06 0b09 	add.w	fp, r6, r9
 801b940:	f816 9009 	ldrb.w	r9, [r6, r9]
 801b944:	f805 9c06 	strb.w	r9, [r5, #-6]
 801b948:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801b94c:	f805 9c05 	strb.w	r9, [r5, #-5]
 801b950:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b954:	f805 9c04 	strb.w	r9, [r5, #-4]
 801b958:	e7dc      	b.n	801b914 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b95a:	2500      	movs	r5, #0
 801b95c:	eba3 0905 	sub.w	r9, r3, r5
 801b960:	f1b9 0f00 	cmp.w	r9, #0
 801b964:	dc3c      	bgt.n	801b9e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801b966:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b96a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b96e:	441c      	add	r4, r3
 801b970:	9b01      	ldr	r3, [sp, #4]
 801b972:	2b00      	cmp	r3, #0
 801b974:	dd5a      	ble.n	801ba2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b976:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b97a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b97c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b980:	eeb0 6a62 	vmov.f32	s12, s5
 801b984:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b988:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b98c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b990:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b994:	eeb0 6a43 	vmov.f32	s12, s6
 801b998:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b99c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b9a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b9a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b9a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b9ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b9b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b9b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b9b8:	ee12 2a90 	vmov	r2, s5
 801b9bc:	eef0 2a47 	vmov.f32	s5, s14
 801b9c0:	fb92 fcf3 	sdiv	ip, r2, r3
 801b9c4:	ee13 2a10 	vmov	r2, s6
 801b9c8:	eeb0 3a67 	vmov.f32	s6, s15
 801b9cc:	fb92 f7f3 	sdiv	r7, r2, r3
 801b9d0:	9b01      	ldr	r3, [sp, #4]
 801b9d2:	9a03      	ldr	r2, [sp, #12]
 801b9d4:	3b01      	subs	r3, #1
 801b9d6:	9301      	str	r3, [sp, #4]
 801b9d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b9da:	bf08      	it	eq
 801b9dc:	4613      	moveq	r3, r2
 801b9de:	e76c      	b.n	801b8ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801b9e0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b9e4:	d41e      	bmi.n	801ba24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b9e6:	45f2      	cmp	sl, lr
 801b9e8:	da1c      	bge.n	801ba24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b9ea:	ea5f 4922 	movs.w	r9, r2, asr #16
 801b9ee:	d419      	bmi.n	801ba24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b9f0:	45c1      	cmp	r9, r8
 801b9f2:	da17      	bge.n	801ba24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b9f4:	9902      	ldr	r1, [sp, #8]
 801b9f6:	fb0e 1909 	mla	r9, lr, r9, r1
 801b9fa:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b9fe:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ba02:	f816 b009 	ldrb.w	fp, [r6, r9]
 801ba06:	eb06 0a09 	add.w	sl, r6, r9
 801ba0a:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801ba0e:	f804 b009 	strb.w	fp, [r4, r9]
 801ba12:	44a1      	add	r9, r4
 801ba14:	f89a b001 	ldrb.w	fp, [sl, #1]
 801ba18:	f889 b001 	strb.w	fp, [r9, #1]
 801ba1c:	f89a a002 	ldrb.w	sl, [sl, #2]
 801ba20:	f889 a002 	strb.w	sl, [r9, #2]
 801ba24:	4460      	add	r0, ip
 801ba26:	443a      	add	r2, r7
 801ba28:	3501      	adds	r5, #1
 801ba2a:	e797      	b.n	801b95c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801ba2c:	b005      	add	sp, #20
 801ba2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ba32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba36:	b087      	sub	sp, #28
 801ba38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ba3c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801ba3e:	9204      	str	r2, [sp, #16]
 801ba40:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801ba44:	6870      	ldr	r0, [r6, #4]
 801ba46:	9205      	str	r2, [sp, #20]
 801ba48:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801ba4a:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801ba4e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801ba52:	9101      	str	r1, [sp, #4]
 801ba54:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801ba58:	fb00 2505 	mla	r5, r0, r5, r2
 801ba5c:	6832      	ldr	r2, [r6, #0]
 801ba5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ba62:	4415      	add	r5, r2
 801ba64:	6822      	ldr	r2, [r4, #0]
 801ba66:	9202      	str	r2, [sp, #8]
 801ba68:	6862      	ldr	r2, [r4, #4]
 801ba6a:	3204      	adds	r2, #4
 801ba6c:	9203      	str	r2, [sp, #12]
 801ba6e:	9a01      	ldr	r2, [sp, #4]
 801ba70:	2a00      	cmp	r2, #0
 801ba72:	dc03      	bgt.n	801ba7c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801ba74:	9a04      	ldr	r2, [sp, #16]
 801ba76:	2a00      	cmp	r2, #0
 801ba78:	f340 8124 	ble.w	801bcc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ba7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ba7e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ba82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ba84:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	dd0e      	ble.n	801baaa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801ba8c:	1422      	asrs	r2, r4, #16
 801ba8e:	d405      	bmi.n	801ba9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ba90:	4572      	cmp	r2, lr
 801ba92:	da03      	bge.n	801ba9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ba94:	1402      	asrs	r2, r0, #16
 801ba96:	d401      	bmi.n	801ba9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ba98:	4542      	cmp	r2, r8
 801ba9a:	db07      	blt.n	801baac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801ba9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ba9e:	3b01      	subs	r3, #1
 801baa0:	3503      	adds	r5, #3
 801baa2:	4414      	add	r4, r2
 801baa4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801baa6:	4410      	add	r0, r2
 801baa8:	e7ee      	b.n	801ba88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801baaa:	d010      	beq.n	801bace <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801baac:	1e5a      	subs	r2, r3, #1
 801baae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bab0:	fb06 4602 	mla	r6, r6, r2, r4
 801bab4:	1436      	asrs	r6, r6, #16
 801bab6:	d546      	bpl.n	801bb46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801bab8:	4699      	mov	r9, r3
 801baba:	462f      	mov	r7, r5
 801babc:	f1b9 0f00 	cmp.w	r9, #0
 801bac0:	f300 80a5 	bgt.w	801bc0e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801bac4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bac8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bacc:	441d      	add	r5, r3
 801bace:	9b01      	ldr	r3, [sp, #4]
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	f340 80f7 	ble.w	801bcc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801bad6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bada:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801badc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bae0:	eeb0 6a62 	vmov.f32	s12, s5
 801bae4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bae8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801baec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801baf0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801baf4:	eeb0 6a43 	vmov.f32	s12, s6
 801baf8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bafc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bb00:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb04:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb08:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb0c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb10:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bb14:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bb18:	ee12 2a90 	vmov	r2, s5
 801bb1c:	eef0 2a47 	vmov.f32	s5, s14
 801bb20:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb24:	ee13 2a10 	vmov	r2, s6
 801bb28:	9313      	str	r3, [sp, #76]	; 0x4c
 801bb2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb2c:	eeb0 3a67 	vmov.f32	s6, s15
 801bb30:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb34:	9314      	str	r3, [sp, #80]	; 0x50
 801bb36:	9b01      	ldr	r3, [sp, #4]
 801bb38:	9a04      	ldr	r2, [sp, #16]
 801bb3a:	3b01      	subs	r3, #1
 801bb3c:	9301      	str	r3, [sp, #4]
 801bb3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb40:	bf08      	it	eq
 801bb42:	4613      	moveq	r3, r2
 801bb44:	e793      	b.n	801ba6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801bb46:	4576      	cmp	r6, lr
 801bb48:	dab6      	bge.n	801bab8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801bb4a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801bb4c:	fb06 0202 	mla	r2, r6, r2, r0
 801bb50:	1412      	asrs	r2, r2, #16
 801bb52:	d4b1      	bmi.n	801bab8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801bb54:	4542      	cmp	r2, r8
 801bb56:	daaf      	bge.n	801bab8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801bb58:	1cef      	adds	r7, r5, #3
 801bb5a:	4699      	mov	r9, r3
 801bb5c:	f1b9 0f00 	cmp.w	r9, #0
 801bb60:	ddb0      	ble.n	801bac4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801bb62:	9902      	ldr	r1, [sp, #8]
 801bb64:	1402      	asrs	r2, r0, #16
 801bb66:	1426      	asrs	r6, r4, #16
 801bb68:	fb0e 1202 	mla	r2, lr, r2, r1
 801bb6c:	9903      	ldr	r1, [sp, #12]
 801bb6e:	5d92      	ldrb	r2, [r2, r6]
 801bb70:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801bb74:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801bb78:	d041      	beq.n	801bbfe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801bb7a:	9a05      	ldr	r2, [sp, #20]
 801bb7c:	fa5f fb86 	uxtb.w	fp, r6
 801bb80:	fb02 fc0c 	mul.w	ip, r2, ip
 801bb84:	f10c 0201 	add.w	r2, ip, #1
 801bb88:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801bb8c:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801bb90:	1212      	asrs	r2, r2, #8
 801bb92:	fa1f fa82 	uxth.w	sl, r2
 801bb96:	43d2      	mvns	r2, r2
 801bb98:	fb1b fb0a 	smulbb	fp, fp, sl
 801bb9c:	b2d2      	uxtb	r2, r2
 801bb9e:	fb0c bc02 	mla	ip, ip, r2, fp
 801bba2:	fa1f fc8c 	uxth.w	ip, ip
 801bba6:	f10c 0b01 	add.w	fp, ip, #1
 801bbaa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bbae:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bbb2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bbb6:	fb1b fb0a 	smulbb	fp, fp, sl
 801bbba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bbbe:	fb16 fa0a 	smulbb	sl, r6, sl
 801bbc2:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801bbc6:	f807 cc03 	strb.w	ip, [r7, #-3]
 801bbca:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801bbce:	fb06 aa02 	mla	sl, r6, r2, sl
 801bbd2:	fb0c bc02 	mla	ip, ip, r2, fp
 801bbd6:	fa1f fa8a 	uxth.w	sl, sl
 801bbda:	fa1f fc8c 	uxth.w	ip, ip
 801bbde:	f10a 0601 	add.w	r6, sl, #1
 801bbe2:	f10c 0b01 	add.w	fp, ip, #1
 801bbe6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bbea:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bbee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bbf2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bbf6:	f807 ac01 	strb.w	sl, [r7, #-1]
 801bbfa:	f807 cc02 	strb.w	ip, [r7, #-2]
 801bbfe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bc00:	3703      	adds	r7, #3
 801bc02:	f109 39ff 	add.w	r9, r9, #4294967295
 801bc06:	4414      	add	r4, r2
 801bc08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc0a:	4410      	add	r0, r2
 801bc0c:	e7a6      	b.n	801bb5c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801bc0e:	1426      	asrs	r6, r4, #16
 801bc10:	d450      	bmi.n	801bcb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bc12:	4576      	cmp	r6, lr
 801bc14:	da4e      	bge.n	801bcb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bc16:	1402      	asrs	r2, r0, #16
 801bc18:	d44c      	bmi.n	801bcb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bc1a:	4542      	cmp	r2, r8
 801bc1c:	da4a      	bge.n	801bcb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bc1e:	9902      	ldr	r1, [sp, #8]
 801bc20:	fb0e 1202 	mla	r2, lr, r2, r1
 801bc24:	9903      	ldr	r1, [sp, #12]
 801bc26:	5d92      	ldrb	r2, [r2, r6]
 801bc28:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801bc2c:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801bc30:	d040      	beq.n	801bcb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bc32:	9a05      	ldr	r2, [sp, #20]
 801bc34:	fa5f fb86 	uxtb.w	fp, r6
 801bc38:	fb02 fc0c 	mul.w	ip, r2, ip
 801bc3c:	f10c 0201 	add.w	r2, ip, #1
 801bc40:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801bc44:	f897 c000 	ldrb.w	ip, [r7]
 801bc48:	1212      	asrs	r2, r2, #8
 801bc4a:	fa1f fa82 	uxth.w	sl, r2
 801bc4e:	43d2      	mvns	r2, r2
 801bc50:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc54:	b2d2      	uxtb	r2, r2
 801bc56:	fb0c bc02 	mla	ip, ip, r2, fp
 801bc5a:	fa1f fc8c 	uxth.w	ip, ip
 801bc5e:	f10c 0b01 	add.w	fp, ip, #1
 801bc62:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bc66:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bc6a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bc6e:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc72:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bc76:	fb16 fa0a 	smulbb	sl, r6, sl
 801bc7a:	78be      	ldrb	r6, [r7, #2]
 801bc7c:	f887 c000 	strb.w	ip, [r7]
 801bc80:	f897 c001 	ldrb.w	ip, [r7, #1]
 801bc84:	fb06 aa02 	mla	sl, r6, r2, sl
 801bc88:	fb0c bc02 	mla	ip, ip, r2, fp
 801bc8c:	fa1f fa8a 	uxth.w	sl, sl
 801bc90:	fa1f fc8c 	uxth.w	ip, ip
 801bc94:	f10a 0601 	add.w	r6, sl, #1
 801bc98:	f10c 0b01 	add.w	fp, ip, #1
 801bc9c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bca0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bca4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bca8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bcac:	f887 a002 	strb.w	sl, [r7, #2]
 801bcb0:	f887 c001 	strb.w	ip, [r7, #1]
 801bcb4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bcb6:	3703      	adds	r7, #3
 801bcb8:	f109 39ff 	add.w	r9, r9, #4294967295
 801bcbc:	4414      	add	r4, r2
 801bcbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bcc0:	4410      	add	r0, r2
 801bcc2:	e6fb      	b.n	801babc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801bcc4:	b007      	add	sp, #28
 801bcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bcca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bcca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcce:	b085      	sub	sp, #20
 801bcd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bcd4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bcd6:	9203      	str	r2, [sp, #12]
 801bcd8:	6870      	ldr	r0, [r6, #4]
 801bcda:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801bcdc:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801bce0:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801bce4:	9100      	str	r1, [sp, #0]
 801bce6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bcea:	fb00 2404 	mla	r4, r0, r4, r2
 801bcee:	6832      	ldr	r2, [r6, #0]
 801bcf0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bcf4:	4414      	add	r4, r2
 801bcf6:	682a      	ldr	r2, [r5, #0]
 801bcf8:	9201      	str	r2, [sp, #4]
 801bcfa:	686a      	ldr	r2, [r5, #4]
 801bcfc:	3204      	adds	r2, #4
 801bcfe:	9202      	str	r2, [sp, #8]
 801bd00:	9a00      	ldr	r2, [sp, #0]
 801bd02:	2a00      	cmp	r2, #0
 801bd04:	dc03      	bgt.n	801bd0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801bd06:	9a03      	ldr	r2, [sp, #12]
 801bd08:	2a00      	cmp	r2, #0
 801bd0a:	f340 8131 	ble.w	801bf70 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801bd0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bd10:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bd14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bd16:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	dd0e      	ble.n	801bd3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bd1e:	1405      	asrs	r5, r0, #16
 801bd20:	d405      	bmi.n	801bd2e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bd22:	4575      	cmp	r5, lr
 801bd24:	da03      	bge.n	801bd2e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bd26:	1415      	asrs	r5, r2, #16
 801bd28:	d401      	bmi.n	801bd2e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bd2a:	4545      	cmp	r5, r8
 801bd2c:	db07      	blt.n	801bd3e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801bd2e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bd30:	3b01      	subs	r3, #1
 801bd32:	3403      	adds	r4, #3
 801bd34:	4428      	add	r0, r5
 801bd36:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bd38:	442a      	add	r2, r5
 801bd3a:	e7ee      	b.n	801bd1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801bd3c:	d06f      	beq.n	801be1e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801bd3e:	1e5d      	subs	r5, r3, #1
 801bd40:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bd42:	fb06 0605 	mla	r6, r6, r5, r0
 801bd46:	1436      	asrs	r6, r6, #16
 801bd48:	d460      	bmi.n	801be0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bd4a:	4576      	cmp	r6, lr
 801bd4c:	da5e      	bge.n	801be0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bd4e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bd50:	fb06 2505 	mla	r5, r6, r5, r2
 801bd54:	142d      	asrs	r5, r5, #16
 801bd56:	d459      	bmi.n	801be0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bd58:	4545      	cmp	r5, r8
 801bd5a:	da57      	bge.n	801be0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bd5c:	1ce5      	adds	r5, r4, #3
 801bd5e:	469a      	mov	sl, r3
 801bd60:	f1ba 0f00 	cmp.w	sl, #0
 801bd64:	dd56      	ble.n	801be14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801bd66:	9901      	ldr	r1, [sp, #4]
 801bd68:	1416      	asrs	r6, r2, #16
 801bd6a:	1407      	asrs	r7, r0, #16
 801bd6c:	fb0e 1606 	mla	r6, lr, r6, r1
 801bd70:	9902      	ldr	r1, [sp, #8]
 801bd72:	5df6      	ldrb	r6, [r6, r7]
 801bd74:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801bd78:	0e37      	lsrs	r7, r6, #24
 801bd7a:	2fff      	cmp	r7, #255	; 0xff
 801bd7c:	f000 80ef 	beq.w	801bf5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801bd80:	fa5f fc87 	uxtb.w	ip, r7
 801bd84:	b3d7      	cbz	r7, 801bdfc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801bd86:	fa1f f78c 	uxth.w	r7, ip
 801bd8a:	ea6f 0c0c 	mvn.w	ip, ip
 801bd8e:	fa5f fb86 	uxtb.w	fp, r6
 801bd92:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801bd96:	fa5f fc8c 	uxtb.w	ip, ip
 801bd9a:	fb1b fb07 	smulbb	fp, fp, r7
 801bd9e:	fb09 b90c 	mla	r9, r9, ip, fp
 801bda2:	fa1f f989 	uxth.w	r9, r9
 801bda6:	f109 0b01 	add.w	fp, r9, #1
 801bdaa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bdae:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801bdb2:	fb1b fb0c 	smulbb	fp, fp, ip
 801bdb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bdba:	f805 9c03 	strb.w	r9, [r5, #-3]
 801bdbe:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801bdc2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bdc6:	fb09 b907 	mla	r9, r9, r7, fp
 801bdca:	fa1f f989 	uxth.w	r9, r9
 801bdce:	f109 0b01 	add.w	fp, r9, #1
 801bdd2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bdd6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bdda:	f805 9c02 	strb.w	r9, [r5, #-2]
 801bdde:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801bde2:	fb19 fc0c 	smulbb	ip, r9, ip
 801bde6:	fb06 c607 	mla	r6, r6, r7, ip
 801bdea:	b2b6      	uxth	r6, r6
 801bdec:	f106 0c01 	add.w	ip, r6, #1
 801bdf0:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801bdf4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bdf8:	f805 cc01 	strb.w	ip, [r5, #-1]
 801bdfc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bdfe:	3503      	adds	r5, #3
 801be00:	f10a 3aff 	add.w	sl, sl, #4294967295
 801be04:	4408      	add	r0, r1
 801be06:	9912      	ldr	r1, [sp, #72]	; 0x48
 801be08:	440a      	add	r2, r1
 801be0a:	e7a9      	b.n	801bd60 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801be0c:	2600      	movs	r6, #0
 801be0e:	1b9d      	subs	r5, r3, r6
 801be10:	2d00      	cmp	r5, #0
 801be12:	dc40      	bgt.n	801be96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801be14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be1c:	441c      	add	r4, r3
 801be1e:	9b00      	ldr	r3, [sp, #0]
 801be20:	2b00      	cmp	r3, #0
 801be22:	f340 80a5 	ble.w	801bf70 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801be26:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be30:	eeb0 6a62 	vmov.f32	s12, s5
 801be34:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801be38:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be40:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801be44:	eeb0 6a43 	vmov.f32	s12, s6
 801be48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be4c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801be50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be54:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be58:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be68:	ee12 2a90 	vmov	r2, s5
 801be6c:	eef0 2a47 	vmov.f32	s5, s14
 801be70:	fb92 f3f3 	sdiv	r3, r2, r3
 801be74:	ee13 2a10 	vmov	r2, s6
 801be78:	9311      	str	r3, [sp, #68]	; 0x44
 801be7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be7c:	eeb0 3a67 	vmov.f32	s6, s15
 801be80:	fb92 f3f3 	sdiv	r3, r2, r3
 801be84:	9312      	str	r3, [sp, #72]	; 0x48
 801be86:	9b00      	ldr	r3, [sp, #0]
 801be88:	9a03      	ldr	r2, [sp, #12]
 801be8a:	3b01      	subs	r3, #1
 801be8c:	9300      	str	r3, [sp, #0]
 801be8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be90:	bf08      	it	eq
 801be92:	4613      	moveq	r3, r2
 801be94:	e734      	b.n	801bd00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801be96:	1407      	asrs	r7, r0, #16
 801be98:	d450      	bmi.n	801bf3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801be9a:	4577      	cmp	r7, lr
 801be9c:	da4e      	bge.n	801bf3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801be9e:	1415      	asrs	r5, r2, #16
 801bea0:	d44c      	bmi.n	801bf3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bea2:	4545      	cmp	r5, r8
 801bea4:	da4a      	bge.n	801bf3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bea6:	9901      	ldr	r1, [sp, #4]
 801bea8:	fb0e 1505 	mla	r5, lr, r5, r1
 801beac:	9902      	ldr	r1, [sp, #8]
 801beae:	5ded      	ldrb	r5, [r5, r7]
 801beb0:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801beb4:	0e2f      	lsrs	r7, r5, #24
 801beb6:	2fff      	cmp	r7, #255	; 0xff
 801beb8:	d046      	beq.n	801bf48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801beba:	fa5f f987 	uxtb.w	r9, r7
 801bebe:	b3ef      	cbz	r7, 801bf3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bec0:	fa1f fc89 	uxth.w	ip, r9
 801bec4:	ea6f 0909 	mvn.w	r9, r9
 801bec8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801becc:	fa5f fb85 	uxtb.w	fp, r5
 801bed0:	f814 a007 	ldrb.w	sl, [r4, r7]
 801bed4:	fa5f f989 	uxtb.w	r9, r9
 801bed8:	fb1b fb0c 	smulbb	fp, fp, ip
 801bedc:	fb0a ba09 	mla	sl, sl, r9, fp
 801bee0:	fa1f fa8a 	uxth.w	sl, sl
 801bee4:	f10a 0b01 	add.w	fp, sl, #1
 801bee8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801beec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bef0:	f804 a007 	strb.w	sl, [r4, r7]
 801bef4:	4427      	add	r7, r4
 801bef6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801befa:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801befe:	f897 b001 	ldrb.w	fp, [r7, #1]
 801bf02:	fb1b fb09 	smulbb	fp, fp, r9
 801bf06:	fb0a ba0c 	mla	sl, sl, ip, fp
 801bf0a:	fa1f fa8a 	uxth.w	sl, sl
 801bf0e:	f10a 0b01 	add.w	fp, sl, #1
 801bf12:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801bf16:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bf1a:	f887 a001 	strb.w	sl, [r7, #1]
 801bf1e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801bf22:	fb1a f909 	smulbb	r9, sl, r9
 801bf26:	fb05 950c 	mla	r5, r5, ip, r9
 801bf2a:	b2ad      	uxth	r5, r5
 801bf2c:	f105 0901 	add.w	r9, r5, #1
 801bf30:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801bf34:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bf38:	f887 9002 	strb.w	r9, [r7, #2]
 801bf3c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bf3e:	3601      	adds	r6, #1
 801bf40:	4408      	add	r0, r1
 801bf42:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bf44:	440a      	add	r2, r1
 801bf46:	e762      	b.n	801be0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801bf48:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801bf4c:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801bf50:	55e5      	strb	r5, [r4, r7]
 801bf52:	4427      	add	r7, r4
 801bf54:	0c2d      	lsrs	r5, r5, #16
 801bf56:	f887 c001 	strb.w	ip, [r7, #1]
 801bf5a:	70bd      	strb	r5, [r7, #2]
 801bf5c:	e7ee      	b.n	801bf3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bf5e:	0a37      	lsrs	r7, r6, #8
 801bf60:	f805 6c03 	strb.w	r6, [r5, #-3]
 801bf64:	0c36      	lsrs	r6, r6, #16
 801bf66:	f805 7c02 	strb.w	r7, [r5, #-2]
 801bf6a:	f805 6c01 	strb.w	r6, [r5, #-1]
 801bf6e:	e745      	b.n	801bdfc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801bf70:	b005      	add	sp, #20
 801bf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf76 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bf76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf7a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bf7c:	9201      	str	r2, [sp, #4]
 801bf7e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801bf82:	6870      	ldr	r0, [r6, #4]
 801bf84:	9200      	str	r2, [sp, #0]
 801bf86:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801bf8a:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801bf8e:	fa1f fc85 	uxth.w	ip, r5
 801bf92:	43ed      	mvns	r5, r5
 801bf94:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801bf98:	b2ed      	uxtb	r5, r5
 801bf9a:	fb00 2404 	mla	r4, r0, r4, r2
 801bf9e:	6832      	ldr	r2, [r6, #0]
 801bfa0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bfa4:	4414      	add	r4, r2
 801bfa6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bfa8:	f8d2 8000 	ldr.w	r8, [r2]
 801bfac:	2900      	cmp	r1, #0
 801bfae:	dc03      	bgt.n	801bfb8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801bfb0:	9a01      	ldr	r2, [sp, #4]
 801bfb2:	2a00      	cmp	r2, #0
 801bfb4:	f340 8104 	ble.w	801c1c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801bfb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bfba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bfbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bfc0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	dd0f      	ble.n	801bfe8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bfc8:	1406      	asrs	r6, r0, #16
 801bfca:	d406      	bmi.n	801bfda <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bfcc:	4576      	cmp	r6, lr
 801bfce:	da04      	bge.n	801bfda <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bfd0:	1416      	asrs	r6, r2, #16
 801bfd2:	d402      	bmi.n	801bfda <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bfd4:	9f00      	ldr	r7, [sp, #0]
 801bfd6:	42be      	cmp	r6, r7
 801bfd8:	db07      	blt.n	801bfea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801bfda:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bfdc:	3b01      	subs	r3, #1
 801bfde:	3403      	adds	r4, #3
 801bfe0:	4430      	add	r0, r6
 801bfe2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801bfe4:	4432      	add	r2, r6
 801bfe6:	e7ed      	b.n	801bfc4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801bfe8:	d05f      	beq.n	801c0aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801bfea:	1e5e      	subs	r6, r3, #1
 801bfec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bfee:	fb07 0706 	mla	r7, r7, r6, r0
 801bff2:	143f      	asrs	r7, r7, #16
 801bff4:	d450      	bmi.n	801c098 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bff6:	4577      	cmp	r7, lr
 801bff8:	da4e      	bge.n	801c098 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bffa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801bffc:	fb07 2606 	mla	r6, r7, r6, r2
 801c000:	1436      	asrs	r6, r6, #16
 801c002:	d449      	bmi.n	801c098 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c004:	9f00      	ldr	r7, [sp, #0]
 801c006:	42be      	cmp	r6, r7
 801c008:	da46      	bge.n	801c098 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c00a:	1ce6      	adds	r6, r4, #3
 801c00c:	4699      	mov	r9, r3
 801c00e:	f1b9 0f00 	cmp.w	r9, #0
 801c012:	f106 0603 	add.w	r6, r6, #3
 801c016:	dd43      	ble.n	801c0a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c018:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c01c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c020:	1417      	asrs	r7, r2, #16
 801c022:	f109 39ff 	add.w	r9, r9, #4294967295
 801c026:	fb1b fb05 	smulbb	fp, fp, r5
 801c02a:	fb0e a707 	mla	r7, lr, r7, sl
 801c02e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c032:	eb08 0a07 	add.w	sl, r8, r7
 801c036:	f818 7007 	ldrb.w	r7, [r8, r7]
 801c03a:	fb07 b70c 	mla	r7, r7, ip, fp
 801c03e:	b2bf      	uxth	r7, r7
 801c040:	f107 0b01 	add.w	fp, r7, #1
 801c044:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c048:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c04c:	fb1b fb05 	smulbb	fp, fp, r5
 801c050:	123f      	asrs	r7, r7, #8
 801c052:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c056:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c05a:	fb07 b70c 	mla	r7, r7, ip, fp
 801c05e:	b2bf      	uxth	r7, r7
 801c060:	f107 0b01 	add.w	fp, r7, #1
 801c064:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c068:	123f      	asrs	r7, r7, #8
 801c06a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c06e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c072:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c076:	fb1a fa05 	smulbb	sl, sl, r5
 801c07a:	fb07 a70c 	mla	r7, r7, ip, sl
 801c07e:	b2bf      	uxth	r7, r7
 801c080:	f107 0a01 	add.w	sl, r7, #1
 801c084:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c088:	123f      	asrs	r7, r7, #8
 801c08a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c08e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c090:	4438      	add	r0, r7
 801c092:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c094:	443a      	add	r2, r7
 801c096:	e7ba      	b.n	801c00e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c098:	2700      	movs	r7, #0
 801c09a:	1bde      	subs	r6, r3, r7
 801c09c:	2e00      	cmp	r6, #0
 801c09e:	dc3f      	bgt.n	801c120 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c0a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c0a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c0a8:	441c      	add	r4, r3
 801c0aa:	2900      	cmp	r1, #0
 801c0ac:	f340 8088 	ble.w	801c1c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c0b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c0b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c0ba:	3901      	subs	r1, #1
 801c0bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c0c0:	eef0 6a62 	vmov.f32	s13, s5
 801c0c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c0c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c0cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c0d0:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801c0d4:	eef0 6a43 	vmov.f32	s13, s6
 801c0d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c0dc:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801c0e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c0e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c0e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c0ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c0f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c0f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c0f8:	ee12 2a90 	vmov	r2, s5
 801c0fc:	eef0 2a47 	vmov.f32	s5, s14
 801c100:	fb92 f3f3 	sdiv	r3, r2, r3
 801c104:	ee13 2a10 	vmov	r2, s6
 801c108:	930f      	str	r3, [sp, #60]	; 0x3c
 801c10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c10c:	eeb0 3a67 	vmov.f32	s6, s15
 801c110:	fb92 f3f3 	sdiv	r3, r2, r3
 801c114:	9a01      	ldr	r2, [sp, #4]
 801c116:	9310      	str	r3, [sp, #64]	; 0x40
 801c118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c11a:	bf08      	it	eq
 801c11c:	4613      	moveq	r3, r2
 801c11e:	e745      	b.n	801bfac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c120:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c124:	d446      	bmi.n	801c1b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c126:	45f2      	cmp	sl, lr
 801c128:	da44      	bge.n	801c1b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c12a:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c12e:	d441      	bmi.n	801c1b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c130:	9e00      	ldr	r6, [sp, #0]
 801c132:	45b1      	cmp	r9, r6
 801c134:	da3e      	bge.n	801c1b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c136:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c13a:	fb0e a909 	mla	r9, lr, r9, sl
 801c13e:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c142:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c146:	fb1b fb05 	smulbb	fp, fp, r5
 801c14a:	eb08 0a09 	add.w	sl, r8, r9
 801c14e:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c152:	fb09 b90c 	mla	r9, r9, ip, fp
 801c156:	fa1f f989 	uxth.w	r9, r9
 801c15a:	f109 0b01 	add.w	fp, r9, #1
 801c15e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c162:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c166:	f804 9006 	strb.w	r9, [r4, r6]
 801c16a:	4426      	add	r6, r4
 801c16c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c170:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c174:	fb1b fb05 	smulbb	fp, fp, r5
 801c178:	fb09 b90c 	mla	r9, r9, ip, fp
 801c17c:	fa1f f989 	uxth.w	r9, r9
 801c180:	f109 0b01 	add.w	fp, r9, #1
 801c184:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c188:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c18c:	f886 9001 	strb.w	r9, [r6, #1]
 801c190:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c194:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c198:	fb1a fa05 	smulbb	sl, sl, r5
 801c19c:	fb09 a90c 	mla	r9, r9, ip, sl
 801c1a0:	fa1f f989 	uxth.w	r9, r9
 801c1a4:	f109 0a01 	add.w	sl, r9, #1
 801c1a8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c1ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c1b0:	f886 9002 	strb.w	r9, [r6, #2]
 801c1b4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c1b6:	3701      	adds	r7, #1
 801c1b8:	4430      	add	r0, r6
 801c1ba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c1bc:	4432      	add	r2, r6
 801c1be:	e76c      	b.n	801c09a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801c1c0:	b003      	add	sp, #12
 801c1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c1c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c1c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1ca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c1cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1d0:	9201      	str	r2, [sp, #4]
 801c1d2:	6868      	ldr	r0, [r5, #4]
 801c1d4:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801c1d8:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801c1dc:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c1e0:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801c1e4:	fb00 2404 	mla	r4, r0, r4, r2
 801c1e8:	682a      	ldr	r2, [r5, #0]
 801c1ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c1ee:	4414      	add	r4, r2
 801c1f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c1f2:	f8d2 9000 	ldr.w	r9, [r2]
 801c1f6:	2900      	cmp	r1, #0
 801c1f8:	dc03      	bgt.n	801c202 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c1fa:	9a01      	ldr	r2, [sp, #4]
 801c1fc:	2a00      	cmp	r2, #0
 801c1fe:	f340 80a8 	ble.w	801c352 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c202:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c204:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c20a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c20e:	2b00      	cmp	r3, #0
 801c210:	dd0c      	ble.n	801c22c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c212:	1405      	asrs	r5, r0, #16
 801c214:	d405      	bmi.n	801c222 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c216:	4565      	cmp	r5, ip
 801c218:	da03      	bge.n	801c222 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c21a:	1415      	asrs	r5, r2, #16
 801c21c:	d401      	bmi.n	801c222 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c21e:	4575      	cmp	r5, lr
 801c220:	db05      	blt.n	801c22e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801c222:	4438      	add	r0, r7
 801c224:	4432      	add	r2, r6
 801c226:	3b01      	subs	r3, #1
 801c228:	3403      	adds	r4, #3
 801c22a:	e7f0      	b.n	801c20e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c22c:	d03a      	beq.n	801c2a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801c22e:	1e5d      	subs	r5, r3, #1
 801c230:	fb07 0805 	mla	r8, r7, r5, r0
 801c234:	ea5f 4828 	movs.w	r8, r8, asr #16
 801c238:	d429      	bmi.n	801c28e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c23a:	45e0      	cmp	r8, ip
 801c23c:	da27      	bge.n	801c28e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c23e:	fb06 2505 	mla	r5, r6, r5, r2
 801c242:	142d      	asrs	r5, r5, #16
 801c244:	d423      	bmi.n	801c28e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c246:	4575      	cmp	r5, lr
 801c248:	da21      	bge.n	801c28e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c24a:	f104 0803 	add.w	r8, r4, #3
 801c24e:	469a      	mov	sl, r3
 801c250:	f1ba 0f00 	cmp.w	sl, #0
 801c254:	f108 0803 	add.w	r8, r8, #3
 801c258:	dd1f      	ble.n	801c29a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801c25a:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c25e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c262:	1415      	asrs	r5, r2, #16
 801c264:	4438      	add	r0, r7
 801c266:	4432      	add	r2, r6
 801c268:	fb0c b505 	mla	r5, ip, r5, fp
 801c26c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c270:	eb09 0b05 	add.w	fp, r9, r5
 801c274:	f819 5005 	ldrb.w	r5, [r9, r5]
 801c278:	f808 5c06 	strb.w	r5, [r8, #-6]
 801c27c:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801c280:	f808 5c05 	strb.w	r5, [r8, #-5]
 801c284:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801c288:	f808 5c04 	strb.w	r5, [r8, #-4]
 801c28c:	e7e0      	b.n	801c250 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c28e:	2500      	movs	r5, #0
 801c290:	eba3 0805 	sub.w	r8, r3, r5
 801c294:	f1b8 0f00 	cmp.w	r8, #0
 801c298:	dc38      	bgt.n	801c30c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801c29a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c29e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c2a2:	441c      	add	r4, r3
 801c2a4:	2900      	cmp	r1, #0
 801c2a6:	dd54      	ble.n	801c352 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c2a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c2ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c2ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c2b2:	3901      	subs	r1, #1
 801c2b4:	eeb0 6a62 	vmov.f32	s12, s5
 801c2b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c2bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c2c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c2c4:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c2c8:	eeb0 6a43 	vmov.f32	s12, s6
 801c2cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c2d0:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c2d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c2d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c2dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c2e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c2e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c2e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c2ec:	ee12 2a90 	vmov	r2, s5
 801c2f0:	eef0 2a47 	vmov.f32	s5, s14
 801c2f4:	fb92 f7f3 	sdiv	r7, r2, r3
 801c2f8:	ee13 2a10 	vmov	r2, s6
 801c2fc:	eeb0 3a67 	vmov.f32	s6, s15
 801c300:	fb92 f6f3 	sdiv	r6, r2, r3
 801c304:	9a01      	ldr	r2, [sp, #4]
 801c306:	bf08      	it	eq
 801c308:	4613      	moveq	r3, r2
 801c30a:	e774      	b.n	801c1f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c30c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c310:	d41b      	bmi.n	801c34a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c312:	45e2      	cmp	sl, ip
 801c314:	da19      	bge.n	801c34a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c316:	ea5f 4822 	movs.w	r8, r2, asr #16
 801c31a:	d416      	bmi.n	801c34a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c31c:	45f0      	cmp	r8, lr
 801c31e:	da14      	bge.n	801c34a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c320:	fb0c a808 	mla	r8, ip, r8, sl
 801c324:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c328:	f819 b008 	ldrb.w	fp, [r9, r8]
 801c32c:	eb09 0a08 	add.w	sl, r9, r8
 801c330:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801c334:	f804 b008 	strb.w	fp, [r4, r8]
 801c338:	44a0      	add	r8, r4
 801c33a:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c33e:	f888 b001 	strb.w	fp, [r8, #1]
 801c342:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c346:	f888 a002 	strb.w	sl, [r8, #2]
 801c34a:	4438      	add	r0, r7
 801c34c:	4432      	add	r2, r6
 801c34e:	3501      	adds	r5, #1
 801c350:	e79e      	b.n	801c290 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801c352:	b003      	add	sp, #12
 801c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c358 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c35c:	b085      	sub	sp, #20
 801c35e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c362:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c364:	9202      	str	r2, [sp, #8]
 801c366:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c36a:	6860      	ldr	r0, [r4, #4]
 801c36c:	9203      	str	r2, [sp, #12]
 801c36e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c372:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c376:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c37a:	fb00 2505 	mla	r5, r0, r5, r2
 801c37e:	6822      	ldr	r2, [r4, #0]
 801c380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c384:	4415      	add	r5, r2
 801c386:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c388:	6812      	ldr	r2, [r2, #0]
 801c38a:	9201      	str	r2, [sp, #4]
 801c38c:	2900      	cmp	r1, #0
 801c38e:	dc03      	bgt.n	801c398 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801c390:	9a02      	ldr	r2, [sp, #8]
 801c392:	2a00      	cmp	r2, #0
 801c394:	f340 811c 	ble.w	801c5d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c39a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c39e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c3a0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	dd0e      	ble.n	801c3c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c3a8:	1422      	asrs	r2, r4, #16
 801c3aa:	d405      	bmi.n	801c3b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c3ac:	4572      	cmp	r2, lr
 801c3ae:	da03      	bge.n	801c3b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c3b0:	1402      	asrs	r2, r0, #16
 801c3b2:	d401      	bmi.n	801c3b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c3b4:	4542      	cmp	r2, r8
 801c3b6:	db07      	blt.n	801c3c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c3b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c3ba:	3b01      	subs	r3, #1
 801c3bc:	3503      	adds	r5, #3
 801c3be:	4414      	add	r4, r2
 801c3c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c3c2:	4410      	add	r0, r2
 801c3c4:	e7ee      	b.n	801c3a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801c3c6:	d072      	beq.n	801c4ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801c3c8:	1e5a      	subs	r2, r3, #1
 801c3ca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c3cc:	fb06 4602 	mla	r6, r6, r2, r4
 801c3d0:	1436      	asrs	r6, r6, #16
 801c3d2:	d461      	bmi.n	801c498 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c3d4:	4576      	cmp	r6, lr
 801c3d6:	da5f      	bge.n	801c498 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c3d8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c3da:	fb06 0202 	mla	r2, r6, r2, r0
 801c3de:	1412      	asrs	r2, r2, #16
 801c3e0:	d45a      	bmi.n	801c498 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c3e2:	4542      	cmp	r2, r8
 801c3e4:	da58      	bge.n	801c498 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c3e6:	1cef      	adds	r7, r5, #3
 801c3e8:	4699      	mov	r9, r3
 801c3ea:	f1b9 0f00 	cmp.w	r9, #0
 801c3ee:	dd59      	ble.n	801c4a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801c3f0:	1426      	asrs	r6, r4, #16
 801c3f2:	1402      	asrs	r2, r0, #16
 801c3f4:	fb0e 6202 	mla	r2, lr, r2, r6
 801c3f8:	9e01      	ldr	r6, [sp, #4]
 801c3fa:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c3fe:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c402:	d041      	beq.n	801c488 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801c404:	9a03      	ldr	r2, [sp, #12]
 801c406:	fa5f fb86 	uxtb.w	fp, r6
 801c40a:	fb02 fc0c 	mul.w	ip, r2, ip
 801c40e:	f10c 0201 	add.w	r2, ip, #1
 801c412:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c416:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c41a:	1212      	asrs	r2, r2, #8
 801c41c:	fa1f fa82 	uxth.w	sl, r2
 801c420:	43d2      	mvns	r2, r2
 801c422:	fb1b fb0a 	smulbb	fp, fp, sl
 801c426:	b2d2      	uxtb	r2, r2
 801c428:	fb0c bc02 	mla	ip, ip, r2, fp
 801c42c:	fa1f fc8c 	uxth.w	ip, ip
 801c430:	f10c 0b01 	add.w	fp, ip, #1
 801c434:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c438:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c43c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c440:	fb1b fb0a 	smulbb	fp, fp, sl
 801c444:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c448:	fb16 fa0a 	smulbb	sl, r6, sl
 801c44c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c450:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c454:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c458:	fb06 aa02 	mla	sl, r6, r2, sl
 801c45c:	fb0c bc02 	mla	ip, ip, r2, fp
 801c460:	fa1f fa8a 	uxth.w	sl, sl
 801c464:	fa1f fc8c 	uxth.w	ip, ip
 801c468:	f10a 0601 	add.w	r6, sl, #1
 801c46c:	f10c 0b01 	add.w	fp, ip, #1
 801c470:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c474:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c478:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c47c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c480:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c484:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c488:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c48a:	3703      	adds	r7, #3
 801c48c:	f109 39ff 	add.w	r9, r9, #4294967295
 801c490:	4414      	add	r4, r2
 801c492:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c494:	4410      	add	r0, r2
 801c496:	e7a8      	b.n	801c3ea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c498:	f04f 0c00 	mov.w	ip, #0
 801c49c:	eba3 020c 	sub.w	r2, r3, ip
 801c4a0:	2a00      	cmp	r2, #0
 801c4a2:	dc3d      	bgt.n	801c520 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801c4a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c4a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c4ac:	441d      	add	r5, r3
 801c4ae:	2900      	cmp	r1, #0
 801c4b0:	f340 808e 	ble.w	801c5d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c4b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c4b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c4be:	3901      	subs	r1, #1
 801c4c0:	eeb0 6a62 	vmov.f32	s12, s5
 801c4c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c4c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c4cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4d0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c4d4:	eeb0 6a43 	vmov.f32	s12, s6
 801c4d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4dc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c4e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c4e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c4e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c4ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c4f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c4f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c4f8:	ee12 2a90 	vmov	r2, s5
 801c4fc:	eef0 2a47 	vmov.f32	s5, s14
 801c500:	fb92 f3f3 	sdiv	r3, r2, r3
 801c504:	ee13 2a10 	vmov	r2, s6
 801c508:	9311      	str	r3, [sp, #68]	; 0x44
 801c50a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c50c:	eeb0 3a67 	vmov.f32	s6, s15
 801c510:	fb92 f3f3 	sdiv	r3, r2, r3
 801c514:	9a02      	ldr	r2, [sp, #8]
 801c516:	9312      	str	r3, [sp, #72]	; 0x48
 801c518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c51a:	bf08      	it	eq
 801c51c:	4613      	moveq	r3, r2
 801c51e:	e735      	b.n	801c38c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801c520:	1426      	asrs	r6, r4, #16
 801c522:	d44e      	bmi.n	801c5c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c524:	4576      	cmp	r6, lr
 801c526:	da4c      	bge.n	801c5c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c528:	1402      	asrs	r2, r0, #16
 801c52a:	d44a      	bmi.n	801c5c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c52c:	4542      	cmp	r2, r8
 801c52e:	da48      	bge.n	801c5c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c530:	fb0e 6202 	mla	r2, lr, r2, r6
 801c534:	9e01      	ldr	r6, [sp, #4]
 801c536:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c53a:	0e3a      	lsrs	r2, r7, #24
 801c53c:	d041      	beq.n	801c5c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c53e:	9e03      	ldr	r6, [sp, #12]
 801c540:	fa5f fb87 	uxtb.w	fp, r7
 801c544:	4372      	muls	r2, r6
 801c546:	1c56      	adds	r6, r2, #1
 801c548:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c54c:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801c550:	1212      	asrs	r2, r2, #8
 801c552:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c556:	fa1f fa82 	uxth.w	sl, r2
 801c55a:	43d2      	mvns	r2, r2
 801c55c:	fb1b fb0a 	smulbb	fp, fp, sl
 801c560:	b2d2      	uxtb	r2, r2
 801c562:	fb09 b902 	mla	r9, r9, r2, fp
 801c566:	fa1f f989 	uxth.w	r9, r9
 801c56a:	f109 0b01 	add.w	fp, r9, #1
 801c56e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c572:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c576:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c57a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c57e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c582:	fb17 fa0a 	smulbb	sl, r7, sl
 801c586:	f805 9006 	strb.w	r9, [r5, r6]
 801c58a:	442e      	add	r6, r5
 801c58c:	78b7      	ldrb	r7, [r6, #2]
 801c58e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c592:	fb07 aa02 	mla	sl, r7, r2, sl
 801c596:	fb09 b902 	mla	r9, r9, r2, fp
 801c59a:	fa1f fa8a 	uxth.w	sl, sl
 801c59e:	fa1f f989 	uxth.w	r9, r9
 801c5a2:	f10a 0701 	add.w	r7, sl, #1
 801c5a6:	f109 0b01 	add.w	fp, r9, #1
 801c5aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c5ae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c5b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c5b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c5ba:	f886 a002 	strb.w	sl, [r6, #2]
 801c5be:	f886 9001 	strb.w	r9, [r6, #1]
 801c5c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c5c4:	f10c 0c01 	add.w	ip, ip, #1
 801c5c8:	4414      	add	r4, r2
 801c5ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c5cc:	4410      	add	r0, r2
 801c5ce:	e765      	b.n	801c49c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c5d0:	b005      	add	sp, #20
 801c5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c5d6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c5d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5da:	b085      	sub	sp, #20
 801c5dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c5e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c5e2:	9203      	str	r2, [sp, #12]
 801c5e4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c5e8:	6860      	ldr	r0, [r4, #4]
 801c5ea:	9201      	str	r2, [sp, #4]
 801c5ec:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c5f0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c5f4:	fb00 2505 	mla	r5, r0, r5, r2
 801c5f8:	6822      	ldr	r2, [r4, #0]
 801c5fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c5fe:	4415      	add	r5, r2
 801c600:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c602:	6812      	ldr	r2, [r2, #0]
 801c604:	9202      	str	r2, [sp, #8]
 801c606:	2900      	cmp	r1, #0
 801c608:	dc03      	bgt.n	801c612 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c60a:	9a03      	ldr	r2, [sp, #12]
 801c60c:	2a00      	cmp	r2, #0
 801c60e:	f340 8122 	ble.w	801c856 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c612:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c614:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c618:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c61a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c61e:	2b00      	cmp	r3, #0
 801c620:	dd0f      	ble.n	801c642 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c622:	1422      	asrs	r2, r4, #16
 801c624:	d406      	bmi.n	801c634 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c626:	4572      	cmp	r2, lr
 801c628:	da04      	bge.n	801c634 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c62a:	1402      	asrs	r2, r0, #16
 801c62c:	d402      	bmi.n	801c634 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c62e:	9e01      	ldr	r6, [sp, #4]
 801c630:	42b2      	cmp	r2, r6
 801c632:	db07      	blt.n	801c644 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c634:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c636:	3b01      	subs	r3, #1
 801c638:	3503      	adds	r5, #3
 801c63a:	4414      	add	r4, r2
 801c63c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c63e:	4410      	add	r0, r2
 801c640:	e7ed      	b.n	801c61e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c642:	d06e      	beq.n	801c722 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801c644:	1e5a      	subs	r2, r3, #1
 801c646:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c648:	fb06 4602 	mla	r6, r6, r2, r4
 801c64c:	1436      	asrs	r6, r6, #16
 801c64e:	d45d      	bmi.n	801c70c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c650:	4576      	cmp	r6, lr
 801c652:	da5b      	bge.n	801c70c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c654:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c656:	fb06 0202 	mla	r2, r6, r2, r0
 801c65a:	1412      	asrs	r2, r2, #16
 801c65c:	d456      	bmi.n	801c70c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c65e:	9e01      	ldr	r6, [sp, #4]
 801c660:	42b2      	cmp	r2, r6
 801c662:	da53      	bge.n	801c70c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c664:	1cee      	adds	r6, r5, #3
 801c666:	469a      	mov	sl, r3
 801c668:	f1ba 0f00 	cmp.w	sl, #0
 801c66c:	dd54      	ble.n	801c718 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c66e:	1427      	asrs	r7, r4, #16
 801c670:	1402      	asrs	r2, r0, #16
 801c672:	fb0e 7202 	mla	r2, lr, r2, r7
 801c676:	9f02      	ldr	r7, [sp, #8]
 801c678:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801c67c:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801c680:	d03c      	beq.n	801c6fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c682:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c686:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c68a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c68e:	fa5f f28c 	uxtb.w	r2, ip
 801c692:	b2ff      	uxtb	r7, r7
 801c694:	f000 80d8 	beq.w	801c848 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c698:	fa1f f882 	uxth.w	r8, r2
 801c69c:	43d2      	mvns	r2, r2
 801c69e:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801c6a2:	fb17 f708 	smulbb	r7, r7, r8
 801c6a6:	b2d2      	uxtb	r2, r2
 801c6a8:	fb19 f908 	smulbb	r9, r9, r8
 801c6ac:	fb0c 7702 	mla	r7, ip, r2, r7
 801c6b0:	fb1b f808 	smulbb	r8, fp, r8
 801c6b4:	b2bf      	uxth	r7, r7
 801c6b6:	f107 0c01 	add.w	ip, r7, #1
 801c6ba:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c6be:	123f      	asrs	r7, r7, #8
 801c6c0:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c6c4:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801c6c8:	fb07 9902 	mla	r9, r7, r2, r9
 801c6cc:	fa1f f989 	uxth.w	r9, r9
 801c6d0:	f109 0701 	add.w	r7, r9, #1
 801c6d4:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c6d8:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c6dc:	fb07 8802 	mla	r8, r7, r2, r8
 801c6e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c6e4:	fa1f f888 	uxth.w	r8, r8
 801c6e8:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c6ec:	f108 0201 	add.w	r2, r8, #1
 801c6f0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c6f4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c6f8:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c6fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c6fe:	3603      	adds	r6, #3
 801c700:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c704:	4414      	add	r4, r2
 801c706:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c708:	4410      	add	r0, r2
 801c70a:	e7ad      	b.n	801c668 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c70c:	f04f 0c00 	mov.w	ip, #0
 801c710:	eba3 020c 	sub.w	r2, r3, ip
 801c714:	2a00      	cmp	r2, #0
 801c716:	dc3d      	bgt.n	801c794 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801c718:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c71c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c720:	441d      	add	r5, r3
 801c722:	2900      	cmp	r1, #0
 801c724:	f340 8097 	ble.w	801c856 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c728:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c72c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c72e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c732:	3901      	subs	r1, #1
 801c734:	eeb0 6a62 	vmov.f32	s12, s5
 801c738:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c73c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c740:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c744:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c748:	eeb0 6a43 	vmov.f32	s12, s6
 801c74c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c750:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c754:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c758:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c75c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c760:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c764:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c768:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c76c:	ee12 2a90 	vmov	r2, s5
 801c770:	eef0 2a47 	vmov.f32	s5, s14
 801c774:	fb92 f3f3 	sdiv	r3, r2, r3
 801c778:	ee13 2a10 	vmov	r2, s6
 801c77c:	9311      	str	r3, [sp, #68]	; 0x44
 801c77e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c780:	eeb0 3a67 	vmov.f32	s6, s15
 801c784:	fb92 f3f3 	sdiv	r3, r2, r3
 801c788:	9a03      	ldr	r2, [sp, #12]
 801c78a:	9312      	str	r3, [sp, #72]	; 0x48
 801c78c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c78e:	bf08      	it	eq
 801c790:	4613      	moveq	r3, r2
 801c792:	e738      	b.n	801c606 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c794:	1426      	asrs	r6, r4, #16
 801c796:	d448      	bmi.n	801c82a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c798:	4576      	cmp	r6, lr
 801c79a:	da46      	bge.n	801c82a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c79c:	1402      	asrs	r2, r0, #16
 801c79e:	d444      	bmi.n	801c82a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c7a0:	9f01      	ldr	r7, [sp, #4]
 801c7a2:	42ba      	cmp	r2, r7
 801c7a4:	da41      	bge.n	801c82a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c7a6:	fb0e 6202 	mla	r2, lr, r2, r6
 801c7aa:	9e02      	ldr	r6, [sp, #8]
 801c7ac:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c7b0:	0e3a      	lsrs	r2, r7, #24
 801c7b2:	d03a      	beq.n	801c82a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c7b4:	2aff      	cmp	r2, #255	; 0xff
 801c7b6:	b2d6      	uxtb	r6, r2
 801c7b8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c7bc:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c7c0:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801c7c4:	b2ff      	uxtb	r7, r7
 801c7c6:	d037      	beq.n	801c838 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801c7c8:	fa1f f986 	uxth.w	r9, r6
 801c7cc:	4462      	add	r2, ip
 801c7ce:	43f6      	mvns	r6, r6
 801c7d0:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c7d4:	fb17 f709 	smulbb	r7, r7, r9
 801c7d8:	fb1a fa09 	smulbb	sl, sl, r9
 801c7dc:	b2f6      	uxtb	r6, r6
 801c7de:	fb1b f909 	smulbb	r9, fp, r9
 801c7e2:	fb08 7706 	mla	r7, r8, r6, r7
 801c7e6:	b2bf      	uxth	r7, r7
 801c7e8:	f107 0801 	add.w	r8, r7, #1
 801c7ec:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c7f0:	123f      	asrs	r7, r7, #8
 801c7f2:	54af      	strb	r7, [r5, r2]
 801c7f4:	442a      	add	r2, r5
 801c7f6:	7857      	ldrb	r7, [r2, #1]
 801c7f8:	fb07 aa06 	mla	sl, r7, r6, sl
 801c7fc:	fa1f fa8a 	uxth.w	sl, sl
 801c800:	f10a 0701 	add.w	r7, sl, #1
 801c804:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c808:	7897      	ldrb	r7, [r2, #2]
 801c80a:	fb07 9906 	mla	r9, r7, r6, r9
 801c80e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c812:	fa1f f989 	uxth.w	r9, r9
 801c816:	f882 a001 	strb.w	sl, [r2, #1]
 801c81a:	f109 0601 	add.w	r6, r9, #1
 801c81e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c822:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c826:	f882 9002 	strb.w	r9, [r2, #2]
 801c82a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c82c:	f10c 0c01 	add.w	ip, ip, #1
 801c830:	4414      	add	r4, r2
 801c832:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c834:	4410      	add	r0, r2
 801c836:	e76b      	b.n	801c710 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801c838:	4462      	add	r2, ip
 801c83a:	54af      	strb	r7, [r5, r2]
 801c83c:	442a      	add	r2, r5
 801c83e:	f882 a001 	strb.w	sl, [r2, #1]
 801c842:	f882 b002 	strb.w	fp, [r2, #2]
 801c846:	e7f0      	b.n	801c82a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c848:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c84c:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c850:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c854:	e752      	b.n	801c6fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c856:	b005      	add	sp, #20
 801c858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c85c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c860:	b087      	sub	sp, #28
 801c862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c866:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c868:	9204      	str	r2, [sp, #16]
 801c86a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c86e:	6860      	ldr	r0, [r4, #4]
 801c870:	9205      	str	r2, [sp, #20]
 801c872:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c876:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c87a:	9101      	str	r1, [sp, #4]
 801c87c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c880:	fb00 2505 	mla	r5, r0, r5, r2
 801c884:	6822      	ldr	r2, [r4, #0]
 801c886:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c88a:	4415      	add	r5, r2
 801c88c:	f10e 0201 	add.w	r2, lr, #1
 801c890:	f022 0201 	bic.w	r2, r2, #1
 801c894:	9202      	str	r2, [sp, #8]
 801c896:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c898:	6812      	ldr	r2, [r2, #0]
 801c89a:	9203      	str	r2, [sp, #12]
 801c89c:	9a01      	ldr	r2, [sp, #4]
 801c89e:	2a00      	cmp	r2, #0
 801c8a0:	dc03      	bgt.n	801c8aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c8a2:	9a04      	ldr	r2, [sp, #16]
 801c8a4:	2a00      	cmp	r2, #0
 801c8a6:	f340 8132 	ble.w	801cb0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c8aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c8ac:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c8b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c8b2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	dd0e      	ble.n	801c8d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c8ba:	1422      	asrs	r2, r4, #16
 801c8bc:	d405      	bmi.n	801c8ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c8be:	4596      	cmp	lr, r2
 801c8c0:	dd03      	ble.n	801c8ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c8c2:	1402      	asrs	r2, r0, #16
 801c8c4:	d401      	bmi.n	801c8ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c8c6:	4542      	cmp	r2, r8
 801c8c8:	db07      	blt.n	801c8da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801c8ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c8cc:	3b01      	subs	r3, #1
 801c8ce:	3503      	adds	r5, #3
 801c8d0:	4414      	add	r4, r2
 801c8d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c8d4:	4410      	add	r0, r2
 801c8d6:	e7ee      	b.n	801c8b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801c8d8:	d010      	beq.n	801c8fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801c8da:	1e5a      	subs	r2, r3, #1
 801c8dc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c8de:	fb06 4602 	mla	r6, r6, r2, r4
 801c8e2:	1436      	asrs	r6, r6, #16
 801c8e4:	d546      	bpl.n	801c974 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801c8e6:	4699      	mov	r9, r3
 801c8e8:	462e      	mov	r6, r5
 801c8ea:	f1b9 0f00 	cmp.w	r9, #0
 801c8ee:	f300 80ac 	bgt.w	801ca4a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801c8f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c8f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c8fa:	441d      	add	r5, r3
 801c8fc:	9b01      	ldr	r3, [sp, #4]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	f340 8105 	ble.w	801cb0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c904:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c908:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c90a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c90e:	eeb0 6a62 	vmov.f32	s12, s5
 801c912:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c916:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c91a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c91e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c922:	eeb0 6a43 	vmov.f32	s12, s6
 801c926:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c92a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c92e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c932:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c936:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c93a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c93e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c942:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c946:	ee12 2a90 	vmov	r2, s5
 801c94a:	eef0 2a47 	vmov.f32	s5, s14
 801c94e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c952:	ee13 2a10 	vmov	r2, s6
 801c956:	9313      	str	r3, [sp, #76]	; 0x4c
 801c958:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c95a:	eeb0 3a67 	vmov.f32	s6, s15
 801c95e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c962:	9314      	str	r3, [sp, #80]	; 0x50
 801c964:	9b01      	ldr	r3, [sp, #4]
 801c966:	9a04      	ldr	r2, [sp, #16]
 801c968:	3b01      	subs	r3, #1
 801c96a:	9301      	str	r3, [sp, #4]
 801c96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c96e:	bf08      	it	eq
 801c970:	4613      	moveq	r3, r2
 801c972:	e793      	b.n	801c89c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801c974:	45b6      	cmp	lr, r6
 801c976:	ddb6      	ble.n	801c8e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c978:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c97a:	fb06 0202 	mla	r2, r6, r2, r0
 801c97e:	1412      	asrs	r2, r2, #16
 801c980:	d4b1      	bmi.n	801c8e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c982:	4542      	cmp	r2, r8
 801c984:	daaf      	bge.n	801c8e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c986:	1cee      	adds	r6, r5, #3
 801c988:	4699      	mov	r9, r3
 801c98a:	f1b9 0f00 	cmp.w	r9, #0
 801c98e:	ddb0      	ble.n	801c8f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c990:	1422      	asrs	r2, r4, #16
 801c992:	9902      	ldr	r1, [sp, #8]
 801c994:	1407      	asrs	r7, r0, #16
 801c996:	fb01 2707 	mla	r7, r1, r7, r2
 801c99a:	9903      	ldr	r1, [sp, #12]
 801c99c:	087a      	lsrs	r2, r7, #1
 801c99e:	5c8a      	ldrb	r2, [r1, r2]
 801c9a0:	07f9      	lsls	r1, r7, #31
 801c9a2:	bf54      	ite	pl
 801c9a4:	f002 020f 	andpl.w	r2, r2, #15
 801c9a8:	1112      	asrmi	r2, r2, #4
 801c9aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c9ae:	b2d2      	uxtb	r2, r2
 801c9b0:	2a00      	cmp	r2, #0
 801c9b2:	d042      	beq.n	801ca3a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801c9b4:	4957      	ldr	r1, [pc, #348]	; (801cb14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801c9b6:	680f      	ldr	r7, [r1, #0]
 801c9b8:	9905      	ldr	r1, [sp, #20]
 801c9ba:	fa5f fb87 	uxtb.w	fp, r7
 801c9be:	434a      	muls	r2, r1
 801c9c0:	f102 0c01 	add.w	ip, r2, #1
 801c9c4:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801c9c8:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801c9cc:	1212      	asrs	r2, r2, #8
 801c9ce:	fa1f fa82 	uxth.w	sl, r2
 801c9d2:	43d2      	mvns	r2, r2
 801c9d4:	fb1b fb0a 	smulbb	fp, fp, sl
 801c9d8:	b2d2      	uxtb	r2, r2
 801c9da:	fb0c bc02 	mla	ip, ip, r2, fp
 801c9de:	fa1f fc8c 	uxth.w	ip, ip
 801c9e2:	f10c 0b01 	add.w	fp, ip, #1
 801c9e6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c9ea:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c9ee:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c9f2:	fb1b fb0a 	smulbb	fp, fp, sl
 801c9f6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c9fa:	fb17 fa0a 	smulbb	sl, r7, sl
 801c9fe:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ca02:	f806 cc03 	strb.w	ip, [r6, #-3]
 801ca06:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801ca0a:	fb07 aa02 	mla	sl, r7, r2, sl
 801ca0e:	fb0c bc02 	mla	ip, ip, r2, fp
 801ca12:	fa1f fa8a 	uxth.w	sl, sl
 801ca16:	fa1f fc8c 	uxth.w	ip, ip
 801ca1a:	f10a 0701 	add.w	r7, sl, #1
 801ca1e:	f10c 0b01 	add.w	fp, ip, #1
 801ca22:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ca26:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ca2a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ca2e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ca32:	f806 ac01 	strb.w	sl, [r6, #-1]
 801ca36:	f806 cc02 	strb.w	ip, [r6, #-2]
 801ca3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ca3c:	3603      	adds	r6, #3
 801ca3e:	f109 39ff 	add.w	r9, r9, #4294967295
 801ca42:	4414      	add	r4, r2
 801ca44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ca46:	4410      	add	r0, r2
 801ca48:	e79f      	b.n	801c98a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801ca4a:	1422      	asrs	r2, r4, #16
 801ca4c:	d457      	bmi.n	801cafe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ca4e:	4596      	cmp	lr, r2
 801ca50:	dd55      	ble.n	801cafe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ca52:	1407      	asrs	r7, r0, #16
 801ca54:	d453      	bmi.n	801cafe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ca56:	4547      	cmp	r7, r8
 801ca58:	da51      	bge.n	801cafe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ca5a:	9902      	ldr	r1, [sp, #8]
 801ca5c:	fb07 2701 	mla	r7, r7, r1, r2
 801ca60:	9903      	ldr	r1, [sp, #12]
 801ca62:	087a      	lsrs	r2, r7, #1
 801ca64:	07ff      	lsls	r7, r7, #31
 801ca66:	5c8a      	ldrb	r2, [r1, r2]
 801ca68:	bf54      	ite	pl
 801ca6a:	f002 020f 	andpl.w	r2, r2, #15
 801ca6e:	1112      	asrmi	r2, r2, #4
 801ca70:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ca74:	b2d2      	uxtb	r2, r2
 801ca76:	2a00      	cmp	r2, #0
 801ca78:	d041      	beq.n	801cafe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ca7a:	4926      	ldr	r1, [pc, #152]	; (801cb14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801ca7c:	680f      	ldr	r7, [r1, #0]
 801ca7e:	9905      	ldr	r1, [sp, #20]
 801ca80:	fa5f fb87 	uxtb.w	fp, r7
 801ca84:	434a      	muls	r2, r1
 801ca86:	f102 0c01 	add.w	ip, r2, #1
 801ca8a:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801ca8e:	f896 c000 	ldrb.w	ip, [r6]
 801ca92:	1212      	asrs	r2, r2, #8
 801ca94:	fa1f fa82 	uxth.w	sl, r2
 801ca98:	43d2      	mvns	r2, r2
 801ca9a:	fb1b fb0a 	smulbb	fp, fp, sl
 801ca9e:	b2d2      	uxtb	r2, r2
 801caa0:	fb0c bc02 	mla	ip, ip, r2, fp
 801caa4:	fa1f fc8c 	uxth.w	ip, ip
 801caa8:	f10c 0b01 	add.w	fp, ip, #1
 801caac:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cab0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801cab4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801cab8:	fb1b fb0a 	smulbb	fp, fp, sl
 801cabc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cac0:	fb17 fa0a 	smulbb	sl, r7, sl
 801cac4:	78b7      	ldrb	r7, [r6, #2]
 801cac6:	f886 c000 	strb.w	ip, [r6]
 801caca:	f896 c001 	ldrb.w	ip, [r6, #1]
 801cace:	fb07 aa02 	mla	sl, r7, r2, sl
 801cad2:	fb0c bc02 	mla	ip, ip, r2, fp
 801cad6:	fa1f fa8a 	uxth.w	sl, sl
 801cada:	fa1f fc8c 	uxth.w	ip, ip
 801cade:	f10a 0701 	add.w	r7, sl, #1
 801cae2:	f10c 0b01 	add.w	fp, ip, #1
 801cae6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801caea:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801caee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801caf2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801caf6:	f886 a002 	strb.w	sl, [r6, #2]
 801cafa:	f886 c001 	strb.w	ip, [r6, #1]
 801cafe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cb00:	3603      	adds	r6, #3
 801cb02:	f109 39ff 	add.w	r9, r9, #4294967295
 801cb06:	4414      	add	r4, r2
 801cb08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cb0a:	4410      	add	r0, r2
 801cb0c:	e6ed      	b.n	801c8ea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801cb0e:	b007      	add	sp, #28
 801cb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb14:	2000bcf0 	.word	0x2000bcf0

0801cb18 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb1c:	b087      	sub	sp, #28
 801cb1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cb22:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cb24:	9205      	str	r2, [sp, #20]
 801cb26:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801cb2a:	6860      	ldr	r0, [r4, #4]
 801cb2c:	9202      	str	r2, [sp, #8]
 801cb2e:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801cb32:	9101      	str	r1, [sp, #4]
 801cb34:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801cb38:	fb00 2606 	mla	r6, r0, r6, r2
 801cb3c:	6822      	ldr	r2, [r4, #0]
 801cb3e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cb42:	4416      	add	r6, r2
 801cb44:	f108 0201 	add.w	r2, r8, #1
 801cb48:	f022 0201 	bic.w	r2, r2, #1
 801cb4c:	9203      	str	r2, [sp, #12]
 801cb4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801cb50:	6812      	ldr	r2, [r2, #0]
 801cb52:	9204      	str	r2, [sp, #16]
 801cb54:	9a01      	ldr	r2, [sp, #4]
 801cb56:	2a00      	cmp	r2, #0
 801cb58:	dc03      	bgt.n	801cb62 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801cb5a:	9a05      	ldr	r2, [sp, #20]
 801cb5c:	2a00      	cmp	r2, #0
 801cb5e:	f340 813a 	ble.w	801cdd6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801cb62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cb64:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801cb68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cb6a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	dd0f      	ble.n	801cb92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801cb72:	142a      	asrs	r2, r5, #16
 801cb74:	d406      	bmi.n	801cb84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cb76:	4590      	cmp	r8, r2
 801cb78:	dd04      	ble.n	801cb84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cb7a:	1422      	asrs	r2, r4, #16
 801cb7c:	d402      	bmi.n	801cb84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cb7e:	9802      	ldr	r0, [sp, #8]
 801cb80:	4282      	cmp	r2, r0
 801cb82:	db07      	blt.n	801cb94 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801cb84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cb86:	3b01      	subs	r3, #1
 801cb88:	3603      	adds	r6, #3
 801cb8a:	4415      	add	r5, r2
 801cb8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cb8e:	4414      	add	r4, r2
 801cb90:	e7ed      	b.n	801cb6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801cb92:	d073      	beq.n	801cc7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801cb94:	1e5a      	subs	r2, r3, #1
 801cb96:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cb98:	fb00 5002 	mla	r0, r0, r2, r5
 801cb9c:	1400      	asrs	r0, r0, #16
 801cb9e:	d464      	bmi.n	801cc6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cba0:	4580      	cmp	r8, r0
 801cba2:	dd62      	ble.n	801cc6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cba4:	9814      	ldr	r0, [sp, #80]	; 0x50
 801cba6:	fb00 4202 	mla	r2, r0, r2, r4
 801cbaa:	1412      	asrs	r2, r2, #16
 801cbac:	d45d      	bmi.n	801cc6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cbae:	9802      	ldr	r0, [sp, #8]
 801cbb0:	4282      	cmp	r2, r0
 801cbb2:	da5a      	bge.n	801cc6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cbb4:	1cf0      	adds	r0, r6, #3
 801cbb6:	469a      	mov	sl, r3
 801cbb8:	f1ba 0f00 	cmp.w	sl, #0
 801cbbc:	dd59      	ble.n	801cc72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801cbbe:	142a      	asrs	r2, r5, #16
 801cbc0:	9903      	ldr	r1, [sp, #12]
 801cbc2:	1427      	asrs	r7, r4, #16
 801cbc4:	fb01 2707 	mla	r7, r1, r7, r2
 801cbc8:	9904      	ldr	r1, [sp, #16]
 801cbca:	087a      	lsrs	r2, r7, #1
 801cbcc:	5c8a      	ldrb	r2, [r1, r2]
 801cbce:	07f9      	lsls	r1, r7, #31
 801cbd0:	bf54      	ite	pl
 801cbd2:	f002 020f 	andpl.w	r2, r2, #15
 801cbd6:	1112      	asrmi	r2, r2, #4
 801cbd8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cbdc:	b2d2      	uxtb	r2, r2
 801cbde:	2a00      	cmp	r2, #0
 801cbe0:	d03b      	beq.n	801cc5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cbe2:	497e      	ldr	r1, [pc, #504]	; (801cddc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801cbe4:	2aff      	cmp	r2, #255	; 0xff
 801cbe6:	680f      	ldr	r7, [r1, #0]
 801cbe8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cbec:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801cbf0:	b2ff      	uxtb	r7, r7
 801cbf2:	f000 80e9 	beq.w	801cdc8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801cbf6:	fa1f fe82 	uxth.w	lr, r2
 801cbfa:	43d2      	mvns	r2, r2
 801cbfc:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801cc00:	fb17 f70e 	smulbb	r7, r7, lr
 801cc04:	b2d2      	uxtb	r2, r2
 801cc06:	fb19 f90e 	smulbb	r9, r9, lr
 801cc0a:	fb0c 7702 	mla	r7, ip, r2, r7
 801cc0e:	fb1b fe0e 	smulbb	lr, fp, lr
 801cc12:	b2bf      	uxth	r7, r7
 801cc14:	f107 0c01 	add.w	ip, r7, #1
 801cc18:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801cc1c:	123f      	asrs	r7, r7, #8
 801cc1e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cc22:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801cc26:	fb07 9902 	mla	r9, r7, r2, r9
 801cc2a:	fa1f f989 	uxth.w	r9, r9
 801cc2e:	f109 0701 	add.w	r7, r9, #1
 801cc32:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801cc36:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801cc3a:	fb07 ee02 	mla	lr, r7, r2, lr
 801cc3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc42:	fa1f fe8e 	uxth.w	lr, lr
 801cc46:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cc4a:	f10e 0201 	add.w	r2, lr, #1
 801cc4e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801cc52:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cc56:	f800 ec01 	strb.w	lr, [r0, #-1]
 801cc5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc5c:	3003      	adds	r0, #3
 801cc5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cc62:	4415      	add	r5, r2
 801cc64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cc66:	4414      	add	r4, r2
 801cc68:	e7a6      	b.n	801cbb8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801cc6a:	2700      	movs	r7, #0
 801cc6c:	1bda      	subs	r2, r3, r7
 801cc6e:	2a00      	cmp	r2, #0
 801cc70:	dc40      	bgt.n	801ccf4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801cc72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc7a:	441e      	add	r6, r3
 801cc7c:	9b01      	ldr	r3, [sp, #4]
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	f340 80a9 	ble.w	801cdd6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801cc84:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cc8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc8e:	eeb0 6a62 	vmov.f32	s12, s5
 801cc92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cc96:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc9e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801cca2:	eeb0 6a43 	vmov.f32	s12, s6
 801cca6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ccaa:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ccae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ccb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ccb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ccba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ccbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ccc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ccc6:	ee12 2a90 	vmov	r2, s5
 801ccca:	eef0 2a47 	vmov.f32	s5, s14
 801ccce:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccd2:	ee13 2a10 	vmov	r2, s6
 801ccd6:	9313      	str	r3, [sp, #76]	; 0x4c
 801ccd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ccda:	eeb0 3a67 	vmov.f32	s6, s15
 801ccde:	fb92 f3f3 	sdiv	r3, r2, r3
 801cce2:	9314      	str	r3, [sp, #80]	; 0x50
 801cce4:	9b01      	ldr	r3, [sp, #4]
 801cce6:	9a05      	ldr	r2, [sp, #20]
 801cce8:	3b01      	subs	r3, #1
 801ccea:	9301      	str	r3, [sp, #4]
 801ccec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ccee:	bf08      	it	eq
 801ccf0:	4613      	moveq	r3, r2
 801ccf2:	e72f      	b.n	801cb54 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801ccf4:	142a      	asrs	r2, r5, #16
 801ccf6:	d458      	bmi.n	801cdaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ccf8:	4590      	cmp	r8, r2
 801ccfa:	dd56      	ble.n	801cdaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ccfc:	1420      	asrs	r0, r4, #16
 801ccfe:	d454      	bmi.n	801cdaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cd00:	9902      	ldr	r1, [sp, #8]
 801cd02:	4288      	cmp	r0, r1
 801cd04:	da51      	bge.n	801cdaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cd06:	9903      	ldr	r1, [sp, #12]
 801cd08:	fb00 2001 	mla	r0, r0, r1, r2
 801cd0c:	9904      	ldr	r1, [sp, #16]
 801cd0e:	0842      	lsrs	r2, r0, #1
 801cd10:	07c0      	lsls	r0, r0, #31
 801cd12:	5c8a      	ldrb	r2, [r1, r2]
 801cd14:	bf54      	ite	pl
 801cd16:	f002 020f 	andpl.w	r2, r2, #15
 801cd1a:	1112      	asrmi	r2, r2, #4
 801cd1c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cd20:	b2d2      	uxtb	r2, r2
 801cd22:	2a00      	cmp	r2, #0
 801cd24:	d041      	beq.n	801cdaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cd26:	492d      	ldr	r1, [pc, #180]	; (801cddc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801cd28:	2aff      	cmp	r2, #255	; 0xff
 801cd2a:	6808      	ldr	r0, [r1, #0]
 801cd2c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801cd30:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801cd34:	fa5f fc80 	uxtb.w	ip, r0
 801cd38:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801cd3c:	d03b      	beq.n	801cdb6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801cd3e:	fa1f f982 	uxth.w	r9, r2
 801cd42:	4438      	add	r0, r7
 801cd44:	43d2      	mvns	r2, r2
 801cd46:	f816 e000 	ldrb.w	lr, [r6, r0]
 801cd4a:	fb1c fc09 	smulbb	ip, ip, r9
 801cd4e:	fb1a fa09 	smulbb	sl, sl, r9
 801cd52:	b2d2      	uxtb	r2, r2
 801cd54:	fb1b f909 	smulbb	r9, fp, r9
 801cd58:	fb0e cc02 	mla	ip, lr, r2, ip
 801cd5c:	fa1f fc8c 	uxth.w	ip, ip
 801cd60:	f10c 0e01 	add.w	lr, ip, #1
 801cd64:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801cd68:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cd6c:	f806 c000 	strb.w	ip, [r6, r0]
 801cd70:	4430      	add	r0, r6
 801cd72:	f890 c001 	ldrb.w	ip, [r0, #1]
 801cd76:	fb0c aa02 	mla	sl, ip, r2, sl
 801cd7a:	fa1f fa8a 	uxth.w	sl, sl
 801cd7e:	f10a 0c01 	add.w	ip, sl, #1
 801cd82:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cd86:	f890 c002 	ldrb.w	ip, [r0, #2]
 801cd8a:	fb0c 9902 	mla	r9, ip, r2, r9
 801cd8e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cd92:	fa1f f989 	uxth.w	r9, r9
 801cd96:	f880 a001 	strb.w	sl, [r0, #1]
 801cd9a:	f109 0201 	add.w	r2, r9, #1
 801cd9e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801cda2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cda6:	f880 9002 	strb.w	r9, [r0, #2]
 801cdaa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cdac:	3701      	adds	r7, #1
 801cdae:	4415      	add	r5, r2
 801cdb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cdb2:	4414      	add	r4, r2
 801cdb4:	e75a      	b.n	801cc6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801cdb6:	4438      	add	r0, r7
 801cdb8:	f806 c000 	strb.w	ip, [r6, r0]
 801cdbc:	4430      	add	r0, r6
 801cdbe:	f880 a001 	strb.w	sl, [r0, #1]
 801cdc2:	f880 b002 	strb.w	fp, [r0, #2]
 801cdc6:	e7f0      	b.n	801cdaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cdc8:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cdcc:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cdd0:	f800 bc01 	strb.w	fp, [r0, #-1]
 801cdd4:	e741      	b.n	801cc5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cdd6:	b007      	add	sp, #28
 801cdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cddc:	2000bcf0 	.word	0x2000bcf0

0801cde0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801cde0:	4770      	bx	lr

0801cde2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801cde2:	4770      	bx	lr

0801cde4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801cde4:	4770      	bx	lr

0801cde6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801cde6:	4770      	bx	lr

0801cde8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cde8:	4770      	bx	lr

0801cdea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cdea:	4770      	bx	lr

0801cdec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cdec:	4770      	bx	lr

0801cdee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cdee:	4770      	bx	lr

0801cdf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cdf0:	4770      	bx	lr

0801cdf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cdf2:	4770      	bx	lr

0801cdf4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cdf4:	4770      	bx	lr

0801cdf6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cdf6:	4770      	bx	lr

0801cdf8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cdf8:	4770      	bx	lr

0801cdfa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cdfa:	4770      	bx	lr

0801cdfc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cdfc:	4770      	bx	lr

0801cdfe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cdfe:	4770      	bx	lr

0801ce00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ce00:	4770      	bx	lr

0801ce02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ce02:	4770      	bx	lr

0801ce04 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ce04:	4770      	bx	lr

0801ce06 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ce06:	4770      	bx	lr

0801ce08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ce08:	2bff      	cmp	r3, #255	; 0xff
 801ce0a:	b508      	push	{r3, lr}
 801ce0c:	d04f      	beq.n	801ceae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ce0e:	2a2c      	cmp	r2, #44	; 0x2c
 801ce10:	d032      	beq.n	801ce78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801ce12:	d80f      	bhi.n	801ce34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801ce14:	2a08      	cmp	r2, #8
 801ce16:	d046      	beq.n	801cea6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ce18:	d805      	bhi.n	801ce26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801ce1a:	2a04      	cmp	r2, #4
 801ce1c:	d041      	beq.n	801cea2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ce1e:	2a05      	cmp	r2, #5
 801ce20:	d03d      	beq.n	801ce9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ce22:	2000      	movs	r0, #0
 801ce24:	e027      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce26:	2a0a      	cmp	r2, #10
 801ce28:	d03d      	beq.n	801cea6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ce2a:	d301      	bcc.n	801ce30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ce2c:	2a0b      	cmp	r2, #11
 801ce2e:	d1f8      	bne.n	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce30:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801ce32:	e020      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce34:	2a30      	cmp	r2, #48	; 0x30
 801ce36:	d038      	beq.n	801ceaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ce38:	d808      	bhi.n	801ce4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801ce3a:	2a2e      	cmp	r2, #46	; 0x2e
 801ce3c:	684b      	ldr	r3, [r1, #4]
 801ce3e:	d029      	beq.n	801ce94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801ce40:	d90b      	bls.n	801ce5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801ce42:	781b      	ldrb	r3, [r3, #0]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d1ec      	bne.n	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce48:	6a00      	ldr	r0, [r0, #32]
 801ce4a:	e014      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce4c:	2a32      	cmp	r2, #50	; 0x32
 801ce4e:	d02c      	beq.n	801ceaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ce50:	d301      	bcc.n	801ce56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801ce52:	2a33      	cmp	r2, #51	; 0x33
 801ce54:	d1e5      	bne.n	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce56:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801ce58:	e00d      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce5a:	781b      	ldrb	r3, [r3, #0]
 801ce5c:	2b01      	cmp	r3, #1
 801ce5e:	d009      	beq.n	801ce74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801ce60:	d3f2      	bcc.n	801ce48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801ce62:	2b02      	cmp	r3, #2
 801ce64:	d1dd      	bne.n	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce66:	4b39      	ldr	r3, [pc, #228]	; (801cf4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ce68:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801ce6c:	4a38      	ldr	r2, [pc, #224]	; (801cf50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ce6e:	4839      	ldr	r0, [pc, #228]	; (801cf54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801ce70:	f007 ff3e 	bl	8024cf0 <__assert_func>
 801ce74:	6900      	ldr	r0, [r0, #16]
 801ce76:	bd08      	pop	{r3, pc}
 801ce78:	684b      	ldr	r3, [r1, #4]
 801ce7a:	781b      	ldrb	r3, [r3, #0]
 801ce7c:	2b01      	cmp	r3, #1
 801ce7e:	d007      	beq.n	801ce90 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801ce80:	d30b      	bcc.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ce82:	2b02      	cmp	r3, #2
 801ce84:	d1cd      	bne.n	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce86:	4b31      	ldr	r3, [pc, #196]	; (801cf4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ce88:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801ce8c:	4a30      	ldr	r2, [pc, #192]	; (801cf50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ce8e:	e7ee      	b.n	801ce6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ce90:	6880      	ldr	r0, [r0, #8]
 801ce92:	e7f0      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce94:	781b      	ldrb	r3, [r3, #0]
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d1c3      	bne.n	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce9a:	6980      	ldr	r0, [r0, #24]
 801ce9c:	e7eb      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce9e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801cea0:	e7e9      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cea2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801cea4:	e7e7      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cea6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801cea8:	e7e5      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ceaa:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801ceac:	e7e3      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ceae:	2a2c      	cmp	r2, #44	; 0x2c
 801ceb0:	d030      	beq.n	801cf14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801ceb2:	d80f      	bhi.n	801ced4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801ceb4:	2a08      	cmp	r2, #8
 801ceb6:	d044      	beq.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ceb8:	d805      	bhi.n	801cec6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801ceba:	2a04      	cmp	r2, #4
 801cebc:	d03f      	beq.n	801cf3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801cebe:	2a05      	cmp	r2, #5
 801cec0:	d1af      	bne.n	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cec2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801cec4:	e7d7      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cec6:	2a0a      	cmp	r2, #10
 801cec8:	d03b      	beq.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ceca:	d301      	bcc.n	801ced0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801cecc:	2a0b      	cmp	r2, #11
 801cece:	d1a8      	bne.n	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ced0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801ced2:	e7d0      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ced4:	2a30      	cmp	r2, #48	; 0x30
 801ced6:	d036      	beq.n	801cf46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ced8:	d808      	bhi.n	801ceec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801ceda:	2a2e      	cmp	r2, #46	; 0x2e
 801cedc:	684b      	ldr	r3, [r1, #4]
 801cede:	d028      	beq.n	801cf32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801cee0:	d90b      	bls.n	801cefa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801cee2:	781b      	ldrb	r3, [r3, #0]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d19c      	bne.n	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cee8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801ceea:	e7c4      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ceec:	2a32      	cmp	r2, #50	; 0x32
 801ceee:	d02a      	beq.n	801cf46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cef0:	d301      	bcc.n	801cef6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801cef2:	2a33      	cmp	r2, #51	; 0x33
 801cef4:	d195      	bne.n	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cef6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801cef8:	e7bd      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cefa:	781b      	ldrb	r3, [r3, #0]
 801cefc:	2b01      	cmp	r3, #1
 801cefe:	d007      	beq.n	801cf10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801cf00:	d3f2      	bcc.n	801cee8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801cf02:	2b02      	cmp	r3, #2
 801cf04:	d18d      	bne.n	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf06:	4b11      	ldr	r3, [pc, #68]	; (801cf4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cf08:	f240 31e1 	movw	r1, #993	; 0x3e1
 801cf0c:	4a10      	ldr	r2, [pc, #64]	; (801cf50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cf0e:	e7ae      	b.n	801ce6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801cf10:	6940      	ldr	r0, [r0, #20]
 801cf12:	e7b0      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf14:	684b      	ldr	r3, [r1, #4]
 801cf16:	781b      	ldrb	r3, [r3, #0]
 801cf18:	2b01      	cmp	r3, #1
 801cf1a:	d008      	beq.n	801cf2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801cf1c:	d30d      	bcc.n	801cf3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801cf1e:	2b02      	cmp	r3, #2
 801cf20:	f47f af7f 	bne.w	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf24:	4b09      	ldr	r3, [pc, #36]	; (801cf4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cf26:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801cf2a:	4a09      	ldr	r2, [pc, #36]	; (801cf50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cf2c:	e79f      	b.n	801ce6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801cf2e:	68c0      	ldr	r0, [r0, #12]
 801cf30:	e7a1      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf32:	781b      	ldrb	r3, [r3, #0]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	f47f af74 	bne.w	801ce22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf3a:	69c0      	ldr	r0, [r0, #28]
 801cf3c:	e79b      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf3e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801cf40:	e799      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf42:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801cf44:	e797      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf46:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801cf48:	e795      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf4a:	bf00      	nop
 801cf4c:	080294d3 	.word	0x080294d3
 801cf50:	08029c87 	.word	0x08029c87
 801cf54:	0802951f 	.word	0x0802951f

0801cf58 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801cf58:	b508      	push	{r3, lr}
 801cf5a:	4b06      	ldr	r3, [pc, #24]	; (801cf74 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801cf5c:	8818      	ldrh	r0, [r3, #0]
 801cf5e:	b928      	cbnz	r0, 801cf6c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801cf60:	4b05      	ldr	r3, [pc, #20]	; (801cf78 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801cf62:	21d7      	movs	r1, #215	; 0xd7
 801cf64:	4a05      	ldr	r2, [pc, #20]	; (801cf7c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801cf66:	4806      	ldr	r0, [pc, #24]	; (801cf80 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801cf68:	f007 fec2 	bl	8024cf0 <__assert_func>
 801cf6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cf70:	b280      	uxth	r0, r0
 801cf72:	bd08      	pop	{r3, pc}
 801cf74:	2000bcc2 	.word	0x2000bcc2
 801cf78:	0802976e 	.word	0x0802976e
 801cf7c:	08029c4c 	.word	0x08029c4c
 801cf80:	080297b0 	.word	0x080297b0

0801cf84 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801cf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf88:	4616      	mov	r6, r2
 801cf8a:	b087      	sub	sp, #28
 801cf8c:	461f      	mov	r7, r3
 801cf8e:	b33b      	cbz	r3, 801cfe0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cf90:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cf94:	b323      	cbz	r3, 801cfe0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cf96:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cf9a:	b30b      	cbz	r3, 801cfe0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cf9c:	6808      	ldr	r0, [r1, #0]
 801cf9e:	ab04      	add	r3, sp, #16
 801cfa0:	6849      	ldr	r1, [r1, #4]
 801cfa2:	4c5a      	ldr	r4, [pc, #360]	; (801d10c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801cfa4:	c303      	stmia	r3!, {r0, r1}
 801cfa6:	a804      	add	r0, sp, #16
 801cfa8:	f7fb fd6e 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cfac:	6820      	ldr	r0, [r4, #0]
 801cfae:	6803      	ldr	r3, [r0, #0]
 801cfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfb2:	4798      	blx	r3
 801cfb4:	2fff      	cmp	r7, #255	; 0xff
 801cfb6:	4623      	mov	r3, r4
 801cfb8:	d015      	beq.n	801cfe6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cfba:	f010 0f08 	tst.w	r0, #8
 801cfbe:	d015      	beq.n	801cfec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801cfc0:	6818      	ldr	r0, [r3, #0]
 801cfc2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801cfc6:	6801      	ldr	r1, [r0, #0]
 801cfc8:	9401      	str	r4, [sp, #4]
 801cfca:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801cfce:	9702      	str	r7, [sp, #8]
 801cfd0:	9400      	str	r4, [sp, #0]
 801cfd2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cfd6:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801cfd8:	4631      	mov	r1, r6
 801cfda:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cfde:	47a0      	blx	r4
 801cfe0:	b007      	add	sp, #28
 801cfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfe6:	f010 0f02 	tst.w	r0, #2
 801cfea:	e7e8      	b.n	801cfbe <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801cfec:	6818      	ldr	r0, [r3, #0]
 801cfee:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801cff2:	6803      	ldr	r3, [r0, #0]
 801cff4:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801cff8:	6a1b      	ldr	r3, [r3, #32]
 801cffa:	4798      	blx	r3
 801cffc:	4944      	ldr	r1, [pc, #272]	; (801d110 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801cffe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d002:	2fff      	cmp	r7, #255	; 0xff
 801d004:	f8b1 c000 	ldrh.w	ip, [r1]
 801d008:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801d00c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d010:	4688      	mov	r8, r1
 801d012:	fb0c 2303 	mla	r3, ip, r3, r2
 801d016:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801d01a:	b2f2      	uxtb	r2, r6
 801d01c:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801d020:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d024:	4418      	add	r0, r3
 801d026:	d112      	bne.n	801d04e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801d028:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d02c:	2100      	movs	r1, #0
 801d02e:	42a9      	cmp	r1, r5
 801d030:	da66      	bge.n	801d100 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801d032:	4603      	mov	r3, r0
 801d034:	2700      	movs	r7, #0
 801d036:	42a7      	cmp	r7, r4
 801d038:	f103 0303 	add.w	r3, r3, #3
 801d03c:	da57      	bge.n	801d0ee <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801d03e:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d042:	3701      	adds	r7, #1
 801d044:	f803 ec02 	strb.w	lr, [r3, #-2]
 801d048:	f803 cc01 	strb.w	ip, [r3, #-1]
 801d04c:	e7f3      	b.n	801d036 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801d04e:	b2bb      	uxth	r3, r7
 801d050:	f04f 0800 	mov.w	r8, #0
 801d054:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d058:	fb0c fc03 	mul.w	ip, ip, r3
 801d05c:	fb0e fe03 	mul.w	lr, lr, r3
 801d060:	435a      	muls	r2, r3
 801d062:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801d066:	460f      	mov	r7, r1
 801d068:	b29b      	uxth	r3, r3
 801d06a:	45a8      	cmp	r8, r5
 801d06c:	da48      	bge.n	801d100 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801d06e:	4601      	mov	r1, r0
 801d070:	f04f 0a00 	mov.w	sl, #0
 801d074:	45a2      	cmp	sl, r4
 801d076:	f101 0103 	add.w	r1, r1, #3
 801d07a:	da2f      	bge.n	801d0dc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801d07c:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801d080:	f10a 0a01 	add.w	sl, sl, #1
 801d084:	fb19 f903 	smulbb	r9, r9, r3
 801d088:	4491      	add	r9, r2
 801d08a:	fa1f f989 	uxth.w	r9, r9
 801d08e:	f109 0b01 	add.w	fp, r9, #1
 801d092:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d096:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d09a:	f801 9c03 	strb.w	r9, [r1, #-3]
 801d09e:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801d0a2:	fb19 f903 	smulbb	r9, r9, r3
 801d0a6:	44f1      	add	r9, lr
 801d0a8:	fa1f f989 	uxth.w	r9, r9
 801d0ac:	f109 0b01 	add.w	fp, r9, #1
 801d0b0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d0b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d0b8:	f801 9c02 	strb.w	r9, [r1, #-2]
 801d0bc:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801d0c0:	fb19 f903 	smulbb	r9, r9, r3
 801d0c4:	44e1      	add	r9, ip
 801d0c6:	fa1f f989 	uxth.w	r9, r9
 801d0ca:	f109 0b01 	add.w	fp, r9, #1
 801d0ce:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d0d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d0d6:	f801 9c01 	strb.w	r9, [r1, #-1]
 801d0da:	e7cb      	b.n	801d074 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801d0dc:	8839      	ldrh	r1, [r7, #0]
 801d0de:	f108 0801 	add.w	r8, r8, #1
 801d0e2:	1b09      	subs	r1, r1, r4
 801d0e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d0e8:	4431      	add	r1, r6
 801d0ea:	4408      	add	r0, r1
 801d0ec:	e7bd      	b.n	801d06a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801d0ee:	f8b8 3000 	ldrh.w	r3, [r8]
 801d0f2:	3101      	adds	r1, #1
 801d0f4:	1b1b      	subs	r3, r3, r4
 801d0f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0fa:	4433      	add	r3, r6
 801d0fc:	4418      	add	r0, r3
 801d0fe:	e796      	b.n	801d02e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801d100:	4b02      	ldr	r3, [pc, #8]	; (801d10c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801d102:	6818      	ldr	r0, [r3, #0]
 801d104:	6803      	ldr	r3, [r0, #0]
 801d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d108:	4798      	blx	r3
 801d10a:	e769      	b.n	801cfe0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d10c:	2000bcc8 	.word	0x2000bcc8
 801d110:	2000bcc2 	.word	0x2000bcc2

0801d114 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d118:	b08d      	sub	sp, #52	; 0x34
 801d11a:	460c      	mov	r4, r1
 801d11c:	4617      	mov	r7, r2
 801d11e:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801d122:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801d126:	2e00      	cmp	r6, #0
 801d128:	d04a      	beq.n	801d1c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d12a:	6810      	ldr	r0, [r2, #0]
 801d12c:	ad08      	add	r5, sp, #32
 801d12e:	6851      	ldr	r1, [r2, #4]
 801d130:	c503      	stmia	r5!, {r0, r1}
 801d132:	6818      	ldr	r0, [r3, #0]
 801d134:	ad0a      	add	r5, sp, #40	; 0x28
 801d136:	6859      	ldr	r1, [r3, #4]
 801d138:	c503      	stmia	r5!, {r0, r1}
 801d13a:	a808      	add	r0, sp, #32
 801d13c:	f7fb fca4 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d140:	4639      	mov	r1, r7
 801d142:	a80a      	add	r0, sp, #40	; 0x28
 801d144:	4f59      	ldr	r7, [pc, #356]	; (801d2ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801d146:	f7fb fc87 	bl	8018a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d14a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d14e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d152:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d156:	6838      	ldr	r0, [r7, #0]
 801d158:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d15c:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801d160:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801d164:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d168:	440c      	add	r4, r1
 801d16a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d16e:	440a      	add	r2, r1
 801d170:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d174:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d178:	4413      	add	r3, r2
 801d17a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d17e:	6803      	ldr	r3, [r0, #0]
 801d180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d182:	4798      	blx	r3
 801d184:	2eff      	cmp	r6, #255	; 0xff
 801d186:	f000 8089 	beq.w	801d29c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801d18a:	0743      	lsls	r3, r0, #29
 801d18c:	d405      	bmi.n	801d19a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801d18e:	f1b9 0f00 	cmp.w	r9, #0
 801d192:	d018      	beq.n	801d1c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d194:	f010 0f10 	tst.w	r0, #16
 801d198:	d015      	beq.n	801d1c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d19a:	6838      	ldr	r0, [r7, #0]
 801d19c:	b2ad      	uxth	r5, r5
 801d19e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d1a2:	6801      	ldr	r1, [r0, #0]
 801d1a4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d1a8:	9500      	str	r5, [sp, #0]
 801d1aa:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801d1ae:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801d1b2:	9602      	str	r6, [sp, #8]
 801d1b4:	fa1f f688 	uxth.w	r6, r8
 801d1b8:	9601      	str	r6, [sp, #4]
 801d1ba:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801d1bc:	4621      	mov	r1, r4
 801d1be:	47a8      	blx	r5
 801d1c0:	b00d      	add	sp, #52	; 0x34
 801d1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1c6:	6838      	ldr	r0, [r7, #0]
 801d1c8:	6803      	ldr	r3, [r0, #0]
 801d1ca:	6a1b      	ldr	r3, [r3, #32]
 801d1cc:	4798      	blx	r3
 801d1ce:	4a38      	ldr	r2, [pc, #224]	; (801d2b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801d1d0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d1d4:	2eff      	cmp	r6, #255	; 0xff
 801d1d6:	8813      	ldrh	r3, [r2, #0]
 801d1d8:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801d1dc:	fb0c 1303 	mla	r3, ip, r3, r1
 801d1e0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801d1e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1e8:	4418      	add	r0, r3
 801d1ea:	d032      	beq.n	801d252 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801d1ec:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801d1f0:	f04f 0c00 	mov.w	ip, #0
 801d1f4:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801d1f8:	9306      	str	r3, [sp, #24]
 801d1fa:	45c4      	cmp	ip, r8
 801d1fc:	da49      	bge.n	801d292 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d1fe:	4686      	mov	lr, r0
 801d200:	46a1      	mov	r9, r4
 801d202:	eba9 0304 	sub.w	r3, r9, r4
 801d206:	428b      	cmp	r3, r1
 801d208:	da13      	bge.n	801d232 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801d20a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d20e:	f89e b000 	ldrb.w	fp, [lr]
 801d212:	9307      	str	r3, [sp, #28]
 801d214:	9b06      	ldr	r3, [sp, #24]
 801d216:	fb1b fb03 	smulbb	fp, fp, r3
 801d21a:	9b07      	ldr	r3, [sp, #28]
 801d21c:	fb03 b306 	mla	r3, r3, r6, fp
 801d220:	b29b      	uxth	r3, r3
 801d222:	f103 0b01 	add.w	fp, r3, #1
 801d226:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801d22a:	121b      	asrs	r3, r3, #8
 801d22c:	f80e 3b01 	strb.w	r3, [lr], #1
 801d230:	e7e7      	b.n	801d202 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801d232:	8813      	ldrh	r3, [r2, #0]
 801d234:	f10c 0c01 	add.w	ip, ip, #1
 801d238:	1b5b      	subs	r3, r3, r5
 801d23a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d23e:	4453      	add	r3, sl
 801d240:	4418      	add	r0, r3
 801d242:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d246:	1b5b      	subs	r3, r3, r5
 801d248:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d24c:	4453      	add	r3, sl
 801d24e:	441c      	add	r4, r3
 801d250:	e7d3      	b.n	801d1fa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801d252:	2600      	movs	r6, #0
 801d254:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801d258:	4546      	cmp	r6, r8
 801d25a:	da1a      	bge.n	801d292 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d25c:	f100 3eff 	add.w	lr, r0, #4294967295
 801d260:	4623      	mov	r3, r4
 801d262:	eba3 0904 	sub.w	r9, r3, r4
 801d266:	4589      	cmp	r9, r1
 801d268:	da04      	bge.n	801d274 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801d26a:	f813 9b01 	ldrb.w	r9, [r3], #1
 801d26e:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801d272:	e7f6      	b.n	801d262 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801d274:	8813      	ldrh	r3, [r2, #0]
 801d276:	3601      	adds	r6, #1
 801d278:	1b5b      	subs	r3, r3, r5
 801d27a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d27e:	4463      	add	r3, ip
 801d280:	4418      	add	r0, r3
 801d282:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d286:	1b5b      	subs	r3, r3, r5
 801d288:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d28c:	4463      	add	r3, ip
 801d28e:	441c      	add	r4, r3
 801d290:	e7e2      	b.n	801d258 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801d292:	6838      	ldr	r0, [r7, #0]
 801d294:	6803      	ldr	r3, [r0, #0]
 801d296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d298:	4798      	blx	r3
 801d29a:	e791      	b.n	801d1c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d29c:	f1b9 0f00 	cmp.w	r9, #0
 801d2a0:	f47f af78 	bne.w	801d194 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801d2a4:	f010 0f01 	tst.w	r0, #1
 801d2a8:	e776      	b.n	801d198 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801d2aa:	bf00      	nop
 801d2ac:	2000bcc8 	.word	0x2000bcc8
 801d2b0:	2000bcc2 	.word	0x2000bcc2

0801d2b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d2b4:	b510      	push	{r4, lr}
 801d2b6:	4604      	mov	r4, r0
 801d2b8:	2104      	movs	r1, #4
 801d2ba:	f007 fcee 	bl	8024c9a <_ZdlPvj>
 801d2be:	4620      	mov	r0, r4
 801d2c0:	bd10      	pop	{r4, pc}

0801d2c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d2c2:	b510      	push	{r4, lr}
 801d2c4:	4604      	mov	r4, r0
 801d2c6:	2104      	movs	r1, #4
 801d2c8:	f007 fce7 	bl	8024c9a <_ZdlPvj>
 801d2cc:	4620      	mov	r0, r4
 801d2ce:	bd10      	pop	{r4, pc}

0801d2d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d2d0:	b510      	push	{r4, lr}
 801d2d2:	4604      	mov	r4, r0
 801d2d4:	2104      	movs	r1, #4
 801d2d6:	f007 fce0 	bl	8024c9a <_ZdlPvj>
 801d2da:	4620      	mov	r0, r4
 801d2dc:	bd10      	pop	{r4, pc}

0801d2de <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d2de:	b510      	push	{r4, lr}
 801d2e0:	4604      	mov	r4, r0
 801d2e2:	2104      	movs	r1, #4
 801d2e4:	f007 fcd9 	bl	8024c9a <_ZdlPvj>
 801d2e8:	4620      	mov	r0, r4
 801d2ea:	bd10      	pop	{r4, pc}

0801d2ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d2ec:	b510      	push	{r4, lr}
 801d2ee:	4604      	mov	r4, r0
 801d2f0:	2104      	movs	r1, #4
 801d2f2:	f007 fcd2 	bl	8024c9a <_ZdlPvj>
 801d2f6:	4620      	mov	r0, r4
 801d2f8:	bd10      	pop	{r4, pc}

0801d2fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d2fa:	b510      	push	{r4, lr}
 801d2fc:	4604      	mov	r4, r0
 801d2fe:	2104      	movs	r1, #4
 801d300:	f007 fccb 	bl	8024c9a <_ZdlPvj>
 801d304:	4620      	mov	r0, r4
 801d306:	bd10      	pop	{r4, pc}

0801d308 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d308:	b510      	push	{r4, lr}
 801d30a:	4604      	mov	r4, r0
 801d30c:	2104      	movs	r1, #4
 801d30e:	f007 fcc4 	bl	8024c9a <_ZdlPvj>
 801d312:	4620      	mov	r0, r4
 801d314:	bd10      	pop	{r4, pc}

0801d316 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d316:	b510      	push	{r4, lr}
 801d318:	4604      	mov	r4, r0
 801d31a:	2104      	movs	r1, #4
 801d31c:	f007 fcbd 	bl	8024c9a <_ZdlPvj>
 801d320:	4620      	mov	r0, r4
 801d322:	bd10      	pop	{r4, pc}

0801d324 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d324:	b510      	push	{r4, lr}
 801d326:	4604      	mov	r4, r0
 801d328:	2104      	movs	r1, #4
 801d32a:	f007 fcb6 	bl	8024c9a <_ZdlPvj>
 801d32e:	4620      	mov	r0, r4
 801d330:	bd10      	pop	{r4, pc}

0801d332 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d332:	b510      	push	{r4, lr}
 801d334:	4604      	mov	r4, r0
 801d336:	2104      	movs	r1, #4
 801d338:	f007 fcaf 	bl	8024c9a <_ZdlPvj>
 801d33c:	4620      	mov	r0, r4
 801d33e:	bd10      	pop	{r4, pc}

0801d340 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d340:	b510      	push	{r4, lr}
 801d342:	4604      	mov	r4, r0
 801d344:	2104      	movs	r1, #4
 801d346:	f007 fca8 	bl	8024c9a <_ZdlPvj>
 801d34a:	4620      	mov	r0, r4
 801d34c:	bd10      	pop	{r4, pc}

0801d34e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d34e:	b510      	push	{r4, lr}
 801d350:	4604      	mov	r4, r0
 801d352:	2104      	movs	r1, #4
 801d354:	f007 fca1 	bl	8024c9a <_ZdlPvj>
 801d358:	4620      	mov	r0, r4
 801d35a:	bd10      	pop	{r4, pc}

0801d35c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d35c:	b510      	push	{r4, lr}
 801d35e:	4604      	mov	r4, r0
 801d360:	2104      	movs	r1, #4
 801d362:	f007 fc9a 	bl	8024c9a <_ZdlPvj>
 801d366:	4620      	mov	r0, r4
 801d368:	bd10      	pop	{r4, pc}

0801d36a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d36a:	b510      	push	{r4, lr}
 801d36c:	4604      	mov	r4, r0
 801d36e:	2104      	movs	r1, #4
 801d370:	f007 fc93 	bl	8024c9a <_ZdlPvj>
 801d374:	4620      	mov	r0, r4
 801d376:	bd10      	pop	{r4, pc}

0801d378 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d378:	b510      	push	{r4, lr}
 801d37a:	4604      	mov	r4, r0
 801d37c:	2104      	movs	r1, #4
 801d37e:	f007 fc8c 	bl	8024c9a <_ZdlPvj>
 801d382:	4620      	mov	r0, r4
 801d384:	bd10      	pop	{r4, pc}

0801d386 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d386:	b510      	push	{r4, lr}
 801d388:	4604      	mov	r4, r0
 801d38a:	2104      	movs	r1, #4
 801d38c:	f007 fc85 	bl	8024c9a <_ZdlPvj>
 801d390:	4620      	mov	r0, r4
 801d392:	bd10      	pop	{r4, pc}

0801d394 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d394:	b510      	push	{r4, lr}
 801d396:	4604      	mov	r4, r0
 801d398:	2104      	movs	r1, #4
 801d39a:	f007 fc7e 	bl	8024c9a <_ZdlPvj>
 801d39e:	4620      	mov	r0, r4
 801d3a0:	bd10      	pop	{r4, pc}

0801d3a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d3a2:	b510      	push	{r4, lr}
 801d3a4:	4604      	mov	r4, r0
 801d3a6:	2104      	movs	r1, #4
 801d3a8:	f007 fc77 	bl	8024c9a <_ZdlPvj>
 801d3ac:	4620      	mov	r0, r4
 801d3ae:	bd10      	pop	{r4, pc}

0801d3b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d3b0:	b510      	push	{r4, lr}
 801d3b2:	4604      	mov	r4, r0
 801d3b4:	2104      	movs	r1, #4
 801d3b6:	f007 fc70 	bl	8024c9a <_ZdlPvj>
 801d3ba:	4620      	mov	r0, r4
 801d3bc:	bd10      	pop	{r4, pc}

0801d3be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d3be:	b510      	push	{r4, lr}
 801d3c0:	4604      	mov	r4, r0
 801d3c2:	2104      	movs	r1, #4
 801d3c4:	f007 fc69 	bl	8024c9a <_ZdlPvj>
 801d3c8:	4620      	mov	r0, r4
 801d3ca:	bd10      	pop	{r4, pc}

0801d3cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3d0:	4d9e      	ldr	r5, [pc, #632]	; (801d64c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801d3d2:	4690      	mov	r8, r2
 801d3d4:	b08f      	sub	sp, #60	; 0x3c
 801d3d6:	4604      	mov	r4, r0
 801d3d8:	682a      	ldr	r2, [r5, #0]
 801d3da:	4689      	mov	r9, r1
 801d3dc:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801d3e0:	2a02      	cmp	r2, #2
 801d3e2:	d106      	bne.n	801d3f2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801d3e4:	4b9a      	ldr	r3, [pc, #616]	; (801d650 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801d3e6:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801d3ea:	4a9a      	ldr	r2, [pc, #616]	; (801d654 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d3ec:	489a      	ldr	r0, [pc, #616]	; (801d658 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801d3ee:	f007 fc7f 	bl	8024cf0 <__assert_func>
 801d3f2:	ae0e      	add	r6, sp, #56	; 0x38
 801d3f4:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801d3f8:	4630      	mov	r0, r6
 801d3fa:	f7fe f8b3 	bl	801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d3fe:	6823      	ldr	r3, [r4, #0]
 801d400:	4607      	mov	r7, r0
 801d402:	4620      	mov	r0, r4
 801d404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d406:	4798      	blx	r3
 801d408:	4287      	cmp	r7, r0
 801d40a:	d004      	beq.n	801d416 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801d40c:	4b93      	ldr	r3, [pc, #588]	; (801d65c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801d40e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801d412:	4a90      	ldr	r2, [pc, #576]	; (801d654 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d414:	e7ea      	b.n	801d3ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d416:	4630      	mov	r0, r6
 801d418:	f7fe f820 	bl	801b45c <_ZNK8touchgfx6Bitmap7getDataEv>
 801d41c:	4607      	mov	r7, r0
 801d41e:	b920      	cbnz	r0, 801d42a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801d420:	4b8f      	ldr	r3, [pc, #572]	; (801d660 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801d422:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801d426:	4a8b      	ldr	r2, [pc, #556]	; (801d654 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d428:	e7e0      	b.n	801d3ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d42a:	f8d8 0000 	ldr.w	r0, [r8]
 801d42e:	ab06      	add	r3, sp, #24
 801d430:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d434:	f9b8 a000 	ldrsh.w	sl, [r8]
 801d438:	c303      	stmia	r3!, {r0, r1}
 801d43a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d43e:	ab08      	add	r3, sp, #32
 801d440:	f8d9 0000 	ldr.w	r0, [r9]
 801d444:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801d448:	c303      	stmia	r3!, {r0, r1}
 801d44a:	4630      	mov	r0, r6
 801d44c:	f7fd fefe 	bl	801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d450:	4680      	mov	r8, r0
 801d452:	4630      	mov	r0, r6
 801d454:	4e83      	ldr	r6, [pc, #524]	; (801d664 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801d456:	f7fd ff33 	bl	801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d45a:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801d45e:	f10d 0920 	add.w	r9, sp, #32
 801d462:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801d466:	a806      	add	r0, sp, #24
 801d468:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d46c:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801d470:	f7fb fb0a 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d474:	4648      	mov	r0, r9
 801d476:	f7fb fb07 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d47a:	a80a      	add	r0, sp, #40	; 0x28
 801d47c:	f7fb fb04 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d480:	4b79      	ldr	r3, [pc, #484]	; (801d668 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d482:	2100      	movs	r1, #0
 801d484:	f9b6 2000 	ldrsh.w	r2, [r6]
 801d488:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d48c:	4648      	mov	r0, r9
 801d48e:	910c      	str	r1, [sp, #48]	; 0x30
 801d490:	a90c      	add	r1, sp, #48	; 0x30
 801d492:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801d496:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d49a:	f7f8 fac9 	bl	8015a30 <_ZN8touchgfx4RectaNERKS0_>
 801d49e:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801d4a2:	9602      	str	r6, [sp, #8]
 801d4a4:	f1bc 0f00 	cmp.w	ip, #0
 801d4a8:	f000 80a4 	beq.w	801d5f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d4ac:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801d4b0:	2e00      	cmp	r6, #0
 801d4b2:	f000 809f 	beq.w	801d5f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d4b6:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801d4ba:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801d4be:	4288      	cmp	r0, r1
 801d4c0:	db36      	blt.n	801d530 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d4c2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801d4c6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801d4ca:	429a      	cmp	r2, r3
 801d4cc:	db30      	blt.n	801d530 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d4ce:	4460      	add	r0, ip
 801d4d0:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801d4d4:	4461      	add	r1, ip
 801d4d6:	b200      	sxth	r0, r0
 801d4d8:	b209      	sxth	r1, r1
 801d4da:	4288      	cmp	r0, r1
 801d4dc:	dc28      	bgt.n	801d530 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d4de:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801d4e2:	4432      	add	r2, r6
 801d4e4:	440b      	add	r3, r1
 801d4e6:	b212      	sxth	r2, r2
 801d4e8:	b21b      	sxth	r3, r3
 801d4ea:	429a      	cmp	r2, r3
 801d4ec:	dc20      	bgt.n	801d530 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d4ee:	6823      	ldr	r3, [r4, #0]
 801d4f0:	4620      	mov	r0, r4
 801d4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4f4:	4798      	blx	r3
 801d4f6:	4682      	mov	sl, r0
 801d4f8:	6828      	ldr	r0, [r5, #0]
 801d4fa:	6803      	ldr	r3, [r0, #0]
 801d4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4fe:	4798      	blx	r3
 801d500:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801d504:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d508:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d50c:	9303      	str	r3, [sp, #12]
 801d50e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d512:	1a9b      	subs	r3, r3, r2
 801d514:	b29b      	uxth	r3, r3
 801d516:	b21c      	sxth	r4, r3
 801d518:	2c00      	cmp	r4, #0
 801d51a:	dc0e      	bgt.n	801d53a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801d51c:	b134      	cbz	r4, 801d52c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801d51e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d522:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d526:	4413      	add	r3, r2
 801d528:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801d52c:	463c      	mov	r4, r7
 801d52e:	e00b      	b.n	801d548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801d530:	4b4e      	ldr	r3, [pc, #312]	; (801d66c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801d532:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d536:	4a47      	ldr	r2, [pc, #284]	; (801d654 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d538:	e758      	b.n	801d3ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d53a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d53e:	ebab 0303 	sub.w	r3, fp, r3
 801d542:	443c      	add	r4, r7
 801d544:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d548:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d54c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d550:	1a9b      	subs	r3, r3, r2
 801d552:	b29b      	uxth	r3, r3
 801d554:	b219      	sxth	r1, r3
 801d556:	2900      	cmp	r1, #0
 801d558:	dd50      	ble.n	801d5fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801d55a:	9a03      	ldr	r2, [sp, #12]
 801d55c:	fb02 4401 	mla	r4, r2, r1, r4
 801d560:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801d564:	1ad3      	subs	r3, r2, r3
 801d566:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d56a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d56e:	f1bc 0f00 	cmp.w	ip, #0
 801d572:	dd3f      	ble.n	801d5f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d574:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d578:	2e00      	cmp	r6, #0
 801d57a:	dd3b      	ble.n	801d5f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d57c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801d580:	2203      	movs	r2, #3
 801d582:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d586:	fb0a f801 	mul.w	r8, sl, r1
 801d58a:	fb13 8802 	smlabb	r8, r3, r2, r8
 801d58e:	9a02      	ldr	r2, [sp, #8]
 801d590:	4480      	add	r8, r0
 801d592:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801d596:	8812      	ldrh	r2, [r2, #0]
 801d598:	4584      	cmp	ip, r0
 801d59a:	eba2 0303 	sub.w	r3, r2, r3
 801d59e:	bfa8      	it	ge
 801d5a0:	4684      	movge	ip, r0
 801d5a2:	459c      	cmp	ip, r3
 801d5a4:	bfa8      	it	ge
 801d5a6:	469c      	movge	ip, r3
 801d5a8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801d5ac:	429e      	cmp	r6, r3
 801d5ae:	bfa8      	it	ge
 801d5b0:	461e      	movge	r6, r3
 801d5b2:	4b2d      	ldr	r3, [pc, #180]	; (801d668 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d5b4:	881b      	ldrh	r3, [r3, #0]
 801d5b6:	1a59      	subs	r1, r3, r1
 801d5b8:	4633      	mov	r3, r6
 801d5ba:	428e      	cmp	r6, r1
 801d5bc:	bfa8      	it	ge
 801d5be:	460b      	movge	r3, r1
 801d5c0:	4562      	cmp	r2, ip
 801d5c2:	9302      	str	r3, [sp, #8]
 801d5c4:	d12d      	bne.n	801d622 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801d5c6:	455a      	cmp	r2, fp
 801d5c8:	d12b      	bne.n	801d622 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801d5ca:	6828      	ldr	r0, [r5, #0]
 801d5cc:	6803      	ldr	r3, [r0, #0]
 801d5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d5d0:	4798      	blx	r3
 801d5d2:	07c3      	lsls	r3, r0, #31
 801d5d4:	d51b      	bpl.n	801d60e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801d5d6:	6828      	ldr	r0, [r5, #0]
 801d5d8:	9b02      	ldr	r3, [sp, #8]
 801d5da:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801d5de:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801d5e2:	6803      	ldr	r3, [r0, #0]
 801d5e4:	f8cd b000 	str.w	fp, [sp]
 801d5e8:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801d5ea:	4623      	mov	r3, r4
 801d5ec:	e899 0006 	ldmia.w	r9, {r1, r2}
 801d5f0:	47a8      	blx	r5
 801d5f2:	4607      	mov	r7, r0
 801d5f4:	4638      	mov	r0, r7
 801d5f6:	b00f      	add	sp, #60	; 0x3c
 801d5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5fc:	bf1f      	itttt	ne
 801d5fe:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801d602:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801d606:	189b      	addne	r3, r3, r2
 801d608:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801d60c:	e7ad      	b.n	801d56a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801d60e:	6828      	ldr	r0, [r5, #0]
 801d610:	4642      	mov	r2, r8
 801d612:	4621      	mov	r1, r4
 801d614:	6803      	ldr	r3, [r0, #0]
 801d616:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801d618:	9b02      	ldr	r3, [sp, #8]
 801d61a:	fb03 f30a 	mul.w	r3, r3, sl
 801d61e:	47a8      	blx	r5
 801d620:	e7e8      	b.n	801d5f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d622:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801d626:	f04f 0900 	mov.w	r9, #0
 801d62a:	9b02      	ldr	r3, [sp, #8]
 801d62c:	454b      	cmp	r3, r9
 801d62e:	dde1      	ble.n	801d5f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d630:	6828      	ldr	r0, [r5, #0]
 801d632:	4642      	mov	r2, r8
 801d634:	4621      	mov	r1, r4
 801d636:	44d0      	add	r8, sl
 801d638:	6803      	ldr	r3, [r0, #0]
 801d63a:	f109 0901 	add.w	r9, r9, #1
 801d63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d640:	461e      	mov	r6, r3
 801d642:	465b      	mov	r3, fp
 801d644:	47b0      	blx	r6
 801d646:	9b03      	ldr	r3, [sp, #12]
 801d648:	441c      	add	r4, r3
 801d64a:	e7ee      	b.n	801d62a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801d64c:	2000bcc8 	.word	0x2000bcc8
 801d650:	08029551 	.word	0x08029551
 801d654:	08029d31 	.word	0x08029d31
 801d658:	0802951f 	.word	0x0802951f
 801d65c:	08029605 	.word	0x08029605
 801d660:	0802965a 	.word	0x0802965a
 801d664:	2000bcc2 	.word	0x2000bcc2
 801d668:	2000bcc4 	.word	0x2000bcc4
 801d66c:	08029698 	.word	0x08029698

0801d670 <_ZN8touchgfx8LCD24bppC1Ev>:
 801d670:	4a0b      	ldr	r2, [pc, #44]	; (801d6a0 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801d672:	6002      	str	r2, [r0, #0]
 801d674:	2200      	movs	r2, #0
 801d676:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d67a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d67e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d682:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d686:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d68a:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d68e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d692:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d696:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d69a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d69e:	4770      	bx	lr
 801d6a0:	0802997c 	.word	0x0802997c

0801d6a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6a8:	b093      	sub	sp, #76	; 0x4c
 801d6aa:	880c      	ldrh	r4, [r1, #0]
 801d6ac:	4605      	mov	r5, r0
 801d6ae:	460f      	mov	r7, r1
 801d6b0:	4691      	mov	r9, r2
 801d6b2:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801d6b6:	b12c      	cbz	r4, 801d6c4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801d6b8:	4b71      	ldr	r3, [pc, #452]	; (801d880 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d6ba:	2167      	movs	r1, #103	; 0x67
 801d6bc:	4a71      	ldr	r2, [pc, #452]	; (801d884 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801d6be:	4872      	ldr	r0, [pc, #456]	; (801d888 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801d6c0:	f007 fb16 	bl	8024cf0 <__assert_func>
 801d6c4:	6810      	ldr	r0, [r2, #0]
 801d6c6:	ae0e      	add	r6, sp, #56	; 0x38
 801d6c8:	6851      	ldr	r1, [r2, #4]
 801d6ca:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801d890 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801d6ce:	c603      	stmia	r6!, {r0, r1}
 801d6d0:	6818      	ldr	r0, [r3, #0]
 801d6d2:	ae10      	add	r6, sp, #64	; 0x40
 801d6d4:	6859      	ldr	r1, [r3, #4]
 801d6d6:	c603      	stmia	r6!, {r0, r1}
 801d6d8:	a80e      	add	r0, sp, #56	; 0x38
 801d6da:	f7fb f9d5 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d6de:	4649      	mov	r1, r9
 801d6e0:	a810      	add	r0, sp, #64	; 0x40
 801d6e2:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801d88c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801d6e6:	f7fb f9b7 	bl	8018a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d6ea:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d6ee:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d6f2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d6f6:	f8d9 0000 	ldr.w	r0, [r9]
 801d6fa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d6fe:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801d702:	440d      	add	r5, r1
 801d704:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d708:	440a      	add	r2, r1
 801d70a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d70e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d712:	4413      	add	r3, r2
 801d714:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d718:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801d71c:	930b      	str	r3, [sp, #44]	; 0x2c
 801d71e:	6803      	ldr	r3, [r0, #0]
 801d720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d724:	4798      	blx	r3
 801d726:	2801      	cmp	r0, #1
 801d728:	d11e      	bne.n	801d768 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801d72a:	220b      	movs	r2, #11
 801d72c:	9008      	str	r0, [sp, #32]
 801d72e:	b2b6      	uxth	r6, r6
 801d730:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d734:	9207      	str	r2, [sp, #28]
 801d736:	4629      	mov	r1, r5
 801d738:	f8ba 2000 	ldrh.w	r2, [sl]
 801d73c:	f8cd 8010 	str.w	r8, [sp, #16]
 801d740:	9601      	str	r6, [sp, #4]
 801d742:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801d746:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d74a:	9203      	str	r2, [sp, #12]
 801d74c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d750:	9202      	str	r2, [sp, #8]
 801d752:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d756:	9200      	str	r2, [sp, #0]
 801d758:	463a      	mov	r2, r7
 801d75a:	f8d9 0000 	ldr.w	r0, [r9]
 801d75e:	f7f8 fdb5 	bl	80162cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d762:	b013      	add	sp, #76	; 0x4c
 801d764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d768:	f8d9 0000 	ldr.w	r0, [r9]
 801d76c:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801d770:	6803      	ldr	r3, [r0, #0]
 801d772:	6a1b      	ldr	r3, [r3, #32]
 801d774:	4798      	blx	r3
 801d776:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801d77a:	f8ba 3000 	ldrh.w	r3, [sl]
 801d77e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d782:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d786:	fb01 2303 	mla	r3, r1, r3, r2
 801d78a:	4621      	mov	r1, r4
 801d78c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d790:	4418      	add	r0, r3
 801d792:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801d796:	930c      	str	r3, [sp, #48]	; 0x30
 801d798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d79a:	4299      	cmp	r1, r3
 801d79c:	da6a      	bge.n	801d874 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801d79e:	1cc2      	adds	r2, r0, #3
 801d7a0:	46aa      	mov	sl, r5
 801d7a2:	ebaa 0305 	sub.w	r3, sl, r5
 801d7a6:	429e      	cmp	r6, r3
 801d7a8:	dd55      	ble.n	801d856 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801d7aa:	2404      	movs	r4, #4
 801d7ac:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801d7b0:	fb14 4303 	smlabb	r3, r4, r3, r4
 801d7b4:	eb07 0e03 	add.w	lr, r7, r3
 801d7b8:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801d7bc:	b184      	cbz	r4, 801d7e0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801d7be:	2cff      	cmp	r4, #255	; 0xff
 801d7c0:	f817 b003 	ldrb.w	fp, [r7, r3]
 801d7c4:	d10e      	bne.n	801d7e4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d7c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d7ca:	d10b      	bne.n	801d7e4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d7cc:	f802 bc03 	strb.w	fp, [r2, #-3]
 801d7d0:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801d7d4:	f802 3c02 	strb.w	r3, [r2, #-2]
 801d7d8:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801d7dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d7e0:	3203      	adds	r2, #3
 801d7e2:	e7de      	b.n	801d7a2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801d7e4:	fb08 f404 	mul.w	r4, r8, r4
 801d7e8:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801d7ec:	1c63      	adds	r3, r4, #1
 801d7ee:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801d7f2:	121b      	asrs	r3, r3, #8
 801d7f4:	b29c      	uxth	r4, r3
 801d7f6:	43db      	mvns	r3, r3
 801d7f8:	fb1b fb04 	smulbb	fp, fp, r4
 801d7fc:	b2db      	uxtb	r3, r3
 801d7fe:	fb0c bc03 	mla	ip, ip, r3, fp
 801d802:	fa1f fc8c 	uxth.w	ip, ip
 801d806:	f10c 0b01 	add.w	fp, ip, #1
 801d80a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d80e:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801d812:	fb1b fb03 	smulbb	fp, fp, r3
 801d816:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d81a:	f802 cc03 	strb.w	ip, [r2, #-3]
 801d81e:	f89e c001 	ldrb.w	ip, [lr, #1]
 801d822:	fb0c bc04 	mla	ip, ip, r4, fp
 801d826:	fa1f fc8c 	uxth.w	ip, ip
 801d82a:	f10c 0b01 	add.w	fp, ip, #1
 801d82e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d832:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d836:	f802 cc02 	strb.w	ip, [r2, #-2]
 801d83a:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801d83e:	f89e e002 	ldrb.w	lr, [lr, #2]
 801d842:	fb1c f303 	smulbb	r3, ip, r3
 801d846:	fb0e 3304 	mla	r3, lr, r4, r3
 801d84a:	b29b      	uxth	r3, r3
 801d84c:	1c5c      	adds	r4, r3, #1
 801d84e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d852:	121b      	asrs	r3, r3, #8
 801d854:	e7c2      	b.n	801d7dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801d856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d858:	3101      	adds	r1, #1
 801d85a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d85c:	881b      	ldrh	r3, [r3, #0]
 801d85e:	1b9b      	subs	r3, r3, r6
 801d860:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d864:	4413      	add	r3, r2
 801d866:	4418      	add	r0, r3
 801d868:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801d86c:	1b9b      	subs	r3, r3, r6
 801d86e:	444b      	add	r3, r9
 801d870:	441d      	add	r5, r3
 801d872:	e791      	b.n	801d798 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801d874:	4b05      	ldr	r3, [pc, #20]	; (801d88c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801d876:	6818      	ldr	r0, [r3, #0]
 801d878:	6803      	ldr	r3, [r0, #0]
 801d87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d87c:	4798      	blx	r3
 801d87e:	e770      	b.n	801d762 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d880:	08029483 	.word	0x08029483
 801d884:	08029b53 	.word	0x08029b53
 801d888:	0802951f 	.word	0x0802951f
 801d88c:	2000bcc8 	.word	0x2000bcc8
 801d890:	2000bcc2 	.word	0x2000bcc2

0801d894 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d898:	4614      	mov	r4, r2
 801d89a:	880a      	ldrh	r2, [r1, #0]
 801d89c:	b091      	sub	sp, #68	; 0x44
 801d89e:	4680      	mov	r8, r0
 801d8a0:	2a01      	cmp	r2, #1
 801d8a2:	460e      	mov	r6, r1
 801d8a4:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801d8a8:	d005      	beq.n	801d8b6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801d8aa:	4b6d      	ldr	r3, [pc, #436]	; (801da60 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801d8ac:	21b5      	movs	r1, #181	; 0xb5
 801d8ae:	4a6d      	ldr	r2, [pc, #436]	; (801da64 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801d8b0:	486d      	ldr	r0, [pc, #436]	; (801da68 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801d8b2:	f007 fa1d 	bl	8024cf0 <__assert_func>
 801d8b6:	6820      	ldr	r0, [r4, #0]
 801d8b8:	ad0c      	add	r5, sp, #48	; 0x30
 801d8ba:	6861      	ldr	r1, [r4, #4]
 801d8bc:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801da6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801d8c0:	c503      	stmia	r5!, {r0, r1}
 801d8c2:	6818      	ldr	r0, [r3, #0]
 801d8c4:	ad0e      	add	r5, sp, #56	; 0x38
 801d8c6:	6859      	ldr	r1, [r3, #4]
 801d8c8:	c503      	stmia	r5!, {r0, r1}
 801d8ca:	a80c      	add	r0, sp, #48	; 0x30
 801d8cc:	f7fb f8dc 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d8d0:	4621      	mov	r1, r4
 801d8d2:	a80e      	add	r0, sp, #56	; 0x38
 801d8d4:	f7fb f8c0 	bl	8018a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d8d8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d8dc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d8e0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d8e4:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801d8e8:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d8ec:	eb08 0401 	add.w	r4, r8, r1
 801d8f0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d8f4:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801da70 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801d8f8:	440a      	add	r2, r1
 801d8fa:	f8d8 0000 	ldr.w	r0, [r8]
 801d8fe:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d902:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d906:	4413      	add	r3, r2
 801d908:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d90c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801d910:	930a      	str	r3, [sp, #40]	; 0x28
 801d912:	6803      	ldr	r3, [r0, #0]
 801d914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d918:	4798      	blx	r3
 801d91a:	2801      	cmp	r0, #1
 801d91c:	d11e      	bne.n	801d95c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801d91e:	220b      	movs	r2, #11
 801d920:	9008      	str	r0, [sp, #32]
 801d922:	b2ad      	uxth	r5, r5
 801d924:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d928:	9207      	str	r2, [sp, #28]
 801d92a:	4621      	mov	r1, r4
 801d92c:	f8b9 2000 	ldrh.w	r2, [r9]
 801d930:	9501      	str	r5, [sp, #4]
 801d932:	9206      	str	r2, [sp, #24]
 801d934:	2200      	movs	r2, #0
 801d936:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801d93a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d93e:	9203      	str	r2, [sp, #12]
 801d940:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d944:	9202      	str	r2, [sp, #8]
 801d946:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d94a:	9200      	str	r2, [sp, #0]
 801d94c:	4632      	mov	r2, r6
 801d94e:	f8d8 0000 	ldr.w	r0, [r8]
 801d952:	f7f8 fcbb 	bl	80162cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d956:	b011      	add	sp, #68	; 0x44
 801d958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d95c:	f8d8 0000 	ldr.w	r0, [r8]
 801d960:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801d964:	6803      	ldr	r3, [r0, #0]
 801d966:	6a1b      	ldr	r3, [r3, #32]
 801d968:	4798      	blx	r3
 801d96a:	f8b9 3000 	ldrh.w	r3, [r9]
 801d96e:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801d972:	f04f 0e00 	mov.w	lr, #0
 801d976:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d97a:	fa1f f987 	uxth.w	r9, r7
 801d97e:	fb01 2303 	mla	r3, r1, r3, r2
 801d982:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801d986:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d98a:	b289      	uxth	r1, r1
 801d98c:	4418      	add	r0, r3
 801d98e:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801d992:	930b      	str	r3, [sp, #44]	; 0x2c
 801d994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d996:	459e      	cmp	lr, r3
 801d998:	da5c      	bge.n	801da54 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801d99a:	1cc3      	adds	r3, r0, #3
 801d99c:	46a2      	mov	sl, r4
 801d99e:	ebaa 0204 	sub.w	r2, sl, r4
 801d9a2:	4295      	cmp	r5, r2
 801d9a4:	dd46      	ble.n	801da34 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801d9a6:	f04f 0c03 	mov.w	ip, #3
 801d9aa:	f04f 0b04 	mov.w	fp, #4
 801d9ae:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801d9b2:	2fff      	cmp	r7, #255	; 0xff
 801d9b4:	fb1c b202 	smlabb	r2, ip, r2, fp
 801d9b8:	eb06 0c02 	add.w	ip, r6, r2
 801d9bc:	f816 b002 	ldrb.w	fp, [r6, r2]
 801d9c0:	d02f      	beq.n	801da22 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801d9c2:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801d9c6:	fb12 f201 	smulbb	r2, r2, r1
 801d9ca:	fb0b 2209 	mla	r2, fp, r9, r2
 801d9ce:	b292      	uxth	r2, r2
 801d9d0:	f102 0b01 	add.w	fp, r2, #1
 801d9d4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d9d8:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801d9dc:	fb1b fb01 	smulbb	fp, fp, r1
 801d9e0:	1212      	asrs	r2, r2, #8
 801d9e2:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d9e6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d9ea:	fb02 b209 	mla	r2, r2, r9, fp
 801d9ee:	b292      	uxth	r2, r2
 801d9f0:	f102 0b01 	add.w	fp, r2, #1
 801d9f4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d9f8:	1212      	asrs	r2, r2, #8
 801d9fa:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d9fe:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801da02:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801da06:	fb1c fc01 	smulbb	ip, ip, r1
 801da0a:	fb02 c209 	mla	r2, r2, r9, ip
 801da0e:	b292      	uxth	r2, r2
 801da10:	f102 0c01 	add.w	ip, r2, #1
 801da14:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801da18:	1212      	asrs	r2, r2, #8
 801da1a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801da1e:	3303      	adds	r3, #3
 801da20:	e7bd      	b.n	801d99e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801da22:	f803 bc03 	strb.w	fp, [r3, #-3]
 801da26:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801da2a:	f803 2c02 	strb.w	r2, [r3, #-2]
 801da2e:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801da32:	e7f2      	b.n	801da1a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801da34:	4b0d      	ldr	r3, [pc, #52]	; (801da6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801da36:	f10e 0e01 	add.w	lr, lr, #1
 801da3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801da3c:	881b      	ldrh	r3, [r3, #0]
 801da3e:	1b5b      	subs	r3, r3, r5
 801da40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da44:	4413      	add	r3, r2
 801da46:	4418      	add	r0, r3
 801da48:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801da4c:	1b5b      	subs	r3, r3, r5
 801da4e:	4443      	add	r3, r8
 801da50:	441c      	add	r4, r3
 801da52:	e79f      	b.n	801d994 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801da54:	4b06      	ldr	r3, [pc, #24]	; (801da70 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801da56:	6818      	ldr	r0, [r3, #0]
 801da58:	6803      	ldr	r3, [r0, #0]
 801da5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da5c:	4798      	blx	r3
 801da5e:	e77a      	b.n	801d956 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801da60:	0802938f 	.word	0x0802938f
 801da64:	08029a46 	.word	0x08029a46
 801da68:	0802951f 	.word	0x0802951f
 801da6c:	2000bcc2 	.word	0x2000bcc2
 801da70:	2000bcc8 	.word	0x2000bcc8

0801da74 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801da74:	b570      	push	{r4, r5, r6, lr}
 801da76:	780d      	ldrb	r5, [r1, #0]
 801da78:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801da7c:	2d01      	cmp	r5, #1
 801da7e:	d00d      	beq.n	801da9c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801da80:	d307      	bcc.n	801da92 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801da82:	2d02      	cmp	r5, #2
 801da84:	d10f      	bne.n	801daa6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801da86:	4b08      	ldr	r3, [pc, #32]	; (801daa8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801da88:	215a      	movs	r1, #90	; 0x5a
 801da8a:	4a08      	ldr	r2, [pc, #32]	; (801daac <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801da8c:	4808      	ldr	r0, [pc, #32]	; (801dab0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801da8e:	f007 f92f 	bl	8024cf0 <__assert_func>
 801da92:	9404      	str	r4, [sp, #16]
 801da94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da98:	f7ff be04 	b.w	801d6a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801da9c:	9404      	str	r4, [sp, #16]
 801da9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801daa2:	f7ff bef7 	b.w	801d894 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801daa6:	bd70      	pop	{r4, r5, r6, pc}
 801daa8:	08029344 	.word	0x08029344
 801daac:	080299c4 	.word	0x080299c4
 801dab0:	0802951f 	.word	0x0802951f

0801dab4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801dab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dab8:	b08b      	sub	sp, #44	; 0x2c
 801daba:	460c      	mov	r4, r1
 801dabc:	4680      	mov	r8, r0
 801dabe:	469a      	mov	sl, r3
 801dac0:	6808      	ldr	r0, [r1, #0]
 801dac2:	ab06      	add	r3, sp, #24
 801dac4:	6849      	ldr	r1, [r1, #4]
 801dac6:	c303      	stmia	r3!, {r0, r1}
 801dac8:	6810      	ldr	r0, [r2, #0]
 801daca:	ab08      	add	r3, sp, #32
 801dacc:	6851      	ldr	r1, [r2, #4]
 801dace:	c303      	stmia	r3!, {r0, r1}
 801dad0:	a806      	add	r0, sp, #24
 801dad2:	f7fa ffd9 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dad6:	4621      	mov	r1, r4
 801dad8:	a808      	add	r0, sp, #32
 801dada:	4c61      	ldr	r4, [pc, #388]	; (801dc60 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801dadc:	f7fa ffbc 	bl	8018a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dae0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dae4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801dae8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801daec:	6820      	ldr	r0, [r4, #0]
 801daee:	fb11 2103 	smlabb	r1, r1, r3, r2
 801daf2:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801daf6:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801dafa:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801dafe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801db02:	440a      	add	r2, r1
 801db04:	f8ad 2020 	strh.w	r2, [sp, #32]
 801db08:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801db0c:	4413      	add	r3, r2
 801db0e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801db12:	6803      	ldr	r3, [r0, #0]
 801db14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db16:	4798      	blx	r3
 801db18:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801db1c:	d118      	bne.n	801db50 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801db1e:	f010 0f20 	tst.w	r0, #32
 801db22:	6820      	ldr	r0, [r4, #0]
 801db24:	d017      	beq.n	801db56 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801db26:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801db2a:	b2bf      	uxth	r7, r7
 801db2c:	6801      	ldr	r1, [r0, #0]
 801db2e:	9402      	str	r4, [sp, #8]
 801db30:	fa1f f489 	uxth.w	r4, r9
 801db34:	f8cd a00c 	str.w	sl, [sp, #12]
 801db38:	9401      	str	r4, [sp, #4]
 801db3a:	9700      	str	r7, [sp, #0]
 801db3c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801db40:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801db42:	4641      	mov	r1, r8
 801db44:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801db48:	47a0      	blx	r4
 801db4a:	b00b      	add	sp, #44	; 0x2c
 801db4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db50:	f010 0f40 	tst.w	r0, #64	; 0x40
 801db54:	e7e5      	b.n	801db22 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801db56:	6803      	ldr	r3, [r0, #0]
 801db58:	6a1b      	ldr	r3, [r3, #32]
 801db5a:	4798      	blx	r3
 801db5c:	4b41      	ldr	r3, [pc, #260]	; (801dc64 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801db5e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801db62:	f04f 0c00 	mov.w	ip, #0
 801db66:	881a      	ldrh	r2, [r3, #0]
 801db68:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801db6c:	fb04 1202 	mla	r2, r4, r2, r1
 801db70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db74:	4410      	add	r0, r2
 801db76:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801db7a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801db7e:	0092      	lsls	r2, r2, #2
 801db80:	9105      	str	r1, [sp, #20]
 801db82:	9204      	str	r2, [sp, #16]
 801db84:	45cc      	cmp	ip, r9
 801db86:	da65      	bge.n	801dc54 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801db88:	1cc4      	adds	r4, r0, #3
 801db8a:	f108 0504 	add.w	r5, r8, #4
 801db8e:	f04f 0e00 	mov.w	lr, #0
 801db92:	45be      	cmp	lr, r7
 801db94:	da4d      	bge.n	801dc32 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801db96:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801db9a:	b181      	cbz	r1, 801dbbe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801db9c:	29ff      	cmp	r1, #255	; 0xff
 801db9e:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801dba2:	d111      	bne.n	801dbc8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801dba4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dba8:	d10e      	bne.n	801dbc8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801dbaa:	f804 bc03 	strb.w	fp, [r4, #-3]
 801dbae:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801dbb2:	f804 2c02 	strb.w	r2, [r4, #-2]
 801dbb6:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801dbba:	f804 2c01 	strb.w	r2, [r4, #-1]
 801dbbe:	f10e 0e01 	add.w	lr, lr, #1
 801dbc2:	3403      	adds	r4, #3
 801dbc4:	3504      	adds	r5, #4
 801dbc6:	e7e4      	b.n	801db92 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801dbc8:	fb0a f101 	mul.w	r1, sl, r1
 801dbcc:	1c4a      	adds	r2, r1, #1
 801dbce:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801dbd2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801dbd6:	1212      	asrs	r2, r2, #8
 801dbd8:	b296      	uxth	r6, r2
 801dbda:	43d2      	mvns	r2, r2
 801dbdc:	fb1b fb06 	smulbb	fp, fp, r6
 801dbe0:	b2d2      	uxtb	r2, r2
 801dbe2:	fb01 b102 	mla	r1, r1, r2, fp
 801dbe6:	b289      	uxth	r1, r1
 801dbe8:	f101 0b01 	add.w	fp, r1, #1
 801dbec:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801dbf0:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801dbf4:	fb1b fb02 	smulbb	fp, fp, r2
 801dbf8:	1209      	asrs	r1, r1, #8
 801dbfa:	f804 1c03 	strb.w	r1, [r4, #-3]
 801dbfe:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801dc02:	fb01 b106 	mla	r1, r1, r6, fp
 801dc06:	b289      	uxth	r1, r1
 801dc08:	f101 0b01 	add.w	fp, r1, #1
 801dc0c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801dc10:	1209      	asrs	r1, r1, #8
 801dc12:	f804 1c02 	strb.w	r1, [r4, #-2]
 801dc16:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801dc1a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801dc1e:	fb11 f202 	smulbb	r2, r1, r2
 801dc22:	fb0b 2206 	mla	r2, fp, r6, r2
 801dc26:	b292      	uxth	r2, r2
 801dc28:	1c56      	adds	r6, r2, #1
 801dc2a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801dc2e:	1212      	asrs	r2, r2, #8
 801dc30:	e7c3      	b.n	801dbba <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801dc32:	881a      	ldrh	r2, [r3, #0]
 801dc34:	f10c 0c01 	add.w	ip, ip, #1
 801dc38:	9905      	ldr	r1, [sp, #20]
 801dc3a:	1bd2      	subs	r2, r2, r7
 801dc3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dc40:	440a      	add	r2, r1
 801dc42:	9904      	ldr	r1, [sp, #16]
 801dc44:	4410      	add	r0, r2
 801dc46:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801dc4a:	1bd2      	subs	r2, r2, r7
 801dc4c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801dc50:	4490      	add	r8, r2
 801dc52:	e797      	b.n	801db84 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801dc54:	4b02      	ldr	r3, [pc, #8]	; (801dc60 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801dc56:	6818      	ldr	r0, [r3, #0]
 801dc58:	6803      	ldr	r3, [r0, #0]
 801dc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc5c:	4798      	blx	r3
 801dc5e:	e774      	b.n	801db4a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801dc60:	2000bcc8 	.word	0x2000bcc8
 801dc64:	2000bcc2 	.word	0x2000bcc2

0801dc68 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801dc68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dc6c:	b085      	sub	sp, #20
 801dc6e:	4606      	mov	r6, r0
 801dc70:	460c      	mov	r4, r1
 801dc72:	4691      	mov	r9, r2
 801dc74:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801dc78:	4698      	mov	r8, r3
 801dc7a:	b385      	cbz	r5, 801dcde <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801dc7c:	4608      	mov	r0, r1
 801dc7e:	f7fd fae5 	bl	801b24c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dc82:	4607      	mov	r7, r0
 801dc84:	4620      	mov	r0, r4
 801dc86:	f7fd fb1b 	bl	801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dc8a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801dc8e:	4620      	mov	r0, r4
 801dc90:	f8ad 9008 	strh.w	r9, [sp, #8]
 801dc94:	f8ad 800a 	strh.w	r8, [sp, #10]
 801dc98:	f8ad 700c 	strh.w	r7, [sp, #12]
 801dc9c:	f7fd fc62 	bl	801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dca0:	2801      	cmp	r0, #1
 801dca2:	d00f      	beq.n	801dcc4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dca4:	4620      	mov	r0, r4
 801dca6:	f7fd fc5d 	bl	801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dcaa:	2802      	cmp	r0, #2
 801dcac:	d00a      	beq.n	801dcc4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dcae:	4620      	mov	r0, r4
 801dcb0:	f7fd fc58 	bl	801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dcb4:	280b      	cmp	r0, #11
 801dcb6:	d005      	beq.n	801dcc4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dcb8:	4b1b      	ldr	r3, [pc, #108]	; (801dd28 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801dcba:	2142      	movs	r1, #66	; 0x42
 801dcbc:	4a1b      	ldr	r2, [pc, #108]	; (801dd2c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801dcbe:	481c      	ldr	r0, [pc, #112]	; (801dd30 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801dcc0:	f007 f816 	bl	8024cf0 <__assert_func>
 801dcc4:	4620      	mov	r0, r4
 801dcc6:	f7fd fc4d 	bl	801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dcca:	2802      	cmp	r0, #2
 801dccc:	4620      	mov	r0, r4
 801dcce:	d109      	bne.n	801dce4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801dcd0:	f7fd fbc4 	bl	801b45c <_ZNK8touchgfx6Bitmap7getDataEv>
 801dcd4:	462b      	mov	r3, r5
 801dcd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dcd8:	a902      	add	r1, sp, #8
 801dcda:	f7ff feeb 	bl	801dab4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dcde:	b005      	add	sp, #20
 801dce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dce4:	f7fd fc3e 	bl	801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dce8:	280b      	cmp	r0, #11
 801dcea:	d10e      	bne.n	801dd0a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801dcec:	4620      	mov	r0, r4
 801dcee:	f7fd fbb5 	bl	801b45c <_ZNK8touchgfx6Bitmap7getDataEv>
 801dcf2:	4606      	mov	r6, r0
 801dcf4:	4620      	mov	r0, r4
 801dcf6:	f7fd fbe3 	bl	801b4c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801dcfa:	9500      	str	r5, [sp, #0]
 801dcfc:	4601      	mov	r1, r0
 801dcfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd00:	aa02      	add	r2, sp, #8
 801dd02:	4630      	mov	r0, r6
 801dd04:	f7ff feb6 	bl	801da74 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801dd08:	e7e9      	b.n	801dcde <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801dd0a:	6833      	ldr	r3, [r6, #0]
 801dd0c:	4620      	mov	r0, r4
 801dd0e:	691f      	ldr	r7, [r3, #16]
 801dd10:	f7fd fba4 	bl	801b45c <_ZNK8touchgfx6Bitmap7getDataEv>
 801dd14:	2300      	movs	r3, #0
 801dd16:	4601      	mov	r1, r0
 801dd18:	aa02      	add	r2, sp, #8
 801dd1a:	4630      	mov	r0, r6
 801dd1c:	e9cd 5300 	strd	r5, r3, [sp]
 801dd20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd22:	47b8      	blx	r7
 801dd24:	e7db      	b.n	801dcde <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801dd26:	bf00      	nop
 801dd28:	080293dd 	.word	0x080293dd
 801dd2c:	08029acf 	.word	0x08029acf
 801dd30:	0802951f 	.word	0x0802951f

0801dd34 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801dd34:	b570      	push	{r4, r5, r6, lr}
 801dd36:	9d04      	ldr	r5, [sp, #16]
 801dd38:	460c      	mov	r4, r1
 801dd3a:	4619      	mov	r1, r3
 801dd3c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dd40:	2a0c      	cmp	r2, #12
 801dd42:	d826      	bhi.n	801dd92 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801dd44:	e8df f002 	tbb	[pc, r2]
 801dd48:	200e1407 	.word	0x200e1407
 801dd4c:	20202020 	.word	0x20202020
 801dd50:	20202020 	.word	0x20202020
 801dd54:	20          	.byte	0x20
 801dd55:	00          	.byte	0x00
 801dd56:	4b0f      	ldr	r3, [pc, #60]	; (801dd94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801dd58:	f240 117f 	movw	r1, #383	; 0x17f
 801dd5c:	4a0e      	ldr	r2, [pc, #56]	; (801dd98 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801dd5e:	480f      	ldr	r0, [pc, #60]	; (801dd9c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801dd60:	f006 ffc6 	bl	8024cf0 <__assert_func>
 801dd64:	462a      	mov	r2, r5
 801dd66:	4620      	mov	r0, r4
 801dd68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dd6c:	f7ff bea2 	b.w	801dab4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dd70:	6802      	ldr	r2, [r0, #0]
 801dd72:	2600      	movs	r6, #0
 801dd74:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801dd78:	6916      	ldr	r6, [r2, #16]
 801dd7a:	462b      	mov	r3, r5
 801dd7c:	460a      	mov	r2, r1
 801dd7e:	4621      	mov	r1, r4
 801dd80:	46b4      	mov	ip, r6
 801dd82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dd86:	4760      	bx	ip
 801dd88:	4b05      	ldr	r3, [pc, #20]	; (801dda0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801dd8a:	f240 1191 	movw	r1, #401	; 0x191
 801dd8e:	4a02      	ldr	r2, [pc, #8]	; (801dd98 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801dd90:	e7e5      	b.n	801dd5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801dd92:	bd70      	pop	{r4, r5, r6, pc}
 801dd94:	080296f8 	.word	0x080296f8
 801dd98:	08029db7 	.word	0x08029db7
 801dd9c:	0802951f 	.word	0x0802951f
 801dda0:	08029739 	.word	0x08029739

0801dda4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801dda4:	b158      	cbz	r0, 801ddbe <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801dda6:	2902      	cmp	r1, #2
 801dda8:	d00f      	beq.n	801ddca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801ddaa:	2903      	cmp	r1, #3
 801ddac:	d010      	beq.n	801ddd0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801ddae:	2901      	cmp	r1, #1
 801ddb0:	d101      	bne.n	801ddb6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ddb2:	2001      	movs	r0, #1
 801ddb4:	4770      	bx	lr
 801ddb6:	4b08      	ldr	r3, [pc, #32]	; (801ddd8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801ddb8:	8819      	ldrh	r1, [r3, #0]
 801ddba:	4248      	negs	r0, r1
 801ddbc:	4770      	bx	lr
 801ddbe:	2902      	cmp	r1, #2
 801ddc0:	d006      	beq.n	801ddd0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801ddc2:	2903      	cmp	r1, #3
 801ddc4:	d0f7      	beq.n	801ddb6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ddc6:	2901      	cmp	r1, #1
 801ddc8:	d1f3      	bne.n	801ddb2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801ddca:	4b03      	ldr	r3, [pc, #12]	; (801ddd8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801ddcc:	8818      	ldrh	r0, [r3, #0]
 801ddce:	4770      	bx	lr
 801ddd0:	f04f 30ff 	mov.w	r0, #4294967295
 801ddd4:	4770      	bx	lr
 801ddd6:	bf00      	nop
 801ddd8:	2000bcc2 	.word	0x2000bcc2

0801dddc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801dddc:	b170      	cbz	r0, 801ddfc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801ddde:	2902      	cmp	r1, #2
 801dde0:	d012      	beq.n	801de08 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801dde2:	2903      	cmp	r1, #3
 801dde4:	d006      	beq.n	801ddf4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801dde6:	2901      	cmp	r1, #1
 801dde8:	d001      	beq.n	801ddee <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801ddea:	2001      	movs	r0, #1
 801ddec:	4770      	bx	lr
 801ddee:	4b08      	ldr	r3, [pc, #32]	; (801de10 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801ddf0:	8818      	ldrh	r0, [r3, #0]
 801ddf2:	4770      	bx	lr
 801ddf4:	4b06      	ldr	r3, [pc, #24]	; (801de10 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801ddf6:	8818      	ldrh	r0, [r3, #0]
 801ddf8:	4240      	negs	r0, r0
 801ddfa:	4770      	bx	lr
 801ddfc:	2902      	cmp	r1, #2
 801ddfe:	d0f9      	beq.n	801ddf4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801de00:	2903      	cmp	r1, #3
 801de02:	d0f2      	beq.n	801ddea <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801de04:	2901      	cmp	r1, #1
 801de06:	d1f2      	bne.n	801ddee <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801de08:	f04f 30ff 	mov.w	r0, #4294967295
 801de0c:	4770      	bx	lr
 801de0e:	bf00      	nop
 801de10:	2000bcc2 	.word	0x2000bcc2

0801de14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801de14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de18:	b095      	sub	sp, #84	; 0x54
 801de1a:	9109      	str	r1, [sp, #36]	; 0x24
 801de1c:	a910      	add	r1, sp, #64	; 0x40
 801de1e:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801de22:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801de26:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801de2a:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801de2e:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801de32:	e881 000c 	stmia.w	r1, {r2, r3}
 801de36:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801de3a:	9306      	str	r3, [sp, #24]
 801de3c:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801de40:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801de44:	930e      	str	r3, [sp, #56]	; 0x38
 801de46:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801de4a:	798f      	ldrb	r7, [r1, #6]
 801de4c:	930a      	str	r3, [sp, #40]	; 0x28
 801de4e:	7b4b      	ldrb	r3, [r1, #13]
 801de50:	0158      	lsls	r0, r3, #5
 801de52:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801de56:	4338      	orrs	r0, r7
 801de58:	9008      	str	r0, [sp, #32]
 801de5a:	f000 8174 	beq.w	801e146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801de5e:	011b      	lsls	r3, r3, #4
 801de60:	79c8      	ldrb	r0, [r1, #7]
 801de62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801de66:	4303      	orrs	r3, r0
 801de68:	9307      	str	r3, [sp, #28]
 801de6a:	f000 816c 	beq.w	801e146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801de6e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801de72:	b29b      	uxth	r3, r3
 801de74:	2e00      	cmp	r6, #0
 801de76:	f000 8112 	beq.w	801e09e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801de7a:	1af6      	subs	r6, r6, r3
 801de7c:	b2b6      	uxth	r6, r6
 801de7e:	0433      	lsls	r3, r6, #16
 801de80:	d502      	bpl.n	801de88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801de82:	1bad      	subs	r5, r5, r6
 801de84:	2600      	movs	r6, #0
 801de86:	b22d      	sxth	r5, r5
 801de88:	f9b2 1000 	ldrsh.w	r1, [r2]
 801de8c:	a810      	add	r0, sp, #64	; 0x40
 801de8e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801de92:	428d      	cmp	r5, r1
 801de94:	b28b      	uxth	r3, r1
 801de96:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801de9a:	bfbf      	itttt	lt
 801de9c:	18f6      	addlt	r6, r6, r3
 801de9e:	1b75      	sublt	r5, r6, r5
 801dea0:	b2ae      	uxthlt	r6, r5
 801dea2:	460d      	movlt	r5, r1
 801dea4:	8891      	ldrh	r1, [r2, #4]
 801dea6:	440b      	add	r3, r1
 801dea8:	4629      	mov	r1, r5
 801deaa:	b21b      	sxth	r3, r3
 801deac:	930d      	str	r3, [sp, #52]	; 0x34
 801deae:	88d3      	ldrh	r3, [r2, #6]
 801deb0:	9a06      	ldr	r2, [sp, #24]
 801deb2:	449a      	add	sl, r3
 801deb4:	fa0f f38a 	sxth.w	r3, sl
 801deb8:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801debc:	930c      	str	r3, [sp, #48]	; 0x30
 801debe:	4bb8      	ldr	r3, [pc, #736]	; (801e1a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801dec0:	f893 b000 	ldrb.w	fp, [r3]
 801dec4:	f10b 3cff 	add.w	ip, fp, #4294967295
 801dec8:	f1dc 0300 	rsbs	r3, ip, #0
 801decc:	eb43 030c 	adc.w	r3, r3, ip
 801ded0:	930b      	str	r3, [sp, #44]	; 0x2c
 801ded2:	464b      	mov	r3, r9
 801ded4:	f7fa fcb2 	bl	801883c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ded8:	4629      	mov	r1, r5
 801deda:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801dede:	464b      	mov	r3, r9
 801dee0:	9a06      	ldr	r2, [sp, #24]
 801dee2:	a810      	add	r0, sp, #64	; 0x40
 801dee4:	f7fa fcc2 	bl	801886c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801dee8:	a914      	add	r1, sp, #80	; 0x50
 801deea:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801deee:	a813      	add	r0, sp, #76	; 0x4c
 801def0:	f7fa fd9c 	bl	8018a2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801def4:	f1b9 0f00 	cmp.w	r9, #0
 801def8:	f040 80d4 	bne.w	801e0a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801defc:	f1bb 0f01 	cmp.w	fp, #1
 801df00:	f040 80d8 	bne.w	801e0b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801df04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df06:	2b00      	cmp	r3, #0
 801df08:	f040 8122 	bne.w	801e150 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801df0c:	4ba5      	ldr	r3, [pc, #660]	; (801e1a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801df0e:	6818      	ldr	r0, [r3, #0]
 801df10:	6803      	ldr	r3, [r0, #0]
 801df12:	6a1b      	ldr	r3, [r3, #32]
 801df14:	4798      	blx	r3
 801df16:	4aa4      	ldr	r2, [pc, #656]	; (801e1a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801df18:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801df1c:	8811      	ldrh	r1, [r2, #0]
 801df1e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801df22:	fb01 2303 	mla	r3, r1, r3, r2
 801df26:	2201      	movs	r2, #1
 801df28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df2c:	4590      	cmp	r8, r2
 801df2e:	4403      	add	r3, r0
 801df30:	9307      	str	r3, [sp, #28]
 801df32:	fa02 f308 	lsl.w	r3, r2, r8
 801df36:	f103 33ff 	add.w	r3, r3, #4294967295
 801df3a:	b2db      	uxtb	r3, r3
 801df3c:	930f      	str	r3, [sp, #60]	; 0x3c
 801df3e:	f000 8109 	beq.w	801e154 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801df42:	f1b8 0f02 	cmp.w	r8, #2
 801df46:	f000 813e 	beq.w	801e1c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801df4a:	f1b8 0f04 	cmp.w	r8, #4
 801df4e:	f000 8132 	beq.w	801e1b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801df52:	b906      	cbnz	r6, 801df56 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801df54:	b174      	cbz	r4, 801df74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801df56:	fb17 6304 	smlabb	r3, r7, r4, r6
 801df5a:	9924      	ldr	r1, [sp, #144]	; 0x90
 801df5c:	ebaa 0a04 	sub.w	sl, sl, r4
 801df60:	fb13 f308 	smulbb	r3, r3, r8
 801df64:	fa1f fa8a 	uxth.w	sl, sl
 801df68:	b29b      	uxth	r3, r3
 801df6a:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801df6e:	f003 0407 	and.w	r4, r3, #7
 801df72:	9124      	str	r1, [sp, #144]	; 0x90
 801df74:	4649      	mov	r1, r9
 801df76:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801df78:	f7ff ff14 	bl	801dda4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801df7c:	4649      	mov	r1, r9
 801df7e:	4683      	mov	fp, r0
 801df80:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801df82:	f7ff ff2b 	bl	801dddc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801df86:	9906      	ldr	r1, [sp, #24]
 801df88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df8a:	1bad      	subs	r5, r5, r6
 801df8c:	1a5b      	subs	r3, r3, r1
 801df8e:	459a      	cmp	sl, r3
 801df90:	bfa8      	it	ge
 801df92:	469a      	movge	sl, r3
 801df94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df96:	1b5d      	subs	r5, r3, r5
 801df98:	9b08      	ldr	r3, [sp, #32]
 801df9a:	429d      	cmp	r5, r3
 801df9c:	bfd4      	ite	le
 801df9e:	ebc6 0605 	rsble	r6, r6, r5
 801dfa2:	ebc6 0603 	rsbgt	r6, r6, r3
 801dfa6:	1bbf      	subs	r7, r7, r6
 801dfa8:	fb0b 0016 	mls	r0, fp, r6, r0
 801dfac:	fb08 f307 	mul.w	r3, r8, r7
 801dfb0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dfb4:	9308      	str	r3, [sp, #32]
 801dfb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dfb8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801dfbc:	930b      	str	r3, [sp, #44]	; 0x2c
 801dfbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dfc0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dfc4:	930c      	str	r3, [sp, #48]	; 0x30
 801dfc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dfc8:	b2db      	uxtb	r3, r3
 801dfca:	930d      	str	r3, [sp, #52]	; 0x34
 801dfcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dfce:	7819      	ldrb	r1, [r3, #0]
 801dfd0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801dfd4:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801dfd8:	4121      	asrs	r1, r4
 801dfda:	9306      	str	r3, [sp, #24]
 801dfdc:	fb03 0b0b 	mla	fp, r3, fp, r0
 801dfe0:	b2c9      	uxtb	r1, r1
 801dfe2:	f1ba 0f00 	cmp.w	sl, #0
 801dfe6:	f340 80d1 	ble.w	801e18c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801dfea:	46b6      	mov	lr, r6
 801dfec:	9807      	ldr	r0, [sp, #28]
 801dfee:	f1be 0f00 	cmp.w	lr, #0
 801dff2:	f340 80b8 	ble.w	801e166 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801dff6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dff8:	400b      	ands	r3, r1
 801dffa:	d03e      	beq.n	801e07a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801dffc:	fb13 f302 	smulbb	r3, r3, r2
 801e000:	2bfe      	cmp	r3, #254	; 0xfe
 801e002:	dd03      	ble.n	801e00c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801e004:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e006:	2dff      	cmp	r5, #255	; 0xff
 801e008:	f000 80a6 	beq.w	801e158 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801e00c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e00e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e010:	fb15 f303 	smulbb	r3, r5, r3
 801e014:	b29b      	uxth	r3, r3
 801e016:	1c5d      	adds	r5, r3, #1
 801e018:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801e01c:	7805      	ldrb	r5, [r0, #0]
 801e01e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e022:	fa1f fc83 	uxth.w	ip, r3
 801e026:	43db      	mvns	r3, r3
 801e028:	fb17 f90c 	smulbb	r9, r7, ip
 801e02c:	b2db      	uxtb	r3, r3
 801e02e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e030:	fb05 9503 	mla	r5, r5, r3, r9
 801e034:	b2ad      	uxth	r5, r5
 801e036:	f105 0901 	add.w	r9, r5, #1
 801e03a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e03e:	fb17 f90c 	smulbb	r9, r7, ip
 801e042:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e044:	122d      	asrs	r5, r5, #8
 801e046:	fb17 fc0c 	smulbb	ip, r7, ip
 801e04a:	7005      	strb	r5, [r0, #0]
 801e04c:	7845      	ldrb	r5, [r0, #1]
 801e04e:	fb05 9503 	mla	r5, r5, r3, r9
 801e052:	b2ad      	uxth	r5, r5
 801e054:	f105 0901 	add.w	r9, r5, #1
 801e058:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e05c:	122d      	asrs	r5, r5, #8
 801e05e:	7045      	strb	r5, [r0, #1]
 801e060:	7885      	ldrb	r5, [r0, #2]
 801e062:	fb05 cc03 	mla	ip, r5, r3, ip
 801e066:	fa1f fc8c 	uxth.w	ip, ip
 801e06a:	f10c 0301 	add.w	r3, ip, #1
 801e06e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e072:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e076:	f880 c002 	strb.w	ip, [r0, #2]
 801e07a:	4444      	add	r4, r8
 801e07c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e080:	b2a4      	uxth	r4, r4
 801e082:	2c07      	cmp	r4, #7
 801e084:	bf89      	itett	hi
 801e086:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801e088:	fa41 f108 	asrls.w	r1, r1, r8
 801e08c:	2400      	movhi	r4, #0
 801e08e:	7859      	ldrbhi	r1, [r3, #1]
 801e090:	bf8a      	itet	hi
 801e092:	3301      	addhi	r3, #1
 801e094:	b2c9      	uxtbls	r1, r1
 801e096:	9324      	strhi	r3, [sp, #144]	; 0x90
 801e098:	9b06      	ldr	r3, [sp, #24]
 801e09a:	4418      	add	r0, r3
 801e09c:	e7a7      	b.n	801dfee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801e09e:	441d      	add	r5, r3
 801e0a0:	b22d      	sxth	r5, r5
 801e0a2:	e6f1      	b.n	801de88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e0a4:	f1b9 0f01 	cmp.w	r9, #1
 801e0a8:	f47f af2c 	bne.w	801df04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e0ac:	f1bb 0f01 	cmp.w	fp, #1
 801e0b0:	f47f af28 	bne.w	801df04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e0b4:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801e1a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e0b8:	f8db 0000 	ldr.w	r0, [fp]
 801e0bc:	6803      	ldr	r3, [r0, #0]
 801e0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0c0:	4798      	blx	r3
 801e0c2:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801e0c6:	465a      	mov	r2, fp
 801e0c8:	d006      	beq.n	801e0d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e0ca:	f1b8 0f04 	cmp.w	r8, #4
 801e0ce:	d13d      	bne.n	801e14c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801e0d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e0d2:	3300      	adds	r3, #0
 801e0d4:	bf18      	it	ne
 801e0d6:	2301      	movne	r3, #1
 801e0d8:	05c0      	lsls	r0, r0, #23
 801e0da:	d567      	bpl.n	801e1ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e0dc:	f1b8 0f08 	cmp.w	r8, #8
 801e0e0:	d164      	bne.n	801e1ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	bf0c      	ite	eq
 801e0e6:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801e0ea:	2180      	movne	r1, #128	; 0x80
 801e0ec:	2e00      	cmp	r6, #0
 801e0ee:	f47f af09 	bne.w	801df04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e0f2:	2c00      	cmp	r4, #0
 801e0f4:	f47f af06 	bne.w	801df04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e0f8:	9b08      	ldr	r3, [sp, #32]
 801e0fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e0fc:	442b      	add	r3, r5
 801e0fe:	4283      	cmp	r3, r0
 801e100:	f73f af00 	bgt.w	801df04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e104:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801e108:	4403      	add	r3, r0
 801e10a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e10c:	4283      	cmp	r3, r0
 801e10e:	f73f aef9 	bgt.w	801df04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e112:	f1b8 0f08 	cmp.w	r8, #8
 801e116:	6810      	ldr	r0, [r2, #0]
 801e118:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801e11c:	bf18      	it	ne
 801e11e:	3701      	addne	r7, #1
 801e120:	6804      	ldr	r4, [r0, #0]
 801e122:	9105      	str	r1, [sp, #20]
 801e124:	bf18      	it	ne
 801e126:	f027 0701 	bicne.w	r7, r7, #1
 801e12a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e12c:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801e130:	bf18      	it	ne
 801e132:	b2bf      	uxthne	r7, r7
 801e134:	9104      	str	r1, [sp, #16]
 801e136:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e138:	e9cd 7a00 	strd	r7, sl, [sp]
 801e13c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e140:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e142:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801e144:	47a0      	blx	r4
 801e146:	b015      	add	sp, #84	; 0x54
 801e148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e14c:	2300      	movs	r3, #0
 801e14e:	e7c3      	b.n	801e0d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e150:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e152:	e6e0      	b.n	801df16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801e154:	22ff      	movs	r2, #255	; 0xff
 801e156:	e6fc      	b.n	801df52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e15a:	7003      	strb	r3, [r0, #0]
 801e15c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e15e:	7043      	strb	r3, [r0, #1]
 801e160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e162:	7083      	strb	r3, [r0, #2]
 801e164:	e789      	b.n	801e07a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e166:	9b08      	ldr	r3, [sp, #32]
 801e168:	b153      	cbz	r3, 801e180 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801e16a:	441c      	add	r4, r3
 801e16c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e16e:	b2a4      	uxth	r4, r4
 801e170:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e174:	f004 0407 	and.w	r4, r4, #7
 801e178:	7819      	ldrb	r1, [r3, #0]
 801e17a:	9324      	str	r3, [sp, #144]	; 0x90
 801e17c:	4121      	asrs	r1, r4
 801e17e:	b2c9      	uxtb	r1, r1
 801e180:	9b07      	ldr	r3, [sp, #28]
 801e182:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e186:	445b      	add	r3, fp
 801e188:	9307      	str	r3, [sp, #28]
 801e18a:	e72a      	b.n	801dfe2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801e18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d1d9      	bne.n	801e146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e192:	4b04      	ldr	r3, [pc, #16]	; (801e1a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801e194:	6818      	ldr	r0, [r3, #0]
 801e196:	6803      	ldr	r3, [r0, #0]
 801e198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e19a:	4798      	blx	r3
 801e19c:	e7d3      	b.n	801e146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e19e:	bf00      	nop
 801e1a0:	2000bcc0 	.word	0x2000bcc0
 801e1a4:	2000bcc8 	.word	0x2000bcc8
 801e1a8:	2000bcc2 	.word	0x2000bcc2
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	f43f aea9 	beq.w	801df04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e1b2:	2180      	movs	r1, #128	; 0x80
 801e1b4:	e79a      	b.n	801e0ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801e1b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e1b8:	b11b      	cbz	r3, 801e1c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801e1ba:	07fb      	lsls	r3, r7, #31
 801e1bc:	d501      	bpl.n	801e1c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801e1be:	3701      	adds	r7, #1
 801e1c0:	b2bf      	uxth	r7, r7
 801e1c2:	2211      	movs	r2, #17
 801e1c4:	e6c5      	b.n	801df52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e1c6:	2255      	movs	r2, #85	; 0x55
 801e1c8:	e6c3      	b.n	801df52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e1ca:	bf00      	nop

0801e1cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e1cc:	b538      	push	{r3, r4, r5, lr}
 801e1ce:	4c15      	ldr	r4, [pc, #84]	; (801e224 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e1d0:	4605      	mov	r5, r0
 801e1d2:	7823      	ldrb	r3, [r4, #0]
 801e1d4:	f3bf 8f5b 	dmb	ish
 801e1d8:	07da      	lsls	r2, r3, #31
 801e1da:	d40b      	bmi.n	801e1f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e1dc:	4620      	mov	r0, r4
 801e1de:	f006 fd5e 	bl	8024c9e <__cxa_guard_acquire>
 801e1e2:	b138      	cbz	r0, 801e1f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e1e4:	4620      	mov	r0, r4
 801e1e6:	f006 fd66 	bl	8024cb6 <__cxa_guard_release>
 801e1ea:	4a0f      	ldr	r2, [pc, #60]	; (801e228 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e1ec:	490f      	ldr	r1, [pc, #60]	; (801e22c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e1ee:	4810      	ldr	r0, [pc, #64]	; (801e230 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e1f0:	f006 fd4b 	bl	8024c8a <__aeabi_atexit>
 801e1f4:	4c0f      	ldr	r4, [pc, #60]	; (801e234 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e1f6:	7823      	ldrb	r3, [r4, #0]
 801e1f8:	f3bf 8f5b 	dmb	ish
 801e1fc:	07db      	lsls	r3, r3, #31
 801e1fe:	d40b      	bmi.n	801e218 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e200:	4620      	mov	r0, r4
 801e202:	f006 fd4c 	bl	8024c9e <__cxa_guard_acquire>
 801e206:	b138      	cbz	r0, 801e218 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e208:	4620      	mov	r0, r4
 801e20a:	f006 fd54 	bl	8024cb6 <__cxa_guard_release>
 801e20e:	4a06      	ldr	r2, [pc, #24]	; (801e228 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e210:	4909      	ldr	r1, [pc, #36]	; (801e238 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e212:	480a      	ldr	r0, [pc, #40]	; (801e23c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e214:	f006 fd39 	bl	8024c8a <__aeabi_atexit>
 801e218:	4b05      	ldr	r3, [pc, #20]	; (801e230 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e21a:	612b      	str	r3, [r5, #16]
 801e21c:	4b07      	ldr	r3, [pc, #28]	; (801e23c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e21e:	616b      	str	r3, [r5, #20]
 801e220:	bd38      	pop	{r3, r4, r5, pc}
 801e222:	bf00      	nop
 801e224:	2000bdd4 	.word	0x2000bdd4
 801e228:	20000000 	.word	0x20000000
 801e22c:	0801ce03 	.word	0x0801ce03
 801e230:	20000088 	.word	0x20000088
 801e234:	2000bdd8 	.word	0x2000bdd8
 801e238:	0801ce01 	.word	0x0801ce01
 801e23c:	2000008c 	.word	0x2000008c

0801e240 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e240:	b538      	push	{r3, r4, r5, lr}
 801e242:	4c15      	ldr	r4, [pc, #84]	; (801e298 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e244:	4605      	mov	r5, r0
 801e246:	7823      	ldrb	r3, [r4, #0]
 801e248:	f3bf 8f5b 	dmb	ish
 801e24c:	07da      	lsls	r2, r3, #31
 801e24e:	d40b      	bmi.n	801e268 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e250:	4620      	mov	r0, r4
 801e252:	f006 fd24 	bl	8024c9e <__cxa_guard_acquire>
 801e256:	b138      	cbz	r0, 801e268 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e258:	4620      	mov	r0, r4
 801e25a:	f006 fd2c 	bl	8024cb6 <__cxa_guard_release>
 801e25e:	4a0f      	ldr	r2, [pc, #60]	; (801e29c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e260:	490f      	ldr	r1, [pc, #60]	; (801e2a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e262:	4810      	ldr	r0, [pc, #64]	; (801e2a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e264:	f006 fd11 	bl	8024c8a <__aeabi_atexit>
 801e268:	4c0f      	ldr	r4, [pc, #60]	; (801e2a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e26a:	7823      	ldrb	r3, [r4, #0]
 801e26c:	f3bf 8f5b 	dmb	ish
 801e270:	07db      	lsls	r3, r3, #31
 801e272:	d40b      	bmi.n	801e28c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e274:	4620      	mov	r0, r4
 801e276:	f006 fd12 	bl	8024c9e <__cxa_guard_acquire>
 801e27a:	b138      	cbz	r0, 801e28c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e27c:	4620      	mov	r0, r4
 801e27e:	f006 fd1a 	bl	8024cb6 <__cxa_guard_release>
 801e282:	4a06      	ldr	r2, [pc, #24]	; (801e29c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e284:	4909      	ldr	r1, [pc, #36]	; (801e2ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e286:	480a      	ldr	r0, [pc, #40]	; (801e2b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e288:	f006 fcff 	bl	8024c8a <__aeabi_atexit>
 801e28c:	4b05      	ldr	r3, [pc, #20]	; (801e2a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e28e:	60ab      	str	r3, [r5, #8]
 801e290:	4b07      	ldr	r3, [pc, #28]	; (801e2b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e292:	60eb      	str	r3, [r5, #12]
 801e294:	bd38      	pop	{r3, r4, r5, pc}
 801e296:	bf00      	nop
 801e298:	2000bdb4 	.word	0x2000bdb4
 801e29c:	20000000 	.word	0x20000000
 801e2a0:	0801ce07 	.word	0x0801ce07
 801e2a4:	20000068 	.word	0x20000068
 801e2a8:	2000bdb8 	.word	0x2000bdb8
 801e2ac:	0801ce05 	.word	0x0801ce05
 801e2b0:	2000006c 	.word	0x2000006c

0801e2b4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e2b4:	b510      	push	{r4, lr}
 801e2b6:	4604      	mov	r4, r0
 801e2b8:	f7ff ff88 	bl	801e1cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e2bc:	4620      	mov	r0, r4
 801e2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2c2:	f7ff bfbd 	b.w	801e240 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e2c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e2c8:	b538      	push	{r3, r4, r5, lr}
 801e2ca:	4c15      	ldr	r4, [pc, #84]	; (801e320 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e2cc:	4605      	mov	r5, r0
 801e2ce:	7823      	ldrb	r3, [r4, #0]
 801e2d0:	f3bf 8f5b 	dmb	ish
 801e2d4:	07da      	lsls	r2, r3, #31
 801e2d6:	d40b      	bmi.n	801e2f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e2d8:	4620      	mov	r0, r4
 801e2da:	f006 fce0 	bl	8024c9e <__cxa_guard_acquire>
 801e2de:	b138      	cbz	r0, 801e2f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e2e0:	4620      	mov	r0, r4
 801e2e2:	f006 fce8 	bl	8024cb6 <__cxa_guard_release>
 801e2e6:	4a0f      	ldr	r2, [pc, #60]	; (801e324 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e2e8:	490f      	ldr	r1, [pc, #60]	; (801e328 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e2ea:	4810      	ldr	r0, [pc, #64]	; (801e32c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e2ec:	f006 fccd 	bl	8024c8a <__aeabi_atexit>
 801e2f0:	4c0f      	ldr	r4, [pc, #60]	; (801e330 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e2f2:	7823      	ldrb	r3, [r4, #0]
 801e2f4:	f3bf 8f5b 	dmb	ish
 801e2f8:	07db      	lsls	r3, r3, #31
 801e2fa:	d40b      	bmi.n	801e314 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e2fc:	4620      	mov	r0, r4
 801e2fe:	f006 fcce 	bl	8024c9e <__cxa_guard_acquire>
 801e302:	b138      	cbz	r0, 801e314 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e304:	4620      	mov	r0, r4
 801e306:	f006 fcd6 	bl	8024cb6 <__cxa_guard_release>
 801e30a:	4a06      	ldr	r2, [pc, #24]	; (801e324 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e30c:	4909      	ldr	r1, [pc, #36]	; (801e334 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e30e:	480a      	ldr	r0, [pc, #40]	; (801e338 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e310:	f006 fcbb 	bl	8024c8a <__aeabi_atexit>
 801e314:	4b05      	ldr	r3, [pc, #20]	; (801e32c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e316:	622b      	str	r3, [r5, #32]
 801e318:	4b07      	ldr	r3, [pc, #28]	; (801e338 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e31a:	626b      	str	r3, [r5, #36]	; 0x24
 801e31c:	bd38      	pop	{r3, r4, r5, pc}
 801e31e:	bf00      	nop
 801e320:	2000bddc 	.word	0x2000bddc
 801e324:	20000000 	.word	0x20000000
 801e328:	0801cdfb 	.word	0x0801cdfb
 801e32c:	20000090 	.word	0x20000090
 801e330:	2000bde0 	.word	0x2000bde0
 801e334:	0801cdf9 	.word	0x0801cdf9
 801e338:	20000094 	.word	0x20000094

0801e33c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e33c:	b538      	push	{r3, r4, r5, lr}
 801e33e:	4c15      	ldr	r4, [pc, #84]	; (801e394 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e340:	4605      	mov	r5, r0
 801e342:	7823      	ldrb	r3, [r4, #0]
 801e344:	f3bf 8f5b 	dmb	ish
 801e348:	07da      	lsls	r2, r3, #31
 801e34a:	d40b      	bmi.n	801e364 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e34c:	4620      	mov	r0, r4
 801e34e:	f006 fca6 	bl	8024c9e <__cxa_guard_acquire>
 801e352:	b138      	cbz	r0, 801e364 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e354:	4620      	mov	r0, r4
 801e356:	f006 fcae 	bl	8024cb6 <__cxa_guard_release>
 801e35a:	4a0f      	ldr	r2, [pc, #60]	; (801e398 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e35c:	490f      	ldr	r1, [pc, #60]	; (801e39c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e35e:	4810      	ldr	r0, [pc, #64]	; (801e3a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e360:	f006 fc93 	bl	8024c8a <__aeabi_atexit>
 801e364:	4c0f      	ldr	r4, [pc, #60]	; (801e3a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e366:	7823      	ldrb	r3, [r4, #0]
 801e368:	f3bf 8f5b 	dmb	ish
 801e36c:	07db      	lsls	r3, r3, #31
 801e36e:	d40b      	bmi.n	801e388 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e370:	4620      	mov	r0, r4
 801e372:	f006 fc94 	bl	8024c9e <__cxa_guard_acquire>
 801e376:	b138      	cbz	r0, 801e388 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e378:	4620      	mov	r0, r4
 801e37a:	f006 fc9c 	bl	8024cb6 <__cxa_guard_release>
 801e37e:	4a06      	ldr	r2, [pc, #24]	; (801e398 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e380:	4909      	ldr	r1, [pc, #36]	; (801e3a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e382:	480a      	ldr	r0, [pc, #40]	; (801e3ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e384:	f006 fc81 	bl	8024c8a <__aeabi_atexit>
 801e388:	4b05      	ldr	r3, [pc, #20]	; (801e3a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e38a:	61ab      	str	r3, [r5, #24]
 801e38c:	4b07      	ldr	r3, [pc, #28]	; (801e3ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e38e:	61eb      	str	r3, [r5, #28]
 801e390:	bd38      	pop	{r3, r4, r5, pc}
 801e392:	bf00      	nop
 801e394:	2000bdbc 	.word	0x2000bdbc
 801e398:	20000000 	.word	0x20000000
 801e39c:	0801cdff 	.word	0x0801cdff
 801e3a0:	20000070 	.word	0x20000070
 801e3a4:	2000bdc0 	.word	0x2000bdc0
 801e3a8:	0801cdfd 	.word	0x0801cdfd
 801e3ac:	20000074 	.word	0x20000074

0801e3b0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e3b0:	b510      	push	{r4, lr}
 801e3b2:	4604      	mov	r4, r0
 801e3b4:	f7ff ff88 	bl	801e2c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e3b8:	4620      	mov	r0, r4
 801e3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3be:	f7ff bfbd 	b.w	801e33c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e3c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801e3c4:	b538      	push	{r3, r4, r5, lr}
 801e3c6:	4c15      	ldr	r4, [pc, #84]	; (801e41c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801e3c8:	4605      	mov	r5, r0
 801e3ca:	7823      	ldrb	r3, [r4, #0]
 801e3cc:	f3bf 8f5b 	dmb	ish
 801e3d0:	07da      	lsls	r2, r3, #31
 801e3d2:	d40b      	bmi.n	801e3ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e3d4:	4620      	mov	r0, r4
 801e3d6:	f006 fc62 	bl	8024c9e <__cxa_guard_acquire>
 801e3da:	b138      	cbz	r0, 801e3ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e3dc:	4620      	mov	r0, r4
 801e3de:	f006 fc6a 	bl	8024cb6 <__cxa_guard_release>
 801e3e2:	4a0f      	ldr	r2, [pc, #60]	; (801e420 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e3e4:	490f      	ldr	r1, [pc, #60]	; (801e424 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801e3e6:	4810      	ldr	r0, [pc, #64]	; (801e428 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e3e8:	f006 fc4f 	bl	8024c8a <__aeabi_atexit>
 801e3ec:	4c0f      	ldr	r4, [pc, #60]	; (801e42c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801e3ee:	7823      	ldrb	r3, [r4, #0]
 801e3f0:	f3bf 8f5b 	dmb	ish
 801e3f4:	07db      	lsls	r3, r3, #31
 801e3f6:	d40b      	bmi.n	801e410 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e3f8:	4620      	mov	r0, r4
 801e3fa:	f006 fc50 	bl	8024c9e <__cxa_guard_acquire>
 801e3fe:	b138      	cbz	r0, 801e410 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e400:	4620      	mov	r0, r4
 801e402:	f006 fc58 	bl	8024cb6 <__cxa_guard_release>
 801e406:	4a06      	ldr	r2, [pc, #24]	; (801e420 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e408:	4909      	ldr	r1, [pc, #36]	; (801e430 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801e40a:	480a      	ldr	r0, [pc, #40]	; (801e434 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e40c:	f006 fc3d 	bl	8024c8a <__aeabi_atexit>
 801e410:	4b05      	ldr	r3, [pc, #20]	; (801e428 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e412:	632b      	str	r3, [r5, #48]	; 0x30
 801e414:	4b07      	ldr	r3, [pc, #28]	; (801e434 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e416:	636b      	str	r3, [r5, #52]	; 0x34
 801e418:	bd38      	pop	{r3, r4, r5, pc}
 801e41a:	bf00      	nop
 801e41c:	2000bdc4 	.word	0x2000bdc4
 801e420:	20000000 	.word	0x20000000
 801e424:	0801cdf3 	.word	0x0801cdf3
 801e428:	20000078 	.word	0x20000078
 801e42c:	2000bdc8 	.word	0x2000bdc8
 801e430:	0801cdf1 	.word	0x0801cdf1
 801e434:	2000007c 	.word	0x2000007c

0801e438 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801e438:	b538      	push	{r3, r4, r5, lr}
 801e43a:	4c15      	ldr	r4, [pc, #84]	; (801e490 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801e43c:	4605      	mov	r5, r0
 801e43e:	7823      	ldrb	r3, [r4, #0]
 801e440:	f3bf 8f5b 	dmb	ish
 801e444:	07da      	lsls	r2, r3, #31
 801e446:	d40b      	bmi.n	801e460 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e448:	4620      	mov	r0, r4
 801e44a:	f006 fc28 	bl	8024c9e <__cxa_guard_acquire>
 801e44e:	b138      	cbz	r0, 801e460 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e450:	4620      	mov	r0, r4
 801e452:	f006 fc30 	bl	8024cb6 <__cxa_guard_release>
 801e456:	4a0f      	ldr	r2, [pc, #60]	; (801e494 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e458:	490f      	ldr	r1, [pc, #60]	; (801e498 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801e45a:	4810      	ldr	r0, [pc, #64]	; (801e49c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e45c:	f006 fc15 	bl	8024c8a <__aeabi_atexit>
 801e460:	4c0f      	ldr	r4, [pc, #60]	; (801e4a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801e462:	7823      	ldrb	r3, [r4, #0]
 801e464:	f3bf 8f5b 	dmb	ish
 801e468:	07db      	lsls	r3, r3, #31
 801e46a:	d40b      	bmi.n	801e484 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e46c:	4620      	mov	r0, r4
 801e46e:	f006 fc16 	bl	8024c9e <__cxa_guard_acquire>
 801e472:	b138      	cbz	r0, 801e484 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e474:	4620      	mov	r0, r4
 801e476:	f006 fc1e 	bl	8024cb6 <__cxa_guard_release>
 801e47a:	4a06      	ldr	r2, [pc, #24]	; (801e494 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e47c:	4909      	ldr	r1, [pc, #36]	; (801e4a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801e47e:	480a      	ldr	r0, [pc, #40]	; (801e4a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e480:	f006 fc03 	bl	8024c8a <__aeabi_atexit>
 801e484:	4b05      	ldr	r3, [pc, #20]	; (801e49c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e486:	62ab      	str	r3, [r5, #40]	; 0x28
 801e488:	4b07      	ldr	r3, [pc, #28]	; (801e4a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e48a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e48c:	bd38      	pop	{r3, r4, r5, pc}
 801e48e:	bf00      	nop
 801e490:	2000bd9c 	.word	0x2000bd9c
 801e494:	20000000 	.word	0x20000000
 801e498:	0801cdf7 	.word	0x0801cdf7
 801e49c:	20000050 	.word	0x20000050
 801e4a0:	2000bda0 	.word	0x2000bda0
 801e4a4:	0801cdf5 	.word	0x0801cdf5
 801e4a8:	20000054 	.word	0x20000054

0801e4ac <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801e4ac:	b510      	push	{r4, lr}
 801e4ae:	4604      	mov	r4, r0
 801e4b0:	f7ff ff88 	bl	801e3c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801e4b4:	4620      	mov	r0, r4
 801e4b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4ba:	f7ff bfbd 	b.w	801e438 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801e4c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e4c0:	b538      	push	{r3, r4, r5, lr}
 801e4c2:	4c15      	ldr	r4, [pc, #84]	; (801e518 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e4c4:	4605      	mov	r5, r0
 801e4c6:	7823      	ldrb	r3, [r4, #0]
 801e4c8:	f3bf 8f5b 	dmb	ish
 801e4cc:	07da      	lsls	r2, r3, #31
 801e4ce:	d40b      	bmi.n	801e4e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e4d0:	4620      	mov	r0, r4
 801e4d2:	f006 fbe4 	bl	8024c9e <__cxa_guard_acquire>
 801e4d6:	b138      	cbz	r0, 801e4e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e4d8:	4620      	mov	r0, r4
 801e4da:	f006 fbec 	bl	8024cb6 <__cxa_guard_release>
 801e4de:	4a0f      	ldr	r2, [pc, #60]	; (801e51c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e4e0:	490f      	ldr	r1, [pc, #60]	; (801e520 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e4e2:	4810      	ldr	r0, [pc, #64]	; (801e524 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e4e4:	f006 fbd1 	bl	8024c8a <__aeabi_atexit>
 801e4e8:	4c0f      	ldr	r4, [pc, #60]	; (801e528 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e4ea:	7823      	ldrb	r3, [r4, #0]
 801e4ec:	f3bf 8f5b 	dmb	ish
 801e4f0:	07db      	lsls	r3, r3, #31
 801e4f2:	d40b      	bmi.n	801e50c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e4f4:	4620      	mov	r0, r4
 801e4f6:	f006 fbd2 	bl	8024c9e <__cxa_guard_acquire>
 801e4fa:	b138      	cbz	r0, 801e50c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e4fc:	4620      	mov	r0, r4
 801e4fe:	f006 fbda 	bl	8024cb6 <__cxa_guard_release>
 801e502:	4a06      	ldr	r2, [pc, #24]	; (801e51c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e504:	4909      	ldr	r1, [pc, #36]	; (801e52c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e506:	480a      	ldr	r0, [pc, #40]	; (801e530 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e508:	f006 fbbf 	bl	8024c8a <__aeabi_atexit>
 801e50c:	4b05      	ldr	r3, [pc, #20]	; (801e524 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e50e:	642b      	str	r3, [r5, #64]	; 0x40
 801e510:	4b07      	ldr	r3, [pc, #28]	; (801e530 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e512:	646b      	str	r3, [r5, #68]	; 0x44
 801e514:	bd38      	pop	{r3, r4, r5, pc}
 801e516:	bf00      	nop
 801e518:	2000bdcc 	.word	0x2000bdcc
 801e51c:	20000000 	.word	0x20000000
 801e520:	0801cdeb 	.word	0x0801cdeb
 801e524:	20000080 	.word	0x20000080
 801e528:	2000bdd0 	.word	0x2000bdd0
 801e52c:	0801cde9 	.word	0x0801cde9
 801e530:	20000084 	.word	0x20000084

0801e534 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e534:	b538      	push	{r3, r4, r5, lr}
 801e536:	4c15      	ldr	r4, [pc, #84]	; (801e58c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e538:	4605      	mov	r5, r0
 801e53a:	7823      	ldrb	r3, [r4, #0]
 801e53c:	f3bf 8f5b 	dmb	ish
 801e540:	07da      	lsls	r2, r3, #31
 801e542:	d40b      	bmi.n	801e55c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e544:	4620      	mov	r0, r4
 801e546:	f006 fbaa 	bl	8024c9e <__cxa_guard_acquire>
 801e54a:	b138      	cbz	r0, 801e55c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e54c:	4620      	mov	r0, r4
 801e54e:	f006 fbb2 	bl	8024cb6 <__cxa_guard_release>
 801e552:	4a0f      	ldr	r2, [pc, #60]	; (801e590 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e554:	490f      	ldr	r1, [pc, #60]	; (801e594 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e556:	4810      	ldr	r0, [pc, #64]	; (801e598 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e558:	f006 fb97 	bl	8024c8a <__aeabi_atexit>
 801e55c:	4c0f      	ldr	r4, [pc, #60]	; (801e59c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e55e:	7823      	ldrb	r3, [r4, #0]
 801e560:	f3bf 8f5b 	dmb	ish
 801e564:	07db      	lsls	r3, r3, #31
 801e566:	d40b      	bmi.n	801e580 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e568:	4620      	mov	r0, r4
 801e56a:	f006 fb98 	bl	8024c9e <__cxa_guard_acquire>
 801e56e:	b138      	cbz	r0, 801e580 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e570:	4620      	mov	r0, r4
 801e572:	f006 fba0 	bl	8024cb6 <__cxa_guard_release>
 801e576:	4a06      	ldr	r2, [pc, #24]	; (801e590 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e578:	4909      	ldr	r1, [pc, #36]	; (801e5a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e57a:	480a      	ldr	r0, [pc, #40]	; (801e5a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e57c:	f006 fb85 	bl	8024c8a <__aeabi_atexit>
 801e580:	4b05      	ldr	r3, [pc, #20]	; (801e598 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e582:	63ab      	str	r3, [r5, #56]	; 0x38
 801e584:	4b07      	ldr	r3, [pc, #28]	; (801e5a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e586:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e588:	bd38      	pop	{r3, r4, r5, pc}
 801e58a:	bf00      	nop
 801e58c:	2000bdac 	.word	0x2000bdac
 801e590:	20000000 	.word	0x20000000
 801e594:	0801cdef 	.word	0x0801cdef
 801e598:	20000060 	.word	0x20000060
 801e59c:	2000bdb0 	.word	0x2000bdb0
 801e5a0:	0801cded 	.word	0x0801cded
 801e5a4:	20000064 	.word	0x20000064

0801e5a8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e5a8:	b510      	push	{r4, lr}
 801e5aa:	4604      	mov	r4, r0
 801e5ac:	f7ff ff88 	bl	801e4c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e5b0:	4620      	mov	r0, r4
 801e5b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5b6:	f7ff bfbd 	b.w	801e534 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e5bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e5bc:	b538      	push	{r3, r4, r5, lr}
 801e5be:	4c15      	ldr	r4, [pc, #84]	; (801e614 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e5c0:	4605      	mov	r5, r0
 801e5c2:	7823      	ldrb	r3, [r4, #0]
 801e5c4:	f3bf 8f5b 	dmb	ish
 801e5c8:	07da      	lsls	r2, r3, #31
 801e5ca:	d40b      	bmi.n	801e5e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e5cc:	4620      	mov	r0, r4
 801e5ce:	f006 fb66 	bl	8024c9e <__cxa_guard_acquire>
 801e5d2:	b138      	cbz	r0, 801e5e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e5d4:	4620      	mov	r0, r4
 801e5d6:	f006 fb6e 	bl	8024cb6 <__cxa_guard_release>
 801e5da:	4a0f      	ldr	r2, [pc, #60]	; (801e618 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e5dc:	490f      	ldr	r1, [pc, #60]	; (801e61c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e5de:	4810      	ldr	r0, [pc, #64]	; (801e620 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e5e0:	f006 fb53 	bl	8024c8a <__aeabi_atexit>
 801e5e4:	4c0f      	ldr	r4, [pc, #60]	; (801e624 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e5e6:	7823      	ldrb	r3, [r4, #0]
 801e5e8:	f3bf 8f5b 	dmb	ish
 801e5ec:	07db      	lsls	r3, r3, #31
 801e5ee:	d40b      	bmi.n	801e608 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e5f0:	4620      	mov	r0, r4
 801e5f2:	f006 fb54 	bl	8024c9e <__cxa_guard_acquire>
 801e5f6:	b138      	cbz	r0, 801e608 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e5f8:	4620      	mov	r0, r4
 801e5fa:	f006 fb5c 	bl	8024cb6 <__cxa_guard_release>
 801e5fe:	4a06      	ldr	r2, [pc, #24]	; (801e618 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e600:	4909      	ldr	r1, [pc, #36]	; (801e628 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e602:	480a      	ldr	r0, [pc, #40]	; (801e62c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e604:	f006 fb41 	bl	8024c8a <__aeabi_atexit>
 801e608:	4b05      	ldr	r3, [pc, #20]	; (801e620 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e60a:	652b      	str	r3, [r5, #80]	; 0x50
 801e60c:	4b07      	ldr	r3, [pc, #28]	; (801e62c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e60e:	656b      	str	r3, [r5, #84]	; 0x54
 801e610:	bd38      	pop	{r3, r4, r5, pc}
 801e612:	bf00      	nop
 801e614:	2000bda4 	.word	0x2000bda4
 801e618:	20000000 	.word	0x20000000
 801e61c:	0801cde3 	.word	0x0801cde3
 801e620:	20000058 	.word	0x20000058
 801e624:	2000bda8 	.word	0x2000bda8
 801e628:	0801cde1 	.word	0x0801cde1
 801e62c:	2000005c 	.word	0x2000005c

0801e630 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e630:	b538      	push	{r3, r4, r5, lr}
 801e632:	4c15      	ldr	r4, [pc, #84]	; (801e688 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e634:	4605      	mov	r5, r0
 801e636:	7823      	ldrb	r3, [r4, #0]
 801e638:	f3bf 8f5b 	dmb	ish
 801e63c:	07da      	lsls	r2, r3, #31
 801e63e:	d40b      	bmi.n	801e658 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e640:	4620      	mov	r0, r4
 801e642:	f006 fb2c 	bl	8024c9e <__cxa_guard_acquire>
 801e646:	b138      	cbz	r0, 801e658 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e648:	4620      	mov	r0, r4
 801e64a:	f006 fb34 	bl	8024cb6 <__cxa_guard_release>
 801e64e:	4a0f      	ldr	r2, [pc, #60]	; (801e68c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e650:	490f      	ldr	r1, [pc, #60]	; (801e690 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e652:	4810      	ldr	r0, [pc, #64]	; (801e694 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e654:	f006 fb19 	bl	8024c8a <__aeabi_atexit>
 801e658:	4c0f      	ldr	r4, [pc, #60]	; (801e698 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e65a:	7823      	ldrb	r3, [r4, #0]
 801e65c:	f3bf 8f5b 	dmb	ish
 801e660:	07db      	lsls	r3, r3, #31
 801e662:	d40b      	bmi.n	801e67c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e664:	4620      	mov	r0, r4
 801e666:	f006 fb1a 	bl	8024c9e <__cxa_guard_acquire>
 801e66a:	b138      	cbz	r0, 801e67c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e66c:	4620      	mov	r0, r4
 801e66e:	f006 fb22 	bl	8024cb6 <__cxa_guard_release>
 801e672:	4a06      	ldr	r2, [pc, #24]	; (801e68c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e674:	4909      	ldr	r1, [pc, #36]	; (801e69c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e676:	480a      	ldr	r0, [pc, #40]	; (801e6a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e678:	f006 fb07 	bl	8024c8a <__aeabi_atexit>
 801e67c:	4b05      	ldr	r3, [pc, #20]	; (801e694 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e67e:	64ab      	str	r3, [r5, #72]	; 0x48
 801e680:	4b07      	ldr	r3, [pc, #28]	; (801e6a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e682:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e684:	bd38      	pop	{r3, r4, r5, pc}
 801e686:	bf00      	nop
 801e688:	2000bd94 	.word	0x2000bd94
 801e68c:	20000000 	.word	0x20000000
 801e690:	0801cde7 	.word	0x0801cde7
 801e694:	20000048 	.word	0x20000048
 801e698:	2000bd98 	.word	0x2000bd98
 801e69c:	0801cde5 	.word	0x0801cde5
 801e6a0:	2000004c 	.word	0x2000004c

0801e6a4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e6a4:	b510      	push	{r4, lr}
 801e6a6:	4604      	mov	r4, r0
 801e6a8:	f7ff ff88 	bl	801e5bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e6ac:	4620      	mov	r0, r4
 801e6ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6b2:	f7ff bfbd 	b.w	801e630 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e6b6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e6b6:	b510      	push	{r4, lr}
 801e6b8:	4604      	mov	r4, r0
 801e6ba:	f7ff fff3 	bl	801e6a4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e6be:	4620      	mov	r0, r4
 801e6c0:	f7ff ff72 	bl	801e5a8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e6c4:	4620      	mov	r0, r4
 801e6c6:	f7ff fe73 	bl	801e3b0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e6ca:	4620      	mov	r0, r4
 801e6cc:	f7ff fdf2 	bl	801e2b4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e6d0:	4620      	mov	r0, r4
 801e6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6d6:	f7ff bee9 	b.w	801e4ac <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801e6dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801e6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6e0:	b087      	sub	sp, #28
 801e6e2:	7888      	ldrb	r0, [r1, #2]
 801e6e4:	4616      	mov	r6, r2
 801e6e6:	9001      	str	r0, [sp, #4]
 801e6e8:	7848      	ldrb	r0, [r1, #1]
 801e6ea:	9100      	str	r1, [sp, #0]
 801e6ec:	9002      	str	r0, [sp, #8]
 801e6ee:	7808      	ldrb	r0, [r1, #0]
 801e6f0:	9901      	ldr	r1, [sp, #4]
 801e6f2:	9003      	str	r0, [sp, #12]
 801e6f4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e6f8:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801e6fc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801e700:	9902      	ldr	r1, [sp, #8]
 801e702:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801e706:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e70a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801e70e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801e712:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e716:	9005      	str	r0, [sp, #20]
 801e718:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801e71c:	fb05 ca0e 	mla	sl, r5, lr, ip
 801e720:	2d00      	cmp	r5, #0
 801e722:	eb06 080a 	add.w	r8, r6, sl
 801e726:	db4a      	blt.n	801e7be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e728:	45a9      	cmp	r9, r5
 801e72a:	dd48      	ble.n	801e7be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e72c:	f1bc 0f00 	cmp.w	ip, #0
 801e730:	db43      	blt.n	801e7ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e732:	45e6      	cmp	lr, ip
 801e734:	dd41      	ble.n	801e7ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e736:	f816 600a 	ldrb.w	r6, [r6, sl]
 801e73a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e73e:	441e      	add	r6, r3
 801e740:	f11c 0001 	adds.w	r0, ip, #1
 801e744:	d43e      	bmi.n	801e7c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e746:	4586      	cmp	lr, r0
 801e748:	dd3c      	ble.n	801e7c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e74a:	2a00      	cmp	r2, #0
 801e74c:	d03a      	beq.n	801e7c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e74e:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e752:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e756:	4418      	add	r0, r3
 801e758:	3501      	adds	r5, #1
 801e75a:	d437      	bmi.n	801e7cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e75c:	45a9      	cmp	r9, r5
 801e75e:	dd35      	ble.n	801e7cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e760:	b3a4      	cbz	r4, 801e7cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e762:	f1bc 0f00 	cmp.w	ip, #0
 801e766:	db2f      	blt.n	801e7c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e768:	45e6      	cmp	lr, ip
 801e76a:	dd2d      	ble.n	801e7c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e76c:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e774:	441d      	add	r5, r3
 801e776:	f11c 0c01 	adds.w	ip, ip, #1
 801e77a:	d42a      	bmi.n	801e7d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e77c:	45e6      	cmp	lr, ip
 801e77e:	dd28      	ble.n	801e7d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e780:	b33a      	cbz	r2, 801e7d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e782:	44c6      	add	lr, r8
 801e784:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e788:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e78c:	4463      	add	r3, ip
 801e78e:	ea6f 0c07 	mvn.w	ip, r7
 801e792:	2a0f      	cmp	r2, #15
 801e794:	f896 a000 	ldrb.w	sl, [r6]
 801e798:	fa5f fc8c 	uxtb.w	ip, ip
 801e79c:	f890 b000 	ldrb.w	fp, [r0]
 801e7a0:	f895 9000 	ldrb.w	r9, [r5]
 801e7a4:	7819      	ldrb	r1, [r3, #0]
 801e7a6:	d801      	bhi.n	801e7ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801e7a8:	2c0f      	cmp	r4, #15
 801e7aa:	d914      	bls.n	801e7d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801e7ac:	4b40      	ldr	r3, [pc, #256]	; (801e8b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801e7ae:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e7b2:	4a40      	ldr	r2, [pc, #256]	; (801e8b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801e7b4:	4840      	ldr	r0, [pc, #256]	; (801e8b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801e7b6:	f006 fa9b 	bl	8024cf0 <__assert_func>
 801e7ba:	ae05      	add	r6, sp, #20
 801e7bc:	e7c0      	b.n	801e740 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801e7be:	a805      	add	r0, sp, #20
 801e7c0:	4606      	mov	r6, r0
 801e7c2:	e7c9      	b.n	801e758 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e7c4:	a805      	add	r0, sp, #20
 801e7c6:	e7c7      	b.n	801e758 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e7c8:	ad05      	add	r5, sp, #20
 801e7ca:	e7d4      	b.n	801e776 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801e7cc:	ab05      	add	r3, sp, #20
 801e7ce:	461d      	mov	r5, r3
 801e7d0:	e7dd      	b.n	801e78e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e7d2:	ab05      	add	r3, sp, #20
 801e7d4:	e7db      	b.n	801e78e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e7d6:	b292      	uxth	r2, r2
 801e7d8:	b2a4      	uxth	r4, r4
 801e7da:	fa1f fc8c 	uxth.w	ip, ip
 801e7de:	fb02 f804 	mul.w	r8, r2, r4
 801e7e2:	0112      	lsls	r2, r2, #4
 801e7e4:	b2bf      	uxth	r7, r7
 801e7e6:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801e7ea:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801e7ee:	eba2 0208 	sub.w	r2, r2, r8
 801e7f2:	b2a4      	uxth	r4, r4
 801e7f4:	b292      	uxth	r2, r2
 801e7f6:	ebae 0e04 	sub.w	lr, lr, r4
 801e7fa:	fb02 fb0b 	mul.w	fp, r2, fp
 801e7fe:	fa1f fe8e 	uxth.w	lr, lr
 801e802:	fb0e ba0a 	mla	sl, lr, sl, fp
 801e806:	fb04 aa09 	mla	sl, r4, r9, sl
 801e80a:	fb08 aa01 	mla	sl, r8, r1, sl
 801e80e:	9903      	ldr	r1, [sp, #12]
 801e810:	fb11 f90c 	smulbb	r9, r1, ip
 801e814:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e818:	9900      	ldr	r1, [sp, #0]
 801e81a:	fb0a 9a07 	mla	sl, sl, r7, r9
 801e81e:	fa1f fa8a 	uxth.w	sl, sl
 801e822:	f10a 0901 	add.w	r9, sl, #1
 801e826:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801e82a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e82e:	f881 a000 	strb.w	sl, [r1]
 801e832:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e836:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e83a:	fb02 fa0a 	mul.w	sl, r2, sl
 801e83e:	9902      	ldr	r1, [sp, #8]
 801e840:	fb0e aa09 	mla	sl, lr, r9, sl
 801e844:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e848:	fb04 aa09 	mla	sl, r4, r9, sl
 801e84c:	f893 9001 	ldrb.w	r9, [r3, #1]
 801e850:	fb08 a909 	mla	r9, r8, r9, sl
 801e854:	fb11 fa0c 	smulbb	sl, r1, ip
 801e858:	9900      	ldr	r1, [sp, #0]
 801e85a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e85e:	fb09 a907 	mla	r9, r9, r7, sl
 801e862:	fa1f f989 	uxth.w	r9, r9
 801e866:	f109 0a01 	add.w	sl, r9, #1
 801e86a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e86e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e872:	f881 9001 	strb.w	r9, [r1, #1]
 801e876:	7880      	ldrb	r0, [r0, #2]
 801e878:	78b6      	ldrb	r6, [r6, #2]
 801e87a:	4342      	muls	r2, r0
 801e87c:	78a8      	ldrb	r0, [r5, #2]
 801e87e:	789b      	ldrb	r3, [r3, #2]
 801e880:	fb0e 2206 	mla	r2, lr, r6, r2
 801e884:	fb04 2400 	mla	r4, r4, r0, r2
 801e888:	fb08 4803 	mla	r8, r8, r3, r4
 801e88c:	9b01      	ldr	r3, [sp, #4]
 801e88e:	fb13 fc0c 	smulbb	ip, r3, ip
 801e892:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e896:	fb08 c707 	mla	r7, r8, r7, ip
 801e89a:	b2bf      	uxth	r7, r7
 801e89c:	f107 0c01 	add.w	ip, r7, #1
 801e8a0:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e8a4:	123f      	asrs	r7, r7, #8
 801e8a6:	708f      	strb	r7, [r1, #2]
 801e8a8:	b007      	add	sp, #28
 801e8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8ae:	bf00      	nop
 801e8b0:	080296e7 	.word	0x080296e7
 801e8b4:	08029bde 	.word	0x08029bde
 801e8b8:	080297b0 	.word	0x080297b0

0801e8bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8c0:	ed2d 8b08 	vpush	{d8-d11}
 801e8c4:	b095      	sub	sp, #84	; 0x54
 801e8c6:	eeb0 aa40 	vmov.f32	s20, s0
 801e8ca:	eef0 9a60 	vmov.f32	s19, s1
 801e8ce:	930a      	str	r3, [sp, #40]	; 0x28
 801e8d0:	eeb0 9a41 	vmov.f32	s18, s2
 801e8d4:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801e8d8:	eeb0 8a62 	vmov.f32	s16, s5
 801e8dc:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801e8de:	eef0 8a43 	vmov.f32	s17, s6
 801e8e2:	930c      	str	r3, [sp, #48]	; 0x30
 801e8e4:	eef0 ba44 	vmov.f32	s23, s8
 801e8e8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e8ec:	eeb0 ba64 	vmov.f32	s22, s9
 801e8f0:	9013      	str	r0, [sp, #76]	; 0x4c
 801e8f2:	eef0 aa45 	vmov.f32	s21, s10
 801e8f6:	9310      	str	r3, [sp, #64]	; 0x40
 801e8f8:	6860      	ldr	r0, [r4, #4]
 801e8fa:	910f      	str	r1, [sp, #60]	; 0x3c
 801e8fc:	9212      	str	r2, [sp, #72]	; 0x48
 801e8fe:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e900:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801e904:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801e908:	fb00 1303 	mla	r3, r0, r3, r1
 801e90c:	6821      	ldr	r1, [r4, #0]
 801e90e:	6854      	ldr	r4, [r2, #4]
 801e910:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e914:	18cb      	adds	r3, r1, r3
 801e916:	930b      	str	r3, [sp, #44]	; 0x2c
 801e918:	6813      	ldr	r3, [r2, #0]
 801e91a:	930e      	str	r3, [sp, #56]	; 0x38
 801e91c:	1d23      	adds	r3, r4, #4
 801e91e:	9309      	str	r3, [sp, #36]	; 0x24
 801e920:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e922:	43db      	mvns	r3, r3
 801e924:	b2db      	uxtb	r3, r3
 801e926:	930d      	str	r3, [sp, #52]	; 0x34
 801e928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e92a:	2b00      	cmp	r3, #0
 801e92c:	dc03      	bgt.n	801e936 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e92e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e930:	2b00      	cmp	r3, #0
 801e932:	f340 823c 	ble.w	801edae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801e936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e938:	2b00      	cmp	r3, #0
 801e93a:	f340 8115 	ble.w	801eb68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801e93e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e940:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e942:	1412      	asrs	r2, r2, #16
 801e944:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e948:	d431      	bmi.n	801e9ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e94a:	1c51      	adds	r1, r2, #1
 801e94c:	428d      	cmp	r5, r1
 801e94e:	dd31      	ble.n	801e9b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e950:	2b00      	cmp	r3, #0
 801e952:	db2f      	blt.n	801e9b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e954:	1c59      	adds	r1, r3, #1
 801e956:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e958:	4288      	cmp	r0, r1
 801e95a:	dd2b      	ble.n	801e9b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e95c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e95e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e960:	3b01      	subs	r3, #1
 801e962:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801e964:	fb02 1203 	mla	r2, r2, r3, r1
 801e968:	1412      	asrs	r2, r2, #16
 801e96a:	d42d      	bmi.n	801e9c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e96c:	3201      	adds	r2, #1
 801e96e:	4295      	cmp	r5, r2
 801e970:	dd2a      	ble.n	801e9c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e972:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e974:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e976:	fb02 1303 	mla	r3, r2, r3, r1
 801e97a:	141b      	asrs	r3, r3, #16
 801e97c:	d424      	bmi.n	801e9c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e97e:	3301      	adds	r3, #1
 801e980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e982:	429a      	cmp	r2, r3
 801e984:	dd20      	ble.n	801e9c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e988:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801e98c:	f103 0c03 	add.w	ip, r3, #3
 801e990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e992:	9311      	str	r3, [sp, #68]	; 0x44
 801e994:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e996:	2b00      	cmp	r3, #0
 801e998:	f300 814f 	bgt.w	801ec3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801e99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e99e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e9a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e9a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e9a8:	441a      	add	r2, r3
 801e9aa:	920b      	str	r2, [sp, #44]	; 0x2c
 801e9ac:	e0de      	b.n	801eb6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801e9ae:	1c51      	adds	r1, r2, #1
 801e9b0:	f040 80cb 	bne.w	801eb4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e9b4:	42aa      	cmp	r2, r5
 801e9b6:	f280 80c8 	bge.w	801eb4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e9ba:	1c5f      	adds	r7, r3, #1
 801e9bc:	f2c0 80c5 	blt.w	801eb4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e9c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e9c2:	4293      	cmp	r3, r2
 801e9c4:	f280 80c1 	bge.w	801eb4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e9cc:	9311      	str	r3, [sp, #68]	; 0x44
 801e9ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	dde3      	ble.n	801e99c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801e9d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e9d6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e9d8:	141a      	asrs	r2, r3, #16
 801e9da:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e9dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e9de:	1400      	asrs	r0, r0, #16
 801e9e0:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801e9e4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e9e8:	f100 810e 	bmi.w	801ec08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801e9ec:	1c46      	adds	r6, r0, #1
 801e9ee:	42b5      	cmp	r5, r6
 801e9f0:	f340 810c 	ble.w	801ec0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e9f4:	2a00      	cmp	r2, #0
 801e9f6:	f2c0 8109 	blt.w	801ec0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e9fa:	1c56      	adds	r6, r2, #1
 801e9fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e9fe:	42b4      	cmp	r4, r6
 801ea00:	f340 8104 	ble.w	801ec0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801ea04:	fb02 0005 	mla	r0, r2, r5, r0
 801ea08:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ea0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ea0c:	f814 e000 	ldrb.w	lr, [r4, r0]
 801ea10:	4402      	add	r2, r0
 801ea12:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ea14:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ea18:	eb00 080e 	add.w	r8, r0, lr
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	f000 80e4 	beq.w	801ebea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801ea22:	f892 c001 	ldrb.w	ip, [r2, #1]
 801ea26:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ea2a:	4484      	add	ip, r0
 801ea2c:	2900      	cmp	r1, #0
 801ea2e:	f000 80e5 	beq.w	801ebfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801ea32:	1950      	adds	r0, r2, r5
 801ea34:	5d52      	ldrb	r2, [r2, r5]
 801ea36:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ea38:	7840      	ldrb	r0, [r0, #1]
 801ea3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ea3e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ea42:	4422      	add	r2, r4
 801ea44:	4420      	add	r0, r4
 801ea46:	b29b      	uxth	r3, r3
 801ea48:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ea4a:	b289      	uxth	r1, r1
 801ea4c:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801ea50:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801ea54:	fb03 fa01 	mul.w	sl, r3, r1
 801ea58:	011b      	lsls	r3, r3, #4
 801ea5a:	f89c e000 	ldrb.w	lr, [ip]
 801ea5e:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801ea62:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801ea66:	eba3 030a 	sub.w	r3, r3, sl
 801ea6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ea6c:	b289      	uxth	r1, r1
 801ea6e:	b29b      	uxth	r3, r3
 801ea70:	eba9 0901 	sub.w	r9, r9, r1
 801ea74:	fb03 fe0e 	mul.w	lr, r3, lr
 801ea78:	fa1f f989 	uxth.w	r9, r9
 801ea7c:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ea80:	f892 b000 	ldrb.w	fp, [r2]
 801ea84:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ea88:	f890 b000 	ldrb.w	fp, [r0]
 801ea8c:	fb0a ee0b 	mla	lr, sl, fp, lr
 801ea90:	f897 b000 	ldrb.w	fp, [r7]
 801ea94:	fb1b fb04 	smulbb	fp, fp, r4
 801ea98:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ea9c:	fb0e be06 	mla	lr, lr, r6, fp
 801eaa0:	fa1f fe8e 	uxth.w	lr, lr
 801eaa4:	f10e 0b01 	add.w	fp, lr, #1
 801eaa8:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801eaac:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801eab0:	f887 b000 	strb.w	fp, [r7]
 801eab4:	f89c e001 	ldrb.w	lr, [ip, #1]
 801eab8:	f898 b001 	ldrb.w	fp, [r8, #1]
 801eabc:	fb03 fe0e 	mul.w	lr, r3, lr
 801eac0:	fb09 ee0b 	mla	lr, r9, fp, lr
 801eac4:	f892 b001 	ldrb.w	fp, [r2, #1]
 801eac8:	fb01 ee0b 	mla	lr, r1, fp, lr
 801eacc:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ead0:	fb0a ee0b 	mla	lr, sl, fp, lr
 801ead4:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ead8:	fb1b fb04 	smulbb	fp, fp, r4
 801eadc:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801eae0:	fb0e be06 	mla	lr, lr, r6, fp
 801eae4:	fa1f fe8e 	uxth.w	lr, lr
 801eae8:	f10e 0b01 	add.w	fp, lr, #1
 801eaec:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801eaf0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801eaf4:	f887 e001 	strb.w	lr, [r7, #1]
 801eaf8:	f89c c002 	ldrb.w	ip, [ip, #2]
 801eafc:	f898 e002 	ldrb.w	lr, [r8, #2]
 801eb00:	fb03 f30c 	mul.w	r3, r3, ip
 801eb04:	fb09 330e 	mla	r3, r9, lr, r3
 801eb08:	f892 e002 	ldrb.w	lr, [r2, #2]
 801eb0c:	7882      	ldrb	r2, [r0, #2]
 801eb0e:	fb01 310e 	mla	r1, r1, lr, r3
 801eb12:	fb0a 1a02 	mla	sl, sl, r2, r1
 801eb16:	78b9      	ldrb	r1, [r7, #2]
 801eb18:	fb11 f104 	smulbb	r1, r1, r4
 801eb1c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801eb20:	fb0a 1606 	mla	r6, sl, r6, r1
 801eb24:	b2b6      	uxth	r6, r6
 801eb26:	1c73      	adds	r3, r6, #1
 801eb28:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801eb2c:	1236      	asrs	r6, r6, #8
 801eb2e:	70be      	strb	r6, [r7, #2]
 801eb30:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eb32:	3703      	adds	r7, #3
 801eb34:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801eb36:	4413      	add	r3, r2
 801eb38:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801eb3a:	9327      	str	r3, [sp, #156]	; 0x9c
 801eb3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eb3e:	4413      	add	r3, r2
 801eb40:	9328      	str	r3, [sp, #160]	; 0xa0
 801eb42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb44:	3b01      	subs	r3, #1
 801eb46:	9311      	str	r3, [sp, #68]	; 0x44
 801eb48:	e741      	b.n	801e9ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801eb4a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eb4c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801eb4e:	4413      	add	r3, r2
 801eb50:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801eb52:	9327      	str	r3, [sp, #156]	; 0x9c
 801eb54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eb56:	4413      	add	r3, r2
 801eb58:	9328      	str	r3, [sp, #160]	; 0xa0
 801eb5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb5c:	3b01      	subs	r3, #1
 801eb5e:	930a      	str	r3, [sp, #40]	; 0x28
 801eb60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb62:	3303      	adds	r3, #3
 801eb64:	930b      	str	r3, [sp, #44]	; 0x2c
 801eb66:	e6e6      	b.n	801e936 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801eb68:	f47f aef8 	bne.w	801e95c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801eb6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eb6e:	2b00      	cmp	r3, #0
 801eb70:	f340 811d 	ble.w	801edae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801eb74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eb78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eb7a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801eb7e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801eb82:	eef0 6a48 	vmov.f32	s13, s16
 801eb86:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801eb8a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801eb8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb92:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801eb96:	eef0 6a68 	vmov.f32	s13, s17
 801eb9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb9e:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801eba2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801eba6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ebaa:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ebae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ebb2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ebb6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ebba:	ee18 2a10 	vmov	r2, s16
 801ebbe:	eeb0 8a47 	vmov.f32	s16, s14
 801ebc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebc6:	ee18 2a90 	vmov	r2, s17
 801ebca:	9329      	str	r3, [sp, #164]	; 0xa4
 801ebcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ebce:	eef0 8a67 	vmov.f32	s17, s15
 801ebd2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebd6:	932a      	str	r3, [sp, #168]	; 0xa8
 801ebd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ebda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ebdc:	3b01      	subs	r3, #1
 801ebde:	930f      	str	r3, [sp, #60]	; 0x3c
 801ebe0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ebe2:	bf08      	it	eq
 801ebe4:	4613      	moveq	r3, r2
 801ebe6:	930a      	str	r3, [sp, #40]	; 0x28
 801ebe8:	e69e      	b.n	801e928 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801ebea:	b151      	cbz	r1, 801ec02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801ebec:	5d52      	ldrb	r2, [r2, r5]
 801ebee:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ebf0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ebf4:	4402      	add	r2, r0
 801ebf6:	4640      	mov	r0, r8
 801ebf8:	46c4      	mov	ip, r8
 801ebfa:	e724      	b.n	801ea46 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801ebfc:	4640      	mov	r0, r8
 801ebfe:	4642      	mov	r2, r8
 801ec00:	e721      	b.n	801ea46 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801ec02:	4640      	mov	r0, r8
 801ec04:	4642      	mov	r2, r8
 801ec06:	e7f7      	b.n	801ebf8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801ec08:	1c46      	adds	r6, r0, #1
 801ec0a:	d191      	bne.n	801eb30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ec0c:	4285      	cmp	r5, r0
 801ec0e:	dd8f      	ble.n	801eb30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ec10:	1c54      	adds	r4, r2, #1
 801ec12:	db8d      	blt.n	801eb30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ec14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ec16:	4294      	cmp	r4, r2
 801ec18:	dd8a      	ble.n	801eb30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ec1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ec1c:	9002      	str	r0, [sp, #8]
 801ec1e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ec20:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801ec24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ec28:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ec2c:	e9cd 5300 	strd	r5, r3, [sp]
 801ec30:	4639      	mov	r1, r7
 801ec32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec34:	f7ff fd52 	bl	801e6dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801ec38:	e77a      	b.n	801eb30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ec3a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ec3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ec3e:	1410      	asrs	r0, r2, #16
 801ec40:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ec44:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ec46:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ec48:	1412      	asrs	r2, r2, #16
 801ec4a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ec4e:	fb05 2000 	mla	r0, r5, r0, r2
 801ec52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ec54:	f814 8000 	ldrb.w	r8, [r4, r0]
 801ec58:	4402      	add	r2, r0
 801ec5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ec5c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ec60:	eb00 0708 	add.w	r7, r0, r8
 801ec64:	2b00      	cmp	r3, #0
 801ec66:	f000 8093 	beq.w	801ed90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801ec6a:	7856      	ldrb	r6, [r2, #1]
 801ec6c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ec70:	4406      	add	r6, r0
 801ec72:	2900      	cmp	r1, #0
 801ec74:	f000 8095 	beq.w	801eda2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801ec78:	1950      	adds	r0, r2, r5
 801ec7a:	5d52      	ldrb	r2, [r2, r5]
 801ec7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ec7e:	7840      	ldrb	r0, [r0, #1]
 801ec80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ec88:	4422      	add	r2, r4
 801ec8a:	4420      	add	r0, r4
 801ec8c:	b29b      	uxth	r3, r3
 801ec8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ec90:	b289      	uxth	r1, r1
 801ec92:	f10c 0c03 	add.w	ip, ip, #3
 801ec96:	f814 b008 	ldrb.w	fp, [r4, r8]
 801ec9a:	fb03 f901 	mul.w	r9, r3, r1
 801ec9e:	011b      	lsls	r3, r3, #4
 801eca0:	f896 8000 	ldrb.w	r8, [r6]
 801eca4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801eca8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ecac:	eba3 0309 	sub.w	r3, r3, r9
 801ecb0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ecb2:	b289      	uxth	r1, r1
 801ecb4:	b29b      	uxth	r3, r3
 801ecb6:	ebae 0e01 	sub.w	lr, lr, r1
 801ecba:	fb03 f808 	mul.w	r8, r3, r8
 801ecbe:	fa1f fe8e 	uxth.w	lr, lr
 801ecc2:	fb0e 880b 	mla	r8, lr, fp, r8
 801ecc6:	f892 b000 	ldrb.w	fp, [r2]
 801ecca:	fb01 880b 	mla	r8, r1, fp, r8
 801ecce:	f890 b000 	ldrb.w	fp, [r0]
 801ecd2:	fb09 880b 	mla	r8, r9, fp, r8
 801ecd6:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801ecda:	fb1b fb04 	smulbb	fp, fp, r4
 801ecde:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ece2:	fb08 b80a 	mla	r8, r8, sl, fp
 801ece6:	fa1f f888 	uxth.w	r8, r8
 801ecea:	f108 0b01 	add.w	fp, r8, #1
 801ecee:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ecf2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ecf6:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801ecfa:	f896 8001 	ldrb.w	r8, [r6, #1]
 801ecfe:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ed02:	fb03 f808 	mul.w	r8, r3, r8
 801ed06:	fb0e 880b 	mla	r8, lr, fp, r8
 801ed0a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ed0e:	fb01 880b 	mla	r8, r1, fp, r8
 801ed12:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ed16:	fb09 880b 	mla	r8, r9, fp, r8
 801ed1a:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801ed1e:	fb1b fb04 	smulbb	fp, fp, r4
 801ed22:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ed26:	fb08 b80a 	mla	r8, r8, sl, fp
 801ed2a:	fa1f f888 	uxth.w	r8, r8
 801ed2e:	f108 0b01 	add.w	fp, r8, #1
 801ed32:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ed36:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ed3a:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801ed3e:	78b6      	ldrb	r6, [r6, #2]
 801ed40:	78bf      	ldrb	r7, [r7, #2]
 801ed42:	4373      	muls	r3, r6
 801ed44:	7896      	ldrb	r6, [r2, #2]
 801ed46:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ed48:	fb0e 3307 	mla	r3, lr, r7, r3
 801ed4c:	fb01 3306 	mla	r3, r1, r6, r3
 801ed50:	7886      	ldrb	r6, [r0, #2]
 801ed52:	fb09 3906 	mla	r9, r9, r6, r3
 801ed56:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801ed5a:	fb13 f304 	smulbb	r3, r3, r4
 801ed5e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ed62:	fb09 390a 	mla	r9, r9, sl, r3
 801ed66:	fa1f f989 	uxth.w	r9, r9
 801ed6a:	f109 0301 	add.w	r3, r9, #1
 801ed6e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801ed72:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ed74:	4413      	add	r3, r2
 801ed76:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ed78:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ed7c:	9327      	str	r3, [sp, #156]	; 0x9c
 801ed7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed80:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801ed84:	4413      	add	r3, r2
 801ed86:	9328      	str	r3, [sp, #160]	; 0xa0
 801ed88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ed8a:	3b01      	subs	r3, #1
 801ed8c:	9311      	str	r3, [sp, #68]	; 0x44
 801ed8e:	e601      	b.n	801e994 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ed90:	b151      	cbz	r1, 801eda8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801ed92:	5d52      	ldrb	r2, [r2, r5]
 801ed94:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ed96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed9a:	4402      	add	r2, r0
 801ed9c:	4638      	mov	r0, r7
 801ed9e:	463e      	mov	r6, r7
 801eda0:	e774      	b.n	801ec8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801eda2:	4638      	mov	r0, r7
 801eda4:	463a      	mov	r2, r7
 801eda6:	e771      	b.n	801ec8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801eda8:	4638      	mov	r0, r7
 801edaa:	463a      	mov	r2, r7
 801edac:	e7f7      	b.n	801ed9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801edae:	b015      	add	sp, #84	; 0x54
 801edb0:	ecbd 8b08 	vpop	{d8-d11}
 801edb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801edb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801edb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edbc:	780d      	ldrb	r5, [r1, #0]
 801edbe:	f891 9002 	ldrb.w	r9, [r1, #2]
 801edc2:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801edc6:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801edca:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801edce:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801edd2:	f891 9001 	ldrb.w	r9, [r1, #1]
 801edd6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801edda:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801edde:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801ede2:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801ede6:	9501      	str	r5, [sp, #4]
 801ede8:	fb06 470c 	mla	r7, r6, ip, r4
 801edec:	2e00      	cmp	r6, #0
 801edee:	eb02 0e07 	add.w	lr, r2, r7
 801edf2:	db46      	blt.n	801ee82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801edf4:	45b0      	cmp	r8, r6
 801edf6:	dd44      	ble.n	801ee82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801edf8:	2c00      	cmp	r4, #0
 801edfa:	db40      	blt.n	801ee7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801edfc:	45a4      	cmp	ip, r4
 801edfe:	dd3e      	ble.n	801ee7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801ee00:	5dd7      	ldrb	r7, [r2, r7]
 801ee02:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ee06:	441f      	add	r7, r3
 801ee08:	1c62      	adds	r2, r4, #1
 801ee0a:	d43d      	bmi.n	801ee88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801ee0c:	4594      	cmp	ip, r2
 801ee0e:	dd3b      	ble.n	801ee88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801ee10:	f1ba 0f00 	cmp.w	sl, #0
 801ee14:	d038      	beq.n	801ee88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801ee16:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801ee1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ee1e:	441d      	add	r5, r3
 801ee20:	3601      	adds	r6, #1
 801ee22:	d435      	bmi.n	801ee90 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801ee24:	45b0      	cmp	r8, r6
 801ee26:	dd33      	ble.n	801ee90 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801ee28:	b390      	cbz	r0, 801ee90 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801ee2a:	2c00      	cmp	r4, #0
 801ee2c:	db2e      	blt.n	801ee8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801ee2e:	45a4      	cmp	ip, r4
 801ee30:	dd2c      	ble.n	801ee8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801ee32:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801ee36:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ee3a:	441e      	add	r6, r3
 801ee3c:	1c62      	adds	r2, r4, #1
 801ee3e:	d42a      	bmi.n	801ee96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801ee40:	4594      	cmp	ip, r2
 801ee42:	dd28      	ble.n	801ee96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801ee44:	f1ba 0f00 	cmp.w	sl, #0
 801ee48:	d025      	beq.n	801ee96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801ee4a:	44f4      	add	ip, lr
 801ee4c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ee50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ee54:	4413      	add	r3, r2
 801ee56:	f1ba 0f0f 	cmp.w	sl, #15
 801ee5a:	f897 8000 	ldrb.w	r8, [r7]
 801ee5e:	f895 9000 	ldrb.w	r9, [r5]
 801ee62:	f896 e000 	ldrb.w	lr, [r6]
 801ee66:	f893 c000 	ldrb.w	ip, [r3]
 801ee6a:	d801      	bhi.n	801ee70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801ee6c:	280f      	cmp	r0, #15
 801ee6e:	d914      	bls.n	801ee9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801ee70:	4b29      	ldr	r3, [pc, #164]	; (801ef18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801ee72:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ee76:	4a29      	ldr	r2, [pc, #164]	; (801ef1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801ee78:	4829      	ldr	r0, [pc, #164]	; (801ef20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801ee7a:	f005 ff39 	bl	8024cf0 <__assert_func>
 801ee7e:	af01      	add	r7, sp, #4
 801ee80:	e7c2      	b.n	801ee08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801ee82:	ad01      	add	r5, sp, #4
 801ee84:	462f      	mov	r7, r5
 801ee86:	e7cb      	b.n	801ee20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ee88:	ad01      	add	r5, sp, #4
 801ee8a:	e7c9      	b.n	801ee20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ee8c:	ae01      	add	r6, sp, #4
 801ee8e:	e7d5      	b.n	801ee3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801ee90:	ab01      	add	r3, sp, #4
 801ee92:	461e      	mov	r6, r3
 801ee94:	e7df      	b.n	801ee56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801ee96:	ab01      	add	r3, sp, #4
 801ee98:	e7dd      	b.n	801ee56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801ee9a:	fa1f f48a 	uxth.w	r4, sl
 801ee9e:	b280      	uxth	r0, r0
 801eea0:	fb04 fa00 	mul.w	sl, r4, r0
 801eea4:	0124      	lsls	r4, r4, #4
 801eea6:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801eeaa:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801eeae:	b282      	uxth	r2, r0
 801eeb0:	eba4 000a 	sub.w	r0, r4, sl
 801eeb4:	ebab 0b02 	sub.w	fp, fp, r2
 801eeb8:	b280      	uxth	r0, r0
 801eeba:	fa1f fb8b 	uxth.w	fp, fp
 801eebe:	fb00 f909 	mul.w	r9, r0, r9
 801eec2:	fb0b 9808 	mla	r8, fp, r8, r9
 801eec6:	fb02 8e0e 	mla	lr, r2, lr, r8
 801eeca:	fb0a ec0c 	mla	ip, sl, ip, lr
 801eece:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eed2:	f881 c000 	strb.w	ip, [r1]
 801eed6:	786c      	ldrb	r4, [r5, #1]
 801eed8:	f897 c001 	ldrb.w	ip, [r7, #1]
 801eedc:	4344      	muls	r4, r0
 801eede:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801eee2:	7874      	ldrb	r4, [r6, #1]
 801eee4:	fb02 cc04 	mla	ip, r2, r4, ip
 801eee8:	785c      	ldrb	r4, [r3, #1]
 801eeea:	fb0a c404 	mla	r4, sl, r4, ip
 801eeee:	1224      	asrs	r4, r4, #8
 801eef0:	704c      	strb	r4, [r1, #1]
 801eef2:	78ad      	ldrb	r5, [r5, #2]
 801eef4:	78bc      	ldrb	r4, [r7, #2]
 801eef6:	4368      	muls	r0, r5
 801eef8:	fb0b 0b04 	mla	fp, fp, r4, r0
 801eefc:	78b0      	ldrb	r0, [r6, #2]
 801eefe:	fb02 b000 	mla	r0, r2, r0, fp
 801ef02:	789a      	ldrb	r2, [r3, #2]
 801ef04:	fb0a 0a02 	mla	sl, sl, r2, r0
 801ef08:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ef0c:	f881 a002 	strb.w	sl, [r1, #2]
 801ef10:	b003      	add	sp, #12
 801ef12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef16:	bf00      	nop
 801ef18:	080296e7 	.word	0x080296e7
 801ef1c:	08029bde 	.word	0x08029bde
 801ef20:	080297b0 	.word	0x080297b0

0801ef24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ef24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef28:	ed2d 8b0a 	vpush	{d8-d12}
 801ef2c:	b08f      	sub	sp, #60	; 0x3c
 801ef2e:	eeb0 aa40 	vmov.f32	s20, s0
 801ef32:	eef0 9a60 	vmov.f32	s19, s1
 801ef36:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801ef38:	eeb0 9a41 	vmov.f32	s18, s2
 801ef3c:	9307      	str	r3, [sp, #28]
 801ef3e:	eeb0 8a62 	vmov.f32	s16, s5
 801ef42:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801ef46:	eef0 8a43 	vmov.f32	s17, s6
 801ef4a:	900d      	str	r0, [sp, #52]	; 0x34
 801ef4c:	eeb0 ca44 	vmov.f32	s24, s8
 801ef50:	6860      	ldr	r0, [r4, #4]
 801ef52:	eef0 ba64 	vmov.f32	s23, s9
 801ef56:	9309      	str	r3, [sp, #36]	; 0x24
 801ef58:	eeb0 ba45 	vmov.f32	s22, s10
 801ef5c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801ef60:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801ef64:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801ef68:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801ef6c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ef6e:	fb00 1303 	mla	r3, r0, r3, r1
 801ef72:	6821      	ldr	r1, [r4, #0]
 801ef74:	6854      	ldr	r4, [r2, #4]
 801ef76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef7a:	3404      	adds	r4, #4
 801ef7c:	18cb      	adds	r3, r1, r3
 801ef7e:	9308      	str	r3, [sp, #32]
 801ef80:	6813      	ldr	r3, [r2, #0]
 801ef82:	930a      	str	r3, [sp, #40]	; 0x28
 801ef84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	dc03      	bgt.n	801ef92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ef8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	f340 81d2 	ble.w	801f336 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801ef92:	9b07      	ldr	r3, [sp, #28]
 801ef94:	2b00      	cmp	r3, #0
 801ef96:	f340 80e3 	ble.w	801f160 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801ef9a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801ef9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef9e:	1412      	asrs	r2, r2, #16
 801efa0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801efa4:	d42f      	bmi.n	801f006 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801efa6:	1c51      	adds	r1, r2, #1
 801efa8:	428d      	cmp	r5, r1
 801efaa:	dd2f      	ble.n	801f00c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801efac:	2b00      	cmp	r3, #0
 801efae:	db2d      	blt.n	801f00c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801efb0:	1c59      	adds	r1, r3, #1
 801efb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801efb4:	4288      	cmp	r0, r1
 801efb6:	dd29      	ble.n	801f00c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801efb8:	9b07      	ldr	r3, [sp, #28]
 801efba:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801efbc:	3b01      	subs	r3, #1
 801efbe:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801efc0:	fb02 1203 	mla	r2, r2, r3, r1
 801efc4:	1412      	asrs	r2, r2, #16
 801efc6:	d42b      	bmi.n	801f020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801efc8:	3201      	adds	r2, #1
 801efca:	4295      	cmp	r5, r2
 801efcc:	dd28      	ble.n	801f020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801efce:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801efd0:	9924      	ldr	r1, [sp, #144]	; 0x90
 801efd2:	fb02 1303 	mla	r3, r2, r3, r1
 801efd6:	141b      	asrs	r3, r3, #16
 801efd8:	d422      	bmi.n	801f020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801efda:	3301      	adds	r3, #1
 801efdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801efde:	429a      	cmp	r2, r3
 801efe0:	dd1e      	ble.n	801f020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801efe2:	9b08      	ldr	r3, [sp, #32]
 801efe4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801efe8:	f103 0803 	add.w	r8, r3, #3
 801efec:	f1ba 0f00 	cmp.w	sl, #0
 801eff0:	f300 8119 	bgt.w	801f226 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801eff4:	9b07      	ldr	r3, [sp, #28]
 801eff6:	9a08      	ldr	r2, [sp, #32]
 801eff8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801effc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f000:	441a      	add	r2, r3
 801f002:	9208      	str	r2, [sp, #32]
 801f004:	e0ae      	b.n	801f164 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801f006:	1c51      	adds	r1, r2, #1
 801f008:	f040 809b 	bne.w	801f142 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f00c:	42aa      	cmp	r2, r5
 801f00e:	f280 8098 	bge.w	801f142 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f012:	1c5a      	adds	r2, r3, #1
 801f014:	f2c0 8095 	blt.w	801f142 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f01a:	4293      	cmp	r3, r2
 801f01c:	f280 8091 	bge.w	801f142 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f020:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801f024:	f1bb 0f00 	cmp.w	fp, #0
 801f028:	dde4      	ble.n	801eff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801f02a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f02c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f02e:	141a      	asrs	r2, r3, #16
 801f030:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f032:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f034:	1400      	asrs	r0, r0, #16
 801f036:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f03a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f03e:	f100 80dc 	bmi.w	801f1fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801f042:	1c47      	adds	r7, r0, #1
 801f044:	42bd      	cmp	r5, r7
 801f046:	f340 80da 	ble.w	801f1fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f04a:	2a00      	cmp	r2, #0
 801f04c:	f2c0 80d7 	blt.w	801f1fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f050:	f102 0c01 	add.w	ip, r2, #1
 801f054:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f056:	4567      	cmp	r7, ip
 801f058:	f340 80d1 	ble.w	801f1fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f05c:	fb02 0005 	mla	r0, r2, r5, r0
 801f060:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f064:	f817 8000 	ldrb.w	r8, [r7, r0]
 801f068:	4402      	add	r2, r0
 801f06a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f06e:	eb04 0c08 	add.w	ip, r4, r8
 801f072:	2b00      	cmp	r3, #0
 801f074:	f000 80b3 	beq.w	801f1de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801f078:	7857      	ldrb	r7, [r2, #1]
 801f07a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f07e:	4427      	add	r7, r4
 801f080:	2900      	cmp	r1, #0
 801f082:	f000 80b4 	beq.w	801f1ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801f086:	1950      	adds	r0, r2, r5
 801f088:	5d52      	ldrb	r2, [r2, r5]
 801f08a:	7840      	ldrb	r0, [r0, #1]
 801f08c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f090:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f094:	4422      	add	r2, r4
 801f096:	4420      	add	r0, r4
 801f098:	b29b      	uxth	r3, r3
 801f09a:	f814 a008 	ldrb.w	sl, [r4, r8]
 801f09e:	b289      	uxth	r1, r1
 801f0a0:	f897 8000 	ldrb.w	r8, [r7]
 801f0a4:	fb03 f901 	mul.w	r9, r3, r1
 801f0a8:	011b      	lsls	r3, r3, #4
 801f0aa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f0ae:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f0b2:	eba3 0309 	sub.w	r3, r3, r9
 801f0b6:	b289      	uxth	r1, r1
 801f0b8:	b29b      	uxth	r3, r3
 801f0ba:	ebae 0e01 	sub.w	lr, lr, r1
 801f0be:	fb03 f808 	mul.w	r8, r3, r8
 801f0c2:	fa1f fe8e 	uxth.w	lr, lr
 801f0c6:	fb0e 880a 	mla	r8, lr, sl, r8
 801f0ca:	f892 a000 	ldrb.w	sl, [r2]
 801f0ce:	fb01 880a 	mla	r8, r1, sl, r8
 801f0d2:	f890 a000 	ldrb.w	sl, [r0]
 801f0d6:	fb09 880a 	mla	r8, r9, sl, r8
 801f0da:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f0de:	f886 8000 	strb.w	r8, [r6]
 801f0e2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f0e6:	f89c a001 	ldrb.w	sl, [ip, #1]
 801f0ea:	fb03 f808 	mul.w	r8, r3, r8
 801f0ee:	fb0e 880a 	mla	r8, lr, sl, r8
 801f0f2:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f0f6:	fb01 880a 	mla	r8, r1, sl, r8
 801f0fa:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f0fe:	fb09 880a 	mla	r8, r9, sl, r8
 801f102:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f106:	f886 8001 	strb.w	r8, [r6, #1]
 801f10a:	78bf      	ldrb	r7, [r7, #2]
 801f10c:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f110:	437b      	muls	r3, r7
 801f112:	7892      	ldrb	r2, [r2, #2]
 801f114:	fb0e 330c 	mla	r3, lr, ip, r3
 801f118:	fb01 3102 	mla	r1, r1, r2, r3
 801f11c:	7882      	ldrb	r2, [r0, #2]
 801f11e:	fb09 1902 	mla	r9, r9, r2, r1
 801f122:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f126:	f886 9002 	strb.w	r9, [r6, #2]
 801f12a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f12c:	3603      	adds	r6, #3
 801f12e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f130:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f134:	4413      	add	r3, r2
 801f136:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f138:	9323      	str	r3, [sp, #140]	; 0x8c
 801f13a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f13c:	4413      	add	r3, r2
 801f13e:	9324      	str	r3, [sp, #144]	; 0x90
 801f140:	e770      	b.n	801f024 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801f142:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f144:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f146:	4413      	add	r3, r2
 801f148:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f14a:	9323      	str	r3, [sp, #140]	; 0x8c
 801f14c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f14e:	4413      	add	r3, r2
 801f150:	9324      	str	r3, [sp, #144]	; 0x90
 801f152:	9b07      	ldr	r3, [sp, #28]
 801f154:	3b01      	subs	r3, #1
 801f156:	9307      	str	r3, [sp, #28]
 801f158:	9b08      	ldr	r3, [sp, #32]
 801f15a:	3303      	adds	r3, #3
 801f15c:	9308      	str	r3, [sp, #32]
 801f15e:	e718      	b.n	801ef92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f160:	f47f af2a 	bne.w	801efb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801f164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f166:	2b00      	cmp	r3, #0
 801f168:	f340 80e5 	ble.w	801f336 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f16c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f170:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f172:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f176:	eef0 6a48 	vmov.f32	s13, s16
 801f17a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f17e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f182:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f186:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801f18a:	eef0 6a68 	vmov.f32	s13, s17
 801f18e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f192:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801f196:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f19a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f19e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f1a2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f1a6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f1aa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f1ae:	ee18 2a10 	vmov	r2, s16
 801f1b2:	eeb0 8a47 	vmov.f32	s16, s14
 801f1b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1ba:	ee18 2a90 	vmov	r2, s17
 801f1be:	9325      	str	r3, [sp, #148]	; 0x94
 801f1c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f1c2:	eef0 8a67 	vmov.f32	s17, s15
 801f1c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1ca:	9326      	str	r3, [sp, #152]	; 0x98
 801f1cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f1ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f1d0:	3b01      	subs	r3, #1
 801f1d2:	930b      	str	r3, [sp, #44]	; 0x2c
 801f1d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f1d6:	bf08      	it	eq
 801f1d8:	4613      	moveq	r3, r2
 801f1da:	9307      	str	r3, [sp, #28]
 801f1dc:	e6d2      	b.n	801ef84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801f1de:	b149      	cbz	r1, 801f1f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f1e0:	5d52      	ldrb	r2, [r2, r5]
 801f1e2:	4660      	mov	r0, ip
 801f1e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f1e8:	4422      	add	r2, r4
 801f1ea:	4667      	mov	r7, ip
 801f1ec:	e754      	b.n	801f098 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801f1ee:	4660      	mov	r0, ip
 801f1f0:	4662      	mov	r2, ip
 801f1f2:	e751      	b.n	801f098 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801f1f4:	4660      	mov	r0, ip
 801f1f6:	4662      	mov	r2, ip
 801f1f8:	e7f7      	b.n	801f1ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801f1fa:	1c47      	adds	r7, r0, #1
 801f1fc:	d195      	bne.n	801f12a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f1fe:	4285      	cmp	r5, r0
 801f200:	dd93      	ble.n	801f12a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f202:	1c57      	adds	r7, r2, #1
 801f204:	db91      	blt.n	801f12a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f206:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f208:	4297      	cmp	r7, r2
 801f20a:	dd8e      	ble.n	801f12a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f20c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f210:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801f214:	e9cd 5700 	strd	r5, r7, [sp]
 801f218:	4623      	mov	r3, r4
 801f21a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f21c:	4631      	mov	r1, r6
 801f21e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f220:	f7ff fdca 	bl	801edb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801f224:	e781      	b.n	801f12a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f226:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f228:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f22a:	1410      	asrs	r0, r2, #16
 801f22c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f230:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f232:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f234:	1412      	asrs	r2, r2, #16
 801f236:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f23a:	fb05 2000 	mla	r0, r5, r0, r2
 801f23e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f240:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f244:	4402      	add	r2, r0
 801f246:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f24a:	eb04 070e 	add.w	r7, r4, lr
 801f24e:	2b00      	cmp	r3, #0
 801f250:	d063      	beq.n	801f31a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801f252:	7856      	ldrb	r6, [r2, #1]
 801f254:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f258:	4426      	add	r6, r4
 801f25a:	2900      	cmp	r1, #0
 801f25c:	d065      	beq.n	801f32a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801f25e:	1950      	adds	r0, r2, r5
 801f260:	5d52      	ldrb	r2, [r2, r5]
 801f262:	7840      	ldrb	r0, [r0, #1]
 801f264:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f268:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f26c:	4422      	add	r2, r4
 801f26e:	4420      	add	r0, r4
 801f270:	b29b      	uxth	r3, r3
 801f272:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f276:	b289      	uxth	r1, r1
 801f278:	f896 e000 	ldrb.w	lr, [r6]
 801f27c:	f108 0803 	add.w	r8, r8, #3
 801f280:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f284:	fb03 f901 	mul.w	r9, r3, r1
 801f288:	011b      	lsls	r3, r3, #4
 801f28a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f28e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f292:	eba3 0309 	sub.w	r3, r3, r9
 801f296:	b289      	uxth	r1, r1
 801f298:	b29b      	uxth	r3, r3
 801f29a:	ebac 0c01 	sub.w	ip, ip, r1
 801f29e:	fb03 fe0e 	mul.w	lr, r3, lr
 801f2a2:	fa1f fc8c 	uxth.w	ip, ip
 801f2a6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f2aa:	f892 b000 	ldrb.w	fp, [r2]
 801f2ae:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f2b2:	f890 b000 	ldrb.w	fp, [r0]
 801f2b6:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f2ba:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f2be:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f2c2:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f2c6:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f2ca:	fb03 fe0e 	mul.w	lr, r3, lr
 801f2ce:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f2d2:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f2d6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f2da:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f2de:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f2e2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f2e6:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f2ea:	78b6      	ldrb	r6, [r6, #2]
 801f2ec:	78bf      	ldrb	r7, [r7, #2]
 801f2ee:	4373      	muls	r3, r6
 801f2f0:	7896      	ldrb	r6, [r2, #2]
 801f2f2:	7882      	ldrb	r2, [r0, #2]
 801f2f4:	fb0c 3307 	mla	r3, ip, r7, r3
 801f2f8:	fb01 3306 	mla	r3, r1, r6, r3
 801f2fc:	fb09 3902 	mla	r9, r9, r2, r3
 801f300:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f302:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f304:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f308:	4413      	add	r3, r2
 801f30a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f30c:	f808 9c04 	strb.w	r9, [r8, #-4]
 801f310:	9323      	str	r3, [sp, #140]	; 0x8c
 801f312:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f314:	4413      	add	r3, r2
 801f316:	9324      	str	r3, [sp, #144]	; 0x90
 801f318:	e668      	b.n	801efec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f31a:	b149      	cbz	r1, 801f330 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801f31c:	5d52      	ldrb	r2, [r2, r5]
 801f31e:	4638      	mov	r0, r7
 801f320:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f324:	4422      	add	r2, r4
 801f326:	463e      	mov	r6, r7
 801f328:	e7a2      	b.n	801f270 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f32a:	4638      	mov	r0, r7
 801f32c:	463a      	mov	r2, r7
 801f32e:	e79f      	b.n	801f270 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f330:	4638      	mov	r0, r7
 801f332:	463a      	mov	r2, r7
 801f334:	e7f7      	b.n	801f326 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801f336:	b00f      	add	sp, #60	; 0x3c
 801f338:	ecbd 8b0a 	vpop	{d8-d12}
 801f33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f340 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801f340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f344:	b087      	sub	sp, #28
 801f346:	7888      	ldrb	r0, [r1, #2]
 801f348:	9002      	str	r0, [sp, #8]
 801f34a:	7848      	ldrb	r0, [r1, #1]
 801f34c:	9e02      	ldr	r6, [sp, #8]
 801f34e:	9003      	str	r0, [sp, #12]
 801f350:	7808      	ldrb	r0, [r1, #0]
 801f352:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801f356:	9004      	str	r0, [sp, #16]
 801f358:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f35c:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801f360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801f364:	9e03      	ldr	r6, [sp, #12]
 801f366:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801f36a:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801f36e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801f372:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801f376:	fb04 7508 	mla	r5, r4, r8, r7
 801f37a:	2c00      	cmp	r4, #0
 801f37c:	eb02 0905 	add.w	r9, r2, r5
 801f380:	db45      	blt.n	801f40e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801f382:	45a2      	cmp	sl, r4
 801f384:	dd43      	ble.n	801f40e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801f386:	2f00      	cmp	r7, #0
 801f388:	db3f      	blt.n	801f40a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801f38a:	45b8      	cmp	r8, r7
 801f38c:	dd3d      	ble.n	801f40a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801f38e:	5d52      	ldrb	r2, [r2, r5]
 801f390:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f394:	1c7a      	adds	r2, r7, #1
 801f396:	d43d      	bmi.n	801f414 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f398:	4590      	cmp	r8, r2
 801f39a:	dd3b      	ble.n	801f414 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f39c:	f1bc 0f00 	cmp.w	ip, #0
 801f3a0:	d038      	beq.n	801f414 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f3a2:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f3a6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f3aa:	3401      	adds	r4, #1
 801f3ac:	d436      	bmi.n	801f41c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f3ae:	45a2      	cmp	sl, r4
 801f3b0:	dd34      	ble.n	801f41c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f3b2:	f1be 0f00 	cmp.w	lr, #0
 801f3b6:	d031      	beq.n	801f41c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f3b8:	2f00      	cmp	r7, #0
 801f3ba:	db2d      	blt.n	801f418 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801f3bc:	45b8      	cmp	r8, r7
 801f3be:	dd2b      	ble.n	801f418 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801f3c0:	f819 2008 	ldrb.w	r2, [r9, r8]
 801f3c4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801f3c8:	3701      	adds	r7, #1
 801f3ca:	d409      	bmi.n	801f3e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f3cc:	45b8      	cmp	r8, r7
 801f3ce:	dd07      	ble.n	801f3e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f3d0:	f1bc 0f00 	cmp.w	ip, #0
 801f3d4:	d004      	beq.n	801f3e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f3d6:	44c8      	add	r8, r9
 801f3d8:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f3dc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f3e0:	f1bc 0f0f 	cmp.w	ip, #15
 801f3e4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f3e8:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801f3ec:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f3f0:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f3f4:	d802      	bhi.n	801f3fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801f3f6:	f1be 0f0f 	cmp.w	lr, #15
 801f3fa:	d911      	bls.n	801f420 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801f3fc:	4b77      	ldr	r3, [pc, #476]	; (801f5dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801f3fe:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f402:	4a77      	ldr	r2, [pc, #476]	; (801f5e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801f404:	4877      	ldr	r0, [pc, #476]	; (801f5e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801f406:	f005 fc73 	bl	8024cf0 <__assert_func>
 801f40a:	4606      	mov	r6, r0
 801f40c:	e7c2      	b.n	801f394 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801f40e:	4605      	mov	r5, r0
 801f410:	4606      	mov	r6, r0
 801f412:	e7ca      	b.n	801f3aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801f414:	4605      	mov	r5, r0
 801f416:	e7c8      	b.n	801f3aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801f418:	4604      	mov	r4, r0
 801f41a:	e7d5      	b.n	801f3c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801f41c:	4604      	mov	r4, r0
 801f41e:	e7df      	b.n	801f3e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f420:	fa1f fc8c 	uxth.w	ip, ip
 801f424:	fa1f f28e 	uxth.w	r2, lr
 801f428:	fb02 fe0c 	mul.w	lr, r2, ip
 801f42c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f430:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801f434:	ebac 070e 	sub.w	r7, ip, lr
 801f438:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f43c:	b292      	uxth	r2, r2
 801f43e:	b2bf      	uxth	r7, r7
 801f440:	1a9b      	subs	r3, r3, r2
 801f442:	fb07 fc0a 	mul.w	ip, r7, sl
 801f446:	b29b      	uxth	r3, r3
 801f448:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f44c:	9301      	str	r3, [sp, #4]
 801f44e:	fb02 cc09 	mla	ip, r2, r9, ip
 801f452:	fb0e cc08 	mla	ip, lr, r8, ip
 801f456:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f45a:	9305      	str	r3, [sp, #20]
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	f000 80b9 	beq.w	801f5d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801f462:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f466:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f46a:	fb0b fc0c 	mul.w	ip, fp, ip
 801f46e:	fb0b f606 	mul.w	r6, fp, r6
 801f472:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f476:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f47a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f47e:	44dc      	add	ip, fp
 801f480:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f484:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f488:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f48c:	fb0a fb0b 	mul.w	fp, sl, fp
 801f490:	fb0a fa05 	mul.w	sl, sl, r5
 801f494:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f498:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f49c:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801f4a0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f4a4:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f4a8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f4ac:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801f4b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f4b4:	0a36      	lsrs	r6, r6, #8
 801f4b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f4ba:	44dc      	add	ip, fp
 801f4bc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f4c0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f4c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f4c8:	fb09 fb0b 	mul.w	fp, r9, fp
 801f4cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f4d0:	fb09 f904 	mul.w	r9, r9, r4
 801f4d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f4d8:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801f4dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f4e0:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801f4e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f4e8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f4ec:	fb0c fc07 	mul.w	ip, ip, r7
 801f4f0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f4f4:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801f4f8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f4fc:	445d      	add	r5, fp
 801f4fe:	fb08 f404 	mul.w	r4, r8, r4
 801f502:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f506:	fb08 f800 	mul.w	r8, r8, r0
 801f50a:	0a2d      	lsrs	r5, r5, #8
 801f50c:	0a20      	lsrs	r0, r4, #8
 801f50e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801f512:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f516:	fb07 f70a 	mul.w	r7, r7, sl
 801f51a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f51e:	4404      	add	r4, r0
 801f520:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801f524:	0a24      	lsrs	r4, r4, #8
 801f526:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801f52a:	9801      	ldr	r0, [sp, #4]
 801f52c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f530:	fb03 cc00 	mla	ip, r3, r0, ip
 801f534:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f538:	fb00 7606 	mla	r6, r0, r6, r7
 801f53c:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801f540:	fb04 cc0e 	mla	ip, r4, lr, ip
 801f544:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f548:	b280      	uxth	r0, r0
 801f54a:	9c04      	ldr	r4, [sp, #16]
 801f54c:	fb05 cc02 	mla	ip, r5, r2, ip
 801f550:	fb0e 6e08 	mla	lr, lr, r8, r6
 801f554:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f558:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801f55c:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801f560:	fb02 ec0c 	mla	ip, r2, ip, lr
 801f564:	9a05      	ldr	r2, [sp, #20]
 801f566:	4342      	muls	r2, r0
 801f568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f56c:	1c53      	adds	r3, r2, #1
 801f56e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f572:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f576:	ea45 0c0c 	orr.w	ip, r5, ip
 801f57a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801f57e:	fa5f f28c 	uxtb.w	r2, ip
 801f582:	b2db      	uxtb	r3, r3
 801f584:	fb14 f403 	smulbb	r4, r4, r3
 801f588:	fb02 4200 	mla	r2, r2, r0, r4
 801f58c:	b292      	uxth	r2, r2
 801f58e:	1c54      	adds	r4, r2, #1
 801f590:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801f594:	9c03      	ldr	r4, [sp, #12]
 801f596:	fb14 f403 	smulbb	r4, r4, r3
 801f59a:	1212      	asrs	r2, r2, #8
 801f59c:	700a      	strb	r2, [r1, #0]
 801f59e:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801f5a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f5a6:	fb02 4200 	mla	r2, r2, r0, r4
 801f5aa:	b292      	uxth	r2, r2
 801f5ac:	1c54      	adds	r4, r2, #1
 801f5ae:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801f5b2:	1212      	asrs	r2, r2, #8
 801f5b4:	704a      	strb	r2, [r1, #1]
 801f5b6:	9a02      	ldr	r2, [sp, #8]
 801f5b8:	fb12 f303 	smulbb	r3, r2, r3
 801f5bc:	fb0c 3c00 	mla	ip, ip, r0, r3
 801f5c0:	fa1f fc8c 	uxth.w	ip, ip
 801f5c4:	f10c 0301 	add.w	r3, ip, #1
 801f5c8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f5cc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f5d0:	f881 c002 	strb.w	ip, [r1, #2]
 801f5d4:	b007      	add	sp, #28
 801f5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5da:	bf00      	nop
 801f5dc:	080296e7 	.word	0x080296e7
 801f5e0:	08029bde 	.word	0x08029bde
 801f5e4:	080297b0 	.word	0x080297b0

0801f5e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5ec:	ed2d 8b08 	vpush	{d8-d11}
 801f5f0:	b09b      	sub	sp, #108	; 0x6c
 801f5f2:	eeb0 aa40 	vmov.f32	s20, s0
 801f5f6:	eef0 9a60 	vmov.f32	s19, s1
 801f5fa:	930a      	str	r3, [sp, #40]	; 0x28
 801f5fc:	eeb0 9a41 	vmov.f32	s18, s2
 801f600:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801f604:	eeb0 8a62 	vmov.f32	s16, s5
 801f608:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801f60a:	eef0 8a43 	vmov.f32	s17, s6
 801f60e:	9312      	str	r3, [sp, #72]	; 0x48
 801f610:	eef0 ba44 	vmov.f32	s23, s8
 801f614:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801f618:	eeb0 ba64 	vmov.f32	s22, s9
 801f61c:	9019      	str	r0, [sp, #100]	; 0x64
 801f61e:	eef0 aa45 	vmov.f32	s21, s10
 801f622:	9114      	str	r1, [sp, #80]	; 0x50
 801f624:	9317      	str	r3, [sp, #92]	; 0x5c
 801f626:	6868      	ldr	r0, [r5, #4]
 801f628:	9218      	str	r2, [sp, #96]	; 0x60
 801f62a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801f62c:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801f630:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801f634:	fb00 1303 	mla	r3, r0, r3, r1
 801f638:	6829      	ldr	r1, [r5, #0]
 801f63a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f63e:	18cb      	adds	r3, r1, r3
 801f640:	930d      	str	r3, [sp, #52]	; 0x34
 801f642:	6813      	ldr	r3, [r2, #0]
 801f644:	9313      	str	r3, [sp, #76]	; 0x4c
 801f646:	6853      	ldr	r3, [r2, #4]
 801f648:	3304      	adds	r3, #4
 801f64a:	9309      	str	r3, [sp, #36]	; 0x24
 801f64c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f64e:	2b00      	cmp	r3, #0
 801f650:	dc03      	bgt.n	801f65a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f652:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f654:	2b00      	cmp	r3, #0
 801f656:	f340 8352 	ble.w	801fcfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801f65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f65c:	2b00      	cmp	r3, #0
 801f65e:	f340 81a2 	ble.w	801f9a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801f662:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f664:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f666:	1412      	asrs	r2, r2, #16
 801f668:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f66c:	d431      	bmi.n	801f6d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f66e:	1c51      	adds	r1, r2, #1
 801f670:	428c      	cmp	r4, r1
 801f672:	dd31      	ble.n	801f6d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f674:	2b00      	cmp	r3, #0
 801f676:	db2f      	blt.n	801f6d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f678:	1c59      	adds	r1, r3, #1
 801f67a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f67c:	4288      	cmp	r0, r1
 801f67e:	dd2b      	ble.n	801f6d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f682:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f684:	3b01      	subs	r3, #1
 801f686:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801f688:	fb02 1203 	mla	r2, r2, r3, r1
 801f68c:	1412      	asrs	r2, r2, #16
 801f68e:	d42d      	bmi.n	801f6ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f690:	3201      	adds	r2, #1
 801f692:	4294      	cmp	r4, r2
 801f694:	dd2a      	ble.n	801f6ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f696:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f698:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801f69a:	fb02 1303 	mla	r3, r2, r3, r1
 801f69e:	141b      	asrs	r3, r3, #16
 801f6a0:	d424      	bmi.n	801f6ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f6a2:	3301      	adds	r3, #1
 801f6a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f6a6:	429a      	cmp	r2, r3
 801f6a8:	dd20      	ble.n	801f6ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f6aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f6ac:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801f6b0:	f103 0e03 	add.w	lr, r3, #3
 801f6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f6b6:	9315      	str	r3, [sp, #84]	; 0x54
 801f6b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f6ba:	2b00      	cmp	r3, #0
 801f6bc:	f300 81de 	bgt.w	801fa7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801f6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f6c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f6c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f6c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f6cc:	441a      	add	r2, r3
 801f6ce:	920d      	str	r2, [sp, #52]	; 0x34
 801f6d0:	e16b      	b.n	801f9aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801f6d2:	1c51      	adds	r1, r2, #1
 801f6d4:	f040 8158 	bne.w	801f988 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f6d8:	42a2      	cmp	r2, r4
 801f6da:	f280 8155 	bge.w	801f988 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f6de:	1c5a      	adds	r2, r3, #1
 801f6e0:	f2c0 8152 	blt.w	801f988 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f6e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f6e6:	4293      	cmp	r3, r2
 801f6e8:	f280 814e 	bge.w	801f988 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f6ee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f6f0:	9316      	str	r3, [sp, #88]	; 0x58
 801f6f2:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801f6f6:	9315      	str	r3, [sp, #84]	; 0x54
 801f6f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f6fa:	2b00      	cmp	r3, #0
 801f6fc:	dde0      	ble.n	801f6c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f6fe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f700:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f702:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f706:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f708:	141b      	asrs	r3, r3, #16
 801f70a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f70e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f710:	1412      	asrs	r2, r2, #16
 801f712:	f100 819a 	bmi.w	801fa4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801f716:	1c55      	adds	r5, r2, #1
 801f718:	42ac      	cmp	r4, r5
 801f71a:	f340 8198 	ble.w	801fa4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f71e:	2b00      	cmp	r3, #0
 801f720:	f2c0 8195 	blt.w	801fa4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f724:	1c5d      	adds	r5, r3, #1
 801f726:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f728:	42af      	cmp	r7, r5
 801f72a:	f340 8190 	ble.w	801fa4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f72e:	fb03 2304 	mla	r3, r3, r4, r2
 801f732:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f734:	18d5      	adds	r5, r2, r3
 801f736:	5cd3      	ldrb	r3, [r2, r3]
 801f738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f73a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f73e:	0e1f      	lsrs	r7, r3, #24
 801f740:	2800      	cmp	r0, #0
 801f742:	f000 8171 	beq.w	801fa28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801f746:	f895 c001 	ldrb.w	ip, [r5, #1]
 801f74a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f74e:	920e      	str	r2, [sp, #56]	; 0x38
 801f750:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f754:	2900      	cmp	r1, #0
 801f756:	f000 8172 	beq.w	801fa3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801f75a:	eb05 0c04 	add.w	ip, r5, r4
 801f75e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f760:	5d2d      	ldrb	r5, [r5, r4]
 801f762:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801f766:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f76a:	950b      	str	r5, [sp, #44]	; 0x2c
 801f76c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f770:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f772:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f776:	0e15      	lsrs	r5, r2, #24
 801f778:	920f      	str	r2, [sp, #60]	; 0x3c
 801f77a:	b280      	uxth	r0, r0
 801f77c:	b289      	uxth	r1, r1
 801f77e:	fb00 fa01 	mul.w	sl, r0, r1
 801f782:	0100      	lsls	r0, r0, #4
 801f784:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f788:	eba0 080a 	sub.w	r8, r0, sl
 801f78c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801f790:	b289      	uxth	r1, r1
 801f792:	fa1f f888 	uxth.w	r8, r8
 801f796:	1a52      	subs	r2, r2, r1
 801f798:	fb08 f00e 	mul.w	r0, r8, lr
 801f79c:	b292      	uxth	r2, r2
 801f79e:	fb02 0007 	mla	r0, r2, r7, r0
 801f7a2:	fb01 0009 	mla	r0, r1, r9, r0
 801f7a6:	fb0a 0005 	mla	r0, sl, r5, r0
 801f7aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f7ae:	2800      	cmp	r0, #0
 801f7b0:	f000 80dd 	beq.w	801f96e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f7b4:	2fff      	cmp	r7, #255	; 0xff
 801f7b6:	d01a      	beq.n	801f7ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f7b8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f7bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f7c0:	fb07 fc0c 	mul.w	ip, r7, ip
 801f7c4:	435f      	muls	r7, r3
 801f7c6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f7ca:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f7ce:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801f7d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f7d6:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801f7da:	4463      	add	r3, ip
 801f7dc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f7e0:	0a1b      	lsrs	r3, r3, #8
 801f7e2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f7e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f7ea:	ea43 030b 	orr.w	r3, r3, fp
 801f7ee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f7f2:	d01e      	beq.n	801f832 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f7f4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f7f6:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801f7fa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f7fe:	fb0e fb0b 	mul.w	fp, lr, fp
 801f802:	fb0e fe07 	mul.w	lr, lr, r7
 801f806:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f80a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f80e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801f812:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f816:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801f81a:	44dc      	add	ip, fp
 801f81c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f820:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f824:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f828:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f82c:	ea4c 070e 	orr.w	r7, ip, lr
 801f830:	970e      	str	r7, [sp, #56]	; 0x38
 801f832:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f836:	d01e      	beq.n	801f876 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f838:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f83a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f83e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f842:	fb09 fe0e 	mul.w	lr, r9, lr
 801f846:	fb09 f907 	mul.w	r9, r9, r7
 801f84a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f84e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f852:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801f856:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f85a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f85e:	44f4      	add	ip, lr
 801f860:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f864:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f868:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f86c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f870:	ea4c 0709 	orr.w	r7, ip, r9
 801f874:	970b      	str	r7, [sp, #44]	; 0x2c
 801f876:	2dff      	cmp	r5, #255	; 0xff
 801f878:	d01c      	beq.n	801f8b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801f87a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f87c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f880:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f884:	fb05 fe0e 	mul.w	lr, r5, lr
 801f888:	437d      	muls	r5, r7
 801f88a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f88e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f892:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801f896:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f89a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801f89e:	44f4      	add	ip, lr
 801f8a0:	0a2d      	lsrs	r5, r5, #8
 801f8a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f8a6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f8aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f8ae:	ea4c 0505 	orr.w	r5, ip, r5
 801f8b2:	950f      	str	r5, [sp, #60]	; 0x3c
 801f8b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f8b6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f8ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f8be:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f8c2:	fb08 f505 	mul.w	r5, r8, r5
 801f8c6:	fb02 5507 	mla	r5, r2, r7, r5
 801f8ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f8cc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f8d0:	fb01 5507 	mla	r5, r1, r7, r5
 801f8d4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f8d6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f8da:	fb0a 5507 	mla	r5, sl, r7, r5
 801f8de:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f8e0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f8e4:	0a2d      	lsrs	r5, r5, #8
 801f8e6:	fb08 f807 	mul.w	r8, r8, r7
 801f8ea:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f8ee:	fb02 8303 	mla	r3, r2, r3, r8
 801f8f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f8f4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f8f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f8fa:	fb01 330c 	mla	r3, r1, ip, r3
 801f8fe:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f902:	fb0a 3a01 	mla	sl, sl, r1, r3
 801f906:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f908:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f90a:	4343      	muls	r3, r0
 801f90c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f910:	1c58      	adds	r0, r3, #1
 801f912:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f916:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f91a:	ea45 050a 	orr.w	r5, r5, sl
 801f91e:	7833      	ldrb	r3, [r6, #0]
 801f920:	b2ea      	uxtb	r2, r5
 801f922:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f926:	fb12 f201 	smulbb	r2, r2, r1
 801f92a:	b2c0      	uxtb	r0, r0
 801f92c:	fb03 2300 	mla	r3, r3, r0, r2
 801f930:	b29b      	uxth	r3, r3
 801f932:	1c5a      	adds	r2, r3, #1
 801f934:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f938:	7872      	ldrb	r2, [r6, #1]
 801f93a:	fb12 f200 	smulbb	r2, r2, r0
 801f93e:	121b      	asrs	r3, r3, #8
 801f940:	7033      	strb	r3, [r6, #0]
 801f942:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f946:	0c2d      	lsrs	r5, r5, #16
 801f948:	fb03 2301 	mla	r3, r3, r1, r2
 801f94c:	b29b      	uxth	r3, r3
 801f94e:	1c5a      	adds	r2, r3, #1
 801f950:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f954:	121b      	asrs	r3, r3, #8
 801f956:	7073      	strb	r3, [r6, #1]
 801f958:	78b3      	ldrb	r3, [r6, #2]
 801f95a:	fb13 f000 	smulbb	r0, r3, r0
 801f95e:	fb05 0501 	mla	r5, r5, r1, r0
 801f962:	b2ad      	uxth	r5, r5
 801f964:	1c6b      	adds	r3, r5, #1
 801f966:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f96a:	122d      	asrs	r5, r5, #8
 801f96c:	70b5      	strb	r5, [r6, #2]
 801f96e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f970:	3603      	adds	r6, #3
 801f972:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f974:	4413      	add	r3, r2
 801f976:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f978:	932d      	str	r3, [sp, #180]	; 0xb4
 801f97a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f97c:	4413      	add	r3, r2
 801f97e:	932e      	str	r3, [sp, #184]	; 0xb8
 801f980:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f982:	3b01      	subs	r3, #1
 801f984:	9316      	str	r3, [sp, #88]	; 0x58
 801f986:	e6b7      	b.n	801f6f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801f988:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f98a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f98c:	4413      	add	r3, r2
 801f98e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f990:	932d      	str	r3, [sp, #180]	; 0xb4
 801f992:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f994:	4413      	add	r3, r2
 801f996:	932e      	str	r3, [sp, #184]	; 0xb8
 801f998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f99a:	3b01      	subs	r3, #1
 801f99c:	930a      	str	r3, [sp, #40]	; 0x28
 801f99e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f9a0:	3303      	adds	r3, #3
 801f9a2:	930d      	str	r3, [sp, #52]	; 0x34
 801f9a4:	e659      	b.n	801f65a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f9a6:	f47f ae6b 	bne.w	801f680 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f9aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f9ac:	2b00      	cmp	r3, #0
 801f9ae:	f340 81a6 	ble.w	801fcfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801f9b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f9b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f9b8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f9bc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f9c0:	eef0 6a48 	vmov.f32	s13, s16
 801f9c4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f9c8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f9cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f9d0:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801f9d4:	eef0 6a68 	vmov.f32	s13, s17
 801f9d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f9dc:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801f9e0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f9e4:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f9e8:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f9ec:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f9f0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f9f4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f9f8:	ee18 2a10 	vmov	r2, s16
 801f9fc:	eeb0 8a47 	vmov.f32	s16, s14
 801fa00:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa04:	ee18 2a90 	vmov	r2, s17
 801fa08:	932f      	str	r3, [sp, #188]	; 0xbc
 801fa0a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fa0c:	eef0 8a67 	vmov.f32	s17, s15
 801fa10:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa14:	9330      	str	r3, [sp, #192]	; 0xc0
 801fa16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fa18:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fa1a:	3b01      	subs	r3, #1
 801fa1c:	9314      	str	r3, [sp, #80]	; 0x50
 801fa1e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fa20:	bf08      	it	eq
 801fa22:	4613      	moveq	r3, r2
 801fa24:	930a      	str	r3, [sp, #40]	; 0x28
 801fa26:	e611      	b.n	801f64c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801fa28:	b161      	cbz	r1, 801fa44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801fa2a:	5d2a      	ldrb	r2, [r5, r4]
 801fa2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801fa2e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fa32:	25ff      	movs	r5, #255	; 0xff
 801fa34:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801fa38:	920b      	str	r2, [sp, #44]	; 0x2c
 801fa3a:	46ae      	mov	lr, r5
 801fa3c:	e69d      	b.n	801f77a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801fa3e:	25ff      	movs	r5, #255	; 0xff
 801fa40:	46a9      	mov	r9, r5
 801fa42:	e69a      	b.n	801f77a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801fa44:	25ff      	movs	r5, #255	; 0xff
 801fa46:	46a9      	mov	r9, r5
 801fa48:	e7f7      	b.n	801fa3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801fa4a:	1c57      	adds	r7, r2, #1
 801fa4c:	d18f      	bne.n	801f96e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fa4e:	4294      	cmp	r4, r2
 801fa50:	dd8d      	ble.n	801f96e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fa52:	1c5d      	adds	r5, r3, #1
 801fa54:	db8b      	blt.n	801f96e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fa56:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fa58:	429d      	cmp	r5, r3
 801fa5a:	dd88      	ble.n	801f96e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fa5c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801fa5e:	9202      	str	r2, [sp, #8]
 801fa60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fa62:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801fa66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fa68:	9819      	ldr	r0, [sp, #100]	; 0x64
 801fa6a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801fa6e:	e9cd 4300 	strd	r4, r3, [sp]
 801fa72:	4631      	mov	r1, r6
 801fa74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa76:	f7ff fc63 	bl	801f340 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801fa7a:	e778      	b.n	801f96e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fa7c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fa7e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fa80:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801fa84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fa86:	1412      	asrs	r2, r2, #16
 801fa88:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801fa8c:	141b      	asrs	r3, r3, #16
 801fa8e:	fb04 2303 	mla	r3, r4, r3, r2
 801fa92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fa94:	18d5      	adds	r5, r2, r3
 801fa96:	5cd3      	ldrb	r3, [r2, r3]
 801fa98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fa9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fa9e:	0e1e      	lsrs	r6, r3, #24
 801faa0:	2900      	cmp	r1, #0
 801faa2:	f000 811b 	beq.w	801fcdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801faa6:	786a      	ldrb	r2, [r5, #1]
 801faa8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801faaa:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801faae:	9210      	str	r2, [sp, #64]	; 0x40
 801fab0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801fab4:	2800      	cmp	r0, #0
 801fab6:	f000 811c 	beq.w	801fcf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801faba:	192a      	adds	r2, r5, r4
 801fabc:	5d2d      	ldrb	r5, [r5, r4]
 801fabe:	7852      	ldrb	r2, [r2, #1]
 801fac0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801fac4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fac8:	950c      	str	r5, [sp, #48]	; 0x30
 801faca:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801face:	0e15      	lsrs	r5, r2, #24
 801fad0:	9211      	str	r2, [sp, #68]	; 0x44
 801fad2:	b289      	uxth	r1, r1
 801fad4:	b280      	uxth	r0, r0
 801fad6:	fb01 fa00 	mul.w	sl, r1, r0
 801fada:	0109      	lsls	r1, r1, #4
 801fadc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fae0:	eba1 080a 	sub.w	r8, r1, sl
 801fae4:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fae8:	b280      	uxth	r0, r0
 801faea:	fa1f f888 	uxth.w	r8, r8
 801faee:	1a12      	subs	r2, r2, r0
 801faf0:	fb08 f10c 	mul.w	r1, r8, ip
 801faf4:	b292      	uxth	r2, r2
 801faf6:	fb02 1106 	mla	r1, r2, r6, r1
 801fafa:	fb00 1109 	mla	r1, r0, r9, r1
 801fafe:	fb0a 1105 	mla	r1, sl, r5, r1
 801fb02:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fb06:	2900      	cmp	r1, #0
 801fb08:	f000 80da 	beq.w	801fcc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801fb0c:	2eff      	cmp	r6, #255	; 0xff
 801fb0e:	d016      	beq.n	801fb3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801fb10:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fb14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb18:	4377      	muls	r7, r6
 801fb1a:	435e      	muls	r6, r3
 801fb1c:	0a3b      	lsrs	r3, r7, #8
 801fb1e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fb22:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fb26:	443b      	add	r3, r7
 801fb28:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801fb2c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801fb30:	0a1b      	lsrs	r3, r3, #8
 801fb32:	0a3f      	lsrs	r7, r7, #8
 801fb34:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fb38:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fb3c:	433b      	orrs	r3, r7
 801fb3e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fb42:	d01d      	beq.n	801fb80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801fb44:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fb46:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801fb48:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fb4c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fb50:	fb0c f606 	mul.w	r6, ip, r6
 801fb54:	fb0c fc07 	mul.w	ip, ip, r7
 801fb58:	0a37      	lsrs	r7, r6, #8
 801fb5a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801fb5e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fb62:	4437      	add	r7, r6
 801fb64:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801fb68:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801fb6c:	0a3f      	lsrs	r7, r7, #8
 801fb6e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb72:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fb76:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fb7a:	ea47 060c 	orr.w	r6, r7, ip
 801fb7e:	9610      	str	r6, [sp, #64]	; 0x40
 801fb80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fb84:	d01d      	beq.n	801fbc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801fb86:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fb88:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fb8c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fb90:	fb09 fc0c 	mul.w	ip, r9, ip
 801fb94:	fb09 f906 	mul.w	r9, r9, r6
 801fb98:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fb9c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fba0:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801fba4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fba8:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801fbac:	4467      	add	r7, ip
 801fbae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fbb2:	0a3f      	lsrs	r7, r7, #8
 801fbb4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fbb8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fbbc:	ea47 0609 	orr.w	r6, r7, r9
 801fbc0:	960c      	str	r6, [sp, #48]	; 0x30
 801fbc2:	2dff      	cmp	r5, #255	; 0xff
 801fbc4:	d01a      	beq.n	801fbfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801fbc6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fbc8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fbcc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fbd0:	fb05 fc0c 	mul.w	ip, r5, ip
 801fbd4:	4375      	muls	r5, r6
 801fbd6:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fbda:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fbde:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801fbe2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fbe6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801fbea:	4467      	add	r7, ip
 801fbec:	0a2d      	lsrs	r5, r5, #8
 801fbee:	0a3f      	lsrs	r7, r7, #8
 801fbf0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fbf4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fbf8:	433d      	orrs	r5, r7
 801fbfa:	9511      	str	r5, [sp, #68]	; 0x44
 801fbfc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fbfe:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801fc02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fc06:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fc0a:	fb08 f505 	mul.w	r5, r8, r5
 801fc0e:	fb02 5506 	mla	r5, r2, r6, r5
 801fc12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fc14:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fc18:	fb00 5506 	mla	r5, r0, r6, r5
 801fc1c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fc1e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fc22:	fb0a 5506 	mla	r5, sl, r6, r5
 801fc26:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fc28:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fc2c:	0a2d      	lsrs	r5, r5, #8
 801fc2e:	fb08 f806 	mul.w	r8, r8, r6
 801fc32:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fc36:	fb02 8303 	mla	r3, r2, r3, r8
 801fc3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fc3c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fc40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fc42:	fb00 3307 	mla	r3, r0, r7, r3
 801fc46:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fc4a:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801fc4e:	fb01 f30b 	mul.w	r3, r1, fp
 801fc52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc56:	1c59      	adds	r1, r3, #1
 801fc58:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fc5c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fc60:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fc64:	ea45 050c 	orr.w	r5, r5, ip
 801fc68:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fc6c:	b2ea      	uxtb	r2, r5
 801fc6e:	b2c9      	uxtb	r1, r1
 801fc70:	fb12 f20b 	smulbb	r2, r2, fp
 801fc74:	fb03 2301 	mla	r3, r3, r1, r2
 801fc78:	b29b      	uxth	r3, r3
 801fc7a:	1c5a      	adds	r2, r3, #1
 801fc7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc80:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fc84:	fb12 f201 	smulbb	r2, r2, r1
 801fc88:	121b      	asrs	r3, r3, #8
 801fc8a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fc8e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801fc92:	0c2d      	lsrs	r5, r5, #16
 801fc94:	fb03 230b 	mla	r3, r3, fp, r2
 801fc98:	b29b      	uxth	r3, r3
 801fc9a:	1c5a      	adds	r2, r3, #1
 801fc9c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fca0:	121b      	asrs	r3, r3, #8
 801fca2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fca6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fcaa:	fb13 f101 	smulbb	r1, r3, r1
 801fcae:	fb05 150b 	mla	r5, r5, fp, r1
 801fcb2:	b2ad      	uxth	r5, r5
 801fcb4:	1c69      	adds	r1, r5, #1
 801fcb6:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801fcba:	122d      	asrs	r5, r5, #8
 801fcbc:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801fcc0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fcc2:	f10e 0e03 	add.w	lr, lr, #3
 801fcc6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fcc8:	4413      	add	r3, r2
 801fcca:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fccc:	932d      	str	r3, [sp, #180]	; 0xb4
 801fcce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fcd0:	4413      	add	r3, r2
 801fcd2:	932e      	str	r3, [sp, #184]	; 0xb8
 801fcd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fcd6:	3b01      	subs	r3, #1
 801fcd8:	9315      	str	r3, [sp, #84]	; 0x54
 801fcda:	e4ed      	b.n	801f6b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801fcdc:	b160      	cbz	r0, 801fcf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801fcde:	5d2a      	ldrb	r2, [r5, r4]
 801fce0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801fce2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fce6:	25ff      	movs	r5, #255	; 0xff
 801fce8:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801fcec:	920c      	str	r2, [sp, #48]	; 0x30
 801fcee:	46ac      	mov	ip, r5
 801fcf0:	e6ef      	b.n	801fad2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801fcf2:	25ff      	movs	r5, #255	; 0xff
 801fcf4:	46a9      	mov	r9, r5
 801fcf6:	e6ec      	b.n	801fad2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801fcf8:	25ff      	movs	r5, #255	; 0xff
 801fcfa:	46a9      	mov	r9, r5
 801fcfc:	e7f7      	b.n	801fcee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801fcfe:	b01b      	add	sp, #108	; 0x6c
 801fd00:	ecbd 8b08 	vpop	{d8-d11}
 801fd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fd08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd0c:	b085      	sub	sp, #20
 801fd0e:	7888      	ldrb	r0, [r1, #2]
 801fd10:	4692      	mov	sl, r2
 801fd12:	4698      	mov	r8, r3
 801fd14:	9000      	str	r0, [sp, #0]
 801fd16:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fd1a:	7848      	ldrb	r0, [r1, #1]
 801fd1c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801fd20:	9001      	str	r0, [sp, #4]
 801fd22:	7808      	ldrb	r0, [r1, #0]
 801fd24:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801fd28:	9002      	str	r0, [sp, #8]
 801fd2a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fd2e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801fd32:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801fd36:	fb04 560c 	mla	r6, r4, ip, r5
 801fd3a:	2c00      	cmp	r4, #0
 801fd3c:	eb02 0e06 	add.w	lr, r2, r6
 801fd40:	9a00      	ldr	r2, [sp, #0]
 801fd42:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801fd46:	9a01      	ldr	r2, [sp, #4]
 801fd48:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801fd4c:	db3e      	blt.n	801fdcc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801fd4e:	45a1      	cmp	r9, r4
 801fd50:	dd3c      	ble.n	801fdcc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801fd52:	2d00      	cmp	r5, #0
 801fd54:	db38      	blt.n	801fdc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801fd56:	45ac      	cmp	ip, r5
 801fd58:	dd36      	ble.n	801fdc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801fd5a:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801fd5e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801fd62:	1c6e      	adds	r6, r5, #1
 801fd64:	d435      	bmi.n	801fdd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fd66:	45b4      	cmp	ip, r6
 801fd68:	dd33      	ble.n	801fdd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fd6a:	b393      	cbz	r3, 801fdd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fd6c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801fd70:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801fd74:	3401      	adds	r4, #1
 801fd76:	d430      	bmi.n	801fdda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fd78:	45a1      	cmp	r9, r4
 801fd7a:	dd2e      	ble.n	801fdda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fd7c:	b36f      	cbz	r7, 801fdda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fd7e:	2d00      	cmp	r5, #0
 801fd80:	db29      	blt.n	801fdd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801fd82:	45ac      	cmp	ip, r5
 801fd84:	dd27      	ble.n	801fdd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801fd86:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801fd8a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801fd8e:	3501      	adds	r5, #1
 801fd90:	d407      	bmi.n	801fda2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fd92:	45ac      	cmp	ip, r5
 801fd94:	dd05      	ble.n	801fda2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fd96:	b123      	cbz	r3, 801fda2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fd98:	44f4      	add	ip, lr
 801fd9a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fd9e:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801fda2:	2b0f      	cmp	r3, #15
 801fda4:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801fda8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fdac:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fdb0:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801fdb4:	d801      	bhi.n	801fdba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801fdb6:	2f0f      	cmp	r7, #15
 801fdb8:	d911      	bls.n	801fdde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801fdba:	4b76      	ldr	r3, [pc, #472]	; (801ff94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801fdbc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801fdc0:	4a75      	ldr	r2, [pc, #468]	; (801ff98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801fdc2:	4876      	ldr	r0, [pc, #472]	; (801ff9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801fdc4:	f004 ff94 	bl	8024cf0 <__assert_func>
 801fdc8:	4602      	mov	r2, r0
 801fdca:	e7ca      	b.n	801fd62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801fdcc:	4606      	mov	r6, r0
 801fdce:	4602      	mov	r2, r0
 801fdd0:	e7d0      	b.n	801fd74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801fdd2:	4606      	mov	r6, r0
 801fdd4:	e7ce      	b.n	801fd74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801fdd6:	4604      	mov	r4, r0
 801fdd8:	e7d9      	b.n	801fd8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801fdda:	4604      	mov	r4, r0
 801fddc:	e7e1      	b.n	801fda2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fdde:	b29b      	uxth	r3, r3
 801fde0:	b2bf      	uxth	r7, r7
 801fde2:	fb07 fe03 	mul.w	lr, r7, r3
 801fde6:	011b      	lsls	r3, r3, #4
 801fde8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801fdec:	eba3 0c0e 	sub.w	ip, r3, lr
 801fdf0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801fdf4:	b2bf      	uxth	r7, r7
 801fdf6:	fa1f fc8c 	uxth.w	ip, ip
 801fdfa:	1bed      	subs	r5, r5, r7
 801fdfc:	fb0c f30a 	mul.w	r3, ip, sl
 801fe00:	b2ad      	uxth	r5, r5
 801fe02:	fb05 330b 	mla	r3, r5, fp, r3
 801fe06:	fb07 3309 	mla	r3, r7, r9, r3
 801fe0a:	fb0e 3308 	mla	r3, lr, r8, r3
 801fe0e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fe12:	9303      	str	r3, [sp, #12]
 801fe14:	2b00      	cmp	r3, #0
 801fe16:	f000 80b9 	beq.w	801ff8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801fe1a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801fe1e:	d018      	beq.n	801fe52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801fe20:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801fe24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fe28:	fb0b f303 	mul.w	r3, fp, r3
 801fe2c:	fb0b fb02 	mul.w	fp, fp, r2
 801fe30:	0a1a      	lsrs	r2, r3, #8
 801fe32:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801fe36:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fe3a:	441a      	add	r2, r3
 801fe3c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801fe40:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801fe44:	0a12      	lsrs	r2, r2, #8
 801fe46:	0a1b      	lsrs	r3, r3, #8
 801fe48:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fe4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe50:	431a      	orrs	r2, r3
 801fe52:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fe56:	d019      	beq.n	801fe8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801fe58:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801fe5c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fe60:	fb0a fb0b 	mul.w	fp, sl, fp
 801fe64:	fb0a fa06 	mul.w	sl, sl, r6
 801fe68:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801fe6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fe70:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801fe74:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fe78:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801fe7c:	445e      	add	r6, fp
 801fe7e:	0a1b      	lsrs	r3, r3, #8
 801fe80:	0a36      	lsrs	r6, r6, #8
 801fe82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe86:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fe8a:	431e      	orrs	r6, r3
 801fe8c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fe90:	d019      	beq.n	801fec6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801fe92:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801fe96:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fe9a:	fb09 fa0a 	mul.w	sl, r9, sl
 801fe9e:	fb09 f904 	mul.w	r9, r9, r4
 801fea2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801fea6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801feaa:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801feae:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801feb2:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801feb6:	4454      	add	r4, sl
 801feb8:	0a1b      	lsrs	r3, r3, #8
 801feba:	0a24      	lsrs	r4, r4, #8
 801febc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fec0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fec4:	431c      	orrs	r4, r3
 801fec6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801feca:	d019      	beq.n	801ff00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801fecc:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801fed0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fed4:	fb08 f909 	mul.w	r9, r8, r9
 801fed8:	fb08 f800 	mul.w	r8, r8, r0
 801fedc:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801fee0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801fee4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801fee8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801feec:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801fef0:	4448      	add	r0, r9
 801fef2:	0a1b      	lsrs	r3, r3, #8
 801fef4:	0a00      	lsrs	r0, r0, #8
 801fef6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fefa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fefe:	4318      	orrs	r0, r3
 801ff00:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801ff04:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801ff08:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ff0c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ff10:	fb0c f808 	mul.w	r8, ip, r8
 801ff14:	fb0c f606 	mul.w	r6, ip, r6
 801ff18:	fb05 8803 	mla	r8, r5, r3, r8
 801ff1c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801ff20:	fb05 6202 	mla	r2, r5, r2, r6
 801ff24:	fb07 8803 	mla	r8, r7, r3, r8
 801ff28:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801ff2c:	fb0e 8303 	mla	r3, lr, r3, r8
 801ff30:	0a1b      	lsrs	r3, r3, #8
 801ff32:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801ff36:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801ff3a:	9c02      	ldr	r4, [sp, #8]
 801ff3c:	fb07 2703 	mla	r7, r7, r3, r2
 801ff40:	9a03      	ldr	r2, [sp, #12]
 801ff42:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801ff46:	43d2      	mvns	r2, r2
 801ff48:	fb0e 7303 	mla	r3, lr, r3, r7
 801ff4c:	b2d2      	uxtb	r2, r2
 801ff4e:	0a1b      	lsrs	r3, r3, #8
 801ff50:	4354      	muls	r4, r2
 801ff52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff56:	1c60      	adds	r0, r4, #1
 801ff58:	ea48 0303 	orr.w	r3, r8, r3
 801ff5c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801ff60:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ff64:	7008      	strb	r0, [r1, #0]
 801ff66:	9801      	ldr	r0, [sp, #4]
 801ff68:	4350      	muls	r0, r2
 801ff6a:	1c44      	adds	r4, r0, #1
 801ff6c:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801ff70:	0a18      	lsrs	r0, r3, #8
 801ff72:	0c1b      	lsrs	r3, r3, #16
 801ff74:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801ff78:	7048      	strb	r0, [r1, #1]
 801ff7a:	9800      	ldr	r0, [sp, #0]
 801ff7c:	4350      	muls	r0, r2
 801ff7e:	4602      	mov	r2, r0
 801ff80:	3001      	adds	r0, #1
 801ff82:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ff86:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ff8a:	708b      	strb	r3, [r1, #2]
 801ff8c:	b005      	add	sp, #20
 801ff8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff92:	bf00      	nop
 801ff94:	080296e7 	.word	0x080296e7
 801ff98:	08029bde 	.word	0x08029bde
 801ff9c:	080297b0 	.word	0x080297b0

0801ffa0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ffa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffa4:	ed2d 8b08 	vpush	{d8-d11}
 801ffa8:	b097      	sub	sp, #92	; 0x5c
 801ffaa:	eeb0 aa40 	vmov.f32	s20, s0
 801ffae:	eef0 9a60 	vmov.f32	s19, s1
 801ffb2:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801ffb4:	eeb0 9a41 	vmov.f32	s18, s2
 801ffb8:	9308      	str	r3, [sp, #32]
 801ffba:	eeb0 8a62 	vmov.f32	s16, s5
 801ffbe:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801ffc2:	eef0 8a43 	vmov.f32	s17, s6
 801ffc6:	9015      	str	r0, [sp, #84]	; 0x54
 801ffc8:	eef0 ba44 	vmov.f32	s23, s8
 801ffcc:	6868      	ldr	r0, [r5, #4]
 801ffce:	eeb0 ba64 	vmov.f32	s22, s9
 801ffd2:	9112      	str	r1, [sp, #72]	; 0x48
 801ffd4:	eef0 aa45 	vmov.f32	s21, s10
 801ffd8:	9310      	str	r3, [sp, #64]	; 0x40
 801ffda:	9214      	str	r2, [sp, #80]	; 0x50
 801ffdc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801ffde:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801ffe2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801ffe6:	fb00 1303 	mla	r3, r0, r3, r1
 801ffea:	6829      	ldr	r1, [r5, #0]
 801ffec:	6855      	ldr	r5, [r2, #4]
 801ffee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fff2:	3504      	adds	r5, #4
 801fff4:	18cb      	adds	r3, r1, r3
 801fff6:	930b      	str	r3, [sp, #44]	; 0x2c
 801fff8:	6813      	ldr	r3, [r2, #0]
 801fffa:	9311      	str	r3, [sp, #68]	; 0x44
 801fffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fffe:	2b00      	cmp	r3, #0
 8020000:	dc03      	bgt.n	802000a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020002:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020004:	2b00      	cmp	r3, #0
 8020006:	f340 8333 	ble.w	8020670 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 802000a:	9b08      	ldr	r3, [sp, #32]
 802000c:	2b00      	cmp	r3, #0
 802000e:	f340 8190 	ble.w	8020332 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020012:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020014:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020016:	1412      	asrs	r2, r2, #16
 8020018:	ea4f 4323 	mov.w	r3, r3, asr #16
 802001c:	d42f      	bmi.n	802007e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802001e:	1c51      	adds	r1, r2, #1
 8020020:	428c      	cmp	r4, r1
 8020022:	dd2f      	ble.n	8020084 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020024:	2b00      	cmp	r3, #0
 8020026:	db2d      	blt.n	8020084 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020028:	1c59      	adds	r1, r3, #1
 802002a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802002c:	4288      	cmp	r0, r1
 802002e:	dd29      	ble.n	8020084 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020030:	9b08      	ldr	r3, [sp, #32]
 8020032:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020034:	3b01      	subs	r3, #1
 8020036:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020038:	fb02 1203 	mla	r2, r2, r3, r1
 802003c:	1412      	asrs	r2, r2, #16
 802003e:	d42b      	bmi.n	8020098 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020040:	3201      	adds	r2, #1
 8020042:	4294      	cmp	r4, r2
 8020044:	dd28      	ble.n	8020098 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020046:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020048:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802004a:	fb02 1303 	mla	r3, r2, r3, r1
 802004e:	141b      	asrs	r3, r3, #16
 8020050:	d422      	bmi.n	8020098 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020052:	3301      	adds	r3, #1
 8020054:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020056:	429a      	cmp	r2, r3
 8020058:	dd1e      	ble.n	8020098 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802005a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802005c:	f103 0803 	add.w	r8, r3, #3
 8020060:	9b08      	ldr	r3, [sp, #32]
 8020062:	9307      	str	r3, [sp, #28]
 8020064:	9b07      	ldr	r3, [sp, #28]
 8020066:	2b00      	cmp	r3, #0
 8020068:	f300 81ca 	bgt.w	8020400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 802006c:	9b08      	ldr	r3, [sp, #32]
 802006e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020070:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020074:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020078:	441a      	add	r2, r3
 802007a:	920b      	str	r2, [sp, #44]	; 0x2c
 802007c:	e15b      	b.n	8020336 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 802007e:	1c51      	adds	r1, r2, #1
 8020080:	f040 8148 	bne.w	8020314 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020084:	42a2      	cmp	r2, r4
 8020086:	f280 8145 	bge.w	8020314 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802008a:	1c5a      	adds	r2, r3, #1
 802008c:	f2c0 8142 	blt.w	8020314 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020090:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020092:	4293      	cmp	r3, r2
 8020094:	f280 813e 	bge.w	8020314 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020098:	9b08      	ldr	r3, [sp, #32]
 802009a:	9313      	str	r3, [sp, #76]	; 0x4c
 802009c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802009e:	9307      	str	r3, [sp, #28]
 80200a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	dde2      	ble.n	802006c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80200a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80200a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80200aa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80200ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80200b0:	141b      	asrs	r3, r3, #16
 80200b2:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80200b6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80200b8:	1412      	asrs	r2, r2, #16
 80200ba:	f100 818b 	bmi.w	80203d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 80200be:	1c56      	adds	r6, r2, #1
 80200c0:	42b4      	cmp	r4, r6
 80200c2:	f340 8189 	ble.w	80203d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	f2c0 8186 	blt.w	80203d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80200cc:	1c5e      	adds	r6, r3, #1
 80200ce:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80200d0:	42b7      	cmp	r7, r6
 80200d2:	f340 8181 	ble.w	80203d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80200d6:	fb03 2304 	mla	r3, r3, r4, r2
 80200da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80200dc:	18d6      	adds	r6, r2, r3
 80200de:	5cd3      	ldrb	r3, [r2, r3]
 80200e0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80200e4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80200e8:	2900      	cmp	r1, #0
 80200ea:	f000 8163 	beq.w	80203b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80200ee:	7872      	ldrb	r2, [r6, #1]
 80200f0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80200f4:	920c      	str	r2, [sp, #48]	; 0x30
 80200f6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80200fa:	2800      	cmp	r0, #0
 80200fc:	f000 8164 	beq.w	80203c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8020100:	1932      	adds	r2, r6, r4
 8020102:	5d36      	ldrb	r6, [r6, r4]
 8020104:	7852      	ldrb	r2, [r2, #1]
 8020106:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 802010a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802010e:	9609      	str	r6, [sp, #36]	; 0x24
 8020110:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020114:	0e16      	lsrs	r6, r2, #24
 8020116:	920d      	str	r2, [sp, #52]	; 0x34
 8020118:	b289      	uxth	r1, r1
 802011a:	b280      	uxth	r0, r0
 802011c:	fb01 fb00 	mul.w	fp, r1, r0
 8020120:	0109      	lsls	r1, r1, #4
 8020122:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020126:	eba1 090b 	sub.w	r9, r1, fp
 802012a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802012e:	b280      	uxth	r0, r0
 8020130:	fa1f f989 	uxth.w	r9, r9
 8020134:	1a12      	subs	r2, r2, r0
 8020136:	fb09 f108 	mul.w	r1, r9, r8
 802013a:	b292      	uxth	r2, r2
 802013c:	fb02 110c 	mla	r1, r2, ip, r1
 8020140:	fb00 110a 	mla	r1, r0, sl, r1
 8020144:	fb0b 1106 	mla	r1, fp, r6, r1
 8020148:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802014c:	2900      	cmp	r1, #0
 802014e:	f000 80d2 	beq.w	80202f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020152:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020156:	d01b      	beq.n	8020190 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8020158:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802015c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020160:	fb0c fe0e 	mul.w	lr, ip, lr
 8020164:	fb0c fc03 	mul.w	ip, ip, r3
 8020168:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802016c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020170:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020174:	4473      	add	r3, lr
 8020176:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 802017a:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 802017e:	0a1b      	lsrs	r3, r3, #8
 8020180:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020184:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020188:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802018c:	ea43 030e 	orr.w	r3, r3, lr
 8020190:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020194:	d01e      	beq.n	80201d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8020196:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020198:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802019c:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80201a0:	fb08 fc0c 	mul.w	ip, r8, ip
 80201a4:	fb08 f80e 	mul.w	r8, r8, lr
 80201a8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80201ac:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80201b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80201b4:	44e6      	add	lr, ip
 80201b6:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80201ba:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80201be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80201c2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80201c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80201ca:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80201ce:	ea4e 0708 	orr.w	r7, lr, r8
 80201d2:	970c      	str	r7, [sp, #48]	; 0x30
 80201d4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80201d8:	d01e      	beq.n	8020218 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80201da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80201dc:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80201e0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80201e4:	fb0a f808 	mul.w	r8, sl, r8
 80201e8:	fb0a fa0c 	mul.w	sl, sl, ip
 80201ec:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80201f0:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80201f4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80201f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80201fc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020200:	44c6      	add	lr, r8
 8020202:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020206:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802020a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802020e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020212:	ea4e 070a 	orr.w	r7, lr, sl
 8020216:	9709      	str	r7, [sp, #36]	; 0x24
 8020218:	2eff      	cmp	r6, #255	; 0xff
 802021a:	d01d      	beq.n	8020258 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 802021c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802021e:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020222:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020226:	fb06 f808 	mul.w	r8, r6, r8
 802022a:	fb06 f60c 	mul.w	r6, r6, ip
 802022e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020232:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020236:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802023a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802023e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020242:	44c6      	add	lr, r8
 8020244:	0a36      	lsrs	r6, r6, #8
 8020246:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802024a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802024e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020252:	ea4e 0606 	orr.w	r6, lr, r6
 8020256:	960d      	str	r6, [sp, #52]	; 0x34
 8020258:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802025a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802025e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020260:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020264:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020268:	43c9      	mvns	r1, r1
 802026a:	fb09 f606 	mul.w	r6, r9, r6
 802026e:	b2c9      	uxtb	r1, r1
 8020270:	fb02 660c 	mla	r6, r2, ip, r6
 8020274:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020278:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802027a:	fb00 660c 	mla	r6, r0, ip, r6
 802027e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020282:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020284:	fb0b 660c 	mla	r6, fp, ip, r6
 8020288:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802028c:	fb09 f90c 	mul.w	r9, r9, ip
 8020290:	0a36      	lsrs	r6, r6, #8
 8020292:	fb02 9303 	mla	r3, r2, r3, r9
 8020296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020298:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802029c:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80202a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80202a2:	fb00 330e 	mla	r3, r0, lr, r3
 80202a6:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80202aa:	fb0b 3b00 	mla	fp, fp, r0, r3
 80202ae:	9b07      	ldr	r3, [sp, #28]
 80202b0:	781b      	ldrb	r3, [r3, #0]
 80202b2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80202b6:	fb03 f201 	mul.w	r2, r3, r1
 80202ba:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80202be:	1c53      	adds	r3, r2, #1
 80202c0:	ea46 060b 	orr.w	r6, r6, fp
 80202c4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80202c8:	9a07      	ldr	r2, [sp, #28]
 80202ca:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80202ce:	7013      	strb	r3, [r2, #0]
 80202d0:	7853      	ldrb	r3, [r2, #1]
 80202d2:	434b      	muls	r3, r1
 80202d4:	1c5a      	adds	r2, r3, #1
 80202d6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80202da:	0a33      	lsrs	r3, r6, #8
 80202dc:	0c36      	lsrs	r6, r6, #16
 80202de:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80202e2:	9a07      	ldr	r2, [sp, #28]
 80202e4:	7053      	strb	r3, [r2, #1]
 80202e6:	7893      	ldrb	r3, [r2, #2]
 80202e8:	4359      	muls	r1, r3
 80202ea:	1c4b      	adds	r3, r1, #1
 80202ec:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80202f0:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 80202f4:	7096      	strb	r6, [r2, #2]
 80202f6:	9b07      	ldr	r3, [sp, #28]
 80202f8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80202fa:	3303      	adds	r3, #3
 80202fc:	9307      	str	r3, [sp, #28]
 80202fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020300:	4413      	add	r3, r2
 8020302:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020304:	9329      	str	r3, [sp, #164]	; 0xa4
 8020306:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020308:	4413      	add	r3, r2
 802030a:	932a      	str	r3, [sp, #168]	; 0xa8
 802030c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802030e:	3b01      	subs	r3, #1
 8020310:	9313      	str	r3, [sp, #76]	; 0x4c
 8020312:	e6c5      	b.n	80200a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020314:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020316:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020318:	4413      	add	r3, r2
 802031a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802031c:	9329      	str	r3, [sp, #164]	; 0xa4
 802031e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020320:	4413      	add	r3, r2
 8020322:	932a      	str	r3, [sp, #168]	; 0xa8
 8020324:	9b08      	ldr	r3, [sp, #32]
 8020326:	3b01      	subs	r3, #1
 8020328:	9308      	str	r3, [sp, #32]
 802032a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802032c:	3303      	adds	r3, #3
 802032e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020330:	e66b      	b.n	802000a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020332:	f47f ae7d 	bne.w	8020030 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8020336:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020338:	2b00      	cmp	r3, #0
 802033a:	f340 8199 	ble.w	8020670 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 802033e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020342:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020344:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020348:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802034c:	eef0 6a48 	vmov.f32	s13, s16
 8020350:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020354:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020358:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802035c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020360:	eef0 6a68 	vmov.f32	s13, s17
 8020364:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020368:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 802036c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020370:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020374:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020378:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802037c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020380:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020384:	ee18 2a10 	vmov	r2, s16
 8020388:	eeb0 8a47 	vmov.f32	s16, s14
 802038c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020390:	ee18 2a90 	vmov	r2, s17
 8020394:	932b      	str	r3, [sp, #172]	; 0xac
 8020396:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020398:	eef0 8a67 	vmov.f32	s17, s15
 802039c:	fb92 f3f3 	sdiv	r3, r2, r3
 80203a0:	932c      	str	r3, [sp, #176]	; 0xb0
 80203a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80203a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80203a6:	3b01      	subs	r3, #1
 80203a8:	9312      	str	r3, [sp, #72]	; 0x48
 80203aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80203ac:	bf08      	it	eq
 80203ae:	4613      	moveq	r3, r2
 80203b0:	9308      	str	r3, [sp, #32]
 80203b2:	e623      	b.n	801fffc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80203b4:	b158      	cbz	r0, 80203ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80203b6:	5d32      	ldrb	r2, [r6, r4]
 80203b8:	26ff      	movs	r6, #255	; 0xff
 80203ba:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80203be:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80203c2:	9209      	str	r2, [sp, #36]	; 0x24
 80203c4:	46b0      	mov	r8, r6
 80203c6:	e6a7      	b.n	8020118 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 80203c8:	26ff      	movs	r6, #255	; 0xff
 80203ca:	46b2      	mov	sl, r6
 80203cc:	e6a4      	b.n	8020118 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 80203ce:	26ff      	movs	r6, #255	; 0xff
 80203d0:	46b2      	mov	sl, r6
 80203d2:	e7f7      	b.n	80203c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80203d4:	1c57      	adds	r7, r2, #1
 80203d6:	d18e      	bne.n	80202f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80203d8:	4294      	cmp	r4, r2
 80203da:	dd8c      	ble.n	80202f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80203dc:	1c5e      	adds	r6, r3, #1
 80203de:	db8a      	blt.n	80202f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80203e0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80203e2:	429e      	cmp	r6, r3
 80203e4:	dd87      	ble.n	80202f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80203e6:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80203ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80203ee:	e9cd 4600 	strd	r4, r6, [sp]
 80203f2:	462b      	mov	r3, r5
 80203f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80203f6:	9907      	ldr	r1, [sp, #28]
 80203f8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80203fa:	f7ff fc85 	bl	801fd08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80203fe:	e77a      	b.n	80202f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020400:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020402:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020404:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020408:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802040a:	1409      	asrs	r1, r1, #16
 802040c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020410:	141b      	asrs	r3, r3, #16
 8020412:	fb04 1303 	mla	r3, r4, r3, r1
 8020416:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020418:	18ce      	adds	r6, r1, r3
 802041a:	5ccb      	ldrb	r3, [r1, r3]
 802041c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020420:	0e1f      	lsrs	r7, r3, #24
 8020422:	2a00      	cmp	r2, #0
 8020424:	f000 8114 	beq.w	8020650 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8020428:	7871      	ldrb	r1, [r6, #1]
 802042a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802042e:	910e      	str	r1, [sp, #56]	; 0x38
 8020430:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020434:	2800      	cmp	r0, #0
 8020436:	f000 8115 	beq.w	8020664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 802043a:	1931      	adds	r1, r6, r4
 802043c:	5d36      	ldrb	r6, [r6, r4]
 802043e:	7849      	ldrb	r1, [r1, #1]
 8020440:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020444:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020448:	960a      	str	r6, [sp, #40]	; 0x28
 802044a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802044e:	0e0e      	lsrs	r6, r1, #24
 8020450:	910f      	str	r1, [sp, #60]	; 0x3c
 8020452:	b292      	uxth	r2, r2
 8020454:	b280      	uxth	r0, r0
 8020456:	fb02 fb00 	mul.w	fp, r2, r0
 802045a:	0112      	lsls	r2, r2, #4
 802045c:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020460:	eba2 090b 	sub.w	r9, r2, fp
 8020464:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020468:	b280      	uxth	r0, r0
 802046a:	fa1f f989 	uxth.w	r9, r9
 802046e:	1a09      	subs	r1, r1, r0
 8020470:	fb09 f20e 	mul.w	r2, r9, lr
 8020474:	b289      	uxth	r1, r1
 8020476:	fb01 2207 	mla	r2, r1, r7, r2
 802047a:	fb00 220a 	mla	r2, r0, sl, r2
 802047e:	fb0b 2206 	mla	r2, fp, r6, r2
 8020482:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020486:	9213      	str	r2, [sp, #76]	; 0x4c
 8020488:	2a00      	cmp	r2, #0
 802048a:	f000 80d4 	beq.w	8020636 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 802048e:	2fff      	cmp	r7, #255	; 0xff
 8020490:	d01a      	beq.n	80204c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8020492:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020496:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802049a:	fb07 fc0c 	mul.w	ip, r7, ip
 802049e:	435f      	muls	r7, r3
 80204a0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80204a4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80204a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80204ac:	4463      	add	r3, ip
 80204ae:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80204b2:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80204b6:	0a1b      	lsrs	r3, r3, #8
 80204b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80204c0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80204c4:	ea43 030c 	orr.w	r3, r3, ip
 80204c8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80204cc:	d01f      	beq.n	802050e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 80204ce:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80204d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80204d2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80204d6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80204da:	fb0e f707 	mul.w	r7, lr, r7
 80204de:	fb0e fe0c 	mul.w	lr, lr, ip
 80204e2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80204e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80204ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204ee:	44bc      	add	ip, r7
 80204f0:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80204f4:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80204f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020500:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020504:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020508:	ea4c 020e 	orr.w	r2, ip, lr
 802050c:	920e      	str	r2, [sp, #56]	; 0x38
 802050e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020512:	d01e      	beq.n	8020552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8020514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020516:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802051a:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802051e:	fb0a fe0e 	mul.w	lr, sl, lr
 8020522:	fb0a fa07 	mul.w	sl, sl, r7
 8020526:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802052a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802052e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020532:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020536:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802053a:	44f4      	add	ip, lr
 802053c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020540:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020544:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020548:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802054c:	ea4c 020a 	orr.w	r2, ip, sl
 8020550:	920a      	str	r2, [sp, #40]	; 0x28
 8020552:	2eff      	cmp	r6, #255	; 0xff
 8020554:	d01c      	beq.n	8020590 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8020556:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020558:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802055c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020560:	fb06 fe0e 	mul.w	lr, r6, lr
 8020564:	437e      	muls	r6, r7
 8020566:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802056a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802056e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020572:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020576:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802057a:	44f4      	add	ip, lr
 802057c:	0a36      	lsrs	r6, r6, #8
 802057e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020582:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020586:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802058a:	ea4c 0206 	orr.w	r2, ip, r6
 802058e:	920f      	str	r2, [sp, #60]	; 0x3c
 8020590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020592:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020596:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802059a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802059e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80205a0:	fb09 f606 	mul.w	r6, r9, r6
 80205a4:	fb01 6607 	mla	r6, r1, r7, r6
 80205a8:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80205ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80205ae:	fb00 6607 	mla	r6, r0, r7, r6
 80205b2:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80205b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80205b8:	fb0b 6607 	mla	r6, fp, r7, r6
 80205bc:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80205c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80205c2:	fb09 f907 	mul.w	r9, r9, r7
 80205c6:	0a36      	lsrs	r6, r6, #8
 80205c8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80205cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80205ce:	fb01 9303 	mla	r3, r1, r3, r9
 80205d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80205d6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80205da:	fb00 330c 	mla	r3, r0, ip, r3
 80205de:	fb0b 3e0e 	mla	lr, fp, lr, r3
 80205e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80205e4:	43da      	mvns	r2, r3
 80205e6:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 80205ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80205ee:	b2d2      	uxtb	r2, r2
 80205f0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80205f4:	fb03 f102 	mul.w	r1, r3, r2
 80205f8:	ea46 060e 	orr.w	r6, r6, lr
 80205fc:	1c4b      	adds	r3, r1, #1
 80205fe:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020602:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020606:	f808 3c03 	strb.w	r3, [r8, #-3]
 802060a:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 802060e:	4353      	muls	r3, r2
 8020610:	1c59      	adds	r1, r3, #1
 8020612:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020616:	0a33      	lsrs	r3, r6, #8
 8020618:	0c36      	lsrs	r6, r6, #16
 802061a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802061e:	f808 3c02 	strb.w	r3, [r8, #-2]
 8020622:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8020626:	435a      	muls	r2, r3
 8020628:	1c53      	adds	r3, r2, #1
 802062a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802062e:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8020632:	f808 6c01 	strb.w	r6, [r8, #-1]
 8020636:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020638:	f108 0803 	add.w	r8, r8, #3
 802063c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802063e:	4413      	add	r3, r2
 8020640:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020642:	9329      	str	r3, [sp, #164]	; 0xa4
 8020644:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020646:	4413      	add	r3, r2
 8020648:	932a      	str	r3, [sp, #168]	; 0xa8
 802064a:	9b07      	ldr	r3, [sp, #28]
 802064c:	3b01      	subs	r3, #1
 802064e:	e508      	b.n	8020062 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8020650:	b158      	cbz	r0, 802066a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8020652:	5d31      	ldrb	r1, [r6, r4]
 8020654:	26ff      	movs	r6, #255	; 0xff
 8020656:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802065a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802065e:	910a      	str	r1, [sp, #40]	; 0x28
 8020660:	46b6      	mov	lr, r6
 8020662:	e6f6      	b.n	8020452 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8020664:	26ff      	movs	r6, #255	; 0xff
 8020666:	46b2      	mov	sl, r6
 8020668:	e6f3      	b.n	8020452 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 802066a:	26ff      	movs	r6, #255	; 0xff
 802066c:	46b2      	mov	sl, r6
 802066e:	e7f7      	b.n	8020660 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8020670:	b017      	add	sp, #92	; 0x5c
 8020672:	ecbd 8b08 	vpop	{d8-d11}
 8020676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802067c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 802067c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020680:	b08d      	sub	sp, #52	; 0x34
 8020682:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8020686:	9103      	str	r1, [sp, #12]
 8020688:	fb07 5803 	mla	r8, r7, r3, r5
 802068c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8020690:	9803      	ldr	r0, [sp, #12]
 8020692:	2f00      	cmp	r7, #0
 8020694:	910b      	str	r1, [sp, #44]	; 0x2c
 8020696:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802069a:	9903      	ldr	r1, [sp, #12]
 802069c:	9c03      	ldr	r4, [sp, #12]
 802069e:	eb02 0608 	add.w	r6, r2, r8
 80206a2:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80206a6:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80206aa:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80206ae:	7809      	ldrb	r1, [r1, #0]
 80206b0:	7840      	ldrb	r0, [r0, #1]
 80206b2:	78a4      	ldrb	r4, [r4, #2]
 80206b4:	db51      	blt.n	802075a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80206b6:	45be      	cmp	lr, r7
 80206b8:	dd4f      	ble.n	802075a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80206ba:	2d00      	cmp	r5, #0
 80206bc:	db49      	blt.n	8020752 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80206be:	42ab      	cmp	r3, r5
 80206c0:	dd47      	ble.n	8020752 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80206c2:	f812 2008 	ldrb.w	r2, [r2, r8]
 80206c6:	9204      	str	r2, [sp, #16]
 80206c8:	7872      	ldrb	r2, [r6, #1]
 80206ca:	9205      	str	r2, [sp, #20]
 80206cc:	78b2      	ldrb	r2, [r6, #2]
 80206ce:	9206      	str	r2, [sp, #24]
 80206d0:	1c6a      	adds	r2, r5, #1
 80206d2:	d449      	bmi.n	8020768 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80206d4:	4293      	cmp	r3, r2
 80206d6:	dd47      	ble.n	8020768 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80206d8:	f1bc 0f00 	cmp.w	ip, #0
 80206dc:	d044      	beq.n	8020768 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80206de:	7972      	ldrb	r2, [r6, #5]
 80206e0:	f896 b003 	ldrb.w	fp, [r6, #3]
 80206e4:	f896 a004 	ldrb.w	sl, [r6, #4]
 80206e8:	9201      	str	r2, [sp, #4]
 80206ea:	3701      	adds	r7, #1
 80206ec:	d444      	bmi.n	8020778 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80206ee:	45be      	cmp	lr, r7
 80206f0:	dd42      	ble.n	8020778 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80206f2:	f1b9 0f00 	cmp.w	r9, #0
 80206f6:	f000 80c1 	beq.w	802087c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80206fa:	2d00      	cmp	r5, #0
 80206fc:	db38      	blt.n	8020770 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80206fe:	42ab      	cmp	r3, r5
 8020700:	dd36      	ble.n	8020770 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8020702:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020706:	f816 8002 	ldrb.w	r8, [r6, r2]
 802070a:	2203      	movs	r2, #3
 802070c:	fb03 6702 	mla	r7, r3, r2, r6
 8020710:	fb03 6202 	mla	r2, r3, r2, r6
 8020714:	787f      	ldrb	r7, [r7, #1]
 8020716:	f892 e002 	ldrb.w	lr, [r2, #2]
 802071a:	9702      	str	r7, [sp, #8]
 802071c:	3501      	adds	r5, #1
 802071e:	d432      	bmi.n	8020786 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020720:	42ab      	cmp	r3, r5
 8020722:	dd30      	ble.n	8020786 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020724:	f1bc 0f00 	cmp.w	ip, #0
 8020728:	d031      	beq.n	802078e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 802072a:	2703      	movs	r7, #3
 802072c:	fb13 7207 	smlabb	r2, r3, r7, r7
 8020730:	5cb5      	ldrb	r5, [r6, r2]
 8020732:	fb03 6207 	mla	r2, r3, r7, r6
 8020736:	fb03 6307 	mla	r3, r3, r7, r6
 802073a:	7912      	ldrb	r2, [r2, #4]
 802073c:	795e      	ldrb	r6, [r3, #5]
 802073e:	f1bc 0f0f 	cmp.w	ip, #15
 8020742:	d927      	bls.n	8020794 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8020744:	4b53      	ldr	r3, [pc, #332]	; (8020894 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8020746:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802074a:	4a53      	ldr	r2, [pc, #332]	; (8020898 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 802074c:	4853      	ldr	r0, [pc, #332]	; (802089c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 802074e:	f004 facf 	bl	8024cf0 <__assert_func>
 8020752:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020756:	9104      	str	r1, [sp, #16]
 8020758:	e7ba      	b.n	80206d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 802075a:	9401      	str	r4, [sp, #4]
 802075c:	4682      	mov	sl, r0
 802075e:	468b      	mov	fp, r1
 8020760:	9104      	str	r1, [sp, #16]
 8020762:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020766:	e7c0      	b.n	80206ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020768:	9401      	str	r4, [sp, #4]
 802076a:	4682      	mov	sl, r0
 802076c:	468b      	mov	fp, r1
 802076e:	e7bc      	b.n	80206ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020770:	46a6      	mov	lr, r4
 8020772:	9002      	str	r0, [sp, #8]
 8020774:	4688      	mov	r8, r1
 8020776:	e7d1      	b.n	802071c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8020778:	4626      	mov	r6, r4
 802077a:	4602      	mov	r2, r0
 802077c:	460d      	mov	r5, r1
 802077e:	46a6      	mov	lr, r4
 8020780:	9002      	str	r0, [sp, #8]
 8020782:	4688      	mov	r8, r1
 8020784:	e7db      	b.n	802073e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8020786:	4626      	mov	r6, r4
 8020788:	4602      	mov	r2, r0
 802078a:	460d      	mov	r5, r1
 802078c:	e7d7      	b.n	802073e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802078e:	4626      	mov	r6, r4
 8020790:	4602      	mov	r2, r0
 8020792:	460d      	mov	r5, r1
 8020794:	f1b9 0f0f 	cmp.w	r9, #15
 8020798:	d8d4      	bhi.n	8020744 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802079a:	fa1f f38c 	uxth.w	r3, ip
 802079e:	fa1f fc89 	uxth.w	ip, r9
 80207a2:	fb03 f70c 	mul.w	r7, r3, ip
 80207a6:	011b      	lsls	r3, r3, #4
 80207a8:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80207ac:	9707      	str	r7, [sp, #28]
 80207ae:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80207b2:	fa1f fc8c 	uxth.w	ip, ip
 80207b6:	eba7 070c 	sub.w	r7, r7, ip
 80207ba:	b2bf      	uxth	r7, r7
 80207bc:	9709      	str	r7, [sp, #36]	; 0x24
 80207be:	9f07      	ldr	r7, [sp, #28]
 80207c0:	1bdb      	subs	r3, r3, r7
 80207c2:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80207c6:	b29b      	uxth	r3, r3
 80207c8:	9708      	str	r7, [sp, #32]
 80207ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80207cc:	930a      	str	r3, [sp, #40]	; 0x28
 80207ce:	ea6f 0907 	mvn.w	r9, r7
 80207d2:	fb03 fb0b 	mul.w	fp, r3, fp
 80207d6:	9f04      	ldr	r7, [sp, #16]
 80207d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207da:	fa5f f989 	uxtb.w	r9, r9
 80207de:	fb03 bb07 	mla	fp, r3, r7, fp
 80207e2:	9f07      	ldr	r7, [sp, #28]
 80207e4:	fb11 f109 	smulbb	r1, r1, r9
 80207e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80207ea:	fb0c b808 	mla	r8, ip, r8, fp
 80207ee:	fb10 f009 	smulbb	r0, r0, r9
 80207f2:	fb14 f409 	smulbb	r4, r4, r9
 80207f6:	fb07 8805 	mla	r8, r7, r5, r8
 80207fa:	9d08      	ldr	r5, [sp, #32]
 80207fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80207fe:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020802:	fb08 1805 	mla	r8, r8, r5, r1
 8020806:	9d05      	ldr	r5, [sp, #20]
 8020808:	fa1f f888 	uxth.w	r8, r8
 802080c:	f108 0101 	add.w	r1, r8, #1
 8020810:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8020814:	9903      	ldr	r1, [sp, #12]
 8020816:	ea4f 2828 	mov.w	r8, r8, asr #8
 802081a:	f881 8000 	strb.w	r8, [r1]
 802081e:	fb03 f10a 	mul.w	r1, r3, sl
 8020822:	fb07 1105 	mla	r1, r7, r5, r1
 8020826:	9d02      	ldr	r5, [sp, #8]
 8020828:	fb0c 1105 	mla	r1, ip, r5, r1
 802082c:	9d07      	ldr	r5, [sp, #28]
 802082e:	fb05 1102 	mla	r1, r5, r2, r1
 8020832:	9a08      	ldr	r2, [sp, #32]
 8020834:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020838:	fb01 0102 	mla	r1, r1, r2, r0
 802083c:	9a03      	ldr	r2, [sp, #12]
 802083e:	b289      	uxth	r1, r1
 8020840:	1c48      	adds	r0, r1, #1
 8020842:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020846:	1209      	asrs	r1, r1, #8
 8020848:	7051      	strb	r1, [r2, #1]
 802084a:	9a01      	ldr	r2, [sp, #4]
 802084c:	4353      	muls	r3, r2
 802084e:	9a06      	ldr	r2, [sp, #24]
 8020850:	fb07 3702 	mla	r7, r7, r2, r3
 8020854:	9b08      	ldr	r3, [sp, #32]
 8020856:	fb0c 7c0e 	mla	ip, ip, lr, r7
 802085a:	fb05 c606 	mla	r6, r5, r6, ip
 802085e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020862:	fb06 4603 	mla	r6, r6, r3, r4
 8020866:	9b03      	ldr	r3, [sp, #12]
 8020868:	b2b6      	uxth	r6, r6
 802086a:	f106 0e01 	add.w	lr, r6, #1
 802086e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8020872:	1236      	asrs	r6, r6, #8
 8020874:	709e      	strb	r6, [r3, #2]
 8020876:	b00d      	add	sp, #52	; 0x34
 8020878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802087c:	f1bc 0f0f 	cmp.w	ip, #15
 8020880:	f63f af60 	bhi.w	8020744 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8020884:	4626      	mov	r6, r4
 8020886:	4602      	mov	r2, r0
 8020888:	460d      	mov	r5, r1
 802088a:	46a6      	mov	lr, r4
 802088c:	9002      	str	r0, [sp, #8]
 802088e:	4688      	mov	r8, r1
 8020890:	e783      	b.n	802079a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8020892:	bf00      	nop
 8020894:	080296e7 	.word	0x080296e7
 8020898:	08029bde 	.word	0x08029bde
 802089c:	080297b0 	.word	0x080297b0

080208a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80208a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208a4:	ed2d 8b08 	vpush	{d8-d11}
 80208a8:	b0a1      	sub	sp, #132	; 0x84
 80208aa:	eeb0 aa40 	vmov.f32	s20, s0
 80208ae:	eef0 9a60 	vmov.f32	s19, s1
 80208b2:	9307      	str	r3, [sp, #28]
 80208b4:	eeb0 9a41 	vmov.f32	s18, s2
 80208b8:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80208bc:	eeb0 8a62 	vmov.f32	s16, s5
 80208c0:	9210      	str	r2, [sp, #64]	; 0x40
 80208c2:	eef0 8a43 	vmov.f32	s17, s6
 80208c6:	9308      	str	r3, [sp, #32]
 80208c8:	eef0 ba44 	vmov.f32	s23, s8
 80208cc:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80208d0:	eeb0 ba64 	vmov.f32	s22, s9
 80208d4:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80208d6:	eef0 aa45 	vmov.f32	s21, s10
 80208da:	930a      	str	r3, [sp, #40]	; 0x28
 80208dc:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80208e0:	901f      	str	r0, [sp, #124]	; 0x7c
 80208e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80208e4:	6850      	ldr	r0, [r2, #4]
 80208e6:	910e      	str	r1, [sp, #56]	; 0x38
 80208e8:	6812      	ldr	r2, [r2, #0]
 80208ea:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80208ee:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 80208f2:	fb00 1303 	mla	r3, r0, r3, r1
 80208f6:	9908      	ldr	r1, [sp, #32]
 80208f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208fc:	18d3      	adds	r3, r2, r3
 80208fe:	2203      	movs	r2, #3
 8020900:	9309      	str	r3, [sp, #36]	; 0x24
 8020902:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8020904:	681b      	ldr	r3, [r3, #0]
 8020906:	930c      	str	r3, [sp, #48]	; 0x30
 8020908:	f06f 0304 	mvn.w	r3, #4
 802090c:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020910:	930d      	str	r3, [sp, #52]	; 0x34
 8020912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020914:	43db      	mvns	r3, r3
 8020916:	b2db      	uxtb	r3, r3
 8020918:	930b      	str	r3, [sp, #44]	; 0x2c
 802091a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802091c:	2b00      	cmp	r3, #0
 802091e:	dc03      	bgt.n	8020928 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8020920:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020922:	2b00      	cmp	r3, #0
 8020924:	f340 81df 	ble.w	8020ce6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020928:	9b07      	ldr	r3, [sp, #28]
 802092a:	2b00      	cmp	r3, #0
 802092c:	f340 80f2 	ble.w	8020b14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020930:	ea5f 4228 	movs.w	r2, r8, asr #16
 8020934:	ea4f 432b 	mov.w	r3, fp, asr #16
 8020938:	d430      	bmi.n	802099c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802093a:	1c51      	adds	r1, r2, #1
 802093c:	9808      	ldr	r0, [sp, #32]
 802093e:	4281      	cmp	r1, r0
 8020940:	da2f      	bge.n	80209a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020942:	2b00      	cmp	r3, #0
 8020944:	db2d      	blt.n	80209a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020946:	1c59      	adds	r1, r3, #1
 8020948:	980a      	ldr	r0, [sp, #40]	; 0x28
 802094a:	4288      	cmp	r0, r1
 802094c:	dd29      	ble.n	80209a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802094e:	9b07      	ldr	r3, [sp, #28]
 8020950:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020952:	3b01      	subs	r3, #1
 8020954:	fb02 8203 	mla	r2, r2, r3, r8
 8020958:	1412      	asrs	r2, r2, #16
 802095a:	d42d      	bmi.n	80209b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802095c:	3201      	adds	r2, #1
 802095e:	9908      	ldr	r1, [sp, #32]
 8020960:	4291      	cmp	r1, r2
 8020962:	dd29      	ble.n	80209b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020964:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020966:	fb02 b303 	mla	r3, r2, r3, fp
 802096a:	141b      	asrs	r3, r3, #16
 802096c:	d424      	bmi.n	80209b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802096e:	3301      	adds	r3, #1
 8020970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020972:	429a      	cmp	r2, r3
 8020974:	dd20      	ble.n	80209b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020978:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802097c:	1cde      	adds	r6, r3, #3
 802097e:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8020982:	f1bc 0f00 	cmp.w	ip, #0
 8020986:	f300 811f 	bgt.w	8020bc8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 802098a:	9b07      	ldr	r3, [sp, #28]
 802098c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020992:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020996:	4423      	add	r3, r4
 8020998:	9309      	str	r3, [sp, #36]	; 0x24
 802099a:	e0bd      	b.n	8020b18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802099c:	1c57      	adds	r7, r2, #1
 802099e:	f040 80ae 	bne.w	8020afe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80209a2:	9908      	ldr	r1, [sp, #32]
 80209a4:	428a      	cmp	r2, r1
 80209a6:	f280 80aa 	bge.w	8020afe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80209aa:	1c5e      	adds	r6, r3, #1
 80209ac:	f2c0 80a7 	blt.w	8020afe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80209b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80209b2:	4293      	cmp	r3, r2
 80209b4:	f280 80a3 	bge.w	8020afe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80209b8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80209bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80209be:	f1ba 0f00 	cmp.w	sl, #0
 80209c2:	dde2      	ble.n	802098a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80209c4:	ea5f 4028 	movs.w	r0, r8, asr #16
 80209c8:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80209cc:	ea4f 412b 	mov.w	r1, fp, asr #16
 80209d0:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80209d4:	f100 80df 	bmi.w	8020b96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80209d8:	1c45      	adds	r5, r0, #1
 80209da:	9f08      	ldr	r7, [sp, #32]
 80209dc:	42af      	cmp	r7, r5
 80209de:	f340 80dc 	ble.w	8020b9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80209e2:	2900      	cmp	r1, #0
 80209e4:	f2c0 80d9 	blt.w	8020b9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80209e8:	1c4d      	adds	r5, r1, #1
 80209ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80209ec:	42af      	cmp	r7, r5
 80209ee:	f340 80d4 	ble.w	8020b9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80209f2:	9d08      	ldr	r5, [sp, #32]
 80209f4:	fb05 0101 	mla	r1, r5, r1, r0
 80209f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80209fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80209fe:	1845      	adds	r5, r0, r1
 8020a00:	5c40      	ldrb	r0, [r0, r1]
 8020a02:	792f      	ldrb	r7, [r5, #4]
 8020a04:	7869      	ldrb	r1, [r5, #1]
 8020a06:	9711      	str	r7, [sp, #68]	; 0x44
 8020a08:	796f      	ldrb	r7, [r5, #5]
 8020a0a:	f895 e002 	ldrb.w	lr, [r5, #2]
 8020a0e:	f895 9003 	ldrb.w	r9, [r5, #3]
 8020a12:	9712      	str	r7, [sp, #72]	; 0x48
 8020a14:	b17a      	cbz	r2, 8020a36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8020a16:	3505      	adds	r5, #5
 8020a18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020a1a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020a1c:	19ef      	adds	r7, r5, r7
 8020a1e:	5d2d      	ldrb	r5, [r5, r4]
 8020a20:	787c      	ldrb	r4, [r7, #1]
 8020a22:	9513      	str	r5, [sp, #76]	; 0x4c
 8020a24:	9415      	str	r4, [sp, #84]	; 0x54
 8020a26:	78bc      	ldrb	r4, [r7, #2]
 8020a28:	9417      	str	r4, [sp, #92]	; 0x5c
 8020a2a:	78fc      	ldrb	r4, [r7, #3]
 8020a2c:	9414      	str	r4, [sp, #80]	; 0x50
 8020a2e:	793c      	ldrb	r4, [r7, #4]
 8020a30:	9416      	str	r4, [sp, #88]	; 0x58
 8020a32:	797c      	ldrb	r4, [r7, #5]
 8020a34:	9418      	str	r4, [sp, #96]	; 0x60
 8020a36:	b29b      	uxth	r3, r3
 8020a38:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020a3a:	b292      	uxth	r2, r2
 8020a3c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8020a40:	fb03 f702 	mul.w	r7, r3, r2
 8020a44:	011b      	lsls	r3, r3, #4
 8020a46:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8020a4a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020a4e:	1bdb      	subs	r3, r3, r7
 8020a50:	b292      	uxth	r2, r2
 8020a52:	b29b      	uxth	r3, r3
 8020a54:	ebac 0c02 	sub.w	ip, ip, r2
 8020a58:	fb03 f909 	mul.w	r9, r3, r9
 8020a5c:	fa1f fc8c 	uxth.w	ip, ip
 8020a60:	fb0c 9000 	mla	r0, ip, r0, r9
 8020a64:	f896 9000 	ldrb.w	r9, [r6]
 8020a68:	fb02 0004 	mla	r0, r2, r4, r0
 8020a6c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020a6e:	fb07 0004 	mla	r0, r7, r4, r0
 8020a72:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a74:	fb19 f904 	smulbb	r9, r9, r4
 8020a78:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020a7c:	fb00 9005 	mla	r0, r0, r5, r9
 8020a80:	b280      	uxth	r0, r0
 8020a82:	f100 0901 	add.w	r9, r0, #1
 8020a86:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8020a8a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020a8c:	4358      	muls	r0, r3
 8020a8e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020a92:	fb0c 0101 	mla	r1, ip, r1, r0
 8020a96:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020a98:	f886 9000 	strb.w	r9, [r6]
 8020a9c:	fb02 1100 	mla	r1, r2, r0, r1
 8020aa0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8020aa2:	fb07 1100 	mla	r1, r7, r0, r1
 8020aa6:	7870      	ldrb	r0, [r6, #1]
 8020aa8:	fb10 f004 	smulbb	r0, r0, r4
 8020aac:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020ab0:	fb01 0105 	mla	r1, r1, r5, r0
 8020ab4:	b289      	uxth	r1, r1
 8020ab6:	1c48      	adds	r0, r1, #1
 8020ab8:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020abc:	1209      	asrs	r1, r1, #8
 8020abe:	7071      	strb	r1, [r6, #1]
 8020ac0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020ac2:	434b      	muls	r3, r1
 8020ac4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020ac6:	fb0c 330e 	mla	r3, ip, lr, r3
 8020aca:	fb02 3201 	mla	r2, r2, r1, r3
 8020ace:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020ad0:	fb07 2703 	mla	r7, r7, r3, r2
 8020ad4:	78b2      	ldrb	r2, [r6, #2]
 8020ad6:	fb12 f204 	smulbb	r2, r2, r4
 8020ada:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020ade:	fb07 2505 	mla	r5, r7, r5, r2
 8020ae2:	b2ad      	uxth	r5, r5
 8020ae4:	1c6f      	adds	r7, r5, #1
 8020ae6:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8020aea:	122d      	asrs	r5, r5, #8
 8020aec:	70b5      	strb	r5, [r6, #2]
 8020aee:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020af0:	3603      	adds	r6, #3
 8020af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020af6:	4498      	add	r8, r3
 8020af8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020afa:	449b      	add	fp, r3
 8020afc:	e75f      	b.n	80209be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8020afe:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020b00:	4498      	add	r8, r3
 8020b02:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020b04:	449b      	add	fp, r3
 8020b06:	9b07      	ldr	r3, [sp, #28]
 8020b08:	3b01      	subs	r3, #1
 8020b0a:	9307      	str	r3, [sp, #28]
 8020b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b0e:	3303      	adds	r3, #3
 8020b10:	9309      	str	r3, [sp, #36]	; 0x24
 8020b12:	e709      	b.n	8020928 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8020b14:	f47f af1b 	bne.w	802094e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8020b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b1a:	2b00      	cmp	r3, #0
 8020b1c:	f340 80e3 	ble.w	8020ce6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020b24:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020b26:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020b2a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020b2e:	eef0 6a48 	vmov.f32	s13, s16
 8020b32:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020b36:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020b3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020b3e:	ee16 8a90 	vmov	r8, s13
 8020b42:	eef0 6a68 	vmov.f32	s13, s17
 8020b46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020b4a:	ee16 ba90 	vmov	fp, s13
 8020b4e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020b52:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020b56:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020b5a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020b5e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020b62:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020b66:	ee18 2a10 	vmov	r2, s16
 8020b6a:	eeb0 8a47 	vmov.f32	s16, s14
 8020b6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b72:	ee18 2a90 	vmov	r2, s17
 8020b76:	9335      	str	r3, [sp, #212]	; 0xd4
 8020b78:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020b7a:	eef0 8a67 	vmov.f32	s17, s15
 8020b7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b82:	9336      	str	r3, [sp, #216]	; 0xd8
 8020b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b88:	3b01      	subs	r3, #1
 8020b8a:	930e      	str	r3, [sp, #56]	; 0x38
 8020b8c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020b8e:	bf08      	it	eq
 8020b90:	4613      	moveq	r3, r2
 8020b92:	9307      	str	r3, [sp, #28]
 8020b94:	e6c1      	b.n	802091a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020b96:	1c45      	adds	r5, r0, #1
 8020b98:	d1a9      	bne.n	8020aee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020b9a:	9c08      	ldr	r4, [sp, #32]
 8020b9c:	42a0      	cmp	r0, r4
 8020b9e:	daa6      	bge.n	8020aee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020ba0:	1c4c      	adds	r4, r1, #1
 8020ba2:	dba4      	blt.n	8020aee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020ba4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020ba6:	428c      	cmp	r4, r1
 8020ba8:	dda1      	ble.n	8020aee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020baa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020bac:	9001      	str	r0, [sp, #4]
 8020bae:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020bb0:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8020bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020bb6:	4631      	mov	r1, r6
 8020bb8:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8020bbc:	9300      	str	r3, [sp, #0]
 8020bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020bc0:	9b08      	ldr	r3, [sp, #32]
 8020bc2:	f7ff fd5b 	bl	802067c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020bc6:	e792      	b.n	8020aee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020bc8:	ea4f 4228 	mov.w	r2, r8, asr #16
 8020bcc:	9c08      	ldr	r4, [sp, #32]
 8020bce:	ea4f 402b 	mov.w	r0, fp, asr #16
 8020bd2:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8020bd6:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8020bda:	fb04 2000 	mla	r0, r4, r0, r2
 8020bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020be0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020be2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020be6:	4402      	add	r2, r0
 8020be8:	5c25      	ldrb	r5, [r4, r0]
 8020bea:	7894      	ldrb	r4, [r2, #2]
 8020bec:	7850      	ldrb	r0, [r2, #1]
 8020bee:	9411      	str	r4, [sp, #68]	; 0x44
 8020bf0:	7954      	ldrb	r4, [r2, #5]
 8020bf2:	f892 a003 	ldrb.w	sl, [r2, #3]
 8020bf6:	f892 9004 	ldrb.w	r9, [r2, #4]
 8020bfa:	9412      	str	r4, [sp, #72]	; 0x48
 8020bfc:	b171      	cbz	r1, 8020c1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020bfe:	3205      	adds	r2, #5
 8020c00:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020c02:	1917      	adds	r7, r2, r4
 8020c04:	5d12      	ldrb	r2, [r2, r4]
 8020c06:	9219      	str	r2, [sp, #100]	; 0x64
 8020c08:	787a      	ldrb	r2, [r7, #1]
 8020c0a:	921b      	str	r2, [sp, #108]	; 0x6c
 8020c0c:	78ba      	ldrb	r2, [r7, #2]
 8020c0e:	921d      	str	r2, [sp, #116]	; 0x74
 8020c10:	78fa      	ldrb	r2, [r7, #3]
 8020c12:	921a      	str	r2, [sp, #104]	; 0x68
 8020c14:	793a      	ldrb	r2, [r7, #4]
 8020c16:	921c      	str	r2, [sp, #112]	; 0x70
 8020c18:	797a      	ldrb	r2, [r7, #5]
 8020c1a:	921e      	str	r2, [sp, #120]	; 0x78
 8020c1c:	b29b      	uxth	r3, r3
 8020c1e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8020c20:	b289      	uxth	r1, r1
 8020c22:	3603      	adds	r6, #3
 8020c24:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020c28:	fb03 f201 	mul.w	r2, r3, r1
 8020c2c:	011b      	lsls	r3, r3, #4
 8020c2e:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8020c32:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020c36:	1a9b      	subs	r3, r3, r2
 8020c38:	b289      	uxth	r1, r1
 8020c3a:	b29b      	uxth	r3, r3
 8020c3c:	1a7f      	subs	r7, r7, r1
 8020c3e:	fb03 fa0a 	mul.w	sl, r3, sl
 8020c42:	b2bf      	uxth	r7, r7
 8020c44:	fb03 f909 	mul.w	r9, r3, r9
 8020c48:	fb07 a505 	mla	r5, r7, r5, sl
 8020c4c:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8020c50:	fb07 9000 	mla	r0, r7, r0, r9
 8020c54:	fb01 5504 	mla	r5, r1, r4, r5
 8020c58:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020c5a:	fb02 5504 	mla	r5, r2, r4, r5
 8020c5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020c60:	fb1a fa04 	smulbb	sl, sl, r4
 8020c64:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020c68:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8020c6a:	fb05 a50e 	mla	r5, r5, lr, sl
 8020c6e:	fb01 0004 	mla	r0, r1, r4, r0
 8020c72:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020c74:	b2ad      	uxth	r5, r5
 8020c76:	fb02 0004 	mla	r0, r2, r4, r0
 8020c7a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020c7c:	f105 0a01 	add.w	sl, r5, #1
 8020c80:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020c84:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020c88:	122d      	asrs	r5, r5, #8
 8020c8a:	f806 5c06 	strb.w	r5, [r6, #-6]
 8020c8e:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8020c92:	fb15 f504 	smulbb	r5, r5, r4
 8020c96:	fb00 500e 	mla	r0, r0, lr, r5
 8020c9a:	b280      	uxth	r0, r0
 8020c9c:	1c45      	adds	r5, r0, #1
 8020c9e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020ca2:	1200      	asrs	r0, r0, #8
 8020ca4:	f806 0c05 	strb.w	r0, [r6, #-5]
 8020ca8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020caa:	4343      	muls	r3, r0
 8020cac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020cae:	fb07 3300 	mla	r3, r7, r0, r3
 8020cb2:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020cb4:	fb01 3100 	mla	r1, r1, r0, r3
 8020cb8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020cba:	fb02 1203 	mla	r2, r2, r3, r1
 8020cbe:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8020cc2:	fb11 f104 	smulbb	r1, r1, r4
 8020cc6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020cca:	fb02 120e 	mla	r2, r2, lr, r1
 8020cce:	b292      	uxth	r2, r2
 8020cd0:	1c53      	adds	r3, r2, #1
 8020cd2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020cd6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020cd8:	1212      	asrs	r2, r2, #8
 8020cda:	4498      	add	r8, r3
 8020cdc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020cde:	f806 2c04 	strb.w	r2, [r6, #-4]
 8020ce2:	449b      	add	fp, r3
 8020ce4:	e64d      	b.n	8020982 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8020ce6:	b021      	add	sp, #132	; 0x84
 8020ce8:	ecbd 8b08 	vpop	{d8-d11}
 8020cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020cf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cf4:	b085      	sub	sp, #20
 8020cf6:	784d      	ldrb	r5, [r1, #1]
 8020cf8:	788e      	ldrb	r6, [r1, #2]
 8020cfa:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8020cfe:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8020d02:	9403      	str	r4, [sp, #12]
 8020d04:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020d08:	780c      	ldrb	r4, [r1, #0]
 8020d0a:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8020d0e:	fb07 ce03 	mla	lr, r7, r3, ip
 8020d12:	2f00      	cmp	r7, #0
 8020d14:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020d18:	eb02 0b0e 	add.w	fp, r2, lr
 8020d1c:	db56      	blt.n	8020dcc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020d1e:	45b9      	cmp	r9, r7
 8020d20:	dd54      	ble.n	8020dcc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020d22:	f1bc 0f00 	cmp.w	ip, #0
 8020d26:	db4d      	blt.n	8020dc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020d28:	4563      	cmp	r3, ip
 8020d2a:	dd4b      	ble.n	8020dc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020d2c:	f812 200e 	ldrb.w	r2, [r2, lr]
 8020d30:	9200      	str	r2, [sp, #0]
 8020d32:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8020d36:	9201      	str	r2, [sp, #4]
 8020d38:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8020d3c:	9202      	str	r2, [sp, #8]
 8020d3e:	f11c 0201 	adds.w	r2, ip, #1
 8020d42:	d44a      	bmi.n	8020dda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020d44:	4293      	cmp	r3, r2
 8020d46:	dd48      	ble.n	8020dda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020d48:	2800      	cmp	r0, #0
 8020d4a:	d046      	beq.n	8020dda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020d4c:	f89b e003 	ldrb.w	lr, [fp, #3]
 8020d50:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8020d54:	f89b a005 	ldrb.w	sl, [fp, #5]
 8020d58:	3701      	adds	r7, #1
 8020d5a:	d446      	bmi.n	8020dea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020d5c:	45b9      	cmp	r9, r7
 8020d5e:	dd44      	ble.n	8020dea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020d60:	9a03      	ldr	r2, [sp, #12]
 8020d62:	2a00      	cmp	r2, #0
 8020d64:	d045      	beq.n	8020df2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8020d66:	f1bc 0f00 	cmp.w	ip, #0
 8020d6a:	db3a      	blt.n	8020de2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020d6c:	4563      	cmp	r3, ip
 8020d6e:	dd38      	ble.n	8020de2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020d70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020d74:	f04f 0903 	mov.w	r9, #3
 8020d78:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8020d7c:	fb03 b209 	mla	r2, r3, r9, fp
 8020d80:	fb03 b909 	mla	r9, r3, r9, fp
 8020d84:	7852      	ldrb	r2, [r2, #1]
 8020d86:	f899 9002 	ldrb.w	r9, [r9, #2]
 8020d8a:	f11c 0c01 	adds.w	ip, ip, #1
 8020d8e:	d40d      	bmi.n	8020dac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020d90:	4563      	cmp	r3, ip
 8020d92:	dd0b      	ble.n	8020dac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020d94:	b160      	cbz	r0, 8020db0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8020d96:	2603      	movs	r6, #3
 8020d98:	fb13 6406 	smlabb	r4, r3, r6, r6
 8020d9c:	fb03 b506 	mla	r5, r3, r6, fp
 8020da0:	fb03 b306 	mla	r3, r3, r6, fp
 8020da4:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8020da8:	792d      	ldrb	r5, [r5, #4]
 8020daa:	795e      	ldrb	r6, [r3, #5]
 8020dac:	280f      	cmp	r0, #15
 8020dae:	d802      	bhi.n	8020db6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020db0:	9b03      	ldr	r3, [sp, #12]
 8020db2:	2b0f      	cmp	r3, #15
 8020db4:	d922      	bls.n	8020dfc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8020db6:	4b2f      	ldr	r3, [pc, #188]	; (8020e74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8020db8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020dbc:	4a2e      	ldr	r2, [pc, #184]	; (8020e78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8020dbe:	482f      	ldr	r0, [pc, #188]	; (8020e7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8020dc0:	f003 ff96 	bl	8024cf0 <__assert_func>
 8020dc4:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020dc8:	9400      	str	r4, [sp, #0]
 8020dca:	e7b8      	b.n	8020d3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8020dcc:	46b2      	mov	sl, r6
 8020dce:	46a8      	mov	r8, r5
 8020dd0:	46a6      	mov	lr, r4
 8020dd2:	9400      	str	r4, [sp, #0]
 8020dd4:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020dd8:	e7be      	b.n	8020d58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020dda:	46b2      	mov	sl, r6
 8020ddc:	46a8      	mov	r8, r5
 8020dde:	46a6      	mov	lr, r4
 8020de0:	e7ba      	b.n	8020d58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020de2:	46b1      	mov	r9, r6
 8020de4:	462a      	mov	r2, r5
 8020de6:	4627      	mov	r7, r4
 8020de8:	e7cf      	b.n	8020d8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020dea:	46b1      	mov	r9, r6
 8020dec:	462a      	mov	r2, r5
 8020dee:	4627      	mov	r7, r4
 8020df0:	e7dc      	b.n	8020dac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020df2:	280f      	cmp	r0, #15
 8020df4:	d8df      	bhi.n	8020db6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020df6:	46b1      	mov	r9, r6
 8020df8:	462a      	mov	r2, r5
 8020dfa:	4627      	mov	r7, r4
 8020dfc:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8020e00:	b280      	uxth	r0, r0
 8020e02:	fb00 f30b 	mul.w	r3, r0, fp
 8020e06:	0100      	lsls	r0, r0, #4
 8020e08:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8020e0c:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8020e10:	1ac0      	subs	r0, r0, r3
 8020e12:	fa1f fb8b 	uxth.w	fp, fp
 8020e16:	b280      	uxth	r0, r0
 8020e18:	ebac 0c0b 	sub.w	ip, ip, fp
 8020e1c:	9003      	str	r0, [sp, #12]
 8020e1e:	fa1f fc8c 	uxth.w	ip, ip
 8020e22:	fb00 fe0e 	mul.w	lr, r0, lr
 8020e26:	9800      	ldr	r0, [sp, #0]
 8020e28:	fb0c ee00 	mla	lr, ip, r0, lr
 8020e2c:	9803      	ldr	r0, [sp, #12]
 8020e2e:	fb00 f808 	mul.w	r8, r0, r8
 8020e32:	9801      	ldr	r0, [sp, #4]
 8020e34:	fb0b ee07 	mla	lr, fp, r7, lr
 8020e38:	fb0c 8800 	mla	r8, ip, r0, r8
 8020e3c:	fb03 ee04 	mla	lr, r3, r4, lr
 8020e40:	fb0b 8202 	mla	r2, fp, r2, r8
 8020e44:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020e48:	fb03 2505 	mla	r5, r3, r5, r2
 8020e4c:	9a03      	ldr	r2, [sp, #12]
 8020e4e:	f881 e000 	strb.w	lr, [r1]
 8020e52:	fb02 f00a 	mul.w	r0, r2, sl
 8020e56:	9a02      	ldr	r2, [sp, #8]
 8020e58:	122d      	asrs	r5, r5, #8
 8020e5a:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020e5e:	704d      	strb	r5, [r1, #1]
 8020e60:	fb0b c909 	mla	r9, fp, r9, ip
 8020e64:	fb03 9606 	mla	r6, r3, r6, r9
 8020e68:	1236      	asrs	r6, r6, #8
 8020e6a:	708e      	strb	r6, [r1, #2]
 8020e6c:	b005      	add	sp, #20
 8020e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e72:	bf00      	nop
 8020e74:	080296e7 	.word	0x080296e7
 8020e78:	08029bde 	.word	0x08029bde
 8020e7c:	080297b0 	.word	0x080297b0

08020e80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e84:	ed2d 8b0a 	vpush	{d8-d12}
 8020e88:	b09d      	sub	sp, #116	; 0x74
 8020e8a:	eeb0 aa40 	vmov.f32	s20, s0
 8020e8e:	eef0 9a60 	vmov.f32	s19, s1
 8020e92:	9306      	str	r3, [sp, #24]
 8020e94:	eeb0 9a41 	vmov.f32	s18, s2
 8020e98:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8020e9c:	eeb0 8a62 	vmov.f32	s16, s5
 8020ea0:	901b      	str	r0, [sp, #108]	; 0x6c
 8020ea2:	eef0 8a43 	vmov.f32	s17, s6
 8020ea6:	9307      	str	r3, [sp, #28]
 8020ea8:	eeb0 ca44 	vmov.f32	s24, s8
 8020eac:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8020eb0:	eef0 ba64 	vmov.f32	s23, s9
 8020eb4:	eeb0 ba45 	vmov.f32	s22, s10
 8020eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8020eba:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020ebe:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8020ec2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020ec4:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020ec8:	6850      	ldr	r0, [r2, #4]
 8020eca:	6812      	ldr	r2, [r2, #0]
 8020ecc:	fb00 1303 	mla	r3, r0, r3, r1
 8020ed0:	9907      	ldr	r1, [sp, #28]
 8020ed2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020ed6:	18d3      	adds	r3, r2, r3
 8020ed8:	2203      	movs	r2, #3
 8020eda:	9308      	str	r3, [sp, #32]
 8020edc:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8020ede:	681b      	ldr	r3, [r3, #0]
 8020ee0:	930a      	str	r3, [sp, #40]	; 0x28
 8020ee2:	f06f 0304 	mvn.w	r3, #4
 8020ee6:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8020eea:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	dc03      	bgt.n	8020efe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8020ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	f340 8193 	ble.w	8021224 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8020efe:	9b06      	ldr	r3, [sp, #24]
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	f340 80d0 	ble.w	80210a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8020f06:	1432      	asrs	r2, r6, #16
 8020f08:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020f0c:	d42f      	bmi.n	8020f6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8020f0e:	1c51      	adds	r1, r2, #1
 8020f10:	9807      	ldr	r0, [sp, #28]
 8020f12:	4281      	cmp	r1, r0
 8020f14:	da2e      	bge.n	8020f74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	db2c      	blt.n	8020f74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020f1a:	1c59      	adds	r1, r3, #1
 8020f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020f1e:	4288      	cmp	r0, r1
 8020f20:	dd28      	ble.n	8020f74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020f22:	9b06      	ldr	r3, [sp, #24]
 8020f24:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8020f26:	3b01      	subs	r3, #1
 8020f28:	fb02 6203 	mla	r2, r2, r3, r6
 8020f2c:	1412      	asrs	r2, r2, #16
 8020f2e:	d42c      	bmi.n	8020f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020f30:	3201      	adds	r2, #1
 8020f32:	9907      	ldr	r1, [sp, #28]
 8020f34:	4291      	cmp	r1, r2
 8020f36:	dd28      	ble.n	8020f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020f38:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8020f3a:	fb02 5303 	mla	r3, r2, r3, r5
 8020f3e:	141b      	asrs	r3, r3, #16
 8020f40:	d423      	bmi.n	8020f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020f42:	3301      	adds	r3, #1
 8020f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f46:	429a      	cmp	r2, r3
 8020f48:	dd1f      	ble.n	8020f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020f4a:	9b08      	ldr	r3, [sp, #32]
 8020f4c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8020f50:	f103 0c03 	add.w	ip, r3, #3
 8020f54:	f1be 0f00 	cmp.w	lr, #0
 8020f58:	f300 80fa 	bgt.w	8021150 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8020f5c:	9b06      	ldr	r3, [sp, #24]
 8020f5e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020f62:	9b08      	ldr	r3, [sp, #32]
 8020f64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020f68:	4423      	add	r3, r4
 8020f6a:	9308      	str	r3, [sp, #32]
 8020f6c:	e09d      	b.n	80210aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8020f6e:	1c51      	adds	r1, r2, #1
 8020f70:	f040 808e 	bne.w	8021090 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020f74:	9907      	ldr	r1, [sp, #28]
 8020f76:	428a      	cmp	r2, r1
 8020f78:	f280 808a 	bge.w	8021090 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020f7c:	1c5f      	adds	r7, r3, #1
 8020f7e:	f2c0 8087 	blt.w	8021090 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f84:	4293      	cmp	r3, r2
 8020f86:	f280 8083 	bge.w	8021090 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020f8a:	9f06      	ldr	r7, [sp, #24]
 8020f8c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020f90:	2f00      	cmp	r7, #0
 8020f92:	dde3      	ble.n	8020f5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8020f94:	1432      	asrs	r2, r6, #16
 8020f96:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020f9a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020f9e:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8020fa2:	f100 80bf 	bmi.w	8021124 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8020fa6:	1c50      	adds	r0, r2, #1
 8020fa8:	9c07      	ldr	r4, [sp, #28]
 8020faa:	4284      	cmp	r4, r0
 8020fac:	f340 80bc 	ble.w	8021128 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	f2c0 80b9 	blt.w	8021128 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020fb6:	1c58      	adds	r0, r3, #1
 8020fb8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020fba:	4284      	cmp	r4, r0
 8020fbc:	f340 80b4 	ble.w	8021128 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020fc0:	9807      	ldr	r0, [sp, #28]
 8020fc2:	fb00 2303 	mla	r3, r0, r3, r2
 8020fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020fc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020fca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020fce:	441a      	add	r2, r3
 8020fd0:	f810 c003 	ldrb.w	ip, [r0, r3]
 8020fd4:	7953      	ldrb	r3, [r2, #5]
 8020fd6:	7850      	ldrb	r0, [r2, #1]
 8020fd8:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020fdc:	f892 9003 	ldrb.w	r9, [r2, #3]
 8020fe0:	f892 8004 	ldrb.w	r8, [r2, #4]
 8020fe4:	930e      	str	r3, [sp, #56]	; 0x38
 8020fe6:	f1bb 0f00 	cmp.w	fp, #0
 8020fea:	d00f      	beq.n	802100c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8020fec:	3205      	adds	r2, #5
 8020fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ff0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020ff2:	18d3      	adds	r3, r2, r3
 8020ff4:	5d12      	ldrb	r2, [r2, r4]
 8020ff6:	920f      	str	r2, [sp, #60]	; 0x3c
 8020ff8:	785a      	ldrb	r2, [r3, #1]
 8020ffa:	9211      	str	r2, [sp, #68]	; 0x44
 8020ffc:	789a      	ldrb	r2, [r3, #2]
 8020ffe:	9213      	str	r2, [sp, #76]	; 0x4c
 8021000:	78da      	ldrb	r2, [r3, #3]
 8021002:	9210      	str	r2, [sp, #64]	; 0x40
 8021004:	791a      	ldrb	r2, [r3, #4]
 8021006:	795b      	ldrb	r3, [r3, #5]
 8021008:	9212      	str	r2, [sp, #72]	; 0x48
 802100a:	9314      	str	r3, [sp, #80]	; 0x50
 802100c:	b28b      	uxth	r3, r1
 802100e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021010:	fa1f f28b 	uxth.w	r2, fp
 8021014:	fb03 fb02 	mul.w	fp, r3, r2
 8021018:	011b      	lsls	r3, r3, #4
 802101a:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802101e:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8021022:	eba3 030b 	sub.w	r3, r3, fp
 8021026:	b292      	uxth	r2, r2
 8021028:	b29b      	uxth	r3, r3
 802102a:	1a89      	subs	r1, r1, r2
 802102c:	fb03 f808 	mul.w	r8, r3, r8
 8021030:	b289      	uxth	r1, r1
 8021032:	fb03 f909 	mul.w	r9, r3, r9
 8021036:	fb01 8800 	mla	r8, r1, r0, r8
 802103a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802103c:	fb01 990c 	mla	r9, r1, ip, r9
 8021040:	fb02 8800 	mla	r8, r2, r0, r8
 8021044:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021046:	fb02 9904 	mla	r9, r2, r4, r9
 802104a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802104c:	fb0b 8800 	mla	r8, fp, r0, r8
 8021050:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021052:	fb0b 9904 	mla	r9, fp, r4, r9
 8021056:	4343      	muls	r3, r0
 8021058:	ea4f 2828 	mov.w	r8, r8, asr #8
 802105c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021060:	fb01 330e 	mla	r3, r1, lr, r3
 8021064:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021066:	f88a 9000 	strb.w	r9, [sl]
 802106a:	fb02 3201 	mla	r2, r2, r1, r3
 802106e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021070:	f88a 8001 	strb.w	r8, [sl, #1]
 8021074:	fb0b 2b03 	mla	fp, fp, r3, r2
 8021078:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 802107c:	f88a b002 	strb.w	fp, [sl, #2]
 8021080:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021082:	f10a 0a03 	add.w	sl, sl, #3
 8021086:	3f01      	subs	r7, #1
 8021088:	441e      	add	r6, r3
 802108a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802108c:	441d      	add	r5, r3
 802108e:	e77f      	b.n	8020f90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8021090:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021092:	441e      	add	r6, r3
 8021094:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021096:	441d      	add	r5, r3
 8021098:	9b06      	ldr	r3, [sp, #24]
 802109a:	3b01      	subs	r3, #1
 802109c:	9306      	str	r3, [sp, #24]
 802109e:	9b08      	ldr	r3, [sp, #32]
 80210a0:	3303      	adds	r3, #3
 80210a2:	9308      	str	r3, [sp, #32]
 80210a4:	e72b      	b.n	8020efe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80210a6:	f47f af3c 	bne.w	8020f22 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80210aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80210ac:	2b00      	cmp	r3, #0
 80210ae:	f340 80b9 	ble.w	8021224 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80210b2:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80210b6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80210b8:	ee79 9aab 	vadd.f32	s19, s19, s23
 80210bc:	eef0 6a48 	vmov.f32	s13, s16
 80210c0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80210c4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80210c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80210cc:	ee16 6a90 	vmov	r6, s13
 80210d0:	eef0 6a68 	vmov.f32	s13, s17
 80210d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80210d8:	ee16 5a90 	vmov	r5, s13
 80210dc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80210e0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80210e4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80210e8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80210ec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80210f0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80210f4:	ee18 2a10 	vmov	r2, s16
 80210f8:	eeb0 8a47 	vmov.f32	s16, s14
 80210fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8021100:	ee18 2a90 	vmov	r2, s17
 8021104:	9333      	str	r3, [sp, #204]	; 0xcc
 8021106:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021108:	eef0 8a67 	vmov.f32	s17, s15
 802110c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021110:	9334      	str	r3, [sp, #208]	; 0xd0
 8021112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021114:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021116:	3b01      	subs	r3, #1
 8021118:	930c      	str	r3, [sp, #48]	; 0x30
 802111a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802111c:	bf08      	it	eq
 802111e:	4613      	moveq	r3, r2
 8021120:	9306      	str	r3, [sp, #24]
 8021122:	e6e5      	b.n	8020ef0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021124:	1c54      	adds	r4, r2, #1
 8021126:	d1ab      	bne.n	8021080 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021128:	9807      	ldr	r0, [sp, #28]
 802112a:	4282      	cmp	r2, r0
 802112c:	daa8      	bge.n	8021080 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802112e:	1c58      	adds	r0, r3, #1
 8021130:	dba6      	blt.n	8021080 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021132:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021134:	4298      	cmp	r0, r3
 8021136:	dda3      	ble.n	8021080 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021138:	9000      	str	r0, [sp, #0]
 802113a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802113c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8021140:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8021144:	9b07      	ldr	r3, [sp, #28]
 8021146:	4651      	mov	r1, sl
 8021148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802114a:	f7ff fdd1 	bl	8020cf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802114e:	e797      	b.n	8021080 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021150:	1431      	asrs	r1, r6, #16
 8021152:	9c07      	ldr	r4, [sp, #28]
 8021154:	1428      	asrs	r0, r5, #16
 8021156:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802115a:	f3c6 3303 	ubfx	r3, r6, #12, #4
 802115e:	fb04 1000 	mla	r0, r4, r0, r1
 8021162:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021164:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021166:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802116a:	4401      	add	r1, r0
 802116c:	5c20      	ldrb	r0, [r4, r0]
 802116e:	f891 8002 	ldrb.w	r8, [r1, #2]
 8021172:	900e      	str	r0, [sp, #56]	; 0x38
 8021174:	f891 a003 	ldrb.w	sl, [r1, #3]
 8021178:	7848      	ldrb	r0, [r1, #1]
 802117a:	f891 9004 	ldrb.w	r9, [r1, #4]
 802117e:	f891 b005 	ldrb.w	fp, [r1, #5]
 8021182:	b172      	cbz	r2, 80211a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8021184:	3105      	adds	r1, #5
 8021186:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021188:	190f      	adds	r7, r1, r4
 802118a:	5d09      	ldrb	r1, [r1, r4]
 802118c:	9115      	str	r1, [sp, #84]	; 0x54
 802118e:	7879      	ldrb	r1, [r7, #1]
 8021190:	9117      	str	r1, [sp, #92]	; 0x5c
 8021192:	78b9      	ldrb	r1, [r7, #2]
 8021194:	9119      	str	r1, [sp, #100]	; 0x64
 8021196:	78f9      	ldrb	r1, [r7, #3]
 8021198:	9116      	str	r1, [sp, #88]	; 0x58
 802119a:	7939      	ldrb	r1, [r7, #4]
 802119c:	9118      	str	r1, [sp, #96]	; 0x60
 802119e:	7979      	ldrb	r1, [r7, #5]
 80211a0:	911a      	str	r1, [sp, #104]	; 0x68
 80211a2:	b29b      	uxth	r3, r3
 80211a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80211a6:	b292      	uxth	r2, r2
 80211a8:	f10c 0c03 	add.w	ip, ip, #3
 80211ac:	f10e 3eff 	add.w	lr, lr, #4294967295
 80211b0:	fb03 f102 	mul.w	r1, r3, r2
 80211b4:	011b      	lsls	r3, r3, #4
 80211b6:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 80211ba:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80211be:	1a5b      	subs	r3, r3, r1
 80211c0:	b292      	uxth	r2, r2
 80211c2:	b29b      	uxth	r3, r3
 80211c4:	1abf      	subs	r7, r7, r2
 80211c6:	fb03 f909 	mul.w	r9, r3, r9
 80211ca:	b2bf      	uxth	r7, r7
 80211cc:	fb03 fa0a 	mul.w	sl, r3, sl
 80211d0:	fb03 f30b 	mul.w	r3, r3, fp
 80211d4:	fb07 9900 	mla	r9, r7, r0, r9
 80211d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80211da:	fb07 aa04 	mla	sl, r7, r4, sl
 80211de:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80211e0:	fb02 9900 	mla	r9, r2, r0, r9
 80211e4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80211e6:	fb07 3308 	mla	r3, r7, r8, r3
 80211ea:	fb01 9900 	mla	r9, r1, r0, r9
 80211ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 80211f0:	fb02 aa04 	mla	sl, r2, r4, sl
 80211f4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80211f6:	fb02 3200 	mla	r2, r2, r0, r3
 80211fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80211fc:	fb01 aa04 	mla	sl, r1, r4, sl
 8021200:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021204:	fb01 2103 	mla	r1, r1, r3, r2
 8021208:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802120a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802120e:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8021212:	1209      	asrs	r1, r1, #8
 8021214:	441e      	add	r6, r3
 8021216:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021218:	f80c ac06 	strb.w	sl, [ip, #-6]
 802121c:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8021220:	441d      	add	r5, r3
 8021222:	e697      	b.n	8020f54 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8021224:	b01d      	add	sp, #116	; 0x74
 8021226:	ecbd 8b0a 	vpop	{d8-d12}
 802122a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021234:	b085      	sub	sp, #20
 8021236:	7888      	ldrb	r0, [r1, #2]
 8021238:	4691      	mov	r9, r2
 802123a:	9000      	str	r0, [sp, #0]
 802123c:	7848      	ldrb	r0, [r1, #1]
 802123e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021242:	9001      	str	r0, [sp, #4]
 8021244:	7808      	ldrb	r0, [r1, #0]
 8021246:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802124a:	9002      	str	r0, [sp, #8]
 802124c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021250:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021254:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021258:	fb04 c603 	mla	r6, r4, r3, ip
 802125c:	2c00      	cmp	r4, #0
 802125e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021262:	9a00      	ldr	r2, [sp, #0]
 8021264:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021268:	9a01      	ldr	r2, [sp, #4]
 802126a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802126e:	db3a      	blt.n	80212e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021270:	45a0      	cmp	r8, r4
 8021272:	dd38      	ble.n	80212e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021274:	f1bc 0f00 	cmp.w	ip, #0
 8021278:	db33      	blt.n	80212e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 802127a:	4563      	cmp	r3, ip
 802127c:	dd31      	ble.n	80212e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 802127e:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021282:	f11c 0601 	adds.w	r6, ip, #1
 8021286:	d431      	bmi.n	80212ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021288:	42b3      	cmp	r3, r6
 802128a:	dd2f      	ble.n	80212ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 802128c:	b375      	cbz	r5, 80212ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 802128e:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021292:	3401      	adds	r4, #1
 8021294:	d42e      	bmi.n	80212f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021296:	45a0      	cmp	r8, r4
 8021298:	dd2c      	ble.n	80212f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 802129a:	b35f      	cbz	r7, 80212f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 802129c:	f1bc 0f00 	cmp.w	ip, #0
 80212a0:	db26      	blt.n	80212f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80212a2:	4563      	cmp	r3, ip
 80212a4:	dd24      	ble.n	80212f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80212a6:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80212aa:	f11c 0c01 	adds.w	ip, ip, #1
 80212ae:	d405      	bmi.n	80212bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80212b0:	4563      	cmp	r3, ip
 80212b2:	dd03      	ble.n	80212bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80212b4:	b115      	cbz	r5, 80212bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80212b6:	3301      	adds	r3, #1
 80212b8:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80212bc:	2d0f      	cmp	r5, #15
 80212be:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80212c2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80212c6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80212ca:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80212ce:	d801      	bhi.n	80212d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 80212d0:	2f0f      	cmp	r7, #15
 80212d2:	d911      	bls.n	80212f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 80212d4:	4b80      	ldr	r3, [pc, #512]	; (80214d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 80212d6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80212da:	4a80      	ldr	r2, [pc, #512]	; (80214dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 80212dc:	4880      	ldr	r0, [pc, #512]	; (80214e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 80212de:	f003 fd07 	bl	8024cf0 <__assert_func>
 80212e2:	4602      	mov	r2, r0
 80212e4:	e7cd      	b.n	8021282 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 80212e6:	4606      	mov	r6, r0
 80212e8:	4602      	mov	r2, r0
 80212ea:	e7d2      	b.n	8021292 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80212ec:	4606      	mov	r6, r0
 80212ee:	e7d0      	b.n	8021292 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80212f0:	4604      	mov	r4, r0
 80212f2:	e7da      	b.n	80212aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 80212f4:	4604      	mov	r4, r0
 80212f6:	e7e1      	b.n	80212bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80212f8:	b2ab      	uxth	r3, r5
 80212fa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80212fe:	b2bf      	uxth	r7, r7
 8021300:	fb03 fe07 	mul.w	lr, r3, r7
 8021304:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021308:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802130c:	eba3 0c0e 	sub.w	ip, r3, lr
 8021310:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021314:	b2bf      	uxth	r7, r7
 8021316:	fa1f fc8c 	uxth.w	ip, ip
 802131a:	eba5 0507 	sub.w	r5, r5, r7
 802131e:	fb0c f30a 	mul.w	r3, ip, sl
 8021322:	b2ad      	uxth	r5, r5
 8021324:	fb05 330b 	mla	r3, r5, fp, r3
 8021328:	fb07 3309 	mla	r3, r7, r9, r3
 802132c:	fb0e 3308 	mla	r3, lr, r8, r3
 8021330:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021334:	9303      	str	r3, [sp, #12]
 8021336:	d018      	beq.n	802136a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8021338:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802133c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021340:	fb0b f303 	mul.w	r3, fp, r3
 8021344:	fb0b fb02 	mul.w	fp, fp, r2
 8021348:	0a1a      	lsrs	r2, r3, #8
 802134a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802134e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021352:	441a      	add	r2, r3
 8021354:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021358:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802135c:	0a12      	lsrs	r2, r2, #8
 802135e:	0a1b      	lsrs	r3, r3, #8
 8021360:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021364:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021368:	431a      	orrs	r2, r3
 802136a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802136e:	d019      	beq.n	80213a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8021370:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021374:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021378:	fb0a fb0b 	mul.w	fp, sl, fp
 802137c:	fb0a fa06 	mul.w	sl, sl, r6
 8021380:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021384:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021388:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802138c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021390:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021394:	445e      	add	r6, fp
 8021396:	0a1b      	lsrs	r3, r3, #8
 8021398:	0a36      	lsrs	r6, r6, #8
 802139a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802139e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80213a2:	431e      	orrs	r6, r3
 80213a4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80213a8:	d019      	beq.n	80213de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 80213aa:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80213ae:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80213b2:	fb09 fa0a 	mul.w	sl, r9, sl
 80213b6:	fb09 f904 	mul.w	r9, r9, r4
 80213ba:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80213be:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80213c2:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80213c6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80213ca:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80213ce:	4454      	add	r4, sl
 80213d0:	0a1b      	lsrs	r3, r3, #8
 80213d2:	0a24      	lsrs	r4, r4, #8
 80213d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80213d8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80213dc:	431c      	orrs	r4, r3
 80213de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80213e2:	d019      	beq.n	8021418 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 80213e4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80213e8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80213ec:	fb08 f909 	mul.w	r9, r8, r9
 80213f0:	fb08 f800 	mul.w	r8, r8, r0
 80213f4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80213f8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80213fc:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021400:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021404:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021408:	4448      	add	r0, r9
 802140a:	0a1b      	lsrs	r3, r3, #8
 802140c:	0a00      	lsrs	r0, r0, #8
 802140e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021412:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021416:	4318      	orrs	r0, r3
 8021418:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802141c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021420:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021424:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021428:	fb0c f808 	mul.w	r8, ip, r8
 802142c:	fb0c f606 	mul.w	r6, ip, r6
 8021430:	fb05 8803 	mla	r8, r5, r3, r8
 8021434:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021438:	fb05 6202 	mla	r2, r5, r2, r6
 802143c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021440:	fb07 8803 	mla	r8, r7, r3, r8
 8021444:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021448:	fb07 2704 	mla	r7, r7, r4, r2
 802144c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021450:	fb0e 8303 	mla	r3, lr, r3, r8
 8021454:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8021458:	fb0e 7e00 	mla	lr, lr, r0, r7
 802145c:	9803      	ldr	r0, [sp, #12]
 802145e:	b292      	uxth	r2, r2
 8021460:	9c02      	ldr	r4, [sp, #8]
 8021462:	0a1b      	lsrs	r3, r3, #8
 8021464:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021468:	4350      	muls	r0, r2
 802146a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802146e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021472:	ea43 0e0e 	orr.w	lr, r3, lr
 8021476:	1c43      	adds	r3, r0, #1
 8021478:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802147c:	fa5f f08e 	uxtb.w	r0, lr
 8021480:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021484:	b2db      	uxtb	r3, r3
 8021486:	fb14 f403 	smulbb	r4, r4, r3
 802148a:	fb00 4002 	mla	r0, r0, r2, r4
 802148e:	b280      	uxth	r0, r0
 8021490:	1c44      	adds	r4, r0, #1
 8021492:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021496:	9c01      	ldr	r4, [sp, #4]
 8021498:	fb14 f403 	smulbb	r4, r4, r3
 802149c:	1200      	asrs	r0, r0, #8
 802149e:	7008      	strb	r0, [r1, #0]
 80214a0:	f3ce 2007 	ubfx	r0, lr, #8, #8
 80214a4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80214a8:	fb00 4002 	mla	r0, r0, r2, r4
 80214ac:	b280      	uxth	r0, r0
 80214ae:	1c44      	adds	r4, r0, #1
 80214b0:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80214b4:	1200      	asrs	r0, r0, #8
 80214b6:	7048      	strb	r0, [r1, #1]
 80214b8:	9800      	ldr	r0, [sp, #0]
 80214ba:	fb10 f303 	smulbb	r3, r0, r3
 80214be:	fb0e 3202 	mla	r2, lr, r2, r3
 80214c2:	b292      	uxth	r2, r2
 80214c4:	f102 0e01 	add.w	lr, r2, #1
 80214c8:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80214cc:	1212      	asrs	r2, r2, #8
 80214ce:	708a      	strb	r2, [r1, #2]
 80214d0:	b005      	add	sp, #20
 80214d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214d6:	bf00      	nop
 80214d8:	080296e7 	.word	0x080296e7
 80214dc:	08029bde 	.word	0x08029bde
 80214e0:	080297b0 	.word	0x080297b0

080214e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80214e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214e8:	ed2d 8b08 	vpush	{d8-d11}
 80214ec:	b099      	sub	sp, #100	; 0x64
 80214ee:	eeb0 aa40 	vmov.f32	s20, s0
 80214f2:	eef0 9a60 	vmov.f32	s19, s1
 80214f6:	9306      	str	r3, [sp, #24]
 80214f8:	eeb0 9a41 	vmov.f32	s18, s2
 80214fc:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8021500:	eeb0 8a62 	vmov.f32	s16, s5
 8021504:	9216      	str	r2, [sp, #88]	; 0x58
 8021506:	eef0 8a43 	vmov.f32	s17, s6
 802150a:	9307      	str	r3, [sp, #28]
 802150c:	eef0 ba44 	vmov.f32	s23, s8
 8021510:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8021514:	eeb0 ba64 	vmov.f32	s22, s9
 8021518:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802151a:	eef0 aa45 	vmov.f32	s21, s10
 802151e:	9310      	str	r3, [sp, #64]	; 0x40
 8021520:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8021524:	9017      	str	r0, [sp, #92]	; 0x5c
 8021526:	9112      	str	r1, [sp, #72]	; 0x48
 8021528:	6850      	ldr	r0, [r2, #4]
 802152a:	9315      	str	r3, [sp, #84]	; 0x54
 802152c:	6812      	ldr	r2, [r2, #0]
 802152e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8021530:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8021534:	fb00 1303 	mla	r3, r0, r3, r1
 8021538:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802153c:	18d3      	adds	r3, r2, r3
 802153e:	930a      	str	r3, [sp, #40]	; 0x28
 8021540:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021542:	681b      	ldr	r3, [r3, #0]
 8021544:	9311      	str	r3, [sp, #68]	; 0x44
 8021546:	9b07      	ldr	r3, [sp, #28]
 8021548:	009b      	lsls	r3, r3, #2
 802154a:	930e      	str	r3, [sp, #56]	; 0x38
 802154c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802154e:	2b00      	cmp	r3, #0
 8021550:	dc03      	bgt.n	802155a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021552:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021554:	2b00      	cmp	r3, #0
 8021556:	f340 833b 	ble.w	8021bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 802155a:	9b06      	ldr	r3, [sp, #24]
 802155c:	2b00      	cmp	r3, #0
 802155e:	f340 8197 	ble.w	8021890 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8021562:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021564:	1423      	asrs	r3, r4, #16
 8021566:	1412      	asrs	r2, r2, #16
 8021568:	d432      	bmi.n	80215d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 802156a:	1c51      	adds	r1, r2, #1
 802156c:	9807      	ldr	r0, [sp, #28]
 802156e:	4288      	cmp	r0, r1
 8021570:	dd31      	ble.n	80215d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021572:	2b00      	cmp	r3, #0
 8021574:	db2f      	blt.n	80215d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021576:	1c59      	adds	r1, r3, #1
 8021578:	9810      	ldr	r0, [sp, #64]	; 0x40
 802157a:	4288      	cmp	r0, r1
 802157c:	dd2b      	ble.n	80215d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802157e:	9b06      	ldr	r3, [sp, #24]
 8021580:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021582:	3b01      	subs	r3, #1
 8021584:	992b      	ldr	r1, [sp, #172]	; 0xac
 8021586:	fb02 1203 	mla	r2, r2, r3, r1
 802158a:	1412      	asrs	r2, r2, #16
 802158c:	d42e      	bmi.n	80215ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802158e:	3201      	adds	r2, #1
 8021590:	9907      	ldr	r1, [sp, #28]
 8021592:	4291      	cmp	r1, r2
 8021594:	dd2a      	ble.n	80215ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021596:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021598:	fb02 4303 	mla	r3, r2, r3, r4
 802159c:	141b      	asrs	r3, r3, #16
 802159e:	d425      	bmi.n	80215ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80215a0:	3301      	adds	r3, #1
 80215a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80215a4:	429a      	cmp	r2, r3
 80215a6:	dd21      	ble.n	80215ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80215a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215aa:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 80215ae:	f103 0e03 	add.w	lr, r3, #3
 80215b2:	9b06      	ldr	r3, [sp, #24]
 80215b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80215b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80215b8:	2b00      	cmp	r3, #0
 80215ba:	f300 81d2 	bgt.w	8021962 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 80215be:	9b06      	ldr	r3, [sp, #24]
 80215c0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80215c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80215ca:	4423      	add	r3, r4
 80215cc:	930a      	str	r3, [sp, #40]	; 0x28
 80215ce:	e161      	b.n	8021894 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 80215d0:	1c51      	adds	r1, r2, #1
 80215d2:	f040 8150 	bne.w	8021876 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80215d6:	9907      	ldr	r1, [sp, #28]
 80215d8:	428a      	cmp	r2, r1
 80215da:	f280 814c 	bge.w	8021876 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80215de:	1c5a      	adds	r2, r3, #1
 80215e0:	f2c0 8149 	blt.w	8021876 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80215e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80215e6:	4293      	cmp	r3, r2
 80215e8:	f280 8145 	bge.w	8021876 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80215ec:	9b06      	ldr	r3, [sp, #24]
 80215ee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80215f0:	9314      	str	r3, [sp, #80]	; 0x50
 80215f2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80215f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80215f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80215fa:	2b00      	cmp	r3, #0
 80215fc:	dddf      	ble.n	80215be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80215fe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021600:	1423      	asrs	r3, r4, #16
 8021602:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021606:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802160a:	1412      	asrs	r2, r2, #16
 802160c:	f100 8190 	bmi.w	8021930 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8021610:	1c55      	adds	r5, r2, #1
 8021612:	9f07      	ldr	r7, [sp, #28]
 8021614:	42af      	cmp	r7, r5
 8021616:	f340 818d 	ble.w	8021934 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 802161a:	2b00      	cmp	r3, #0
 802161c:	f2c0 818a 	blt.w	8021934 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021620:	1c5d      	adds	r5, r3, #1
 8021622:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021624:	42af      	cmp	r7, r5
 8021626:	f340 8185 	ble.w	8021934 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 802162a:	9d07      	ldr	r5, [sp, #28]
 802162c:	fb03 2305 	mla	r3, r3, r5, r2
 8021630:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021632:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8021636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802163a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802163e:	2800      	cmp	r0, #0
 8021640:	f000 8167 	beq.w	8021912 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021644:	686a      	ldr	r2, [r5, #4]
 8021646:	920b      	str	r2, [sp, #44]	; 0x2c
 8021648:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802164c:	2900      	cmp	r1, #0
 802164e:	f000 8169 	beq.w	8021924 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8021652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021654:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021656:	18aa      	adds	r2, r5, r2
 8021658:	59ed      	ldr	r5, [r5, r7]
 802165a:	6852      	ldr	r2, [r2, #4]
 802165c:	9508      	str	r5, [sp, #32]
 802165e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8021662:	0e15      	lsrs	r5, r2, #24
 8021664:	920c      	str	r2, [sp, #48]	; 0x30
 8021666:	b280      	uxth	r0, r0
 8021668:	b289      	uxth	r1, r1
 802166a:	fb00 fb01 	mul.w	fp, r0, r1
 802166e:	0100      	lsls	r0, r0, #4
 8021670:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8021674:	eba0 090b 	sub.w	r9, r0, fp
 8021678:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 802167c:	b289      	uxth	r1, r1
 802167e:	fa1f f989 	uxth.w	r9, r9
 8021682:	1a52      	subs	r2, r2, r1
 8021684:	fb09 f008 	mul.w	r0, r9, r8
 8021688:	b292      	uxth	r2, r2
 802168a:	fb02 000c 	mla	r0, r2, ip, r0
 802168e:	fb01 000a 	mla	r0, r1, sl, r0
 8021692:	fb0b 0005 	mla	r0, fp, r5, r0
 8021696:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802169a:	2800      	cmp	r0, #0
 802169c:	f000 80e0 	beq.w	8021860 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80216a0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80216a4:	d01b      	beq.n	80216de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 80216a6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80216aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216ae:	fb0c fe0e 	mul.w	lr, ip, lr
 80216b2:	fb0c fc03 	mul.w	ip, ip, r3
 80216b6:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80216ba:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80216be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80216c2:	4473      	add	r3, lr
 80216c4:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80216c8:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80216cc:	0a1b      	lsrs	r3, r3, #8
 80216ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80216d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80216d6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80216da:	ea43 030e 	orr.w	r3, r3, lr
 80216de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80216e2:	d01e      	beq.n	8021722 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80216e4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80216e6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80216ea:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80216ee:	fb08 fc0c 	mul.w	ip, r8, ip
 80216f2:	fb08 f80e 	mul.w	r8, r8, lr
 80216f6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80216fa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80216fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021702:	44e6      	add	lr, ip
 8021704:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8021708:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 802170c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021710:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021714:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021718:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802171c:	ea4e 0708 	orr.w	r7, lr, r8
 8021720:	970b      	str	r7, [sp, #44]	; 0x2c
 8021722:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021726:	d01e      	beq.n	8021766 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021728:	9f08      	ldr	r7, [sp, #32]
 802172a:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802172e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021732:	fb0a f808 	mul.w	r8, sl, r8
 8021736:	fb0a fa0c 	mul.w	sl, sl, ip
 802173a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802173e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021742:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021746:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802174a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802174e:	44c6      	add	lr, r8
 8021750:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021754:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021758:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802175c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021760:	ea4e 070a 	orr.w	r7, lr, sl
 8021764:	9708      	str	r7, [sp, #32]
 8021766:	2dff      	cmp	r5, #255	; 0xff
 8021768:	d01d      	beq.n	80217a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 802176a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802176c:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021770:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021774:	fb05 f808 	mul.w	r8, r5, r8
 8021778:	fb05 f50c 	mul.w	r5, r5, ip
 802177c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021780:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021784:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8021788:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802178c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021790:	44c6      	add	lr, r8
 8021792:	0a2d      	lsrs	r5, r5, #8
 8021794:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021798:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802179c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80217a0:	ea4e 0505 	orr.w	r5, lr, r5
 80217a4:	950c      	str	r5, [sp, #48]	; 0x30
 80217a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80217a8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80217ac:	9f08      	ldr	r7, [sp, #32]
 80217ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80217b2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80217b6:	fb09 f505 	mul.w	r5, r9, r5
 80217ba:	fb02 550c 	mla	r5, r2, ip, r5
 80217be:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80217c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80217c4:	fb01 550c 	mla	r5, r1, ip, r5
 80217c8:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80217cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80217ce:	fb0b 550c 	mla	r5, fp, ip, r5
 80217d2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80217d6:	fb09 f90c 	mul.w	r9, r9, ip
 80217da:	0a2d      	lsrs	r5, r5, #8
 80217dc:	fb02 9303 	mla	r3, r2, r3, r9
 80217e0:	9a08      	ldr	r2, [sp, #32]
 80217e2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80217e6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80217ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80217ec:	fb01 330e 	mla	r3, r1, lr, r3
 80217f0:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80217f4:	fb0b 3b01 	mla	fp, fp, r1, r3
 80217f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80217fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80217fc:	4343      	muls	r3, r0
 80217fe:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021802:	1c58      	adds	r0, r3, #1
 8021804:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021808:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802180c:	ea45 050b 	orr.w	r5, r5, fp
 8021810:	7833      	ldrb	r3, [r6, #0]
 8021812:	b2ea      	uxtb	r2, r5
 8021814:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021818:	fb12 f201 	smulbb	r2, r2, r1
 802181c:	b2c0      	uxtb	r0, r0
 802181e:	fb03 2300 	mla	r3, r3, r0, r2
 8021822:	b29b      	uxth	r3, r3
 8021824:	1c5a      	adds	r2, r3, #1
 8021826:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802182a:	7872      	ldrb	r2, [r6, #1]
 802182c:	fb12 f200 	smulbb	r2, r2, r0
 8021830:	121b      	asrs	r3, r3, #8
 8021832:	7033      	strb	r3, [r6, #0]
 8021834:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021838:	0c2d      	lsrs	r5, r5, #16
 802183a:	fb03 2301 	mla	r3, r3, r1, r2
 802183e:	b29b      	uxth	r3, r3
 8021840:	1c5a      	adds	r2, r3, #1
 8021842:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021846:	121b      	asrs	r3, r3, #8
 8021848:	7073      	strb	r3, [r6, #1]
 802184a:	78b3      	ldrb	r3, [r6, #2]
 802184c:	fb13 f000 	smulbb	r0, r3, r0
 8021850:	fb05 0501 	mla	r5, r5, r1, r0
 8021854:	b2ad      	uxth	r5, r5
 8021856:	1c6b      	adds	r3, r5, #1
 8021858:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802185c:	122d      	asrs	r5, r5, #8
 802185e:	70b5      	strb	r5, [r6, #2]
 8021860:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021862:	3603      	adds	r6, #3
 8021864:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021866:	4413      	add	r3, r2
 8021868:	932b      	str	r3, [sp, #172]	; 0xac
 802186a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802186c:	441c      	add	r4, r3
 802186e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021870:	3b01      	subs	r3, #1
 8021872:	9314      	str	r3, [sp, #80]	; 0x50
 8021874:	e6c0      	b.n	80215f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8021876:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021878:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802187a:	4413      	add	r3, r2
 802187c:	932b      	str	r3, [sp, #172]	; 0xac
 802187e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021880:	441c      	add	r4, r3
 8021882:	9b06      	ldr	r3, [sp, #24]
 8021884:	3b01      	subs	r3, #1
 8021886:	9306      	str	r3, [sp, #24]
 8021888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802188a:	3303      	adds	r3, #3
 802188c:	930a      	str	r3, [sp, #40]	; 0x28
 802188e:	e664      	b.n	802155a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021890:	f47f ae75 	bne.w	802157e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8021894:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021896:	2b00      	cmp	r3, #0
 8021898:	f340 819a 	ble.w	8021bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 802189c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80218a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80218a2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80218a6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80218aa:	eef0 6a48 	vmov.f32	s13, s16
 80218ae:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80218b2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80218b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80218ba:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80218be:	eef0 6a68 	vmov.f32	s13, s17
 80218c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80218c6:	ee16 4a90 	vmov	r4, s13
 80218ca:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80218ce:	ee69 7a27 	vmul.f32	s15, s18, s15
 80218d2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80218d6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80218da:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80218de:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80218e2:	ee18 2a10 	vmov	r2, s16
 80218e6:	eeb0 8a47 	vmov.f32	s16, s14
 80218ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80218ee:	ee18 2a90 	vmov	r2, s17
 80218f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80218f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80218f6:	eef0 8a67 	vmov.f32	s17, s15
 80218fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80218fe:	932e      	str	r3, [sp, #184]	; 0xb8
 8021900:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021902:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021904:	3b01      	subs	r3, #1
 8021906:	9312      	str	r3, [sp, #72]	; 0x48
 8021908:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802190a:	bf08      	it	eq
 802190c:	4613      	moveq	r3, r2
 802190e:	9306      	str	r3, [sp, #24]
 8021910:	e61c      	b.n	802154c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8021912:	b151      	cbz	r1, 802192a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8021914:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021916:	58aa      	ldr	r2, [r5, r2]
 8021918:	25ff      	movs	r5, #255	; 0xff
 802191a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802191e:	9208      	str	r2, [sp, #32]
 8021920:	46a8      	mov	r8, r5
 8021922:	e6a0      	b.n	8021666 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8021924:	25ff      	movs	r5, #255	; 0xff
 8021926:	46aa      	mov	sl, r5
 8021928:	e69d      	b.n	8021666 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 802192a:	25ff      	movs	r5, #255	; 0xff
 802192c:	46aa      	mov	sl, r5
 802192e:	e7f7      	b.n	8021920 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8021930:	1c57      	adds	r7, r2, #1
 8021932:	d195      	bne.n	8021860 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021934:	9d07      	ldr	r5, [sp, #28]
 8021936:	4295      	cmp	r5, r2
 8021938:	dd92      	ble.n	8021860 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802193a:	1c5d      	adds	r5, r3, #1
 802193c:	db90      	blt.n	8021860 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802193e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021940:	429d      	cmp	r5, r3
 8021942:	dd8d      	ble.n	8021860 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021944:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021946:	9201      	str	r2, [sp, #4]
 8021948:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802194a:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802194e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021950:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021952:	9300      	str	r3, [sp, #0]
 8021954:	9b07      	ldr	r3, [sp, #28]
 8021956:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802195a:	4631      	mov	r1, r6
 802195c:	f7ff fc68 	bl	8021230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8021960:	e77e      	b.n	8021860 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021962:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021964:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021968:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802196a:	9d07      	ldr	r5, [sp, #28]
 802196c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021970:	1412      	asrs	r2, r2, #16
 8021972:	1423      	asrs	r3, r4, #16
 8021974:	fb05 2303 	mla	r3, r5, r3, r2
 8021978:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802197a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021982:	0e1e      	lsrs	r6, r3, #24
 8021984:	2900      	cmp	r1, #0
 8021986:	f000 8114 	beq.w	8021bb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 802198a:	686a      	ldr	r2, [r5, #4]
 802198c:	920d      	str	r2, [sp, #52]	; 0x34
 802198e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8021992:	2800      	cmp	r0, #0
 8021994:	f000 8116 	beq.w	8021bc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8021998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802199a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802199c:	18aa      	adds	r2, r5, r2
 802199e:	59ed      	ldr	r5, [r5, r7]
 80219a0:	6852      	ldr	r2, [r2, #4]
 80219a2:	9509      	str	r5, [sp, #36]	; 0x24
 80219a4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80219a8:	0e15      	lsrs	r5, r2, #24
 80219aa:	920f      	str	r2, [sp, #60]	; 0x3c
 80219ac:	b289      	uxth	r1, r1
 80219ae:	b280      	uxth	r0, r0
 80219b0:	fb01 fa00 	mul.w	sl, r1, r0
 80219b4:	0109      	lsls	r1, r1, #4
 80219b6:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80219ba:	eba1 080a 	sub.w	r8, r1, sl
 80219be:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80219c2:	b280      	uxth	r0, r0
 80219c4:	fa1f f888 	uxth.w	r8, r8
 80219c8:	1a12      	subs	r2, r2, r0
 80219ca:	fb08 f10c 	mul.w	r1, r8, ip
 80219ce:	b292      	uxth	r2, r2
 80219d0:	fb02 1106 	mla	r1, r2, r6, r1
 80219d4:	fb00 1109 	mla	r1, r0, r9, r1
 80219d8:	fb0a 1105 	mla	r1, sl, r5, r1
 80219dc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80219e0:	2900      	cmp	r1, #0
 80219e2:	f000 80da 	beq.w	8021b9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80219e6:	2eff      	cmp	r6, #255	; 0xff
 80219e8:	d016      	beq.n	8021a18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80219ea:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80219ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80219f2:	4377      	muls	r7, r6
 80219f4:	435e      	muls	r6, r3
 80219f6:	0a3b      	lsrs	r3, r7, #8
 80219f8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80219fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021a00:	443b      	add	r3, r7
 8021a02:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021a06:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021a0a:	0a1b      	lsrs	r3, r3, #8
 8021a0c:	0a3f      	lsrs	r7, r7, #8
 8021a0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021a12:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021a16:	433b      	orrs	r3, r7
 8021a18:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021a1c:	d01d      	beq.n	8021a5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8021a1e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021a20:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021a22:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a26:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021a2a:	fb0c f606 	mul.w	r6, ip, r6
 8021a2e:	fb0c fc07 	mul.w	ip, ip, r7
 8021a32:	0a37      	lsrs	r7, r6, #8
 8021a34:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021a38:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a3c:	4437      	add	r7, r6
 8021a3e:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8021a42:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021a46:	0a3f      	lsrs	r7, r7, #8
 8021a48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a4c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a50:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021a54:	ea47 060c 	orr.w	r6, r7, ip
 8021a58:	960d      	str	r6, [sp, #52]	; 0x34
 8021a5a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021a5e:	d01d      	beq.n	8021a9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8021a60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021a62:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021a66:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021a6a:	fb09 fc0c 	mul.w	ip, r9, ip
 8021a6e:	fb09 f906 	mul.w	r9, r9, r6
 8021a72:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021a76:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021a7a:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8021a7e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a82:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8021a86:	4467      	add	r7, ip
 8021a88:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021a8c:	0a3f      	lsrs	r7, r7, #8
 8021a8e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021a92:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a96:	ea47 0609 	orr.w	r6, r7, r9
 8021a9a:	9609      	str	r6, [sp, #36]	; 0x24
 8021a9c:	2dff      	cmp	r5, #255	; 0xff
 8021a9e:	d01a      	beq.n	8021ad6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8021aa0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021aa2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021aa6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021aaa:	fb05 fc0c 	mul.w	ip, r5, ip
 8021aae:	4375      	muls	r5, r6
 8021ab0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021ab4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021ab8:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021abc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021ac0:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021ac4:	4467      	add	r7, ip
 8021ac6:	0a2d      	lsrs	r5, r5, #8
 8021ac8:	0a3f      	lsrs	r7, r7, #8
 8021aca:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021ace:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021ad2:	433d      	orrs	r5, r7
 8021ad4:	950f      	str	r5, [sp, #60]	; 0x3c
 8021ad6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021ad8:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8021adc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ae0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021ae4:	fb08 f505 	mul.w	r5, r8, r5
 8021ae8:	fb02 5506 	mla	r5, r2, r6, r5
 8021aec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021aee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021af2:	fb00 5506 	mla	r5, r0, r6, r5
 8021af6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021af8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021afc:	fb0a 5506 	mla	r5, sl, r6, r5
 8021b00:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021b02:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021b06:	0a2d      	lsrs	r5, r5, #8
 8021b08:	fb08 f806 	mul.w	r8, r8, r6
 8021b0c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021b10:	fb02 8303 	mla	r3, r2, r3, r8
 8021b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021b16:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021b1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021b1c:	fb00 3307 	mla	r3, r0, r7, r3
 8021b20:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021b24:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8021b28:	fb01 f30b 	mul.w	r3, r1, fp
 8021b2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021b30:	1c59      	adds	r1, r3, #1
 8021b32:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021b36:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021b3a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021b3e:	ea45 050c 	orr.w	r5, r5, ip
 8021b42:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021b46:	b2ea      	uxtb	r2, r5
 8021b48:	b2c9      	uxtb	r1, r1
 8021b4a:	fb12 f20b 	smulbb	r2, r2, fp
 8021b4e:	fb03 2301 	mla	r3, r3, r1, r2
 8021b52:	b29b      	uxth	r3, r3
 8021b54:	1c5a      	adds	r2, r3, #1
 8021b56:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021b5a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021b5e:	fb12 f201 	smulbb	r2, r2, r1
 8021b62:	121b      	asrs	r3, r3, #8
 8021b64:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021b68:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021b6c:	0c2d      	lsrs	r5, r5, #16
 8021b6e:	fb03 230b 	mla	r3, r3, fp, r2
 8021b72:	b29b      	uxth	r3, r3
 8021b74:	1c5a      	adds	r2, r3, #1
 8021b76:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021b7a:	121b      	asrs	r3, r3, #8
 8021b7c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021b80:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021b84:	fb13 f101 	smulbb	r1, r3, r1
 8021b88:	fb05 150b 	mla	r5, r5, fp, r1
 8021b8c:	b2ad      	uxth	r5, r5
 8021b8e:	1c69      	adds	r1, r5, #1
 8021b90:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021b94:	122d      	asrs	r5, r5, #8
 8021b96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8021b9a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021b9c:	f10e 0e03 	add.w	lr, lr, #3
 8021ba0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021ba2:	4413      	add	r3, r2
 8021ba4:	932b      	str	r3, [sp, #172]	; 0xac
 8021ba6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021ba8:	441c      	add	r4, r3
 8021baa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021bac:	3b01      	subs	r3, #1
 8021bae:	9313      	str	r3, [sp, #76]	; 0x4c
 8021bb0:	e501      	b.n	80215b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8021bb2:	b150      	cbz	r0, 8021bca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8021bb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021bb6:	58aa      	ldr	r2, [r5, r2]
 8021bb8:	25ff      	movs	r5, #255	; 0xff
 8021bba:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8021bc0:	46ac      	mov	ip, r5
 8021bc2:	e6f3      	b.n	80219ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8021bc4:	25ff      	movs	r5, #255	; 0xff
 8021bc6:	46a9      	mov	r9, r5
 8021bc8:	e6f0      	b.n	80219ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8021bca:	25ff      	movs	r5, #255	; 0xff
 8021bcc:	46a9      	mov	r9, r5
 8021bce:	e7f7      	b.n	8021bc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8021bd0:	b019      	add	sp, #100	; 0x64
 8021bd2:	ecbd 8b08 	vpop	{d8-d11}
 8021bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021bdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8021bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021be0:	b085      	sub	sp, #20
 8021be2:	7888      	ldrb	r0, [r1, #2]
 8021be4:	4691      	mov	r9, r2
 8021be6:	9000      	str	r0, [sp, #0]
 8021be8:	7848      	ldrb	r0, [r1, #1]
 8021bea:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021bee:	9001      	str	r0, [sp, #4]
 8021bf0:	7808      	ldrb	r0, [r1, #0]
 8021bf2:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021bf6:	9002      	str	r0, [sp, #8]
 8021bf8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021bfc:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021c00:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021c04:	fb04 c603 	mla	r6, r4, r3, ip
 8021c08:	2c00      	cmp	r4, #0
 8021c0a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021c0e:	9a00      	ldr	r2, [sp, #0]
 8021c10:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021c14:	9a01      	ldr	r2, [sp, #4]
 8021c16:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021c1a:	db3a      	blt.n	8021c92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021c1c:	45a0      	cmp	r8, r4
 8021c1e:	dd38      	ble.n	8021c92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021c20:	f1bc 0f00 	cmp.w	ip, #0
 8021c24:	db33      	blt.n	8021c8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021c26:	4563      	cmp	r3, ip
 8021c28:	dd31      	ble.n	8021c8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021c2a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021c2e:	f11c 0601 	adds.w	r6, ip, #1
 8021c32:	d431      	bmi.n	8021c98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021c34:	42b3      	cmp	r3, r6
 8021c36:	dd2f      	ble.n	8021c98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021c38:	b375      	cbz	r5, 8021c98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021c3a:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021c3e:	3401      	adds	r4, #1
 8021c40:	d42e      	bmi.n	8021ca0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021c42:	45a0      	cmp	r8, r4
 8021c44:	dd2c      	ble.n	8021ca0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021c46:	b35f      	cbz	r7, 8021ca0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021c48:	f1bc 0f00 	cmp.w	ip, #0
 8021c4c:	db26      	blt.n	8021c9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021c4e:	4563      	cmp	r3, ip
 8021c50:	dd24      	ble.n	8021c9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021c52:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021c56:	f11c 0c01 	adds.w	ip, ip, #1
 8021c5a:	d405      	bmi.n	8021c68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021c5c:	4563      	cmp	r3, ip
 8021c5e:	dd03      	ble.n	8021c68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021c60:	b115      	cbz	r5, 8021c68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021c62:	3301      	adds	r3, #1
 8021c64:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021c68:	2d0f      	cmp	r5, #15
 8021c6a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021c6e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021c72:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021c76:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021c7a:	d801      	bhi.n	8021c80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8021c7c:	2f0f      	cmp	r7, #15
 8021c7e:	d911      	bls.n	8021ca4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8021c80:	4b77      	ldr	r3, [pc, #476]	; (8021e60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8021c82:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021c86:	4a77      	ldr	r2, [pc, #476]	; (8021e64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8021c88:	4877      	ldr	r0, [pc, #476]	; (8021e68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8021c8a:	f003 f831 	bl	8024cf0 <__assert_func>
 8021c8e:	4602      	mov	r2, r0
 8021c90:	e7cd      	b.n	8021c2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8021c92:	4606      	mov	r6, r0
 8021c94:	4602      	mov	r2, r0
 8021c96:	e7d2      	b.n	8021c3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021c98:	4606      	mov	r6, r0
 8021c9a:	e7d0      	b.n	8021c3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021c9c:	4604      	mov	r4, r0
 8021c9e:	e7da      	b.n	8021c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8021ca0:	4604      	mov	r4, r0
 8021ca2:	e7e1      	b.n	8021c68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021ca4:	b2ab      	uxth	r3, r5
 8021ca6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021caa:	b2bf      	uxth	r7, r7
 8021cac:	fb03 fe07 	mul.w	lr, r3, r7
 8021cb0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021cb4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021cb8:	eba3 0c0e 	sub.w	ip, r3, lr
 8021cbc:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021cc0:	b2bf      	uxth	r7, r7
 8021cc2:	fa1f fc8c 	uxth.w	ip, ip
 8021cc6:	eba5 0507 	sub.w	r5, r5, r7
 8021cca:	fb0c f30a 	mul.w	r3, ip, sl
 8021cce:	b2ad      	uxth	r5, r5
 8021cd0:	fb05 330b 	mla	r3, r5, fp, r3
 8021cd4:	fb07 3309 	mla	r3, r7, r9, r3
 8021cd8:	fb0e 3308 	mla	r3, lr, r8, r3
 8021cdc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021ce0:	9303      	str	r3, [sp, #12]
 8021ce2:	d018      	beq.n	8021d16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8021ce4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021ce8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021cec:	fb0b f303 	mul.w	r3, fp, r3
 8021cf0:	fb0b fb02 	mul.w	fp, fp, r2
 8021cf4:	0a1a      	lsrs	r2, r3, #8
 8021cf6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021cfa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021cfe:	441a      	add	r2, r3
 8021d00:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021d04:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021d08:	0a12      	lsrs	r2, r2, #8
 8021d0a:	0a1b      	lsrs	r3, r3, #8
 8021d0c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021d10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d14:	431a      	orrs	r2, r3
 8021d16:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021d1a:	d019      	beq.n	8021d50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8021d1c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021d20:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d24:	fb0a fb0b 	mul.w	fp, sl, fp
 8021d28:	fb0a fa06 	mul.w	sl, sl, r6
 8021d2c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021d30:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021d34:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021d38:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d3c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021d40:	445e      	add	r6, fp
 8021d42:	0a1b      	lsrs	r3, r3, #8
 8021d44:	0a36      	lsrs	r6, r6, #8
 8021d46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d4a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d4e:	431e      	orrs	r6, r3
 8021d50:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021d54:	d019      	beq.n	8021d8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8021d56:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021d5a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021d5e:	fb09 fa0a 	mul.w	sl, r9, sl
 8021d62:	fb09 f904 	mul.w	r9, r9, r4
 8021d66:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021d6a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021d6e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021d72:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021d76:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021d7a:	4454      	add	r4, sl
 8021d7c:	0a1b      	lsrs	r3, r3, #8
 8021d7e:	0a24      	lsrs	r4, r4, #8
 8021d80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d84:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021d88:	431c      	orrs	r4, r3
 8021d8a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021d8e:	d019      	beq.n	8021dc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8021d90:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021d94:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021d98:	fb08 f909 	mul.w	r9, r8, r9
 8021d9c:	fb08 f800 	mul.w	r8, r8, r0
 8021da0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021da4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021da8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021dac:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021db0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021db4:	4448      	add	r0, r9
 8021db6:	0a1b      	lsrs	r3, r3, #8
 8021db8:	0a00      	lsrs	r0, r0, #8
 8021dba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021dbe:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021dc2:	4318      	orrs	r0, r3
 8021dc4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021dc8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021dcc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021dd0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021dd4:	fb0c f808 	mul.w	r8, ip, r8
 8021dd8:	fb0c f606 	mul.w	r6, ip, r6
 8021ddc:	fb05 8803 	mla	r8, r5, r3, r8
 8021de0:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021de4:	fb05 6202 	mla	r2, r5, r2, r6
 8021de8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021dec:	fb07 8803 	mla	r8, r7, r3, r8
 8021df0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021df4:	fb07 2704 	mla	r7, r7, r4, r2
 8021df8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021dfc:	fb0e 8303 	mla	r3, lr, r3, r8
 8021e00:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021e04:	9802      	ldr	r0, [sp, #8]
 8021e06:	0a1b      	lsrs	r3, r3, #8
 8021e08:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e10:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021e14:	ea43 0e0e 	orr.w	lr, r3, lr
 8021e18:	9b03      	ldr	r3, [sp, #12]
 8021e1a:	43db      	mvns	r3, r3
 8021e1c:	b2db      	uxtb	r3, r3
 8021e1e:	4358      	muls	r0, r3
 8021e20:	1c42      	adds	r2, r0, #1
 8021e22:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021e26:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021e2a:	700a      	strb	r2, [r1, #0]
 8021e2c:	9a01      	ldr	r2, [sp, #4]
 8021e2e:	435a      	muls	r2, r3
 8021e30:	1c50      	adds	r0, r2, #1
 8021e32:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021e36:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8021e3a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021e3e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021e42:	704a      	strb	r2, [r1, #1]
 8021e44:	9a00      	ldr	r2, [sp, #0]
 8021e46:	435a      	muls	r2, r3
 8021e48:	4613      	mov	r3, r2
 8021e4a:	3201      	adds	r2, #1
 8021e4c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021e50:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021e54:	f881 e002 	strb.w	lr, [r1, #2]
 8021e58:	b005      	add	sp, #20
 8021e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e5e:	bf00      	nop
 8021e60:	080296e7 	.word	0x080296e7
 8021e64:	08029bde 	.word	0x08029bde
 8021e68:	080297b0 	.word	0x080297b0

08021e6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e70:	ed2d 8b08 	vpush	{d8-d11}
 8021e74:	b097      	sub	sp, #92	; 0x5c
 8021e76:	eeb0 aa40 	vmov.f32	s20, s0
 8021e7a:	eef0 9a60 	vmov.f32	s19, s1
 8021e7e:	9306      	str	r3, [sp, #24]
 8021e80:	eeb0 9a41 	vmov.f32	s18, s2
 8021e84:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8021e88:	eeb0 8a62 	vmov.f32	s16, s5
 8021e8c:	9214      	str	r2, [sp, #80]	; 0x50
 8021e8e:	eef0 8a43 	vmov.f32	s17, s6
 8021e92:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021e94:	eef0 ba44 	vmov.f32	s23, s8
 8021e98:	9307      	str	r3, [sp, #28]
 8021e9a:	eeb0 ba64 	vmov.f32	s22, s9
 8021e9e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8021ea2:	eef0 aa45 	vmov.f32	s21, s10
 8021ea6:	9015      	str	r0, [sp, #84]	; 0x54
 8021ea8:	9112      	str	r1, [sp, #72]	; 0x48
 8021eaa:	6850      	ldr	r0, [r2, #4]
 8021eac:	9310      	str	r3, [sp, #64]	; 0x40
 8021eae:	6812      	ldr	r2, [r2, #0]
 8021eb0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8021eb2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021eb6:	fb00 1303 	mla	r3, r0, r3, r1
 8021eba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ebe:	18d3      	adds	r3, r2, r3
 8021ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8021ec2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021ec4:	681b      	ldr	r3, [r3, #0]
 8021ec6:	9311      	str	r3, [sp, #68]	; 0x44
 8021ec8:	9b07      	ldr	r3, [sp, #28]
 8021eca:	009b      	lsls	r3, r3, #2
 8021ecc:	930e      	str	r3, [sp, #56]	; 0x38
 8021ece:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	dc03      	bgt.n	8021edc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021ed4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021ed6:	2b00      	cmp	r3, #0
 8021ed8:	f340 832e 	ble.w	8022538 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8021edc:	9b06      	ldr	r3, [sp, #24]
 8021ede:	2b00      	cmp	r3, #0
 8021ee0:	f340 8186 	ble.w	80221f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8021ee4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021ee6:	1423      	asrs	r3, r4, #16
 8021ee8:	1412      	asrs	r2, r2, #16
 8021eea:	d42f      	bmi.n	8021f4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8021eec:	1c51      	adds	r1, r2, #1
 8021eee:	9807      	ldr	r0, [sp, #28]
 8021ef0:	4288      	cmp	r0, r1
 8021ef2:	dd2e      	ble.n	8021f52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021ef4:	2b00      	cmp	r3, #0
 8021ef6:	db2c      	blt.n	8021f52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021ef8:	1c59      	adds	r1, r3, #1
 8021efa:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021efc:	4288      	cmp	r0, r1
 8021efe:	dd28      	ble.n	8021f52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021f00:	9b06      	ldr	r3, [sp, #24]
 8021f02:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021f04:	3b01      	subs	r3, #1
 8021f06:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021f08:	fb02 1203 	mla	r2, r2, r3, r1
 8021f0c:	1412      	asrs	r2, r2, #16
 8021f0e:	d42b      	bmi.n	8021f68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021f10:	3201      	adds	r2, #1
 8021f12:	9907      	ldr	r1, [sp, #28]
 8021f14:	4291      	cmp	r1, r2
 8021f16:	dd27      	ble.n	8021f68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021f18:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021f1a:	fb02 4303 	mla	r3, r2, r3, r4
 8021f1e:	141b      	asrs	r3, r3, #16
 8021f20:	d422      	bmi.n	8021f68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021f22:	3301      	adds	r3, #1
 8021f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021f26:	429a      	cmp	r2, r3
 8021f28:	dd1e      	ble.n	8021f68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f2c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021f30:	1cdd      	adds	r5, r3, #3
 8021f32:	f1bb 0f00 	cmp.w	fp, #0
 8021f36:	f300 81c4 	bgt.w	80222c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8021f3a:	9b06      	ldr	r3, [sp, #24]
 8021f3c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f42:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021f46:	4423      	add	r3, r4
 8021f48:	930a      	str	r3, [sp, #40]	; 0x28
 8021f4a:	e153      	b.n	80221f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8021f4c:	1c51      	adds	r1, r2, #1
 8021f4e:	f040 8142 	bne.w	80221d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021f52:	9907      	ldr	r1, [sp, #28]
 8021f54:	428a      	cmp	r2, r1
 8021f56:	f280 813e 	bge.w	80221d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021f5a:	1c5a      	adds	r2, r3, #1
 8021f5c:	f2c0 813b 	blt.w	80221d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021f60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021f62:	4293      	cmp	r3, r2
 8021f64:	f280 8137 	bge.w	80221d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021f68:	9b06      	ldr	r3, [sp, #24]
 8021f6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021f6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8021f6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021f70:	2b00      	cmp	r3, #0
 8021f72:	dde2      	ble.n	8021f3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8021f74:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021f76:	1423      	asrs	r3, r4, #16
 8021f78:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021f7a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021f7e:	1409      	asrs	r1, r1, #16
 8021f80:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8021f84:	f100 8187 	bmi.w	8022296 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8021f88:	1c4e      	adds	r6, r1, #1
 8021f8a:	9f07      	ldr	r7, [sp, #28]
 8021f8c:	42b7      	cmp	r7, r6
 8021f8e:	f340 8184 	ble.w	802229a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	f2c0 8181 	blt.w	802229a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021f98:	1c5e      	adds	r6, r3, #1
 8021f9a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021f9c:	42b7      	cmp	r7, r6
 8021f9e:	f340 817c 	ble.w	802229a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021fa2:	9e07      	ldr	r6, [sp, #28]
 8021fa4:	fb03 1306 	mla	r3, r3, r6, r1
 8021fa8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021faa:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8021fae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021fb2:	0e1f      	lsrs	r7, r3, #24
 8021fb4:	2a00      	cmp	r2, #0
 8021fb6:	f000 815c 	beq.w	8022272 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8021fba:	6871      	ldr	r1, [r6, #4]
 8021fbc:	910b      	str	r1, [sp, #44]	; 0x2c
 8021fbe:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8021fc2:	2800      	cmp	r0, #0
 8021fc4:	f000 815e 	beq.w	8022284 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8021fc8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021fca:	eb06 0c01 	add.w	ip, r6, r1
 8021fce:	5876      	ldr	r6, [r6, r1]
 8021fd0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8021fd4:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8021fd8:	9608      	str	r6, [sp, #32]
 8021fda:	0e0e      	lsrs	r6, r1, #24
 8021fdc:	910c      	str	r1, [sp, #48]	; 0x30
 8021fde:	b292      	uxth	r2, r2
 8021fe0:	b280      	uxth	r0, r0
 8021fe2:	fb02 fa00 	mul.w	sl, r2, r0
 8021fe6:	0112      	lsls	r2, r2, #4
 8021fe8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021fec:	eba2 080a 	sub.w	r8, r2, sl
 8021ff0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021ff4:	b280      	uxth	r0, r0
 8021ff6:	fa1f f888 	uxth.w	r8, r8
 8021ffa:	1a09      	subs	r1, r1, r0
 8021ffc:	fb08 f20e 	mul.w	r2, r8, lr
 8022000:	b289      	uxth	r1, r1
 8022002:	fb01 2207 	mla	r2, r1, r7, r2
 8022006:	fb00 2209 	mla	r2, r0, r9, r2
 802200a:	fb0a 2206 	mla	r2, sl, r6, r2
 802200e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022012:	2a00      	cmp	r2, #0
 8022014:	f000 80d4 	beq.w	80221c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022018:	2fff      	cmp	r7, #255	; 0xff
 802201a:	d01a      	beq.n	8022052 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 802201c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022020:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022024:	fb07 fc0c 	mul.w	ip, r7, ip
 8022028:	435f      	muls	r7, r3
 802202a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802202e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022032:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8022036:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802203a:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 802203e:	4463      	add	r3, ip
 8022040:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022044:	0a1b      	lsrs	r3, r3, #8
 8022046:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802204a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802204e:	ea43 030b 	orr.w	r3, r3, fp
 8022052:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022056:	d01e      	beq.n	8022096 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8022058:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802205a:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 802205e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022062:	fb0e fb0b 	mul.w	fp, lr, fp
 8022066:	fb0e fe07 	mul.w	lr, lr, r7
 802206a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802206e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022072:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022076:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802207a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802207e:	44dc      	add	ip, fp
 8022080:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022084:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022088:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802208c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022090:	ea4c 070e 	orr.w	r7, ip, lr
 8022094:	970b      	str	r7, [sp, #44]	; 0x2c
 8022096:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802209a:	d01e      	beq.n	80220da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802209c:	9f08      	ldr	r7, [sp, #32]
 802209e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80220a2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80220a6:	fb09 fe0e 	mul.w	lr, r9, lr
 80220aa:	fb09 f907 	mul.w	r9, r9, r7
 80220ae:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80220b2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80220b6:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80220ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80220be:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80220c2:	44f4      	add	ip, lr
 80220c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80220c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80220cc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80220d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80220d4:	ea4c 0709 	orr.w	r7, ip, r9
 80220d8:	9708      	str	r7, [sp, #32]
 80220da:	2eff      	cmp	r6, #255	; 0xff
 80220dc:	d01c      	beq.n	8022118 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80220de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80220e0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80220e4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80220e8:	fb06 fe0e 	mul.w	lr, r6, lr
 80220ec:	437e      	muls	r6, r7
 80220ee:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80220f2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80220f6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80220fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80220fe:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022102:	44f4      	add	ip, lr
 8022104:	0a36      	lsrs	r6, r6, #8
 8022106:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802210a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802210e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022112:	ea4c 0606 	orr.w	r6, ip, r6
 8022116:	960c      	str	r6, [sp, #48]	; 0x30
 8022118:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802211a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802211e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022122:	2aff      	cmp	r2, #255	; 0xff
 8022124:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022128:	fb08 f606 	mul.w	r6, r8, r6
 802212c:	fb01 6607 	mla	r6, r1, r7, r6
 8022130:	9f08      	ldr	r7, [sp, #32]
 8022132:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022136:	fb00 6607 	mla	r6, r0, r7, r6
 802213a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802213c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022140:	fb0a 6607 	mla	r6, sl, r7, r6
 8022144:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022146:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802214a:	ea4f 2616 	mov.w	r6, r6, lsr #8
 802214e:	fb08 f807 	mul.w	r8, r8, r7
 8022152:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022156:	fb01 8303 	mla	r3, r1, r3, r8
 802215a:	9908      	ldr	r1, [sp, #32]
 802215c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022160:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022162:	fb00 330c 	mla	r3, r0, ip, r3
 8022166:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802216a:	fb0a 3a00 	mla	sl, sl, r0, r3
 802216e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022172:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022176:	ea46 060a 	orr.w	r6, r6, sl
 802217a:	b2f0      	uxtb	r0, r6
 802217c:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022180:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022184:	f000 8084 	beq.w	8022290 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022188:	43d2      	mvns	r2, r2
 802218a:	782b      	ldrb	r3, [r5, #0]
 802218c:	b2d2      	uxtb	r2, r2
 802218e:	fb03 f702 	mul.w	r7, r3, r2
 8022192:	1c7b      	adds	r3, r7, #1
 8022194:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022198:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802219c:	702b      	strb	r3, [r5, #0]
 802219e:	786b      	ldrb	r3, [r5, #1]
 80221a0:	fb03 f002 	mul.w	r0, r3, r2
 80221a4:	1c43      	adds	r3, r0, #1
 80221a6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80221aa:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80221ae:	706b      	strb	r3, [r5, #1]
 80221b0:	78ab      	ldrb	r3, [r5, #2]
 80221b2:	4353      	muls	r3, r2
 80221b4:	1c5a      	adds	r2, r3, #1
 80221b6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80221ba:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80221be:	70ae      	strb	r6, [r5, #2]
 80221c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80221c2:	3503      	adds	r5, #3
 80221c4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80221c6:	4413      	add	r3, r2
 80221c8:	9329      	str	r3, [sp, #164]	; 0xa4
 80221ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80221cc:	441c      	add	r4, r3
 80221ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80221d0:	3b01      	subs	r3, #1
 80221d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80221d4:	e6cb      	b.n	8021f6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80221d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80221d8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80221da:	4413      	add	r3, r2
 80221dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80221de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80221e0:	441c      	add	r4, r3
 80221e2:	9b06      	ldr	r3, [sp, #24]
 80221e4:	3b01      	subs	r3, #1
 80221e6:	9306      	str	r3, [sp, #24]
 80221e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80221ea:	3303      	adds	r3, #3
 80221ec:	930a      	str	r3, [sp, #40]	; 0x28
 80221ee:	e675      	b.n	8021edc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80221f0:	f47f ae86 	bne.w	8021f00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80221f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80221f6:	2b00      	cmp	r3, #0
 80221f8:	f340 819e 	ble.w	8022538 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80221fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022200:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022202:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022206:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802220a:	eef0 6a48 	vmov.f32	s13, s16
 802220e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022212:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022216:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802221a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802221e:	eef0 6a68 	vmov.f32	s13, s17
 8022222:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022226:	ee16 4a90 	vmov	r4, s13
 802222a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802222e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022232:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022236:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802223a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802223e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022242:	ee18 2a10 	vmov	r2, s16
 8022246:	eeb0 8a47 	vmov.f32	s16, s14
 802224a:	fb92 f3f3 	sdiv	r3, r2, r3
 802224e:	ee18 2a90 	vmov	r2, s17
 8022252:	932b      	str	r3, [sp, #172]	; 0xac
 8022254:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022256:	eef0 8a67 	vmov.f32	s17, s15
 802225a:	fb92 f3f3 	sdiv	r3, r2, r3
 802225e:	932c      	str	r3, [sp, #176]	; 0xb0
 8022260:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022262:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022264:	3b01      	subs	r3, #1
 8022266:	9312      	str	r3, [sp, #72]	; 0x48
 8022268:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802226a:	bf08      	it	eq
 802226c:	4613      	moveq	r3, r2
 802226e:	9306      	str	r3, [sp, #24]
 8022270:	e62d      	b.n	8021ece <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8022272:	b150      	cbz	r0, 802228a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8022274:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022276:	5871      	ldr	r1, [r6, r1]
 8022278:	26ff      	movs	r6, #255	; 0xff
 802227a:	ea4f 6911 	mov.w	r9, r1, lsr #24
 802227e:	9108      	str	r1, [sp, #32]
 8022280:	46b6      	mov	lr, r6
 8022282:	e6ac      	b.n	8021fde <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022284:	26ff      	movs	r6, #255	; 0xff
 8022286:	46b1      	mov	r9, r6
 8022288:	e6a9      	b.n	8021fde <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 802228a:	26ff      	movs	r6, #255	; 0xff
 802228c:	46b1      	mov	r9, r6
 802228e:	e7f7      	b.n	8022280 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8022290:	7028      	strb	r0, [r5, #0]
 8022292:	7069      	strb	r1, [r5, #1]
 8022294:	e793      	b.n	80221be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8022296:	1c4f      	adds	r7, r1, #1
 8022298:	d192      	bne.n	80221c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802229a:	9e07      	ldr	r6, [sp, #28]
 802229c:	428e      	cmp	r6, r1
 802229e:	dd8f      	ble.n	80221c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80222a0:	1c5e      	adds	r6, r3, #1
 80222a2:	db8d      	blt.n	80221c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80222a4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80222a6:	429e      	cmp	r6, r3
 80222a8:	dd8a      	ble.n	80221c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80222aa:	9600      	str	r6, [sp, #0]
 80222ac:	e9cd 2003 	strd	r2, r0, [sp, #12]
 80222b0:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80222b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80222b6:	4629      	mov	r1, r5
 80222b8:	9b07      	ldr	r3, [sp, #28]
 80222ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 80222bc:	f7ff fc8e 	bl	8021bdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80222c0:	e77e      	b.n	80221c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80222c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80222c4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80222c8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80222ca:	9e07      	ldr	r6, [sp, #28]
 80222cc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80222d0:	1409      	asrs	r1, r1, #16
 80222d2:	1423      	asrs	r3, r4, #16
 80222d4:	fb06 1303 	mla	r3, r6, r3, r1
 80222d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80222da:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80222de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80222e2:	0e1f      	lsrs	r7, r3, #24
 80222e4:	2a00      	cmp	r2, #0
 80222e6:	f000 8113 	beq.w	8022510 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 80222ea:	6871      	ldr	r1, [r6, #4]
 80222ec:	910d      	str	r1, [sp, #52]	; 0x34
 80222ee:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80222f2:	2800      	cmp	r0, #0
 80222f4:	f000 8115 	beq.w	8022522 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80222f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80222fa:	eb06 0c01 	add.w	ip, r6, r1
 80222fe:	5876      	ldr	r6, [r6, r1]
 8022300:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022304:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022308:	9609      	str	r6, [sp, #36]	; 0x24
 802230a:	0e0e      	lsrs	r6, r1, #24
 802230c:	910f      	str	r1, [sp, #60]	; 0x3c
 802230e:	b292      	uxth	r2, r2
 8022310:	b280      	uxth	r0, r0
 8022312:	fb02 fa00 	mul.w	sl, r2, r0
 8022316:	0112      	lsls	r2, r2, #4
 8022318:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802231c:	eba2 080a 	sub.w	r8, r2, sl
 8022320:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022324:	b280      	uxth	r0, r0
 8022326:	fa1f f888 	uxth.w	r8, r8
 802232a:	1a09      	subs	r1, r1, r0
 802232c:	fb08 f20e 	mul.w	r2, r8, lr
 8022330:	b289      	uxth	r1, r1
 8022332:	fb01 2207 	mla	r2, r1, r7, r2
 8022336:	fb00 2209 	mla	r2, r0, r9, r2
 802233a:	fb0a 2206 	mla	r2, sl, r6, r2
 802233e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022342:	2a00      	cmp	r2, #0
 8022344:	f000 80da 	beq.w	80224fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8022348:	2fff      	cmp	r7, #255	; 0xff
 802234a:	d01a      	beq.n	8022382 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 802234c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022350:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022354:	fb07 fc0c 	mul.w	ip, r7, ip
 8022358:	435f      	muls	r7, r3
 802235a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802235e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022362:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022366:	4463      	add	r3, ip
 8022368:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 802236c:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8022370:	0a1b      	lsrs	r3, r3, #8
 8022372:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022376:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802237a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802237e:	ea43 030c 	orr.w	r3, r3, ip
 8022382:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022386:	d021      	beq.n	80223cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8022388:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802238a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802238e:	fb0e f707 	mul.w	r7, lr, r7
 8022392:	9713      	str	r7, [sp, #76]	; 0x4c
 8022394:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022396:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802239a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 802239c:	fb0e fe0c 	mul.w	lr, lr, ip
 80223a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80223a4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80223a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80223ac:	44bc      	add	ip, r7
 80223ae:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80223b2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80223b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80223be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80223c2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80223c6:	ea4c 070e 	orr.w	r7, ip, lr
 80223ca:	970d      	str	r7, [sp, #52]	; 0x34
 80223cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80223d0:	d01e      	beq.n	8022410 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 80223d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80223d4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80223d8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80223dc:	fb09 fe0e 	mul.w	lr, r9, lr
 80223e0:	fb09 f907 	mul.w	r9, r9, r7
 80223e4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80223e8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80223ec:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80223f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80223f4:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80223f8:	44f4      	add	ip, lr
 80223fa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80223fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022402:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022406:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802240a:	ea4c 0709 	orr.w	r7, ip, r9
 802240e:	9709      	str	r7, [sp, #36]	; 0x24
 8022410:	2eff      	cmp	r6, #255	; 0xff
 8022412:	d01c      	beq.n	802244e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8022414:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022416:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802241a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802241e:	fb06 fe0e 	mul.w	lr, r6, lr
 8022422:	437e      	muls	r6, r7
 8022424:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022428:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802242c:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022430:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022434:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022438:	44f4      	add	ip, lr
 802243a:	0a36      	lsrs	r6, r6, #8
 802243c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022440:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022444:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022448:	ea4c 0606 	orr.w	r6, ip, r6
 802244c:	960f      	str	r6, [sp, #60]	; 0x3c
 802244e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022450:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022454:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022458:	2aff      	cmp	r2, #255	; 0xff
 802245a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802245e:	fb08 f606 	mul.w	r6, r8, r6
 8022462:	fb01 6607 	mla	r6, r1, r7, r6
 8022466:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022468:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802246c:	fb00 6607 	mla	r6, r0, r7, r6
 8022470:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022472:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022476:	fb0a 6607 	mla	r6, sl, r7, r6
 802247a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802247c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022480:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022484:	fb08 f807 	mul.w	r8, r8, r7
 8022488:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802248c:	fb01 8303 	mla	r3, r1, r3, r8
 8022490:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022492:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022496:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022498:	fb00 330c 	mla	r3, r0, ip, r3
 802249c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80224a0:	fb0a 3e0e 	mla	lr, sl, lr, r3
 80224a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224a8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80224ac:	ea46 060e 	orr.w	r6, r6, lr
 80224b0:	b2f0      	uxtb	r0, r6
 80224b2:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80224b6:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80224ba:	d038      	beq.n	802252e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 80224bc:	43d2      	mvns	r2, r2
 80224be:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80224c2:	b2d2      	uxtb	r2, r2
 80224c4:	4357      	muls	r7, r2
 80224c6:	1c7b      	adds	r3, r7, #1
 80224c8:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80224cc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80224d0:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 80224d4:	4350      	muls	r0, r2
 80224d6:	f805 3c03 	strb.w	r3, [r5, #-3]
 80224da:	1c43      	adds	r3, r0, #1
 80224dc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80224e0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80224e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80224e8:	4353      	muls	r3, r2
 80224ea:	f805 1c02 	strb.w	r1, [r5, #-2]
 80224ee:	1c5a      	adds	r2, r3, #1
 80224f0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80224f4:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80224f8:	f805 6c01 	strb.w	r6, [r5, #-1]
 80224fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80224fe:	3503      	adds	r5, #3
 8022500:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022502:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022506:	4413      	add	r3, r2
 8022508:	9329      	str	r3, [sp, #164]	; 0xa4
 802250a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802250c:	441c      	add	r4, r3
 802250e:	e510      	b.n	8021f32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8022510:	b150      	cbz	r0, 8022528 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8022512:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022514:	5871      	ldr	r1, [r6, r1]
 8022516:	26ff      	movs	r6, #255	; 0xff
 8022518:	ea4f 6911 	mov.w	r9, r1, lsr #24
 802251c:	9109      	str	r1, [sp, #36]	; 0x24
 802251e:	46b6      	mov	lr, r6
 8022520:	e6f5      	b.n	802230e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022522:	26ff      	movs	r6, #255	; 0xff
 8022524:	46b1      	mov	r9, r6
 8022526:	e6f2      	b.n	802230e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022528:	26ff      	movs	r6, #255	; 0xff
 802252a:	46b1      	mov	r9, r6
 802252c:	e7f7      	b.n	802251e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 802252e:	f805 0c03 	strb.w	r0, [r5, #-3]
 8022532:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022536:	e7df      	b.n	80224f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8022538:	b017      	add	sp, #92	; 0x5c
 802253a:	ecbd 8b08 	vpop	{d8-d11}
 802253e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022544 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8022544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022548:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 802254c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022550:	2800      	cmp	r0, #0
 8022552:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022556:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802255a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802255e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022562:	db6b      	blt.n	802263c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022564:	4580      	cmp	r8, r0
 8022566:	dd69      	ble.n	802263c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022568:	f1bc 0f00 	cmp.w	ip, #0
 802256c:	db66      	blt.n	802263c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802256e:	45e1      	cmp	r9, ip
 8022570:	dd64      	ble.n	802263c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022572:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022576:	f01e 0f01 	tst.w	lr, #1
 802257a:	5d16      	ldrb	r6, [r2, r4]
 802257c:	bf0c      	ite	eq
 802257e:	f006 060f 	andeq.w	r6, r6, #15
 8022582:	1136      	asrne	r6, r6, #4
 8022584:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022588:	b2f6      	uxtb	r6, r6
 802258a:	f110 0a01 	adds.w	sl, r0, #1
 802258e:	d457      	bmi.n	8022640 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022590:	45d0      	cmp	r8, sl
 8022592:	dd55      	ble.n	8022640 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022594:	f1bc 0f00 	cmp.w	ip, #0
 8022598:	db52      	blt.n	8022640 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802259a:	45e1      	cmp	r9, ip
 802259c:	dd50      	ble.n	8022640 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802259e:	2f00      	cmp	r7, #0
 80225a0:	f000 80ac 	beq.w	80226fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80225a4:	f10e 0b01 	add.w	fp, lr, #1
 80225a8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80225ac:	f01b 0f01 	tst.w	fp, #1
 80225b0:	5d14      	ldrb	r4, [r2, r4]
 80225b2:	bf0c      	ite	eq
 80225b4:	f004 040f 	andeq.w	r4, r4, #15
 80225b8:	1124      	asrne	r4, r4, #4
 80225ba:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80225be:	b2e4      	uxtb	r4, r4
 80225c0:	2d00      	cmp	r5, #0
 80225c2:	f000 8096 	beq.w	80226f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80225c6:	2800      	cmp	r0, #0
 80225c8:	f10c 0c01 	add.w	ip, ip, #1
 80225cc:	db3c      	blt.n	8022648 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80225ce:	4580      	cmp	r8, r0
 80225d0:	dd3a      	ble.n	8022648 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80225d2:	f1bc 0f00 	cmp.w	ip, #0
 80225d6:	db37      	blt.n	8022648 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80225d8:	45e1      	cmp	r9, ip
 80225da:	dd35      	ble.n	8022648 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80225dc:	eb03 0b0e 	add.w	fp, r3, lr
 80225e0:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80225e4:	f01b 0f01 	tst.w	fp, #1
 80225e8:	5c10      	ldrb	r0, [r2, r0]
 80225ea:	bf0c      	ite	eq
 80225ec:	f000 000f 	andeq.w	r0, r0, #15
 80225f0:	1100      	asrne	r0, r0, #4
 80225f2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80225f6:	b2c0      	uxtb	r0, r0
 80225f8:	f1ba 0f00 	cmp.w	sl, #0
 80225fc:	db26      	blt.n	802264c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80225fe:	45d0      	cmp	r8, sl
 8022600:	dd24      	ble.n	802264c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022602:	f1bc 0f00 	cmp.w	ip, #0
 8022606:	db21      	blt.n	802264c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022608:	45e1      	cmp	r9, ip
 802260a:	dd1f      	ble.n	802264c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802260c:	b307      	cbz	r7, 8022650 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802260e:	3301      	adds	r3, #1
 8022610:	449e      	add	lr, r3
 8022612:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022616:	f01e 0f01 	tst.w	lr, #1
 802261a:	5cd3      	ldrb	r3, [r2, r3]
 802261c:	bf0c      	ite	eq
 802261e:	f003 030f 	andeq.w	r3, r3, #15
 8022622:	111b      	asrne	r3, r3, #4
 8022624:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022628:	b2db      	uxtb	r3, r3
 802262a:	2f0f      	cmp	r7, #15
 802262c:	d911      	bls.n	8022652 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 802262e:	4b35      	ldr	r3, [pc, #212]	; (8022704 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8022630:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022634:	4a34      	ldr	r2, [pc, #208]	; (8022708 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8022636:	4835      	ldr	r0, [pc, #212]	; (802270c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8022638:	f002 fb5a 	bl	8024cf0 <__assert_func>
 802263c:	2600      	movs	r6, #0
 802263e:	e7a4      	b.n	802258a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8022640:	2400      	movs	r4, #0
 8022642:	e7bd      	b.n	80225c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8022644:	463c      	mov	r4, r7
 8022646:	e7be      	b.n	80225c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8022648:	2000      	movs	r0, #0
 802264a:	e7d5      	b.n	80225f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 802264c:	2300      	movs	r3, #0
 802264e:	e7ec      	b.n	802262a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8022650:	463b      	mov	r3, r7
 8022652:	2d0f      	cmp	r5, #15
 8022654:	d8eb      	bhi.n	802262e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8022656:	b2bf      	uxth	r7, r7
 8022658:	b2ad      	uxth	r5, r5
 802265a:	fb07 f205 	mul.w	r2, r7, r5
 802265e:	013f      	lsls	r7, r7, #4
 8022660:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022664:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022668:	1abf      	subs	r7, r7, r2
 802266a:	b2ad      	uxth	r5, r5
 802266c:	b2bf      	uxth	r7, r7
 802266e:	ebac 0c05 	sub.w	ip, ip, r5
 8022672:	437c      	muls	r4, r7
 8022674:	fa1f fc8c 	uxth.w	ip, ip
 8022678:	fb06 440c 	mla	r4, r6, ip, r4
 802267c:	fb05 4400 	mla	r4, r5, r0, r4
 8022680:	fb02 4203 	mla	r2, r2, r3, r4
 8022684:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022688:	b38a      	cbz	r2, 80226ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 802268a:	4b21      	ldr	r3, [pc, #132]	; (8022710 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 802268c:	681c      	ldr	r4, [r3, #0]
 802268e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8022692:	b2e5      	uxtb	r5, r4
 8022694:	4353      	muls	r3, r2
 8022696:	1c5a      	adds	r2, r3, #1
 8022698:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802269c:	1212      	asrs	r2, r2, #8
 802269e:	b290      	uxth	r0, r2
 80226a0:	43d2      	mvns	r2, r2
 80226a2:	fb15 f500 	smulbb	r5, r5, r0
 80226a6:	b2d3      	uxtb	r3, r2
 80226a8:	780a      	ldrb	r2, [r1, #0]
 80226aa:	fb02 5203 	mla	r2, r2, r3, r5
 80226ae:	b292      	uxth	r2, r2
 80226b0:	1c55      	adds	r5, r2, #1
 80226b2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80226b6:	784d      	ldrb	r5, [r1, #1]
 80226b8:	fb15 f503 	smulbb	r5, r5, r3
 80226bc:	1212      	asrs	r2, r2, #8
 80226be:	700a      	strb	r2, [r1, #0]
 80226c0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80226c4:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80226c8:	fb02 5200 	mla	r2, r2, r0, r5
 80226cc:	b292      	uxth	r2, r2
 80226ce:	1c55      	adds	r5, r2, #1
 80226d0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80226d4:	1212      	asrs	r2, r2, #8
 80226d6:	704a      	strb	r2, [r1, #1]
 80226d8:	788a      	ldrb	r2, [r1, #2]
 80226da:	fb12 f303 	smulbb	r3, r2, r3
 80226de:	fb04 3300 	mla	r3, r4, r0, r3
 80226e2:	b29b      	uxth	r3, r3
 80226e4:	1c5a      	adds	r2, r3, #1
 80226e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80226ea:	121b      	asrs	r3, r3, #8
 80226ec:	708b      	strb	r3, [r1, #2]
 80226ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226f2:	2f0f      	cmp	r7, #15
 80226f4:	d89b      	bhi.n	802262e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80226f6:	462b      	mov	r3, r5
 80226f8:	4628      	mov	r0, r5
 80226fa:	e7ac      	b.n	8022656 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80226fc:	2d00      	cmp	r5, #0
 80226fe:	d1a1      	bne.n	8022644 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8022700:	462c      	mov	r4, r5
 8022702:	e7f8      	b.n	80226f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8022704:	080296e7 	.word	0x080296e7
 8022708:	08029bde 	.word	0x08029bde
 802270c:	080297b0 	.word	0x080297b0
 8022710:	2000bcf0 	.word	0x2000bcf0

08022714 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022718:	ed2d 8b08 	vpush	{d8-d11}
 802271c:	b097      	sub	sp, #92	; 0x5c
 802271e:	eeb0 aa40 	vmov.f32	s20, s0
 8022722:	eef0 9a60 	vmov.f32	s19, s1
 8022726:	9308      	str	r3, [sp, #32]
 8022728:	eeb0 9a41 	vmov.f32	s18, s2
 802272c:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8022730:	eeb0 8a62 	vmov.f32	s16, s5
 8022734:	9214      	str	r2, [sp, #80]	; 0x50
 8022736:	eef0 8a43 	vmov.f32	s17, s6
 802273a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802273c:	eef0 ba44 	vmov.f32	s23, s8
 8022740:	9309      	str	r3, [sp, #36]	; 0x24
 8022742:	eeb0 ba64 	vmov.f32	s22, s9
 8022746:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 802274a:	eef0 aa45 	vmov.f32	s21, s10
 802274e:	9015      	str	r0, [sp, #84]	; 0x54
 8022750:	910c      	str	r1, [sp, #48]	; 0x30
 8022752:	930e      	str	r3, [sp, #56]	; 0x38
 8022754:	6850      	ldr	r0, [r2, #4]
 8022756:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 802275a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802275e:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8022762:	fb00 1803 	mla	r8, r0, r3, r1
 8022766:	6813      	ldr	r3, [r2, #0]
 8022768:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802276c:	4498      	add	r8, r3
 802276e:	f10b 0301 	add.w	r3, fp, #1
 8022772:	f023 0301 	bic.w	r3, r3, #1
 8022776:	930f      	str	r3, [sp, #60]	; 0x3c
 8022778:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802277a:	681f      	ldr	r7, [r3, #0]
 802277c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802277e:	2b00      	cmp	r3, #0
 8022780:	dc03      	bgt.n	802278a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8022782:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022784:	2b00      	cmp	r3, #0
 8022786:	f340 8238 	ble.w	8022bfa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802278a:	9b08      	ldr	r3, [sp, #32]
 802278c:	2b00      	cmp	r3, #0
 802278e:	f340 810c 	ble.w	80229aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8022792:	142a      	asrs	r2, r5, #16
 8022794:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022798:	d42c      	bmi.n	80227f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802279a:	1c51      	adds	r1, r2, #1
 802279c:	458b      	cmp	fp, r1
 802279e:	dd2c      	ble.n	80227fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80227a0:	2b00      	cmp	r3, #0
 80227a2:	db2a      	blt.n	80227fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80227a4:	1c59      	adds	r1, r3, #1
 80227a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80227a8:	4288      	cmp	r0, r1
 80227aa:	dd26      	ble.n	80227fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80227ac:	9b08      	ldr	r3, [sp, #32]
 80227ae:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80227b0:	3b01      	subs	r3, #1
 80227b2:	fb02 5203 	mla	r2, r2, r3, r5
 80227b6:	1412      	asrs	r2, r2, #16
 80227b8:	d429      	bmi.n	802280e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80227ba:	3201      	adds	r2, #1
 80227bc:	4593      	cmp	fp, r2
 80227be:	dd26      	ble.n	802280e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80227c0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80227c2:	fb02 6303 	mla	r3, r2, r3, r6
 80227c6:	141b      	asrs	r3, r3, #16
 80227c8:	d421      	bmi.n	802280e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80227ca:	3301      	adds	r3, #1
 80227cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80227ce:	429a      	cmp	r2, r3
 80227d0:	dd1d      	ble.n	802280e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80227d2:	f108 0e03 	add.w	lr, r8, #3
 80227d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80227da:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80227de:	f1b9 0f00 	cmp.w	r9, #0
 80227e2:	f300 814f 	bgt.w	8022a84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80227e6:	9b08      	ldr	r3, [sp, #32]
 80227e8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80227ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80227f0:	44a0      	add	r8, r4
 80227f2:	e0dc      	b.n	80229ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80227f4:	1c51      	adds	r1, r2, #1
 80227f6:	f040 80ce 	bne.w	8022996 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80227fa:	4593      	cmp	fp, r2
 80227fc:	f340 80cb 	ble.w	8022996 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022800:	1c5a      	adds	r2, r3, #1
 8022802:	f2c0 80c8 	blt.w	8022996 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022808:	4293      	cmp	r3, r2
 802280a:	f280 80c4 	bge.w	8022996 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802280e:	9b08      	ldr	r3, [sp, #32]
 8022810:	46c1      	mov	r9, r8
 8022812:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8022816:	930d      	str	r3, [sp, #52]	; 0x34
 8022818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802281a:	2b00      	cmp	r3, #0
 802281c:	dde3      	ble.n	80227e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802281e:	1428      	asrs	r0, r5, #16
 8022820:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022824:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022828:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802282c:	f100 8111 	bmi.w	8022a52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8022830:	f100 0c01 	add.w	ip, r0, #1
 8022834:	45e3      	cmp	fp, ip
 8022836:	f340 810e 	ble.w	8022a56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802283a:	2b00      	cmp	r3, #0
 802283c:	f2c0 810b 	blt.w	8022a56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022840:	f103 0c01 	add.w	ip, r3, #1
 8022844:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022846:	4564      	cmp	r4, ip
 8022848:	f340 8105 	ble.w	8022a56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802284c:	fb03 030a 	mla	r3, r3, sl, r0
 8022850:	0858      	lsrs	r0, r3, #1
 8022852:	07dc      	lsls	r4, r3, #31
 8022854:	5c38      	ldrb	r0, [r7, r0]
 8022856:	bf54      	ite	pl
 8022858:	f000 000f 	andpl.w	r0, r0, #15
 802285c:	1100      	asrmi	r0, r0, #4
 802285e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022862:	b2c0      	uxtb	r0, r0
 8022864:	2a00      	cmp	r2, #0
 8022866:	f000 80e1 	beq.w	8022a2c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 802286a:	f103 0e01 	add.w	lr, r3, #1
 802286e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022872:	f01e 0f01 	tst.w	lr, #1
 8022876:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802287a:	bf0c      	ite	eq
 802287c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022880:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022884:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022888:	fa5f f48c 	uxtb.w	r4, ip
 802288c:	9410      	str	r4, [sp, #64]	; 0x40
 802288e:	b1f9      	cbz	r1, 80228d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022890:	4453      	add	r3, sl
 8022892:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022896:	07dc      	lsls	r4, r3, #31
 8022898:	f103 0301 	add.w	r3, r3, #1
 802289c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80228a0:	bf54      	ite	pl
 80228a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80228a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80228aa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80228ae:	fa5f f48c 	uxtb.w	r4, ip
 80228b2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80228b6:	940a      	str	r4, [sp, #40]	; 0x28
 80228b8:	07dc      	lsls	r4, r3, #31
 80228ba:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80228be:	bf54      	ite	pl
 80228c0:	f00c 030f 	andpl.w	r3, ip, #15
 80228c4:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80228c8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80228cc:	b2db      	uxtb	r3, r3
 80228ce:	9311      	str	r3, [sp, #68]	; 0x44
 80228d0:	b292      	uxth	r2, r2
 80228d2:	b289      	uxth	r1, r1
 80228d4:	0113      	lsls	r3, r2, #4
 80228d6:	fb02 fc01 	mul.w	ip, r2, r1
 80228da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80228dc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80228e0:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80228e4:	eba3 030c 	sub.w	r3, r3, ip
 80228e8:	b289      	uxth	r1, r1
 80228ea:	b29b      	uxth	r3, r3
 80228ec:	ebae 0e01 	sub.w	lr, lr, r1
 80228f0:	4353      	muls	r3, r2
 80228f2:	fa1f fe8e 	uxth.w	lr, lr
 80228f6:	fb00 320e 	mla	r2, r0, lr, r3
 80228fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80228fc:	fb01 2203 	mla	r2, r1, r3, r2
 8022900:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022902:	fb0c 2203 	mla	r2, ip, r3, r2
 8022906:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802290a:	2a00      	cmp	r2, #0
 802290c:	d039      	beq.n	8022982 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802290e:	4bbd      	ldr	r3, [pc, #756]	; (8022c04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8022910:	6819      	ldr	r1, [r3, #0]
 8022912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022914:	fa5f fc81 	uxtb.w	ip, r1
 8022918:	435a      	muls	r2, r3
 802291a:	1c53      	adds	r3, r2, #1
 802291c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022920:	1212      	asrs	r2, r2, #8
 8022922:	b290      	uxth	r0, r2
 8022924:	43d2      	mvns	r2, r2
 8022926:	fb1c fc00 	smulbb	ip, ip, r0
 802292a:	b2d3      	uxtb	r3, r2
 802292c:	f899 2000 	ldrb.w	r2, [r9]
 8022930:	fb02 c203 	mla	r2, r2, r3, ip
 8022934:	b292      	uxth	r2, r2
 8022936:	f102 0c01 	add.w	ip, r2, #1
 802293a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802293e:	f899 c001 	ldrb.w	ip, [r9, #1]
 8022942:	fb1c fc03 	smulbb	ip, ip, r3
 8022946:	1212      	asrs	r2, r2, #8
 8022948:	f889 2000 	strb.w	r2, [r9]
 802294c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8022950:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8022954:	fb02 c200 	mla	r2, r2, r0, ip
 8022958:	b292      	uxth	r2, r2
 802295a:	f102 0c01 	add.w	ip, r2, #1
 802295e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022962:	1212      	asrs	r2, r2, #8
 8022964:	f889 2001 	strb.w	r2, [r9, #1]
 8022968:	f899 2002 	ldrb.w	r2, [r9, #2]
 802296c:	fb12 f303 	smulbb	r3, r2, r3
 8022970:	fb01 3300 	mla	r3, r1, r0, r3
 8022974:	b29b      	uxth	r3, r3
 8022976:	1c5a      	adds	r2, r3, #1
 8022978:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802297c:	121b      	asrs	r3, r3, #8
 802297e:	f889 3002 	strb.w	r3, [r9, #2]
 8022982:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022984:	f109 0903 	add.w	r9, r9, #3
 8022988:	441d      	add	r5, r3
 802298a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802298c:	441e      	add	r6, r3
 802298e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022990:	3b01      	subs	r3, #1
 8022992:	930d      	str	r3, [sp, #52]	; 0x34
 8022994:	e740      	b.n	8022818 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022996:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022998:	f108 0803 	add.w	r8, r8, #3
 802299c:	441d      	add	r5, r3
 802299e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80229a0:	441e      	add	r6, r3
 80229a2:	9b08      	ldr	r3, [sp, #32]
 80229a4:	3b01      	subs	r3, #1
 80229a6:	9308      	str	r3, [sp, #32]
 80229a8:	e6ef      	b.n	802278a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80229aa:	f47f aeff 	bne.w	80227ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80229ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80229b0:	2b00      	cmp	r3, #0
 80229b2:	f340 8122 	ble.w	8022bfa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80229b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80229ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80229bc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80229c0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80229c4:	eef0 6a48 	vmov.f32	s13, s16
 80229c8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80229cc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80229d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229d4:	ee16 5a90 	vmov	r5, s13
 80229d8:	eef0 6a68 	vmov.f32	s13, s17
 80229dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229e0:	ee16 6a90 	vmov	r6, s13
 80229e4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80229e8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80229ec:	ee37 8a48 	vsub.f32	s16, s14, s16
 80229f0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80229f4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80229f8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80229fc:	ee18 2a10 	vmov	r2, s16
 8022a00:	eeb0 8a47 	vmov.f32	s16, s14
 8022a04:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a08:	ee18 2a90 	vmov	r2, s17
 8022a0c:	932b      	str	r3, [sp, #172]	; 0xac
 8022a0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022a10:	eef0 8a67 	vmov.f32	s17, s15
 8022a14:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a18:	932c      	str	r3, [sp, #176]	; 0xb0
 8022a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022a1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022a1e:	3b01      	subs	r3, #1
 8022a20:	930c      	str	r3, [sp, #48]	; 0x30
 8022a22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022a24:	bf08      	it	eq
 8022a26:	4613      	moveq	r3, r2
 8022a28:	9308      	str	r3, [sp, #32]
 8022a2a:	e6a7      	b.n	802277c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8022a2c:	2900      	cmp	r1, #0
 8022a2e:	f43f af4f 	beq.w	80228d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022a32:	4453      	add	r3, sl
 8022a34:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022a38:	07db      	lsls	r3, r3, #31
 8022a3a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a3e:	bf54      	ite	pl
 8022a40:	f00c 030f 	andpl.w	r3, ip, #15
 8022a44:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022a48:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022a4c:	b2db      	uxtb	r3, r3
 8022a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8022a50:	e73e      	b.n	80228d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022a52:	1c44      	adds	r4, r0, #1
 8022a54:	d195      	bne.n	8022982 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022a56:	4583      	cmp	fp, r0
 8022a58:	dd93      	ble.n	8022982 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022a5a:	1c5c      	adds	r4, r3, #1
 8022a5c:	db91      	blt.n	8022982 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022a5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022a60:	429c      	cmp	r4, r3
 8022a62:	dd8e      	ble.n	8022982 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022a64:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022a66:	9002      	str	r0, [sp, #8]
 8022a68:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022a6a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8022a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a70:	463a      	mov	r2, r7
 8022a72:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022a76:	e9cd b300 	strd	fp, r3, [sp]
 8022a7a:	4649      	mov	r1, r9
 8022a7c:	4653      	mov	r3, sl
 8022a7e:	f7ff fd61 	bl	8022544 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8022a82:	e77e      	b.n	8022982 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022a84:	142a      	asrs	r2, r5, #16
 8022a86:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022a8a:	1433      	asrs	r3, r6, #16
 8022a8c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022a90:	fb0a 2303 	mla	r3, sl, r3, r2
 8022a94:	085a      	lsrs	r2, r3, #1
 8022a96:	07dc      	lsls	r4, r3, #31
 8022a98:	5cba      	ldrb	r2, [r7, r2]
 8022a9a:	bf54      	ite	pl
 8022a9c:	f002 020f 	andpl.w	r2, r2, #15
 8022aa0:	1112      	asrmi	r2, r2, #4
 8022aa2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022aa6:	b2d2      	uxtb	r2, r2
 8022aa8:	2900      	cmp	r1, #0
 8022aaa:	f000 8093 	beq.w	8022bd4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8022aae:	1c5c      	adds	r4, r3, #1
 8022ab0:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8022ab4:	07e4      	lsls	r4, r4, #31
 8022ab6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022aba:	bf54      	ite	pl
 8022abc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022ac0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022ac4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022ac8:	fa5f f48c 	uxtb.w	r4, ip
 8022acc:	9412      	str	r4, [sp, #72]	; 0x48
 8022ace:	b300      	cbz	r0, 8022b12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022ad0:	4453      	add	r3, sl
 8022ad2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022ad6:	07dc      	lsls	r4, r3, #31
 8022ad8:	f103 0301 	add.w	r3, r3, #1
 8022adc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022ae0:	bf54      	ite	pl
 8022ae2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022ae6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022aea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022aee:	fa5f f48c 	uxtb.w	r4, ip
 8022af2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022af6:	940b      	str	r4, [sp, #44]	; 0x2c
 8022af8:	07dc      	lsls	r4, r3, #31
 8022afa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022afe:	bf54      	ite	pl
 8022b00:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022b04:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022b08:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022b0c:	fa5f f38c 	uxtb.w	r3, ip
 8022b10:	9313      	str	r3, [sp, #76]	; 0x4c
 8022b12:	b289      	uxth	r1, r1
 8022b14:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022b16:	b280      	uxth	r0, r0
 8022b18:	fb01 f300 	mul.w	r3, r1, r0
 8022b1c:	0109      	lsls	r1, r1, #4
 8022b1e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022b22:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022b26:	1ac9      	subs	r1, r1, r3
 8022b28:	b280      	uxth	r0, r0
 8022b2a:	b289      	uxth	r1, r1
 8022b2c:	ebac 0c00 	sub.w	ip, ip, r0
 8022b30:	4361      	muls	r1, r4
 8022b32:	fa1f fc8c 	uxth.w	ip, ip
 8022b36:	fb02 120c 	mla	r2, r2, ip, r1
 8022b3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022b3c:	fb00 2001 	mla	r0, r0, r1, r2
 8022b40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022b42:	fb03 0302 	mla	r3, r3, r2, r0
 8022b46:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b4a:	2b00      	cmp	r3, #0
 8022b4c:	d039      	beq.n	8022bc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8022b4e:	4a2d      	ldr	r2, [pc, #180]	; (8022c04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8022b50:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022b54:	6810      	ldr	r0, [r2, #0]
 8022b56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022b58:	fa5f fc80 	uxtb.w	ip, r0
 8022b5c:	4353      	muls	r3, r2
 8022b5e:	1c5a      	adds	r2, r3, #1
 8022b60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b64:	121b      	asrs	r3, r3, #8
 8022b66:	b29a      	uxth	r2, r3
 8022b68:	43db      	mvns	r3, r3
 8022b6a:	fb1c fc02 	smulbb	ip, ip, r2
 8022b6e:	b2db      	uxtb	r3, r3
 8022b70:	fb01 c103 	mla	r1, r1, r3, ip
 8022b74:	b289      	uxth	r1, r1
 8022b76:	f101 0c01 	add.w	ip, r1, #1
 8022b7a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022b7e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022b82:	fb1c fc03 	smulbb	ip, ip, r3
 8022b86:	1209      	asrs	r1, r1, #8
 8022b88:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022b8c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8022b90:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8022b94:	fb01 c102 	mla	r1, r1, r2, ip
 8022b98:	b289      	uxth	r1, r1
 8022b9a:	f101 0c01 	add.w	ip, r1, #1
 8022b9e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022ba2:	1209      	asrs	r1, r1, #8
 8022ba4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8022ba8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022bac:	fb11 f303 	smulbb	r3, r1, r3
 8022bb0:	fb00 3002 	mla	r0, r0, r2, r3
 8022bb4:	b280      	uxth	r0, r0
 8022bb6:	1c42      	adds	r2, r0, #1
 8022bb8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022bbc:	1200      	asrs	r0, r0, #8
 8022bbe:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8022bc2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022bc4:	f10e 0e03 	add.w	lr, lr, #3
 8022bc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8022bcc:	441d      	add	r5, r3
 8022bce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022bd0:	441e      	add	r6, r3
 8022bd2:	e604      	b.n	80227de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8022bd4:	2800      	cmp	r0, #0
 8022bd6:	d09c      	beq.n	8022b12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022bd8:	4453      	add	r3, sl
 8022bda:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022bde:	07db      	lsls	r3, r3, #31
 8022be0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022be4:	bf54      	ite	pl
 8022be6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022bea:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022bee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022bf2:	fa5f f38c 	uxtb.w	r3, ip
 8022bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8022bf8:	e78b      	b.n	8022b12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022bfa:	b017      	add	sp, #92	; 0x5c
 8022bfc:	ecbd 8b08 	vpop	{d8-d11}
 8022c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c04:	2000bcf0 	.word	0x2000bcf0

08022c08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022c08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c0c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022c10:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022c14:	2800      	cmp	r0, #0
 8022c16:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022c1a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022c1e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022c22:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022c26:	db6b      	blt.n	8022d00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022c28:	4580      	cmp	r8, r0
 8022c2a:	dd69      	ble.n	8022d00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022c2c:	f1bc 0f00 	cmp.w	ip, #0
 8022c30:	db66      	blt.n	8022d00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022c32:	45e1      	cmp	r9, ip
 8022c34:	dd64      	ble.n	8022d00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022c36:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022c3a:	f01e 0f01 	tst.w	lr, #1
 8022c3e:	5d16      	ldrb	r6, [r2, r4]
 8022c40:	bf0c      	ite	eq
 8022c42:	f006 060f 	andeq.w	r6, r6, #15
 8022c46:	1136      	asrne	r6, r6, #4
 8022c48:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022c4c:	b2f6      	uxtb	r6, r6
 8022c4e:	f110 0a01 	adds.w	sl, r0, #1
 8022c52:	d457      	bmi.n	8022d04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022c54:	45d0      	cmp	r8, sl
 8022c56:	dd55      	ble.n	8022d04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022c58:	f1bc 0f00 	cmp.w	ip, #0
 8022c5c:	db52      	blt.n	8022d04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022c5e:	45e1      	cmp	r9, ip
 8022c60:	dd50      	ble.n	8022d04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022c62:	2f00      	cmp	r7, #0
 8022c64:	f000 80a5 	beq.w	8022db2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8022c68:	f10e 0b01 	add.w	fp, lr, #1
 8022c6c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022c70:	f01b 0f01 	tst.w	fp, #1
 8022c74:	5d14      	ldrb	r4, [r2, r4]
 8022c76:	bf0c      	ite	eq
 8022c78:	f004 040f 	andeq.w	r4, r4, #15
 8022c7c:	1124      	asrne	r4, r4, #4
 8022c7e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022c82:	b2e4      	uxtb	r4, r4
 8022c84:	2d00      	cmp	r5, #0
 8022c86:	f000 808f 	beq.w	8022da8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8022c8a:	2800      	cmp	r0, #0
 8022c8c:	f10c 0c01 	add.w	ip, ip, #1
 8022c90:	db3c      	blt.n	8022d0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022c92:	4580      	cmp	r8, r0
 8022c94:	dd3a      	ble.n	8022d0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022c96:	f1bc 0f00 	cmp.w	ip, #0
 8022c9a:	db37      	blt.n	8022d0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022c9c:	45e1      	cmp	r9, ip
 8022c9e:	dd35      	ble.n	8022d0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022ca0:	eb03 0b0e 	add.w	fp, r3, lr
 8022ca4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022ca8:	f01b 0f01 	tst.w	fp, #1
 8022cac:	5c10      	ldrb	r0, [r2, r0]
 8022cae:	bf0c      	ite	eq
 8022cb0:	f000 000f 	andeq.w	r0, r0, #15
 8022cb4:	1100      	asrne	r0, r0, #4
 8022cb6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022cba:	b2c0      	uxtb	r0, r0
 8022cbc:	f1ba 0f00 	cmp.w	sl, #0
 8022cc0:	db26      	blt.n	8022d10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022cc2:	45d0      	cmp	r8, sl
 8022cc4:	dd24      	ble.n	8022d10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022cc6:	f1bc 0f00 	cmp.w	ip, #0
 8022cca:	db21      	blt.n	8022d10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022ccc:	45e1      	cmp	r9, ip
 8022cce:	dd1f      	ble.n	8022d10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022cd0:	b307      	cbz	r7, 8022d14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8022cd2:	3301      	adds	r3, #1
 8022cd4:	449e      	add	lr, r3
 8022cd6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022cda:	f01e 0f01 	tst.w	lr, #1
 8022cde:	5cd3      	ldrb	r3, [r2, r3]
 8022ce0:	bf0c      	ite	eq
 8022ce2:	f003 030f 	andeq.w	r3, r3, #15
 8022ce6:	111b      	asrne	r3, r3, #4
 8022ce8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022cec:	b2db      	uxtb	r3, r3
 8022cee:	2f0f      	cmp	r7, #15
 8022cf0:	d911      	bls.n	8022d16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8022cf2:	4b32      	ldr	r3, [pc, #200]	; (8022dbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8022cf4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022cf8:	4a31      	ldr	r2, [pc, #196]	; (8022dc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8022cfa:	4832      	ldr	r0, [pc, #200]	; (8022dc4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8022cfc:	f001 fff8 	bl	8024cf0 <__assert_func>
 8022d00:	2600      	movs	r6, #0
 8022d02:	e7a4      	b.n	8022c4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8022d04:	2400      	movs	r4, #0
 8022d06:	e7bd      	b.n	8022c84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8022d08:	463c      	mov	r4, r7
 8022d0a:	e7be      	b.n	8022c8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8022d0c:	2000      	movs	r0, #0
 8022d0e:	e7d5      	b.n	8022cbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8022d10:	2300      	movs	r3, #0
 8022d12:	e7ec      	b.n	8022cee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8022d14:	463b      	mov	r3, r7
 8022d16:	2d0f      	cmp	r5, #15
 8022d18:	d8eb      	bhi.n	8022cf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022d1a:	b2bf      	uxth	r7, r7
 8022d1c:	b2ad      	uxth	r5, r5
 8022d1e:	fb07 f205 	mul.w	r2, r7, r5
 8022d22:	013f      	lsls	r7, r7, #4
 8022d24:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022d28:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022d2c:	1abf      	subs	r7, r7, r2
 8022d2e:	b2ad      	uxth	r5, r5
 8022d30:	b2bf      	uxth	r7, r7
 8022d32:	ebac 0c05 	sub.w	ip, ip, r5
 8022d36:	437c      	muls	r4, r7
 8022d38:	fa1f fc8c 	uxth.w	ip, ip
 8022d3c:	fb06 440c 	mla	r4, r6, ip, r4
 8022d40:	fb05 4400 	mla	r4, r5, r0, r4
 8022d44:	fb02 4303 	mla	r3, r2, r3, r4
 8022d48:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d4c:	b353      	cbz	r3, 8022da4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8022d4e:	4a1e      	ldr	r2, [pc, #120]	; (8022dc8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8022d50:	7808      	ldrb	r0, [r1, #0]
 8022d52:	6814      	ldr	r4, [r2, #0]
 8022d54:	b29a      	uxth	r2, r3
 8022d56:	43db      	mvns	r3, r3
 8022d58:	b2e5      	uxtb	r5, r4
 8022d5a:	b2db      	uxtb	r3, r3
 8022d5c:	fb15 f502 	smulbb	r5, r5, r2
 8022d60:	fb00 5003 	mla	r0, r0, r3, r5
 8022d64:	b280      	uxth	r0, r0
 8022d66:	1c45      	adds	r5, r0, #1
 8022d68:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022d6c:	784d      	ldrb	r5, [r1, #1]
 8022d6e:	fb15 f503 	smulbb	r5, r5, r3
 8022d72:	1200      	asrs	r0, r0, #8
 8022d74:	7008      	strb	r0, [r1, #0]
 8022d76:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022d7a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022d7e:	fb00 5002 	mla	r0, r0, r2, r5
 8022d82:	b280      	uxth	r0, r0
 8022d84:	1c45      	adds	r5, r0, #1
 8022d86:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022d8a:	1200      	asrs	r0, r0, #8
 8022d8c:	7048      	strb	r0, [r1, #1]
 8022d8e:	7888      	ldrb	r0, [r1, #2]
 8022d90:	fb10 f303 	smulbb	r3, r0, r3
 8022d94:	fb04 3202 	mla	r2, r4, r2, r3
 8022d98:	b292      	uxth	r2, r2
 8022d9a:	1c53      	adds	r3, r2, #1
 8022d9c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022da0:	1212      	asrs	r2, r2, #8
 8022da2:	708a      	strb	r2, [r1, #2]
 8022da4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022da8:	2f0f      	cmp	r7, #15
 8022daa:	d8a2      	bhi.n	8022cf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022dac:	462b      	mov	r3, r5
 8022dae:	4628      	mov	r0, r5
 8022db0:	e7b3      	b.n	8022d1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8022db2:	2d00      	cmp	r5, #0
 8022db4:	d1a8      	bne.n	8022d08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8022db6:	462c      	mov	r4, r5
 8022db8:	e7f8      	b.n	8022dac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8022dba:	bf00      	nop
 8022dbc:	080296e7 	.word	0x080296e7
 8022dc0:	08029bde 	.word	0x08029bde
 8022dc4:	080297b0 	.word	0x080297b0
 8022dc8:	2000bcf0 	.word	0x2000bcf0

08022dcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dd0:	ed2d 8b08 	vpush	{d8-d11}
 8022dd4:	b095      	sub	sp, #84	; 0x54
 8022dd6:	461c      	mov	r4, r3
 8022dd8:	eeb0 aa40 	vmov.f32	s20, s0
 8022ddc:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8022de0:	eef0 9a60 	vmov.f32	s19, s1
 8022de4:	920e      	str	r2, [sp, #56]	; 0x38
 8022de6:	eeb0 9a41 	vmov.f32	s18, s2
 8022dea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022dec:	eeb0 8a62 	vmov.f32	s16, s5
 8022df0:	9307      	str	r3, [sp, #28]
 8022df2:	eef0 8a43 	vmov.f32	s17, s6
 8022df6:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8022dfa:	eef0 ba44 	vmov.f32	s23, s8
 8022dfe:	9013      	str	r0, [sp, #76]	; 0x4c
 8022e00:	eeb0 ba64 	vmov.f32	s22, s9
 8022e04:	9109      	str	r1, [sp, #36]	; 0x24
 8022e06:	eef0 aa45 	vmov.f32	s21, s10
 8022e0a:	9308      	str	r3, [sp, #32]
 8022e0c:	6850      	ldr	r0, [r2, #4]
 8022e0e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022e12:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8022e16:	fb00 1803 	mla	r8, r0, r3, r1
 8022e1a:	6813      	ldr	r3, [r2, #0]
 8022e1c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022e20:	4498      	add	r8, r3
 8022e22:	9b07      	ldr	r3, [sp, #28]
 8022e24:	3301      	adds	r3, #1
 8022e26:	f023 0301 	bic.w	r3, r3, #1
 8022e2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8022e2c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022e2e:	681f      	ldr	r7, [r3, #0]
 8022e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e32:	2b00      	cmp	r3, #0
 8022e34:	dc03      	bgt.n	8022e3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022e38:	2b00      	cmp	r3, #0
 8022e3a:	f340 8238 	ble.w	80232ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8022e3e:	2c00      	cmp	r4, #0
 8022e40:	f340 8109 	ble.w	8023056 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8022e44:	142a      	asrs	r2, r5, #16
 8022e46:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022e4a:	d42b      	bmi.n	8022ea4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022e4c:	1c51      	adds	r1, r2, #1
 8022e4e:	9807      	ldr	r0, [sp, #28]
 8022e50:	4288      	cmp	r0, r1
 8022e52:	dd2a      	ble.n	8022eaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022e54:	2b00      	cmp	r3, #0
 8022e56:	db28      	blt.n	8022eaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022e58:	1c59      	adds	r1, r3, #1
 8022e5a:	9808      	ldr	r0, [sp, #32]
 8022e5c:	4288      	cmp	r0, r1
 8022e5e:	dd24      	ble.n	8022eaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022e60:	1e63      	subs	r3, r4, #1
 8022e62:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022e64:	fb02 5203 	mla	r2, r2, r3, r5
 8022e68:	1412      	asrs	r2, r2, #16
 8022e6a:	d429      	bmi.n	8022ec0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022e6c:	3201      	adds	r2, #1
 8022e6e:	9907      	ldr	r1, [sp, #28]
 8022e70:	4291      	cmp	r1, r2
 8022e72:	dd25      	ble.n	8022ec0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022e74:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022e76:	fb02 6303 	mla	r3, r2, r3, r6
 8022e7a:	141b      	asrs	r3, r3, #16
 8022e7c:	d420      	bmi.n	8022ec0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022e7e:	3301      	adds	r3, #1
 8022e80:	9a08      	ldr	r2, [sp, #32]
 8022e82:	429a      	cmp	r2, r3
 8022e84:	dd1c      	ble.n	8022ec0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022e86:	f108 0e03 	add.w	lr, r8, #3
 8022e8a:	46a1      	mov	r9, r4
 8022e8c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022e90:	f1b9 0f00 	cmp.w	r9, #0
 8022e94:	f300 8155 	bgt.w	8023142 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8022e98:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022e9c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022ea0:	44a0      	add	r8, r4
 8022ea2:	e0da      	b.n	802305a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022ea4:	1c50      	adds	r0, r2, #1
 8022ea6:	f040 80ce 	bne.w	8023046 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022eaa:	9907      	ldr	r1, [sp, #28]
 8022eac:	4291      	cmp	r1, r2
 8022eae:	f340 80ca 	ble.w	8023046 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022eb2:	1c59      	adds	r1, r3, #1
 8022eb4:	f2c0 80c7 	blt.w	8023046 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022eb8:	9a08      	ldr	r2, [sp, #32]
 8022eba:	4293      	cmp	r3, r2
 8022ebc:	f280 80c3 	bge.w	8023046 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022ec0:	46a3      	mov	fp, r4
 8022ec2:	46c1      	mov	r9, r8
 8022ec4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022ec8:	f1bb 0f00 	cmp.w	fp, #0
 8022ecc:	dde4      	ble.n	8022e98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8022ece:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022ed2:	1428      	asrs	r0, r5, #16
 8022ed4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022ed8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022edc:	920a      	str	r2, [sp, #40]	; 0x28
 8022ede:	f100 8116 	bmi.w	802310e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022ee2:	f100 0c01 	add.w	ip, r0, #1
 8022ee6:	9a07      	ldr	r2, [sp, #28]
 8022ee8:	4562      	cmp	r2, ip
 8022eea:	f340 8112 	ble.w	8023112 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022eee:	2b00      	cmp	r3, #0
 8022ef0:	f2c0 810f 	blt.w	8023112 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022ef4:	f103 0c01 	add.w	ip, r3, #1
 8022ef8:	9a08      	ldr	r2, [sp, #32]
 8022efa:	4562      	cmp	r2, ip
 8022efc:	f340 8109 	ble.w	8023112 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022f00:	fb03 030a 	mla	r3, r3, sl, r0
 8022f04:	0858      	lsrs	r0, r3, #1
 8022f06:	07da      	lsls	r2, r3, #31
 8022f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f0a:	5c38      	ldrb	r0, [r7, r0]
 8022f0c:	bf54      	ite	pl
 8022f0e:	f000 000f 	andpl.w	r0, r0, #15
 8022f12:	1100      	asrmi	r0, r0, #4
 8022f14:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022f18:	b2c0      	uxtb	r0, r0
 8022f1a:	2a00      	cmp	r2, #0
 8022f1c:	f000 80dd 	beq.w	80230da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8022f20:	f103 0e01 	add.w	lr, r3, #1
 8022f24:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022f28:	f01e 0f01 	tst.w	lr, #1
 8022f2c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022f30:	bf0c      	ite	eq
 8022f32:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022f36:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022f3a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022f3e:	fa5f fc8c 	uxtb.w	ip, ip
 8022f42:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8022f46:	b301      	cbz	r1, 8022f8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022f48:	4453      	add	r3, sl
 8022f4a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022f4e:	07da      	lsls	r2, r3, #31
 8022f50:	f103 0301 	add.w	r3, r3, #1
 8022f54:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022f58:	bf54      	ite	pl
 8022f5a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022f5e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022f62:	07da      	lsls	r2, r3, #31
 8022f64:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022f68:	fa5f fc8c 	uxtb.w	ip, ip
 8022f6c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8022f70:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022f74:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022f78:	bf54      	ite	pl
 8022f7a:	f00c 030f 	andpl.w	r3, ip, #15
 8022f7e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022f82:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022f86:	b2db      	uxtb	r3, r3
 8022f88:	9310      	str	r3, [sp, #64]	; 0x40
 8022f8a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022f8e:	b289      	uxth	r1, r1
 8022f90:	fb02 f301 	mul.w	r3, r2, r1
 8022f94:	0112      	lsls	r2, r2, #4
 8022f96:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022f9a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8022f9e:	1ad2      	subs	r2, r2, r3
 8022fa0:	fa1f fe81 	uxth.w	lr, r1
 8022fa4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022fa6:	b292      	uxth	r2, r2
 8022fa8:	ebac 0c0e 	sub.w	ip, ip, lr
 8022fac:	434a      	muls	r2, r1
 8022fae:	fa1f fc8c 	uxth.w	ip, ip
 8022fb2:	fb00 200c 	mla	r0, r0, ip, r2
 8022fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022fb8:	fb0e 0002 	mla	r0, lr, r2, r0
 8022fbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022fbe:	fb03 0002 	mla	r0, r3, r2, r0
 8022fc2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022fc6:	b3a8      	cbz	r0, 8023034 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022fc8:	4bbb      	ldr	r3, [pc, #748]	; (80232b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8022fca:	28ff      	cmp	r0, #255	; 0xff
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8022fd2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8022fd6:	b2db      	uxtb	r3, r3
 8022fd8:	f000 8092 	beq.w	8023100 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8022fdc:	b282      	uxth	r2, r0
 8022fde:	43c0      	mvns	r0, r0
 8022fe0:	f899 e000 	ldrb.w	lr, [r9]
 8022fe4:	fb13 f302 	smulbb	r3, r3, r2
 8022fe8:	b2c0      	uxtb	r0, r0
 8022fea:	fb11 f102 	smulbb	r1, r1, r2
 8022fee:	fb0e 3300 	mla	r3, lr, r0, r3
 8022ff2:	fb1c f202 	smulbb	r2, ip, r2
 8022ff6:	b29b      	uxth	r3, r3
 8022ff8:	f103 0e01 	add.w	lr, r3, #1
 8022ffc:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023000:	121b      	asrs	r3, r3, #8
 8023002:	f889 3000 	strb.w	r3, [r9]
 8023006:	f899 3001 	ldrb.w	r3, [r9, #1]
 802300a:	fb03 1100 	mla	r1, r3, r0, r1
 802300e:	b289      	uxth	r1, r1
 8023010:	1c4b      	adds	r3, r1, #1
 8023012:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023016:	f899 3002 	ldrb.w	r3, [r9, #2]
 802301a:	fb03 2000 	mla	r0, r3, r0, r2
 802301e:	1209      	asrs	r1, r1, #8
 8023020:	b280      	uxth	r0, r0
 8023022:	f889 1001 	strb.w	r1, [r9, #1]
 8023026:	f100 0c01 	add.w	ip, r0, #1
 802302a:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802302e:	1200      	asrs	r0, r0, #8
 8023030:	f889 0002 	strb.w	r0, [r9, #2]
 8023034:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023036:	f109 0903 	add.w	r9, r9, #3
 802303a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802303e:	441d      	add	r5, r3
 8023040:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023042:	441e      	add	r6, r3
 8023044:	e740      	b.n	8022ec8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023046:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023048:	3c01      	subs	r4, #1
 802304a:	f108 0803 	add.w	r8, r8, #3
 802304e:	441d      	add	r5, r3
 8023050:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023052:	441e      	add	r6, r3
 8023054:	e6f3      	b.n	8022e3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023056:	f47f af03 	bne.w	8022e60 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802305a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802305c:	2b00      	cmp	r3, #0
 802305e:	f340 8126 	ble.w	80232ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8023062:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023066:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023068:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802306c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023070:	eef0 6a48 	vmov.f32	s13, s16
 8023074:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023078:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802307c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023080:	ee16 5a90 	vmov	r5, s13
 8023084:	eef0 6a68 	vmov.f32	s13, s17
 8023088:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802308c:	ee16 6a90 	vmov	r6, s13
 8023090:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023094:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023098:	ee37 8a48 	vsub.f32	s16, s14, s16
 802309c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80230a0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80230a4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80230a8:	ee18 2a10 	vmov	r2, s16
 80230ac:	eeb0 8a47 	vmov.f32	s16, s14
 80230b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80230b4:	ee18 2a90 	vmov	r2, s17
 80230b8:	9329      	str	r3, [sp, #164]	; 0xa4
 80230ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80230bc:	eef0 8a67 	vmov.f32	s17, s15
 80230c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80230c4:	932a      	str	r3, [sp, #168]	; 0xa8
 80230c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80230c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80230ca:	3b01      	subs	r3, #1
 80230cc:	9309      	str	r3, [sp, #36]	; 0x24
 80230ce:	bf08      	it	eq
 80230d0:	4614      	moveq	r4, r2
 80230d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80230d4:	bf18      	it	ne
 80230d6:	461c      	movne	r4, r3
 80230d8:	e6aa      	b.n	8022e30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80230da:	2900      	cmp	r1, #0
 80230dc:	f43f af55 	beq.w	8022f8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80230e0:	4453      	add	r3, sl
 80230e2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80230e6:	07db      	lsls	r3, r3, #31
 80230e8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80230ec:	bf54      	ite	pl
 80230ee:	f00c 030f 	andpl.w	r3, ip, #15
 80230f2:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80230f6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80230fa:	b2db      	uxtb	r3, r3
 80230fc:	930c      	str	r3, [sp, #48]	; 0x30
 80230fe:	e744      	b.n	8022f8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023100:	f889 3000 	strb.w	r3, [r9]
 8023104:	f889 1001 	strb.w	r1, [r9, #1]
 8023108:	f889 c002 	strb.w	ip, [r9, #2]
 802310c:	e792      	b.n	8023034 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802310e:	1c42      	adds	r2, r0, #1
 8023110:	d190      	bne.n	8023034 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023112:	9a07      	ldr	r2, [sp, #28]
 8023114:	4282      	cmp	r2, r0
 8023116:	dd8d      	ble.n	8023034 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023118:	1c5a      	adds	r2, r3, #1
 802311a:	db8b      	blt.n	8023034 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802311c:	9a08      	ldr	r2, [sp, #32]
 802311e:	429a      	cmp	r2, r3
 8023120:	dd88      	ble.n	8023034 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023124:	9105      	str	r1, [sp, #20]
 8023126:	4649      	mov	r1, r9
 8023128:	9002      	str	r0, [sp, #8]
 802312a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802312c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023130:	9b08      	ldr	r3, [sp, #32]
 8023132:	463a      	mov	r2, r7
 8023134:	9301      	str	r3, [sp, #4]
 8023136:	9b07      	ldr	r3, [sp, #28]
 8023138:	9300      	str	r3, [sp, #0]
 802313a:	4653      	mov	r3, sl
 802313c:	f7ff fd64 	bl	8022c08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023140:	e778      	b.n	8023034 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023142:	142a      	asrs	r2, r5, #16
 8023144:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023148:	1433      	asrs	r3, r6, #16
 802314a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802314e:	fb0a 2303 	mla	r3, sl, r3, r2
 8023152:	085a      	lsrs	r2, r3, #1
 8023154:	07d9      	lsls	r1, r3, #31
 8023156:	5cba      	ldrb	r2, [r7, r2]
 8023158:	bf54      	ite	pl
 802315a:	f002 020f 	andpl.w	r2, r2, #15
 802315e:	1112      	asrmi	r2, r2, #4
 8023160:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023164:	b2d2      	uxtb	r2, r2
 8023166:	2800      	cmp	r0, #0
 8023168:	f000 808a 	beq.w	8023280 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 802316c:	f103 0b01 	add.w	fp, r3, #1
 8023170:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8023174:	f01b 0f01 	tst.w	fp, #1
 8023178:	5c79      	ldrb	r1, [r7, r1]
 802317a:	bf0c      	ite	eq
 802317c:	f001 010f 	andeq.w	r1, r1, #15
 8023180:	1109      	asrne	r1, r1, #4
 8023182:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023186:	b2c9      	uxtb	r1, r1
 8023188:	9111      	str	r1, [sp, #68]	; 0x44
 802318a:	f1bc 0f00 	cmp.w	ip, #0
 802318e:	d019      	beq.n	80231c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023190:	4453      	add	r3, sl
 8023192:	0859      	lsrs	r1, r3, #1
 8023194:	f013 0f01 	tst.w	r3, #1
 8023198:	f103 0301 	add.w	r3, r3, #1
 802319c:	5c79      	ldrb	r1, [r7, r1]
 802319e:	bf0c      	ite	eq
 80231a0:	f001 010f 	andeq.w	r1, r1, #15
 80231a4:	1109      	asrne	r1, r1, #4
 80231a6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231aa:	b2c9      	uxtb	r1, r1
 80231ac:	910d      	str	r1, [sp, #52]	; 0x34
 80231ae:	0859      	lsrs	r1, r3, #1
 80231b0:	07db      	lsls	r3, r3, #31
 80231b2:	5c79      	ldrb	r1, [r7, r1]
 80231b4:	bf54      	ite	pl
 80231b6:	f001 010f 	andpl.w	r1, r1, #15
 80231ba:	1109      	asrmi	r1, r1, #4
 80231bc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231c0:	b2c9      	uxtb	r1, r1
 80231c2:	9112      	str	r1, [sp, #72]	; 0x48
 80231c4:	b280      	uxth	r0, r0
 80231c6:	fa1f fc8c 	uxth.w	ip, ip
 80231ca:	fb00 f30c 	mul.w	r3, r0, ip
 80231ce:	0100      	lsls	r0, r0, #4
 80231d0:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80231d4:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80231d8:	1ac0      	subs	r0, r0, r3
 80231da:	fa1f fc8c 	uxth.w	ip, ip
 80231de:	b280      	uxth	r0, r0
 80231e0:	eba1 010c 	sub.w	r1, r1, ip
 80231e4:	fa1f fb81 	uxth.w	fp, r1
 80231e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80231ea:	4348      	muls	r0, r1
 80231ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80231ee:	fb02 020b 	mla	r2, r2, fp, r0
 80231f2:	fb0c 2c01 	mla	ip, ip, r1, r2
 80231f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80231f8:	fb03 c302 	mla	r3, r3, r2, ip
 80231fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023200:	b3ab      	cbz	r3, 802326e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023202:	4a2d      	ldr	r2, [pc, #180]	; (80232b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023204:	2bff      	cmp	r3, #255	; 0xff
 8023206:	6811      	ldr	r1, [r2, #0]
 8023208:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 802320c:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8023210:	b2c9      	uxtb	r1, r1
 8023212:	d045      	beq.n	80232a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8023214:	b298      	uxth	r0, r3
 8023216:	43db      	mvns	r3, r3
 8023218:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 802321c:	fb11 f100 	smulbb	r1, r1, r0
 8023220:	b2db      	uxtb	r3, r3
 8023222:	fb1c fc00 	smulbb	ip, ip, r0
 8023226:	fb02 1103 	mla	r1, r2, r3, r1
 802322a:	fb1b f000 	smulbb	r0, fp, r0
 802322e:	b289      	uxth	r1, r1
 8023230:	1c4a      	adds	r2, r1, #1
 8023232:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023236:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802323a:	fb02 cc03 	mla	ip, r2, r3, ip
 802323e:	1209      	asrs	r1, r1, #8
 8023240:	fa1f fc8c 	uxth.w	ip, ip
 8023244:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023248:	f10c 0201 	add.w	r2, ip, #1
 802324c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023250:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8023254:	fb02 0303 	mla	r3, r2, r3, r0
 8023258:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802325c:	b29b      	uxth	r3, r3
 802325e:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023262:	1c5a      	adds	r2, r3, #1
 8023264:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023268:	121b      	asrs	r3, r3, #8
 802326a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 802326e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023270:	f10e 0e03 	add.w	lr, lr, #3
 8023274:	f109 39ff 	add.w	r9, r9, #4294967295
 8023278:	441d      	add	r5, r3
 802327a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802327c:	441e      	add	r6, r3
 802327e:	e607      	b.n	8022e90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8023280:	f1bc 0f00 	cmp.w	ip, #0
 8023284:	d09e      	beq.n	80231c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023286:	4453      	add	r3, sl
 8023288:	0859      	lsrs	r1, r3, #1
 802328a:	07db      	lsls	r3, r3, #31
 802328c:	5c79      	ldrb	r1, [r7, r1]
 802328e:	bf54      	ite	pl
 8023290:	f001 010f 	andpl.w	r1, r1, #15
 8023294:	1109      	asrmi	r1, r1, #4
 8023296:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802329a:	b2c9      	uxtb	r1, r1
 802329c:	910d      	str	r1, [sp, #52]	; 0x34
 802329e:	e791      	b.n	80231c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80232a0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80232a4:	f80e cc02 	strb.w	ip, [lr, #-2]
 80232a8:	f80e bc01 	strb.w	fp, [lr, #-1]
 80232ac:	e7df      	b.n	802326e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80232ae:	b015      	add	sp, #84	; 0x54
 80232b0:	ecbd 8b08 	vpop	{d8-d11}
 80232b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232b8:	2000bcf0 	.word	0x2000bcf0

080232bc <CRC_Lock>:
 80232bc:	4a1d      	ldr	r2, [pc, #116]	; (8023334 <CRC_Lock+0x78>)
 80232be:	b530      	push	{r4, r5, lr}
 80232c0:	6813      	ldr	r3, [r2, #0]
 80232c2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80232c6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80232ca:	f023 0301 	bic.w	r3, r3, #1
 80232ce:	6013      	str	r3, [r2, #0]
 80232d0:	4b19      	ldr	r3, [pc, #100]	; (8023338 <CRC_Lock+0x7c>)
 80232d2:	681a      	ldr	r2, [r3, #0]
 80232d4:	4022      	ands	r2, r4
 80232d6:	42aa      	cmp	r2, r5
 80232d8:	d005      	beq.n	80232e6 <CRC_Lock+0x2a>
 80232da:	681b      	ldr	r3, [r3, #0]
 80232dc:	f24c 2270 	movw	r2, #49776	; 0xc270
 80232e0:	4023      	ands	r3, r4
 80232e2:	4293      	cmp	r3, r2
 80232e4:	d11d      	bne.n	8023322 <CRC_Lock+0x66>
 80232e6:	4b15      	ldr	r3, [pc, #84]	; (802333c <CRC_Lock+0x80>)
 80232e8:	681b      	ldr	r3, [r3, #0]
 80232ea:	b9d3      	cbnz	r3, 8023322 <CRC_Lock+0x66>
 80232ec:	4a14      	ldr	r2, [pc, #80]	; (8023340 <CRC_Lock+0x84>)
 80232ee:	6813      	ldr	r3, [r2, #0]
 80232f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80232f4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80232f8:	d006      	beq.n	8023308 <CRC_Lock+0x4c>
 80232fa:	6813      	ldr	r3, [r2, #0]
 80232fc:	f240 4283 	movw	r2, #1155	; 0x483
 8023300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023304:	4293      	cmp	r3, r2
 8023306:	d10c      	bne.n	8023322 <CRC_Lock+0x66>
 8023308:	4b0e      	ldr	r3, [pc, #56]	; (8023344 <CRC_Lock+0x88>)
 802330a:	2201      	movs	r2, #1
 802330c:	601a      	str	r2, [r3, #0]
 802330e:	681a      	ldr	r2, [r3, #0]
 8023310:	2a00      	cmp	r2, #0
 8023312:	d1fc      	bne.n	802330e <CRC_Lock+0x52>
 8023314:	4b0c      	ldr	r3, [pc, #48]	; (8023348 <CRC_Lock+0x8c>)
 8023316:	6018      	str	r0, [r3, #0]
 8023318:	6818      	ldr	r0, [r3, #0]
 802331a:	1a43      	subs	r3, r0, r1
 802331c:	4258      	negs	r0, r3
 802331e:	4158      	adcs	r0, r3
 8023320:	bd30      	pop	{r4, r5, pc}
 8023322:	4b0a      	ldr	r3, [pc, #40]	; (802334c <CRC_Lock+0x90>)
 8023324:	2201      	movs	r2, #1
 8023326:	601a      	str	r2, [r3, #0]
 8023328:	681a      	ldr	r2, [r3, #0]
 802332a:	2a00      	cmp	r2, #0
 802332c:	d1fc      	bne.n	8023328 <CRC_Lock+0x6c>
 802332e:	4b08      	ldr	r3, [pc, #32]	; (8023350 <CRC_Lock+0x94>)
 8023330:	e7f1      	b.n	8023316 <CRC_Lock+0x5a>
 8023332:	bf00      	nop
 8023334:	e0002000 	.word	0xe0002000
 8023338:	e000ed00 	.word	0xe000ed00
 802333c:	e0042000 	.word	0xe0042000
 8023340:	5c001000 	.word	0x5c001000
 8023344:	58024c08 	.word	0x58024c08
 8023348:	58024c00 	.word	0x58024c00
 802334c:	40023008 	.word	0x40023008
 8023350:	40023000 	.word	0x40023000

08023354 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023354:	6101      	str	r1, [r0, #16]
 8023356:	4770      	bx	lr

08023358 <_ZN8touchgfx8Gestures4tickEv>:
 8023358:	7b83      	ldrb	r3, [r0, #14]
 802335a:	b14b      	cbz	r3, 8023370 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802335c:	8903      	ldrh	r3, [r0, #8]
 802335e:	3301      	adds	r3, #1
 8023360:	b29b      	uxth	r3, r3
 8023362:	2b07      	cmp	r3, #7
 8023364:	8103      	strh	r3, [r0, #8]
 8023366:	bf81      	itttt	hi
 8023368:	2300      	movhi	r3, #0
 802336a:	8143      	strhhi	r3, [r0, #10]
 802336c:	8183      	strhhi	r3, [r0, #12]
 802336e:	7383      	strbhi	r3, [r0, #14]
 8023370:	4770      	bx	lr
	...

08023374 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023374:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023378:	4604      	mov	r4, r0
 802337a:	4698      	mov	r8, r3
 802337c:	8880      	ldrh	r0, [r0, #4]
 802337e:	4617      	mov	r7, r2
 8023380:	4b1d      	ldr	r3, [pc, #116]	; (80233f8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8023382:	460e      	mov	r6, r1
 8023384:	f8ad 0006 	strh.w	r0, [sp, #6]
 8023388:	eba8 0000 	sub.w	r0, r8, r0
 802338c:	9300      	str	r3, [sp, #0]
 802338e:	2300      	movs	r3, #0
 8023390:	b280      	uxth	r0, r0
 8023392:	8aa2      	ldrh	r2, [r4, #20]
 8023394:	f88d 3004 	strb.w	r3, [sp, #4]
 8023398:	b203      	sxth	r3, r0
 802339a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802339e:	88e1      	ldrh	r1, [r4, #6]
 80233a0:	2b00      	cmp	r3, #0
 80233a2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80233a6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80233aa:	bfb8      	it	lt
 80233ac:	4240      	neglt	r0, r0
 80233ae:	f8ad 500c 	strh.w	r5, [sp, #12]
 80233b2:	bfb8      	it	lt
 80233b4:	b203      	sxthlt	r3, r0
 80233b6:	4293      	cmp	r3, r2
 80233b8:	dc08      	bgt.n	80233cc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80233ba:	1a69      	subs	r1, r5, r1
 80233bc:	b289      	uxth	r1, r1
 80233be:	b20b      	sxth	r3, r1
 80233c0:	2b00      	cmp	r3, #0
 80233c2:	bfbc      	itt	lt
 80233c4:	4249      	neglt	r1, r1
 80233c6:	b20b      	sxthlt	r3, r1
 80233c8:	429a      	cmp	r2, r3
 80233ca:	da13      	bge.n	80233f4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80233cc:	6920      	ldr	r0, [r4, #16]
 80233ce:	4669      	mov	r1, sp
 80233d0:	eba8 0606 	sub.w	r6, r8, r6
 80233d4:	1bef      	subs	r7, r5, r7
 80233d6:	6803      	ldr	r3, [r0, #0]
 80233d8:	685b      	ldr	r3, [r3, #4]
 80233da:	4798      	blx	r3
 80233dc:	2300      	movs	r3, #0
 80233de:	2001      	movs	r0, #1
 80233e0:	8166      	strh	r6, [r4, #10]
 80233e2:	8123      	strh	r3, [r4, #8]
 80233e4:	81a7      	strh	r7, [r4, #12]
 80233e6:	f8a4 8004 	strh.w	r8, [r4, #4]
 80233ea:	80e5      	strh	r5, [r4, #6]
 80233ec:	73a0      	strb	r0, [r4, #14]
 80233ee:	b004      	add	sp, #16
 80233f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80233f4:	2000      	movs	r0, #0
 80233f6:	e7fa      	b.n	80233ee <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80233f8:	08028884 	.word	0x08028884

080233fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80233fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80233fe:	461e      	mov	r6, r3
 8023400:	1e4b      	subs	r3, r1, #1
 8023402:	b085      	sub	sp, #20
 8023404:	4604      	mov	r4, r0
 8023406:	2b01      	cmp	r3, #1
 8023408:	460d      	mov	r5, r1
 802340a:	4617      	mov	r7, r2
 802340c:	d84b      	bhi.n	80234a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802340e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023412:	1cd3      	adds	r3, r2, #3
 8023414:	b29b      	uxth	r3, r3
 8023416:	2b06      	cmp	r3, #6
 8023418:	d916      	bls.n	8023448 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802341a:	f8df c098 	ldr.w	ip, [pc, #152]	; 80234b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 802341e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023422:	f8cd c004 	str.w	ip, [sp, #4]
 8023426:	f04f 0c00 	mov.w	ip, #0
 802342a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802342e:	6900      	ldr	r0, [r0, #16]
 8023430:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023434:	a901      	add	r1, sp, #4
 8023436:	f88d c008 	strb.w	ip, [sp, #8]
 802343a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802343e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023442:	6803      	ldr	r3, [r0, #0]
 8023444:	689b      	ldr	r3, [r3, #8]
 8023446:	4798      	blx	r3
 8023448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802344c:	1cd3      	adds	r3, r2, #3
 802344e:	b29b      	uxth	r3, r3
 8023450:	2b06      	cmp	r3, #6
 8023452:	d916      	bls.n	8023482 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023454:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80234b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023458:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802345c:	f8cd c004 	str.w	ip, [sp, #4]
 8023460:	f04f 0c01 	mov.w	ip, #1
 8023464:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023468:	6920      	ldr	r0, [r4, #16]
 802346a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802346e:	a901      	add	r1, sp, #4
 8023470:	f88d c008 	strb.w	ip, [sp, #8]
 8023474:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023478:	f8ad 300e 	strh.w	r3, [sp, #14]
 802347c:	6803      	ldr	r3, [r0, #0]
 802347e:	689b      	ldr	r3, [r3, #8]
 8023480:	4798      	blx	r3
 8023482:	4b0b      	ldr	r3, [pc, #44]	; (80234b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8023484:	a901      	add	r1, sp, #4
 8023486:	6920      	ldr	r0, [r4, #16]
 8023488:	9301      	str	r3, [sp, #4]
 802348a:	2300      	movs	r3, #0
 802348c:	f88d 5008 	strb.w	r5, [sp, #8]
 8023490:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023494:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023498:	f8ad 300e 	strh.w	r3, [sp, #14]
 802349c:	6803      	ldr	r3, [r0, #0]
 802349e:	681b      	ldr	r3, [r3, #0]
 80234a0:	4798      	blx	r3
 80234a2:	b005      	add	sp, #20
 80234a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234a6:	2900      	cmp	r1, #0
 80234a8:	d1eb      	bne.n	8023482 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80234aa:	80a2      	strh	r2, [r4, #4]
 80234ac:	80c6      	strh	r6, [r0, #6]
 80234ae:	e7e8      	b.n	8023482 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80234b0:	08028870 	.word	0x08028870
 80234b4:	08028898 	.word	0x08028898

080234b8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 80234b8:	10c9      	asrs	r1, r1, #3
 80234ba:	2900      	cmp	r1, #0
 80234bc:	bfb8      	it	lt
 80234be:	4249      	neglt	r1, r1
 80234c0:	2801      	cmp	r0, #1
 80234c2:	d108      	bne.n	80234d6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 80234c4:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80234c8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80234cc:	4601      	mov	r1, r0
 80234ce:	dd02      	ble.n	80234d6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 80234d0:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80234d4:	4770      	bx	lr
 80234d6:	29ff      	cmp	r1, #255	; 0xff
 80234d8:	bfa8      	it	ge
 80234da:	21ff      	movge	r1, #255	; 0xff
 80234dc:	4608      	mov	r0, r1
 80234de:	4770      	bx	lr

080234e0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 80234e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234e4:	688c      	ldr	r4, [r1, #8]
 80234e6:	b087      	sub	sp, #28
 80234e8:	4607      	mov	r7, r0
 80234ea:	2c00      	cmp	r4, #0
 80234ec:	db2b      	blt.n	8023546 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80234ee:	6803      	ldr	r3, [r0, #0]
 80234f0:	68da      	ldr	r2, [r3, #12]
 80234f2:	42a2      	cmp	r2, r4
 80234f4:	dd27      	ble.n	8023546 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80234f6:	681a      	ldr	r2, [r3, #0]
 80234f8:	691e      	ldr	r6, [r3, #16]
 80234fa:	68cd      	ldr	r5, [r1, #12]
 80234fc:	fb06 2604 	mla	r6, r6, r4, r2
 8023500:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8023504:	698a      	ldr	r2, [r1, #24]
 8023506:	f893 a004 	ldrb.w	sl, [r3, #4]
 802350a:	f8d1 8020 	ldr.w	r8, [r1, #32]
 802350e:	9205      	str	r2, [sp, #20]
 8023510:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8023514:	9b05      	ldr	r3, [sp, #20]
 8023516:	6839      	ldr	r1, [r7, #0]
 8023518:	eb03 0c02 	add.w	ip, r3, r2
 802351c:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8023520:	6889      	ldr	r1, [r1, #8]
 8023522:	1898      	adds	r0, r3, r2
 8023524:	4288      	cmp	r0, r1
 8023526:	db02      	blt.n	802352e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8023528:	1a8b      	subs	r3, r1, r2
 802352a:	2b00      	cmp	r3, #0
 802352c:	dd09      	ble.n	8023542 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 802352e:	6878      	ldr	r0, [r7, #4]
 8023530:	6801      	ldr	r1, [r0, #0]
 8023532:	9400      	str	r4, [sp, #0]
 8023534:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8023538:	4653      	mov	r3, sl
 802353a:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802353e:	4631      	mov	r1, r6
 8023540:	47d8      	blx	fp
 8023542:	3d01      	subs	r5, #1
 8023544:	d1e4      	bne.n	8023510 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8023546:	b007      	add	sp, #28
 8023548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802354c <_ZN8touchgfx10Rasterizer6lineToEii>:
 802354c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8023550:	b90b      	cbnz	r3, 8023556 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8023552:	f001 b974 	b.w	802483e <_ZN8touchgfx7Outline6lineToEii>
 8023556:	4770      	bx	lr

08023558 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8023558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802355c:	4604      	mov	r4, r0
 802355e:	2600      	movs	r6, #0
 8023560:	4b8e      	ldr	r3, [pc, #568]	; (802379c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8023562:	f100 0518 	add.w	r5, r0, #24
 8023566:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 802356a:	b086      	sub	sp, #24
 802356c:	4690      	mov	r8, r2
 802356e:	e9c0 3100 	strd	r3, r1, [r0]
 8023572:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8023576:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802357a:	4628      	mov	r0, r5
 802357c:	f001 fb75 	bl	8024c6a <_ZN8touchgfx15RenderingBufferC1Ev>
 8023580:	4638      	mov	r0, r7
 8023582:	f000 fb45 	bl	8023c10 <_ZN8touchgfx7OutlineC1Ev>
 8023586:	f104 0074 	add.w	r0, r4, #116	; 0x74
 802358a:	f001 fb23 	bl	8024bd4 <_ZN8touchgfx8ScanlineC1Ev>
 802358e:	2301      	movs	r3, #1
 8023590:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8023594:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8023598:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802359c:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 80235a0:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 80235a4:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 80235a8:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 80235ac:	f7f4 fbe6 	bl	8017d7c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80235b0:	b928      	cbnz	r0, 80235be <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 80235b2:	4b7b      	ldr	r3, [pc, #492]	; (80237a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80235b4:	2118      	movs	r1, #24
 80235b6:	4a7b      	ldr	r2, [pc, #492]	; (80237a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80235b8:	487b      	ldr	r0, [pc, #492]	; (80237a8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80235ba:	f001 fb99 	bl	8024cf0 <__assert_func>
 80235be:	f9b8 2000 	ldrsh.w	r2, [r8]
 80235c2:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80235c6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80235ca:	4410      	add	r0, r2
 80235cc:	9602      	str	r6, [sp, #8]
 80235ce:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80235d2:	b280      	uxth	r0, r0
 80235d4:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80235d8:	fa0f fa80 	sxth.w	sl, r0
 80235dc:	f1ba 0f00 	cmp.w	sl, #0
 80235e0:	dd70      	ble.n	80236c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80235e2:	4591      	cmp	r9, r2
 80235e4:	dd6e      	ble.n	80236c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80235e6:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80235ea:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80235ee:	440b      	add	r3, r1
 80235f0:	b29b      	uxth	r3, r3
 80235f2:	b21e      	sxth	r6, r3
 80235f4:	2e00      	cmp	r6, #0
 80235f6:	dd65      	ble.n	80236c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80235f8:	458e      	cmp	lr, r1
 80235fa:	dd63      	ble.n	80236c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80235fc:	45d1      	cmp	r9, sl
 80235fe:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8023602:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8023606:	bfb8      	it	lt
 8023608:	fa1f f089 	uxthlt.w	r0, r9
 802360c:	45b6      	cmp	lr, r6
 802360e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8023612:	bfb8      	it	lt
 8023614:	fa1f f38e 	uxthlt.w	r3, lr
 8023618:	1a80      	subs	r0, r0, r2
 802361a:	f8ad 100a 	strh.w	r1, [sp, #10]
 802361e:	1a5b      	subs	r3, r3, r1
 8023620:	f8ad 000c 	strh.w	r0, [sp, #12]
 8023624:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023628:	f10d 0808 	add.w	r8, sp, #8
 802362c:	ae04      	add	r6, sp, #16
 802362e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023632:	e886 0003 	stmia.w	r6, {r0, r1}
 8023636:	f8dc 3000 	ldr.w	r3, [ip]
 802363a:	4660      	mov	r0, ip
 802363c:	4631      	mov	r1, r6
 802363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023640:	4798      	blx	r3
 8023642:	6861      	ldr	r1, [r4, #4]
 8023644:	4640      	mov	r0, r8
 8023646:	3104      	adds	r1, #4
 8023648:	f7f5 fa06 	bl	8018a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802364c:	4630      	mov	r0, r6
 802364e:	f7f5 fa1b 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023652:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8023656:	f7f4 fb21 	bl	8017c9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 802365a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 802365e:	4638      	mov	r0, r7
 8023660:	f000 fab2 	bl	8023bc8 <_ZN8touchgfx7Outline5resetEv>
 8023664:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8023668:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802366c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8023670:	015b      	lsls	r3, r3, #5
 8023672:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8023676:	0152      	lsls	r2, r2, #5
 8023678:	60e3      	str	r3, [r4, #12]
 802367a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802367e:	60a2      	str	r2, [r4, #8]
 8023680:	015b      	lsls	r3, r3, #5
 8023682:	6123      	str	r3, [r4, #16]
 8023684:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8023688:	015b      	lsls	r3, r3, #5
 802368a:	6163      	str	r3, [r4, #20]
 802368c:	4b47      	ldr	r3, [pc, #284]	; (80237ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802368e:	6818      	ldr	r0, [r3, #0]
 8023690:	6803      	ldr	r3, [r0, #0]
 8023692:	6a1b      	ldr	r3, [r3, #32]
 8023694:	4798      	blx	r3
 8023696:	4606      	mov	r6, r0
 8023698:	f7ec f896 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 802369c:	6803      	ldr	r3, [r0, #0]
 802369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80236a0:	4798      	blx	r3
 80236a2:	4607      	mov	r7, r0
 80236a4:	f7ec f890 	bl	800f7c8 <_ZN8touchgfx3HAL3lcdEv>
 80236a8:	6803      	ldr	r3, [r0, #0]
 80236aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236ac:	4798      	blx	r3
 80236ae:	280c      	cmp	r0, #12
 80236b0:	d854      	bhi.n	802375c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 80236b2:	e8df f000 	tbb	[pc, r0]
 80236b6:	554b      	.short	0x554b
 80236b8:	2b6e0a66 	.word	0x2b6e0a66
 80236bc:	5f5f5f3b 	.word	0x5f5f5f3b
 80236c0:	5f5f      	.short	0x5f5f
 80236c2:	6e          	.byte	0x6e
 80236c3:	00          	.byte	0x00
 80236c4:	2300      	movs	r3, #0
 80236c6:	9303      	str	r3, [sp, #12]
 80236c8:	e7ae      	b.n	8023628 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 80236ca:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80236ce:	2108      	movs	r1, #8
 80236d0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80236d4:	fb92 f1f1 	sdiv	r1, r2, r1
 80236d8:	fb07 1303 	mla	r3, r7, r3, r1
 80236dc:	441e      	add	r6, r3
 80236de:	4253      	negs	r3, r2
 80236e0:	f002 0207 	and.w	r2, r2, #7
 80236e4:	f003 0307 	and.w	r3, r3, #7
 80236e8:	bf58      	it	pl
 80236ea:	425a      	negpl	r2, r3
 80236ec:	b2d2      	uxtb	r2, r2
 80236ee:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80236f2:	4628      	mov	r0, r5
 80236f4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80236f8:	66e1      	str	r1, [r4, #108]	; 0x6c
 80236fa:	e9cd 1700 	strd	r1, r7, [sp]
 80236fe:	4631      	mov	r1, r6
 8023700:	f001 fabb 	bl	8024c7a <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8023704:	4620      	mov	r0, r4
 8023706:	b006      	add	sp, #24
 8023708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802370c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023710:	2104      	movs	r1, #4
 8023712:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023716:	fb92 f1f1 	sdiv	r1, r2, r1
 802371a:	fb07 1303 	mla	r3, r7, r3, r1
 802371e:	441e      	add	r6, r3
 8023720:	4253      	negs	r3, r2
 8023722:	f002 0203 	and.w	r2, r2, #3
 8023726:	f003 0303 	and.w	r3, r3, #3
 802372a:	e7dd      	b.n	80236e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 802372c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023730:	2102      	movs	r1, #2
 8023732:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023736:	2a00      	cmp	r2, #0
 8023738:	fb92 f1f1 	sdiv	r1, r2, r1
 802373c:	f002 0201 	and.w	r2, r2, #1
 8023740:	fb07 1303 	mla	r3, r7, r3, r1
 8023744:	bfb8      	it	lt
 8023746:	4252      	neglt	r2, r2
 8023748:	441e      	add	r6, r3
 802374a:	e7cf      	b.n	80236ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 802374c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023750:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023754:	437b      	muls	r3, r7
 8023756:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802375a:	441e      	add	r6, r3
 802375c:	2200      	movs	r2, #0
 802375e:	e7c6      	b.n	80236ee <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8023760:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023764:	2103      	movs	r1, #3
 8023766:	fb07 f203 	mul.w	r2, r7, r3
 802376a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802376e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8023772:	e7f2      	b.n	802375a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023774:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023778:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802377c:	fb07 2303 	mla	r3, r7, r3, r2
 8023780:	e7eb      	b.n	802375a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023782:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023786:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802378a:	437b      	muls	r3, r7
 802378c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023790:	e7e3      	b.n	802375a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023792:	4b07      	ldr	r3, [pc, #28]	; (80237b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8023794:	2156      	movs	r1, #86	; 0x56
 8023796:	4a03      	ldr	r2, [pc, #12]	; (80237a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023798:	e70e      	b.n	80235b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 802379a:	bf00      	nop
 802379c:	08029f04 	.word	0x08029f04
 80237a0:	08029e4e 	.word	0x08029e4e
 80237a4:	08029f0c 	.word	0x08029f0c
 80237a8:	08029eaa 	.word	0x08029eaa
 80237ac:	2000bcc8 	.word	0x2000bcc8
 80237b0:	08029ede 	.word	0x08029ede

080237b4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80237b4:	6812      	ldr	r2, [r2, #0]
 80237b6:	2a00      	cmp	r2, #0
 80237b8:	db0b      	blt.n	80237d2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80237ba:	9800      	ldr	r0, [sp, #0]
 80237bc:	6800      	ldr	r0, [r0, #0]
 80237be:	4290      	cmp	r0, r2
 80237c0:	bfd4      	ite	le
 80237c2:	2002      	movle	r0, #2
 80237c4:	2000      	movgt	r0, #0
 80237c6:	680a      	ldr	r2, [r1, #0]
 80237c8:	2a00      	cmp	r2, #0
 80237ca:	da04      	bge.n	80237d6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80237cc:	f040 0004 	orr.w	r0, r0, #4
 80237d0:	4770      	bx	lr
 80237d2:	2001      	movs	r0, #1
 80237d4:	e7f7      	b.n	80237c6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80237d6:	681b      	ldr	r3, [r3, #0]
 80237d8:	4293      	cmp	r3, r2
 80237da:	bfd8      	it	le
 80237dc:	f040 0008 	orrle.w	r0, r0, #8
 80237e0:	4770      	bx	lr
	...

080237e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80237e4:	4b07      	ldr	r3, [pc, #28]	; (8023804 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80237e6:	b510      	push	{r4, lr}
 80237e8:	781b      	ldrb	r3, [r3, #0]
 80237ea:	2b01      	cmp	r3, #1
 80237ec:	d108      	bne.n	8023800 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80237ee:	6843      	ldr	r3, [r0, #4]
 80237f0:	6814      	ldr	r4, [r2, #0]
 80237f2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80237f6:	680b      	ldr	r3, [r1, #0]
 80237f8:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80237fc:	6013      	str	r3, [r2, #0]
 80237fe:	600c      	str	r4, [r1, #0]
 8023800:	bd10      	pop	{r4, pc}
 8023802:	bf00      	nop
 8023804:	2000bcc0 	.word	0x2000bcc0

08023808 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8023808:	b5f0      	push	{r4, r5, r6, r7, lr}
 802380a:	b085      	sub	sp, #20
 802380c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023810:	4604      	mov	r4, r0
 8023812:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023816:	b33b      	cbz	r3, 8023868 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8023818:	aa02      	add	r2, sp, #8
 802381a:	a903      	add	r1, sp, #12
 802381c:	f7ff ffe2 	bl	80237e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023820:	68a3      	ldr	r3, [r4, #8]
 8023822:	9e03      	ldr	r6, [sp, #12]
 8023824:	aa02      	add	r2, sp, #8
 8023826:	9f02      	ldr	r7, [sp, #8]
 8023828:	a903      	add	r1, sp, #12
 802382a:	1af6      	subs	r6, r6, r3
 802382c:	68e3      	ldr	r3, [r4, #12]
 802382e:	4620      	mov	r0, r4
 8023830:	1aff      	subs	r7, r7, r3
 8023832:	f104 0314 	add.w	r3, r4, #20
 8023836:	9603      	str	r6, [sp, #12]
 8023838:	9300      	str	r3, [sp, #0]
 802383a:	f104 0310 	add.w	r3, r4, #16
 802383e:	9702      	str	r7, [sp, #8]
 8023840:	f7ff ffb8 	bl	80237b4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8023844:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8023848:	4605      	mov	r5, r0
 802384a:	b97b      	cbnz	r3, 802386c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 802384c:	463a      	mov	r2, r7
 802384e:	4631      	mov	r1, r6
 8023850:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023854:	f7ff fe7a 	bl	802354c <_ZN8touchgfx10Rasterizer6lineToEii>
 8023858:	9b03      	ldr	r3, [sp, #12]
 802385a:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 802385e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8023862:	9b02      	ldr	r3, [sp, #8]
 8023864:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8023868:	b005      	add	sp, #20
 802386a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802386c:	b110      	cbz	r0, 8023874 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802386e:	ea13 0200 	ands.w	r2, r3, r0
 8023872:	d11c      	bne.n	80238ae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8023874:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8023878:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 802387c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8023880:	b188      	cbz	r0, 80238a6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8023882:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8023886:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802388a:	b913      	cbnz	r3, 8023892 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802388c:	4630      	mov	r0, r6
 802388e:	f001 f806 	bl	802489e <_ZN8touchgfx7Outline6moveToEii>
 8023892:	2300      	movs	r3, #0
 8023894:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023898:	2301      	movs	r3, #1
 802389a:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802389e:	4630      	mov	r0, r6
 80238a0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80238a4:	e7d6      	b.n	8023854 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80238a6:	4630      	mov	r0, r6
 80238a8:	f7ff fe50 	bl	802354c <_ZN8touchgfx10Rasterizer6lineToEii>
 80238ac:	e7f7      	b.n	802389e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80238ae:	4615      	mov	r5, r2
 80238b0:	e7d2      	b.n	8023858 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080238b2 <_ZN8touchgfx6Canvas5closeEv>:
 80238b2:	b538      	push	{r3, r4, r5, lr}
 80238b4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80238b8:	4604      	mov	r4, r0
 80238ba:	b993      	cbnz	r3, 80238e2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80238bc:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80238c0:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80238c4:	4213      	tst	r3, r2
 80238c6:	d10c      	bne.n	80238e2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80238c8:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 80238cc:	b123      	cbz	r3, 80238d8 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80238ce:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 80238d2:	4628      	mov	r0, r5
 80238d4:	f7ff fe3a 	bl	802354c <_ZN8touchgfx10Rasterizer6lineToEii>
 80238d8:	4628      	mov	r0, r5
 80238da:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80238de:	f7ff fe35 	bl	802354c <_ZN8touchgfx10Rasterizer6lineToEii>
 80238e2:	2300      	movs	r3, #0
 80238e4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80238e8:	bd38      	pop	{r3, r4, r5, pc}

080238ea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80238ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238ec:	b085      	sub	sp, #20
 80238ee:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80238f2:	4604      	mov	r4, r0
 80238f4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80238f8:	b353      	cbz	r3, 8023950 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80238fa:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80238fe:	b90b      	cbnz	r3, 8023904 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8023900:	f7ff ffd7 	bl	80238b2 <_ZN8touchgfx6Canvas5closeEv>
 8023904:	aa02      	add	r2, sp, #8
 8023906:	a903      	add	r1, sp, #12
 8023908:	4620      	mov	r0, r4
 802390a:	f7ff ff6b 	bl	80237e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802390e:	68a3      	ldr	r3, [r4, #8]
 8023910:	9d03      	ldr	r5, [sp, #12]
 8023912:	aa02      	add	r2, sp, #8
 8023914:	9e02      	ldr	r6, [sp, #8]
 8023916:	a903      	add	r1, sp, #12
 8023918:	1aed      	subs	r5, r5, r3
 802391a:	68e3      	ldr	r3, [r4, #12]
 802391c:	4620      	mov	r0, r4
 802391e:	1af6      	subs	r6, r6, r3
 8023920:	f104 0314 	add.w	r3, r4, #20
 8023924:	9503      	str	r5, [sp, #12]
 8023926:	9300      	str	r3, [sp, #0]
 8023928:	f104 0310 	add.w	r3, r4, #16
 802392c:	9602      	str	r6, [sp, #8]
 802392e:	f7ff ff41 	bl	80237b4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8023932:	4607      	mov	r7, r0
 8023934:	b170      	cbz	r0, 8023954 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8023936:	2301      	movs	r3, #1
 8023938:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802393c:	9a03      	ldr	r2, [sp, #12]
 802393e:	9b02      	ldr	r3, [sp, #8]
 8023940:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8023944:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8023948:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 802394c:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8023950:	b005      	add	sp, #20
 8023952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023954:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8023958:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 802395c:	b92b      	cbnz	r3, 802396a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802395e:	4632      	mov	r2, r6
 8023960:	4629      	mov	r1, r5
 8023962:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023966:	f000 ff9a 	bl	802489e <_ZN8touchgfx7Outline6moveToEii>
 802396a:	2300      	movs	r3, #0
 802396c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023970:	2301      	movs	r3, #1
 8023972:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8023976:	e7e1      	b.n	802393c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08023978 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8023978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802397c:	4604      	mov	r4, r0
 802397e:	b087      	sub	sp, #28
 8023980:	9105      	str	r1, [sp, #20]
 8023982:	f001 f8d0 	bl	8024b26 <_ZN8touchgfx7Outline8getCellsEv>
 8023986:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802398a:	4605      	mov	r5, r0
 802398c:	f1b9 0f00 	cmp.w	r9, #0
 8023990:	d103      	bne.n	802399a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8023992:	2001      	movs	r0, #1
 8023994:	b007      	add	sp, #28
 8023996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802399a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802399e:	2e00      	cmp	r6, #0
 80239a0:	d139      	bne.n	8023a16 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80239a2:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80239a6:	f105 0708 	add.w	r7, r5, #8
 80239aa:	4640      	mov	r0, r8
 80239ac:	f001 f8fd 	bl	8024baa <_ZN8touchgfx8Scanline5resetEv>
 80239b0:	f109 33ff 	add.w	r3, r9, #4294967295
 80239b4:	9303      	str	r3, [sp, #12]
 80239b6:	f9b5 b000 	ldrsh.w	fp, [r5]
 80239ba:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80239be:	46da      	mov	sl, fp
 80239c0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80239c4:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80239c8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80239cc:	9b03      	ldr	r3, [sp, #12]
 80239ce:	4416      	add	r6, r2
 80239d0:	9504      	str	r5, [sp, #16]
 80239d2:	463d      	mov	r5, r7
 80239d4:	3b01      	subs	r3, #1
 80239d6:	9303      	str	r3, [sp, #12]
 80239d8:	3301      	adds	r3, #1
 80239da:	d01e      	beq.n	8023a1a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80239dc:	3708      	adds	r7, #8
 80239de:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80239e2:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80239e6:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80239ea:	4290      	cmp	r0, r2
 80239ec:	d11e      	bne.n	8023a2c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80239ee:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80239f2:	4411      	add	r1, r2
 80239f4:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80239f8:	e7e8      	b.n	80239cc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80239fa:	1c91      	adds	r1, r2, #2
 80239fc:	f04f 0301 	mov.w	r3, #1
 8023a00:	65e1      	str	r1, [r4, #92]	; 0x5c
 8023a02:	8053      	strh	r3, [r2, #2]
 8023a04:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8023a06:	1c91      	adds	r1, r2, #2
 8023a08:	65a1      	str	r1, [r4, #88]	; 0x58
 8023a0a:	f8a2 b002 	strh.w	fp, [r2, #2]
 8023a0e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023a10:	3201      	adds	r2, #1
 8023a12:	6562      	str	r2, [r4, #84]	; 0x54
 8023a14:	e03a      	b.n	8023a8c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8023a16:	2000      	movs	r0, #0
 8023a18:	e7bc      	b.n	8023994 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8023a1a:	b951      	cbnz	r1, 8023a32 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8023a1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023a1e:	2b00      	cmp	r3, #0
 8023a20:	d0b7      	beq.n	8023992 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023a22:	4641      	mov	r1, r8
 8023a24:	9805      	ldr	r0, [sp, #20]
 8023a26:	f7ff fd5b 	bl	80234e0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023a2a:	e7b2      	b.n	8023992 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023a2c:	2900      	cmp	r1, #0
 8023a2e:	d035      	beq.n	8023a9c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8023a30:	9504      	str	r5, [sp, #16]
 8023a32:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8023a36:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023a3a:	f7ff fd3d 	bl	80234b8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8023a3e:	4605      	mov	r5, r0
 8023a40:	b330      	cbz	r0, 8023a90 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023a42:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023a44:	b182      	cbz	r2, 8023a68 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023a46:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8023a48:	454a      	cmp	r2, r9
 8023a4a:	d00d      	beq.n	8023a68 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023a4c:	4641      	mov	r1, r8
 8023a4e:	9805      	ldr	r0, [sp, #20]
 8023a50:	f7ff fd46 	bl	80234e0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023a54:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023a58:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8023a5a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023a5e:	65e2      	str	r2, [r4, #92]	; 0x5c
 8023a60:	2300      	movs	r3, #0
 8023a62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023a64:	6563      	str	r3, [r4, #84]	; 0x54
 8023a66:	65a2      	str	r2, [r4, #88]	; 0x58
 8023a68:	f1bb 0f00 	cmp.w	fp, #0
 8023a6c:	db10      	blt.n	8023a90 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023a6e:	f7f4 f993 	bl	8017d98 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023a72:	4583      	cmp	fp, r0
 8023a74:	d20c      	bcs.n	8023a90 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023a76:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8023a78:	f802 500b 	strb.w	r5, [r2, fp]
 8023a7c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8023a7e:	3201      	adds	r2, #1
 8023a80:	455a      	cmp	r2, fp
 8023a82:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8023a84:	d1b9      	bne.n	80239fa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8023a86:	8811      	ldrh	r1, [r2, #0]
 8023a88:	3101      	adds	r1, #1
 8023a8a:	8011      	strh	r1, [r2, #0]
 8023a8c:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8023a90:	9b03      	ldr	r3, [sp, #12]
 8023a92:	3301      	adds	r3, #1
 8023a94:	d0c2      	beq.n	8023a1c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8023a96:	f10b 0a01 	add.w	sl, fp, #1
 8023a9a:	9d04      	ldr	r5, [sp, #16]
 8023a9c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023aa0:	4553      	cmp	r3, sl
 8023aa2:	dd88      	ble.n	80239b6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023aa4:	01b1      	lsls	r1, r6, #6
 8023aa6:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023aaa:	f7ff fd05 	bl	80234b8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8023aae:	4683      	mov	fp, r0
 8023ab0:	2800      	cmp	r0, #0
 8023ab2:	d080      	beq.n	80239b6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023ab4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023ab6:	b183      	cbz	r3, 8023ada <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023ab8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8023aba:	454b      	cmp	r3, r9
 8023abc:	d00d      	beq.n	8023ada <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023abe:	4641      	mov	r1, r8
 8023ac0:	9805      	ldr	r0, [sp, #20]
 8023ac2:	f7ff fd0d 	bl	80234e0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023ac6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023aca:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023ace:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8023ad0:	65e3      	str	r3, [r4, #92]	; 0x5c
 8023ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023ad4:	65a3      	str	r3, [r4, #88]	; 0x58
 8023ad6:	2300      	movs	r3, #0
 8023ad8:	6563      	str	r3, [r4, #84]	; 0x54
 8023ada:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023ade:	464a      	mov	r2, r9
 8023ae0:	f8cd b000 	str.w	fp, [sp]
 8023ae4:	4651      	mov	r1, sl
 8023ae6:	eba3 030a 	sub.w	r3, r3, sl
 8023aea:	4640      	mov	r0, r8
 8023aec:	f001 f884 	bl	8024bf8 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8023af0:	e761      	b.n	80239b6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08023af2 <_ZN8touchgfx6Canvas6renderEv>:
 8023af2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023af4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023af8:	4604      	mov	r4, r0
 8023afa:	b913      	cbnz	r3, 8023b02 <_ZN8touchgfx6Canvas6renderEv+0x10>
 8023afc:	2001      	movs	r0, #1
 8023afe:	b003      	add	sp, #12
 8023b00:	bd30      	pop	{r4, r5, pc}
 8023b02:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8023b06:	2b00      	cmp	r3, #0
 8023b08:	d131      	bne.n	8023b6e <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8023b0a:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8023b0e:	2b00      	cmp	r3, #0
 8023b10:	d0f4      	beq.n	8023afc <_ZN8touchgfx6Canvas6renderEv+0xa>
 8023b12:	6840      	ldr	r0, [r0, #4]
 8023b14:	6803      	ldr	r3, [r0, #0]
 8023b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023b18:	4798      	blx	r3
 8023b1a:	2800      	cmp	r0, #0
 8023b1c:	d0ee      	beq.n	8023afc <_ZN8touchgfx6Canvas6renderEv+0xa>
 8023b1e:	4620      	mov	r0, r4
 8023b20:	f7ff fec7 	bl	80238b2 <_ZN8touchgfx6Canvas5closeEv>
 8023b24:	6860      	ldr	r0, [r4, #4]
 8023b26:	6803      	ldr	r3, [r0, #0]
 8023b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023b2a:	4798      	blx	r3
 8023b2c:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8023b30:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8023b34:	f7f3 f8c9 	bl	8016cca <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8023b38:	6860      	ldr	r0, [r4, #4]
 8023b3a:	6803      	ldr	r3, [r0, #0]
 8023b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023b3e:	4798      	blx	r3
 8023b40:	4605      	mov	r5, r0
 8023b42:	6860      	ldr	r0, [r4, #4]
 8023b44:	6803      	ldr	r3, [r0, #0]
 8023b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023b48:	4798      	blx	r3
 8023b4a:	4601      	mov	r1, r0
 8023b4c:	4628      	mov	r0, r5
 8023b4e:	f7f3 f8bf 	bl	8016cd0 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8023b52:	6860      	ldr	r0, [r4, #4]
 8023b54:	6803      	ldr	r3, [r0, #0]
 8023b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023b58:	4798      	blx	r3
 8023b5a:	f104 0318 	add.w	r3, r4, #24
 8023b5e:	4669      	mov	r1, sp
 8023b60:	e9cd 3000 	strd	r3, r0, [sp]
 8023b64:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023b68:	f7ff ff06 	bl	8023978 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8023b6c:	e7c7      	b.n	8023afe <_ZN8touchgfx6Canvas6renderEv+0xc>
 8023b6e:	2000      	movs	r0, #0
 8023b70:	e7c5      	b.n	8023afe <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08023b74 <_ZN8touchgfx6CanvasD1Ev>:
 8023b74:	b538      	push	{r3, r4, r5, lr}
 8023b76:	4605      	mov	r5, r0
 8023b78:	4b08      	ldr	r3, [pc, #32]	; (8023b9c <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8023b7a:	4604      	mov	r4, r0
 8023b7c:	f845 3b2c 	str.w	r3, [r5], #44
 8023b80:	4b07      	ldr	r3, [pc, #28]	; (8023ba0 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8023b82:	6818      	ldr	r0, [r3, #0]
 8023b84:	6803      	ldr	r3, [r0, #0]
 8023b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b88:	4798      	blx	r3
 8023b8a:	4628      	mov	r0, r5
 8023b8c:	f000 f814 	bl	8023bb8 <_ZN8touchgfx7OutlineD1Ev>
 8023b90:	f104 0018 	add.w	r0, r4, #24
 8023b94:	f001 f870 	bl	8024c78 <_ZN8touchgfx15RenderingBufferD1Ev>
 8023b98:	4620      	mov	r0, r4
 8023b9a:	bd38      	pop	{r3, r4, r5, pc}
 8023b9c:	08029f04 	.word	0x08029f04
 8023ba0:	2000bcc8 	.word	0x2000bcc8

08023ba4 <_ZN8touchgfx6CanvasD0Ev>:
 8023ba4:	b510      	push	{r4, lr}
 8023ba6:	4604      	mov	r4, r0
 8023ba8:	f7ff ffe4 	bl	8023b74 <_ZN8touchgfx6CanvasD1Ev>
 8023bac:	21b8      	movs	r1, #184	; 0xb8
 8023bae:	4620      	mov	r0, r4
 8023bb0:	f001 f873 	bl	8024c9a <_ZdlPvj>
 8023bb4:	4620      	mov	r0, r4
 8023bb6:	bd10      	pop	{r4, pc}

08023bb8 <_ZN8touchgfx7OutlineD1Ev>:
 8023bb8:	4770      	bx	lr

08023bba <_ZN8touchgfx7OutlineD0Ev>:
 8023bba:	b510      	push	{r4, lr}
 8023bbc:	4604      	mov	r4, r0
 8023bbe:	2148      	movs	r1, #72	; 0x48
 8023bc0:	f001 f86b 	bl	8024c9a <_ZdlPvj>
 8023bc4:	4620      	mov	r0, r4
 8023bc6:	bd10      	pop	{r4, pc}

08023bc8 <_ZN8touchgfx7Outline5resetEv>:
 8023bc8:	b510      	push	{r4, lr}
 8023bca:	4604      	mov	r4, r0
 8023bcc:	f7f4 f8fc 	bl	8017dc8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8023bd0:	60e0      	str	r0, [r4, #12]
 8023bd2:	f7f4 f8ff 	bl	8017dd4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8023bd6:	68e3      	ldr	r3, [r4, #12]
 8023bd8:	2200      	movs	r2, #0
 8023bda:	08c0      	lsrs	r0, r0, #3
 8023bdc:	6123      	str	r3, [r4, #16]
 8023bde:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023be2:	6060      	str	r0, [r4, #4]
 8023be4:	82a3      	strh	r3, [r4, #20]
 8023be6:	82e3      	strh	r3, [r4, #22]
 8023be8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023bea:	60a2      	str	r2, [r4, #8]
 8023bec:	f023 0301 	bic.w	r3, r3, #1
 8023bf0:	8322      	strh	r2, [r4, #24]
 8023bf2:	8362      	strh	r2, [r4, #26]
 8023bf4:	f043 0302 	orr.w	r3, r3, #2
 8023bf8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023bfc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023bfe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023c02:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8023c06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8023c0a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8023c0e:	bd10      	pop	{r4, pc}

08023c10 <_ZN8touchgfx7OutlineC1Ev>:
 8023c10:	4b0f      	ldr	r3, [pc, #60]	; (8023c50 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8023c12:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023c16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023c1a:	b510      	push	{r4, lr}
 8023c1c:	6003      	str	r3, [r0, #0]
 8023c1e:	2300      	movs	r3, #0
 8023c20:	4604      	mov	r4, r0
 8023c22:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8023c26:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8023c2a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023c2e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8023c32:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8023c36:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8023c3a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8023c3e:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8023c42:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8023c46:	f7ff ffbf 	bl	8023bc8 <_ZN8touchgfx7Outline5resetEv>
 8023c4a:	4620      	mov	r0, r4
 8023c4c:	bd10      	pop	{r4, pc}
 8023c4e:	bf00      	nop
 8023c50:	08029f64 	.word	0x08029f64

08023c54 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8023c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c58:	b093      	sub	sp, #76	; 0x4c
 8023c5a:	4604      	mov	r4, r0
 8023c5c:	1156      	asrs	r6, r2, #5
 8023c5e:	f002 0e1f 	and.w	lr, r2, #31
 8023c62:	981c      	ldr	r0, [sp, #112]	; 0x70
 8023c64:	9305      	str	r3, [sp, #20]
 8023c66:	1143      	asrs	r3, r0, #5
 8023c68:	1145      	asrs	r5, r0, #5
 8023c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8023c6c:	f000 031f 	and.w	r3, r0, #31
 8023c70:	9303      	str	r3, [sp, #12]
 8023c72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023c74:	42b3      	cmp	r3, r6
 8023c76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023c78:	bfc8      	it	gt
 8023c7a:	6326      	strgt	r6, [r4, #48]	; 0x30
 8023c7c:	42b3      	cmp	r3, r6
 8023c7e:	bfdc      	itt	le
 8023c80:	1c73      	addle	r3, r6, #1
 8023c82:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023c84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023c86:	42ab      	cmp	r3, r5
 8023c88:	bfc8      	it	gt
 8023c8a:	462b      	movgt	r3, r5
 8023c8c:	ea4f 1560 	mov.w	r5, r0, asr #5
 8023c90:	bfc8      	it	gt
 8023c92:	6323      	strgt	r3, [r4, #48]	; 0x30
 8023c94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023c96:	42ab      	cmp	r3, r5
 8023c98:	bfd8      	it	le
 8023c9a:	462b      	movle	r3, r5
 8023c9c:	ea4f 1561 	mov.w	r5, r1, asr #5
 8023ca0:	bfdc      	itt	le
 8023ca2:	3301      	addle	r3, #1
 8023ca4:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023ca6:	9b05      	ldr	r3, [sp, #20]
 8023ca8:	eba3 0a01 	sub.w	sl, r3, r1
 8023cac:	1143      	asrs	r3, r0, #5
 8023cae:	429e      	cmp	r6, r3
 8023cb0:	f040 8119 	bne.w	8023ee6 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8023cb4:	9b05      	ldr	r3, [sp, #20]
 8023cb6:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8023cba:	9b03      	ldr	r3, [sp, #12]
 8023cbc:	459e      	cmp	lr, r3
 8023cbe:	d12c      	bne.n	8023d1a <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8023cc0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023cc4:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8023cc8:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8023ccc:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8023cd0:	4291      	cmp	r1, r2
 8023cd2:	d037      	beq.n	8023d44 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023cd4:	8b61      	ldrh	r1, [r4, #26]
 8023cd6:	8b22      	ldrh	r2, [r4, #24]
 8023cd8:	430a      	orrs	r2, r1
 8023cda:	d00b      	beq.n	8023cf4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023cdc:	2b00      	cmp	r3, #0
 8023cde:	db09      	blt.n	8023cf4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023ce0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023ce2:	429a      	cmp	r2, r3
 8023ce4:	dd06      	ble.n	8023cf4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023ce6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023cea:	429a      	cmp	r2, r3
 8023cec:	d308      	bcc.n	8023d00 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8023cee:	2301      	movs	r3, #1
 8023cf0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023cf4:	f8a4 c014 	strh.w	ip, [r4, #20]
 8023cf8:	82e6      	strh	r6, [r4, #22]
 8023cfa:	2300      	movs	r3, #0
 8023cfc:	8323      	strh	r3, [r4, #24]
 8023cfe:	e0c6      	b.n	8023e8e <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023d00:	f104 0314 	add.w	r3, r4, #20
 8023d04:	6922      	ldr	r2, [r4, #16]
 8023d06:	cb03      	ldmia	r3!, {r0, r1}
 8023d08:	6010      	str	r0, [r2, #0]
 8023d0a:	6051      	str	r1, [r2, #4]
 8023d0c:	6923      	ldr	r3, [r4, #16]
 8023d0e:	3308      	adds	r3, #8
 8023d10:	6123      	str	r3, [r4, #16]
 8023d12:	68a3      	ldr	r3, [r4, #8]
 8023d14:	3301      	adds	r3, #1
 8023d16:	60a3      	str	r3, [r4, #8]
 8023d18:	e7ec      	b.n	8023cf4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023d1a:	9b05      	ldr	r3, [sp, #20]
 8023d1c:	45ac      	cmp	ip, r5
 8023d1e:	f001 011f 	and.w	r1, r1, #31
 8023d22:	8b20      	ldrh	r0, [r4, #24]
 8023d24:	f003 031f 	and.w	r3, r3, #31
 8023d28:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8023d2c:	9304      	str	r3, [sp, #16]
 8023d2e:	9b03      	ldr	r3, [sp, #12]
 8023d30:	eba3 020e 	sub.w	r2, r3, lr
 8023d34:	d109      	bne.n	8023d4a <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8023d36:	9b04      	ldr	r3, [sp, #16]
 8023d38:	4410      	add	r0, r2
 8023d3a:	4419      	add	r1, r3
 8023d3c:	8320      	strh	r0, [r4, #24]
 8023d3e:	fb02 8201 	mla	r2, r2, r1, r8
 8023d42:	8362      	strh	r2, [r4, #26]
 8023d44:	b013      	add	sp, #76	; 0x4c
 8023d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d4a:	f1ba 0f00 	cmp.w	sl, #0
 8023d4e:	f2c0 80a0 	blt.w	8023e92 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8023d52:	f1c1 0320 	rsb	r3, r1, #32
 8023d56:	f04f 0b20 	mov.w	fp, #32
 8023d5a:	435a      	muls	r2, r3
 8023d5c:	2301      	movs	r3, #1
 8023d5e:	9302      	str	r3, [sp, #8]
 8023d60:	4459      	add	r1, fp
 8023d62:	fb92 f7fa 	sdiv	r7, r2, sl
 8023d66:	fb0a 2217 	mls	r2, sl, r7, r2
 8023d6a:	2a00      	cmp	r2, #0
 8023d6c:	bfbc      	itt	lt
 8023d6e:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023d72:	4452      	addlt	r2, sl
 8023d74:	fb07 8101 	mla	r1, r7, r1, r8
 8023d78:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8023d7c:	4438      	add	r0, r7
 8023d7e:	b20b      	sxth	r3, r1
 8023d80:	9902      	ldr	r1, [sp, #8]
 8023d82:	b200      	sxth	r0, r0
 8023d84:	9301      	str	r3, [sp, #4]
 8023d86:	8363      	strh	r3, [r4, #26]
 8023d88:	186b      	adds	r3, r5, r1
 8023d8a:	0435      	lsls	r5, r6, #16
 8023d8c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023d90:	8320      	strh	r0, [r4, #24]
 8023d92:	eb03 0905 	add.w	r9, r3, r5
 8023d96:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8023d9a:	9300      	str	r3, [sp, #0]
 8023d9c:	45c1      	cmp	r9, r8
 8023d9e:	9505      	str	r5, [sp, #20]
 8023da0:	d014      	beq.n	8023dcc <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8023da2:	9b01      	ldr	r3, [sp, #4]
 8023da4:	4303      	orrs	r3, r0
 8023da6:	d00b      	beq.n	8023dc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023da8:	2900      	cmp	r1, #0
 8023daa:	db09      	blt.n	8023dc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023dae:	428b      	cmp	r3, r1
 8023db0:	dd06      	ble.n	8023dc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023db2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023db6:	4299      	cmp	r1, r3
 8023db8:	d374      	bcc.n	8023ea4 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8023dba:	2301      	movs	r3, #1
 8023dbc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023dc0:	9b00      	ldr	r3, [sp, #0]
 8023dc2:	82e6      	strh	r6, [r4, #22]
 8023dc4:	82a3      	strh	r3, [r4, #20]
 8023dc6:	2300      	movs	r3, #0
 8023dc8:	8323      	strh	r3, [r4, #24]
 8023dca:	8363      	strh	r3, [r4, #26]
 8023dcc:	9900      	ldr	r1, [sp, #0]
 8023dce:	eb0e 0307 	add.w	r3, lr, r7
 8023dd2:	458c      	cmp	ip, r1
 8023dd4:	d04e      	beq.n	8023e74 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8023dd6:	9903      	ldr	r1, [sp, #12]
 8023dd8:	eba2 020a 	sub.w	r2, r2, sl
 8023ddc:	1ac9      	subs	r1, r1, r3
 8023dde:	9201      	str	r2, [sp, #4]
 8023de0:	440f      	add	r7, r1
 8023de2:	017f      	lsls	r7, r7, #5
 8023de4:	fb97 fefa 	sdiv	lr, r7, sl
 8023de8:	fb0a 771e 	mls	r7, sl, lr, r7
 8023dec:	2f00      	cmp	r7, #0
 8023dee:	bfbc      	itt	lt
 8023df0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8023df4:	4457      	addlt	r7, sl
 8023df6:	f10e 0101 	add.w	r1, lr, #1
 8023dfa:	9106      	str	r1, [sp, #24]
 8023dfc:	9a01      	ldr	r2, [sp, #4]
 8023dfe:	8b20      	ldrh	r0, [r4, #24]
 8023e00:	19d2      	adds	r2, r2, r7
 8023e02:	8b61      	ldrh	r1, [r4, #26]
 8023e04:	9d02      	ldr	r5, [sp, #8]
 8023e06:	9201      	str	r2, [sp, #4]
 8023e08:	bf5b      	ittet	pl
 8023e0a:	eba2 020a 	subpl.w	r2, r2, sl
 8023e0e:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8023e12:	46f0      	movmi	r8, lr
 8023e14:	9201      	strpl	r2, [sp, #4]
 8023e16:	9a00      	ldr	r2, [sp, #0]
 8023e18:	4440      	add	r0, r8
 8023e1a:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8023e1e:	4443      	add	r3, r8
 8023e20:	442a      	add	r2, r5
 8023e22:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023e26:	9d05      	ldr	r5, [sp, #20]
 8023e28:	b200      	sxth	r0, r0
 8023e2a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023e2e:	b209      	sxth	r1, r1
 8023e30:	4415      	add	r5, r2
 8023e32:	8320      	strh	r0, [r4, #24]
 8023e34:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023e38:	8361      	strh	r1, [r4, #26]
 8023e3a:	9200      	str	r2, [sp, #0]
 8023e3c:	454d      	cmp	r5, r9
 8023e3e:	d016      	beq.n	8023e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8023e40:	4301      	orrs	r1, r0
 8023e42:	d00d      	beq.n	8023e60 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023e44:	f1b8 0f00 	cmp.w	r8, #0
 8023e48:	db0a      	blt.n	8023e60 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023e4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023e4c:	4541      	cmp	r1, r8
 8023e4e:	dd07      	ble.n	8023e60 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023e50:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023e54:	4288      	cmp	r0, r1
 8023e56:	d335      	bcc.n	8023ec4 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8023e58:	f04f 0101 	mov.w	r1, #1
 8023e5c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023e60:	9900      	ldr	r1, [sp, #0]
 8023e62:	82e6      	strh	r6, [r4, #22]
 8023e64:	82a1      	strh	r1, [r4, #20]
 8023e66:	f04f 0100 	mov.w	r1, #0
 8023e6a:	8321      	strh	r1, [r4, #24]
 8023e6c:	8361      	strh	r1, [r4, #26]
 8023e6e:	9a00      	ldr	r2, [sp, #0]
 8023e70:	4594      	cmp	ip, r2
 8023e72:	d1c3      	bne.n	8023dfc <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8023e74:	9a03      	ldr	r2, [sp, #12]
 8023e76:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8023e7a:	1ad3      	subs	r3, r2, r3
 8023e7c:	8b22      	ldrh	r2, [r4, #24]
 8023e7e:	441a      	add	r2, r3
 8023e80:	8322      	strh	r2, [r4, #24]
 8023e82:	9a04      	ldr	r2, [sp, #16]
 8023e84:	3220      	adds	r2, #32
 8023e86:	eba2 020b 	sub.w	r2, r2, fp
 8023e8a:	fb03 c302 	mla	r3, r3, r2, ip
 8023e8e:	8363      	strh	r3, [r4, #26]
 8023e90:	e758      	b.n	8023d44 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023e92:	f04f 33ff 	mov.w	r3, #4294967295
 8023e96:	434a      	muls	r2, r1
 8023e98:	f1ca 0a00 	rsb	sl, sl, #0
 8023e9c:	f04f 0b00 	mov.w	fp, #0
 8023ea0:	9302      	str	r3, [sp, #8]
 8023ea2:	e75d      	b.n	8023d60 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8023ea4:	f104 0314 	add.w	r3, r4, #20
 8023ea8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023eac:	cb03      	ldmia	r3!, {r0, r1}
 8023eae:	f8c8 0000 	str.w	r0, [r8]
 8023eb2:	f8c8 1004 	str.w	r1, [r8, #4]
 8023eb6:	6923      	ldr	r3, [r4, #16]
 8023eb8:	3308      	adds	r3, #8
 8023eba:	6123      	str	r3, [r4, #16]
 8023ebc:	68a3      	ldr	r3, [r4, #8]
 8023ebe:	3301      	adds	r3, #1
 8023ec0:	60a3      	str	r3, [r4, #8]
 8023ec2:	e77d      	b.n	8023dc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023ec4:	f104 0814 	add.w	r8, r4, #20
 8023ec8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023ecc:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8023ed0:	f8c9 0000 	str.w	r0, [r9]
 8023ed4:	f8c9 1004 	str.w	r1, [r9, #4]
 8023ed8:	6921      	ldr	r1, [r4, #16]
 8023eda:	3108      	adds	r1, #8
 8023edc:	6121      	str	r1, [r4, #16]
 8023ede:	68a1      	ldr	r1, [r4, #8]
 8023ee0:	3101      	adds	r1, #1
 8023ee2:	60a1      	str	r1, [r4, #8]
 8023ee4:	e7bc      	b.n	8023e60 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023ee6:	1a83      	subs	r3, r0, r2
 8023ee8:	9301      	str	r3, [sp, #4]
 8023eea:	f1ba 0f00 	cmp.w	sl, #0
 8023eee:	f040 8094 	bne.w	802401a <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8023ef2:	9a01      	ldr	r2, [sp, #4]
 8023ef4:	0049      	lsls	r1, r1, #1
 8023ef6:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8023efa:	2a00      	cmp	r2, #0
 8023efc:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8023f00:	8b62      	ldrh	r2, [r4, #26]
 8023f02:	bfaa      	itet	ge
 8023f04:	f04f 0a20 	movge.w	sl, #32
 8023f08:	f04f 38ff 	movlt.w	r8, #4294967295
 8023f0c:	f04f 0801 	movge.w	r8, #1
 8023f10:	8b21      	ldrh	r1, [r4, #24]
 8023f12:	ebaa 0e0e 	sub.w	lr, sl, lr
 8023f16:	4471      	add	r1, lr
 8023f18:	fb0e 2e03 	mla	lr, lr, r3, r2
 8023f1c:	eb08 0206 	add.w	r2, r8, r6
 8023f20:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8023f24:	b209      	sxth	r1, r1
 8023f26:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8023f2a:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8023f2e:	8321      	strh	r1, [r4, #24]
 8023f30:	fa0f fe8e 	sxth.w	lr, lr
 8023f34:	42b7      	cmp	r7, r6
 8023f36:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023f3a:	d013      	beq.n	8023f64 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8023f3c:	ea51 010e 	orrs.w	r1, r1, lr
 8023f40:	d00b      	beq.n	8023f5a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023f42:	2800      	cmp	r0, #0
 8023f44:	db09      	blt.n	8023f5a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023f46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023f48:	4281      	cmp	r1, r0
 8023f4a:	dd06      	ble.n	8023f5a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023f4c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023f50:	4288      	cmp	r0, r1
 8023f52:	d339      	bcc.n	8023fc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8023f54:	2101      	movs	r1, #1
 8023f56:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023f5a:	2100      	movs	r1, #0
 8023f5c:	82a5      	strh	r5, [r4, #20]
 8023f5e:	82e2      	strh	r2, [r4, #22]
 8023f60:	8321      	strh	r1, [r4, #24]
 8023f62:	8361      	strh	r1, [r4, #26]
 8023f64:	f1aa 0610 	sub.w	r6, sl, #16
 8023f68:	f04f 0e00 	mov.w	lr, #0
 8023f6c:	f04f 0b01 	mov.w	fp, #1
 8023f70:	0076      	lsls	r6, r6, #1
 8023f72:	fb06 f703 	mul.w	r7, r6, r3
 8023f76:	b236      	sxth	r6, r6
 8023f78:	b23f      	sxth	r7, r7
 8023f7a:	ea46 0107 	orr.w	r1, r6, r7
 8023f7e:	9100      	str	r1, [sp, #0]
 8023f80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023f82:	428a      	cmp	r2, r1
 8023f84:	d03e      	beq.n	8024004 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8023f86:	4442      	add	r2, r8
 8023f88:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023f8c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8023f90:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8023f94:	8326      	strh	r6, [r4, #24]
 8023f96:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8023f9a:	8367      	strh	r7, [r4, #26]
 8023f9c:	4584      	cmp	ip, r0
 8023f9e:	d0ef      	beq.n	8023f80 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8023fa0:	9800      	ldr	r0, [sp, #0]
 8023fa2:	b150      	cbz	r0, 8023fba <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023fa4:	2900      	cmp	r1, #0
 8023fa6:	db08      	blt.n	8023fba <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023fa8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8023faa:	4288      	cmp	r0, r1
 8023fac:	dd05      	ble.n	8023fba <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023fae:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023fb2:	4288      	cmp	r0, r1
 8023fb4:	d315      	bcc.n	8023fe2 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8023fb6:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8023fba:	82a5      	strh	r5, [r4, #20]
 8023fbc:	82e2      	strh	r2, [r4, #22]
 8023fbe:	f8a4 e018 	strh.w	lr, [r4, #24]
 8023fc2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023fc6:	e7db      	b.n	8023f80 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8023fc8:	f104 0614 	add.w	r6, r4, #20
 8023fcc:	6927      	ldr	r7, [r4, #16]
 8023fce:	ce03      	ldmia	r6!, {r0, r1}
 8023fd0:	6038      	str	r0, [r7, #0]
 8023fd2:	6079      	str	r1, [r7, #4]
 8023fd4:	6921      	ldr	r1, [r4, #16]
 8023fd6:	3108      	adds	r1, #8
 8023fd8:	6121      	str	r1, [r4, #16]
 8023fda:	68a1      	ldr	r1, [r4, #8]
 8023fdc:	3101      	adds	r1, #1
 8023fde:	60a1      	str	r1, [r4, #8]
 8023fe0:	e7bb      	b.n	8023f5a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023fe2:	f104 0c14 	add.w	ip, r4, #20
 8023fe6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023fea:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8023fee:	f8c9 0000 	str.w	r0, [r9]
 8023ff2:	f8c9 1004 	str.w	r1, [r9, #4]
 8023ff6:	6921      	ldr	r1, [r4, #16]
 8023ff8:	3108      	adds	r1, #8
 8023ffa:	6121      	str	r1, [r4, #16]
 8023ffc:	68a1      	ldr	r1, [r4, #8]
 8023ffe:	3101      	adds	r1, #1
 8024000:	60a1      	str	r1, [r4, #8]
 8024002:	e7da      	b.n	8023fba <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024004:	9a03      	ldr	r2, [sp, #12]
 8024006:	8b61      	ldrh	r1, [r4, #26]
 8024008:	f1a2 0c20 	sub.w	ip, r2, #32
 802400c:	8b22      	ldrh	r2, [r4, #24]
 802400e:	44d4      	add	ip, sl
 8024010:	4462      	add	r2, ip
 8024012:	fb0c 1303 	mla	r3, ip, r3, r1
 8024016:	8322      	strh	r2, [r4, #24]
 8024018:	e739      	b.n	8023e8e <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 802401a:	9b01      	ldr	r3, [sp, #4]
 802401c:	2b00      	cmp	r3, #0
 802401e:	db3f      	blt.n	80240a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8024020:	2201      	movs	r2, #1
 8024022:	f1ce 0320 	rsb	r3, lr, #32
 8024026:	920b      	str	r2, [sp, #44]	; 0x2c
 8024028:	2220      	movs	r2, #32
 802402a:	fb0a f303 	mul.w	r3, sl, r3
 802402e:	9202      	str	r2, [sp, #8]
 8024030:	9a01      	ldr	r2, [sp, #4]
 8024032:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024036:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802403a:	fb93 f7f2 	sdiv	r7, r3, r2
 802403e:	fb02 3317 	mls	r3, r2, r7, r3
 8024042:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024046:	2b00      	cmp	r3, #0
 8024048:	9308      	str	r3, [sp, #32]
 802404a:	bfbc      	itt	lt
 802404c:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024050:	189b      	addlt	r3, r3, r2
 8024052:	eb07 0b01 	add.w	fp, r7, r1
 8024056:	bfb8      	it	lt
 8024058:	9308      	strlt	r3, [sp, #32]
 802405a:	ea4f 136b 	mov.w	r3, fp, asr #5
 802405e:	9304      	str	r3, [sp, #16]
 8024060:	9b02      	ldr	r3, [sp, #8]
 8024062:	4573      	cmp	r3, lr
 8024064:	d133      	bne.n	80240ce <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8024066:	9b04      	ldr	r3, [sp, #16]
 8024068:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 802406c:	454b      	cmp	r3, r9
 802406e:	d045      	beq.n	80240fc <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024070:	8b62      	ldrh	r2, [r4, #26]
 8024072:	8b23      	ldrh	r3, [r4, #24]
 8024074:	4313      	orrs	r3, r2
 8024076:	d00c      	beq.n	8024092 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024078:	f1b8 0f00 	cmp.w	r8, #0
 802407c:	db09      	blt.n	8024092 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802407e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024080:	4543      	cmp	r3, r8
 8024082:	dd06      	ble.n	8024092 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024084:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024088:	429a      	cmp	r2, r3
 802408a:	d313      	bcc.n	80240b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 802408c:	2301      	movs	r3, #1
 802408e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024092:	9b04      	ldr	r3, [sp, #16]
 8024094:	82e6      	strh	r6, [r4, #22]
 8024096:	82a3      	strh	r3, [r4, #20]
 8024098:	2300      	movs	r3, #0
 802409a:	8323      	strh	r3, [r4, #24]
 802409c:	8363      	strh	r3, [r4, #26]
 802409e:	e02d      	b.n	80240fc <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80240a0:	9a01      	ldr	r2, [sp, #4]
 80240a2:	fb0a f30e 	mul.w	r3, sl, lr
 80240a6:	4252      	negs	r2, r2
 80240a8:	9201      	str	r2, [sp, #4]
 80240aa:	f04f 32ff 	mov.w	r2, #4294967295
 80240ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80240b0:	2200      	movs	r2, #0
 80240b2:	e7bc      	b.n	802402e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80240b4:	f104 0314 	add.w	r3, r4, #20
 80240b8:	6922      	ldr	r2, [r4, #16]
 80240ba:	cb03      	ldmia	r3!, {r0, r1}
 80240bc:	6010      	str	r0, [r2, #0]
 80240be:	6051      	str	r1, [r2, #4]
 80240c0:	6923      	ldr	r3, [r4, #16]
 80240c2:	3308      	adds	r3, #8
 80240c4:	6123      	str	r3, [r4, #16]
 80240c6:	68a3      	ldr	r3, [r4, #8]
 80240c8:	3301      	adds	r3, #1
 80240ca:	60a3      	str	r3, [r4, #8]
 80240cc:	e7e1      	b.n	8024092 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80240ce:	f00b 031f 	and.w	r3, fp, #31
 80240d2:	f001 011f 	and.w	r1, r1, #31
 80240d6:	8b20      	ldrh	r0, [r4, #24]
 80240d8:	9309      	str	r3, [sp, #36]	; 0x24
 80240da:	9b02      	ldr	r3, [sp, #8]
 80240dc:	eba3 020e 	sub.w	r2, r3, lr
 80240e0:	8b63      	ldrh	r3, [r4, #26]
 80240e2:	9300      	str	r3, [sp, #0]
 80240e4:	9b04      	ldr	r3, [sp, #16]
 80240e6:	42ab      	cmp	r3, r5
 80240e8:	f040 80ef 	bne.w	80242ca <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 80240ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240ee:	4410      	add	r0, r2
 80240f0:	4419      	add	r1, r3
 80240f2:	9b00      	ldr	r3, [sp, #0]
 80240f4:	8320      	strh	r0, [r4, #24]
 80240f6:	fb02 3101 	mla	r1, r2, r1, r3
 80240fa:	8361      	strh	r1, [r4, #26]
 80240fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240fe:	9904      	ldr	r1, [sp, #16]
 8024100:	4433      	add	r3, r6
 8024102:	9300      	str	r3, [sp, #0]
 8024104:	9a00      	ldr	r2, [sp, #0]
 8024106:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802410a:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 802410e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024112:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024116:	4288      	cmp	r0, r1
 8024118:	d018      	beq.n	802414c <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 802411a:	8b60      	ldrh	r0, [r4, #26]
 802411c:	8b21      	ldrh	r1, [r4, #24]
 802411e:	ea50 0201 	orrs.w	r2, r0, r1
 8024122:	d00c      	beq.n	802413e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024124:	2b00      	cmp	r3, #0
 8024126:	db0a      	blt.n	802413e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024128:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802412a:	4299      	cmp	r1, r3
 802412c:	dd07      	ble.n	802413e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802412e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024132:	4299      	cmp	r1, r3
 8024134:	f0c0 818b 	bcc.w	802444e <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8024138:	2301      	movs	r3, #1
 802413a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802413e:	9b04      	ldr	r3, [sp, #16]
 8024140:	82a3      	strh	r3, [r4, #20]
 8024142:	9b00      	ldr	r3, [sp, #0]
 8024144:	82e3      	strh	r3, [r4, #22]
 8024146:	2300      	movs	r3, #0
 8024148:	8323      	strh	r3, [r4, #24]
 802414a:	8363      	strh	r3, [r4, #26]
 802414c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802414e:	9a00      	ldr	r2, [sp, #0]
 8024150:	4293      	cmp	r3, r2
 8024152:	f000 808d 	beq.w	8024270 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8024156:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802415a:	9901      	ldr	r1, [sp, #4]
 802415c:	9801      	ldr	r0, [sp, #4]
 802415e:	fb93 f1f1 	sdiv	r1, r3, r1
 8024162:	fb00 3311 	mls	r3, r0, r1, r3
 8024166:	9106      	str	r1, [sp, #24]
 8024168:	2b00      	cmp	r3, #0
 802416a:	9307      	str	r3, [sp, #28]
 802416c:	da04      	bge.n	8024178 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 802416e:	1e4b      	subs	r3, r1, #1
 8024170:	9306      	str	r3, [sp, #24]
 8024172:	9b07      	ldr	r3, [sp, #28]
 8024174:	4403      	add	r3, r0
 8024176:	9307      	str	r3, [sp, #28]
 8024178:	9b08      	ldr	r3, [sp, #32]
 802417a:	f04f 0c00 	mov.w	ip, #0
 802417e:	9901      	ldr	r1, [sp, #4]
 8024180:	1a5b      	subs	r3, r3, r1
 8024182:	4659      	mov	r1, fp
 8024184:	9308      	str	r3, [sp, #32]
 8024186:	9b02      	ldr	r3, [sp, #8]
 8024188:	f1c3 0320 	rsb	r3, r3, #32
 802418c:	930a      	str	r3, [sp, #40]	; 0x28
 802418e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024190:	9b02      	ldr	r3, [sp, #8]
 8024192:	1a1b      	subs	r3, r3, r0
 8024194:	9309      	str	r3, [sp, #36]	; 0x24
 8024196:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 802419a:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802419e:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 80241a2:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 80241a6:	181b      	adds	r3, r3, r0
 80241a8:	bf58      	it	pl
 80241aa:	9801      	ldrpl	r0, [sp, #4]
 80241ac:	9308      	str	r3, [sp, #32]
 80241ae:	bf54      	ite	pl
 80241b0:	1a1b      	subpl	r3, r3, r0
 80241b2:	9d06      	ldrmi	r5, [sp, #24]
 80241b4:	9802      	ldr	r0, [sp, #8]
 80241b6:	bf5e      	ittt	pl
 80241b8:	9308      	strpl	r3, [sp, #32]
 80241ba:	9b06      	ldrpl	r3, [sp, #24]
 80241bc:	1c5d      	addpl	r5, r3, #1
 80241be:	44ab      	add	fp, r5
 80241c0:	ea4f 136b 	mov.w	r3, fp, asr #5
 80241c4:	9304      	str	r3, [sp, #16]
 80241c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80241c8:	4283      	cmp	r3, r0
 80241ca:	f040 815a 	bne.w	8024482 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 80241ce:	9b04      	ldr	r3, [sp, #16]
 80241d0:	9a00      	ldr	r2, [sp, #0]
 80241d2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80241d6:	4543      	cmp	r3, r8
 80241d8:	d01a      	beq.n	8024210 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80241da:	8b61      	ldrh	r1, [r4, #26]
 80241dc:	8b23      	ldrh	r3, [r4, #24]
 80241de:	430b      	orrs	r3, r1
 80241e0:	d00e      	beq.n	8024200 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80241e2:	f1be 0f00 	cmp.w	lr, #0
 80241e6:	db0b      	blt.n	8024200 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80241e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80241ea:	4573      	cmp	r3, lr
 80241ec:	dd08      	ble.n	8024200 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80241ee:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80241f2:	4299      	cmp	r1, r3
 80241f4:	f0c0 8138 	bcc.w	8024468 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 80241f8:	f04f 0301 	mov.w	r3, #1
 80241fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024200:	9b04      	ldr	r3, [sp, #16]
 8024202:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024206:	82a3      	strh	r3, [r4, #20]
 8024208:	9b00      	ldr	r3, [sp, #0]
 802420a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802420e:	82e3      	strh	r3, [r4, #22]
 8024210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024212:	9a00      	ldr	r2, [sp, #0]
 8024214:	441a      	add	r2, r3
 8024216:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802421a:	9200      	str	r2, [sp, #0]
 802421c:	9900      	ldr	r1, [sp, #0]
 802421e:	9a04      	ldr	r2, [sp, #16]
 8024220:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8024224:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024228:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802422c:	4288      	cmp	r0, r1
 802422e:	d01a      	beq.n	8024266 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8024230:	8b60      	ldrh	r0, [r4, #26]
 8024232:	8b21      	ldrh	r1, [r4, #24]
 8024234:	ea50 0201 	orrs.w	r2, r0, r1
 8024238:	d00d      	beq.n	8024256 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802423a:	2b00      	cmp	r3, #0
 802423c:	db0b      	blt.n	8024256 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802423e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024240:	4299      	cmp	r1, r3
 8024242:	dd08      	ble.n	8024256 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024244:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024248:	4299      	cmp	r1, r3
 802424a:	f0c0 81f9 	bcc.w	8024640 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 802424e:	f04f 0301 	mov.w	r3, #1
 8024252:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024256:	9b04      	ldr	r3, [sp, #16]
 8024258:	f8a4 c018 	strh.w	ip, [r4, #24]
 802425c:	82a3      	strh	r3, [r4, #20]
 802425e:	9b00      	ldr	r3, [sp, #0]
 8024260:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024264:	82e3      	strh	r3, [r4, #22]
 8024266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024268:	4659      	mov	r1, fp
 802426a:	9a00      	ldr	r2, [sp, #0]
 802426c:	4293      	cmp	r3, r2
 802426e:	d192      	bne.n	8024196 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8024270:	9b02      	ldr	r3, [sp, #8]
 8024272:	f1c3 0c20 	rsb	ip, r3, #32
 8024276:	9b05      	ldr	r3, [sp, #20]
 8024278:	ea4f 1e63 	mov.w	lr, r3, asr #5
 802427c:	9b03      	ldr	r3, [sp, #12]
 802427e:	459c      	cmp	ip, r3
 8024280:	f040 81f8 	bne.w	8024674 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8024284:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024288:	9a00      	ldr	r2, [sp, #0]
 802428a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802428e:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8024292:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024296:	4288      	cmp	r0, r1
 8024298:	f43f ad54 	beq.w	8023d44 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802429c:	8b60      	ldrh	r0, [r4, #26]
 802429e:	8b21      	ldrh	r1, [r4, #24]
 80242a0:	ea50 0201 	orrs.w	r2, r0, r1
 80242a4:	d00c      	beq.n	80242c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80242a6:	2b00      	cmp	r3, #0
 80242a8:	db0a      	blt.n	80242c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80242aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80242ac:	4299      	cmp	r1, r3
 80242ae:	dd07      	ble.n	80242c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80242b0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80242b4:	4299      	cmp	r1, r3
 80242b6:	f0c0 81d0 	bcc.w	802465a <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 80242ba:	2301      	movs	r3, #1
 80242bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80242c0:	9b00      	ldr	r3, [sp, #0]
 80242c2:	f8a4 e014 	strh.w	lr, [r4, #20]
 80242c6:	82e3      	strh	r3, [r4, #22]
 80242c8:	e517      	b.n	8023cfa <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 80242ca:	2f00      	cmp	r7, #0
 80242cc:	f2c0 8097 	blt.w	80243fe <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 80242d0:	2301      	movs	r3, #1
 80242d2:	f1c1 0c20 	rsb	ip, r1, #32
 80242d6:	9307      	str	r3, [sp, #28]
 80242d8:	2320      	movs	r3, #32
 80242da:	fb02 f20c 	mul.w	r2, r2, ip
 80242de:	9306      	str	r3, [sp, #24]
 80242e0:	9b06      	ldr	r3, [sp, #24]
 80242e2:	fb92 fcf7 	sdiv	ip, r2, r7
 80242e6:	fb07 221c 	mls	r2, r7, ip, r2
 80242ea:	4419      	add	r1, r3
 80242ec:	9b00      	ldr	r3, [sp, #0]
 80242ee:	2a00      	cmp	r2, #0
 80242f0:	bfbc      	itt	lt
 80242f2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80242f6:	19d2      	addlt	r2, r2, r7
 80242f8:	fb0c 3101 	mla	r1, ip, r1, r3
 80242fc:	9b07      	ldr	r3, [sp, #28]
 80242fe:	4460      	add	r0, ip
 8024300:	441d      	add	r5, r3
 8024302:	0433      	lsls	r3, r6, #16
 8024304:	b200      	sxth	r0, r0
 8024306:	930a      	str	r3, [sp, #40]	; 0x28
 8024308:	18eb      	adds	r3, r5, r3
 802430a:	b209      	sxth	r1, r1
 802430c:	8320      	strh	r0, [r4, #24]
 802430e:	454b      	cmp	r3, r9
 8024310:	8361      	strh	r1, [r4, #26]
 8024312:	d014      	beq.n	802433e <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8024314:	ea50 0301 	orrs.w	r3, r0, r1
 8024318:	d00c      	beq.n	8024334 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802431a:	f1b8 0f00 	cmp.w	r8, #0
 802431e:	db09      	blt.n	8024334 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024320:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024322:	4543      	cmp	r3, r8
 8024324:	dd06      	ble.n	8024334 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024326:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802432a:	4299      	cmp	r1, r3
 802432c:	d36e      	bcc.n	802440c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 802432e:	2301      	movs	r3, #1
 8024330:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024334:	2300      	movs	r3, #0
 8024336:	82a5      	strh	r5, [r4, #20]
 8024338:	82e6      	strh	r6, [r4, #22]
 802433a:	8323      	strh	r3, [r4, #24]
 802433c:	8363      	strh	r3, [r4, #26]
 802433e:	9904      	ldr	r1, [sp, #16]
 8024340:	eb0e 030c 	add.w	r3, lr, ip
 8024344:	42a9      	cmp	r1, r5
 8024346:	d04d      	beq.n	80243e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8024348:	9902      	ldr	r1, [sp, #8]
 802434a:	1bd2      	subs	r2, r2, r7
 802434c:	1ac9      	subs	r1, r1, r3
 802434e:	9200      	str	r2, [sp, #0]
 8024350:	448c      	add	ip, r1
 8024352:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8024356:	fb9c fef7 	sdiv	lr, ip, r7
 802435a:	fb07 cc1e 	mls	ip, r7, lr, ip
 802435e:	f1bc 0f00 	cmp.w	ip, #0
 8024362:	bfbc      	itt	lt
 8024364:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024368:	44bc      	addlt	ip, r7
 802436a:	f10e 0101 	add.w	r1, lr, #1
 802436e:	910d      	str	r1, [sp, #52]	; 0x34
 8024370:	9a00      	ldr	r2, [sp, #0]
 8024372:	8b20      	ldrh	r0, [r4, #24]
 8024374:	eb12 020c 	adds.w	r2, r2, ip
 8024378:	8b61      	ldrh	r1, [r4, #26]
 802437a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802437e:	9200      	str	r2, [sp, #0]
 8024380:	bf5b      	ittet	pl
 8024382:	1bd2      	subpl	r2, r2, r7
 8024384:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8024388:	46f0      	movmi	r8, lr
 802438a:	9200      	strpl	r2, [sp, #0]
 802438c:	9a07      	ldr	r2, [sp, #28]
 802438e:	4440      	add	r0, r8
 8024390:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024394:	4443      	add	r3, r8
 8024396:	4415      	add	r5, r2
 8024398:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802439c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802439e:	b200      	sxth	r0, r0
 80243a0:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80243a4:	442a      	add	r2, r5
 80243a6:	b209      	sxth	r1, r1
 80243a8:	8320      	strh	r0, [r4, #24]
 80243aa:	454a      	cmp	r2, r9
 80243ac:	8361      	strh	r1, [r4, #26]
 80243ae:	d016      	beq.n	80243de <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80243b0:	ea50 0201 	orrs.w	r2, r0, r1
 80243b4:	d00d      	beq.n	80243d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80243b6:	f1b8 0f00 	cmp.w	r8, #0
 80243ba:	db0a      	blt.n	80243d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80243bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80243be:	4541      	cmp	r1, r8
 80243c0:	dd07      	ble.n	80243d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80243c2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80243c6:	4288      	cmp	r0, r1
 80243c8:	d330      	bcc.n	802442c <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 80243ca:	f04f 0201 	mov.w	r2, #1
 80243ce:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80243d2:	f04f 0200 	mov.w	r2, #0
 80243d6:	82a5      	strh	r5, [r4, #20]
 80243d8:	82e6      	strh	r6, [r4, #22]
 80243da:	8322      	strh	r2, [r4, #24]
 80243dc:	8362      	strh	r2, [r4, #26]
 80243de:	9904      	ldr	r1, [sp, #16]
 80243e0:	42a9      	cmp	r1, r5
 80243e2:	d1c5      	bne.n	8024370 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 80243e4:	9a02      	ldr	r2, [sp, #8]
 80243e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80243e8:	1ad3      	subs	r3, r2, r3
 80243ea:	8b22      	ldrh	r2, [r4, #24]
 80243ec:	3120      	adds	r1, #32
 80243ee:	441a      	add	r2, r3
 80243f0:	8322      	strh	r2, [r4, #24]
 80243f2:	9a06      	ldr	r2, [sp, #24]
 80243f4:	1a89      	subs	r1, r1, r2
 80243f6:	8b62      	ldrh	r2, [r4, #26]
 80243f8:	fb03 2301 	mla	r3, r3, r1, r2
 80243fc:	e64e      	b.n	802409c <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 80243fe:	f04f 33ff 	mov.w	r3, #4294967295
 8024402:	434a      	muls	r2, r1
 8024404:	427f      	negs	r7, r7
 8024406:	9307      	str	r3, [sp, #28]
 8024408:	2300      	movs	r3, #0
 802440a:	e768      	b.n	80242de <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 802440c:	f104 0314 	add.w	r3, r4, #20
 8024410:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024414:	cb03      	ldmia	r3!, {r0, r1}
 8024416:	f8c8 0000 	str.w	r0, [r8]
 802441a:	f8c8 1004 	str.w	r1, [r8, #4]
 802441e:	6923      	ldr	r3, [r4, #16]
 8024420:	3308      	adds	r3, #8
 8024422:	6123      	str	r3, [r4, #16]
 8024424:	68a3      	ldr	r3, [r4, #8]
 8024426:	3301      	adds	r3, #1
 8024428:	60a3      	str	r3, [r4, #8]
 802442a:	e783      	b.n	8024334 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802442c:	f104 0814 	add.w	r8, r4, #20
 8024430:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024434:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024438:	f8c9 0000 	str.w	r0, [r9]
 802443c:	f8c9 1004 	str.w	r1, [r9, #4]
 8024440:	6921      	ldr	r1, [r4, #16]
 8024442:	3108      	adds	r1, #8
 8024444:	6121      	str	r1, [r4, #16]
 8024446:	68a1      	ldr	r1, [r4, #8]
 8024448:	3101      	adds	r1, #1
 802444a:	60a1      	str	r1, [r4, #8]
 802444c:	e7c1      	b.n	80243d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802444e:	f104 0314 	add.w	r3, r4, #20
 8024452:	6925      	ldr	r5, [r4, #16]
 8024454:	cb03      	ldmia	r3!, {r0, r1}
 8024456:	6028      	str	r0, [r5, #0]
 8024458:	6069      	str	r1, [r5, #4]
 802445a:	6923      	ldr	r3, [r4, #16]
 802445c:	3308      	adds	r3, #8
 802445e:	6123      	str	r3, [r4, #16]
 8024460:	68a3      	ldr	r3, [r4, #8]
 8024462:	3301      	adds	r3, #1
 8024464:	60a3      	str	r3, [r4, #8]
 8024466:	e66a      	b.n	802413e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024468:	f104 0314 	add.w	r3, r4, #20
 802446c:	6925      	ldr	r5, [r4, #16]
 802446e:	cb03      	ldmia	r3!, {r0, r1}
 8024470:	6028      	str	r0, [r5, #0]
 8024472:	6069      	str	r1, [r5, #4]
 8024474:	6923      	ldr	r3, [r4, #16]
 8024476:	3308      	adds	r3, #8
 8024478:	6123      	str	r3, [r4, #16]
 802447a:	68a3      	ldr	r3, [r4, #8]
 802447c:	3301      	adds	r3, #1
 802447e:	60a3      	str	r3, [r4, #8]
 8024480:	e6be      	b.n	8024200 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024482:	f00b 031f 	and.w	r3, fp, #31
 8024486:	114f      	asrs	r7, r1, #5
 8024488:	8b20      	ldrh	r0, [r4, #24]
 802448a:	f001 011f 	and.w	r1, r1, #31
 802448e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024490:	9b04      	ldr	r3, [sp, #16]
 8024492:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024496:	429f      	cmp	r7, r3
 8024498:	d10a      	bne.n	80244b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 802449a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802449c:	4418      	add	r0, r3
 802449e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80244a0:	4419      	add	r1, r3
 80244a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80244a4:	8320      	strh	r0, [r4, #24]
 80244a6:	fb03 9901 	mla	r9, r3, r1, r9
 80244aa:	f8a4 901a 	strh.w	r9, [r4, #26]
 80244ae:	e6af      	b.n	8024210 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80244b0:	2d00      	cmp	r5, #0
 80244b2:	f2c0 809b 	blt.w	80245ec <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 80244b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80244b8:	f1c1 0320 	rsb	r3, r1, #32
 80244bc:	4373      	muls	r3, r6
 80244be:	2601      	movs	r6, #1
 80244c0:	960e      	str	r6, [sp, #56]	; 0x38
 80244c2:	2620      	movs	r6, #32
 80244c4:	960d      	str	r6, [sp, #52]	; 0x34
 80244c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80244c8:	fb93 f6f5 	sdiv	r6, r3, r5
 80244cc:	4411      	add	r1, r2
 80244ce:	fb05 3316 	mls	r3, r5, r6, r3
 80244d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80244d4:	2b00      	cmp	r3, #0
 80244d6:	4417      	add	r7, r2
 80244d8:	9a00      	ldr	r2, [sp, #0]
 80244da:	bfbc      	itt	lt
 80244dc:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80244e0:	195b      	addlt	r3, r3, r5
 80244e2:	0412      	lsls	r2, r2, #16
 80244e4:	fb06 9101 	mla	r1, r6, r1, r9
 80244e8:	4430      	add	r0, r6
 80244ea:	eb07 0902 	add.w	r9, r7, r2
 80244ee:	9210      	str	r2, [sp, #64]	; 0x40
 80244f0:	b200      	sxth	r0, r0
 80244f2:	b209      	sxth	r1, r1
 80244f4:	45c1      	cmp	r9, r8
 80244f6:	8320      	strh	r0, [r4, #24]
 80244f8:	8361      	strh	r1, [r4, #26]
 80244fa:	d017      	beq.n	802452c <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 80244fc:	ea50 0201 	orrs.w	r2, r0, r1
 8024500:	d00d      	beq.n	802451e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024502:	f1be 0f00 	cmp.w	lr, #0
 8024506:	db0a      	blt.n	802451e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024508:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802450a:	4571      	cmp	r1, lr
 802450c:	dd07      	ble.n	802451e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802450e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024512:	4288      	cmp	r0, r1
 8024514:	d372      	bcc.n	80245fc <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8024516:	f04f 0201 	mov.w	r2, #1
 802451a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802451e:	9a00      	ldr	r2, [sp, #0]
 8024520:	82a7      	strh	r7, [r4, #20]
 8024522:	82e2      	strh	r2, [r4, #22]
 8024524:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024528:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802452c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802452e:	eb02 0e06 	add.w	lr, r2, r6
 8024532:	9a04      	ldr	r2, [sp, #16]
 8024534:	42ba      	cmp	r2, r7
 8024536:	d049      	beq.n	80245cc <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8024538:	9a02      	ldr	r2, [sp, #8]
 802453a:	1b5b      	subs	r3, r3, r5
 802453c:	eba2 010e 	sub.w	r1, r2, lr
 8024540:	440e      	add	r6, r1
 8024542:	0176      	lsls	r6, r6, #5
 8024544:	fb96 f8f5 	sdiv	r8, r6, r5
 8024548:	fb05 6618 	mls	r6, r5, r8, r6
 802454c:	2e00      	cmp	r6, #0
 802454e:	bfbc      	itt	lt
 8024550:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024554:	1976      	addlt	r6, r6, r5
 8024556:	f108 0201 	add.w	r2, r8, #1
 802455a:	9211      	str	r2, [sp, #68]	; 0x44
 802455c:	199b      	adds	r3, r3, r6
 802455e:	8b20      	ldrh	r0, [r4, #24]
 8024560:	8b61      	ldrh	r1, [r4, #26]
 8024562:	bf54      	ite	pl
 8024564:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8024568:	46c1      	movmi	r9, r8
 802456a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802456c:	bf58      	it	pl
 802456e:	1b5b      	subpl	r3, r3, r5
 8024570:	4448      	add	r0, r9
 8024572:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8024576:	4417      	add	r7, r2
 8024578:	44ce      	add	lr, r9
 802457a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802457c:	b200      	sxth	r0, r0
 802457e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8024582:	b209      	sxth	r1, r1
 8024584:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8024588:	443a      	add	r2, r7
 802458a:	8320      	strh	r0, [r4, #24]
 802458c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8024590:	8361      	strh	r1, [r4, #26]
 8024592:	4552      	cmp	r2, sl
 8024594:	d017      	beq.n	80245c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8024596:	ea50 0201 	orrs.w	r2, r0, r1
 802459a:	d00d      	beq.n	80245b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802459c:	f1b9 0f00 	cmp.w	r9, #0
 80245a0:	db0a      	blt.n	80245b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80245a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80245a4:	4549      	cmp	r1, r9
 80245a6:	dd07      	ble.n	80245b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80245a8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80245ac:	4288      	cmp	r0, r1
 80245ae:	d336      	bcc.n	802461e <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 80245b0:	f04f 0201 	mov.w	r2, #1
 80245b4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80245b8:	9a00      	ldr	r2, [sp, #0]
 80245ba:	82a7      	strh	r7, [r4, #20]
 80245bc:	82e2      	strh	r2, [r4, #22]
 80245be:	f8a4 c018 	strh.w	ip, [r4, #24]
 80245c2:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80245c6:	9a04      	ldr	r2, [sp, #16]
 80245c8:	42ba      	cmp	r2, r7
 80245ca:	d1c7      	bne.n	802455c <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80245cc:	9b02      	ldr	r3, [sp, #8]
 80245ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80245d0:	eba3 0e0e 	sub.w	lr, r3, lr
 80245d4:	8b23      	ldrh	r3, [r4, #24]
 80245d6:	3120      	adds	r1, #32
 80245d8:	4473      	add	r3, lr
 80245da:	8323      	strh	r3, [r4, #24]
 80245dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80245de:	1ac9      	subs	r1, r1, r3
 80245e0:	8b63      	ldrh	r3, [r4, #26]
 80245e2:	fb0e 3e01 	mla	lr, lr, r1, r3
 80245e6:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80245ea:	e611      	b.n	8024210 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80245ec:	f04f 36ff 	mov.w	r6, #4294967295
 80245f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245f2:	426d      	negs	r5, r5
 80245f4:	960e      	str	r6, [sp, #56]	; 0x38
 80245f6:	2600      	movs	r6, #0
 80245f8:	434b      	muls	r3, r1
 80245fa:	e763      	b.n	80244c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 80245fc:	f104 0e14 	add.w	lr, r4, #20
 8024600:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024604:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024608:	f8c8 0000 	str.w	r0, [r8]
 802460c:	f8c8 1004 	str.w	r1, [r8, #4]
 8024610:	6921      	ldr	r1, [r4, #16]
 8024612:	3108      	adds	r1, #8
 8024614:	6121      	str	r1, [r4, #16]
 8024616:	68a1      	ldr	r1, [r4, #8]
 8024618:	3101      	adds	r1, #1
 802461a:	60a1      	str	r1, [r4, #8]
 802461c:	e77f      	b.n	802451e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802461e:	f104 0914 	add.w	r9, r4, #20
 8024622:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8024626:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802462a:	f8ca 0000 	str.w	r0, [sl]
 802462e:	f8ca 1004 	str.w	r1, [sl, #4]
 8024632:	6921      	ldr	r1, [r4, #16]
 8024634:	3108      	adds	r1, #8
 8024636:	6121      	str	r1, [r4, #16]
 8024638:	68a1      	ldr	r1, [r4, #8]
 802463a:	3101      	adds	r1, #1
 802463c:	60a1      	str	r1, [r4, #8]
 802463e:	e7bb      	b.n	80245b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024640:	f104 0314 	add.w	r3, r4, #20
 8024644:	6925      	ldr	r5, [r4, #16]
 8024646:	cb03      	ldmia	r3!, {r0, r1}
 8024648:	6028      	str	r0, [r5, #0]
 802464a:	6069      	str	r1, [r5, #4]
 802464c:	6923      	ldr	r3, [r4, #16]
 802464e:	3308      	adds	r3, #8
 8024650:	6123      	str	r3, [r4, #16]
 8024652:	68a3      	ldr	r3, [r4, #8]
 8024654:	3301      	adds	r3, #1
 8024656:	60a3      	str	r3, [r4, #8]
 8024658:	e5fd      	b.n	8024256 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802465a:	f104 0314 	add.w	r3, r4, #20
 802465e:	6925      	ldr	r5, [r4, #16]
 8024660:	cb03      	ldmia	r3!, {r0, r1}
 8024662:	6028      	str	r0, [r5, #0]
 8024664:	6069      	str	r1, [r5, #4]
 8024666:	6923      	ldr	r3, [r4, #16]
 8024668:	3308      	adds	r3, #8
 802466a:	6123      	str	r3, [r4, #16]
 802466c:	68a3      	ldr	r3, [r4, #8]
 802466e:	3301      	adds	r3, #1
 8024670:	60a3      	str	r3, [r4, #8]
 8024672:	e625      	b.n	80242c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024674:	9b05      	ldr	r3, [sp, #20]
 8024676:	ea4f 176b 	mov.w	r7, fp, asr #5
 802467a:	f00b 081f 	and.w	r8, fp, #31
 802467e:	8b20      	ldrh	r0, [r4, #24]
 8024680:	f003 031f 	and.w	r3, r3, #31
 8024684:	4577      	cmp	r7, lr
 8024686:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802468a:	9302      	str	r3, [sp, #8]
 802468c:	9b03      	ldr	r3, [sp, #12]
 802468e:	eba3 050c 	sub.w	r5, r3, ip
 8024692:	d108      	bne.n	80246a6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8024694:	9b02      	ldr	r3, [sp, #8]
 8024696:	4428      	add	r0, r5
 8024698:	4498      	add	r8, r3
 802469a:	8320      	strh	r0, [r4, #24]
 802469c:	fb05 9508 	mla	r5, r5, r8, r9
 80246a0:	8365      	strh	r5, [r4, #26]
 80246a2:	f7ff bb4f 	b.w	8023d44 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80246a6:	9b05      	ldr	r3, [sp, #20]
 80246a8:	ebb3 030b 	subs.w	r3, r3, fp
 80246ac:	f100 809c 	bmi.w	80247e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 80246b0:	f1c8 0120 	rsb	r1, r8, #32
 80246b4:	2201      	movs	r2, #1
 80246b6:	f04f 0b20 	mov.w	fp, #32
 80246ba:	434d      	muls	r5, r1
 80246bc:	9201      	str	r2, [sp, #4]
 80246be:	9a01      	ldr	r2, [sp, #4]
 80246c0:	44d8      	add	r8, fp
 80246c2:	fb95 f6f3 	sdiv	r6, r5, r3
 80246c6:	fb03 5516 	mls	r5, r3, r6, r5
 80246ca:	4417      	add	r7, r2
 80246cc:	9a00      	ldr	r2, [sp, #0]
 80246ce:	2d00      	cmp	r5, #0
 80246d0:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80246d4:	bfbc      	itt	lt
 80246d6:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80246da:	18ed      	addlt	r5, r5, r3
 80246dc:	eb07 0a02 	add.w	sl, r7, r2
 80246e0:	9204      	str	r2, [sp, #16]
 80246e2:	fb06 9808 	mla	r8, r6, r8, r9
 80246e6:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80246ea:	4430      	add	r0, r6
 80246ec:	fa0f f188 	sxth.w	r1, r8
 80246f0:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80246f4:	b200      	sxth	r0, r0
 80246f6:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80246fa:	8361      	strh	r1, [r4, #26]
 80246fc:	8320      	strh	r0, [r4, #24]
 80246fe:	45ca      	cmp	sl, r9
 8024700:	d015      	beq.n	802472e <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8024702:	ea50 0201 	orrs.w	r2, r0, r1
 8024706:	d00c      	beq.n	8024722 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024708:	f1b8 0f00 	cmp.w	r8, #0
 802470c:	db09      	blt.n	8024722 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802470e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024710:	4541      	cmp	r1, r8
 8024712:	dd06      	ble.n	8024722 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024714:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024718:	4288      	cmp	r0, r1
 802471a:	d36e      	bcc.n	80247fa <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 802471c:	2101      	movs	r1, #1
 802471e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024722:	2100      	movs	r1, #0
 8024724:	9a00      	ldr	r2, [sp, #0]
 8024726:	82a7      	strh	r7, [r4, #20]
 8024728:	82e2      	strh	r2, [r4, #22]
 802472a:	8321      	strh	r1, [r4, #24]
 802472c:	8361      	strh	r1, [r4, #26]
 802472e:	45be      	cmp	lr, r7
 8024730:	44b4      	add	ip, r6
 8024732:	d048      	beq.n	80247c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8024734:	9a03      	ldr	r2, [sp, #12]
 8024736:	1aed      	subs	r5, r5, r3
 8024738:	eba2 010c 	sub.w	r1, r2, ip
 802473c:	440e      	add	r6, r1
 802473e:	0176      	lsls	r6, r6, #5
 8024740:	fb96 f8f3 	sdiv	r8, r6, r3
 8024744:	fb03 6618 	mls	r6, r3, r8, r6
 8024748:	2e00      	cmp	r6, #0
 802474a:	bfbc      	itt	lt
 802474c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024750:	18f6      	addlt	r6, r6, r3
 8024752:	f108 0201 	add.w	r2, r8, #1
 8024756:	9205      	str	r2, [sp, #20]
 8024758:	19ad      	adds	r5, r5, r6
 802475a:	8b20      	ldrh	r0, [r4, #24]
 802475c:	8b61      	ldrh	r1, [r4, #26]
 802475e:	bf54      	ite	pl
 8024760:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8024764:	46c1      	movmi	r9, r8
 8024766:	9a01      	ldr	r2, [sp, #4]
 8024768:	bf58      	it	pl
 802476a:	1aed      	subpl	r5, r5, r3
 802476c:	4448      	add	r0, r9
 802476e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8024772:	4417      	add	r7, r2
 8024774:	44cc      	add	ip, r9
 8024776:	9a04      	ldr	r2, [sp, #16]
 8024778:	b200      	sxth	r0, r0
 802477a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802477e:	b209      	sxth	r1, r1
 8024780:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8024784:	443a      	add	r2, r7
 8024786:	8320      	strh	r0, [r4, #24]
 8024788:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802478c:	8361      	strh	r1, [r4, #26]
 802478e:	4552      	cmp	r2, sl
 8024790:	d017      	beq.n	80247c2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8024792:	ea50 0201 	orrs.w	r2, r0, r1
 8024796:	d00d      	beq.n	80247b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024798:	f1b9 0f00 	cmp.w	r9, #0
 802479c:	db0a      	blt.n	80247b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802479e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80247a0:	4549      	cmp	r1, r9
 80247a2:	dd07      	ble.n	80247b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80247a4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80247a8:	4288      	cmp	r0, r1
 80247aa:	d337      	bcc.n	802481c <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80247ac:	f04f 0201 	mov.w	r2, #1
 80247b0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80247b4:	9a00      	ldr	r2, [sp, #0]
 80247b6:	82a7      	strh	r7, [r4, #20]
 80247b8:	82e2      	strh	r2, [r4, #22]
 80247ba:	f04f 0200 	mov.w	r2, #0
 80247be:	8322      	strh	r2, [r4, #24]
 80247c0:	8362      	strh	r2, [r4, #26]
 80247c2:	45be      	cmp	lr, r7
 80247c4:	d1c8      	bne.n	8024758 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80247c6:	9b03      	ldr	r3, [sp, #12]
 80247c8:	8b62      	ldrh	r2, [r4, #26]
 80247ca:	eba3 0c0c 	sub.w	ip, r3, ip
 80247ce:	8b23      	ldrh	r3, [r4, #24]
 80247d0:	4463      	add	r3, ip
 80247d2:	8323      	strh	r3, [r4, #24]
 80247d4:	9b02      	ldr	r3, [sp, #8]
 80247d6:	3320      	adds	r3, #32
 80247d8:	eba3 030b 	sub.w	r3, r3, fp
 80247dc:	fb0c 2c03 	mla	ip, ip, r3, r2
 80247e0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80247e4:	f7ff baae 	b.w	8023d44 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80247e8:	f04f 32ff 	mov.w	r2, #4294967295
 80247ec:	fb05 f508 	mul.w	r5, r5, r8
 80247f0:	425b      	negs	r3, r3
 80247f2:	f04f 0b00 	mov.w	fp, #0
 80247f6:	9201      	str	r2, [sp, #4]
 80247f8:	e761      	b.n	80246be <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80247fa:	f104 0814 	add.w	r8, r4, #20
 80247fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024802:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024806:	f8c9 0000 	str.w	r0, [r9]
 802480a:	f8c9 1004 	str.w	r1, [r9, #4]
 802480e:	6921      	ldr	r1, [r4, #16]
 8024810:	3108      	adds	r1, #8
 8024812:	6121      	str	r1, [r4, #16]
 8024814:	68a1      	ldr	r1, [r4, #8]
 8024816:	3101      	adds	r1, #1
 8024818:	60a1      	str	r1, [r4, #8]
 802481a:	e782      	b.n	8024722 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802481c:	f104 0914 	add.w	r9, r4, #20
 8024820:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8024824:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024828:	f8ca 0000 	str.w	r0, [sl]
 802482c:	f8ca 1004 	str.w	r1, [sl, #4]
 8024830:	6921      	ldr	r1, [r4, #16]
 8024832:	3108      	adds	r1, #8
 8024834:	6121      	str	r1, [r4, #16]
 8024836:	68a1      	ldr	r1, [r4, #8]
 8024838:	3101      	adds	r1, #1
 802483a:	60a1      	str	r1, [r4, #8]
 802483c:	e7ba      	b.n	80247b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802483e <_ZN8touchgfx7Outline6lineToEii>:
 802483e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024840:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024842:	4604      	mov	r4, r0
 8024844:	460d      	mov	r5, r1
 8024846:	4616      	mov	r6, r2
 8024848:	079b      	lsls	r3, r3, #30
 802484a:	d526      	bpl.n	802489a <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802484c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8024850:	ea85 0001 	eor.w	r0, r5, r1
 8024854:	ea86 0302 	eor.w	r3, r6, r2
 8024858:	4303      	orrs	r3, r0
 802485a:	d01e      	beq.n	802489a <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802485c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802485e:	114b      	asrs	r3, r1, #5
 8024860:	9600      	str	r6, [sp, #0]
 8024862:	4283      	cmp	r3, r0
 8024864:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024866:	bfb8      	it	lt
 8024868:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802486a:	3301      	adds	r3, #1
 802486c:	4283      	cmp	r3, r0
 802486e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024870:	bfc8      	it	gt
 8024872:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024874:	116b      	asrs	r3, r5, #5
 8024876:	4283      	cmp	r3, r0
 8024878:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802487a:	bfb8      	it	lt
 802487c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802487e:	3301      	adds	r3, #1
 8024880:	4283      	cmp	r3, r0
 8024882:	4620      	mov	r0, r4
 8024884:	bfc8      	it	gt
 8024886:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024888:	462b      	mov	r3, r5
 802488a:	f7ff f9e3 	bl	8023c54 <_ZN8touchgfx7Outline10renderLineEiiii>
 802488e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024890:	f043 0301 	orr.w	r3, r3, #1
 8024894:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8024898:	63e3      	str	r3, [r4, #60]	; 0x3c
 802489a:	b002      	add	sp, #8
 802489c:	bd70      	pop	{r4, r5, r6, pc}

0802489e <_ZN8touchgfx7Outline6moveToEii>:
 802489e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248a0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80248a2:	4615      	mov	r5, r2
 80248a4:	4604      	mov	r4, r0
 80248a6:	460e      	mov	r6, r1
 80248a8:	079a      	lsls	r2, r3, #30
 80248aa:	d401      	bmi.n	80248b0 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80248ac:	f7ff f98c 	bl	8023bc8 <_ZN8touchgfx7Outline5resetEv>
 80248b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80248b2:	07db      	lsls	r3, r3, #31
 80248b4:	d504      	bpl.n	80248c0 <_ZN8touchgfx7Outline6moveToEii+0x22>
 80248b6:	4620      	mov	r0, r4
 80248b8:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80248bc:	f7ff ffbf 	bl	802483e <_ZN8touchgfx7Outline6lineToEii>
 80248c0:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80248c4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80248c8:	116f      	asrs	r7, r5, #5
 80248ca:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80248ce:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80248d2:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80248d6:	4291      	cmp	r1, r2
 80248d8:	d015      	beq.n	8024906 <_ZN8touchgfx7Outline6moveToEii+0x68>
 80248da:	8b61      	ldrh	r1, [r4, #26]
 80248dc:	8b22      	ldrh	r2, [r4, #24]
 80248de:	430a      	orrs	r2, r1
 80248e0:	d00b      	beq.n	80248fa <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80248e2:	2b00      	cmp	r3, #0
 80248e4:	db09      	blt.n	80248fa <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80248e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80248e8:	429a      	cmp	r2, r3
 80248ea:	dd06      	ble.n	80248fa <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80248ec:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80248f0:	429a      	cmp	r2, r3
 80248f2:	d30d      	bcc.n	8024910 <_ZN8touchgfx7Outline6moveToEii+0x72>
 80248f4:	2301      	movs	r3, #1
 80248f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80248fa:	2300      	movs	r3, #0
 80248fc:	f8a4 c014 	strh.w	ip, [r4, #20]
 8024900:	82e7      	strh	r7, [r4, #22]
 8024902:	8323      	strh	r3, [r4, #24]
 8024904:	8363      	strh	r3, [r4, #26]
 8024906:	61e6      	str	r6, [r4, #28]
 8024908:	62a5      	str	r5, [r4, #40]	; 0x28
 802490a:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024910:	f104 0314 	add.w	r3, r4, #20
 8024914:	6922      	ldr	r2, [r4, #16]
 8024916:	cb03      	ldmia	r3!, {r0, r1}
 8024918:	6010      	str	r0, [r2, #0]
 802491a:	6051      	str	r1, [r2, #4]
 802491c:	6923      	ldr	r3, [r4, #16]
 802491e:	3308      	adds	r3, #8
 8024920:	6123      	str	r3, [r4, #16]
 8024922:	68a3      	ldr	r3, [r4, #8]
 8024924:	3301      	adds	r3, #1
 8024926:	60a3      	str	r3, [r4, #8]
 8024928:	e7e7      	b.n	80248fa <_ZN8touchgfx7Outline6moveToEii+0x5c>

0802492a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802492a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802492e:	b0d1      	sub	sp, #324	; 0x144
 8024930:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8024934:	466c      	mov	r4, sp
 8024936:	1a0d      	subs	r5, r1, r0
 8024938:	f100 0208 	add.w	r2, r0, #8
 802493c:	2d48      	cmp	r5, #72	; 0x48
 802493e:	f340 80ba 	ble.w	8024ab6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024942:	112d      	asrs	r5, r5, #4
 8024944:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8024948:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802494c:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8024950:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8024954:	f9b0 8000 	ldrsh.w	r8, [r0]
 8024958:	681e      	ldr	r6, [r3, #0]
 802495a:	6006      	str	r6, [r0, #0]
 802495c:	685e      	ldr	r6, [r3, #4]
 802495e:	6046      	str	r6, [r0, #4]
 8024960:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8024964:	f8a3 c004 	strh.w	ip, [r3, #4]
 8024968:	f8a3 e002 	strh.w	lr, [r3, #2]
 802496c:	80df      	strh	r7, [r3, #6]
 802496e:	f1a1 0308 	sub.w	r3, r1, #8
 8024972:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8024976:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802497a:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802497e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024982:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024986:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802498a:	45ac      	cmp	ip, r5
 802498c:	dd0f      	ble.n	80249ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802498e:	681d      	ldr	r5, [r3, #0]
 8024990:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8024994:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8024998:	6015      	str	r5, [r2, #0]
 802499a:	685d      	ldr	r5, [r3, #4]
 802499c:	6055      	str	r5, [r2, #4]
 802499e:	f821 7c08 	strh.w	r7, [r1, #-8]
 80249a2:	f821 6c06 	strh.w	r6, [r1, #-6]
 80249a6:	f821 ec04 	strh.w	lr, [r1, #-4]
 80249aa:	f821 cc02 	strh.w	ip, [r1, #-2]
 80249ae:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80249b2:	f9b0 7000 	ldrsh.w	r7, [r0]
 80249b6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80249ba:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80249be:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80249c2:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80249c6:	4565      	cmp	r5, ip
 80249c8:	dd0d      	ble.n	80249e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80249ca:	6815      	ldr	r5, [r2, #0]
 80249cc:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80249d0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80249d4:	6005      	str	r5, [r0, #0]
 80249d6:	6855      	ldr	r5, [r2, #4]
 80249d8:	8107      	strh	r7, [r0, #8]
 80249da:	6045      	str	r5, [r0, #4]
 80249dc:	8146      	strh	r6, [r0, #10]
 80249de:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80249e2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80249e6:	f9b0 7000 	ldrsh.w	r7, [r0]
 80249ea:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80249ee:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80249f2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80249f6:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80249fa:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80249fe:	45ac      	cmp	ip, r5
 8024a00:	dd0f      	ble.n	8024a22 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024a02:	681d      	ldr	r5, [r3, #0]
 8024a04:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024a08:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024a0c:	6005      	str	r5, [r0, #0]
 8024a0e:	685d      	ldr	r5, [r3, #4]
 8024a10:	6045      	str	r5, [r0, #4]
 8024a12:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024a16:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024a1a:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024a1e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024a22:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8024a26:	f102 0508 	add.w	r5, r2, #8
 8024a2a:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8024a2e:	f9b0 e000 	ldrsh.w	lr, [r0]
 8024a32:	462f      	mov	r7, r5
 8024a34:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8024a38:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8024a3c:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8024a40:	45b2      	cmp	sl, r6
 8024a42:	dc18      	bgt.n	8024a76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8024a44:	3b08      	subs	r3, #8
 8024a46:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8024a4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024a4e:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8024a52:	45b2      	cmp	sl, r6
 8024a54:	dbf6      	blt.n	8024a44 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8024a56:	42ab      	cmp	r3, r5
 8024a58:	681e      	ldr	r6, [r3, #0]
 8024a5a:	d30e      	bcc.n	8024a7a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8024a5c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8024a60:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8024a64:	602e      	str	r6, [r5, #0]
 8024a66:	685e      	ldr	r6, [r3, #4]
 8024a68:	606e      	str	r6, [r5, #4]
 8024a6a:	f8a3 9000 	strh.w	r9, [r3]
 8024a6e:	f8a3 8002 	strh.w	r8, [r3, #2]
 8024a72:	809f      	strh	r7, [r3, #4]
 8024a74:	80da      	strh	r2, [r3, #6]
 8024a76:	462a      	mov	r2, r5
 8024a78:	e7d3      	b.n	8024a22 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024a7a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8024a7e:	6006      	str	r6, [r0, #0]
 8024a80:	685e      	ldr	r6, [r3, #4]
 8024a82:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8024a86:	6046      	str	r6, [r0, #4]
 8024a88:	1a1e      	subs	r6, r3, r0
 8024a8a:	80da      	strh	r2, [r3, #6]
 8024a8c:	1b4a      	subs	r2, r1, r5
 8024a8e:	f8a3 e000 	strh.w	lr, [r3]
 8024a92:	10d2      	asrs	r2, r2, #3
 8024a94:	f8a3 c002 	strh.w	ip, [r3, #2]
 8024a98:	f8a3 8004 	strh.w	r8, [r3, #4]
 8024a9c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8024aa0:	bfb5      	itete	lt
 8024aa2:	e9c4 0300 	strdlt	r0, r3, [r4]
 8024aa6:	4607      	movge	r7, r0
 8024aa8:	460b      	movlt	r3, r1
 8024aaa:	e9c4 5100 	strdge	r5, r1, [r4]
 8024aae:	4638      	mov	r0, r7
 8024ab0:	3408      	adds	r4, #8
 8024ab2:	4619      	mov	r1, r3
 8024ab4:	e73f      	b.n	8024936 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024ab6:	4291      	cmp	r1, r2
 8024ab8:	d925      	bls.n	8024b06 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8024aba:	f1a2 0310 	sub.w	r3, r2, #16
 8024abe:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8024ac2:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8024ac6:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8024aca:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8024ace:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8024ad2:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8024ad6:	42b5      	cmp	r5, r6
 8024ad8:	dd13      	ble.n	8024b02 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8024ada:	461d      	mov	r5, r3
 8024adc:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8024ae0:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8024ae4:	3b08      	subs	r3, #8
 8024ae6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8024aea:	619e      	str	r6, [r3, #24]
 8024aec:	42a8      	cmp	r0, r5
 8024aee:	686e      	ldr	r6, [r5, #4]
 8024af0:	f8a3 c010 	strh.w	ip, [r3, #16]
 8024af4:	61de      	str	r6, [r3, #28]
 8024af6:	825f      	strh	r7, [r3, #18]
 8024af8:	f8a3 8014 	strh.w	r8, [r3, #20]
 8024afc:	f8a3 e016 	strh.w	lr, [r3, #22]
 8024b00:	d1dd      	bne.n	8024abe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8024b02:	3208      	adds	r2, #8
 8024b04:	e7d7      	b.n	8024ab6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024b06:	466b      	mov	r3, sp
 8024b08:	429c      	cmp	r4, r3
 8024b0a:	d903      	bls.n	8024b14 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8024b0c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8024b10:	3c08      	subs	r4, #8
 8024b12:	e710      	b.n	8024936 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024b14:	b051      	add	sp, #324	; 0x144
 8024b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024b1a <_ZN8touchgfx7Outline9sortCellsEv>:
 8024b1a:	6881      	ldr	r1, [r0, #8]
 8024b1c:	b111      	cbz	r1, 8024b24 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8024b1e:	68c0      	ldr	r0, [r0, #12]
 8024b20:	f7ff bf03 	b.w	802492a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8024b24:	4770      	bx	lr

08024b26 <_ZN8touchgfx7Outline8getCellsEv>:
 8024b26:	b510      	push	{r4, lr}
 8024b28:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024b2a:	4604      	mov	r4, r0
 8024b2c:	07da      	lsls	r2, r3, #31
 8024b2e:	d507      	bpl.n	8024b40 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8024b30:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8024b34:	f7ff fe83 	bl	802483e <_ZN8touchgfx7Outline6lineToEii>
 8024b38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024b3a:	f023 0301 	bic.w	r3, r3, #1
 8024b3e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024b40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024b42:	079b      	lsls	r3, r3, #30
 8024b44:	d51a      	bpl.n	8024b7c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8024b46:	8b62      	ldrh	r2, [r4, #26]
 8024b48:	8b23      	ldrh	r3, [r4, #24]
 8024b4a:	4313      	orrs	r3, r2
 8024b4c:	d00d      	beq.n	8024b6a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024b4e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024b52:	2b00      	cmp	r3, #0
 8024b54:	db09      	blt.n	8024b6a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024b56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024b58:	4293      	cmp	r3, r2
 8024b5a:	da06      	bge.n	8024b6a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024b5c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8024b60:	429a      	cmp	r2, r3
 8024b62:	d80d      	bhi.n	8024b80 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8024b64:	2301      	movs	r3, #1
 8024b66:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024b6a:	68a0      	ldr	r0, [r4, #8]
 8024b6c:	b138      	cbz	r0, 8024b7e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8024b6e:	4620      	mov	r0, r4
 8024b70:	f7ff ffd3 	bl	8024b1a <_ZN8touchgfx7Outline9sortCellsEv>
 8024b74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024b76:	f023 0302 	bic.w	r3, r3, #2
 8024b7a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024b7c:	68e0      	ldr	r0, [r4, #12]
 8024b7e:	bd10      	pop	{r4, pc}
 8024b80:	f104 0314 	add.w	r3, r4, #20
 8024b84:	6922      	ldr	r2, [r4, #16]
 8024b86:	cb03      	ldmia	r3!, {r0, r1}
 8024b88:	6010      	str	r0, [r2, #0]
 8024b8a:	6051      	str	r1, [r2, #4]
 8024b8c:	6923      	ldr	r3, [r4, #16]
 8024b8e:	3308      	adds	r3, #8
 8024b90:	6123      	str	r3, [r4, #16]
 8024b92:	68a3      	ldr	r3, [r4, #8]
 8024b94:	3301      	adds	r3, #1
 8024b96:	60a3      	str	r3, [r4, #8]
 8024b98:	e7e7      	b.n	8024b6a <_ZN8touchgfx7Outline8getCellsEv+0x44>

08024b9a <_ZN8touchgfx8ScanlineD1Ev>:
 8024b9a:	4770      	bx	lr

08024b9c <_ZN8touchgfx8ScanlineD0Ev>:
 8024b9c:	b510      	push	{r4, lr}
 8024b9e:	4604      	mov	r4, r0
 8024ba0:	2124      	movs	r1, #36	; 0x24
 8024ba2:	f000 f87a 	bl	8024c9a <_ZdlPvj>
 8024ba6:	4620      	mov	r0, r4
 8024ba8:	bd10      	pop	{r4, pc}

08024baa <_ZN8touchgfx8Scanline5resetEv>:
 8024baa:	b510      	push	{r4, lr}
 8024bac:	4604      	mov	r4, r0
 8024bae:	f7f3 f8f9 	bl	8017da4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8024bb2:	61a0      	str	r0, [r4, #24]
 8024bb4:	f7f3 f8fc 	bl	8017db0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8024bb8:	61e0      	str	r0, [r4, #28]
 8024bba:	f7f3 f8ff 	bl	8017dbc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8024bbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024bc2:	6220      	str	r0, [r4, #32]
 8024bc4:	6160      	str	r0, [r4, #20]
 8024bc6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8024bca:	69e3      	ldr	r3, [r4, #28]
 8024bcc:	6123      	str	r3, [r4, #16]
 8024bce:	2300      	movs	r3, #0
 8024bd0:	60e3      	str	r3, [r4, #12]
 8024bd2:	bd10      	pop	{r4, pc}

08024bd4 <_ZN8touchgfx8ScanlineC1Ev>:
 8024bd4:	4b07      	ldr	r3, [pc, #28]	; (8024bf4 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8024bd6:	b510      	push	{r4, lr}
 8024bd8:	6003      	str	r3, [r0, #0]
 8024bda:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024bde:	4604      	mov	r4, r0
 8024be0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024be4:	2300      	movs	r3, #0
 8024be6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024bea:	6143      	str	r3, [r0, #20]
 8024bec:	f7ff ffdd 	bl	8024baa <_ZN8touchgfx8Scanline5resetEv>
 8024bf0:	4620      	mov	r0, r4
 8024bf2:	bd10      	pop	{r4, pc}
 8024bf4:	08029f74 	.word	0x08029f74

08024bf8 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8024bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024bfc:	1e0c      	subs	r4, r1, #0
 8024bfe:	4605      	mov	r5, r0
 8024c00:	4617      	mov	r7, r2
 8024c02:	461e      	mov	r6, r3
 8024c04:	da03      	bge.n	8024c0e <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8024c06:	4426      	add	r6, r4
 8024c08:	2e01      	cmp	r6, #1
 8024c0a:	d421      	bmi.n	8024c50 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024c0c:	2400      	movs	r4, #0
 8024c0e:	f7f3 f8c3 	bl	8017d98 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024c12:	42a0      	cmp	r0, r4
 8024c14:	d91c      	bls.n	8024c50 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024c16:	eb04 0806 	add.w	r8, r4, r6
 8024c1a:	f7f3 f8bd 	bl	8017d98 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024c1e:	4580      	cmp	r8, r0
 8024c20:	d902      	bls.n	8024c28 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8024c22:	f7f3 f8b9 	bl	8017d98 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024c26:	1b06      	subs	r6, r0, r4
 8024c28:	69a8      	ldr	r0, [r5, #24]
 8024c2a:	4632      	mov	r2, r6
 8024c2c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8024c30:	4420      	add	r0, r4
 8024c32:	f7f4 fdb0 	bl	8019796 <_ZN8touchgfx6memsetEPvhm>
 8024c36:	686b      	ldr	r3, [r5, #4]
 8024c38:	b2b2      	uxth	r2, r6
 8024c3a:	3301      	adds	r3, #1
 8024c3c:	42a3      	cmp	r3, r4
 8024c3e:	696b      	ldr	r3, [r5, #20]
 8024c40:	d108      	bne.n	8024c54 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8024c42:	8819      	ldrh	r1, [r3, #0]
 8024c44:	440a      	add	r2, r1
 8024c46:	801a      	strh	r2, [r3, #0]
 8024c48:	3c01      	subs	r4, #1
 8024c4a:	4434      	add	r4, r6
 8024c4c:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8024c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024c54:	1c99      	adds	r1, r3, #2
 8024c56:	6169      	str	r1, [r5, #20]
 8024c58:	805a      	strh	r2, [r3, #2]
 8024c5a:	692b      	ldr	r3, [r5, #16]
 8024c5c:	1c9a      	adds	r2, r3, #2
 8024c5e:	612a      	str	r2, [r5, #16]
 8024c60:	805c      	strh	r4, [r3, #2]
 8024c62:	68eb      	ldr	r3, [r5, #12]
 8024c64:	3301      	adds	r3, #1
 8024c66:	60eb      	str	r3, [r5, #12]
 8024c68:	e7ee      	b.n	8024c48 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08024c6a <_ZN8touchgfx15RenderingBufferC1Ev>:
 8024c6a:	2200      	movs	r2, #0
 8024c6c:	6002      	str	r2, [r0, #0]
 8024c6e:	7102      	strb	r2, [r0, #4]
 8024c70:	6102      	str	r2, [r0, #16]
 8024c72:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8024c76:	4770      	bx	lr

08024c78 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8024c78:	4770      	bx	lr

08024c7a <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8024c7a:	6083      	str	r3, [r0, #8]
 8024c7c:	9b00      	ldr	r3, [sp, #0]
 8024c7e:	6001      	str	r1, [r0, #0]
 8024c80:	60c3      	str	r3, [r0, #12]
 8024c82:	9b01      	ldr	r3, [sp, #4]
 8024c84:	7102      	strb	r2, [r0, #4]
 8024c86:	6103      	str	r3, [r0, #16]
 8024c88:	4770      	bx	lr

08024c8a <__aeabi_atexit>:
 8024c8a:	460b      	mov	r3, r1
 8024c8c:	4601      	mov	r1, r0
 8024c8e:	4618      	mov	r0, r3
 8024c90:	f000 b852 	b.w	8024d38 <__cxa_atexit>

08024c94 <__cxa_pure_virtual>:
 8024c94:	b508      	push	{r3, lr}
 8024c96:	f000 f81f 	bl	8024cd8 <_ZSt9terminatev>

08024c9a <_ZdlPvj>:
 8024c9a:	f000 b80f 	b.w	8024cbc <_ZdlPv>

08024c9e <__cxa_guard_acquire>:
 8024c9e:	6803      	ldr	r3, [r0, #0]
 8024ca0:	07db      	lsls	r3, r3, #31
 8024ca2:	d406      	bmi.n	8024cb2 <__cxa_guard_acquire+0x14>
 8024ca4:	7843      	ldrb	r3, [r0, #1]
 8024ca6:	b103      	cbz	r3, 8024caa <__cxa_guard_acquire+0xc>
 8024ca8:	deff      	udf	#255	; 0xff
 8024caa:	2301      	movs	r3, #1
 8024cac:	7043      	strb	r3, [r0, #1]
 8024cae:	4618      	mov	r0, r3
 8024cb0:	4770      	bx	lr
 8024cb2:	2000      	movs	r0, #0
 8024cb4:	4770      	bx	lr

08024cb6 <__cxa_guard_release>:
 8024cb6:	2301      	movs	r3, #1
 8024cb8:	6003      	str	r3, [r0, #0]
 8024cba:	4770      	bx	lr

08024cbc <_ZdlPv>:
 8024cbc:	f000 b88e 	b.w	8024ddc <free>

08024cc0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024cc0:	b508      	push	{r3, lr}
 8024cc2:	4780      	blx	r0
 8024cc4:	f000 f80d 	bl	8024ce2 <abort>

08024cc8 <_ZSt13get_terminatev>:
 8024cc8:	4b02      	ldr	r3, [pc, #8]	; (8024cd4 <_ZSt13get_terminatev+0xc>)
 8024cca:	6818      	ldr	r0, [r3, #0]
 8024ccc:	f3bf 8f5b 	dmb	ish
 8024cd0:	4770      	bx	lr
 8024cd2:	bf00      	nop
 8024cd4:	20000098 	.word	0x20000098

08024cd8 <_ZSt9terminatev>:
 8024cd8:	b508      	push	{r3, lr}
 8024cda:	f7ff fff5 	bl	8024cc8 <_ZSt13get_terminatev>
 8024cde:	f7ff ffef 	bl	8024cc0 <_ZN10__cxxabiv111__terminateEPFvvE>

08024ce2 <abort>:
 8024ce2:	b508      	push	{r3, lr}
 8024ce4:	2006      	movs	r0, #6
 8024ce6:	f000 fc3d 	bl	8025564 <raise>
 8024cea:	2001      	movs	r0, #1
 8024cec:	f7de fcac 	bl	8003648 <_exit>

08024cf0 <__assert_func>:
 8024cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024cf2:	461c      	mov	r4, r3
 8024cf4:	4b09      	ldr	r3, [pc, #36]	; (8024d1c <__assert_func+0x2c>)
 8024cf6:	681b      	ldr	r3, [r3, #0]
 8024cf8:	4605      	mov	r5, r0
 8024cfa:	68d8      	ldr	r0, [r3, #12]
 8024cfc:	b152      	cbz	r2, 8024d14 <__assert_func+0x24>
 8024cfe:	4b08      	ldr	r3, [pc, #32]	; (8024d20 <__assert_func+0x30>)
 8024d00:	9100      	str	r1, [sp, #0]
 8024d02:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8024d06:	4907      	ldr	r1, [pc, #28]	; (8024d24 <__assert_func+0x34>)
 8024d08:	462b      	mov	r3, r5
 8024d0a:	4622      	mov	r2, r4
 8024d0c:	f000 f828 	bl	8024d60 <fiprintf>
 8024d10:	f7ff ffe7 	bl	8024ce2 <abort>
 8024d14:	4b04      	ldr	r3, [pc, #16]	; (8024d28 <__assert_func+0x38>)
 8024d16:	461a      	mov	r2, r3
 8024d18:	e7f2      	b.n	8024d00 <__assert_func+0x10>
 8024d1a:	bf00      	nop
 8024d1c:	2000009c 	.word	0x2000009c
 8024d20:	08029f7c 	.word	0x08029f7c
 8024d24:	08029f89 	.word	0x08029f89
 8024d28:	08029fb7 	.word	0x08029fb7

08024d2c <atexit>:
 8024d2c:	2300      	movs	r3, #0
 8024d2e:	4601      	mov	r1, r0
 8024d30:	461a      	mov	r2, r3
 8024d32:	4618      	mov	r0, r3
 8024d34:	f000 bcf2 	b.w	802571c <__register_exitproc>

08024d38 <__cxa_atexit>:
 8024d38:	b510      	push	{r4, lr}
 8024d3a:	4c05      	ldr	r4, [pc, #20]	; (8024d50 <__cxa_atexit+0x18>)
 8024d3c:	4613      	mov	r3, r2
 8024d3e:	b12c      	cbz	r4, 8024d4c <__cxa_atexit+0x14>
 8024d40:	460a      	mov	r2, r1
 8024d42:	4601      	mov	r1, r0
 8024d44:	2002      	movs	r0, #2
 8024d46:	f000 fce9 	bl	802571c <__register_exitproc>
 8024d4a:	bd10      	pop	{r4, pc}
 8024d4c:	4620      	mov	r0, r4
 8024d4e:	e7fc      	b.n	8024d4a <__cxa_atexit+0x12>
 8024d50:	0802571d 	.word	0x0802571d

08024d54 <__errno>:
 8024d54:	4b01      	ldr	r3, [pc, #4]	; (8024d5c <__errno+0x8>)
 8024d56:	6818      	ldr	r0, [r3, #0]
 8024d58:	4770      	bx	lr
 8024d5a:	bf00      	nop
 8024d5c:	2000009c 	.word	0x2000009c

08024d60 <fiprintf>:
 8024d60:	b40e      	push	{r1, r2, r3}
 8024d62:	b503      	push	{r0, r1, lr}
 8024d64:	4601      	mov	r1, r0
 8024d66:	ab03      	add	r3, sp, #12
 8024d68:	4805      	ldr	r0, [pc, #20]	; (8024d80 <fiprintf+0x20>)
 8024d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8024d6e:	6800      	ldr	r0, [r0, #0]
 8024d70:	9301      	str	r3, [sp, #4]
 8024d72:	f000 f921 	bl	8024fb8 <_vfiprintf_r>
 8024d76:	b002      	add	sp, #8
 8024d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8024d7c:	b003      	add	sp, #12
 8024d7e:	4770      	bx	lr
 8024d80:	2000009c 	.word	0x2000009c

08024d84 <__libc_init_array>:
 8024d84:	b570      	push	{r4, r5, r6, lr}
 8024d86:	4e0d      	ldr	r6, [pc, #52]	; (8024dbc <__libc_init_array+0x38>)
 8024d88:	4c0d      	ldr	r4, [pc, #52]	; (8024dc0 <__libc_init_array+0x3c>)
 8024d8a:	1ba4      	subs	r4, r4, r6
 8024d8c:	10a4      	asrs	r4, r4, #2
 8024d8e:	2500      	movs	r5, #0
 8024d90:	42a5      	cmp	r5, r4
 8024d92:	d109      	bne.n	8024da8 <__libc_init_array+0x24>
 8024d94:	4e0b      	ldr	r6, [pc, #44]	; (8024dc4 <__libc_init_array+0x40>)
 8024d96:	4c0c      	ldr	r4, [pc, #48]	; (8024dc8 <__libc_init_array+0x44>)
 8024d98:	f000 ffb0 	bl	8025cfc <_init>
 8024d9c:	1ba4      	subs	r4, r4, r6
 8024d9e:	10a4      	asrs	r4, r4, #2
 8024da0:	2500      	movs	r5, #0
 8024da2:	42a5      	cmp	r5, r4
 8024da4:	d105      	bne.n	8024db2 <__libc_init_array+0x2e>
 8024da6:	bd70      	pop	{r4, r5, r6, pc}
 8024da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024dac:	4798      	blx	r3
 8024dae:	3501      	adds	r5, #1
 8024db0:	e7ee      	b.n	8024d90 <__libc_init_array+0xc>
 8024db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024db6:	4798      	blx	r3
 8024db8:	3501      	adds	r5, #1
 8024dba:	e7f2      	b.n	8024da2 <__libc_init_array+0x1e>
 8024dbc:	08061488 	.word	0x08061488
 8024dc0:	08061488 	.word	0x08061488
 8024dc4:	08061488 	.word	0x08061488
 8024dc8:	0806149c 	.word	0x0806149c

08024dcc <malloc>:
 8024dcc:	4b02      	ldr	r3, [pc, #8]	; (8024dd8 <malloc+0xc>)
 8024dce:	4601      	mov	r1, r0
 8024dd0:	6818      	ldr	r0, [r3, #0]
 8024dd2:	f000 b86d 	b.w	8024eb0 <_malloc_r>
 8024dd6:	bf00      	nop
 8024dd8:	2000009c 	.word	0x2000009c

08024ddc <free>:
 8024ddc:	4b02      	ldr	r3, [pc, #8]	; (8024de8 <free+0xc>)
 8024dde:	4601      	mov	r1, r0
 8024de0:	6818      	ldr	r0, [r3, #0]
 8024de2:	f000 b817 	b.w	8024e14 <_free_r>
 8024de6:	bf00      	nop
 8024de8:	2000009c 	.word	0x2000009c

08024dec <memcpy>:
 8024dec:	b510      	push	{r4, lr}
 8024dee:	1e43      	subs	r3, r0, #1
 8024df0:	440a      	add	r2, r1
 8024df2:	4291      	cmp	r1, r2
 8024df4:	d100      	bne.n	8024df8 <memcpy+0xc>
 8024df6:	bd10      	pop	{r4, pc}
 8024df8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024dfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024e00:	e7f7      	b.n	8024df2 <memcpy+0x6>

08024e02 <memset>:
 8024e02:	4402      	add	r2, r0
 8024e04:	4603      	mov	r3, r0
 8024e06:	4293      	cmp	r3, r2
 8024e08:	d100      	bne.n	8024e0c <memset+0xa>
 8024e0a:	4770      	bx	lr
 8024e0c:	f803 1b01 	strb.w	r1, [r3], #1
 8024e10:	e7f9      	b.n	8024e06 <memset+0x4>
	...

08024e14 <_free_r>:
 8024e14:	b538      	push	{r3, r4, r5, lr}
 8024e16:	4605      	mov	r5, r0
 8024e18:	2900      	cmp	r1, #0
 8024e1a:	d045      	beq.n	8024ea8 <_free_r+0x94>
 8024e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024e20:	1f0c      	subs	r4, r1, #4
 8024e22:	2b00      	cmp	r3, #0
 8024e24:	bfb8      	it	lt
 8024e26:	18e4      	addlt	r4, r4, r3
 8024e28:	f000 feba 	bl	8025ba0 <__malloc_lock>
 8024e2c:	4a1f      	ldr	r2, [pc, #124]	; (8024eac <_free_r+0x98>)
 8024e2e:	6813      	ldr	r3, [r2, #0]
 8024e30:	4610      	mov	r0, r2
 8024e32:	b933      	cbnz	r3, 8024e42 <_free_r+0x2e>
 8024e34:	6063      	str	r3, [r4, #4]
 8024e36:	6014      	str	r4, [r2, #0]
 8024e38:	4628      	mov	r0, r5
 8024e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024e3e:	f000 beb0 	b.w	8025ba2 <__malloc_unlock>
 8024e42:	42a3      	cmp	r3, r4
 8024e44:	d90c      	bls.n	8024e60 <_free_r+0x4c>
 8024e46:	6821      	ldr	r1, [r4, #0]
 8024e48:	1862      	adds	r2, r4, r1
 8024e4a:	4293      	cmp	r3, r2
 8024e4c:	bf04      	itt	eq
 8024e4e:	681a      	ldreq	r2, [r3, #0]
 8024e50:	685b      	ldreq	r3, [r3, #4]
 8024e52:	6063      	str	r3, [r4, #4]
 8024e54:	bf04      	itt	eq
 8024e56:	1852      	addeq	r2, r2, r1
 8024e58:	6022      	streq	r2, [r4, #0]
 8024e5a:	6004      	str	r4, [r0, #0]
 8024e5c:	e7ec      	b.n	8024e38 <_free_r+0x24>
 8024e5e:	4613      	mov	r3, r2
 8024e60:	685a      	ldr	r2, [r3, #4]
 8024e62:	b10a      	cbz	r2, 8024e68 <_free_r+0x54>
 8024e64:	42a2      	cmp	r2, r4
 8024e66:	d9fa      	bls.n	8024e5e <_free_r+0x4a>
 8024e68:	6819      	ldr	r1, [r3, #0]
 8024e6a:	1858      	adds	r0, r3, r1
 8024e6c:	42a0      	cmp	r0, r4
 8024e6e:	d10b      	bne.n	8024e88 <_free_r+0x74>
 8024e70:	6820      	ldr	r0, [r4, #0]
 8024e72:	4401      	add	r1, r0
 8024e74:	1858      	adds	r0, r3, r1
 8024e76:	4282      	cmp	r2, r0
 8024e78:	6019      	str	r1, [r3, #0]
 8024e7a:	d1dd      	bne.n	8024e38 <_free_r+0x24>
 8024e7c:	6810      	ldr	r0, [r2, #0]
 8024e7e:	6852      	ldr	r2, [r2, #4]
 8024e80:	605a      	str	r2, [r3, #4]
 8024e82:	4401      	add	r1, r0
 8024e84:	6019      	str	r1, [r3, #0]
 8024e86:	e7d7      	b.n	8024e38 <_free_r+0x24>
 8024e88:	d902      	bls.n	8024e90 <_free_r+0x7c>
 8024e8a:	230c      	movs	r3, #12
 8024e8c:	602b      	str	r3, [r5, #0]
 8024e8e:	e7d3      	b.n	8024e38 <_free_r+0x24>
 8024e90:	6820      	ldr	r0, [r4, #0]
 8024e92:	1821      	adds	r1, r4, r0
 8024e94:	428a      	cmp	r2, r1
 8024e96:	bf04      	itt	eq
 8024e98:	6811      	ldreq	r1, [r2, #0]
 8024e9a:	6852      	ldreq	r2, [r2, #4]
 8024e9c:	6062      	str	r2, [r4, #4]
 8024e9e:	bf04      	itt	eq
 8024ea0:	1809      	addeq	r1, r1, r0
 8024ea2:	6021      	streq	r1, [r4, #0]
 8024ea4:	605c      	str	r4, [r3, #4]
 8024ea6:	e7c7      	b.n	8024e38 <_free_r+0x24>
 8024ea8:	bd38      	pop	{r3, r4, r5, pc}
 8024eaa:	bf00      	nop
 8024eac:	2000bde4 	.word	0x2000bde4

08024eb0 <_malloc_r>:
 8024eb0:	b570      	push	{r4, r5, r6, lr}
 8024eb2:	1ccd      	adds	r5, r1, #3
 8024eb4:	f025 0503 	bic.w	r5, r5, #3
 8024eb8:	3508      	adds	r5, #8
 8024eba:	2d0c      	cmp	r5, #12
 8024ebc:	bf38      	it	cc
 8024ebe:	250c      	movcc	r5, #12
 8024ec0:	2d00      	cmp	r5, #0
 8024ec2:	4606      	mov	r6, r0
 8024ec4:	db01      	blt.n	8024eca <_malloc_r+0x1a>
 8024ec6:	42a9      	cmp	r1, r5
 8024ec8:	d903      	bls.n	8024ed2 <_malloc_r+0x22>
 8024eca:	230c      	movs	r3, #12
 8024ecc:	6033      	str	r3, [r6, #0]
 8024ece:	2000      	movs	r0, #0
 8024ed0:	bd70      	pop	{r4, r5, r6, pc}
 8024ed2:	f000 fe65 	bl	8025ba0 <__malloc_lock>
 8024ed6:	4a21      	ldr	r2, [pc, #132]	; (8024f5c <_malloc_r+0xac>)
 8024ed8:	6814      	ldr	r4, [r2, #0]
 8024eda:	4621      	mov	r1, r4
 8024edc:	b991      	cbnz	r1, 8024f04 <_malloc_r+0x54>
 8024ede:	4c20      	ldr	r4, [pc, #128]	; (8024f60 <_malloc_r+0xb0>)
 8024ee0:	6823      	ldr	r3, [r4, #0]
 8024ee2:	b91b      	cbnz	r3, 8024eec <_malloc_r+0x3c>
 8024ee4:	4630      	mov	r0, r6
 8024ee6:	f000 fb05 	bl	80254f4 <_sbrk_r>
 8024eea:	6020      	str	r0, [r4, #0]
 8024eec:	4629      	mov	r1, r5
 8024eee:	4630      	mov	r0, r6
 8024ef0:	f000 fb00 	bl	80254f4 <_sbrk_r>
 8024ef4:	1c43      	adds	r3, r0, #1
 8024ef6:	d124      	bne.n	8024f42 <_malloc_r+0x92>
 8024ef8:	230c      	movs	r3, #12
 8024efa:	6033      	str	r3, [r6, #0]
 8024efc:	4630      	mov	r0, r6
 8024efe:	f000 fe50 	bl	8025ba2 <__malloc_unlock>
 8024f02:	e7e4      	b.n	8024ece <_malloc_r+0x1e>
 8024f04:	680b      	ldr	r3, [r1, #0]
 8024f06:	1b5b      	subs	r3, r3, r5
 8024f08:	d418      	bmi.n	8024f3c <_malloc_r+0x8c>
 8024f0a:	2b0b      	cmp	r3, #11
 8024f0c:	d90f      	bls.n	8024f2e <_malloc_r+0x7e>
 8024f0e:	600b      	str	r3, [r1, #0]
 8024f10:	50cd      	str	r5, [r1, r3]
 8024f12:	18cc      	adds	r4, r1, r3
 8024f14:	4630      	mov	r0, r6
 8024f16:	f000 fe44 	bl	8025ba2 <__malloc_unlock>
 8024f1a:	f104 000b 	add.w	r0, r4, #11
 8024f1e:	1d23      	adds	r3, r4, #4
 8024f20:	f020 0007 	bic.w	r0, r0, #7
 8024f24:	1ac3      	subs	r3, r0, r3
 8024f26:	d0d3      	beq.n	8024ed0 <_malloc_r+0x20>
 8024f28:	425a      	negs	r2, r3
 8024f2a:	50e2      	str	r2, [r4, r3]
 8024f2c:	e7d0      	b.n	8024ed0 <_malloc_r+0x20>
 8024f2e:	428c      	cmp	r4, r1
 8024f30:	684b      	ldr	r3, [r1, #4]
 8024f32:	bf16      	itet	ne
 8024f34:	6063      	strne	r3, [r4, #4]
 8024f36:	6013      	streq	r3, [r2, #0]
 8024f38:	460c      	movne	r4, r1
 8024f3a:	e7eb      	b.n	8024f14 <_malloc_r+0x64>
 8024f3c:	460c      	mov	r4, r1
 8024f3e:	6849      	ldr	r1, [r1, #4]
 8024f40:	e7cc      	b.n	8024edc <_malloc_r+0x2c>
 8024f42:	1cc4      	adds	r4, r0, #3
 8024f44:	f024 0403 	bic.w	r4, r4, #3
 8024f48:	42a0      	cmp	r0, r4
 8024f4a:	d005      	beq.n	8024f58 <_malloc_r+0xa8>
 8024f4c:	1a21      	subs	r1, r4, r0
 8024f4e:	4630      	mov	r0, r6
 8024f50:	f000 fad0 	bl	80254f4 <_sbrk_r>
 8024f54:	3001      	adds	r0, #1
 8024f56:	d0cf      	beq.n	8024ef8 <_malloc_r+0x48>
 8024f58:	6025      	str	r5, [r4, #0]
 8024f5a:	e7db      	b.n	8024f14 <_malloc_r+0x64>
 8024f5c:	2000bde4 	.word	0x2000bde4
 8024f60:	2000bde8 	.word	0x2000bde8

08024f64 <__sfputc_r>:
 8024f64:	6893      	ldr	r3, [r2, #8]
 8024f66:	3b01      	subs	r3, #1
 8024f68:	2b00      	cmp	r3, #0
 8024f6a:	b410      	push	{r4}
 8024f6c:	6093      	str	r3, [r2, #8]
 8024f6e:	da08      	bge.n	8024f82 <__sfputc_r+0x1e>
 8024f70:	6994      	ldr	r4, [r2, #24]
 8024f72:	42a3      	cmp	r3, r4
 8024f74:	db01      	blt.n	8024f7a <__sfputc_r+0x16>
 8024f76:	290a      	cmp	r1, #10
 8024f78:	d103      	bne.n	8024f82 <__sfputc_r+0x1e>
 8024f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024f7e:	f000 bb0d 	b.w	802559c <__swbuf_r>
 8024f82:	6813      	ldr	r3, [r2, #0]
 8024f84:	1c58      	adds	r0, r3, #1
 8024f86:	6010      	str	r0, [r2, #0]
 8024f88:	7019      	strb	r1, [r3, #0]
 8024f8a:	4608      	mov	r0, r1
 8024f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024f90:	4770      	bx	lr

08024f92 <__sfputs_r>:
 8024f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f94:	4606      	mov	r6, r0
 8024f96:	460f      	mov	r7, r1
 8024f98:	4614      	mov	r4, r2
 8024f9a:	18d5      	adds	r5, r2, r3
 8024f9c:	42ac      	cmp	r4, r5
 8024f9e:	d101      	bne.n	8024fa4 <__sfputs_r+0x12>
 8024fa0:	2000      	movs	r0, #0
 8024fa2:	e007      	b.n	8024fb4 <__sfputs_r+0x22>
 8024fa4:	463a      	mov	r2, r7
 8024fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024faa:	4630      	mov	r0, r6
 8024fac:	f7ff ffda 	bl	8024f64 <__sfputc_r>
 8024fb0:	1c43      	adds	r3, r0, #1
 8024fb2:	d1f3      	bne.n	8024f9c <__sfputs_r+0xa>
 8024fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024fb8 <_vfiprintf_r>:
 8024fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fbc:	460c      	mov	r4, r1
 8024fbe:	b09d      	sub	sp, #116	; 0x74
 8024fc0:	4617      	mov	r7, r2
 8024fc2:	461d      	mov	r5, r3
 8024fc4:	4606      	mov	r6, r0
 8024fc6:	b118      	cbz	r0, 8024fd0 <_vfiprintf_r+0x18>
 8024fc8:	6983      	ldr	r3, [r0, #24]
 8024fca:	b90b      	cbnz	r3, 8024fd0 <_vfiprintf_r+0x18>
 8024fcc:	f000 fcfa 	bl	80259c4 <__sinit>
 8024fd0:	4b7c      	ldr	r3, [pc, #496]	; (80251c4 <_vfiprintf_r+0x20c>)
 8024fd2:	429c      	cmp	r4, r3
 8024fd4:	d158      	bne.n	8025088 <_vfiprintf_r+0xd0>
 8024fd6:	6874      	ldr	r4, [r6, #4]
 8024fd8:	89a3      	ldrh	r3, [r4, #12]
 8024fda:	0718      	lsls	r0, r3, #28
 8024fdc:	d55e      	bpl.n	802509c <_vfiprintf_r+0xe4>
 8024fde:	6923      	ldr	r3, [r4, #16]
 8024fe0:	2b00      	cmp	r3, #0
 8024fe2:	d05b      	beq.n	802509c <_vfiprintf_r+0xe4>
 8024fe4:	2300      	movs	r3, #0
 8024fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8024fe8:	2320      	movs	r3, #32
 8024fea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024fee:	2330      	movs	r3, #48	; 0x30
 8024ff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024ff4:	9503      	str	r5, [sp, #12]
 8024ff6:	f04f 0b01 	mov.w	fp, #1
 8024ffa:	46b8      	mov	r8, r7
 8024ffc:	4645      	mov	r5, r8
 8024ffe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8025002:	b10b      	cbz	r3, 8025008 <_vfiprintf_r+0x50>
 8025004:	2b25      	cmp	r3, #37	; 0x25
 8025006:	d154      	bne.n	80250b2 <_vfiprintf_r+0xfa>
 8025008:	ebb8 0a07 	subs.w	sl, r8, r7
 802500c:	d00b      	beq.n	8025026 <_vfiprintf_r+0x6e>
 802500e:	4653      	mov	r3, sl
 8025010:	463a      	mov	r2, r7
 8025012:	4621      	mov	r1, r4
 8025014:	4630      	mov	r0, r6
 8025016:	f7ff ffbc 	bl	8024f92 <__sfputs_r>
 802501a:	3001      	adds	r0, #1
 802501c:	f000 80c2 	beq.w	80251a4 <_vfiprintf_r+0x1ec>
 8025020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025022:	4453      	add	r3, sl
 8025024:	9309      	str	r3, [sp, #36]	; 0x24
 8025026:	f898 3000 	ldrb.w	r3, [r8]
 802502a:	2b00      	cmp	r3, #0
 802502c:	f000 80ba 	beq.w	80251a4 <_vfiprintf_r+0x1ec>
 8025030:	2300      	movs	r3, #0
 8025032:	f04f 32ff 	mov.w	r2, #4294967295
 8025036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802503a:	9304      	str	r3, [sp, #16]
 802503c:	9307      	str	r3, [sp, #28]
 802503e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025042:	931a      	str	r3, [sp, #104]	; 0x68
 8025044:	46a8      	mov	r8, r5
 8025046:	2205      	movs	r2, #5
 8025048:	f818 1b01 	ldrb.w	r1, [r8], #1
 802504c:	485e      	ldr	r0, [pc, #376]	; (80251c8 <_vfiprintf_r+0x210>)
 802504e:	f7db f8df 	bl	8000210 <memchr>
 8025052:	9b04      	ldr	r3, [sp, #16]
 8025054:	bb78      	cbnz	r0, 80250b6 <_vfiprintf_r+0xfe>
 8025056:	06d9      	lsls	r1, r3, #27
 8025058:	bf44      	itt	mi
 802505a:	2220      	movmi	r2, #32
 802505c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025060:	071a      	lsls	r2, r3, #28
 8025062:	bf44      	itt	mi
 8025064:	222b      	movmi	r2, #43	; 0x2b
 8025066:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802506a:	782a      	ldrb	r2, [r5, #0]
 802506c:	2a2a      	cmp	r2, #42	; 0x2a
 802506e:	d02a      	beq.n	80250c6 <_vfiprintf_r+0x10e>
 8025070:	9a07      	ldr	r2, [sp, #28]
 8025072:	46a8      	mov	r8, r5
 8025074:	2000      	movs	r0, #0
 8025076:	250a      	movs	r5, #10
 8025078:	4641      	mov	r1, r8
 802507a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802507e:	3b30      	subs	r3, #48	; 0x30
 8025080:	2b09      	cmp	r3, #9
 8025082:	d969      	bls.n	8025158 <_vfiprintf_r+0x1a0>
 8025084:	b360      	cbz	r0, 80250e0 <_vfiprintf_r+0x128>
 8025086:	e024      	b.n	80250d2 <_vfiprintf_r+0x11a>
 8025088:	4b50      	ldr	r3, [pc, #320]	; (80251cc <_vfiprintf_r+0x214>)
 802508a:	429c      	cmp	r4, r3
 802508c:	d101      	bne.n	8025092 <_vfiprintf_r+0xda>
 802508e:	68b4      	ldr	r4, [r6, #8]
 8025090:	e7a2      	b.n	8024fd8 <_vfiprintf_r+0x20>
 8025092:	4b4f      	ldr	r3, [pc, #316]	; (80251d0 <_vfiprintf_r+0x218>)
 8025094:	429c      	cmp	r4, r3
 8025096:	bf08      	it	eq
 8025098:	68f4      	ldreq	r4, [r6, #12]
 802509a:	e79d      	b.n	8024fd8 <_vfiprintf_r+0x20>
 802509c:	4621      	mov	r1, r4
 802509e:	4630      	mov	r0, r6
 80250a0:	f000 face 	bl	8025640 <__swsetup_r>
 80250a4:	2800      	cmp	r0, #0
 80250a6:	d09d      	beq.n	8024fe4 <_vfiprintf_r+0x2c>
 80250a8:	f04f 30ff 	mov.w	r0, #4294967295
 80250ac:	b01d      	add	sp, #116	; 0x74
 80250ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250b2:	46a8      	mov	r8, r5
 80250b4:	e7a2      	b.n	8024ffc <_vfiprintf_r+0x44>
 80250b6:	4a44      	ldr	r2, [pc, #272]	; (80251c8 <_vfiprintf_r+0x210>)
 80250b8:	1a80      	subs	r0, r0, r2
 80250ba:	fa0b f000 	lsl.w	r0, fp, r0
 80250be:	4318      	orrs	r0, r3
 80250c0:	9004      	str	r0, [sp, #16]
 80250c2:	4645      	mov	r5, r8
 80250c4:	e7be      	b.n	8025044 <_vfiprintf_r+0x8c>
 80250c6:	9a03      	ldr	r2, [sp, #12]
 80250c8:	1d11      	adds	r1, r2, #4
 80250ca:	6812      	ldr	r2, [r2, #0]
 80250cc:	9103      	str	r1, [sp, #12]
 80250ce:	2a00      	cmp	r2, #0
 80250d0:	db01      	blt.n	80250d6 <_vfiprintf_r+0x11e>
 80250d2:	9207      	str	r2, [sp, #28]
 80250d4:	e004      	b.n	80250e0 <_vfiprintf_r+0x128>
 80250d6:	4252      	negs	r2, r2
 80250d8:	f043 0302 	orr.w	r3, r3, #2
 80250dc:	9207      	str	r2, [sp, #28]
 80250de:	9304      	str	r3, [sp, #16]
 80250e0:	f898 3000 	ldrb.w	r3, [r8]
 80250e4:	2b2e      	cmp	r3, #46	; 0x2e
 80250e6:	d10e      	bne.n	8025106 <_vfiprintf_r+0x14e>
 80250e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80250ec:	2b2a      	cmp	r3, #42	; 0x2a
 80250ee:	d138      	bne.n	8025162 <_vfiprintf_r+0x1aa>
 80250f0:	9b03      	ldr	r3, [sp, #12]
 80250f2:	1d1a      	adds	r2, r3, #4
 80250f4:	681b      	ldr	r3, [r3, #0]
 80250f6:	9203      	str	r2, [sp, #12]
 80250f8:	2b00      	cmp	r3, #0
 80250fa:	bfb8      	it	lt
 80250fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8025100:	f108 0802 	add.w	r8, r8, #2
 8025104:	9305      	str	r3, [sp, #20]
 8025106:	4d33      	ldr	r5, [pc, #204]	; (80251d4 <_vfiprintf_r+0x21c>)
 8025108:	f898 1000 	ldrb.w	r1, [r8]
 802510c:	2203      	movs	r2, #3
 802510e:	4628      	mov	r0, r5
 8025110:	f7db f87e 	bl	8000210 <memchr>
 8025114:	b140      	cbz	r0, 8025128 <_vfiprintf_r+0x170>
 8025116:	2340      	movs	r3, #64	; 0x40
 8025118:	1b40      	subs	r0, r0, r5
 802511a:	fa03 f000 	lsl.w	r0, r3, r0
 802511e:	9b04      	ldr	r3, [sp, #16]
 8025120:	4303      	orrs	r3, r0
 8025122:	f108 0801 	add.w	r8, r8, #1
 8025126:	9304      	str	r3, [sp, #16]
 8025128:	f898 1000 	ldrb.w	r1, [r8]
 802512c:	482a      	ldr	r0, [pc, #168]	; (80251d8 <_vfiprintf_r+0x220>)
 802512e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025132:	2206      	movs	r2, #6
 8025134:	f108 0701 	add.w	r7, r8, #1
 8025138:	f7db f86a 	bl	8000210 <memchr>
 802513c:	2800      	cmp	r0, #0
 802513e:	d037      	beq.n	80251b0 <_vfiprintf_r+0x1f8>
 8025140:	4b26      	ldr	r3, [pc, #152]	; (80251dc <_vfiprintf_r+0x224>)
 8025142:	bb1b      	cbnz	r3, 802518c <_vfiprintf_r+0x1d4>
 8025144:	9b03      	ldr	r3, [sp, #12]
 8025146:	3307      	adds	r3, #7
 8025148:	f023 0307 	bic.w	r3, r3, #7
 802514c:	3308      	adds	r3, #8
 802514e:	9303      	str	r3, [sp, #12]
 8025150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025152:	444b      	add	r3, r9
 8025154:	9309      	str	r3, [sp, #36]	; 0x24
 8025156:	e750      	b.n	8024ffa <_vfiprintf_r+0x42>
 8025158:	fb05 3202 	mla	r2, r5, r2, r3
 802515c:	2001      	movs	r0, #1
 802515e:	4688      	mov	r8, r1
 8025160:	e78a      	b.n	8025078 <_vfiprintf_r+0xc0>
 8025162:	2300      	movs	r3, #0
 8025164:	f108 0801 	add.w	r8, r8, #1
 8025168:	9305      	str	r3, [sp, #20]
 802516a:	4619      	mov	r1, r3
 802516c:	250a      	movs	r5, #10
 802516e:	4640      	mov	r0, r8
 8025170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025174:	3a30      	subs	r2, #48	; 0x30
 8025176:	2a09      	cmp	r2, #9
 8025178:	d903      	bls.n	8025182 <_vfiprintf_r+0x1ca>
 802517a:	2b00      	cmp	r3, #0
 802517c:	d0c3      	beq.n	8025106 <_vfiprintf_r+0x14e>
 802517e:	9105      	str	r1, [sp, #20]
 8025180:	e7c1      	b.n	8025106 <_vfiprintf_r+0x14e>
 8025182:	fb05 2101 	mla	r1, r5, r1, r2
 8025186:	2301      	movs	r3, #1
 8025188:	4680      	mov	r8, r0
 802518a:	e7f0      	b.n	802516e <_vfiprintf_r+0x1b6>
 802518c:	ab03      	add	r3, sp, #12
 802518e:	9300      	str	r3, [sp, #0]
 8025190:	4622      	mov	r2, r4
 8025192:	4b13      	ldr	r3, [pc, #76]	; (80251e0 <_vfiprintf_r+0x228>)
 8025194:	a904      	add	r1, sp, #16
 8025196:	4630      	mov	r0, r6
 8025198:	f3af 8000 	nop.w
 802519c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80251a0:	4681      	mov	r9, r0
 80251a2:	d1d5      	bne.n	8025150 <_vfiprintf_r+0x198>
 80251a4:	89a3      	ldrh	r3, [r4, #12]
 80251a6:	065b      	lsls	r3, r3, #25
 80251a8:	f53f af7e 	bmi.w	80250a8 <_vfiprintf_r+0xf0>
 80251ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80251ae:	e77d      	b.n	80250ac <_vfiprintf_r+0xf4>
 80251b0:	ab03      	add	r3, sp, #12
 80251b2:	9300      	str	r3, [sp, #0]
 80251b4:	4622      	mov	r2, r4
 80251b6:	4b0a      	ldr	r3, [pc, #40]	; (80251e0 <_vfiprintf_r+0x228>)
 80251b8:	a904      	add	r1, sp, #16
 80251ba:	4630      	mov	r0, r6
 80251bc:	f000 f888 	bl	80252d0 <_printf_i>
 80251c0:	e7ec      	b.n	802519c <_vfiprintf_r+0x1e4>
 80251c2:	bf00      	nop
 80251c4:	0802a014 	.word	0x0802a014
 80251c8:	08029fbc 	.word	0x08029fbc
 80251cc:	0802a034 	.word	0x0802a034
 80251d0:	08029ff4 	.word	0x08029ff4
 80251d4:	08029fc2 	.word	0x08029fc2
 80251d8:	08029fc6 	.word	0x08029fc6
 80251dc:	00000000 	.word	0x00000000
 80251e0:	08024f93 	.word	0x08024f93

080251e4 <_printf_common>:
 80251e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80251e8:	4691      	mov	r9, r2
 80251ea:	461f      	mov	r7, r3
 80251ec:	688a      	ldr	r2, [r1, #8]
 80251ee:	690b      	ldr	r3, [r1, #16]
 80251f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80251f4:	4293      	cmp	r3, r2
 80251f6:	bfb8      	it	lt
 80251f8:	4613      	movlt	r3, r2
 80251fa:	f8c9 3000 	str.w	r3, [r9]
 80251fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025202:	4606      	mov	r6, r0
 8025204:	460c      	mov	r4, r1
 8025206:	b112      	cbz	r2, 802520e <_printf_common+0x2a>
 8025208:	3301      	adds	r3, #1
 802520a:	f8c9 3000 	str.w	r3, [r9]
 802520e:	6823      	ldr	r3, [r4, #0]
 8025210:	0699      	lsls	r1, r3, #26
 8025212:	bf42      	ittt	mi
 8025214:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025218:	3302      	addmi	r3, #2
 802521a:	f8c9 3000 	strmi.w	r3, [r9]
 802521e:	6825      	ldr	r5, [r4, #0]
 8025220:	f015 0506 	ands.w	r5, r5, #6
 8025224:	d107      	bne.n	8025236 <_printf_common+0x52>
 8025226:	f104 0a19 	add.w	sl, r4, #25
 802522a:	68e3      	ldr	r3, [r4, #12]
 802522c:	f8d9 2000 	ldr.w	r2, [r9]
 8025230:	1a9b      	subs	r3, r3, r2
 8025232:	42ab      	cmp	r3, r5
 8025234:	dc28      	bgt.n	8025288 <_printf_common+0xa4>
 8025236:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802523a:	6822      	ldr	r2, [r4, #0]
 802523c:	3300      	adds	r3, #0
 802523e:	bf18      	it	ne
 8025240:	2301      	movne	r3, #1
 8025242:	0692      	lsls	r2, r2, #26
 8025244:	d42d      	bmi.n	80252a2 <_printf_common+0xbe>
 8025246:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802524a:	4639      	mov	r1, r7
 802524c:	4630      	mov	r0, r6
 802524e:	47c0      	blx	r8
 8025250:	3001      	adds	r0, #1
 8025252:	d020      	beq.n	8025296 <_printf_common+0xb2>
 8025254:	6823      	ldr	r3, [r4, #0]
 8025256:	68e5      	ldr	r5, [r4, #12]
 8025258:	f8d9 2000 	ldr.w	r2, [r9]
 802525c:	f003 0306 	and.w	r3, r3, #6
 8025260:	2b04      	cmp	r3, #4
 8025262:	bf08      	it	eq
 8025264:	1aad      	subeq	r5, r5, r2
 8025266:	68a3      	ldr	r3, [r4, #8]
 8025268:	6922      	ldr	r2, [r4, #16]
 802526a:	bf0c      	ite	eq
 802526c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025270:	2500      	movne	r5, #0
 8025272:	4293      	cmp	r3, r2
 8025274:	bfc4      	itt	gt
 8025276:	1a9b      	subgt	r3, r3, r2
 8025278:	18ed      	addgt	r5, r5, r3
 802527a:	f04f 0900 	mov.w	r9, #0
 802527e:	341a      	adds	r4, #26
 8025280:	454d      	cmp	r5, r9
 8025282:	d11a      	bne.n	80252ba <_printf_common+0xd6>
 8025284:	2000      	movs	r0, #0
 8025286:	e008      	b.n	802529a <_printf_common+0xb6>
 8025288:	2301      	movs	r3, #1
 802528a:	4652      	mov	r2, sl
 802528c:	4639      	mov	r1, r7
 802528e:	4630      	mov	r0, r6
 8025290:	47c0      	blx	r8
 8025292:	3001      	adds	r0, #1
 8025294:	d103      	bne.n	802529e <_printf_common+0xba>
 8025296:	f04f 30ff 	mov.w	r0, #4294967295
 802529a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802529e:	3501      	adds	r5, #1
 80252a0:	e7c3      	b.n	802522a <_printf_common+0x46>
 80252a2:	18e1      	adds	r1, r4, r3
 80252a4:	1c5a      	adds	r2, r3, #1
 80252a6:	2030      	movs	r0, #48	; 0x30
 80252a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80252ac:	4422      	add	r2, r4
 80252ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80252b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80252b6:	3302      	adds	r3, #2
 80252b8:	e7c5      	b.n	8025246 <_printf_common+0x62>
 80252ba:	2301      	movs	r3, #1
 80252bc:	4622      	mov	r2, r4
 80252be:	4639      	mov	r1, r7
 80252c0:	4630      	mov	r0, r6
 80252c2:	47c0      	blx	r8
 80252c4:	3001      	adds	r0, #1
 80252c6:	d0e6      	beq.n	8025296 <_printf_common+0xb2>
 80252c8:	f109 0901 	add.w	r9, r9, #1
 80252cc:	e7d8      	b.n	8025280 <_printf_common+0x9c>
	...

080252d0 <_printf_i>:
 80252d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80252d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80252d8:	460c      	mov	r4, r1
 80252da:	7e09      	ldrb	r1, [r1, #24]
 80252dc:	b085      	sub	sp, #20
 80252de:	296e      	cmp	r1, #110	; 0x6e
 80252e0:	4617      	mov	r7, r2
 80252e2:	4606      	mov	r6, r0
 80252e4:	4698      	mov	r8, r3
 80252e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80252e8:	f000 80b3 	beq.w	8025452 <_printf_i+0x182>
 80252ec:	d822      	bhi.n	8025334 <_printf_i+0x64>
 80252ee:	2963      	cmp	r1, #99	; 0x63
 80252f0:	d036      	beq.n	8025360 <_printf_i+0x90>
 80252f2:	d80a      	bhi.n	802530a <_printf_i+0x3a>
 80252f4:	2900      	cmp	r1, #0
 80252f6:	f000 80b9 	beq.w	802546c <_printf_i+0x19c>
 80252fa:	2958      	cmp	r1, #88	; 0x58
 80252fc:	f000 8083 	beq.w	8025406 <_printf_i+0x136>
 8025300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025304:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025308:	e032      	b.n	8025370 <_printf_i+0xa0>
 802530a:	2964      	cmp	r1, #100	; 0x64
 802530c:	d001      	beq.n	8025312 <_printf_i+0x42>
 802530e:	2969      	cmp	r1, #105	; 0x69
 8025310:	d1f6      	bne.n	8025300 <_printf_i+0x30>
 8025312:	6820      	ldr	r0, [r4, #0]
 8025314:	6813      	ldr	r3, [r2, #0]
 8025316:	0605      	lsls	r5, r0, #24
 8025318:	f103 0104 	add.w	r1, r3, #4
 802531c:	d52a      	bpl.n	8025374 <_printf_i+0xa4>
 802531e:	681b      	ldr	r3, [r3, #0]
 8025320:	6011      	str	r1, [r2, #0]
 8025322:	2b00      	cmp	r3, #0
 8025324:	da03      	bge.n	802532e <_printf_i+0x5e>
 8025326:	222d      	movs	r2, #45	; 0x2d
 8025328:	425b      	negs	r3, r3
 802532a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802532e:	486f      	ldr	r0, [pc, #444]	; (80254ec <_printf_i+0x21c>)
 8025330:	220a      	movs	r2, #10
 8025332:	e039      	b.n	80253a8 <_printf_i+0xd8>
 8025334:	2973      	cmp	r1, #115	; 0x73
 8025336:	f000 809d 	beq.w	8025474 <_printf_i+0x1a4>
 802533a:	d808      	bhi.n	802534e <_printf_i+0x7e>
 802533c:	296f      	cmp	r1, #111	; 0x6f
 802533e:	d020      	beq.n	8025382 <_printf_i+0xb2>
 8025340:	2970      	cmp	r1, #112	; 0x70
 8025342:	d1dd      	bne.n	8025300 <_printf_i+0x30>
 8025344:	6823      	ldr	r3, [r4, #0]
 8025346:	f043 0320 	orr.w	r3, r3, #32
 802534a:	6023      	str	r3, [r4, #0]
 802534c:	e003      	b.n	8025356 <_printf_i+0x86>
 802534e:	2975      	cmp	r1, #117	; 0x75
 8025350:	d017      	beq.n	8025382 <_printf_i+0xb2>
 8025352:	2978      	cmp	r1, #120	; 0x78
 8025354:	d1d4      	bne.n	8025300 <_printf_i+0x30>
 8025356:	2378      	movs	r3, #120	; 0x78
 8025358:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802535c:	4864      	ldr	r0, [pc, #400]	; (80254f0 <_printf_i+0x220>)
 802535e:	e055      	b.n	802540c <_printf_i+0x13c>
 8025360:	6813      	ldr	r3, [r2, #0]
 8025362:	1d19      	adds	r1, r3, #4
 8025364:	681b      	ldr	r3, [r3, #0]
 8025366:	6011      	str	r1, [r2, #0]
 8025368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802536c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025370:	2301      	movs	r3, #1
 8025372:	e08c      	b.n	802548e <_printf_i+0x1be>
 8025374:	681b      	ldr	r3, [r3, #0]
 8025376:	6011      	str	r1, [r2, #0]
 8025378:	f010 0f40 	tst.w	r0, #64	; 0x40
 802537c:	bf18      	it	ne
 802537e:	b21b      	sxthne	r3, r3
 8025380:	e7cf      	b.n	8025322 <_printf_i+0x52>
 8025382:	6813      	ldr	r3, [r2, #0]
 8025384:	6825      	ldr	r5, [r4, #0]
 8025386:	1d18      	adds	r0, r3, #4
 8025388:	6010      	str	r0, [r2, #0]
 802538a:	0628      	lsls	r0, r5, #24
 802538c:	d501      	bpl.n	8025392 <_printf_i+0xc2>
 802538e:	681b      	ldr	r3, [r3, #0]
 8025390:	e002      	b.n	8025398 <_printf_i+0xc8>
 8025392:	0668      	lsls	r0, r5, #25
 8025394:	d5fb      	bpl.n	802538e <_printf_i+0xbe>
 8025396:	881b      	ldrh	r3, [r3, #0]
 8025398:	4854      	ldr	r0, [pc, #336]	; (80254ec <_printf_i+0x21c>)
 802539a:	296f      	cmp	r1, #111	; 0x6f
 802539c:	bf14      	ite	ne
 802539e:	220a      	movne	r2, #10
 80253a0:	2208      	moveq	r2, #8
 80253a2:	2100      	movs	r1, #0
 80253a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80253a8:	6865      	ldr	r5, [r4, #4]
 80253aa:	60a5      	str	r5, [r4, #8]
 80253ac:	2d00      	cmp	r5, #0
 80253ae:	f2c0 8095 	blt.w	80254dc <_printf_i+0x20c>
 80253b2:	6821      	ldr	r1, [r4, #0]
 80253b4:	f021 0104 	bic.w	r1, r1, #4
 80253b8:	6021      	str	r1, [r4, #0]
 80253ba:	2b00      	cmp	r3, #0
 80253bc:	d13d      	bne.n	802543a <_printf_i+0x16a>
 80253be:	2d00      	cmp	r5, #0
 80253c0:	f040 808e 	bne.w	80254e0 <_printf_i+0x210>
 80253c4:	4665      	mov	r5, ip
 80253c6:	2a08      	cmp	r2, #8
 80253c8:	d10b      	bne.n	80253e2 <_printf_i+0x112>
 80253ca:	6823      	ldr	r3, [r4, #0]
 80253cc:	07db      	lsls	r3, r3, #31
 80253ce:	d508      	bpl.n	80253e2 <_printf_i+0x112>
 80253d0:	6923      	ldr	r3, [r4, #16]
 80253d2:	6862      	ldr	r2, [r4, #4]
 80253d4:	429a      	cmp	r2, r3
 80253d6:	bfde      	ittt	le
 80253d8:	2330      	movle	r3, #48	; 0x30
 80253da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80253de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80253e2:	ebac 0305 	sub.w	r3, ip, r5
 80253e6:	6123      	str	r3, [r4, #16]
 80253e8:	f8cd 8000 	str.w	r8, [sp]
 80253ec:	463b      	mov	r3, r7
 80253ee:	aa03      	add	r2, sp, #12
 80253f0:	4621      	mov	r1, r4
 80253f2:	4630      	mov	r0, r6
 80253f4:	f7ff fef6 	bl	80251e4 <_printf_common>
 80253f8:	3001      	adds	r0, #1
 80253fa:	d14d      	bne.n	8025498 <_printf_i+0x1c8>
 80253fc:	f04f 30ff 	mov.w	r0, #4294967295
 8025400:	b005      	add	sp, #20
 8025402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025406:	4839      	ldr	r0, [pc, #228]	; (80254ec <_printf_i+0x21c>)
 8025408:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802540c:	6813      	ldr	r3, [r2, #0]
 802540e:	6821      	ldr	r1, [r4, #0]
 8025410:	1d1d      	adds	r5, r3, #4
 8025412:	681b      	ldr	r3, [r3, #0]
 8025414:	6015      	str	r5, [r2, #0]
 8025416:	060a      	lsls	r2, r1, #24
 8025418:	d50b      	bpl.n	8025432 <_printf_i+0x162>
 802541a:	07ca      	lsls	r2, r1, #31
 802541c:	bf44      	itt	mi
 802541e:	f041 0120 	orrmi.w	r1, r1, #32
 8025422:	6021      	strmi	r1, [r4, #0]
 8025424:	b91b      	cbnz	r3, 802542e <_printf_i+0x15e>
 8025426:	6822      	ldr	r2, [r4, #0]
 8025428:	f022 0220 	bic.w	r2, r2, #32
 802542c:	6022      	str	r2, [r4, #0]
 802542e:	2210      	movs	r2, #16
 8025430:	e7b7      	b.n	80253a2 <_printf_i+0xd2>
 8025432:	064d      	lsls	r5, r1, #25
 8025434:	bf48      	it	mi
 8025436:	b29b      	uxthmi	r3, r3
 8025438:	e7ef      	b.n	802541a <_printf_i+0x14a>
 802543a:	4665      	mov	r5, ip
 802543c:	fbb3 f1f2 	udiv	r1, r3, r2
 8025440:	fb02 3311 	mls	r3, r2, r1, r3
 8025444:	5cc3      	ldrb	r3, [r0, r3]
 8025446:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802544a:	460b      	mov	r3, r1
 802544c:	2900      	cmp	r1, #0
 802544e:	d1f5      	bne.n	802543c <_printf_i+0x16c>
 8025450:	e7b9      	b.n	80253c6 <_printf_i+0xf6>
 8025452:	6813      	ldr	r3, [r2, #0]
 8025454:	6825      	ldr	r5, [r4, #0]
 8025456:	6961      	ldr	r1, [r4, #20]
 8025458:	1d18      	adds	r0, r3, #4
 802545a:	6010      	str	r0, [r2, #0]
 802545c:	0628      	lsls	r0, r5, #24
 802545e:	681b      	ldr	r3, [r3, #0]
 8025460:	d501      	bpl.n	8025466 <_printf_i+0x196>
 8025462:	6019      	str	r1, [r3, #0]
 8025464:	e002      	b.n	802546c <_printf_i+0x19c>
 8025466:	066a      	lsls	r2, r5, #25
 8025468:	d5fb      	bpl.n	8025462 <_printf_i+0x192>
 802546a:	8019      	strh	r1, [r3, #0]
 802546c:	2300      	movs	r3, #0
 802546e:	6123      	str	r3, [r4, #16]
 8025470:	4665      	mov	r5, ip
 8025472:	e7b9      	b.n	80253e8 <_printf_i+0x118>
 8025474:	6813      	ldr	r3, [r2, #0]
 8025476:	1d19      	adds	r1, r3, #4
 8025478:	6011      	str	r1, [r2, #0]
 802547a:	681d      	ldr	r5, [r3, #0]
 802547c:	6862      	ldr	r2, [r4, #4]
 802547e:	2100      	movs	r1, #0
 8025480:	4628      	mov	r0, r5
 8025482:	f7da fec5 	bl	8000210 <memchr>
 8025486:	b108      	cbz	r0, 802548c <_printf_i+0x1bc>
 8025488:	1b40      	subs	r0, r0, r5
 802548a:	6060      	str	r0, [r4, #4]
 802548c:	6863      	ldr	r3, [r4, #4]
 802548e:	6123      	str	r3, [r4, #16]
 8025490:	2300      	movs	r3, #0
 8025492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025496:	e7a7      	b.n	80253e8 <_printf_i+0x118>
 8025498:	6923      	ldr	r3, [r4, #16]
 802549a:	462a      	mov	r2, r5
 802549c:	4639      	mov	r1, r7
 802549e:	4630      	mov	r0, r6
 80254a0:	47c0      	blx	r8
 80254a2:	3001      	adds	r0, #1
 80254a4:	d0aa      	beq.n	80253fc <_printf_i+0x12c>
 80254a6:	6823      	ldr	r3, [r4, #0]
 80254a8:	079b      	lsls	r3, r3, #30
 80254aa:	d413      	bmi.n	80254d4 <_printf_i+0x204>
 80254ac:	68e0      	ldr	r0, [r4, #12]
 80254ae:	9b03      	ldr	r3, [sp, #12]
 80254b0:	4298      	cmp	r0, r3
 80254b2:	bfb8      	it	lt
 80254b4:	4618      	movlt	r0, r3
 80254b6:	e7a3      	b.n	8025400 <_printf_i+0x130>
 80254b8:	2301      	movs	r3, #1
 80254ba:	464a      	mov	r2, r9
 80254bc:	4639      	mov	r1, r7
 80254be:	4630      	mov	r0, r6
 80254c0:	47c0      	blx	r8
 80254c2:	3001      	adds	r0, #1
 80254c4:	d09a      	beq.n	80253fc <_printf_i+0x12c>
 80254c6:	3501      	adds	r5, #1
 80254c8:	68e3      	ldr	r3, [r4, #12]
 80254ca:	9a03      	ldr	r2, [sp, #12]
 80254cc:	1a9b      	subs	r3, r3, r2
 80254ce:	42ab      	cmp	r3, r5
 80254d0:	dcf2      	bgt.n	80254b8 <_printf_i+0x1e8>
 80254d2:	e7eb      	b.n	80254ac <_printf_i+0x1dc>
 80254d4:	2500      	movs	r5, #0
 80254d6:	f104 0919 	add.w	r9, r4, #25
 80254da:	e7f5      	b.n	80254c8 <_printf_i+0x1f8>
 80254dc:	2b00      	cmp	r3, #0
 80254de:	d1ac      	bne.n	802543a <_printf_i+0x16a>
 80254e0:	7803      	ldrb	r3, [r0, #0]
 80254e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80254e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80254ea:	e76c      	b.n	80253c6 <_printf_i+0xf6>
 80254ec:	08029fcd 	.word	0x08029fcd
 80254f0:	08029fde 	.word	0x08029fde

080254f4 <_sbrk_r>:
 80254f4:	b538      	push	{r3, r4, r5, lr}
 80254f6:	4c06      	ldr	r4, [pc, #24]	; (8025510 <_sbrk_r+0x1c>)
 80254f8:	2300      	movs	r3, #0
 80254fa:	4605      	mov	r5, r0
 80254fc:	4608      	mov	r0, r1
 80254fe:	6023      	str	r3, [r4, #0]
 8025500:	f7de f91a 	bl	8003738 <_sbrk>
 8025504:	1c43      	adds	r3, r0, #1
 8025506:	d102      	bne.n	802550e <_sbrk_r+0x1a>
 8025508:	6823      	ldr	r3, [r4, #0]
 802550a:	b103      	cbz	r3, 802550e <_sbrk_r+0x1a>
 802550c:	602b      	str	r3, [r5, #0]
 802550e:	bd38      	pop	{r3, r4, r5, pc}
 8025510:	2000cb88 	.word	0x2000cb88

08025514 <_raise_r>:
 8025514:	291f      	cmp	r1, #31
 8025516:	b538      	push	{r3, r4, r5, lr}
 8025518:	4604      	mov	r4, r0
 802551a:	460d      	mov	r5, r1
 802551c:	d904      	bls.n	8025528 <_raise_r+0x14>
 802551e:	2316      	movs	r3, #22
 8025520:	6003      	str	r3, [r0, #0]
 8025522:	f04f 30ff 	mov.w	r0, #4294967295
 8025526:	bd38      	pop	{r3, r4, r5, pc}
 8025528:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802552a:	b112      	cbz	r2, 8025532 <_raise_r+0x1e>
 802552c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025530:	b94b      	cbnz	r3, 8025546 <_raise_r+0x32>
 8025532:	4620      	mov	r0, r4
 8025534:	f000 f830 	bl	8025598 <_getpid_r>
 8025538:	462a      	mov	r2, r5
 802553a:	4601      	mov	r1, r0
 802553c:	4620      	mov	r0, r4
 802553e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025542:	f000 b817 	b.w	8025574 <_kill_r>
 8025546:	2b01      	cmp	r3, #1
 8025548:	d00a      	beq.n	8025560 <_raise_r+0x4c>
 802554a:	1c59      	adds	r1, r3, #1
 802554c:	d103      	bne.n	8025556 <_raise_r+0x42>
 802554e:	2316      	movs	r3, #22
 8025550:	6003      	str	r3, [r0, #0]
 8025552:	2001      	movs	r0, #1
 8025554:	e7e7      	b.n	8025526 <_raise_r+0x12>
 8025556:	2400      	movs	r4, #0
 8025558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802555c:	4628      	mov	r0, r5
 802555e:	4798      	blx	r3
 8025560:	2000      	movs	r0, #0
 8025562:	e7e0      	b.n	8025526 <_raise_r+0x12>

08025564 <raise>:
 8025564:	4b02      	ldr	r3, [pc, #8]	; (8025570 <raise+0xc>)
 8025566:	4601      	mov	r1, r0
 8025568:	6818      	ldr	r0, [r3, #0]
 802556a:	f7ff bfd3 	b.w	8025514 <_raise_r>
 802556e:	bf00      	nop
 8025570:	2000009c 	.word	0x2000009c

08025574 <_kill_r>:
 8025574:	b538      	push	{r3, r4, r5, lr}
 8025576:	4c07      	ldr	r4, [pc, #28]	; (8025594 <_kill_r+0x20>)
 8025578:	2300      	movs	r3, #0
 802557a:	4605      	mov	r5, r0
 802557c:	4608      	mov	r0, r1
 802557e:	4611      	mov	r1, r2
 8025580:	6023      	str	r3, [r4, #0]
 8025582:	f7de f851 	bl	8003628 <_kill>
 8025586:	1c43      	adds	r3, r0, #1
 8025588:	d102      	bne.n	8025590 <_kill_r+0x1c>
 802558a:	6823      	ldr	r3, [r4, #0]
 802558c:	b103      	cbz	r3, 8025590 <_kill_r+0x1c>
 802558e:	602b      	str	r3, [r5, #0]
 8025590:	bd38      	pop	{r3, r4, r5, pc}
 8025592:	bf00      	nop
 8025594:	2000cb88 	.word	0x2000cb88

08025598 <_getpid_r>:
 8025598:	f7de b83e 	b.w	8003618 <_getpid>

0802559c <__swbuf_r>:
 802559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802559e:	460e      	mov	r6, r1
 80255a0:	4614      	mov	r4, r2
 80255a2:	4605      	mov	r5, r0
 80255a4:	b118      	cbz	r0, 80255ae <__swbuf_r+0x12>
 80255a6:	6983      	ldr	r3, [r0, #24]
 80255a8:	b90b      	cbnz	r3, 80255ae <__swbuf_r+0x12>
 80255aa:	f000 fa0b 	bl	80259c4 <__sinit>
 80255ae:	4b21      	ldr	r3, [pc, #132]	; (8025634 <__swbuf_r+0x98>)
 80255b0:	429c      	cmp	r4, r3
 80255b2:	d12a      	bne.n	802560a <__swbuf_r+0x6e>
 80255b4:	686c      	ldr	r4, [r5, #4]
 80255b6:	69a3      	ldr	r3, [r4, #24]
 80255b8:	60a3      	str	r3, [r4, #8]
 80255ba:	89a3      	ldrh	r3, [r4, #12]
 80255bc:	071a      	lsls	r2, r3, #28
 80255be:	d52e      	bpl.n	802561e <__swbuf_r+0x82>
 80255c0:	6923      	ldr	r3, [r4, #16]
 80255c2:	b363      	cbz	r3, 802561e <__swbuf_r+0x82>
 80255c4:	6923      	ldr	r3, [r4, #16]
 80255c6:	6820      	ldr	r0, [r4, #0]
 80255c8:	1ac0      	subs	r0, r0, r3
 80255ca:	6963      	ldr	r3, [r4, #20]
 80255cc:	b2f6      	uxtb	r6, r6
 80255ce:	4283      	cmp	r3, r0
 80255d0:	4637      	mov	r7, r6
 80255d2:	dc04      	bgt.n	80255de <__swbuf_r+0x42>
 80255d4:	4621      	mov	r1, r4
 80255d6:	4628      	mov	r0, r5
 80255d8:	f000 f98a 	bl	80258f0 <_fflush_r>
 80255dc:	bb28      	cbnz	r0, 802562a <__swbuf_r+0x8e>
 80255de:	68a3      	ldr	r3, [r4, #8]
 80255e0:	3b01      	subs	r3, #1
 80255e2:	60a3      	str	r3, [r4, #8]
 80255e4:	6823      	ldr	r3, [r4, #0]
 80255e6:	1c5a      	adds	r2, r3, #1
 80255e8:	6022      	str	r2, [r4, #0]
 80255ea:	701e      	strb	r6, [r3, #0]
 80255ec:	6963      	ldr	r3, [r4, #20]
 80255ee:	3001      	adds	r0, #1
 80255f0:	4283      	cmp	r3, r0
 80255f2:	d004      	beq.n	80255fe <__swbuf_r+0x62>
 80255f4:	89a3      	ldrh	r3, [r4, #12]
 80255f6:	07db      	lsls	r3, r3, #31
 80255f8:	d519      	bpl.n	802562e <__swbuf_r+0x92>
 80255fa:	2e0a      	cmp	r6, #10
 80255fc:	d117      	bne.n	802562e <__swbuf_r+0x92>
 80255fe:	4621      	mov	r1, r4
 8025600:	4628      	mov	r0, r5
 8025602:	f000 f975 	bl	80258f0 <_fflush_r>
 8025606:	b190      	cbz	r0, 802562e <__swbuf_r+0x92>
 8025608:	e00f      	b.n	802562a <__swbuf_r+0x8e>
 802560a:	4b0b      	ldr	r3, [pc, #44]	; (8025638 <__swbuf_r+0x9c>)
 802560c:	429c      	cmp	r4, r3
 802560e:	d101      	bne.n	8025614 <__swbuf_r+0x78>
 8025610:	68ac      	ldr	r4, [r5, #8]
 8025612:	e7d0      	b.n	80255b6 <__swbuf_r+0x1a>
 8025614:	4b09      	ldr	r3, [pc, #36]	; (802563c <__swbuf_r+0xa0>)
 8025616:	429c      	cmp	r4, r3
 8025618:	bf08      	it	eq
 802561a:	68ec      	ldreq	r4, [r5, #12]
 802561c:	e7cb      	b.n	80255b6 <__swbuf_r+0x1a>
 802561e:	4621      	mov	r1, r4
 8025620:	4628      	mov	r0, r5
 8025622:	f000 f80d 	bl	8025640 <__swsetup_r>
 8025626:	2800      	cmp	r0, #0
 8025628:	d0cc      	beq.n	80255c4 <__swbuf_r+0x28>
 802562a:	f04f 37ff 	mov.w	r7, #4294967295
 802562e:	4638      	mov	r0, r7
 8025630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025632:	bf00      	nop
 8025634:	0802a014 	.word	0x0802a014
 8025638:	0802a034 	.word	0x0802a034
 802563c:	08029ff4 	.word	0x08029ff4

08025640 <__swsetup_r>:
 8025640:	4b32      	ldr	r3, [pc, #200]	; (802570c <__swsetup_r+0xcc>)
 8025642:	b570      	push	{r4, r5, r6, lr}
 8025644:	681d      	ldr	r5, [r3, #0]
 8025646:	4606      	mov	r6, r0
 8025648:	460c      	mov	r4, r1
 802564a:	b125      	cbz	r5, 8025656 <__swsetup_r+0x16>
 802564c:	69ab      	ldr	r3, [r5, #24]
 802564e:	b913      	cbnz	r3, 8025656 <__swsetup_r+0x16>
 8025650:	4628      	mov	r0, r5
 8025652:	f000 f9b7 	bl	80259c4 <__sinit>
 8025656:	4b2e      	ldr	r3, [pc, #184]	; (8025710 <__swsetup_r+0xd0>)
 8025658:	429c      	cmp	r4, r3
 802565a:	d10f      	bne.n	802567c <__swsetup_r+0x3c>
 802565c:	686c      	ldr	r4, [r5, #4]
 802565e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025662:	b29a      	uxth	r2, r3
 8025664:	0715      	lsls	r5, r2, #28
 8025666:	d42c      	bmi.n	80256c2 <__swsetup_r+0x82>
 8025668:	06d0      	lsls	r0, r2, #27
 802566a:	d411      	bmi.n	8025690 <__swsetup_r+0x50>
 802566c:	2209      	movs	r2, #9
 802566e:	6032      	str	r2, [r6, #0]
 8025670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025674:	81a3      	strh	r3, [r4, #12]
 8025676:	f04f 30ff 	mov.w	r0, #4294967295
 802567a:	e03e      	b.n	80256fa <__swsetup_r+0xba>
 802567c:	4b25      	ldr	r3, [pc, #148]	; (8025714 <__swsetup_r+0xd4>)
 802567e:	429c      	cmp	r4, r3
 8025680:	d101      	bne.n	8025686 <__swsetup_r+0x46>
 8025682:	68ac      	ldr	r4, [r5, #8]
 8025684:	e7eb      	b.n	802565e <__swsetup_r+0x1e>
 8025686:	4b24      	ldr	r3, [pc, #144]	; (8025718 <__swsetup_r+0xd8>)
 8025688:	429c      	cmp	r4, r3
 802568a:	bf08      	it	eq
 802568c:	68ec      	ldreq	r4, [r5, #12]
 802568e:	e7e6      	b.n	802565e <__swsetup_r+0x1e>
 8025690:	0751      	lsls	r1, r2, #29
 8025692:	d512      	bpl.n	80256ba <__swsetup_r+0x7a>
 8025694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025696:	b141      	cbz	r1, 80256aa <__swsetup_r+0x6a>
 8025698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802569c:	4299      	cmp	r1, r3
 802569e:	d002      	beq.n	80256a6 <__swsetup_r+0x66>
 80256a0:	4630      	mov	r0, r6
 80256a2:	f7ff fbb7 	bl	8024e14 <_free_r>
 80256a6:	2300      	movs	r3, #0
 80256a8:	6363      	str	r3, [r4, #52]	; 0x34
 80256aa:	89a3      	ldrh	r3, [r4, #12]
 80256ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80256b0:	81a3      	strh	r3, [r4, #12]
 80256b2:	2300      	movs	r3, #0
 80256b4:	6063      	str	r3, [r4, #4]
 80256b6:	6923      	ldr	r3, [r4, #16]
 80256b8:	6023      	str	r3, [r4, #0]
 80256ba:	89a3      	ldrh	r3, [r4, #12]
 80256bc:	f043 0308 	orr.w	r3, r3, #8
 80256c0:	81a3      	strh	r3, [r4, #12]
 80256c2:	6923      	ldr	r3, [r4, #16]
 80256c4:	b94b      	cbnz	r3, 80256da <__swsetup_r+0x9a>
 80256c6:	89a3      	ldrh	r3, [r4, #12]
 80256c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80256cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80256d0:	d003      	beq.n	80256da <__swsetup_r+0x9a>
 80256d2:	4621      	mov	r1, r4
 80256d4:	4630      	mov	r0, r6
 80256d6:	f000 fa23 	bl	8025b20 <__smakebuf_r>
 80256da:	89a2      	ldrh	r2, [r4, #12]
 80256dc:	f012 0301 	ands.w	r3, r2, #1
 80256e0:	d00c      	beq.n	80256fc <__swsetup_r+0xbc>
 80256e2:	2300      	movs	r3, #0
 80256e4:	60a3      	str	r3, [r4, #8]
 80256e6:	6963      	ldr	r3, [r4, #20]
 80256e8:	425b      	negs	r3, r3
 80256ea:	61a3      	str	r3, [r4, #24]
 80256ec:	6923      	ldr	r3, [r4, #16]
 80256ee:	b953      	cbnz	r3, 8025706 <__swsetup_r+0xc6>
 80256f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80256f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80256f8:	d1ba      	bne.n	8025670 <__swsetup_r+0x30>
 80256fa:	bd70      	pop	{r4, r5, r6, pc}
 80256fc:	0792      	lsls	r2, r2, #30
 80256fe:	bf58      	it	pl
 8025700:	6963      	ldrpl	r3, [r4, #20]
 8025702:	60a3      	str	r3, [r4, #8]
 8025704:	e7f2      	b.n	80256ec <__swsetup_r+0xac>
 8025706:	2000      	movs	r0, #0
 8025708:	e7f7      	b.n	80256fa <__swsetup_r+0xba>
 802570a:	bf00      	nop
 802570c:	2000009c 	.word	0x2000009c
 8025710:	0802a014 	.word	0x0802a014
 8025714:	0802a034 	.word	0x0802a034
 8025718:	08029ff4 	.word	0x08029ff4

0802571c <__register_exitproc>:
 802571c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025720:	4d2c      	ldr	r5, [pc, #176]	; (80257d4 <__register_exitproc+0xb8>)
 8025722:	682c      	ldr	r4, [r5, #0]
 8025724:	4607      	mov	r7, r0
 8025726:	460e      	mov	r6, r1
 8025728:	4691      	mov	r9, r2
 802572a:	4698      	mov	r8, r3
 802572c:	b934      	cbnz	r4, 802573c <__register_exitproc+0x20>
 802572e:	4b2a      	ldr	r3, [pc, #168]	; (80257d8 <__register_exitproc+0xbc>)
 8025730:	4c2a      	ldr	r4, [pc, #168]	; (80257dc <__register_exitproc+0xc0>)
 8025732:	602c      	str	r4, [r5, #0]
 8025734:	b113      	cbz	r3, 802573c <__register_exitproc+0x20>
 8025736:	681b      	ldr	r3, [r3, #0]
 8025738:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802573c:	6863      	ldr	r3, [r4, #4]
 802573e:	2b1f      	cmp	r3, #31
 8025740:	dd3d      	ble.n	80257be <__register_exitproc+0xa2>
 8025742:	4b27      	ldr	r3, [pc, #156]	; (80257e0 <__register_exitproc+0xc4>)
 8025744:	b91b      	cbnz	r3, 802574e <__register_exitproc+0x32>
 8025746:	f04f 30ff 	mov.w	r0, #4294967295
 802574a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802574e:	208c      	movs	r0, #140	; 0x8c
 8025750:	f7ff fb3c 	bl	8024dcc <malloc>
 8025754:	4604      	mov	r4, r0
 8025756:	2800      	cmp	r0, #0
 8025758:	d0f5      	beq.n	8025746 <__register_exitproc+0x2a>
 802575a:	2300      	movs	r3, #0
 802575c:	682a      	ldr	r2, [r5, #0]
 802575e:	6002      	str	r2, [r0, #0]
 8025760:	6043      	str	r3, [r0, #4]
 8025762:	6028      	str	r0, [r5, #0]
 8025764:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8025768:	b30f      	cbz	r7, 80257ae <__register_exitproc+0x92>
 802576a:	f44f 7084 	mov.w	r0, #264	; 0x108
 802576e:	f7ff fb2d 	bl	8024dcc <malloc>
 8025772:	2800      	cmp	r0, #0
 8025774:	d0e7      	beq.n	8025746 <__register_exitproc+0x2a>
 8025776:	2300      	movs	r3, #0
 8025778:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802577c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8025780:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025784:	6862      	ldr	r2, [r4, #4]
 8025786:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802578a:	2301      	movs	r3, #1
 802578c:	4093      	lsls	r3, r2
 802578e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8025792:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8025796:	431a      	orrs	r2, r3
 8025798:	2f02      	cmp	r7, #2
 802579a:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802579e:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80257a2:	bf02      	ittt	eq
 80257a4:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80257a8:	4313      	orreq	r3, r2
 80257aa:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80257ae:	6863      	ldr	r3, [r4, #4]
 80257b0:	1c5a      	adds	r2, r3, #1
 80257b2:	3302      	adds	r3, #2
 80257b4:	6062      	str	r2, [r4, #4]
 80257b6:	2000      	movs	r0, #0
 80257b8:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80257bc:	e7c5      	b.n	802574a <__register_exitproc+0x2e>
 80257be:	2f00      	cmp	r7, #0
 80257c0:	d0f5      	beq.n	80257ae <__register_exitproc+0x92>
 80257c2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80257c6:	2800      	cmp	r0, #0
 80257c8:	d1dc      	bne.n	8025784 <__register_exitproc+0x68>
 80257ca:	4b05      	ldr	r3, [pc, #20]	; (80257e0 <__register_exitproc+0xc4>)
 80257cc:	2b00      	cmp	r3, #0
 80257ce:	d0ba      	beq.n	8025746 <__register_exitproc+0x2a>
 80257d0:	e7cb      	b.n	802576a <__register_exitproc+0x4e>
 80257d2:	bf00      	nop
 80257d4:	2000bf80 	.word	0x2000bf80
 80257d8:	08029ff0 	.word	0x08029ff0
 80257dc:	2000bef4 	.word	0x2000bef4
 80257e0:	08024dcd 	.word	0x08024dcd

080257e4 <__sflush_r>:
 80257e4:	898a      	ldrh	r2, [r1, #12]
 80257e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80257ea:	4605      	mov	r5, r0
 80257ec:	0710      	lsls	r0, r2, #28
 80257ee:	460c      	mov	r4, r1
 80257f0:	d458      	bmi.n	80258a4 <__sflush_r+0xc0>
 80257f2:	684b      	ldr	r3, [r1, #4]
 80257f4:	2b00      	cmp	r3, #0
 80257f6:	dc05      	bgt.n	8025804 <__sflush_r+0x20>
 80257f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80257fa:	2b00      	cmp	r3, #0
 80257fc:	dc02      	bgt.n	8025804 <__sflush_r+0x20>
 80257fe:	2000      	movs	r0, #0
 8025800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025806:	2e00      	cmp	r6, #0
 8025808:	d0f9      	beq.n	80257fe <__sflush_r+0x1a>
 802580a:	2300      	movs	r3, #0
 802580c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025810:	682f      	ldr	r7, [r5, #0]
 8025812:	6a21      	ldr	r1, [r4, #32]
 8025814:	602b      	str	r3, [r5, #0]
 8025816:	d032      	beq.n	802587e <__sflush_r+0x9a>
 8025818:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802581a:	89a3      	ldrh	r3, [r4, #12]
 802581c:	075a      	lsls	r2, r3, #29
 802581e:	d505      	bpl.n	802582c <__sflush_r+0x48>
 8025820:	6863      	ldr	r3, [r4, #4]
 8025822:	1ac0      	subs	r0, r0, r3
 8025824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025826:	b10b      	cbz	r3, 802582c <__sflush_r+0x48>
 8025828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802582a:	1ac0      	subs	r0, r0, r3
 802582c:	2300      	movs	r3, #0
 802582e:	4602      	mov	r2, r0
 8025830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025832:	6a21      	ldr	r1, [r4, #32]
 8025834:	4628      	mov	r0, r5
 8025836:	47b0      	blx	r6
 8025838:	1c43      	adds	r3, r0, #1
 802583a:	89a3      	ldrh	r3, [r4, #12]
 802583c:	d106      	bne.n	802584c <__sflush_r+0x68>
 802583e:	6829      	ldr	r1, [r5, #0]
 8025840:	291d      	cmp	r1, #29
 8025842:	d848      	bhi.n	80258d6 <__sflush_r+0xf2>
 8025844:	4a29      	ldr	r2, [pc, #164]	; (80258ec <__sflush_r+0x108>)
 8025846:	40ca      	lsrs	r2, r1
 8025848:	07d6      	lsls	r6, r2, #31
 802584a:	d544      	bpl.n	80258d6 <__sflush_r+0xf2>
 802584c:	2200      	movs	r2, #0
 802584e:	6062      	str	r2, [r4, #4]
 8025850:	04d9      	lsls	r1, r3, #19
 8025852:	6922      	ldr	r2, [r4, #16]
 8025854:	6022      	str	r2, [r4, #0]
 8025856:	d504      	bpl.n	8025862 <__sflush_r+0x7e>
 8025858:	1c42      	adds	r2, r0, #1
 802585a:	d101      	bne.n	8025860 <__sflush_r+0x7c>
 802585c:	682b      	ldr	r3, [r5, #0]
 802585e:	b903      	cbnz	r3, 8025862 <__sflush_r+0x7e>
 8025860:	6560      	str	r0, [r4, #84]	; 0x54
 8025862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025864:	602f      	str	r7, [r5, #0]
 8025866:	2900      	cmp	r1, #0
 8025868:	d0c9      	beq.n	80257fe <__sflush_r+0x1a>
 802586a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802586e:	4299      	cmp	r1, r3
 8025870:	d002      	beq.n	8025878 <__sflush_r+0x94>
 8025872:	4628      	mov	r0, r5
 8025874:	f7ff face 	bl	8024e14 <_free_r>
 8025878:	2000      	movs	r0, #0
 802587a:	6360      	str	r0, [r4, #52]	; 0x34
 802587c:	e7c0      	b.n	8025800 <__sflush_r+0x1c>
 802587e:	2301      	movs	r3, #1
 8025880:	4628      	mov	r0, r5
 8025882:	47b0      	blx	r6
 8025884:	1c41      	adds	r1, r0, #1
 8025886:	d1c8      	bne.n	802581a <__sflush_r+0x36>
 8025888:	682b      	ldr	r3, [r5, #0]
 802588a:	2b00      	cmp	r3, #0
 802588c:	d0c5      	beq.n	802581a <__sflush_r+0x36>
 802588e:	2b1d      	cmp	r3, #29
 8025890:	d001      	beq.n	8025896 <__sflush_r+0xb2>
 8025892:	2b16      	cmp	r3, #22
 8025894:	d101      	bne.n	802589a <__sflush_r+0xb6>
 8025896:	602f      	str	r7, [r5, #0]
 8025898:	e7b1      	b.n	80257fe <__sflush_r+0x1a>
 802589a:	89a3      	ldrh	r3, [r4, #12]
 802589c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80258a0:	81a3      	strh	r3, [r4, #12]
 80258a2:	e7ad      	b.n	8025800 <__sflush_r+0x1c>
 80258a4:	690f      	ldr	r7, [r1, #16]
 80258a6:	2f00      	cmp	r7, #0
 80258a8:	d0a9      	beq.n	80257fe <__sflush_r+0x1a>
 80258aa:	0793      	lsls	r3, r2, #30
 80258ac:	680e      	ldr	r6, [r1, #0]
 80258ae:	bf08      	it	eq
 80258b0:	694b      	ldreq	r3, [r1, #20]
 80258b2:	600f      	str	r7, [r1, #0]
 80258b4:	bf18      	it	ne
 80258b6:	2300      	movne	r3, #0
 80258b8:	eba6 0807 	sub.w	r8, r6, r7
 80258bc:	608b      	str	r3, [r1, #8]
 80258be:	f1b8 0f00 	cmp.w	r8, #0
 80258c2:	dd9c      	ble.n	80257fe <__sflush_r+0x1a>
 80258c4:	4643      	mov	r3, r8
 80258c6:	463a      	mov	r2, r7
 80258c8:	6a21      	ldr	r1, [r4, #32]
 80258ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80258cc:	4628      	mov	r0, r5
 80258ce:	47b0      	blx	r6
 80258d0:	2800      	cmp	r0, #0
 80258d2:	dc06      	bgt.n	80258e2 <__sflush_r+0xfe>
 80258d4:	89a3      	ldrh	r3, [r4, #12]
 80258d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80258da:	81a3      	strh	r3, [r4, #12]
 80258dc:	f04f 30ff 	mov.w	r0, #4294967295
 80258e0:	e78e      	b.n	8025800 <__sflush_r+0x1c>
 80258e2:	4407      	add	r7, r0
 80258e4:	eba8 0800 	sub.w	r8, r8, r0
 80258e8:	e7e9      	b.n	80258be <__sflush_r+0xda>
 80258ea:	bf00      	nop
 80258ec:	20400001 	.word	0x20400001

080258f0 <_fflush_r>:
 80258f0:	b538      	push	{r3, r4, r5, lr}
 80258f2:	690b      	ldr	r3, [r1, #16]
 80258f4:	4605      	mov	r5, r0
 80258f6:	460c      	mov	r4, r1
 80258f8:	b1db      	cbz	r3, 8025932 <_fflush_r+0x42>
 80258fa:	b118      	cbz	r0, 8025904 <_fflush_r+0x14>
 80258fc:	6983      	ldr	r3, [r0, #24]
 80258fe:	b90b      	cbnz	r3, 8025904 <_fflush_r+0x14>
 8025900:	f000 f860 	bl	80259c4 <__sinit>
 8025904:	4b0c      	ldr	r3, [pc, #48]	; (8025938 <_fflush_r+0x48>)
 8025906:	429c      	cmp	r4, r3
 8025908:	d109      	bne.n	802591e <_fflush_r+0x2e>
 802590a:	686c      	ldr	r4, [r5, #4]
 802590c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025910:	b17b      	cbz	r3, 8025932 <_fflush_r+0x42>
 8025912:	4621      	mov	r1, r4
 8025914:	4628      	mov	r0, r5
 8025916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802591a:	f7ff bf63 	b.w	80257e4 <__sflush_r>
 802591e:	4b07      	ldr	r3, [pc, #28]	; (802593c <_fflush_r+0x4c>)
 8025920:	429c      	cmp	r4, r3
 8025922:	d101      	bne.n	8025928 <_fflush_r+0x38>
 8025924:	68ac      	ldr	r4, [r5, #8]
 8025926:	e7f1      	b.n	802590c <_fflush_r+0x1c>
 8025928:	4b05      	ldr	r3, [pc, #20]	; (8025940 <_fflush_r+0x50>)
 802592a:	429c      	cmp	r4, r3
 802592c:	bf08      	it	eq
 802592e:	68ec      	ldreq	r4, [r5, #12]
 8025930:	e7ec      	b.n	802590c <_fflush_r+0x1c>
 8025932:	2000      	movs	r0, #0
 8025934:	bd38      	pop	{r3, r4, r5, pc}
 8025936:	bf00      	nop
 8025938:	0802a014 	.word	0x0802a014
 802593c:	0802a034 	.word	0x0802a034
 8025940:	08029ff4 	.word	0x08029ff4

08025944 <std>:
 8025944:	2300      	movs	r3, #0
 8025946:	b510      	push	{r4, lr}
 8025948:	4604      	mov	r4, r0
 802594a:	e9c0 3300 	strd	r3, r3, [r0]
 802594e:	6083      	str	r3, [r0, #8]
 8025950:	8181      	strh	r1, [r0, #12]
 8025952:	6643      	str	r3, [r0, #100]	; 0x64
 8025954:	81c2      	strh	r2, [r0, #14]
 8025956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802595a:	6183      	str	r3, [r0, #24]
 802595c:	4619      	mov	r1, r3
 802595e:	2208      	movs	r2, #8
 8025960:	305c      	adds	r0, #92	; 0x5c
 8025962:	f7ff fa4e 	bl	8024e02 <memset>
 8025966:	4b05      	ldr	r3, [pc, #20]	; (802597c <std+0x38>)
 8025968:	6263      	str	r3, [r4, #36]	; 0x24
 802596a:	4b05      	ldr	r3, [pc, #20]	; (8025980 <std+0x3c>)
 802596c:	62a3      	str	r3, [r4, #40]	; 0x28
 802596e:	4b05      	ldr	r3, [pc, #20]	; (8025984 <std+0x40>)
 8025970:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025972:	4b05      	ldr	r3, [pc, #20]	; (8025988 <std+0x44>)
 8025974:	6224      	str	r4, [r4, #32]
 8025976:	6323      	str	r3, [r4, #48]	; 0x30
 8025978:	bd10      	pop	{r4, pc}
 802597a:	bf00      	nop
 802597c:	08025ba5 	.word	0x08025ba5
 8025980:	08025bc7 	.word	0x08025bc7
 8025984:	08025bff 	.word	0x08025bff
 8025988:	08025c23 	.word	0x08025c23

0802598c <_cleanup_r>:
 802598c:	4901      	ldr	r1, [pc, #4]	; (8025994 <_cleanup_r+0x8>)
 802598e:	f000 b885 	b.w	8025a9c <_fwalk_reent>
 8025992:	bf00      	nop
 8025994:	080258f1 	.word	0x080258f1

08025998 <__sfmoreglue>:
 8025998:	b570      	push	{r4, r5, r6, lr}
 802599a:	1e4a      	subs	r2, r1, #1
 802599c:	2568      	movs	r5, #104	; 0x68
 802599e:	4355      	muls	r5, r2
 80259a0:	460e      	mov	r6, r1
 80259a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80259a6:	f7ff fa83 	bl	8024eb0 <_malloc_r>
 80259aa:	4604      	mov	r4, r0
 80259ac:	b140      	cbz	r0, 80259c0 <__sfmoreglue+0x28>
 80259ae:	2100      	movs	r1, #0
 80259b0:	e9c0 1600 	strd	r1, r6, [r0]
 80259b4:	300c      	adds	r0, #12
 80259b6:	60a0      	str	r0, [r4, #8]
 80259b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80259bc:	f7ff fa21 	bl	8024e02 <memset>
 80259c0:	4620      	mov	r0, r4
 80259c2:	bd70      	pop	{r4, r5, r6, pc}

080259c4 <__sinit>:
 80259c4:	6983      	ldr	r3, [r0, #24]
 80259c6:	b510      	push	{r4, lr}
 80259c8:	4604      	mov	r4, r0
 80259ca:	bb33      	cbnz	r3, 8025a1a <__sinit+0x56>
 80259cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80259d0:	6503      	str	r3, [r0, #80]	; 0x50
 80259d2:	4b12      	ldr	r3, [pc, #72]	; (8025a1c <__sinit+0x58>)
 80259d4:	4a12      	ldr	r2, [pc, #72]	; (8025a20 <__sinit+0x5c>)
 80259d6:	681b      	ldr	r3, [r3, #0]
 80259d8:	6282      	str	r2, [r0, #40]	; 0x28
 80259da:	4298      	cmp	r0, r3
 80259dc:	bf04      	itt	eq
 80259de:	2301      	moveq	r3, #1
 80259e0:	6183      	streq	r3, [r0, #24]
 80259e2:	f000 f81f 	bl	8025a24 <__sfp>
 80259e6:	6060      	str	r0, [r4, #4]
 80259e8:	4620      	mov	r0, r4
 80259ea:	f000 f81b 	bl	8025a24 <__sfp>
 80259ee:	60a0      	str	r0, [r4, #8]
 80259f0:	4620      	mov	r0, r4
 80259f2:	f000 f817 	bl	8025a24 <__sfp>
 80259f6:	2200      	movs	r2, #0
 80259f8:	60e0      	str	r0, [r4, #12]
 80259fa:	2104      	movs	r1, #4
 80259fc:	6860      	ldr	r0, [r4, #4]
 80259fe:	f7ff ffa1 	bl	8025944 <std>
 8025a02:	2201      	movs	r2, #1
 8025a04:	2109      	movs	r1, #9
 8025a06:	68a0      	ldr	r0, [r4, #8]
 8025a08:	f7ff ff9c 	bl	8025944 <std>
 8025a0c:	2202      	movs	r2, #2
 8025a0e:	2112      	movs	r1, #18
 8025a10:	68e0      	ldr	r0, [r4, #12]
 8025a12:	f7ff ff97 	bl	8025944 <std>
 8025a16:	2301      	movs	r3, #1
 8025a18:	61a3      	str	r3, [r4, #24]
 8025a1a:	bd10      	pop	{r4, pc}
 8025a1c:	08029fb8 	.word	0x08029fb8
 8025a20:	0802598d 	.word	0x0802598d

08025a24 <__sfp>:
 8025a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a26:	4b1b      	ldr	r3, [pc, #108]	; (8025a94 <__sfp+0x70>)
 8025a28:	681e      	ldr	r6, [r3, #0]
 8025a2a:	69b3      	ldr	r3, [r6, #24]
 8025a2c:	4607      	mov	r7, r0
 8025a2e:	b913      	cbnz	r3, 8025a36 <__sfp+0x12>
 8025a30:	4630      	mov	r0, r6
 8025a32:	f7ff ffc7 	bl	80259c4 <__sinit>
 8025a36:	3648      	adds	r6, #72	; 0x48
 8025a38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025a3c:	3b01      	subs	r3, #1
 8025a3e:	d503      	bpl.n	8025a48 <__sfp+0x24>
 8025a40:	6833      	ldr	r3, [r6, #0]
 8025a42:	b133      	cbz	r3, 8025a52 <__sfp+0x2e>
 8025a44:	6836      	ldr	r6, [r6, #0]
 8025a46:	e7f7      	b.n	8025a38 <__sfp+0x14>
 8025a48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025a4c:	b16d      	cbz	r5, 8025a6a <__sfp+0x46>
 8025a4e:	3468      	adds	r4, #104	; 0x68
 8025a50:	e7f4      	b.n	8025a3c <__sfp+0x18>
 8025a52:	2104      	movs	r1, #4
 8025a54:	4638      	mov	r0, r7
 8025a56:	f7ff ff9f 	bl	8025998 <__sfmoreglue>
 8025a5a:	6030      	str	r0, [r6, #0]
 8025a5c:	2800      	cmp	r0, #0
 8025a5e:	d1f1      	bne.n	8025a44 <__sfp+0x20>
 8025a60:	230c      	movs	r3, #12
 8025a62:	603b      	str	r3, [r7, #0]
 8025a64:	4604      	mov	r4, r0
 8025a66:	4620      	mov	r0, r4
 8025a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025a6a:	4b0b      	ldr	r3, [pc, #44]	; (8025a98 <__sfp+0x74>)
 8025a6c:	6665      	str	r5, [r4, #100]	; 0x64
 8025a6e:	e9c4 5500 	strd	r5, r5, [r4]
 8025a72:	60a5      	str	r5, [r4, #8]
 8025a74:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8025a78:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8025a7c:	2208      	movs	r2, #8
 8025a7e:	4629      	mov	r1, r5
 8025a80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025a84:	f7ff f9bd 	bl	8024e02 <memset>
 8025a88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025a8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025a90:	e7e9      	b.n	8025a66 <__sfp+0x42>
 8025a92:	bf00      	nop
 8025a94:	08029fb8 	.word	0x08029fb8
 8025a98:	ffff0001 	.word	0xffff0001

08025a9c <_fwalk_reent>:
 8025a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025aa0:	4680      	mov	r8, r0
 8025aa2:	4689      	mov	r9, r1
 8025aa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025aa8:	2600      	movs	r6, #0
 8025aaa:	b914      	cbnz	r4, 8025ab2 <_fwalk_reent+0x16>
 8025aac:	4630      	mov	r0, r6
 8025aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025ab2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8025ab6:	3f01      	subs	r7, #1
 8025ab8:	d501      	bpl.n	8025abe <_fwalk_reent+0x22>
 8025aba:	6824      	ldr	r4, [r4, #0]
 8025abc:	e7f5      	b.n	8025aaa <_fwalk_reent+0xe>
 8025abe:	89ab      	ldrh	r3, [r5, #12]
 8025ac0:	2b01      	cmp	r3, #1
 8025ac2:	d907      	bls.n	8025ad4 <_fwalk_reent+0x38>
 8025ac4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025ac8:	3301      	adds	r3, #1
 8025aca:	d003      	beq.n	8025ad4 <_fwalk_reent+0x38>
 8025acc:	4629      	mov	r1, r5
 8025ace:	4640      	mov	r0, r8
 8025ad0:	47c8      	blx	r9
 8025ad2:	4306      	orrs	r6, r0
 8025ad4:	3568      	adds	r5, #104	; 0x68
 8025ad6:	e7ee      	b.n	8025ab6 <_fwalk_reent+0x1a>

08025ad8 <__swhatbuf_r>:
 8025ad8:	b570      	push	{r4, r5, r6, lr}
 8025ada:	460e      	mov	r6, r1
 8025adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025ae0:	2900      	cmp	r1, #0
 8025ae2:	b096      	sub	sp, #88	; 0x58
 8025ae4:	4614      	mov	r4, r2
 8025ae6:	461d      	mov	r5, r3
 8025ae8:	da07      	bge.n	8025afa <__swhatbuf_r+0x22>
 8025aea:	2300      	movs	r3, #0
 8025aec:	602b      	str	r3, [r5, #0]
 8025aee:	89b3      	ldrh	r3, [r6, #12]
 8025af0:	061a      	lsls	r2, r3, #24
 8025af2:	d410      	bmi.n	8025b16 <__swhatbuf_r+0x3e>
 8025af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025af8:	e00e      	b.n	8025b18 <__swhatbuf_r+0x40>
 8025afa:	466a      	mov	r2, sp
 8025afc:	f000 f8b8 	bl	8025c70 <_fstat_r>
 8025b00:	2800      	cmp	r0, #0
 8025b02:	dbf2      	blt.n	8025aea <__swhatbuf_r+0x12>
 8025b04:	9a01      	ldr	r2, [sp, #4]
 8025b06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025b0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025b0e:	425a      	negs	r2, r3
 8025b10:	415a      	adcs	r2, r3
 8025b12:	602a      	str	r2, [r5, #0]
 8025b14:	e7ee      	b.n	8025af4 <__swhatbuf_r+0x1c>
 8025b16:	2340      	movs	r3, #64	; 0x40
 8025b18:	2000      	movs	r0, #0
 8025b1a:	6023      	str	r3, [r4, #0]
 8025b1c:	b016      	add	sp, #88	; 0x58
 8025b1e:	bd70      	pop	{r4, r5, r6, pc}

08025b20 <__smakebuf_r>:
 8025b20:	898b      	ldrh	r3, [r1, #12]
 8025b22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025b24:	079d      	lsls	r5, r3, #30
 8025b26:	4606      	mov	r6, r0
 8025b28:	460c      	mov	r4, r1
 8025b2a:	d507      	bpl.n	8025b3c <__smakebuf_r+0x1c>
 8025b2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025b30:	6023      	str	r3, [r4, #0]
 8025b32:	6123      	str	r3, [r4, #16]
 8025b34:	2301      	movs	r3, #1
 8025b36:	6163      	str	r3, [r4, #20]
 8025b38:	b002      	add	sp, #8
 8025b3a:	bd70      	pop	{r4, r5, r6, pc}
 8025b3c:	ab01      	add	r3, sp, #4
 8025b3e:	466a      	mov	r2, sp
 8025b40:	f7ff ffca 	bl	8025ad8 <__swhatbuf_r>
 8025b44:	9900      	ldr	r1, [sp, #0]
 8025b46:	4605      	mov	r5, r0
 8025b48:	4630      	mov	r0, r6
 8025b4a:	f7ff f9b1 	bl	8024eb0 <_malloc_r>
 8025b4e:	b948      	cbnz	r0, 8025b64 <__smakebuf_r+0x44>
 8025b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025b54:	059a      	lsls	r2, r3, #22
 8025b56:	d4ef      	bmi.n	8025b38 <__smakebuf_r+0x18>
 8025b58:	f023 0303 	bic.w	r3, r3, #3
 8025b5c:	f043 0302 	orr.w	r3, r3, #2
 8025b60:	81a3      	strh	r3, [r4, #12]
 8025b62:	e7e3      	b.n	8025b2c <__smakebuf_r+0xc>
 8025b64:	4b0d      	ldr	r3, [pc, #52]	; (8025b9c <__smakebuf_r+0x7c>)
 8025b66:	62b3      	str	r3, [r6, #40]	; 0x28
 8025b68:	89a3      	ldrh	r3, [r4, #12]
 8025b6a:	6020      	str	r0, [r4, #0]
 8025b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025b70:	81a3      	strh	r3, [r4, #12]
 8025b72:	9b00      	ldr	r3, [sp, #0]
 8025b74:	6163      	str	r3, [r4, #20]
 8025b76:	9b01      	ldr	r3, [sp, #4]
 8025b78:	6120      	str	r0, [r4, #16]
 8025b7a:	b15b      	cbz	r3, 8025b94 <__smakebuf_r+0x74>
 8025b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025b80:	4630      	mov	r0, r6
 8025b82:	f000 f887 	bl	8025c94 <_isatty_r>
 8025b86:	b128      	cbz	r0, 8025b94 <__smakebuf_r+0x74>
 8025b88:	89a3      	ldrh	r3, [r4, #12]
 8025b8a:	f023 0303 	bic.w	r3, r3, #3
 8025b8e:	f043 0301 	orr.w	r3, r3, #1
 8025b92:	81a3      	strh	r3, [r4, #12]
 8025b94:	89a3      	ldrh	r3, [r4, #12]
 8025b96:	431d      	orrs	r5, r3
 8025b98:	81a5      	strh	r5, [r4, #12]
 8025b9a:	e7cd      	b.n	8025b38 <__smakebuf_r+0x18>
 8025b9c:	0802598d 	.word	0x0802598d

08025ba0 <__malloc_lock>:
 8025ba0:	4770      	bx	lr

08025ba2 <__malloc_unlock>:
 8025ba2:	4770      	bx	lr

08025ba4 <__sread>:
 8025ba4:	b510      	push	{r4, lr}
 8025ba6:	460c      	mov	r4, r1
 8025ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025bac:	f000 f894 	bl	8025cd8 <_read_r>
 8025bb0:	2800      	cmp	r0, #0
 8025bb2:	bfab      	itete	ge
 8025bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8025bb8:	181b      	addge	r3, r3, r0
 8025bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025bbe:	bfac      	ite	ge
 8025bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8025bc2:	81a3      	strhlt	r3, [r4, #12]
 8025bc4:	bd10      	pop	{r4, pc}

08025bc6 <__swrite>:
 8025bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025bca:	461f      	mov	r7, r3
 8025bcc:	898b      	ldrh	r3, [r1, #12]
 8025bce:	05db      	lsls	r3, r3, #23
 8025bd0:	4605      	mov	r5, r0
 8025bd2:	460c      	mov	r4, r1
 8025bd4:	4616      	mov	r6, r2
 8025bd6:	d505      	bpl.n	8025be4 <__swrite+0x1e>
 8025bd8:	2302      	movs	r3, #2
 8025bda:	2200      	movs	r2, #0
 8025bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025be0:	f000 f868 	bl	8025cb4 <_lseek_r>
 8025be4:	89a3      	ldrh	r3, [r4, #12]
 8025be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025bee:	81a3      	strh	r3, [r4, #12]
 8025bf0:	4632      	mov	r2, r6
 8025bf2:	463b      	mov	r3, r7
 8025bf4:	4628      	mov	r0, r5
 8025bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025bfa:	f000 b817 	b.w	8025c2c <_write_r>

08025bfe <__sseek>:
 8025bfe:	b510      	push	{r4, lr}
 8025c00:	460c      	mov	r4, r1
 8025c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025c06:	f000 f855 	bl	8025cb4 <_lseek_r>
 8025c0a:	1c43      	adds	r3, r0, #1
 8025c0c:	89a3      	ldrh	r3, [r4, #12]
 8025c0e:	bf15      	itete	ne
 8025c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8025c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025c1a:	81a3      	strheq	r3, [r4, #12]
 8025c1c:	bf18      	it	ne
 8025c1e:	81a3      	strhne	r3, [r4, #12]
 8025c20:	bd10      	pop	{r4, pc}

08025c22 <__sclose>:
 8025c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025c26:	f000 b813 	b.w	8025c50 <_close_r>
	...

08025c2c <_write_r>:
 8025c2c:	b538      	push	{r3, r4, r5, lr}
 8025c2e:	4c07      	ldr	r4, [pc, #28]	; (8025c4c <_write_r+0x20>)
 8025c30:	4605      	mov	r5, r0
 8025c32:	4608      	mov	r0, r1
 8025c34:	4611      	mov	r1, r2
 8025c36:	2200      	movs	r2, #0
 8025c38:	6022      	str	r2, [r4, #0]
 8025c3a:	461a      	mov	r2, r3
 8025c3c:	f7dd fd2b 	bl	8003696 <_write>
 8025c40:	1c43      	adds	r3, r0, #1
 8025c42:	d102      	bne.n	8025c4a <_write_r+0x1e>
 8025c44:	6823      	ldr	r3, [r4, #0]
 8025c46:	b103      	cbz	r3, 8025c4a <_write_r+0x1e>
 8025c48:	602b      	str	r3, [r5, #0]
 8025c4a:	bd38      	pop	{r3, r4, r5, pc}
 8025c4c:	2000cb88 	.word	0x2000cb88

08025c50 <_close_r>:
 8025c50:	b538      	push	{r3, r4, r5, lr}
 8025c52:	4c06      	ldr	r4, [pc, #24]	; (8025c6c <_close_r+0x1c>)
 8025c54:	2300      	movs	r3, #0
 8025c56:	4605      	mov	r5, r0
 8025c58:	4608      	mov	r0, r1
 8025c5a:	6023      	str	r3, [r4, #0]
 8025c5c:	f7dd fd37 	bl	80036ce <_close>
 8025c60:	1c43      	adds	r3, r0, #1
 8025c62:	d102      	bne.n	8025c6a <_close_r+0x1a>
 8025c64:	6823      	ldr	r3, [r4, #0]
 8025c66:	b103      	cbz	r3, 8025c6a <_close_r+0x1a>
 8025c68:	602b      	str	r3, [r5, #0]
 8025c6a:	bd38      	pop	{r3, r4, r5, pc}
 8025c6c:	2000cb88 	.word	0x2000cb88

08025c70 <_fstat_r>:
 8025c70:	b538      	push	{r3, r4, r5, lr}
 8025c72:	4c07      	ldr	r4, [pc, #28]	; (8025c90 <_fstat_r+0x20>)
 8025c74:	2300      	movs	r3, #0
 8025c76:	4605      	mov	r5, r0
 8025c78:	4608      	mov	r0, r1
 8025c7a:	4611      	mov	r1, r2
 8025c7c:	6023      	str	r3, [r4, #0]
 8025c7e:	f7dd fd32 	bl	80036e6 <_fstat>
 8025c82:	1c43      	adds	r3, r0, #1
 8025c84:	d102      	bne.n	8025c8c <_fstat_r+0x1c>
 8025c86:	6823      	ldr	r3, [r4, #0]
 8025c88:	b103      	cbz	r3, 8025c8c <_fstat_r+0x1c>
 8025c8a:	602b      	str	r3, [r5, #0]
 8025c8c:	bd38      	pop	{r3, r4, r5, pc}
 8025c8e:	bf00      	nop
 8025c90:	2000cb88 	.word	0x2000cb88

08025c94 <_isatty_r>:
 8025c94:	b538      	push	{r3, r4, r5, lr}
 8025c96:	4c06      	ldr	r4, [pc, #24]	; (8025cb0 <_isatty_r+0x1c>)
 8025c98:	2300      	movs	r3, #0
 8025c9a:	4605      	mov	r5, r0
 8025c9c:	4608      	mov	r0, r1
 8025c9e:	6023      	str	r3, [r4, #0]
 8025ca0:	f7dd fd31 	bl	8003706 <_isatty>
 8025ca4:	1c43      	adds	r3, r0, #1
 8025ca6:	d102      	bne.n	8025cae <_isatty_r+0x1a>
 8025ca8:	6823      	ldr	r3, [r4, #0]
 8025caa:	b103      	cbz	r3, 8025cae <_isatty_r+0x1a>
 8025cac:	602b      	str	r3, [r5, #0]
 8025cae:	bd38      	pop	{r3, r4, r5, pc}
 8025cb0:	2000cb88 	.word	0x2000cb88

08025cb4 <_lseek_r>:
 8025cb4:	b538      	push	{r3, r4, r5, lr}
 8025cb6:	4c07      	ldr	r4, [pc, #28]	; (8025cd4 <_lseek_r+0x20>)
 8025cb8:	4605      	mov	r5, r0
 8025cba:	4608      	mov	r0, r1
 8025cbc:	4611      	mov	r1, r2
 8025cbe:	2200      	movs	r2, #0
 8025cc0:	6022      	str	r2, [r4, #0]
 8025cc2:	461a      	mov	r2, r3
 8025cc4:	f7dd fd2a 	bl	800371c <_lseek>
 8025cc8:	1c43      	adds	r3, r0, #1
 8025cca:	d102      	bne.n	8025cd2 <_lseek_r+0x1e>
 8025ccc:	6823      	ldr	r3, [r4, #0]
 8025cce:	b103      	cbz	r3, 8025cd2 <_lseek_r+0x1e>
 8025cd0:	602b      	str	r3, [r5, #0]
 8025cd2:	bd38      	pop	{r3, r4, r5, pc}
 8025cd4:	2000cb88 	.word	0x2000cb88

08025cd8 <_read_r>:
 8025cd8:	b538      	push	{r3, r4, r5, lr}
 8025cda:	4c07      	ldr	r4, [pc, #28]	; (8025cf8 <_read_r+0x20>)
 8025cdc:	4605      	mov	r5, r0
 8025cde:	4608      	mov	r0, r1
 8025ce0:	4611      	mov	r1, r2
 8025ce2:	2200      	movs	r2, #0
 8025ce4:	6022      	str	r2, [r4, #0]
 8025ce6:	461a      	mov	r2, r3
 8025ce8:	f7dd fcb8 	bl	800365c <_read>
 8025cec:	1c43      	adds	r3, r0, #1
 8025cee:	d102      	bne.n	8025cf6 <_read_r+0x1e>
 8025cf0:	6823      	ldr	r3, [r4, #0]
 8025cf2:	b103      	cbz	r3, 8025cf6 <_read_r+0x1e>
 8025cf4:	602b      	str	r3, [r5, #0]
 8025cf6:	bd38      	pop	{r3, r4, r5, pc}
 8025cf8:	2000cb88 	.word	0x2000cb88

08025cfc <_init>:
 8025cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025cfe:	bf00      	nop
 8025d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d02:	bc08      	pop	{r3}
 8025d04:	469e      	mov	lr, r3
 8025d06:	4770      	bx	lr

08025d08 <_fini>:
 8025d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d0a:	bf00      	nop
 8025d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d0e:	bc08      	pop	{r3}
 8025d10:	469e      	mov	lr, r3
 8025d12:	4770      	bx	lr
