
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000236f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000411c  080238c4  080238c4  000338c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00001b26  080279e0  080279e0  000379e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00042200  08029508  08029508  00039508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000d8  0806b708  0806b708  0007b708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0806b7e0  0806b7e0  000800fc  2**0
                  CONTENTS
  7 .ARM          00000008  0806b7e0  0806b7e0  0007b7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0806b7e8  0806b7e8  000800fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0806b7e8  0806b7e8  0007b7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0806b7fc  0806b7fc  0007b7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  0806b804  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c230  200000fc  0806b900  000800fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000c32c  0806b900  0008c32c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000800fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   000551ef  00000000  00000000  0008012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000d893  00000000  00000000  000d531b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003e68  00000000  00000000  000e2bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003960  00000000  00000000  000e6a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003a49d  00000000  00000000  000ea378  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0003cfc4  00000000  00000000  00124815  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012dd9d  00000000  00000000  001617d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0028f576  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00010ef8  00000000  00000000  0028f670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080238ac 	.word	0x080238ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	080238ac 	.word	0x080238ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000118 	.word	0x20000118
 8000614:	20000170 	.word	0x20000170

08000618 <SecondTask>:
   float  lambda;
   float  lambda_trgt;
} display_values;

void SecondTask(void const* argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		display_values dispVals = {rpm, clt, map, lambda, lambda_targ};
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <SecondTask+0x40>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <SecondTask+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <SecondTask+0x48>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <SecondTask+0x4c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	61bb      	str	r3, [r7, #24]
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <SecondTask+0x50>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	61fb      	str	r3, [r7, #28]
	    xQueueSend(messageQ, &dispVals,0);
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <SecondTask+0x54>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	f107 010c 	add.w	r1, r7, #12
 8000646:	2300      	movs	r3, #0
 8000648:	2200      	movs	r2, #0
 800064a:	f00b fcb1 	bl	800bfb0 <xQueueGenericSend>
		osDelay(150);
 800064e:	2096      	movs	r0, #150	; 0x96
 8000650:	f00b f9c0 	bl	800b9d4 <osDelay>
	{
 8000654:	e7e4      	b.n	8000620 <SecondTask+0x8>
 8000656:	bf00      	nop
 8000658:	2000000c 	.word	0x2000000c
 800065c:	20000014 	.word	0x20000014
 8000660:	20000010 	.word	0x20000010
 8000664:	20000004 	.word	0x20000004
 8000668:	20000008 	.word	0x20000008
 800066c:	200085a0 	.word	0x200085a0

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f002 fc48 	bl	8002f0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f85f 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f001 f91b 	bl	80018b8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000682:	f000 f917 	bl	80008b4 <MX_ADC3_Init>
  MX_CRC_Init();
 8000686:	f000 fa53 	bl	8000b30 <MX_CRC_Init>
  MX_DCMI_Init();
 800068a:	f000 fa73 	bl	8000b74 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800068e:	f000 faa5 	bl	8000bdc <MX_DMA2D_Init>
  MX_FMC_Init();
 8000692:	f001 f865 	bl	8001760 <MX_FMC_Init>
  MX_LTDC_Init();
 8000696:	f000 fad3 	bl	8000c40 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800069a:	f000 fb53 	bl	8000d44 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800069e:	f000 fb7d 	bl	8000d9c <MX_RTC_Init>
  MX_SAI2_Init();
 80006a2:	f000 fc23 	bl	8000eec <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80006a6:	f000 fcc9 	bl	800103c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80006aa:	f000 fce7 	bl	800107c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80006ae:	f000 fd15 	bl	80010dc <MX_SPI2_Init>
  MX_TIM1_Init();
 80006b2:	f000 fd51 	bl	8001158 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006b6:	f000 fdfb 	bl	80012b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006ba:	f000 fe6f 	bl	800139c <MX_TIM3_Init>
  MX_TIM5_Init();
 80006be:	f000 fee3 	bl	8001488 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006c2:	f000 ff57 	bl	8001574 <MX_TIM8_Init>
  MX_TIM12_Init();
 80006c6:	f000 ffa7 	bl	8001618 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80006ca:	f000 ffe9 	bl	80016a0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80006ce:	f001 f817 	bl	8001700 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80006d2:	f00a fe3b 	bl	800b34c <MX_FATFS_Init>
  MX_CAN1_Init();
 80006d6:	f000 f93f 	bl	8000958 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 80006da:	f00d feab 	bl	800e434 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <main+0xbc>)
 80006e0:	f107 041c 	add.w	r4, r7, #28
 80006e4:	461d      	mov	r5, r3
 80006e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f00b f91f 	bl	800b93c <osThreadCreate>
 80006fe:	4602      	mov	r2, r0
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <main+0xc0>)
 8000702:	601a      	str	r2, [r3, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <main+0xc4>)
 8000706:	463c      	mov	r4, r7
 8000708:	461d      	mov	r5, r3
 800070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000716:	463b      	mov	r3, r7
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f00b f90e 	bl	800b93c <osThreadCreate>
 8000720:	4602      	mov	r2, r0
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <main+0xc8>)
 8000724:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000726:	f00b f8e6 	bl	800b8f6 <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072a:	e7fe      	b.n	800072a <main+0xba>
 800072c:	080238d0 	.word	0x080238d0
 8000730:	2000b7ac 	.word	0x2000b7ac
 8000734:	080238f4 	.word	0x080238f4
 8000738:	2000b7a8 	.word	0x2000b7a8

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0b4      	sub	sp, #208	; 0xd0
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f022 f931 	bl	80229b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2284      	movs	r2, #132	; 0x84
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f022 f922 	bl	80229b2 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800076e:	f005 f8a1 	bl	80058b4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b4d      	ldr	r3, [pc, #308]	; (80008a8 <SystemClock_Config+0x16c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a4c      	ldr	r2, [pc, #304]	; (80008a8 <SystemClock_Config+0x16c>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b4a      	ldr	r3, [pc, #296]	; (80008a8 <SystemClock_Config+0x16c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078a:	4b48      	ldr	r3, [pc, #288]	; (80008ac <SystemClock_Config+0x170>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a47      	ldr	r2, [pc, #284]	; (80008ac <SystemClock_Config+0x170>)
 8000790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <SystemClock_Config+0x170>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007a2:	2309      	movs	r3, #9
 80007a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007c4:	2319      	movs	r3, #25
 80007c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80007ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007d8:	2309      	movs	r3, #9
 80007da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f005 f988 	bl	8005af8 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007ee:	f001 fa97 	bl	8001d20 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f2:	f005 f86f 	bl	80058d4 <HAL_PWREx_EnableOverDrive>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007fc:	f001 fa90 	bl	8001d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000812:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000816:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000822:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000826:	2106      	movs	r1, #6
 8000828:	4618      	mov	r0, r3
 800082a:	f005 fc09 	bl	8006040 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000834:	f001 fa74 	bl	8001d20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <SystemClock_Config+0x174>)
 800083a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800083c:	2364      	movs	r3, #100	; 0x64
 800083e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000844:	2302      	movs	r3, #2
 8000846:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800084c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000850:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000852:	2305      	movs	r3, #5
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800085a:	2303      	movs	r3, #3
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800086c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000870:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000872:	2300      	movs	r3, #0
 8000874:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000876:	2300      	movs	r3, #0
 8000878:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800087a:	2300      	movs	r3, #0
 800087c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800087e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000882:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4618      	mov	r0, r3
 8000892:	f005 fdd9 	bl	8006448 <HAL_RCCEx_PeriphCLKConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x164>
  {
    Error_Handler();
 800089c:	f001 fa40 	bl	8001d20 <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	37d0      	adds	r7, #208	; 0xd0
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000
 80008b0:	01b00868 	.word	0x01b00868

080008b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <MX_ADC3_Init+0x98>)
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <MX_ADC3_Init+0x9c>)
 80008ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_ADC3_Init+0x98>)
 80008ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_ADC3_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_ADC3_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_ADC3_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_ADC3_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_ADC3_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_ADC3_Init+0x98>)
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <MX_ADC3_Init+0xa0>)
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_ADC3_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_ADC3_Init+0x98>)
 8000902:	2201      	movs	r2, #1
 8000904:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_ADC3_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_ADC3_Init+0x98>)
 8000910:	2201      	movs	r2, #1
 8000912:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_ADC3_Init+0x98>)
 8000916:	f002 fb47 	bl	8002fa8 <HAL_ADC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000920:	f001 f9fe 	bl	8001d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000924:	2304      	movs	r3, #4
 8000926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000928:	2301      	movs	r3, #1
 800092a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_ADC3_Init+0x98>)
 8000936:	f002 fb7b 	bl	8003030 <HAL_ADC_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000940:	f001 f9ee 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000baf4 	.word	0x2000baf4
 8000950:	40012200 	.word	0x40012200
 8000954:	0f000001 	.word	0x0f000001

08000958 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000960:	4a30      	ldr	r2, [pc, #192]	; (8000a24 <MX_CAN1_Init+0xcc>)
 8000962:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000966:	2214      	movs	r2, #20
 8000968:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <MX_CAN1_Init+0xc8>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000970:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000978:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800097c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000986:	2200      	movs	r2, #0
 8000988:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800098a:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_CAN1_Init+0xc8>)
 800098c:	2200      	movs	r2, #0
 800098e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000990:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000992:	2200      	movs	r2, #0
 8000994:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000998:	2200      	movs	r2, #0
 800099a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_CAN1_Init+0xc8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_CAN1_Init+0xc8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009a8:	481d      	ldr	r0, [pc, #116]	; (8000a20 <MX_CAN1_Init+0xc8>)
 80009aa:	f002 fd85 	bl	80034b8 <HAL_CAN_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009b4:	f001 f9b4 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80009c4:	2300      	movs	r3, #0
 80009c6:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80009dc:	230e      	movs	r3, #14
 80009de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80009e0:	463b      	mov	r3, r7
 80009e2:	4619      	mov	r1, r3
 80009e4:	480e      	ldr	r0, [pc, #56]	; (8000a20 <MX_CAN1_Init+0xc8>)
 80009e6:	f002 fe63 	bl	80036b0 <HAL_CAN_ConfigFilter>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80009f0:	f001 f996 	bl	8001d20 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80009f4:	480a      	ldr	r0, [pc, #40]	; (8000a20 <MX_CAN1_Init+0xc8>)
 80009f6:	f002 ff3b 	bl	8003870 <HAL_CAN_Start>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8000a00:	f001 f98e 	bl	8001d20 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000a04:	2102      	movs	r1, #2
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000a08:	f003 f888 	bl	8003b1c <HAL_CAN_ActivateNotification>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 8000a12:	f001 f985 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000bd74 	.word	0x2000bd74
 8000a24:	40006400 	.word	0x40006400

08000a28 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000a30:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a32:	4a37      	ldr	r2, [pc, #220]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f002 ff5e 	bl	80038f8 <HAL_CAN_GetRxMessage>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8000a42:	f001 f96d 	bl	8001d20 <Error_Handler>
  }

  /* Display LEDx */
  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8000a46:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a4e:	d158      	bne.n	8000b02 <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
 8000a50:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d154      	bne.n	8000b02 <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
 8000a58:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	2b08      	cmp	r3, #8
 8000a5e:	d150      	bne.n	8000b02 <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	82fb      	strh	r3, [r7, #22]
	 uint16_t map_in = (RxData[2] << 0) | (RxData[3] << 8);
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a76:	789b      	ldrb	r3, [r3, #2]
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a7c:	78db      	ldrb	r3, [r3, #3]
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	b21b      	sxth	r3, r3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	82bb      	strh	r3, [r7, #20]
	 uint16_t clt_in = (RxData[4] << 0) | (RxData[5] << 8);
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	b21a      	sxth	r2, r3
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a90:	795b      	ldrb	r3, [r3, #5]
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	4313      	orrs	r3, r2
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	827b      	strh	r3, [r7, #18]
	 uint8_t lambda_in = RxData[6];
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a9e:	799b      	ldrb	r3, [r3, #6]
 8000aa0:	747b      	strb	r3, [r7, #17]
	 uint16_t lambda_targ_in = RxData[7];
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000aa4:	79db      	ldrb	r3, [r3, #7]
 8000aa6:	81fb      	strh	r3, [r7, #14]

	 rpm = rpm_in;
 8000aa8:	8afb      	ldrh	r3, [r7, #22]
 8000aaa:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000aac:	6013      	str	r3, [r2, #0]
	 map = map_in / 10;
 8000aae:	8abb      	ldrh	r3, [r7, #20]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000abe:	601a      	str	r2, [r3, #0]
	 clt = clt_in / 10;
 8000ac0:	8a7b      	ldrh	r3, [r7, #18]
 8000ac2:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000ad0:	601a      	str	r2, [r3, #0]
	 lambda = lambda_in / 100.0f;
 8000ad2:	7c7b      	ldrb	r3, [r7, #17]
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000adc:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000b24 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 8000ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8000ae6:	edc3 7a00 	vstr	s15, [r3]
	 lambda_targ = lambda_targ_in / 100.0f;
 8000aea:	89fb      	ldrh	r3, [r7, #14]
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000af4:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000b24 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 8000af8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 8000afe:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000bd2c 	.word	0x2000bd2c
 8000b10:	2000be10 	.word	0x2000be10
 8000b14:	2000000c 	.word	0x2000000c
 8000b18:	cccccccd 	.word	0xcccccccd
 8000b1c:	20000010 	.word	0x20000010
 8000b20:	20000014 	.word	0x20000014
 8000b24:	42c80000 	.word	0x42c80000
 8000b28:	20000004 	.word	0x20000004
 8000b2c:	20000008 	.word	0x20000008

08000b30 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <MX_CRC_Init+0x40>)
 8000b38:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b5a:	f003 fb41 	bl	80041e0 <HAL_CRC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000b64:	f001 f8dc 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000b924 	.word	0x2000b924
 8000b70:	40023000 	.word	0x40023000

08000b74 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <MX_DCMI_Init+0x64>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000bc2:	f003 fbf7 	bl	80043b4 <HAL_DCMI_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f001 f8a8 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000bb3c 	.word	0x2000bb3c
 8000bd8:	50050000 	.word	0x50050000

08000bdc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000be2:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <MX_DMA2D_Init+0x60>)
 8000be4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000c12:	f003 fce3 	bl	80045dc <HAL_DMA2D_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000c1c:	f001 f880 	bl	8001d20 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c20:	2101      	movs	r1, #1
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000c24:	f003 ffa4 	bl	8004b70 <HAL_DMA2D_ConfigLayer>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000c2e:	f001 f877 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000bcec 	.word	0x2000bcec
 8000c3c:	4002b000 	.word	0x4002b000

08000c40 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2234      	movs	r2, #52	; 0x34
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f021 feb0 	bl	80229b2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c52:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c54:	4a3a      	ldr	r2, [pc, #232]	; (8000d40 <MX_LTDC_Init+0x100>)
 8000c56:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c58:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c6a:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c72:	2228      	movs	r2, #40	; 0x28
 8000c74:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000c76:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c78:	2209      	movs	r2, #9
 8000c7a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c7e:	2235      	movs	r2, #53	; 0x35
 8000c80:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c84:	220b      	movs	r2, #11
 8000c86:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c8a:	f240 2215 	movw	r2, #533	; 0x215
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000c90:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c92:	f240 121b 	movw	r2, #283	; 0x11b
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000c98:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c9a:	f240 2235 	movw	r2, #565	; 0x235
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000ca2:	f240 121d 	movw	r2, #285	; 0x11d
 8000ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cc0:	481e      	ldr	r0, [pc, #120]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000cc2:	f004 fa5f 	bl	8005184 <HAL_LTDC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ccc:	f001 f828 	bl	8001d20 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000cd4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000cd8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000cde:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ce2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ce8:	23ff      	movs	r3, #255	; 0xff
 8000cea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000cfa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000d00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000d06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000d26:	f004 fbb5 	bl	8005494 <HAL_LTDC_ConfigLayer>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000d30:	f000 fff6 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000ba4c 	.word	0x2000ba4c
 8000d40:	40016800 	.word	0x40016800

08000d44 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d4a:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <MX_QUADSPI_Init+0x54>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d80:	f004 fdf8 	bl	8005974 <HAL_QSPI_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000d8a:	f000 ffc9 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000be2c 	.word	0x2000be2c
 8000d98:	a0001000 	.word	0xa0001000

08000d9c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b092      	sub	sp, #72	; 0x48
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000da2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
 8000db2:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	222c      	movs	r2, #44	; 0x2c
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f021 fdf7 	bl	80229b2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000dc4:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000dc6:	4a48      	ldr	r2, [pc, #288]	; (8000ee8 <MX_RTC_Init+0x14c>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dca:	4b46      	ldr	r3, [pc, #280]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000dd0:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000dd2:	227f      	movs	r2, #127	; 0x7f
 8000dd4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000dd6:	4b43      	ldr	r3, [pc, #268]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000dd8:	22ff      	movs	r2, #255	; 0xff
 8000dda:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ddc:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000de2:	4b40      	ldr	r3, [pc, #256]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000de8:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dee:	483d      	ldr	r0, [pc, #244]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000df0:	f006 f84c 	bl	8006e8c <HAL_RTC_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000dfa:	f000 ff91 	bl	8001d20 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4830      	ldr	r0, [pc, #192]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000e22:	f006 f8af 	bl	8006f84 <HAL_RTC_SetTime>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000e2c:	f000 ff78 	bl	8001d20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e30:	2301      	movs	r3, #1
 8000e32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000e36:	2301      	movs	r3, #1
 8000e38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4824      	ldr	r0, [pc, #144]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000e52:	f006 f955 	bl	8007100 <HAL_RTC_SetDate>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000e5c:	f000 ff60 	bl	8001d20 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	2201      	movs	r2, #1
 8000e94:	4619      	mov	r1, r3
 8000e96:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000e98:	f006 f9da 	bl	8007250 <HAL_RTC_SetAlarm>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000ea2:	f000 ff3d 	bl	8001d20 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8000eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000eba:	f006 f9c9 	bl	8007250 <HAL_RTC_SetAlarm>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8000ec4:	f000 ff2c 	bl	8001d20 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000ece:	f006 fb49 	bl	8007564 <HAL_RTCEx_SetTimeStamp>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8000ed8:	f000 ff22 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3748      	adds	r7, #72	; 0x48
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000bc0c 	.word	0x2000bc0c
 8000ee8:	40002800 	.word	0x40002800

08000eec <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000ef0:	4b4d      	ldr	r3, [pc, #308]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000ef2:	4a4e      	ldr	r2, [pc, #312]	; (800102c <MX_SAI2_Init+0x140>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000efc:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000f02:	4b49      	ldr	r3, [pc, #292]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f04:	2240      	movs	r2, #64	; 0x40
 8000f06:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f08:	4b47      	ldr	r3, [pc, #284]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f0e:	4b46      	ldr	r3, [pc, #280]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f14:	4b44      	ldr	r3, [pc, #272]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f1a:	4b43      	ldr	r3, [pc, #268]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f20:	4b41      	ldr	r3, [pc, #260]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f26:	4b40      	ldr	r3, [pc, #256]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f2e:	4a40      	ldr	r2, [pc, #256]	; (8001030 <MX_SAI2_Init+0x144>)
 8000f30:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f32:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000f4a:	4b37      	ldr	r3, [pc, #220]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000f50:	4b35      	ldr	r3, [pc, #212]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f56:	4b34      	ldr	r3, [pc, #208]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f5c:	4b32      	ldr	r3, [pc, #200]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000f80:	4829      	ldr	r0, [pc, #164]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f82:	f006 fb45 	bl	8007610 <HAL_SAI_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000f8c:	f000 fec8 	bl	8001d20 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f90:	4b28      	ldr	r3, [pc, #160]	; (8001034 <MX_SAI2_Init+0x148>)
 8000f92:	4a29      	ldr	r2, [pc, #164]	; (8001038 <MX_SAI2_Init+0x14c>)
 8000f94:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <MX_SAI2_Init+0x148>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <MX_SAI2_Init+0x148>)
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fa4:	2240      	movs	r2, #64	; 0x40
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <MX_SAI2_Init+0x148>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_SAI2_Init+0x148>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_SAI2_Init+0x148>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <MX_SAI2_Init+0x148>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_SAI2_Init+0x148>)
 8001004:	2200      	movs	r2, #0
 8001006:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <MX_SAI2_Init+0x148>)
 800100a:	2201      	movs	r2, #1
 800100c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_SAI2_Init+0x148>)
 8001010:	2200      	movs	r2, #0
 8001012:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_SAI2_Init+0x148>)
 8001016:	f006 fafb 	bl	8007610 <HAL_SAI_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001020:	f000 fe7e 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000b8a0 	.word	0x2000b8a0
 800102c:	40015c04 	.word	0x40015c04
 8001030:	0002ee00 	.word	0x0002ee00
 8001034:	2000b724 	.word	0x2000b724
 8001038:	40015c24 	.word	0x40015c24

0800103c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <MX_SDMMC1_SD_Init+0x3c>)
 8001044:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	2000b948 	.word	0x2000b948
 8001078:	40012c00 	.word	0x40012c00

0800107c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 8001082:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001086:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010c6:	f007 fd37 	bl	8008b38 <HAL_SPDIFRX_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80010d0:	f000 fe26 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000b854 	.word	0x2000b854

080010dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_SPI2_Init+0x74>)
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <MX_SPI2_Init+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_SPI2_Init+0x74>)
 80010e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_SPI2_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_SPI2_Init+0x74>)
 80010f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_SPI2_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_SPI2_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_SPI2_Init+0x74>)
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_SPI2_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_SPI2_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_SPI2_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_SPI2_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_SPI2_Init+0x74>)
 800112a:	2207      	movs	r2, #7
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_SPI2_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_SPI2_Init+0x74>)
 8001136:	2208      	movs	r2, #8
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_SPI2_Init+0x74>)
 800113c:	f007 fd58 	bl	8008bf0 <HAL_SPI_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001146:	f000 fdeb 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000b7b0 	.word	0x2000b7b0
 8001154:	40003800 	.word	0x40003800

08001158 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b09a      	sub	sp, #104	; 0x68
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001178:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	222c      	movs	r2, #44	; 0x2c
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f021 fc0d 	bl	80229b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <MX_TIM1_Init+0x150>)
 800119a:	4a44      	ldr	r2, [pc, #272]	; (80012ac <MX_TIM1_Init+0x154>)
 800119c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800119e:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80011aa:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b0:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b6:	4b3c      	ldr	r3, [pc, #240]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011c2:	4839      	ldr	r0, [pc, #228]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011c4:	f007 fda6 	bl	8008d14 <HAL_TIM_Base_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011ce:	f000 fda7 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011dc:	4619      	mov	r1, r3
 80011de:	4832      	ldr	r0, [pc, #200]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011e0:	f008 f850 	bl	8009284 <HAL_TIM_ConfigClockSource>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011ea:	f000 fd99 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ee:	482e      	ldr	r0, [pc, #184]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011f0:	f007 fde6 	bl	8008dc0 <HAL_TIM_PWM_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011fa:	f000 fd91 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800120a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800120e:	4619      	mov	r1, r3
 8001210:	4825      	ldr	r0, [pc, #148]	; (80012a8 <MX_TIM1_Init+0x150>)
 8001212:	f008 fcb1 	bl	8009b78 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800121c:	f000 fd80 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001220:	2360      	movs	r3, #96	; 0x60
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001240:	2200      	movs	r2, #0
 8001242:	4619      	mov	r1, r3
 8001244:	4818      	ldr	r0, [pc, #96]	; (80012a8 <MX_TIM1_Init+0x150>)
 8001246:	f007 ff05 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001250:	f000 fd66 	bl	8001d20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <MX_TIM1_Init+0x150>)
 800128a:	f008 fd03 	bl	8009c94 <HAL_TIMEx_ConfigBreakDeadTime>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001294:	f000 fd44 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <MX_TIM1_Init+0x150>)
 800129a:	f001 fa3b 	bl	8002714 <HAL_TIM_MspPostInit>

}
 800129e:	bf00      	nop
 80012a0:	3768      	adds	r7, #104	; 0x68
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000bc2c 	.word	0x2000bc2c
 80012ac:	40010000 	.word	0x40010000

080012b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	; 0x38
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d0:	463b      	mov	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
 80012de:	615a      	str	r2, [r3, #20]
 80012e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <MX_TIM2_Init+0xe8>)
 80012e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <MX_TIM2_Init+0xe8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b29      	ldr	r3, [pc, #164]	; (8001398 <MX_TIM2_Init+0xe8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80012f6:	4b28      	ldr	r3, [pc, #160]	; (8001398 <MX_TIM2_Init+0xe8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <MX_TIM2_Init+0xe8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <MX_TIM2_Init+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001308:	4823      	ldr	r0, [pc, #140]	; (8001398 <MX_TIM2_Init+0xe8>)
 800130a:	f007 fd03 	bl	8008d14 <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001314:	f000 fd04 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001322:	4619      	mov	r1, r3
 8001324:	481c      	ldr	r0, [pc, #112]	; (8001398 <MX_TIM2_Init+0xe8>)
 8001326:	f007 ffad 	bl	8009284 <HAL_TIM_ConfigClockSource>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001330:	f000 fcf6 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001334:	4818      	ldr	r0, [pc, #96]	; (8001398 <MX_TIM2_Init+0xe8>)
 8001336:	f007 fd43 	bl	8008dc0 <HAL_TIM_PWM_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001340:	f000 fcee 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_TIM2_Init+0xe8>)
 8001354:	f008 fc10 	bl	8009b78 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800135e:	f000 fcdf 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001362:	2360      	movs	r3, #96	; 0x60
 8001364:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	4807      	ldr	r0, [pc, #28]	; (8001398 <MX_TIM2_Init+0xe8>)
 800137a:	f007 fe6b 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001384:	f000 fccc 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <MX_TIM2_Init+0xe8>)
 800138a:	f001 f9c3 	bl	8002714 <HAL_TIM_MspPostInit>

}
 800138e:	bf00      	nop
 8001390:	3738      	adds	r7, #56	; 0x38
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000bd34 	.word	0x2000bd34

0800139c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	; 0x38
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013d0:	4a2c      	ldr	r2, [pc, #176]	; (8001484 <MX_TIM3_Init+0xe8>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013f2:	4823      	ldr	r0, [pc, #140]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013f4:	f007 fc8e 	bl	8008d14 <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013fe:	f000 fc8f 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140c:	4619      	mov	r1, r3
 800140e:	481c      	ldr	r0, [pc, #112]	; (8001480 <MX_TIM3_Init+0xe4>)
 8001410:	f007 ff38 	bl	8009284 <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800141a:	f000 fc81 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800141e:	4818      	ldr	r0, [pc, #96]	; (8001480 <MX_TIM3_Init+0xe4>)
 8001420:	f007 fcce 	bl	8008dc0 <HAL_TIM_PWM_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800142a:	f000 fc79 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	4810      	ldr	r0, [pc, #64]	; (8001480 <MX_TIM3_Init+0xe4>)
 800143e:	f008 fb9b 	bl	8009b78 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001448:	f000 fc6a 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144c:	2360      	movs	r3, #96	; 0x60
 800144e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <MX_TIM3_Init+0xe4>)
 8001464:	f007 fdf6 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800146e:	f000 fc57 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <MX_TIM3_Init+0xe4>)
 8001474:	f001 f94e 	bl	8002714 <HAL_TIM_MspPostInit>

}
 8001478:	bf00      	nop
 800147a:	3738      	adds	r7, #56	; 0x38
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000ba0c 	.word	0x2000ba0c
 8001484:	40000400 	.word	0x40000400

08001488 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <MX_TIM5_Init+0xe4>)
 80014bc:	4a2c      	ldr	r2, [pc, #176]	; (8001570 <MX_TIM5_Init+0xe8>)
 80014be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <MX_TIM5_Init+0xe4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b29      	ldr	r3, [pc, #164]	; (800156c <MX_TIM5_Init+0xe4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <MX_TIM5_Init+0xe4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <MX_TIM5_Init+0xe4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <MX_TIM5_Init+0xe4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014de:	4823      	ldr	r0, [pc, #140]	; (800156c <MX_TIM5_Init+0xe4>)
 80014e0:	f007 fc18 	bl	8008d14 <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80014ea:	f000 fc19 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f8:	4619      	mov	r1, r3
 80014fa:	481c      	ldr	r0, [pc, #112]	; (800156c <MX_TIM5_Init+0xe4>)
 80014fc:	f007 fec2 	bl	8009284 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001506:	f000 fc0b 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800150a:	4818      	ldr	r0, [pc, #96]	; (800156c <MX_TIM5_Init+0xe4>)
 800150c:	f007 fc58 	bl	8008dc0 <HAL_TIM_PWM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001516:	f000 fc03 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4810      	ldr	r0, [pc, #64]	; (800156c <MX_TIM5_Init+0xe4>)
 800152a:	f008 fb25 	bl	8009b78 <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001534:	f000 fbf4 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001538:	2360      	movs	r3, #96	; 0x60
 800153a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	220c      	movs	r2, #12
 800154c:	4619      	mov	r1, r3
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <MX_TIM5_Init+0xe4>)
 8001550:	f007 fd80 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800155a:	f000 fbe1 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800155e:	4803      	ldr	r0, [pc, #12]	; (800156c <MX_TIM5_Init+0xe4>)
 8001560:	f001 f8d8 	bl	8002714 <HAL_TIM_MspPostInit>

}
 8001564:	bf00      	nop
 8001566:	3738      	adds	r7, #56	; 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000b9cc 	.word	0x2000b9cc
 8001570:	40000c00 	.word	0x40000c00

08001574 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_TIM8_Init+0x9c>)
 8001594:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <MX_TIM8_Init+0xa0>)
 8001596:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <MX_TIM8_Init+0x9c>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015bc:	4814      	ldr	r0, [pc, #80]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015be:	f007 fba9 	bl	8008d14 <HAL_TIM_Base_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80015c8:	f000 fbaa 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015da:	f007 fe53 	bl	8009284 <HAL_TIM_ConfigClockSource>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80015e4:	f000 fb9c 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015fa:	f008 fabd 	bl	8009b78 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001604:	f000 fb8c 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000b814 	.word	0x2000b814
 8001614:	40010400 	.word	0x40010400

08001618 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_TIM12_Init+0x80>)
 8001632:	4a1a      	ldr	r2, [pc, #104]	; (800169c <MX_TIM12_Init+0x84>)
 8001634:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_TIM12_Init+0x80>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_TIM12_Init+0x80>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_TIM12_Init+0x80>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_TIM12_Init+0x80>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_TIM12_Init+0x80>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001654:	4810      	ldr	r0, [pc, #64]	; (8001698 <MX_TIM12_Init+0x80>)
 8001656:	f007 fbb3 	bl	8008dc0 <HAL_TIM_PWM_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001660:	f000 fb5e 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001664:	2360      	movs	r3, #96	; 0x60
 8001666:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM12_Init+0x80>)
 800167c:	f007 fcea 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001686:	f000 fb4b 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM12_Init+0x80>)
 800168c:	f001 f842 	bl	8002714 <HAL_TIM_MspPostInit>

}
 8001690:	bf00      	nop
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000bd9c 	.word	0x2000bd9c
 800169c:	40001800 	.word	0x40001800

080016a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016a6:	4a15      	ldr	r2, [pc, #84]	; (80016fc <MX_USART1_UART_Init+0x5c>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016e4:	f008 fb72 	bl	8009dcc <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ee:	f000 fb17 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000bb8c 	.word	0x2000bb8c
 80016fc:	40011000 	.word	0x40011000

08001700 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <MX_USART6_UART_Init+0x5c>)
 8001708:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_USART6_UART_Init+0x58>)
 800170c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001710:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_USART6_UART_Init+0x58>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART6_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART6_UART_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001744:	f008 fb42 	bl	8009dcc <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800174e:	f000 fae7 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000bc6c 	.word	0x2000bc6c
 800175c:	40011400 	.word	0x40011400

08001760 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	615a      	str	r2, [r3, #20]
 8001776:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001778:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <MX_FMC_Init+0x14c>)
 800177a:	4a4d      	ldr	r2, [pc, #308]	; (80018b0 <MX_FMC_Init+0x150>)
 800177c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800177e:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <MX_FMC_Init+0x14c>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <MX_FMC_Init+0x14c>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800178a:	4b48      	ldr	r3, [pc, #288]	; (80018ac <MX_FMC_Init+0x14c>)
 800178c:	2204      	movs	r2, #4
 800178e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001790:	4b46      	ldr	r3, [pc, #280]	; (80018ac <MX_FMC_Init+0x14c>)
 8001792:	2210      	movs	r2, #16
 8001794:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001796:	4b45      	ldr	r3, [pc, #276]	; (80018ac <MX_FMC_Init+0x14c>)
 8001798:	2240      	movs	r2, #64	; 0x40
 800179a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800179c:	4b43      	ldr	r3, [pc, #268]	; (80018ac <MX_FMC_Init+0x14c>)
 800179e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80017a2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <MX_FMC_Init+0x14c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80017aa:	4b40      	ldr	r3, [pc, #256]	; (80018ac <MX_FMC_Init+0x14c>)
 80017ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <MX_FMC_Init+0x14c>)
 80017b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80017ba:	4b3c      	ldr	r3, [pc, #240]	; (80018ac <MX_FMC_Init+0x14c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80017c4:	2307      	movs	r3, #7
 80017c6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80017c8:	2304      	movs	r3, #4
 80017ca:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80017cc:	2307      	movs	r3, #7
 80017ce:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80017d0:	2303      	movs	r3, #3
 80017d2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80017d8:	2302      	movs	r3, #2
 80017da:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	4619      	mov	r1, r3
 80017e0:	4832      	ldr	r0, [pc, #200]	; (80018ac <MX_FMC_Init+0x14c>)
 80017e2:	f007 f929 	bl	8008a38 <HAL_SDRAM_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80017ec:	f000 fa98 	bl	8001d20 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80017f4:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <MX_FMC_Init+0x154>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80017fa:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <MX_FMC_Init+0x154>)
 80017fc:	2210      	movs	r2, #16
 80017fe:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8001800:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <MX_FMC_Init+0x154>)
 8001802:	2201      	movs	r2, #1
 8001804:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <MX_FMC_Init+0x154>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800180c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001810:	4928      	ldr	r1, [pc, #160]	; (80018b4 <MX_FMC_Init+0x154>)
 8001812:	4826      	ldr	r0, [pc, #152]	; (80018ac <MX_FMC_Init+0x14c>)
 8001814:	f007 f944 	bl	8008aa0 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8001818:	2001      	movs	r0, #1
 800181a:	f001 fba3 	bl	8002f64 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <MX_FMC_Init+0x154>)
 8001820:	2202      	movs	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <MX_FMC_Init+0x154>)
 8001826:	2210      	movs	r2, #16
 8001828:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800182a:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <MX_FMC_Init+0x154>)
 800182c:	2201      	movs	r2, #1
 800182e:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <MX_FMC_Init+0x154>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183a:	491e      	ldr	r1, [pc, #120]	; (80018b4 <MX_FMC_Init+0x154>)
 800183c:	481b      	ldr	r0, [pc, #108]	; (80018ac <MX_FMC_Init+0x14c>)
 800183e:	f007 f92f 	bl	8008aa0 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <MX_FMC_Init+0x154>)
 8001844:	2203      	movs	r2, #3
 8001846:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001848:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <MX_FMC_Init+0x154>)
 800184a:	2210      	movs	r2, #16
 800184c:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_FMC_Init+0x154>)
 8001850:	2208      	movs	r2, #8
 8001852:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <MX_FMC_Init+0x154>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800185a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800185e:	4915      	ldr	r1, [pc, #84]	; (80018b4 <MX_FMC_Init+0x154>)
 8001860:	4812      	ldr	r0, [pc, #72]	; (80018ac <MX_FMC_Init+0x14c>)
 8001862:	f007 f91d 	bl	8008aa0 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001866:	f44f 730c 	mov.w	r3, #560	; 0x230
 800186a:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_FMC_Init+0x154>)
 800186e:	2204      	movs	r2, #4
 8001870:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_FMC_Init+0x154>)
 8001874:	2210      	movs	r2, #16
 8001876:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_FMC_Init+0x154>)
 800187a:	2201      	movs	r2, #1
 800187c:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <MX_FMC_Init+0x154>)
 8001882:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001888:	490a      	ldr	r1, [pc, #40]	; (80018b4 <MX_FMC_Init+0x154>)
 800188a:	4808      	ldr	r0, [pc, #32]	; (80018ac <MX_FMC_Init+0x14c>)
 800188c:	f007 f908 	bl	8008aa0 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001890:	f240 712b 	movw	r1, #1835	; 0x72b
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_FMC_Init+0x14c>)
 8001896:	f007 f92e 	bl	8008af6 <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800189a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800189e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018a2:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000bddc 	.word	0x2000bddc
 80018b0:	a0000140 	.word	0xa0000140
 80018b4:	20000370 	.word	0x20000370

080018b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b090      	sub	sp, #64	; 0x40
 80018bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ce:	4baf      	ldr	r3, [pc, #700]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4aae      	ldr	r2, [pc, #696]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4bac      	ldr	r3, [pc, #688]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e6:	4ba9      	ldr	r3, [pc, #676]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4aa8      	ldr	r2, [pc, #672]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80018ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4ba6      	ldr	r3, [pc, #664]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	4ba3      	ldr	r3, [pc, #652]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4aa2      	ldr	r2, [pc, #648]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4ba0      	ldr	r3, [pc, #640]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	623b      	str	r3, [r7, #32]
 8001914:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001916:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a9c      	ldr	r2, [pc, #624]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b9a      	ldr	r3, [pc, #616]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	4b97      	ldr	r3, [pc, #604]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a96      	ldr	r2, [pc, #600]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b94      	ldr	r3, [pc, #592]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b91      	ldr	r3, [pc, #580]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a90      	ldr	r2, [pc, #576]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b8e      	ldr	r3, [pc, #568]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800195e:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a8a      	ldr	r2, [pc, #552]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001964:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001976:	4b85      	ldr	r3, [pc, #532]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a84      	ldr	r2, [pc, #528]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800197c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b82      	ldr	r3, [pc, #520]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800198e:	4b7f      	ldr	r3, [pc, #508]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a7e      	ldr	r2, [pc, #504]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b7c      	ldr	r3, [pc, #496]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019a6:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a78      	ldr	r2, [pc, #480]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80019ac:	f043 0320 	orr.w	r3, r3, #32
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019be:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a72      	ldr	r2, [pc, #456]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b70      	ldr	r3, [pc, #448]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80019d6:	2201      	movs	r2, #1
 80019d8:	2120      	movs	r1, #32
 80019da:	486d      	ldr	r0, [pc, #436]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 80019dc:	f003 fbb8 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	210c      	movs	r1, #12
 80019e4:	486b      	ldr	r0, [pc, #428]	; (8001b94 <MX_GPIO_Init+0x2dc>)
 80019e6:	f003 fbb3 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80019ea:	2201      	movs	r2, #1
 80019ec:	2108      	movs	r1, #8
 80019ee:	486a      	ldr	r0, [pc, #424]	; (8001b98 <MX_GPIO_Init+0x2e0>)
 80019f0:	f003 fbae 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019fa:	4866      	ldr	r0, [pc, #408]	; (8001b94 <MX_GPIO_Init+0x2dc>)
 80019fc:	f003 fba8 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a06:	4865      	ldr	r0, [pc, #404]	; (8001b9c <MX_GPIO_Init+0x2e4>)
 8001a08:	f003 fba2 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	21c8      	movs	r1, #200	; 0xc8
 8001a10:	4863      	ldr	r0, [pc, #396]	; (8001ba0 <MX_GPIO_Init+0x2e8>)
 8001a12:	f003 fb9d 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001a16:	2308      	movs	r3, #8
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a26:	4619      	mov	r1, r3
 8001a28:	485e      	ldr	r0, [pc, #376]	; (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001a2a:	f003 f9cf 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001a2e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a40:	230b      	movs	r3, #11
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4855      	ldr	r0, [pc, #340]	; (8001ba0 <MX_GPIO_Init+0x2e8>)
 8001a4c:	f003 f9be 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8001a50:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a62:	230a      	movs	r3, #10
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	484e      	ldr	r0, [pc, #312]	; (8001ba8 <MX_GPIO_Init+0x2f0>)
 8001a6e:	f003 f9ad 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a84:	4619      	mov	r1, r3
 8001a86:	4849      	ldr	r0, [pc, #292]	; (8001bac <MX_GPIO_Init+0x2f4>)
 8001a88:	f003 f9a0 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a8c:	2340      	movs	r3, #64	; 0x40
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a90:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <MX_GPIO_Init+0x2f8>)
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	483c      	ldr	r0, [pc, #240]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 8001aa0:	f003 f994 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001aa4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	483c      	ldr	r0, [pc, #240]	; (8001bb4 <MX_GPIO_Init+0x2fc>)
 8001ac2:	f003 f983 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ada:	4619      	mov	r1, r3
 8001adc:	482c      	ldr	r0, [pc, #176]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 8001ade:	f003 f975 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001ae2:	f241 030c 	movw	r3, #4108	; 0x100c
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af8:	4619      	mov	r1, r3
 8001afa:	4826      	ldr	r0, [pc, #152]	; (8001b94 <MX_GPIO_Init+0x2dc>)
 8001afc:	f003 f966 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b06:	2300      	movs	r3, #0
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b12:	4619      	mov	r1, r3
 8001b14:	4828      	ldr	r0, [pc, #160]	; (8001bb8 <MX_GPIO_Init+0x300>)
 8001b16:	f003 f959 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4819      	ldr	r0, [pc, #100]	; (8001b98 <MX_GPIO_Init+0x2e0>)
 8001b32:	f003 f94b 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b36:	2310      	movs	r3, #16
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b46:	4619      	mov	r1, r3
 8001b48:	4811      	ldr	r0, [pc, #68]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 8001b4a:	f003 f93f 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001b4e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b60:	4619      	mov	r1, r3
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <MX_GPIO_Init+0x2e4>)
 8001b64:	f003 f932 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4806      	ldr	r0, [pc, #24]	; (8001b9c <MX_GPIO_Init+0x2e4>)
 8001b82:	f003 f923 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8a:	e017      	b.n	8001bbc <MX_GPIO_Init+0x304>
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40022800 	.word	0x40022800
 8001b9c:	40021c00 	.word	0x40021c00
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	40022400 	.word	0x40022400
 8001bb0:	10120000 	.word	0x10120000
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bbe:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <MX_GPIO_Init+0x418>)
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4841      	ldr	r0, [pc, #260]	; (8001cd4 <MX_GPIO_Init+0x41c>)
 8001bce:	f003 f8fd 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001be2:	230a      	movs	r3, #10
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bea:	4619      	mov	r1, r3
 8001bec:	483a      	ldr	r0, [pc, #232]	; (8001cd8 <MX_GPIO_Init+0x420>)
 8001bee:	f003 f8ed 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001bf2:	23c8      	movs	r3, #200	; 0xc8
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c06:	4619      	mov	r1, r3
 8001c08:	4834      	ldr	r0, [pc, #208]	; (8001cdc <MX_GPIO_Init+0x424>)
 8001c0a:	f003 f8df 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c0e:	2305      	movs	r3, #5
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c1e:	230a      	movs	r3, #10
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	482d      	ldr	r0, [pc, #180]	; (8001ce0 <MX_GPIO_Init+0x428>)
 8001c2a:	f003 f8cf 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c2e:	2332      	movs	r3, #50	; 0x32
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c3e:	230b      	movs	r3, #11
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c46:	4619      	mov	r1, r3
 8001c48:	4825      	ldr	r0, [pc, #148]	; (8001ce0 <MX_GPIO_Init+0x428>)
 8001c4a:	f003 f8bf 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	481e      	ldr	r0, [pc, #120]	; (8001cdc <MX_GPIO_Init+0x424>)
 8001c62:	f003 f8b3 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c66:	2386      	movs	r3, #134	; 0x86
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c76:	230b      	movs	r3, #11
 8001c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4818      	ldr	r0, [pc, #96]	; (8001ce4 <MX_GPIO_Init+0x42c>)
 8001c82:	f003 f8a3 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001c86:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8c:	2312      	movs	r3, #18
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <MX_GPIO_Init+0x420>)
 8001ca4:	f003 f892 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001ca8:	2328      	movs	r3, #40	; 0x28
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cb8:	230a      	movs	r3, #10
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <MX_GPIO_Init+0x42c>)
 8001cc4:	f003 f882 	bl	8004dcc <HAL_GPIO_Init>

}
 8001cc8:	bf00      	nop
 8001cca:	3740      	adds	r7, #64	; 0x40
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	10120000 	.word	0x10120000
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40021c00 	.word	0x40021c00
 8001cdc:	40021800 	.word	0x40021800
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001cf0:	f00c fba6 	bl	800e440 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f009 fe6d 	bl	800b9d4 <osDelay>
 8001cfa:	e7fb      	b.n	8001cf4 <StartDefaultTask+0xc>

08001cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d0e:	f001 f909 	bl	8002f24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40001000 	.word	0x40001000

08001d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	210f      	movs	r1, #15
 8001d6a:	f06f 0001 	mvn.w	r0, #1
 8001d6e:	f002 f9ff 	bl	8004170 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <HAL_ADC_MspInit+0xa4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d13c      	bne.n	8001e1c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001da8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dba:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a1a      	ldr	r2, [pc, #104]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001dc0:	f043 0320 	orr.w	r3, r3, #32
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8001dea:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001dee:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df0:	2303      	movs	r3, #3
 8001df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480b      	ldr	r0, [pc, #44]	; (8001e2c <HAL_ADC_MspInit+0xac>)
 8001e00:	f002 ffe4 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001e04:	2301      	movs	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <HAL_ADC_MspInit+0xb0>)
 8001e18:	f002 ffd8 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40012200 	.word	0x40012200
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40021400 	.word	0x40021400
 8001e30:	40020000 	.word	0x40020000

08001e34 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_CAN_MspInit+0x8c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d130      	bne.n	8001eb8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_CAN_MspInit+0x90>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_CAN_MspInit+0x90>)
 8001e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_CAN_MspInit+0x90>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_CAN_MspInit+0x90>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_CAN_MspInit+0x90>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_CAN_MspInit+0x90>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e98:	2309      	movs	r3, #9
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <HAL_CAN_MspInit+0x94>)
 8001ea4:	f002 ff92 	bl	8004dcc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2105      	movs	r1, #5
 8001eac:	2014      	movs	r0, #20
 8001eae:	f002 f95f 	bl	8004170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001eb2:	2014      	movs	r0, #20
 8001eb4:	f002 f978 	bl	80041a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	; 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40006400 	.word	0x40006400
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020400 	.word	0x40020400

08001ecc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <HAL_CRC_MspInit+0x38>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10b      	bne.n	8001ef6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_CRC_MspInit+0x3c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_CRC_MspInit+0x3c>)
 8001ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <HAL_CRC_MspInit+0x3c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023000 	.word	0x40023000
 8001f08:	40023800 	.word	0x40023800

08001f0c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08e      	sub	sp, #56	; 0x38
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a50      	ldr	r2, [pc, #320]	; (800206c <HAL_DCMI_MspInit+0x160>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	f040 809a 	bne.w	8002064 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001f30:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f34:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6353      	str	r3, [r2, #52]	; 0x34
 8001f3c:	4b4c      	ldr	r3, [pc, #304]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	623b      	str	r3, [r7, #32]
 8001f46:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f48:	4b49      	ldr	r3, [pc, #292]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	4a48      	ldr	r2, [pc, #288]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f4e:	f043 0310 	orr.w	r3, r3, #16
 8001f52:	6313      	str	r3, [r2, #48]	; 0x30
 8001f54:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f60:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4a42      	ldr	r2, [pc, #264]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6c:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f78:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	4a3c      	ldr	r2, [pc, #240]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f82:	6313      	str	r3, [r2, #48]	; 0x30
 8001f84:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f90:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	4a36      	ldr	r2, [pc, #216]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9c:	4b34      	ldr	r3, [pc, #208]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	4a30      	ldr	r2, [pc, #192]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb4:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001fc0:	2360      	movs	r3, #96	; 0x60
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001fd0:	230d      	movs	r3, #13
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4826      	ldr	r0, [pc, #152]	; (8002074 <HAL_DCMI_MspInit+0x168>)
 8001fdc:	f002 fef6 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ff0:	230d      	movs	r3, #13
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	481f      	ldr	r0, [pc, #124]	; (8002078 <HAL_DCMI_MspInit+0x16c>)
 8001ffc:	f002 fee6 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002012:	230d      	movs	r3, #13
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201a:	4619      	mov	r1, r3
 800201c:	4817      	ldr	r0, [pc, #92]	; (800207c <HAL_DCMI_MspInit+0x170>)
 800201e:	f002 fed5 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002022:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002034:	230d      	movs	r3, #13
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203c:	4619      	mov	r1, r3
 800203e:	4810      	ldr	r0, [pc, #64]	; (8002080 <HAL_DCMI_MspInit+0x174>)
 8002040:	f002 fec4 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002044:	2350      	movs	r3, #80	; 0x50
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002054:	230d      	movs	r3, #13
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205c:	4619      	mov	r1, r3
 800205e:	4809      	ldr	r0, [pc, #36]	; (8002084 <HAL_DCMI_MspInit+0x178>)
 8002060:	f002 feb4 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3738      	adds	r7, #56	; 0x38
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	50050000 	.word	0x50050000
 8002070:	40023800 	.word	0x40023800
 8002074:	40021000 	.word	0x40021000
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40021800 	.word	0x40021800
 8002080:	40021c00 	.word	0x40021c00
 8002084:	40020000 	.word	0x40020000

08002088 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <HAL_DMA2D_MspInit+0x44>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d113      	bne.n	80020c2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_DMA2D_MspInit+0x48>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_DMA2D_MspInit+0x48>)
 80020a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_DMA2D_MspInit+0x48>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2105      	movs	r1, #5
 80020b6:	205a      	movs	r0, #90	; 0x5a
 80020b8:	f002 f85a 	bl	8004170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80020bc:	205a      	movs	r0, #90	; 0x5a
 80020be:	f002 f873 	bl	80041a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	4002b000 	.word	0x4002b000
 80020d0:	40023800 	.word	0x40023800

080020d4 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_DMA2D_MspDeInit+0x2c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d108      	bne.n	80020f8 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_DMA2D_MspDeInit+0x30>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_DMA2D_MspDeInit+0x30>)
 80020ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80020f2:	205a      	movs	r0, #90	; 0x5a
 80020f4:	f002 f866 	bl	80041c4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	4002b000 	.word	0x4002b000
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08e      	sub	sp, #56	; 0x38
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a55      	ldr	r2, [pc, #340]	; (800227c <HAL_LTDC_MspInit+0x174>)
 8002126:	4293      	cmp	r3, r2
 8002128:	f040 80a3 	bne.w	8002272 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800212c:	4b54      	ldr	r3, [pc, #336]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	4a53      	ldr	r2, [pc, #332]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002136:	6453      	str	r3, [r2, #68]	; 0x44
 8002138:	4b51      	ldr	r3, [pc, #324]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002140:	623b      	str	r3, [r7, #32]
 8002142:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002144:	4b4e      	ldr	r3, [pc, #312]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4a4d      	ldr	r2, [pc, #308]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800214a:	f043 0310 	orr.w	r3, r3, #16
 800214e:	6313      	str	r3, [r2, #48]	; 0x30
 8002150:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800215c:	4b48      	ldr	r3, [pc, #288]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a47      	ldr	r2, [pc, #284]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b45      	ldr	r3, [pc, #276]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002174:	4b42      	ldr	r3, [pc, #264]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	4a41      	ldr	r2, [pc, #260]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800217a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217e:	6313      	str	r3, [r2, #48]	; 0x30
 8002180:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800218c:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	4a3b      	ldr	r2, [pc, #236]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002196:	6313      	str	r3, [r2, #48]	; 0x30
 8002198:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	4a35      	ldr	r2, [pc, #212]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6313      	str	r3, [r2, #48]	; 0x30
 80021b0:	4b33      	ldr	r3, [pc, #204]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80021bc:	2310      	movs	r3, #16
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021cc:	230e      	movs	r3, #14
 80021ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d4:	4619      	mov	r1, r3
 80021d6:	482b      	ldr	r0, [pc, #172]	; (8002284 <HAL_LTDC_MspInit+0x17c>)
 80021d8:	f002 fdf8 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80021dc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021ee:	230e      	movs	r3, #14
 80021f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f6:	4619      	mov	r1, r3
 80021f8:	4823      	ldr	r0, [pc, #140]	; (8002288 <HAL_LTDC_MspInit+0x180>)
 80021fa:	f002 fde7 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80021fe:	23f7      	movs	r3, #247	; 0xf7
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800220e:	230e      	movs	r3, #14
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002216:	4619      	mov	r1, r3
 8002218:	481c      	ldr	r0, [pc, #112]	; (800228c <HAL_LTDC_MspInit+0x184>)
 800221a:	f002 fdd7 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800221e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002230:	2309      	movs	r3, #9
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002238:	4619      	mov	r1, r3
 800223a:	4815      	ldr	r0, [pc, #84]	; (8002290 <HAL_LTDC_MspInit+0x188>)
 800223c:	f002 fdc6 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002240:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002252:	230e      	movs	r3, #14
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225a:	4619      	mov	r1, r3
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <HAL_LTDC_MspInit+0x18c>)
 800225e:	f002 fdb5 	bl	8004dcc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2105      	movs	r1, #5
 8002266:	2058      	movs	r0, #88	; 0x58
 8002268:	f001 ff82 	bl	8004170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800226c:	2058      	movs	r0, #88	; 0x58
 800226e:	f001 ff9b 	bl	80041a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002272:	bf00      	nop
 8002274:	3738      	adds	r7, #56	; 0x38
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40016800 	.word	0x40016800
 8002280:	40023800 	.word	0x40023800
 8002284:	40021000 	.word	0x40021000
 8002288:	40022400 	.word	0x40022400
 800228c:	40022800 	.word	0x40022800
 8002290:	40021800 	.word	0x40021800
 8002294:	40022000 	.word	0x40022000

08002298 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <HAL_QSPI_MspInit+0x10c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d170      	bne.n	800239c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80022ba:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6393      	str	r3, [r2, #56]	; 0x38
 80022c6:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d2:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a34      	ldr	r2, [pc, #208]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022d8:	f043 0310 	orr.w	r3, r3, #16
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a2e      	ldr	r2, [pc, #184]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a28      	ldr	r2, [pc, #160]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800231a:	2304      	movs	r3, #4
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002326:	2303      	movs	r3, #3
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800232a:	2309      	movs	r3, #9
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	481d      	ldr	r0, [pc, #116]	; (80023ac <HAL_QSPI_MspInit+0x114>)
 8002336:	f002 fd49 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800233a:	2340      	movs	r3, #64	; 0x40
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800234a:	230a      	movs	r3, #10
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	4619      	mov	r1, r3
 8002354:	4816      	ldr	r0, [pc, #88]	; (80023b0 <HAL_QSPI_MspInit+0x118>)
 8002356:	f002 fd39 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800235a:	2304      	movs	r3, #4
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800236a:	2309      	movs	r3, #9
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	4619      	mov	r1, r3
 8002374:	480e      	ldr	r0, [pc, #56]	; (80023b0 <HAL_QSPI_MspInit+0x118>)
 8002376:	f002 fd29 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800237a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800238c:	2309      	movs	r3, #9
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	4619      	mov	r1, r3
 8002396:	4807      	ldr	r0, [pc, #28]	; (80023b4 <HAL_QSPI_MspInit+0x11c>)
 8002398:	f002 fd18 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800239c:	bf00      	nop
 800239e:	3730      	adds	r7, #48	; 0x30
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	a0001000 	.word	0xa0001000
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40020400 	.word	0x40020400
 80023b4:	40020c00 	.word	0x40020c00

080023b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_RTC_MspInit+0x2c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d105      	bne.n	80023d6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_RTC_MspInit+0x30>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <HAL_RTC_MspInit+0x30>)
 80023d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40002800 	.word	0x40002800
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a25      	ldr	r2, [pc, #148]	; (80024a0 <HAL_SD_MspInit+0xb4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d144      	bne.n	8002498 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800240e:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	4a24      	ldr	r2, [pc, #144]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 8002414:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002418:	6453      	str	r3, [r2, #68]	; 0x44
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a1e      	ldr	r2, [pc, #120]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 8002444:	f043 0308 	orr.w	r3, r3, #8
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002456:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800245a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002468:	230c      	movs	r3, #12
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	480d      	ldr	r0, [pc, #52]	; (80024a8 <HAL_SD_MspInit+0xbc>)
 8002474:	f002 fcaa 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002478:	2304      	movs	r3, #4
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002488:	230c      	movs	r3, #12
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	4806      	ldr	r0, [pc, #24]	; (80024ac <HAL_SD_MspInit+0xc0>)
 8002494:	f002 fc9a 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002498:	bf00      	nop
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020800 	.word	0x40020800
 80024ac:	40020c00 	.word	0x40020c00

080024b0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80024d0:	d127      	bne.n	8002522 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_SPDIFRX_MspInit+0x7c>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a15      	ldr	r2, [pc, #84]	; (800252c <HAL_SPDIFRX_MspInit+0x7c>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <HAL_SPDIFRX_MspInit+0x7c>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_SPDIFRX_MspInit+0x7c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_SPDIFRX_MspInit+0x7c>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_SPDIFRX_MspInit+0x7c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002512:	2308      	movs	r3, #8
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	4804      	ldr	r0, [pc, #16]	; (8002530 <HAL_SPDIFRX_MspInit+0x80>)
 800251e:	f002 fc55 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	40020c00 	.word	0x40020c00

08002534 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <HAL_SPI_MspInit+0xb4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d144      	bne.n	80025e0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002556:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a24      	ldr	r2, [pc, #144]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 800255c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a1e      	ldr	r2, [pc, #120]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a18      	ldr	r2, [pc, #96]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800259e:	2302      	movs	r3, #2
 80025a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025ae:	2305      	movs	r3, #5
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	480d      	ldr	r0, [pc, #52]	; (80025f0 <HAL_SPI_MspInit+0xbc>)
 80025ba:	f002 fc07 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80025be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025d0:	2305      	movs	r3, #5
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4619      	mov	r1, r3
 80025da:	4806      	ldr	r0, [pc, #24]	; (80025f4 <HAL_SPI_MspInit+0xc0>)
 80025dc:	f002 fbf6 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025e0:	bf00      	nop
 80025e2:	3728      	adds	r7, #40	; 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40003800 	.word	0x40003800
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40020400 	.word	0x40020400

080025f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <HAL_TIM_Base_MspInit+0xc8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10c      	bne.n	8002624 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800260a:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	4a2d      	ldr	r2, [pc, #180]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6453      	str	r3, [r2, #68]	; 0x44
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002622:	e046      	b.n	80026b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262c:	d10c      	bne.n	8002648 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800262e:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a24      	ldr	r2, [pc, #144]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	69bb      	ldr	r3, [r7, #24]
}
 8002646:	e034      	b.n	80026b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_TIM_Base_MspInit+0xd0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10c      	bne.n	800266c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
}
 800266a:	e022      	b.n	80026b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a16      	ldr	r2, [pc, #88]	; (80026cc <HAL_TIM_Base_MspInit+0xd4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d10c      	bne.n	8002690 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]
}
 800268e:	e010      	b.n	80026b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <HAL_TIM_Base_MspInit+0xd8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10b      	bne.n	80026b2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	6453      	str	r3, [r2, #68]	; 0x44
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	bf00      	nop
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000c00 	.word	0x40000c00
 80026d0:	40010400 	.word	0x40010400

080026d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_TIM_PWM_MspInit+0x38>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10b      	bne.n	80026fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_TIM_PWM_MspInit+0x3c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_TIM_PWM_MspInit+0x3c>)
 80026ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_TIM_PWM_MspInit+0x3c>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40001800 	.word	0x40001800
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 031c 	add.w	r3, r7, #28
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a56      	ldr	r2, [pc, #344]	; (800288c <HAL_TIM_MspPostInit+0x178>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d11d      	bne.n	8002772 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	4b56      	ldr	r3, [pc, #344]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a55      	ldr	r2, [pc, #340]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b53      	ldr	r3, [pc, #332]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800274e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275c:	2300      	movs	r3, #0
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002760:	2301      	movs	r3, #1
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	4619      	mov	r1, r3
 800276a:	484a      	ldr	r0, [pc, #296]	; (8002894 <HAL_TIM_MspPostInit+0x180>)
 800276c:	f002 fb2e 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002770:	e087      	b.n	8002882 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277a:	d11d      	bne.n	80027b8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	4b44      	ldr	r3, [pc, #272]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	4a43      	ldr	r2, [pc, #268]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6313      	str	r3, [r2, #48]	; 0x30
 8002788:	4b41      	ldr	r3, [pc, #260]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027a6:	2301      	movs	r3, #1
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	4619      	mov	r1, r3
 80027b0:	4838      	ldr	r0, [pc, #224]	; (8002894 <HAL_TIM_MspPostInit+0x180>)
 80027b2:	f002 fb0b 	bl	8004dcc <HAL_GPIO_Init>
}
 80027b6:	e064      	b.n	8002882 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a36      	ldr	r2, [pc, #216]	; (8002898 <HAL_TIM_MspPostInit+0x184>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d11c      	bne.n	80027fc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	4b33      	ldr	r3, [pc, #204]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a32      	ldr	r2, [pc, #200]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80027da:	2310      	movs	r3, #16
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027ea:	2302      	movs	r3, #2
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	4619      	mov	r1, r3
 80027f4:	4829      	ldr	r0, [pc, #164]	; (800289c <HAL_TIM_MspPostInit+0x188>)
 80027f6:	f002 fae9 	bl	8004dcc <HAL_GPIO_Init>
}
 80027fa:	e042      	b.n	8002882 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <HAL_TIM_MspPostInit+0x18c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d11c      	bne.n	8002840 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002806:	4b22      	ldr	r3, [pc, #136]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a21      	ldr	r2, [pc, #132]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800281e:	2301      	movs	r3, #1
 8002820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800282e:	2302      	movs	r3, #2
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002832:	f107 031c 	add.w	r3, r7, #28
 8002836:	4619      	mov	r1, r3
 8002838:	481a      	ldr	r0, [pc, #104]	; (80028a4 <HAL_TIM_MspPostInit+0x190>)
 800283a:	f002 fac7 	bl	8004dcc <HAL_GPIO_Init>
}
 800283e:	e020      	b.n	8002882 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <HAL_TIM_MspPostInit+0x194>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d11b      	bne.n	8002882 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002862:	2340      	movs	r3, #64	; 0x40
 8002864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002872:	2309      	movs	r3, #9
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	480b      	ldr	r0, [pc, #44]	; (80028ac <HAL_TIM_MspPostInit+0x198>)
 800287e:	f002 faa5 	bl	8004dcc <HAL_GPIO_Init>
}
 8002882:	bf00      	nop
 8002884:	3730      	adds	r7, #48	; 0x30
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40010000 	.word	0x40010000
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000
 8002898:	40000400 	.word	0x40000400
 800289c:	40020400 	.word	0x40020400
 80028a0:	40000c00 	.word	0x40000c00
 80028a4:	40022000 	.word	0x40022000
 80028a8:	40001800 	.word	0x40001800
 80028ac:	40021c00 	.word	0x40021c00

080028b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	; 0x30
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a3c      	ldr	r2, [pc, #240]	; (80029c0 <HAL_UART_MspInit+0x110>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d145      	bne.n	800295e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028d2:	4b3c      	ldr	r3, [pc, #240]	; (80029c4 <HAL_UART_MspInit+0x114>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	4a3b      	ldr	r2, [pc, #236]	; (80029c4 <HAL_UART_MspInit+0x114>)
 80028d8:	f043 0310 	orr.w	r3, r3, #16
 80028dc:	6453      	str	r3, [r2, #68]	; 0x44
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_UART_MspInit+0x114>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ea:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <HAL_UART_MspInit+0x114>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a35      	ldr	r2, [pc, #212]	; (80029c4 <HAL_UART_MspInit+0x114>)
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <HAL_UART_MspInit+0x114>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <HAL_UART_MspInit+0x114>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a2f      	ldr	r2, [pc, #188]	; (80029c4 <HAL_UART_MspInit+0x114>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_UART_MspInit+0x114>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800292a:	2307      	movs	r3, #7
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800292e:	f107 031c 	add.w	r3, r7, #28
 8002932:	4619      	mov	r1, r3
 8002934:	4824      	ldr	r0, [pc, #144]	; (80029c8 <HAL_UART_MspInit+0x118>)
 8002936:	f002 fa49 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800293a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800294c:	2307      	movs	r3, #7
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002950:	f107 031c 	add.w	r3, r7, #28
 8002954:	4619      	mov	r1, r3
 8002956:	481d      	ldr	r0, [pc, #116]	; (80029cc <HAL_UART_MspInit+0x11c>)
 8002958:	f002 fa38 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800295c:	e02c      	b.n	80029b8 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_UART_MspInit+0x120>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d127      	bne.n	80029b8 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002968:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_UART_MspInit+0x114>)
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <HAL_UART_MspInit+0x114>)
 800296e:	f043 0320 	orr.w	r3, r3, #32
 8002972:	6453      	str	r3, [r2, #68]	; 0x44
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_UART_MspInit+0x114>)
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002980:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_UART_MspInit+0x114>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <HAL_UART_MspInit+0x114>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6313      	str	r3, [r2, #48]	; 0x30
 800298c:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_UART_MspInit+0x114>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002998:	23c0      	movs	r3, #192	; 0xc0
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029a8:	2308      	movs	r3, #8
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	4619      	mov	r1, r3
 80029b2:	4808      	ldr	r0, [pc, #32]	; (80029d4 <HAL_UART_MspInit+0x124>)
 80029b4:	f002 fa0a 	bl	8004dcc <HAL_GPIO_Init>
}
 80029b8:	bf00      	nop
 80029ba:	3730      	adds	r7, #48	; 0x30
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40011000 	.word	0x40011000
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020400 	.word	0x40020400
 80029cc:	40020000 	.word	0x40020000
 80029d0:	40011400 	.word	0x40011400
 80029d4:	40020800 	.word	0x40020800

080029d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80029ec:	4b3a      	ldr	r3, [pc, #232]	; (8002ad8 <HAL_FMC_MspInit+0x100>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d16d      	bne.n	8002ad0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80029f4:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <HAL_FMC_MspInit+0x100>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80029fa:	4b38      	ldr	r3, [pc, #224]	; (8002adc <HAL_FMC_MspInit+0x104>)
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	4a37      	ldr	r2, [pc, #220]	; (8002adc <HAL_FMC_MspInit+0x104>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6393      	str	r3, [r2, #56]	; 0x38
 8002a06:	4b35      	ldr	r3, [pc, #212]	; (8002adc <HAL_FMC_MspInit+0x104>)
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8002a12:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002a16:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a24:	230c      	movs	r3, #12
 8002a26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	482c      	ldr	r0, [pc, #176]	; (8002ae0 <HAL_FMC_MspInit+0x108>)
 8002a2e:	f002 f9cd 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8002a32:	f248 1333 	movw	r3, #33075	; 0x8133
 8002a36:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a44:	230c      	movs	r3, #12
 8002a46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4825      	ldr	r0, [pc, #148]	; (8002ae4 <HAL_FMC_MspInit+0x10c>)
 8002a4e:	f002 f9bd 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8002a52:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a56:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a64:	230c      	movs	r3, #12
 8002a66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	481e      	ldr	r0, [pc, #120]	; (8002ae8 <HAL_FMC_MspInit+0x110>)
 8002a6e:	f002 f9ad 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8002a72:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a76:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a80:	2303      	movs	r3, #3
 8002a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a84:	230c      	movs	r3, #12
 8002a86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4817      	ldr	r0, [pc, #92]	; (8002aec <HAL_FMC_MspInit+0x114>)
 8002a8e:	f002 f99d 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002a92:	2328      	movs	r3, #40	; 0x28
 8002a94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002aa2:	230c      	movs	r3, #12
 8002aa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4811      	ldr	r0, [pc, #68]	; (8002af0 <HAL_FMC_MspInit+0x118>)
 8002aac:	f002 f98e 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ac0:	230c      	movs	r3, #12
 8002ac2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480a      	ldr	r0, [pc, #40]	; (8002af4 <HAL_FMC_MspInit+0x11c>)
 8002aca:	f002 f97f 	bl	8004dcc <HAL_GPIO_Init>
 8002ace:	e000      	b.n	8002ad2 <HAL_FMC_MspInit+0xfa>
    return;
 8002ad0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000380 	.word	0x20000380
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40021800 	.word	0x40021800
 8002ae8:	40020c00 	.word	0x40020c00
 8002aec:	40021400 	.word	0x40021400
 8002af0:	40021c00 	.word	0x40021c00
 8002af4:	40020800 	.word	0x40020800

08002af8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002b00:	f7ff ff6a 	bl	80029d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2b      	ldr	r2, [pc, #172]	; (8002bc8 <HAL_SAI_MspInit+0xbc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d124      	bne.n	8002b68 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_SAI_MspInit+0xc0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10b      	bne.n	8002b3e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <HAL_SAI_MspInit+0xc4>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4a29      	ldr	r2, [pc, #164]	; (8002bd0 <HAL_SAI_MspInit+0xc4>)
 8002b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b30:	6453      	str	r3, [r2, #68]	; 0x44
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_SAI_MspInit+0xc4>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <HAL_SAI_MspInit+0xc0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3301      	adds	r3, #1
 8002b44:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <HAL_SAI_MspInit+0xc0>)
 8002b46:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002b48:	23f0      	movs	r3, #240	; 0xf0
 8002b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b58:	230a      	movs	r3, #10
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	481c      	ldr	r0, [pc, #112]	; (8002bd4 <HAL_SAI_MspInit+0xc8>)
 8002b64:	f002 f932 	bl	8004dcc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1a      	ldr	r2, [pc, #104]	; (8002bd8 <HAL_SAI_MspInit+0xcc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d125      	bne.n	8002bbe <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_SAI_MspInit+0xc0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_SAI_MspInit+0xc4>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <HAL_SAI_MspInit+0xc4>)
 8002b80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_SAI_MspInit+0xc4>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_SAI_MspInit+0xc0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3301      	adds	r3, #1
 8002b98:	4a0c      	ldr	r2, [pc, #48]	; (8002bcc <HAL_SAI_MspInit+0xc0>)
 8002b9a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002bae:	230a      	movs	r3, #10
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4808      	ldr	r0, [pc, #32]	; (8002bdc <HAL_SAI_MspInit+0xd0>)
 8002bba:	f002 f907 	bl	8004dcc <HAL_GPIO_Init>

    }
}
 8002bbe:	bf00      	nop
 8002bc0:	3728      	adds	r7, #40	; 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40015c04 	.word	0x40015c04
 8002bcc:	20000384 	.word	0x20000384
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40022000 	.word	0x40022000
 8002bd8:	40015c24 	.word	0x40015c24
 8002bdc:	40021800 	.word	0x40021800

08002be0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	; 0x30
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	2036      	movs	r0, #54	; 0x36
 8002bf6:	f001 fabb 	bl	8004170 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002bfa:	2036      	movs	r0, #54	; 0x36
 8002bfc:	f001 fad4 	bl	80041a8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <HAL_InitTick+0xa0>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <HAL_InitTick+0xa0>)
 8002c06:	f043 0310 	orr.w	r3, r3, #16
 8002c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_InitTick+0xa0>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c18:	f107 0210 	add.w	r2, r7, #16
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 fbde 	bl	80063e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002c28:	f003 fbb4 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <HAL_InitTick+0xa4>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0c9b      	lsrs	r3, r3, #18
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <HAL_InitTick+0xac>)
 8002c44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c4e:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002c60:	4809      	ldr	r0, [pc, #36]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c62:	f006 f857 	bl	8008d14 <HAL_TIM_Base_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002c6c:	4806      	ldr	r0, [pc, #24]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c6e:	f006 f87d 	bl	8008d6c <HAL_TIM_Base_Start_IT>
 8002c72:	4603      	mov	r3, r0
 8002c74:	e000      	b.n	8002c78 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3730      	adds	r7, #48	; 0x30
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	431bde83 	.word	0x431bde83
 8002c88:	2000be78 	.word	0x2000be78
 8002c8c:	40001000 	.word	0x40001000

08002c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca2:	e7fe      	b.n	8002ca2 <HardFault_Handler+0x4>

08002ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <MemManage_Handler+0x4>

08002caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cae:	e7fe      	b.n	8002cae <BusFault_Handler+0x4>

08002cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <UsageFault_Handler+0x4>

08002cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <CAN1_RX0_IRQHandler+0x10>)
 8002cca:	f000 ff4d 	bl	8003b68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	2000bd74 	.word	0x2000bd74

08002cd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <TIM6_DAC_IRQHandler+0x10>)
 8002cde:	f006 f89a 	bl	8008e16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000be78 	.word	0x2000be78

08002cec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <LTDC_IRQHandler+0x10>)
 8002cf2:	f002 fb17 	bl	8005324 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000ba4c 	.word	0x2000ba4c

08002d00 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <DMA2D_IRQHandler+0x10>)
 8002d06:	f001 fe22 	bl	800494e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2000bcec 	.word	0x2000bcec

08002d14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
	return 1;
 8002d18:	2301      	movs	r3, #1
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <_kill>:

int _kill(int pid, int sig)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d2e:	f01f fde9 	bl	8022904 <__errno>
 8002d32:	4602      	mov	r2, r0
 8002d34:	2316      	movs	r3, #22
 8002d36:	6013      	str	r3, [r2, #0]
	return -1;
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <_exit>:

void _exit (int status)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ffe7 	bl	8002d24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d56:	e7fe      	b.n	8002d56 <_exit+0x12>

08002d58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e00a      	b.n	8002d80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d6a:	f3af 8000 	nop.w
 8002d6e:	4601      	mov	r1, r0
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	60ba      	str	r2, [r7, #8]
 8002d76:	b2ca      	uxtb	r2, r1
 8002d78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbf0      	blt.n	8002d6a <_read+0x12>
	}

return len;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e009      	b.n	8002db8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	60ba      	str	r2, [r7, #8]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	3301      	adds	r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	dbf1      	blt.n	8002da4 <_write+0x12>
	}
	return len;
 8002dc0:	687b      	ldr	r3, [r7, #4]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <_close>:

int _close(int file)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
	return -1;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002df2:	605a      	str	r2, [r3, #4]
	return 0;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <_isatty>:

int _isatty(int file)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
	return 1;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
	return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <_sbrk+0x50>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <_sbrk+0x16>
		heap_end = &end;
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <_sbrk+0x50>)
 8002e46:	4a10      	ldr	r2, [pc, #64]	; (8002e88 <_sbrk+0x54>)
 8002e48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <_sbrk+0x50>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <_sbrk+0x50>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	466a      	mov	r2, sp
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d907      	bls.n	8002e6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e5e:	f01f fd51 	bl	8022904 <__errno>
 8002e62:	4602      	mov	r2, r0
 8002e64:	230c      	movs	r3, #12
 8002e66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6c:	e006      	b.n	8002e7c <_sbrk+0x48>
	}

	heap_end += incr;
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <_sbrk+0x50>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	4a03      	ldr	r2, [pc, #12]	; (8002e84 <_sbrk+0x50>)
 8002e78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000388 	.word	0x20000388
 8002e88:	2000c330 	.word	0x2000c330

08002e8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e90:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <SystemInit+0x28>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	4a07      	ldr	r2, [pc, #28]	; (8002eb4 <SystemInit+0x28>)
 8002e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SystemInit+0x28>)
 8002ea2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ea6:	609a      	str	r2, [r3, #8]
#endif
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ebc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ebe:	e003      	b.n	8002ec8 <LoopCopyDataInit>

08002ec0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ec2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ec4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ec6:	3104      	adds	r1, #4

08002ec8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ec8:	480b      	ldr	r0, [pc, #44]	; (8002ef8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ecc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ece:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ed0:	d3f6      	bcc.n	8002ec0 <CopyDataInit>
  ldr  r2, =_sbss
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ed4:	e002      	b.n	8002edc <LoopFillZerobss>

08002ed6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ed6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ed8:	f842 3b04 	str.w	r3, [r2], #4

08002edc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ede:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ee0:	d3f9      	bcc.n	8002ed6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ee2:	f7ff ffd3 	bl	8002e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ee6:	f01f fd25 	bl	8022934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eea:	f7fd fbc1 	bl	8000670 <main>
  bx  lr    
 8002eee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ef0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002ef4:	0806b804 	.word	0x0806b804
  ldr  r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002efc:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8002f00:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8002f04:	2000c32c 	.word	0x2000c32c

08002f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f08:	e7fe      	b.n	8002f08 <ADC_IRQHandler>

08002f0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0e:	2003      	movs	r0, #3
 8002f10:	f001 f923 	bl	800415a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7ff fe63 	bl	8002be0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002f1a:	f7fe ff09 	bl	8001d30 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_IncTick+0x20>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_IncTick+0x24>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_IncTick+0x24>)
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000020 	.word	0x20000020
 8002f48:	2000beb8 	.word	0x2000beb8

08002f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <HAL_GetTick+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	2000beb8 	.word	0x2000beb8

08002f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f6c:	f7ff ffee 	bl	8002f4c <HAL_GetTick>
 8002f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d005      	beq.n	8002f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_Delay+0x40>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f8a:	bf00      	nop
 8002f8c:	f7ff ffde 	bl	8002f4c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d8f7      	bhi.n	8002f8c <HAL_Delay+0x28>
  {
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000020 	.word	0x20000020

08002fa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e031      	b.n	8003022 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fe feda 	bl	8001d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d116      	bne.n	8003014 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <HAL_ADC_Init+0x84>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	f043 0202 	orr.w	r2, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f964 	bl	80032c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
 8003012:	e001      	b.n	8003018 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	ffffeefd 	.word	0xffffeefd

08003030 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1c>
 8003048:	2302      	movs	r3, #2
 800304a:	e12a      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x272>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b09      	cmp	r3, #9
 800305a:	d93a      	bls.n	80030d2 <HAL_ADC_ConfigChannel+0xa2>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003064:	d035      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68d9      	ldr	r1, [r3, #12]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	3b1e      	subs	r3, #30
 800307c:	2207      	movs	r2, #7
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43da      	mvns	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	400a      	ands	r2, r1
 800308a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a87      	ldr	r2, [pc, #540]	; (80032b0 <HAL_ADC_ConfigChannel+0x280>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10a      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68d9      	ldr	r1, [r3, #12]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	061a      	lsls	r2, r3, #24
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030aa:	e035      	b.n	8003118 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68d9      	ldr	r1, [r3, #12]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	4618      	mov	r0, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4403      	add	r3, r0
 80030c4:	3b1e      	subs	r3, #30
 80030c6:	409a      	lsls	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030d0:	e022      	b.n	8003118 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6919      	ldr	r1, [r3, #16]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	2207      	movs	r2, #7
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43da      	mvns	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	400a      	ands	r2, r1
 80030f4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6919      	ldr	r1, [r3, #16]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	4618      	mov	r0, r3
 8003108:	4603      	mov	r3, r0
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4403      	add	r3, r0
 800310e:	409a      	lsls	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b06      	cmp	r3, #6
 800311e:	d824      	bhi.n	800316a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	3b05      	subs	r3, #5
 8003132:	221f      	movs	r2, #31
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43da      	mvns	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	400a      	ands	r2, r1
 8003140:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	4618      	mov	r0, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	3b05      	subs	r3, #5
 800315c:	fa00 f203 	lsl.w	r2, r0, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	635a      	str	r2, [r3, #52]	; 0x34
 8003168:	e04c      	b.n	8003204 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d824      	bhi.n	80031bc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	3b23      	subs	r3, #35	; 0x23
 8003184:	221f      	movs	r2, #31
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	400a      	ands	r2, r1
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	3b23      	subs	r3, #35	; 0x23
 80031ae:	fa00 f203 	lsl.w	r2, r0, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
 80031ba:	e023      	b.n	8003204 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	3b41      	subs	r3, #65	; 0x41
 80031ce:	221f      	movs	r2, #31
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43da      	mvns	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	400a      	ands	r2, r1
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	4618      	mov	r0, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	3b41      	subs	r3, #65	; 0x41
 80031f8:	fa00 f203 	lsl.w	r2, r0, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a2a      	ldr	r2, [pc, #168]	; (80032b4 <HAL_ADC_ConfigChannel+0x284>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10a      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1f4>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003216:	d105      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003218:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <HAL_ADC_ConfigChannel+0x288>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <HAL_ADC_ConfigChannel+0x288>)
 800321e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003222:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a22      	ldr	r2, [pc, #136]	; (80032b4 <HAL_ADC_ConfigChannel+0x284>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d109      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x212>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b12      	cmp	r3, #18
 8003234:	d105      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_ADC_ConfigChannel+0x288>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4a1f      	ldr	r2, [pc, #124]	; (80032b8 <HAL_ADC_ConfigChannel+0x288>)
 800323c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003240:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <HAL_ADC_ConfigChannel+0x284>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d125      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x268>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <HAL_ADC_ConfigChannel+0x280>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d003      	beq.n	800325e <HAL_ADC_ConfigChannel+0x22e>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b11      	cmp	r3, #17
 800325c:	d11c      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <HAL_ADC_ConfigChannel+0x288>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_ADC_ConfigChannel+0x288>)
 8003264:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003268:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <HAL_ADC_ConfigChannel+0x280>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d111      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_ADC_ConfigChannel+0x28c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <HAL_ADC_ConfigChannel+0x290>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0c9a      	lsrs	r2, r3, #18
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800328a:	e002      	b.n	8003292 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3b01      	subs	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f9      	bne.n	800328c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	10000012 	.word	0x10000012
 80032b4:	40012000 	.word	0x40012000
 80032b8:	40012300 	.word	0x40012300
 80032bc:	20000018 	.word	0x20000018
 80032c0:	431bde83 	.word	0x431bde83

080032c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80032cc:	4b78      	ldr	r3, [pc, #480]	; (80034b0 <ADC_Init+0x1ec>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	4a77      	ldr	r2, [pc, #476]	; (80034b0 <ADC_Init+0x1ec>)
 80032d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80032d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80032d8:	4b75      	ldr	r3, [pc, #468]	; (80034b0 <ADC_Init+0x1ec>)
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4973      	ldr	r1, [pc, #460]	; (80034b0 <ADC_Init+0x1ec>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	021a      	lsls	r2, r3, #8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	4a58      	ldr	r2, [pc, #352]	; (80034b4 <ADC_Init+0x1f0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003366:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	e00f      	b.n	80033be <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0202 	bic.w	r2, r2, #2
 80033cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	005a      	lsls	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800340a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6859      	ldr	r1, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	3b01      	subs	r3, #1
 8003418:	035a      	lsls	r2, r3, #13
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	e007      	b.n	8003434 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003432:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	3b01      	subs	r3, #1
 8003450:	051a      	lsls	r2, r3, #20
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6899      	ldr	r1, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003476:	025a      	lsls	r2, r3, #9
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6899      	ldr	r1, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	029a      	lsls	r2, r3, #10
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40012300 	.word	0x40012300
 80034b4:	0f000001 	.word	0x0f000001

080034b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0ed      	b.n	80036a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fcac 	bl	8001e34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0202 	bic.w	r2, r2, #2
 80034ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034ec:	f7ff fd2e 	bl	8002f4c <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034f2:	e012      	b.n	800351a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034f4:	f7ff fd2a 	bl	8002f4c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b0a      	cmp	r3, #10
 8003500:	d90b      	bls.n	800351a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2205      	movs	r2, #5
 8003512:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0c5      	b.n	80036a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e5      	bne.n	80034f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003538:	f7ff fd08 	bl	8002f4c <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800353e:	e012      	b.n	8003566 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003540:	f7ff fd04 	bl	8002f4c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b0a      	cmp	r3, #10
 800354c:	d90b      	bls.n	8003566 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2205      	movs	r2, #5
 800355e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e09f      	b.n	80036a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0e5      	beq.n	8003540 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7e1b      	ldrb	r3, [r3, #24]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d108      	bne.n	800358e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e007      	b.n	800359e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7e5b      	ldrb	r3, [r3, #25]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d108      	bne.n	80035b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e007      	b.n	80035c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7e9b      	ldrb	r3, [r3, #26]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d108      	bne.n	80035e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0220 	orr.w	r2, r2, #32
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e007      	b.n	80035f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0220 	bic.w	r2, r2, #32
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7edb      	ldrb	r3, [r3, #27]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d108      	bne.n	800360c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0210 	bic.w	r2, r2, #16
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e007      	b.n	800361c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0210 	orr.w	r2, r2, #16
 800361a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7f1b      	ldrb	r3, [r3, #28]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d108      	bne.n	8003636 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0208 	orr.w	r2, r2, #8
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e007      	b.n	8003646 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0208 	bic.w	r2, r2, #8
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7f5b      	ldrb	r3, [r3, #29]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d108      	bne.n	8003660 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0204 	orr.w	r2, r2, #4
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e007      	b.n	8003670 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0204 	bic.w	r2, r2, #4
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	ea42 0103 	orr.w	r1, r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	1e5a      	subs	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d003      	beq.n	80036d6 <HAL_CAN_ConfigFilter+0x26>
 80036ce:	7cfb      	ldrb	r3, [r7, #19]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	f040 80be 	bne.w	8003852 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80036d6:	4b65      	ldr	r3, [pc, #404]	; (800386c <HAL_CAN_ConfigFilter+0x1bc>)
 80036d8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	431a      	orrs	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2201      	movs	r2, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	43db      	mvns	r3, r3
 8003728:	401a      	ands	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d123      	bne.n	8003780 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	43db      	mvns	r3, r3
 8003742:	401a      	ands	r2, r3
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800375a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3248      	adds	r2, #72	; 0x48
 8003760:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003774:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003776:	6979      	ldr	r1, [r7, #20]
 8003778:	3348      	adds	r3, #72	; 0x48
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	440b      	add	r3, r1
 800377e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d122      	bne.n	80037ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	431a      	orrs	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3248      	adds	r2, #72	; 0x48
 80037ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037c4:	6979      	ldr	r1, [r7, #20]
 80037c6:	3348      	adds	r3, #72	; 0x48
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	440b      	add	r3, r1
 80037cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	43db      	mvns	r3, r3
 80037e0:	401a      	ands	r2, r3
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80037e8:	e007      	b.n	80037fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	43db      	mvns	r3, r3
 800380c:	401a      	ands	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003814:	e007      	b.n	8003826 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	431a      	orrs	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	431a      	orrs	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003844:	f023 0201 	bic.w	r2, r3, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e006      	b.n	8003860 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
  }
}
 8003860:	4618      	mov	r0, r3
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40006400 	.word	0x40006400

08003870 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d12e      	bne.n	80038e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800389c:	f7ff fb56 	bl	8002f4c <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038a2:	e012      	b.n	80038ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038a4:	f7ff fb52 	bl	8002f4c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b0a      	cmp	r3, #10
 80038b0:	d90b      	bls.n	80038ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2205      	movs	r2, #5
 80038c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e012      	b.n	80038f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e5      	bne.n	80038a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	e006      	b.n	80038f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
  }
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800390c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d003      	beq.n	800391c <HAL_CAN_GetRxMessage+0x24>
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	2b02      	cmp	r3, #2
 8003918:	f040 80f3 	bne.w	8003b02 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10e      	bne.n	8003940 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d116      	bne.n	800395e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0e7      	b.n	8003b10 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d107      	bne.n	800395e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0d8      	b.n	8003b10 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	331b      	adds	r3, #27
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	4413      	add	r3, r2
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0204 	and.w	r2, r3, #4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10c      	bne.n	8003996 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	331b      	adds	r3, #27
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	4413      	add	r3, r2
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	0d5b      	lsrs	r3, r3, #21
 800398c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e00b      	b.n	80039ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	331b      	adds	r3, #27
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	4413      	add	r3, r2
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	08db      	lsrs	r3, r3, #3
 80039a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	331b      	adds	r3, #27
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	4413      	add	r3, r2
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0202 	and.w	r2, r3, #2
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	331b      	adds	r3, #27
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	4413      	add	r3, r2
 80039d0:	3304      	adds	r3, #4
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 020f 	and.w	r2, r3, #15
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	331b      	adds	r3, #27
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	4413      	add	r3, r2
 80039e8:	3304      	adds	r3, #4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	331b      	adds	r3, #27
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	4413      	add	r3, r2
 8003a00:	3304      	adds	r3, #4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	0a1a      	lsrs	r2, r3, #8
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	3301      	adds	r3, #1
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	0c1a      	lsrs	r2, r3, #16
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	3302      	adds	r3, #2
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	0e1a      	lsrs	r2, r3, #24
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	3303      	adds	r3, #3
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	3304      	adds	r3, #4
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0a1a      	lsrs	r2, r3, #8
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	3305      	adds	r3, #5
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	0c1a      	lsrs	r2, r3, #16
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	3306      	adds	r3, #6
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	0e1a      	lsrs	r2, r3, #24
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	3307      	adds	r3, #7
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d108      	bne.n	8003aee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0220 	orr.w	r2, r2, #32
 8003aea:	60da      	str	r2, [r3, #12]
 8003aec:	e007      	b.n	8003afe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0220 	orr.w	r2, r2, #32
 8003afc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e006      	b.n	8003b10 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b2c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d002      	beq.n	8003b3a <HAL_CAN_ActivateNotification+0x1e>
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d109      	bne.n	8003b4e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6959      	ldr	r1, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e006      	b.n	8003b5c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
  }
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003b70:	2300      	movs	r3, #0
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d07c      	beq.n	8003ca8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d023      	beq.n	8003c00 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f97d 	bl	8003eca <HAL_CAN_TxMailbox0CompleteCallback>
 8003bd0:	e016      	b.n	8003c00 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d004      	beq.n	8003be6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
 8003be4:	e00c      	b.n	8003c00 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf8:	e002      	b.n	8003c00 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f983 	bl	8003f06 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d024      	beq.n	8003c54 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f95d 	bl	8003ede <HAL_CAN_TxMailbox1CompleteCallback>
 8003c24:	e016      	b.n	8003c54 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
 8003c38:	e00c      	b.n	8003c54 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4c:	e002      	b.n	8003c54 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f963 	bl	8003f1a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d024      	beq.n	8003ca8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f93d 	bl	8003ef2 <HAL_CAN_TxMailbox2CompleteCallback>
 8003c78:	e016      	b.n	8003ca8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	e00c      	b.n	8003ca8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca0:	e002      	b.n	8003ca8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f943 	bl	8003f2e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00c      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2210      	movs	r2, #16
 8003cca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d006      	beq.n	8003cee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f92a 	bl	8003f42 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fc fe8e 	bl	8000a28 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d006      	beq.n	8003d52 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f90c 	bl	8003f6a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f8f3 	bl	8003f56 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d006      	beq.n	8003d92 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2210      	movs	r2, #16
 8003d8a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f8f6 	bl	8003f7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d006      	beq.n	8003db4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2208      	movs	r2, #8
 8003dac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8ef 	bl	8003f92 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d075      	beq.n	8003eaa <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d06c      	beq.n	8003ea2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f043 0302 	orr.w	r3, r3, #2
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d03d      	beq.n	8003ea2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d038      	beq.n	8003ea2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e36:	2b30      	cmp	r3, #48	; 0x30
 8003e38:	d017      	beq.n	8003e6a <HAL_CAN_IRQHandler+0x302>
 8003e3a:	2b30      	cmp	r3, #48	; 0x30
 8003e3c:	d804      	bhi.n	8003e48 <HAL_CAN_IRQHandler+0x2e0>
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d009      	beq.n	8003e56 <HAL_CAN_IRQHandler+0x2ee>
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d00c      	beq.n	8003e60 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003e46:	e024      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003e48:	2b50      	cmp	r3, #80	; 0x50
 8003e4a:	d018      	beq.n	8003e7e <HAL_CAN_IRQHandler+0x316>
 8003e4c:	2b60      	cmp	r3, #96	; 0x60
 8003e4e:	d01b      	beq.n	8003e88 <HAL_CAN_IRQHandler+0x320>
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d00f      	beq.n	8003e74 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003e54:	e01d      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	f043 0308 	orr.w	r3, r3, #8
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e5e:	e018      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	f043 0310 	orr.w	r3, r3, #16
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e68:	e013      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	f043 0320 	orr.w	r3, r3, #32
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e72:	e00e      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e7c:	e009      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e86:	e004      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e90:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699a      	ldr	r2, [r3, #24]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ea0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f872 	bl	8003fa6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3728      	adds	r7, #40	; 0x28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <__NVIC_SetPriorityGrouping+0x40>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fea:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <__NVIC_SetPriorityGrouping+0x40>)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	60d3      	str	r3, [r2, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00
 8004000:	05fa0000 	.word	0x05fa0000

08004004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <__NVIC_GetPriorityGrouping+0x18>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 0307 	and.w	r3, r3, #7
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	2b00      	cmp	r3, #0
 8004030:	db0b      	blt.n	800404a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	4907      	ldr	r1, [pc, #28]	; (8004058 <__NVIC_EnableIRQ+0x38>)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2001      	movs	r0, #1
 8004042:	fa00 f202 	lsl.w	r2, r0, r2
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	2b00      	cmp	r3, #0
 800406c:	db10      	blt.n	8004090 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	f003 021f 	and.w	r2, r3, #31
 8004074:	4909      	ldr	r1, [pc, #36]	; (800409c <__NVIC_DisableIRQ+0x40>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2001      	movs	r0, #1
 800407e:	fa00 f202 	lsl.w	r2, r0, r2
 8004082:	3320      	adds	r3, #32
 8004084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004088:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800408c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000e100 	.word	0xe000e100

080040a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	6039      	str	r1, [r7, #0]
 80040aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	db0a      	blt.n	80040ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	490c      	ldr	r1, [pc, #48]	; (80040ec <__NVIC_SetPriority+0x4c>)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	0112      	lsls	r2, r2, #4
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	440b      	add	r3, r1
 80040c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c8:	e00a      	b.n	80040e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4908      	ldr	r1, [pc, #32]	; (80040f0 <__NVIC_SetPriority+0x50>)
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	3b04      	subs	r3, #4
 80040d8:	0112      	lsls	r2, r2, #4
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	440b      	add	r3, r1
 80040de:	761a      	strb	r2, [r3, #24]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000e100 	.word	0xe000e100
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b089      	sub	sp, #36	; 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f1c3 0307 	rsb	r3, r3, #7
 800410e:	2b04      	cmp	r3, #4
 8004110:	bf28      	it	cs
 8004112:	2304      	movcs	r3, #4
 8004114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3304      	adds	r3, #4
 800411a:	2b06      	cmp	r3, #6
 800411c:	d902      	bls.n	8004124 <NVIC_EncodePriority+0x30>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3b03      	subs	r3, #3
 8004122:	e000      	b.n	8004126 <NVIC_EncodePriority+0x32>
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004128:	f04f 32ff 	mov.w	r2, #4294967295
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43da      	mvns	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	401a      	ands	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800413c:	f04f 31ff 	mov.w	r1, #4294967295
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	43d9      	mvns	r1, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800414c:	4313      	orrs	r3, r2
         );
}
 800414e:	4618      	mov	r0, r3
 8004150:	3724      	adds	r7, #36	; 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff ff2a 	bl	8003fbc <__NVIC_SetPriorityGrouping>
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004182:	f7ff ff3f 	bl	8004004 <__NVIC_GetPriorityGrouping>
 8004186:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	6978      	ldr	r0, [r7, #20]
 800418e:	f7ff ffb1 	bl	80040f4 <NVIC_EncodePriority>
 8004192:	4602      	mov	r2, r0
 8004194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff ff80 	bl	80040a0 <__NVIC_SetPriority>
}
 80041a0:	bf00      	nop
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff ff32 	bl	8004020 <__NVIC_EnableIRQ>
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff ff42 	bl	800405c <__NVIC_DisableIRQ>
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e054      	b.n	800429c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	7f5b      	ldrb	r3, [r3, #29]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d105      	bne.n	8004208 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fd fe62 	bl	8001ecc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	791b      	ldrb	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10c      	bne.n	8004230 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a22      	ldr	r2, [pc, #136]	; (80042a4 <HAL_CRC_Init+0xc4>)
 800421c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0218 	bic.w	r2, r2, #24
 800422c:	609a      	str	r2, [r3, #8]
 800422e:	e00c      	b.n	800424a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6899      	ldr	r1, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	461a      	mov	r2, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f834 	bl	80042a8 <HAL_CRCEx_Polynomial_Set>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e028      	b.n	800429c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	795b      	ldrb	r3, [r3, #5]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f04f 32ff 	mov.w	r2, #4294967295
 800425a:	611a      	str	r2, [r3, #16]
 800425c:	e004      	b.n	8004268 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6912      	ldr	r2, [r2, #16]
 8004266:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	04c11db7 	.word	0x04c11db7

080042a8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80042b8:	231f      	movs	r3, #31
 80042ba:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80042bc:	bf00      	nop
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1e5a      	subs	r2, r3, #1
 80042c2:	613a      	str	r2, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <HAL_CRCEx_Polynomial_Set+0x34>
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f003 031f 	and.w	r3, r3, #31
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b18      	cmp	r3, #24
 80042e0:	d846      	bhi.n	8004370 <HAL_CRCEx_Polynomial_Set+0xc8>
 80042e2:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80042e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e8:	08004377 	.word	0x08004377
 80042ec:	08004371 	.word	0x08004371
 80042f0:	08004371 	.word	0x08004371
 80042f4:	08004371 	.word	0x08004371
 80042f8:	08004371 	.word	0x08004371
 80042fc:	08004371 	.word	0x08004371
 8004300:	08004371 	.word	0x08004371
 8004304:	08004371 	.word	0x08004371
 8004308:	08004365 	.word	0x08004365
 800430c:	08004371 	.word	0x08004371
 8004310:	08004371 	.word	0x08004371
 8004314:	08004371 	.word	0x08004371
 8004318:	08004371 	.word	0x08004371
 800431c:	08004371 	.word	0x08004371
 8004320:	08004371 	.word	0x08004371
 8004324:	08004371 	.word	0x08004371
 8004328:	08004359 	.word	0x08004359
 800432c:	08004371 	.word	0x08004371
 8004330:	08004371 	.word	0x08004371
 8004334:	08004371 	.word	0x08004371
 8004338:	08004371 	.word	0x08004371
 800433c:	08004371 	.word	0x08004371
 8004340:	08004371 	.word	0x08004371
 8004344:	08004371 	.word	0x08004371
 8004348:	0800434d 	.word	0x0800434d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b06      	cmp	r3, #6
 8004350:	d913      	bls.n	800437a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004356:	e010      	b.n	800437a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b07      	cmp	r3, #7
 800435c:	d90f      	bls.n	800437e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004362:	e00c      	b.n	800437e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b0f      	cmp	r3, #15
 8004368:	d90b      	bls.n	8004382 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800436e:	e008      	b.n	8004382 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	75fb      	strb	r3, [r7, #23]
      break;
 8004374:	e006      	b.n	8004384 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004376:	bf00      	nop
 8004378:	e004      	b.n	8004384 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800437a:	bf00      	nop
 800437c:	e002      	b.n	8004384 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800437e:	bf00      	nop
 8004380:	e000      	b.n	8004384 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004382:	bf00      	nop
  }
  if (status == HAL_OK)
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10d      	bne.n	80043a6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f023 0118 	bic.w	r1, r3, #24
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e069      	b.n	800449a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fd9a 	bl	8001f0c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <HAL_DCMI_Init+0xf0>)
 80043fa:	400b      	ands	r3, r1
 80043fc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004412:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800441e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800442a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004436:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004442:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b10      	cmp	r3, #16
 8004452:	d112      	bne.n	800447a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	7f1b      	ldrb	r3, [r3, #28]
 8004458:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	7f5b      	ldrb	r3, [r3, #29]
 800445e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004460:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	7f9b      	ldrb	r3, [r3, #30]
 8004466:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004468:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	7fdb      	ldrb	r3, [r3, #31]
 8004470:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004476:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004478:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 021e 	orr.w	r2, r2, #30
 8004488:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	ffe0f007 	.word	0xffe0f007

080044a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_DMA_Start_IT+0x26>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e048      	b.n	8004560 <HAL_DMA_Start_IT+0xb8>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d137      	bne.n	8004552 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f842 	bl	8004580 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004500:	223f      	movs	r2, #63	; 0x3f
 8004502:	409a      	lsls	r2, r3
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0216 	orr.w	r2, r2, #22
 8004516:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004526:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0208 	orr.w	r2, r2, #8
 800453e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e005      	b.n	800455e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800455a:	2302      	movs	r3, #2
 800455c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800455e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800459c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d108      	bne.n	80045c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045be:	e007      	b.n	80045d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e039      	b.n	8004662 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fd fd40 	bl	8002088 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	f023 0107 	bic.w	r1, r3, #7
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <HAL_DMA2D_Init+0x90>)
 8004644:	4013      	ands	r3, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68d1      	ldr	r1, [r2, #12]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	430b      	orrs	r3, r1
 8004650:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	ffffc000 	.word	0xffffc000

08004670 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e05f      	b.n	8004742 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8004682:	4b32      	ldr	r3, [pc, #200]	; (800474c <HAL_DMA2D_DeInit+0xdc>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d02e      	beq.n	80046ec <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b01      	cmp	r3, #1
 800469a:	d107      	bne.n	80046ac <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f8c1 	bl	8004824 <HAL_DMA2D_Abort>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d021      	beq.n	80046ec <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e04a      	b.n	8004742 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d108      	bne.n	80046cc <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 80046ba:	2100      	movs	r1, #0
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f8f7 	bl	80048b0 <HAL_DMA2D_CLUTLoading_Abort>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d011      	beq.n	80046ec <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e03a      	b.n	8004742 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d108      	bne.n	80046ec <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80046da:	2101      	movs	r1, #1
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f8e7 	bl	80048b0 <HAL_DMA2D_CLUTLoading_Abort>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e02a      	b.n	8004742 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	223f      	movs	r2, #63	; 0x3f
 80046fa:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2200      	movs	r2, #0
 8004702:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2200      	movs	r2, #0
 800470a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2200      	movs	r2, #0
 8004712:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2200      	movs	r2, #0
 800471a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2200      	movs	r2, #0
 8004722:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fd fcd5 	bl	80020d4 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800

08004750 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_DMA2D_Start_IT+0x1c>
 8004768:	2302      	movs	r3, #2
 800476a:	e020      	b.n	80047ae <HAL_DMA2D_Start_IT+0x5e>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fa84 	bl	8004c94 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800479a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af02      	add	r7, sp, #8
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_DMA2D_BlendingStart_IT+0x1c>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e024      	b.n	800481c <HAL_DMA2D_BlendingStart_IT+0x66>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fa4d 	bl	8004c94 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8004808:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 0205 	bic.w	r2, r3, #5
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0204 	orr.w	r2, r2, #4
 800483e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004840:	f7fe fb84 	bl	8002f4c <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004846:	e017      	b.n	8004878 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004848:	f7fe fb80 	bl	8002f4c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004856:	d90f      	bls.n	8004878 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2203      	movs	r2, #3
 8004868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e017      	b.n	80048a8 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e0      	bne.n	8004848 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8004894:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3324      	adds	r3, #36	; 0x24
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0204 	orr.w	r2, r2, #4
 80048d0:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d103      	bne.n	80048e0 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	331c      	adds	r3, #28
 80048de:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80048e0:	f7fe fb34 	bl	8002f4c <HAL_GetTick>
 80048e4:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80048e6:	e017      	b.n	8004918 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80048e8:	f7fe fb30 	bl	8002f4c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048f6:	d90f      	bls.n	8004918 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	f043 0220 	orr.w	r2, r3, #32
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2203      	movs	r2, #3
 8004908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e016      	b.n	8004946 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e1      	bne.n	80048e8 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8004932:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d026      	beq.n	80049be <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d021      	beq.n	80049be <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004988:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2204      	movs	r2, #4
 80049a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d026      	beq.n	8004a16 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d021      	beq.n	8004a16 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2220      	movs	r2, #32
 80049e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	f043 0202 	orr.w	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2204      	movs	r2, #4
 80049fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d026      	beq.n	8004a6e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d021      	beq.n	8004a6e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a38:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2208      	movs	r2, #8
 8004a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a46:	f043 0204 	orr.w	r2, r3, #4
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2204      	movs	r2, #4
 8004a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d013      	beq.n	8004aa0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00e      	beq.n	8004aa0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a90:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2204      	movs	r2, #4
 8004a98:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f853 	bl	8004b46 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d024      	beq.n	8004af4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01f      	beq.n	8004af4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ac2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01f      	beq.n	8004b3e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01a      	beq.n	8004b3e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b16:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f80e 	bl	8004b5a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_DMA2D_ConfigLayer+0x20>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e079      	b.n	8004c84 <HAL_DMA2D_ConfigLayer+0x114>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	3318      	adds	r3, #24
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004bba:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <HAL_DMA2D_ConfigLayer+0x120>)
 8004bbc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b0a      	cmp	r3, #10
 8004bc4:	d003      	beq.n	8004bce <HAL_DMA2D_ConfigLayer+0x5e>
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b09      	cmp	r3, #9
 8004bcc:	d107      	bne.n	8004bde <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e005      	b.n	8004bea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	061b      	lsls	r3, r3, #24
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d120      	bne.n	8004c32 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	ea02 0103 	and.w	r1, r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b0a      	cmp	r3, #10
 8004c18:	d003      	beq.n	8004c22 <HAL_DMA2D_ConfigLayer+0xb2>
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b09      	cmp	r3, #9
 8004c20:	d127      	bne.n	8004c72 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c30:	e01f      	b.n	8004c72 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	ea02 0103 	and.w	r1, r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b0a      	cmp	r3, #10
 8004c5a:	d003      	beq.n	8004c64 <HAL_DMA2D_ConfigLayer+0xf4>
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b09      	cmp	r3, #9
 8004c62:	d106      	bne.n	8004c72 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c70:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	ff03000f 	.word	0xff03000f

08004c94 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b08b      	sub	sp, #44	; 0x2c
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	041a      	lsls	r2, r3, #16
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ccc:	d174      	bne.n	8004db8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004cd4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cdc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ce4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d108      	bne.n	8004d06 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	e053      	b.n	8004dae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d106      	bne.n	8004d1c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1a:	e048      	b.n	8004dae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d111      	bne.n	8004d48 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	0cdb      	lsrs	r3, r3, #19
 8004d28:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	0a9b      	lsrs	r3, r3, #10
 8004d2e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	08db      	lsrs	r3, r3, #3
 8004d34:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	02db      	lsls	r3, r3, #11
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
 8004d46:	e032      	b.n	8004dae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d117      	bne.n	8004d80 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	0fdb      	lsrs	r3, r3, #31
 8004d54:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	0cdb      	lsrs	r3, r3, #19
 8004d5a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	0adb      	lsrs	r3, r3, #11
 8004d60:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	08db      	lsrs	r3, r3, #3
 8004d66:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	029b      	lsls	r3, r3, #10
 8004d70:	431a      	orrs	r2, r3
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	03db      	lsls	r3, r3, #15
 8004d76:	4313      	orrs	r3, r2
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	e016      	b.n	8004dae <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	0f1b      	lsrs	r3, r3, #28
 8004d84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	0d1b      	lsrs	r3, r3, #20
 8004d8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	0b1b      	lsrs	r3, r3, #12
 8004d90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	011a      	lsls	r2, r3, #4
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	431a      	orrs	r2, r3
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	031b      	lsls	r3, r3, #12
 8004da6:	4313      	orrs	r3, r2
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004db6:	e003      	b.n	8004dc0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	60da      	str	r2, [r3, #12]
}
 8004dc0:	bf00      	nop
 8004dc2:	372c      	adds	r7, #44	; 0x2c
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004de2:	2300      	movs	r3, #0
 8004de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e175      	b.n	80050d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004dec:	2201      	movs	r2, #1
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	f040 8164 	bne.w	80050d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d00b      	beq.n	8004e2a <HAL_GPIO_Init+0x5e>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d007      	beq.n	8004e2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e1e:	2b11      	cmp	r3, #17
 8004e20:	d003      	beq.n	8004e2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b12      	cmp	r3, #18
 8004e28:	d130      	bne.n	8004e8c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	2203      	movs	r2, #3
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e60:	2201      	movs	r2, #1
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 0201 	and.w	r2, r3, #1
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	2203      	movs	r2, #3
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d003      	beq.n	8004ecc <HAL_GPIO_Init+0x100>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b12      	cmp	r3, #18
 8004eca:	d123      	bne.n	8004f14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	08da      	lsrs	r2, r3, #3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3208      	adds	r2, #8
 8004ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	220f      	movs	r2, #15
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	08da      	lsrs	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3208      	adds	r2, #8
 8004f0e:	69b9      	ldr	r1, [r7, #24]
 8004f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	2203      	movs	r2, #3
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 0203 	and.w	r2, r3, #3
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80be 	beq.w	80050d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f56:	4b65      	ldr	r3, [pc, #404]	; (80050ec <HAL_GPIO_Init+0x320>)
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	4a64      	ldr	r2, [pc, #400]	; (80050ec <HAL_GPIO_Init+0x320>)
 8004f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f60:	6453      	str	r3, [r2, #68]	; 0x44
 8004f62:	4b62      	ldr	r3, [pc, #392]	; (80050ec <HAL_GPIO_Init+0x320>)
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004f6e:	4a60      	ldr	r2, [pc, #384]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	089b      	lsrs	r3, r3, #2
 8004f74:	3302      	adds	r3, #2
 8004f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	220f      	movs	r2, #15
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a57      	ldr	r2, [pc, #348]	; (80050f4 <HAL_GPIO_Init+0x328>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d037      	beq.n	800500a <HAL_GPIO_Init+0x23e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a56      	ldr	r2, [pc, #344]	; (80050f8 <HAL_GPIO_Init+0x32c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d031      	beq.n	8005006 <HAL_GPIO_Init+0x23a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a55      	ldr	r2, [pc, #340]	; (80050fc <HAL_GPIO_Init+0x330>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02b      	beq.n	8005002 <HAL_GPIO_Init+0x236>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a54      	ldr	r2, [pc, #336]	; (8005100 <HAL_GPIO_Init+0x334>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d025      	beq.n	8004ffe <HAL_GPIO_Init+0x232>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a53      	ldr	r2, [pc, #332]	; (8005104 <HAL_GPIO_Init+0x338>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01f      	beq.n	8004ffa <HAL_GPIO_Init+0x22e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a52      	ldr	r2, [pc, #328]	; (8005108 <HAL_GPIO_Init+0x33c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d019      	beq.n	8004ff6 <HAL_GPIO_Init+0x22a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a51      	ldr	r2, [pc, #324]	; (800510c <HAL_GPIO_Init+0x340>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <HAL_GPIO_Init+0x226>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a50      	ldr	r2, [pc, #320]	; (8005110 <HAL_GPIO_Init+0x344>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00d      	beq.n	8004fee <HAL_GPIO_Init+0x222>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a4f      	ldr	r2, [pc, #316]	; (8005114 <HAL_GPIO_Init+0x348>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <HAL_GPIO_Init+0x21e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a4e      	ldr	r2, [pc, #312]	; (8005118 <HAL_GPIO_Init+0x34c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d101      	bne.n	8004fe6 <HAL_GPIO_Init+0x21a>
 8004fe2:	2309      	movs	r3, #9
 8004fe4:	e012      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004fe6:	230a      	movs	r3, #10
 8004fe8:	e010      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004fea:	2308      	movs	r3, #8
 8004fec:	e00e      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004fee:	2307      	movs	r3, #7
 8004ff0:	e00c      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ff2:	2306      	movs	r3, #6
 8004ff4:	e00a      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ff6:	2305      	movs	r3, #5
 8004ff8:	e008      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	e006      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ffe:	2303      	movs	r3, #3
 8005000:	e004      	b.n	800500c <HAL_GPIO_Init+0x240>
 8005002:	2302      	movs	r3, #2
 8005004:	e002      	b.n	800500c <HAL_GPIO_Init+0x240>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_GPIO_Init+0x240>
 800500a:	2300      	movs	r3, #0
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	f002 0203 	and.w	r2, r2, #3
 8005012:	0092      	lsls	r2, r2, #2
 8005014:	4093      	lsls	r3, r2
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800501c:	4934      	ldr	r1, [pc, #208]	; (80050f0 <HAL_GPIO_Init+0x324>)
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	3302      	adds	r3, #2
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800502a:	4b3c      	ldr	r3, [pc, #240]	; (800511c <HAL_GPIO_Init+0x350>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800504e:	4a33      	ldr	r2, [pc, #204]	; (800511c <HAL_GPIO_Init+0x350>)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005054:	4b31      	ldr	r3, [pc, #196]	; (800511c <HAL_GPIO_Init+0x350>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005078:	4a28      	ldr	r2, [pc, #160]	; (800511c <HAL_GPIO_Init+0x350>)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800507e:	4b27      	ldr	r3, [pc, #156]	; (800511c <HAL_GPIO_Init+0x350>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050a2:	4a1e      	ldr	r2, [pc, #120]	; (800511c <HAL_GPIO_Init+0x350>)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050a8:	4b1c      	ldr	r3, [pc, #112]	; (800511c <HAL_GPIO_Init+0x350>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4013      	ands	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050cc:	4a13      	ldr	r2, [pc, #76]	; (800511c <HAL_GPIO_Init+0x350>)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3301      	adds	r3, #1
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	f67f ae86 	bls.w	8004dec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80050e0:	bf00      	nop
 80050e2:	3724      	adds	r7, #36	; 0x24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40013800 	.word	0x40013800
 80050f4:	40020000 	.word	0x40020000
 80050f8:	40020400 	.word	0x40020400
 80050fc:	40020800 	.word	0x40020800
 8005100:	40020c00 	.word	0x40020c00
 8005104:	40021000 	.word	0x40021000
 8005108:	40021400 	.word	0x40021400
 800510c:	40021800 	.word	0x40021800
 8005110:	40021c00 	.word	0x40021c00
 8005114:	40022000 	.word	0x40022000
 8005118:	40022400 	.word	0x40022400
 800511c:	40013c00 	.word	0x40013c00

08005120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	887b      	ldrh	r3, [r7, #2]
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
 800513c:	e001      	b.n	8005142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005142:	7bfb      	ldrb	r3, [r7, #15]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	807b      	strh	r3, [r7, #2]
 800515c:	4613      	mov	r3, r2
 800515e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005160:	787b      	ldrb	r3, [r7, #1]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005166:	887a      	ldrh	r2, [r7, #2]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800516c:	e003      	b.n	8005176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800516e:	887b      	ldrh	r3, [r7, #2]
 8005170:	041a      	lsls	r2, r3, #16
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	619a      	str	r2, [r3, #24]
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e0bf      	b.n	8005316 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fc ffac 	bl	8002108 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80051c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6999      	ldr	r1, [r3, #24]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6899      	ldr	r1, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <HAL_LTDC_Init+0x19c>)
 80051f8:	400b      	ands	r3, r1
 80051fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6899      	ldr	r1, [r3, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68d9      	ldr	r1, [r3, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b3e      	ldr	r3, [pc, #248]	; (8005320 <HAL_LTDC_Init+0x19c>)
 8005226:	400b      	ands	r3, r1
 8005228:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68d9      	ldr	r1, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6919      	ldr	r1, [r3, #16]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b33      	ldr	r3, [pc, #204]	; (8005320 <HAL_LTDC_Init+0x19c>)
 8005254:	400b      	ands	r3, r1
 8005256:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6919      	ldr	r1, [r3, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6959      	ldr	r1, [r3, #20]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	4b27      	ldr	r3, [pc, #156]	; (8005320 <HAL_LTDC_Init+0x19c>)
 8005282:	400b      	ands	r3, r1
 8005284:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6959      	ldr	r1, [r3, #20]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80052c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0206 	orr.w	r2, r2, #6
 80052f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	f000f800 	.word	0xf000f800

08005324 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d023      	beq.n	800538e <HAL_LTDC_IRQHandler+0x6a>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01e      	beq.n	800538e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0204 	bic.w	r2, r2, #4
 800535e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2204      	movs	r2, #4
 8005366:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800536e:	f043 0201 	orr.w	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2204      	movs	r2, #4
 800537c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f86f 	bl	800546c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d023      	beq.n	80053e0 <HAL_LTDC_IRQHandler+0xbc>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01e      	beq.n	80053e0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0202 	bic.w	r2, r2, #2
 80053b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2202      	movs	r2, #2
 80053b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053c0:	f043 0202 	orr.w	r2, r3, #2
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2204      	movs	r2, #4
 80053ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f846 	bl	800546c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d01b      	beq.n	8005422 <HAL_LTDC_IRQHandler+0xfe>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d016      	beq.n	8005422 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0201 	bic.w	r2, r2, #1
 8005402:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2201      	movs	r2, #1
 800540a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f00d fbfb 	bl	8012c18 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <HAL_LTDC_IRQHandler+0x140>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d016      	beq.n	8005464 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0208 	bic.w	r2, r2, #8
 8005444:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2208      	movs	r2, #8
 800544c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f80e 	bl	8005480 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005464:	bf00      	nop
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005494:	b5b0      	push	{r4, r5, r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_LTDC_ConfigLayer+0x1a>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e02c      	b.n	8005508 <HAL_LTDC_ConfigLayer+0x74>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2202      	movs	r2, #2
 80054ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2134      	movs	r1, #52	; 0x34
 80054c4:	fb01 f303 	mul.w	r3, r1, r3
 80054c8:	4413      	add	r3, r2
 80054ca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4614      	mov	r4, r2
 80054d2:	461d      	mov	r5, r3
 80054d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 f849 	bl	8005580 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2201      	movs	r2, #1
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bdb0      	pop	{r4, r5, r7, pc}

08005510 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_LTDC_ProgramLineEvent+0x18>
 8005524:	2302      	movs	r3, #2
 8005526:	e023      	b.n	8005570 <HAL_LTDC_ProgramLineEvent+0x60>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0201 	bic.w	r2, r2, #1
 8005546:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005548:	4a0c      	ldr	r2, [pc, #48]	; (800557c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0201 	orr.w	r2, r2, #1
 800555c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40016800 	.word	0x40016800

08005580 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005580:	b480      	push	{r7}
 8005582:	b089      	sub	sp, #36	; 0x24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	0c1b      	lsrs	r3, r3, #16
 8005598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559c:	4413      	add	r3, r2
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	01db      	lsls	r3, r3, #7
 80055ac:	4413      	add	r3, r2
 80055ae:	3384      	adds	r3, #132	; 0x84
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	4611      	mov	r1, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	01d2      	lsls	r2, r2, #7
 80055bc:	440a      	add	r2, r1
 80055be:	3284      	adds	r2, #132	; 0x84
 80055c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80055c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d6:	4413      	add	r3, r2
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4619      	mov	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	01db      	lsls	r3, r3, #7
 80055e4:	440b      	add	r3, r1
 80055e6:	3384      	adds	r3, #132	; 0x84
 80055e8:	4619      	mov	r1, r3
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055fe:	4413      	add	r3, r2
 8005600:	041b      	lsls	r3, r3, #16
 8005602:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	01db      	lsls	r3, r3, #7
 800560e:	4413      	add	r3, r2
 8005610:	3384      	adds	r3, #132	; 0x84
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	4611      	mov	r1, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	01d2      	lsls	r2, r2, #7
 800561e:	440a      	add	r2, r1
 8005620:	3284      	adds	r2, #132	; 0x84
 8005622:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005626:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005636:	4413      	add	r3, r2
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4619      	mov	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	01db      	lsls	r3, r3, #7
 8005644:	440b      	add	r3, r1
 8005646:	3384      	adds	r3, #132	; 0x84
 8005648:	4619      	mov	r1, r3
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4313      	orrs	r3, r2
 800564e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	01db      	lsls	r3, r3, #7
 800565a:	4413      	add	r3, r2
 800565c:	3384      	adds	r3, #132	; 0x84
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	4611      	mov	r1, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	01d2      	lsls	r2, r2, #7
 800566a:	440a      	add	r2, r1
 800566c:	3284      	adds	r2, #132	; 0x84
 800566e:	f023 0307 	bic.w	r3, r3, #7
 8005672:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	01db      	lsls	r3, r3, #7
 800567e:	4413      	add	r3, r2
 8005680:	3384      	adds	r3, #132	; 0x84
 8005682:	461a      	mov	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005690:	021b      	lsls	r3, r3, #8
 8005692:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	061b      	lsls	r3, r3, #24
 80056a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	01db      	lsls	r3, r3, #7
 80056b0:	4413      	add	r3, r2
 80056b2:	3384      	adds	r3, #132	; 0x84
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	01db      	lsls	r3, r3, #7
 80056c0:	4413      	add	r3, r2
 80056c2:	3384      	adds	r3, #132	; 0x84
 80056c4:	461a      	mov	r2, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056d0:	461a      	mov	r2, r3
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	01db      	lsls	r3, r3, #7
 80056e4:	440b      	add	r3, r1
 80056e6:	3384      	adds	r3, #132	; 0x84
 80056e8:	4619      	mov	r1, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	01db      	lsls	r3, r3, #7
 80056fa:	4413      	add	r3, r2
 80056fc:	3384      	adds	r3, #132	; 0x84
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	4611      	mov	r1, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	01d2      	lsls	r2, r2, #7
 800570a:	440a      	add	r2, r1
 800570c:	3284      	adds	r2, #132	; 0x84
 800570e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005712:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	01db      	lsls	r3, r3, #7
 800571e:	4413      	add	r3, r2
 8005720:	3384      	adds	r3, #132	; 0x84
 8005722:	461a      	mov	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	01db      	lsls	r3, r3, #7
 8005734:	4413      	add	r3, r2
 8005736:	3384      	adds	r3, #132	; 0x84
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4619      	mov	r1, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	01db      	lsls	r3, r3, #7
 8005744:	440b      	add	r3, r1
 8005746:	3384      	adds	r3, #132	; 0x84
 8005748:	4619      	mov	r1, r3
 800574a:	4b58      	ldr	r3, [pc, #352]	; (80058ac <LTDC_SetConfig+0x32c>)
 800574c:	4013      	ands	r3, r2
 800574e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	68f9      	ldr	r1, [r7, #12]
 800575a:	6809      	ldr	r1, [r1, #0]
 800575c:	4608      	mov	r0, r1
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	01c9      	lsls	r1, r1, #7
 8005762:	4401      	add	r1, r0
 8005764:	3184      	adds	r1, #132	; 0x84
 8005766:	4313      	orrs	r3, r2
 8005768:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	01db      	lsls	r3, r3, #7
 8005774:	4413      	add	r3, r2
 8005776:	3384      	adds	r3, #132	; 0x84
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	01db      	lsls	r3, r3, #7
 8005784:	4413      	add	r3, r2
 8005786:	3384      	adds	r3, #132	; 0x84
 8005788:	461a      	mov	r2, r3
 800578a:	2300      	movs	r3, #0
 800578c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	01db      	lsls	r3, r3, #7
 8005798:	4413      	add	r3, r2
 800579a:	3384      	adds	r3, #132	; 0x84
 800579c:	461a      	mov	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d102      	bne.n	80057b2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80057ac:	2304      	movs	r3, #4
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	e01b      	b.n	80057ea <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d102      	bne.n	80057c0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80057ba:	2303      	movs	r3, #3
 80057bc:	61fb      	str	r3, [r7, #28]
 80057be:	e014      	b.n	80057ea <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d00b      	beq.n	80057e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d007      	beq.n	80057e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d003      	beq.n	80057e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057dc:	2b07      	cmp	r3, #7
 80057de:	d102      	bne.n	80057e6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80057e0:	2302      	movs	r3, #2
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	e001      	b.n	80057ea <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80057e6:	2301      	movs	r3, #1
 80057e8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	01db      	lsls	r3, r3, #7
 80057f4:	4413      	add	r3, r2
 80057f6:	3384      	adds	r3, #132	; 0x84
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	4611      	mov	r1, r2
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	01d2      	lsls	r2, r2, #7
 8005804:	440a      	add	r2, r1
 8005806:	3284      	adds	r2, #132	; 0x84
 8005808:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800580c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	fb02 f303 	mul.w	r3, r2, r3
 8005818:	041a      	lsls	r2, r3, #16
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6859      	ldr	r1, [r3, #4]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	1acb      	subs	r3, r1, r3
 8005824:	69f9      	ldr	r1, [r7, #28]
 8005826:	fb01 f303 	mul.w	r3, r1, r3
 800582a:	3303      	adds	r3, #3
 800582c:	68f9      	ldr	r1, [r7, #12]
 800582e:	6809      	ldr	r1, [r1, #0]
 8005830:	4608      	mov	r0, r1
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	01c9      	lsls	r1, r1, #7
 8005836:	4401      	add	r1, r0
 8005838:	3184      	adds	r1, #132	; 0x84
 800583a:	4313      	orrs	r3, r2
 800583c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	01db      	lsls	r3, r3, #7
 8005848:	4413      	add	r3, r2
 800584a:	3384      	adds	r3, #132	; 0x84
 800584c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4619      	mov	r1, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	01db      	lsls	r3, r3, #7
 8005858:	440b      	add	r3, r1
 800585a:	3384      	adds	r3, #132	; 0x84
 800585c:	4619      	mov	r1, r3
 800585e:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <LTDC_SetConfig+0x330>)
 8005860:	4013      	ands	r3, r2
 8005862:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	01db      	lsls	r3, r3, #7
 800586e:	4413      	add	r3, r2
 8005870:	3384      	adds	r3, #132	; 0x84
 8005872:	461a      	mov	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	01db      	lsls	r3, r3, #7
 8005884:	4413      	add	r3, r2
 8005886:	3384      	adds	r3, #132	; 0x84
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	4611      	mov	r1, r2
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	01d2      	lsls	r2, r2, #7
 8005894:	440a      	add	r2, r1
 8005896:	3284      	adds	r2, #132	; 0x84
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	6013      	str	r3, [r2, #0]
}
 800589e:	bf00      	nop
 80058a0:	3724      	adds	r7, #36	; 0x24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	fffff8f8 	.word	0xfffff8f8
 80058b0:	fffff800 	.word	0xfffff800

080058b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058b8:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a04      	ldr	r2, [pc, #16]	; (80058d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c2:	6013      	str	r3, [r2, #0]
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40007000 	.word	0x40007000

080058d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80058de:	4b23      	ldr	r3, [pc, #140]	; (800596c <HAL_PWREx_EnableOverDrive+0x98>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	4a22      	ldr	r2, [pc, #136]	; (800596c <HAL_PWREx_EnableOverDrive+0x98>)
 80058e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e8:	6413      	str	r3, [r2, #64]	; 0x40
 80058ea:	4b20      	ldr	r3, [pc, #128]	; (800596c <HAL_PWREx_EnableOverDrive+0x98>)
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80058f6:	4b1e      	ldr	r3, [pc, #120]	; (8005970 <HAL_PWREx_EnableOverDrive+0x9c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1d      	ldr	r2, [pc, #116]	; (8005970 <HAL_PWREx_EnableOverDrive+0x9c>)
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005900:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005902:	f7fd fb23 	bl	8002f4c <HAL_GetTick>
 8005906:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005908:	e009      	b.n	800591e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800590a:	f7fd fb1f 	bl	8002f4c <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005918:	d901      	bls.n	800591e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e022      	b.n	8005964 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800591e:	4b14      	ldr	r3, [pc, #80]	; (8005970 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592a:	d1ee      	bne.n	800590a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800592c:	4b10      	ldr	r3, [pc, #64]	; (8005970 <HAL_PWREx_EnableOverDrive+0x9c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0f      	ldr	r2, [pc, #60]	; (8005970 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005936:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005938:	f7fd fb08 	bl	8002f4c <HAL_GetTick>
 800593c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800593e:	e009      	b.n	8005954 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005940:	f7fd fb04 	bl	8002f4c <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800594e:	d901      	bls.n	8005954 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e007      	b.n	8005964 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005960:	d1ee      	bne.n	8005940 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40023800 	.word	0x40023800
 8005970:	40007000 	.word	0x40007000

08005974 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af02      	add	r7, sp, #8
 800597a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800597c:	f7fd fae6 	bl	8002f4c <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e067      	b.n	8005a5c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10b      	bne.n	80059b0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7fc fc79 	bl	8002298 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80059a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f85e 	bl	8005a6c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	3b01      	subs	r3, #1
 80059c0:	021a      	lsls	r2, r3, #8
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	2120      	movs	r1, #32
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f856 	bl	8005a88 <QSPI_WaitFlagStateUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80059e0:	7afb      	ldrb	r3, [r7, #11]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d135      	bne.n	8005a52 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <HAL_QSPI_Init+0xf0>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6852      	ldr	r2, [r2, #4]
 80059f4:	0611      	lsls	r1, r2, #24
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	68d2      	ldr	r2, [r2, #12]
 80059fa:	4311      	orrs	r1, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	69d2      	ldr	r2, [r2, #28]
 8005a00:	4311      	orrs	r1, r2
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6a12      	ldr	r2, [r2, #32]
 8005a06:	4311      	orrs	r1, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <HAL_QSPI_Init+0xf4>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6912      	ldr	r2, [r2, #16]
 8005a1e:	0411      	lsls	r1, r2, #16
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6952      	ldr	r2, [r2, #20]
 8005a24:	4311      	orrs	r1, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6992      	ldr	r2, [r2, #24]
 8005a2a:	4311      	orrs	r1, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	430b      	orrs	r3, r1
 8005a32:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	00ffff2f 	.word	0x00ffff2f
 8005a68:	ffe0f8fe 	.word	0xffe0f8fe

08005a6c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a98:	e01a      	b.n	8005ad0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa0:	d016      	beq.n	8005ad0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa2:	f7fd fa53 	bl	8002f4c <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d302      	bcc.n	8005ab8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2204      	movs	r2, #4
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac4:	f043 0201 	orr.w	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e00e      	b.n	8005aee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bf14      	ite	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	2300      	moveq	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d1d6      	bne.n	8005a9a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005b00:	2300      	movs	r3, #0
 8005b02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e291      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8087 	beq.w	8005c2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b1c:	4b96      	ldr	r3, [pc, #600]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 030c 	and.w	r3, r3, #12
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d00c      	beq.n	8005b42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b28:	4b93      	ldr	r3, [pc, #588]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d112      	bne.n	8005b5a <HAL_RCC_OscConfig+0x62>
 8005b34:	4b90      	ldr	r3, [pc, #576]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b40:	d10b      	bne.n	8005b5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b42:	4b8d      	ldr	r3, [pc, #564]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d06c      	beq.n	8005c28 <HAL_RCC_OscConfig+0x130>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d168      	bne.n	8005c28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e26b      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b62:	d106      	bne.n	8005b72 <HAL_RCC_OscConfig+0x7a>
 8005b64:	4b84      	ldr	r3, [pc, #528]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a83      	ldr	r2, [pc, #524]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	e02e      	b.n	8005bd0 <HAL_RCC_OscConfig+0xd8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x9c>
 8005b7a:	4b7f      	ldr	r3, [pc, #508]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a7e      	ldr	r2, [pc, #504]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4b7c      	ldr	r3, [pc, #496]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a7b      	ldr	r2, [pc, #492]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e01d      	b.n	8005bd0 <HAL_RCC_OscConfig+0xd8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b9c:	d10c      	bne.n	8005bb8 <HAL_RCC_OscConfig+0xc0>
 8005b9e:	4b76      	ldr	r3, [pc, #472]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a75      	ldr	r2, [pc, #468]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	4b73      	ldr	r3, [pc, #460]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a72      	ldr	r2, [pc, #456]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e00b      	b.n	8005bd0 <HAL_RCC_OscConfig+0xd8>
 8005bb8:	4b6f      	ldr	r3, [pc, #444]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a6e      	ldr	r2, [pc, #440]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	4b6c      	ldr	r3, [pc, #432]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a6b      	ldr	r2, [pc, #428]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d013      	beq.n	8005c00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd8:	f7fd f9b8 	bl	8002f4c <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005be0:	f7fd f9b4 	bl	8002f4c <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b64      	cmp	r3, #100	; 0x64
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e21f      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf2:	4b61      	ldr	r3, [pc, #388]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f0      	beq.n	8005be0 <HAL_RCC_OscConfig+0xe8>
 8005bfe:	e014      	b.n	8005c2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fd f9a4 	bl	8002f4c <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c08:	f7fd f9a0 	bl	8002f4c <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b64      	cmp	r3, #100	; 0x64
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e20b      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c1a:	4b57      	ldr	r3, [pc, #348]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x110>
 8005c26:	e000      	b.n	8005c2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d069      	beq.n	8005d0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c36:	4b50      	ldr	r3, [pc, #320]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 030c 	and.w	r3, r3, #12
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00b      	beq.n	8005c5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c42:	4b4d      	ldr	r3, [pc, #308]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d11c      	bne.n	8005c88 <HAL_RCC_OscConfig+0x190>
 8005c4e:	4b4a      	ldr	r3, [pc, #296]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d116      	bne.n	8005c88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c5a:	4b47      	ldr	r3, [pc, #284]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_RCC_OscConfig+0x17a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d001      	beq.n	8005c72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e1df      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c72:	4b41      	ldr	r3, [pc, #260]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	493d      	ldr	r1, [pc, #244]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c86:	e040      	b.n	8005d0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d023      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c90:	4b39      	ldr	r3, [pc, #228]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a38      	ldr	r2, [pc, #224]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9c:	f7fd f956 	bl	8002f4c <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca4:	f7fd f952 	bl	8002f4c <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e1bd      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb6:	4b30      	ldr	r3, [pc, #192]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc2:	4b2d      	ldr	r3, [pc, #180]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4929      	ldr	r1, [pc, #164]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	600b      	str	r3, [r1, #0]
 8005cd6:	e018      	b.n	8005d0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cd8:	4b27      	ldr	r3, [pc, #156]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a26      	ldr	r2, [pc, #152]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005cde:	f023 0301 	bic.w	r3, r3, #1
 8005ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fd f932 	bl	8002f4c <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cec:	f7fd f92e 	bl	8002f4c <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e199      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cfe:	4b1e      	ldr	r3, [pc, #120]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f0      	bne.n	8005cec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d038      	beq.n	8005d88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d019      	beq.n	8005d52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d1e:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d22:	4a15      	ldr	r2, [pc, #84]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2a:	f7fd f90f 	bl	8002f4c <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d32:	f7fd f90b 	bl	8002f4c <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e176      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0f0      	beq.n	8005d32 <HAL_RCC_OscConfig+0x23a>
 8005d50:	e01a      	b.n	8005d88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d56:	4a08      	ldr	r2, [pc, #32]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005d58:	f023 0301 	bic.w	r3, r3, #1
 8005d5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5e:	f7fd f8f5 	bl	8002f4c <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d64:	e00a      	b.n	8005d7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d66:	f7fd f8f1 	bl	8002f4c <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d903      	bls.n	8005d7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e15c      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
 8005d78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d7c:	4b91      	ldr	r3, [pc, #580]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1ee      	bne.n	8005d66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80a4 	beq.w	8005ede <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d96:	4b8b      	ldr	r3, [pc, #556]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10d      	bne.n	8005dbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da2:	4b88      	ldr	r3, [pc, #544]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	4a87      	ldr	r2, [pc, #540]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dac:	6413      	str	r3, [r2, #64]	; 0x40
 8005dae:	4b85      	ldr	r3, [pc, #532]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db6:	60bb      	str	r3, [r7, #8]
 8005db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dbe:	4b82      	ldr	r3, [pc, #520]	; (8005fc8 <HAL_RCC_OscConfig+0x4d0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d118      	bne.n	8005dfc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005dca:	4b7f      	ldr	r3, [pc, #508]	; (8005fc8 <HAL_RCC_OscConfig+0x4d0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a7e      	ldr	r2, [pc, #504]	; (8005fc8 <HAL_RCC_OscConfig+0x4d0>)
 8005dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dd6:	f7fd f8b9 	bl	8002f4c <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dde:	f7fd f8b5 	bl	8002f4c <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b64      	cmp	r3, #100	; 0x64
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e120      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005df0:	4b75      	ldr	r3, [pc, #468]	; (8005fc8 <HAL_RCC_OscConfig+0x4d0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0f0      	beq.n	8005dde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d106      	bne.n	8005e12 <HAL_RCC_OscConfig+0x31a>
 8005e04:	4b6f      	ldr	r3, [pc, #444]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e08:	4a6e      	ldr	r2, [pc, #440]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e10:	e02d      	b.n	8005e6e <HAL_RCC_OscConfig+0x376>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10c      	bne.n	8005e34 <HAL_RCC_OscConfig+0x33c>
 8005e1a:	4b6a      	ldr	r3, [pc, #424]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	4a69      	ldr	r2, [pc, #420]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e20:	f023 0301 	bic.w	r3, r3, #1
 8005e24:	6713      	str	r3, [r2, #112]	; 0x70
 8005e26:	4b67      	ldr	r3, [pc, #412]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2a:	4a66      	ldr	r2, [pc, #408]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e2c:	f023 0304 	bic.w	r3, r3, #4
 8005e30:	6713      	str	r3, [r2, #112]	; 0x70
 8005e32:	e01c      	b.n	8005e6e <HAL_RCC_OscConfig+0x376>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	2b05      	cmp	r3, #5
 8005e3a:	d10c      	bne.n	8005e56 <HAL_RCC_OscConfig+0x35e>
 8005e3c:	4b61      	ldr	r3, [pc, #388]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e40:	4a60      	ldr	r2, [pc, #384]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e42:	f043 0304 	orr.w	r3, r3, #4
 8005e46:	6713      	str	r3, [r2, #112]	; 0x70
 8005e48:	4b5e      	ldr	r3, [pc, #376]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	4a5d      	ldr	r2, [pc, #372]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	6713      	str	r3, [r2, #112]	; 0x70
 8005e54:	e00b      	b.n	8005e6e <HAL_RCC_OscConfig+0x376>
 8005e56:	4b5b      	ldr	r3, [pc, #364]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	4a5a      	ldr	r2, [pc, #360]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	6713      	str	r3, [r2, #112]	; 0x70
 8005e62:	4b58      	ldr	r3, [pc, #352]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e66:	4a57      	ldr	r2, [pc, #348]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e68:	f023 0304 	bic.w	r3, r3, #4
 8005e6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d015      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e76:	f7fd f869 	bl	8002f4c <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7c:	e00a      	b.n	8005e94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e7e:	f7fd f865 	bl	8002f4c <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e0ce      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e94:	4b4b      	ldr	r3, [pc, #300]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0ee      	beq.n	8005e7e <HAL_RCC_OscConfig+0x386>
 8005ea0:	e014      	b.n	8005ecc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea2:	f7fd f853 	bl	8002f4c <HAL_GetTick>
 8005ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea8:	e00a      	b.n	8005ec0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eaa:	f7fd f84f 	bl	8002f4c <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e0b8      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ec0:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1ee      	bne.n	8005eaa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d105      	bne.n	8005ede <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed2:	4b3c      	ldr	r3, [pc, #240]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	4a3b      	ldr	r2, [pc, #236]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005edc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80a4 	beq.w	8006030 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ee8:	4b36      	ldr	r3, [pc, #216]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 030c 	and.w	r3, r3, #12
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d06b      	beq.n	8005fcc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d149      	bne.n	8005f90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efc:	4b31      	ldr	r3, [pc, #196]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a30      	ldr	r2, [pc, #192]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fd f820 	bl	8002f4c <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f10:	f7fd f81c 	bl	8002f4c <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e087      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f22:	4b28      	ldr	r3, [pc, #160]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69da      	ldr	r2, [r3, #28]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	019b      	lsls	r3, r3, #6
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	3b01      	subs	r3, #1
 8005f48:	041b      	lsls	r3, r3, #16
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	061b      	lsls	r3, r3, #24
 8005f52:	4313      	orrs	r3, r2
 8005f54:	4a1b      	ldr	r2, [pc, #108]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f5c:	4b19      	ldr	r3, [pc, #100]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a18      	ldr	r2, [pc, #96]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f68:	f7fc fff0 	bl	8002f4c <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f70:	f7fc ffec 	bl	8002f4c <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e057      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f82:	4b10      	ldr	r3, [pc, #64]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HAL_RCC_OscConfig+0x478>
 8005f8e:	e04f      	b.n	8006030 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f90:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a0b      	ldr	r2, [pc, #44]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9c:	f7fc ffd6 	bl	8002f4c <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa4:	f7fc ffd2 	bl	8002f4c <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e03d      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb6:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f0      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x4ac>
 8005fc2:	e035      	b.n	8006030 <HAL_RCC_OscConfig+0x538>
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	; (800603c <HAL_RCC_OscConfig+0x544>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d028      	beq.n	800602c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d121      	bne.n	800602c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d11a      	bne.n	800602c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006002:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006004:	4293      	cmp	r3, r2
 8006006:	d111      	bne.n	800602c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	3b01      	subs	r3, #1
 8006016:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006018:	429a      	cmp	r2, r3
 800601a:	d107      	bne.n	800602c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006028:	429a      	cmp	r2, r3
 800602a:	d001      	beq.n	8006030 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40023800 	.word	0x40023800

08006040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e0d0      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006058:	4b6a      	ldr	r3, [pc, #424]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d910      	bls.n	8006088 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006066:	4b67      	ldr	r3, [pc, #412]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f023 020f 	bic.w	r2, r3, #15
 800606e:	4965      	ldr	r1, [pc, #404]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	4313      	orrs	r3, r2
 8006074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006076:	4b63      	ldr	r3, [pc, #396]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	429a      	cmp	r2, r3
 8006082:	d001      	beq.n	8006088 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e0b8      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d020      	beq.n	80060d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060a0:	4b59      	ldr	r3, [pc, #356]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4a58      	ldr	r2, [pc, #352]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060b8:	4b53      	ldr	r3, [pc, #332]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4a52      	ldr	r2, [pc, #328]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c4:	4b50      	ldr	r3, [pc, #320]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	494d      	ldr	r1, [pc, #308]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d040      	beq.n	8006164 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d107      	bne.n	80060fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ea:	4b47      	ldr	r3, [pc, #284]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d115      	bne.n	8006122 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e07f      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d107      	bne.n	8006112 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006102:	4b41      	ldr	r3, [pc, #260]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d109      	bne.n	8006122 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e073      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006112:	4b3d      	ldr	r3, [pc, #244]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e06b      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006122:	4b39      	ldr	r3, [pc, #228]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f023 0203 	bic.w	r2, r3, #3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4936      	ldr	r1, [pc, #216]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 8006130:	4313      	orrs	r3, r2
 8006132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006134:	f7fc ff0a 	bl	8002f4c <HAL_GetTick>
 8006138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613a:	e00a      	b.n	8006152 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800613c:	f7fc ff06 	bl	8002f4c <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	f241 3288 	movw	r2, #5000	; 0x1388
 800614a:	4293      	cmp	r3, r2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e053      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006152:	4b2d      	ldr	r3, [pc, #180]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 020c 	and.w	r2, r3, #12
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	429a      	cmp	r2, r3
 8006162:	d1eb      	bne.n	800613c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006164:	4b27      	ldr	r3, [pc, #156]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d210      	bcs.n	8006194 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006172:	4b24      	ldr	r3, [pc, #144]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f023 020f 	bic.w	r2, r3, #15
 800617a:	4922      	ldr	r1, [pc, #136]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	4313      	orrs	r3, r2
 8006180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006182:	4b20      	ldr	r3, [pc, #128]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d001      	beq.n	8006194 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e032      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061a0:	4b19      	ldr	r3, [pc, #100]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	4916      	ldr	r1, [pc, #88]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061be:	4b12      	ldr	r3, [pc, #72]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	490e      	ldr	r1, [pc, #56]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061d2:	f000 f821 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 80061d6:	4601      	mov	r1, r0
 80061d8:	4b0b      	ldr	r3, [pc, #44]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	4a0a      	ldr	r2, [pc, #40]	; (800620c <HAL_RCC_ClockConfig+0x1cc>)
 80061e4:	5cd3      	ldrb	r3, [r2, r3]
 80061e6:	fa21 f303 	lsr.w	r3, r1, r3
 80061ea:	4a09      	ldr	r2, [pc, #36]	; (8006210 <HAL_RCC_ClockConfig+0x1d0>)
 80061ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061ee:	4b09      	ldr	r3, [pc, #36]	; (8006214 <HAL_RCC_ClockConfig+0x1d4>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fc fcf4 	bl	8002be0 <HAL_InitTick>

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40023c00 	.word	0x40023c00
 8006208:	40023800 	.word	0x40023800
 800620c:	08023f80 	.word	0x08023f80
 8006210:	20000018 	.word	0x20000018
 8006214:	2000001c 	.word	0x2000001c

08006218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	607b      	str	r3, [r7, #4]
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	2300      	movs	r3, #0
 8006228:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800622e:	4b50      	ldr	r3, [pc, #320]	; (8006370 <HAL_RCC_GetSysClockFreq+0x158>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 030c 	and.w	r3, r3, #12
 8006236:	2b04      	cmp	r3, #4
 8006238:	d007      	beq.n	800624a <HAL_RCC_GetSysClockFreq+0x32>
 800623a:	2b08      	cmp	r3, #8
 800623c:	d008      	beq.n	8006250 <HAL_RCC_GetSysClockFreq+0x38>
 800623e:	2b00      	cmp	r3, #0
 8006240:	f040 808d 	bne.w	800635e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006244:	4b4b      	ldr	r3, [pc, #300]	; (8006374 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006246:	60bb      	str	r3, [r7, #8]
      break;
 8006248:	e08c      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800624a:	4b4b      	ldr	r3, [pc, #300]	; (8006378 <HAL_RCC_GetSysClockFreq+0x160>)
 800624c:	60bb      	str	r3, [r7, #8]
      break;
 800624e:	e089      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006250:	4b47      	ldr	r3, [pc, #284]	; (8006370 <HAL_RCC_GetSysClockFreq+0x158>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006258:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800625a:	4b45      	ldr	r3, [pc, #276]	; (8006370 <HAL_RCC_GetSysClockFreq+0x158>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d023      	beq.n	80062ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006266:	4b42      	ldr	r3, [pc, #264]	; (8006370 <HAL_RCC_GetSysClockFreq+0x158>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	099b      	lsrs	r3, r3, #6
 800626c:	f04f 0400 	mov.w	r4, #0
 8006270:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	ea03 0501 	and.w	r5, r3, r1
 800627c:	ea04 0602 	and.w	r6, r4, r2
 8006280:	4a3d      	ldr	r2, [pc, #244]	; (8006378 <HAL_RCC_GetSysClockFreq+0x160>)
 8006282:	fb02 f106 	mul.w	r1, r2, r6
 8006286:	2200      	movs	r2, #0
 8006288:	fb02 f205 	mul.w	r2, r2, r5
 800628c:	440a      	add	r2, r1
 800628e:	493a      	ldr	r1, [pc, #232]	; (8006378 <HAL_RCC_GetSysClockFreq+0x160>)
 8006290:	fba5 0101 	umull	r0, r1, r5, r1
 8006294:	1853      	adds	r3, r2, r1
 8006296:	4619      	mov	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f04f 0400 	mov.w	r4, #0
 800629e:	461a      	mov	r2, r3
 80062a0:	4623      	mov	r3, r4
 80062a2:	f7fa f805 	bl	80002b0 <__aeabi_uldivmod>
 80062a6:	4603      	mov	r3, r0
 80062a8:	460c      	mov	r4, r1
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	e049      	b.n	8006342 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ae:	4b30      	ldr	r3, [pc, #192]	; (8006370 <HAL_RCC_GetSysClockFreq+0x158>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	099b      	lsrs	r3, r3, #6
 80062b4:	f04f 0400 	mov.w	r4, #0
 80062b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	ea03 0501 	and.w	r5, r3, r1
 80062c4:	ea04 0602 	and.w	r6, r4, r2
 80062c8:	4629      	mov	r1, r5
 80062ca:	4632      	mov	r2, r6
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	f04f 0400 	mov.w	r4, #0
 80062d4:	0154      	lsls	r4, r2, #5
 80062d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80062da:	014b      	lsls	r3, r1, #5
 80062dc:	4619      	mov	r1, r3
 80062de:	4622      	mov	r2, r4
 80062e0:	1b49      	subs	r1, r1, r5
 80062e2:	eb62 0206 	sbc.w	r2, r2, r6
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	f04f 0400 	mov.w	r4, #0
 80062ee:	0194      	lsls	r4, r2, #6
 80062f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80062f4:	018b      	lsls	r3, r1, #6
 80062f6:	1a5b      	subs	r3, r3, r1
 80062f8:	eb64 0402 	sbc.w	r4, r4, r2
 80062fc:	f04f 0100 	mov.w	r1, #0
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	00e2      	lsls	r2, r4, #3
 8006306:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800630a:	00d9      	lsls	r1, r3, #3
 800630c:	460b      	mov	r3, r1
 800630e:	4614      	mov	r4, r2
 8006310:	195b      	adds	r3, r3, r5
 8006312:	eb44 0406 	adc.w	r4, r4, r6
 8006316:	f04f 0100 	mov.w	r1, #0
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	02a2      	lsls	r2, r4, #10
 8006320:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006324:	0299      	lsls	r1, r3, #10
 8006326:	460b      	mov	r3, r1
 8006328:	4614      	mov	r4, r2
 800632a:	4618      	mov	r0, r3
 800632c:	4621      	mov	r1, r4
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f04f 0400 	mov.w	r4, #0
 8006334:	461a      	mov	r2, r3
 8006336:	4623      	mov	r3, r4
 8006338:	f7f9 ffba 	bl	80002b0 <__aeabi_uldivmod>
 800633c:	4603      	mov	r3, r0
 800633e:	460c      	mov	r4, r1
 8006340:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006342:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <HAL_RCC_GetSysClockFreq+0x158>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	0c1b      	lsrs	r3, r3, #16
 8006348:	f003 0303 	and.w	r3, r3, #3
 800634c:	3301      	adds	r3, #1
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	fbb2 f3f3 	udiv	r3, r2, r3
 800635a:	60bb      	str	r3, [r7, #8]
      break;
 800635c:	e002      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800635e:	4b05      	ldr	r3, [pc, #20]	; (8006374 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006360:	60bb      	str	r3, [r7, #8]
      break;
 8006362:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006364:	68bb      	ldr	r3, [r7, #8]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800636e:	bf00      	nop
 8006370:	40023800 	.word	0x40023800
 8006374:	00f42400 	.word	0x00f42400
 8006378:	017d7840 	.word	0x017d7840

0800637c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006380:	4b03      	ldr	r3, [pc, #12]	; (8006390 <HAL_RCC_GetHCLKFreq+0x14>)
 8006382:	681b      	ldr	r3, [r3, #0]
}
 8006384:	4618      	mov	r0, r3
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000018 	.word	0x20000018

08006394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006398:	f7ff fff0 	bl	800637c <HAL_RCC_GetHCLKFreq>
 800639c:	4601      	mov	r1, r0
 800639e:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	0a9b      	lsrs	r3, r3, #10
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	4a03      	ldr	r2, [pc, #12]	; (80063b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063aa:	5cd3      	ldrb	r3, [r2, r3]
 80063ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40023800 	.word	0x40023800
 80063b8:	08023f90 	.word	0x08023f90

080063bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063c0:	f7ff ffdc 	bl	800637c <HAL_RCC_GetHCLKFreq>
 80063c4:	4601      	mov	r1, r0
 80063c6:	4b05      	ldr	r3, [pc, #20]	; (80063dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	0b5b      	lsrs	r3, r3, #13
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	4a03      	ldr	r2, [pc, #12]	; (80063e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063d2:	5cd3      	ldrb	r3, [r2, r3]
 80063d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063d8:	4618      	mov	r0, r3
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40023800 	.word	0x40023800
 80063e0:	08023f90 	.word	0x08023f90

080063e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	220f      	movs	r2, #15
 80063f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063f4:	4b12      	ldr	r3, [pc, #72]	; (8006440 <HAL_RCC_GetClockConfig+0x5c>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0203 	and.w	r2, r3, #3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006400:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <HAL_RCC_GetClockConfig+0x5c>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800640c:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <HAL_RCC_GetClockConfig+0x5c>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006418:	4b09      	ldr	r3, [pc, #36]	; (8006440 <HAL_RCC_GetClockConfig+0x5c>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	08db      	lsrs	r3, r3, #3
 800641e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006426:	4b07      	ldr	r3, [pc, #28]	; (8006444 <HAL_RCC_GetClockConfig+0x60>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 020f 	and.w	r2, r3, #15
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	601a      	str	r2, [r3, #0]
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40023800 	.word	0x40023800
 8006444:	40023c00 	.word	0x40023c00

08006448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d012      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006470:	4b69      	ldr	r3, [pc, #420]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	4a68      	ldr	r2, [pc, #416]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006476:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800647a:	6093      	str	r3, [r2, #8]
 800647c:	4b66      	ldr	r3, [pc, #408]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006484:	4964      	ldr	r1, [pc, #400]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006486:	4313      	orrs	r3, r2
 8006488:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006492:	2301      	movs	r3, #1
 8006494:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d017      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064a2:	4b5d      	ldr	r3, [pc, #372]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b0:	4959      	ldr	r1, [pc, #356]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064c0:	d101      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80064ce:	2301      	movs	r3, #1
 80064d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d017      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80064de:	4b4e      	ldr	r3, [pc, #312]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	494a      	ldr	r1, [pc, #296]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064fc:	d101      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80064fe:	2301      	movs	r3, #1
 8006500:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800650a:	2301      	movs	r3, #1
 800650c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800651a:	2301      	movs	r3, #1
 800651c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 808b 	beq.w	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800652c:	4b3a      	ldr	r3, [pc, #232]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	4a39      	ldr	r2, [pc, #228]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006536:	6413      	str	r3, [r2, #64]	; 0x40
 8006538:	4b37      	ldr	r3, [pc, #220]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006544:	4b35      	ldr	r3, [pc, #212]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a34      	ldr	r2, [pc, #208]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800654a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800654e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006550:	f7fc fcfc 	bl	8002f4c <HAL_GetTick>
 8006554:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006556:	e008      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006558:	f7fc fcf8 	bl	8002f4c <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b64      	cmp	r3, #100	; 0x64
 8006564:	d901      	bls.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e355      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800656a:	4b2c      	ldr	r3, [pc, #176]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f0      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006576:	4b28      	ldr	r3, [pc, #160]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800657e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d035      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	429a      	cmp	r2, r3
 8006592:	d02e      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006594:	4b20      	ldr	r3, [pc, #128]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800659e:	4b1e      	ldr	r3, [pc, #120]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	4a1d      	ldr	r2, [pc, #116]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065aa:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	4a1a      	ldr	r2, [pc, #104]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80065b6:	4a18      	ldr	r2, [pc, #96]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065bc:	4b16      	ldr	r3, [pc, #88]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d114      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c8:	f7fc fcc0 	bl	8002f4c <HAL_GetTick>
 80065cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ce:	e00a      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065d0:	f7fc fcbc 	bl	8002f4c <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	; 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e317      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065e6:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0ee      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065fe:	d111      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006600:	4b05      	ldr	r3, [pc, #20]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800660c:	4b04      	ldr	r3, [pc, #16]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800660e:	400b      	ands	r3, r1
 8006610:	4901      	ldr	r1, [pc, #4]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006612:	4313      	orrs	r3, r2
 8006614:	608b      	str	r3, [r1, #8]
 8006616:	e00b      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006618:	40023800 	.word	0x40023800
 800661c:	40007000 	.word	0x40007000
 8006620:	0ffffcff 	.word	0x0ffffcff
 8006624:	4bb0      	ldr	r3, [pc, #704]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	4aaf      	ldr	r2, [pc, #700]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800662a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800662e:	6093      	str	r3, [r2, #8]
 8006630:	4bad      	ldr	r3, [pc, #692]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006632:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800663c:	49aa      	ldr	r1, [pc, #680]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800663e:	4313      	orrs	r3, r2
 8006640:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0310 	and.w	r3, r3, #16
 800664a:	2b00      	cmp	r3, #0
 800664c:	d010      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800664e:	4ba6      	ldr	r3, [pc, #664]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006654:	4aa4      	ldr	r2, [pc, #656]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800665a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800665e:	4ba2      	ldr	r3, [pc, #648]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006660:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	499f      	ldr	r1, [pc, #636]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800667c:	4b9a      	ldr	r3, [pc, #616]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800667e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006682:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800668a:	4997      	ldr	r1, [pc, #604]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800669e:	4b92      	ldr	r3, [pc, #584]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ac:	498e      	ldr	r1, [pc, #568]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066c0:	4b89      	ldr	r3, [pc, #548]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ce:	4986      	ldr	r1, [pc, #536]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066e2:	4b81      	ldr	r3, [pc, #516]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f0:	497d      	ldr	r1, [pc, #500]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006704:	4b78      	ldr	r3, [pc, #480]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670a:	f023 0203 	bic.w	r2, r3, #3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006712:	4975      	ldr	r1, [pc, #468]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006726:	4b70      	ldr	r3, [pc, #448]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672c:	f023 020c 	bic.w	r2, r3, #12
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006734:	496c      	ldr	r1, [pc, #432]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006748:	4b67      	ldr	r3, [pc, #412]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006756:	4964      	ldr	r1, [pc, #400]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800676a:	4b5f      	ldr	r3, [pc, #380]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800676c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006770:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006778:	495b      	ldr	r1, [pc, #364]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800678c:	4b56      	ldr	r3, [pc, #344]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006792:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679a:	4953      	ldr	r1, [pc, #332]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80067ae:	4b4e      	ldr	r3, [pc, #312]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067bc:	494a      	ldr	r1, [pc, #296]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80067d0:	4b45      	ldr	r3, [pc, #276]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067de:	4942      	ldr	r1, [pc, #264]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80067f2:	4b3d      	ldr	r3, [pc, #244]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006800:	4939      	ldr	r1, [pc, #228]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006814:	4b34      	ldr	r3, [pc, #208]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006822:	4931      	ldr	r1, [pc, #196]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d011      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006836:	4b2c      	ldr	r3, [pc, #176]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006844:	4928      	ldr	r1, [pc, #160]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006854:	d101      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006856:	2301      	movs	r3, #1
 8006858:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006866:	2301      	movs	r3, #1
 8006868:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006876:	4b1c      	ldr	r3, [pc, #112]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006884:	4918      	ldr	r1, [pc, #96]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00b      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006898:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068a8:	490f      	ldr	r1, [pc, #60]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d005      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068be:	f040 80d8 	bne.w	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068c2:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a08      	ldr	r2, [pc, #32]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ce:	f7fc fb3d 	bl	8002f4c <HAL_GetTick>
 80068d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068d4:	e00a      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068d6:	f7fc fb39 	bl	8002f4c <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b64      	cmp	r3, #100	; 0x64
 80068e2:	d903      	bls.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e196      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80068e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068ec:	4b6c      	ldr	r3, [pc, #432]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1ee      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d021      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006908:	2b00      	cmp	r3, #0
 800690a:	d11d      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800690c:	4b64      	ldr	r3, [pc, #400]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800690e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006912:	0c1b      	lsrs	r3, r3, #16
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800691a:	4b61      	ldr	r3, [pc, #388]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800691c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006920:	0e1b      	lsrs	r3, r3, #24
 8006922:	f003 030f 	and.w	r3, r3, #15
 8006926:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	019a      	lsls	r2, r3, #6
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	041b      	lsls	r3, r3, #16
 8006932:	431a      	orrs	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	061b      	lsls	r3, r3, #24
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	071b      	lsls	r3, r3, #28
 8006940:	4957      	ldr	r1, [pc, #348]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d004      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800695c:	d00a      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006966:	2b00      	cmp	r3, #0
 8006968:	d02e      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006972:	d129      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006974:	4b4a      	ldr	r3, [pc, #296]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800697a:	0c1b      	lsrs	r3, r3, #16
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006982:	4b47      	ldr	r3, [pc, #284]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006988:	0f1b      	lsrs	r3, r3, #28
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	019a      	lsls	r2, r3, #6
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	041b      	lsls	r3, r3, #16
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	061b      	lsls	r3, r3, #24
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	071b      	lsls	r3, r3, #28
 80069a8:	493d      	ldr	r1, [pc, #244]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069b0:	4b3b      	ldr	r3, [pc, #236]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069b6:	f023 021f 	bic.w	r2, r3, #31
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	3b01      	subs	r3, #1
 80069c0:	4937      	ldr	r1, [pc, #220]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01d      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069d4:	4b32      	ldr	r3, [pc, #200]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069da:	0e1b      	lsrs	r3, r3, #24
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069e2:	4b2f      	ldr	r3, [pc, #188]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069e8:	0f1b      	lsrs	r3, r3, #28
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	019a      	lsls	r2, r3, #6
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	041b      	lsls	r3, r3, #16
 80069fc:	431a      	orrs	r2, r3
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	061b      	lsls	r3, r3, #24
 8006a02:	431a      	orrs	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	071b      	lsls	r3, r3, #28
 8006a08:	4925      	ldr	r1, [pc, #148]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d011      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	019a      	lsls	r2, r3, #6
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	061b      	lsls	r3, r3, #24
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	071b      	lsls	r3, r3, #28
 8006a38:	4919      	ldr	r1, [pc, #100]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a40:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a16      	ldr	r2, [pc, #88]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a4c:	f7fc fa7e 	bl	8002f4c <HAL_GetTick>
 8006a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a54:	f7fc fa7a 	bl	8002f4c <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b64      	cmp	r3, #100	; 0x64
 8006a60:	d901      	bls.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e0d7      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a66:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f0      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	f040 80cd 	bne.w	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a7a:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a08      	ldr	r2, [pc, #32]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a86:	f7fc fa61 	bl	8002f4c <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a8c:	e00a      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a8e:	f7fc fa5d 	bl	8002f4c <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b64      	cmp	r3, #100	; 0x64
 8006a9a:	d903      	bls.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e0ba      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006aa0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006aa4:	4b5e      	ldr	r3, [pc, #376]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab0:	d0ed      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d009      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d02e      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d12a      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006ada:	4b51      	ldr	r3, [pc, #324]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ae8:	4b4d      	ldr	r3, [pc, #308]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aee:	0f1b      	lsrs	r3, r3, #28
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	019a      	lsls	r2, r3, #6
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	041b      	lsls	r3, r3, #16
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	061b      	lsls	r3, r3, #24
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	071b      	lsls	r3, r3, #28
 8006b0e:	4944      	ldr	r1, [pc, #272]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b16:	4b42      	ldr	r3, [pc, #264]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	3b01      	subs	r3, #1
 8006b26:	021b      	lsls	r3, r3, #8
 8006b28:	493d      	ldr	r1, [pc, #244]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d022      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b44:	d11d      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b46:	4b36      	ldr	r3, [pc, #216]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4c:	0e1b      	lsrs	r3, r3, #24
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b54:	4b32      	ldr	r3, [pc, #200]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5a:	0f1b      	lsrs	r3, r3, #28
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	019a      	lsls	r2, r3, #6
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	061b      	lsls	r3, r3, #24
 8006b74:	431a      	orrs	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	071b      	lsls	r3, r3, #28
 8006b7a:	4929      	ldr	r1, [pc, #164]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d028      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b8e:	4b24      	ldr	r3, [pc, #144]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b94:	0e1b      	lsrs	r3, r3, #24
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b9c:	4b20      	ldr	r3, [pc, #128]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba2:	0c1b      	lsrs	r3, r3, #16
 8006ba4:	f003 0303 	and.w	r3, r3, #3
 8006ba8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	019a      	lsls	r2, r3, #6
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	041b      	lsls	r3, r3, #16
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	061b      	lsls	r3, r3, #24
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	071b      	lsls	r3, r3, #28
 8006bc2:	4917      	ldr	r1, [pc, #92]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006bca:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	4911      	ldr	r1, [pc, #68]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006be0:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a0e      	ldr	r2, [pc, #56]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bec:	f7fc f9ae 	bl	8002f4c <HAL_GetTick>
 8006bf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006bf4:	f7fc f9aa 	bl	8002f4c <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b64      	cmp	r3, #100	; 0x64
 8006c00:	d901      	bls.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e007      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c12:	d1ef      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3720      	adds	r7, #32
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40023800 	.word	0x40023800

08006c24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c42:	f040 8086 	bne.w	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006c46:	4b8d      	ldr	r3, [pc, #564]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c4c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006c54:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5c:	d03e      	beq.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8006c5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c62:	d073      	beq.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d000      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006c68:	e074      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006c6a:	4b84      	ldr	r3, [pc, #528]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d108      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c76:	4b81      	ldr	r3, [pc, #516]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c7e:	4a80      	ldr	r2, [pc, #512]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	e007      	b.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006c88:	4b7c      	ldr	r3, [pc, #496]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c90:	4a7c      	ldr	r2, [pc, #496]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c96:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006c98:	4b78      	ldr	r3, [pc, #480]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9e:	0e1b      	lsrs	r3, r3, #24
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006ca6:	4b75      	ldr	r3, [pc, #468]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cac:	099b      	lsrs	r3, r3, #6
 8006cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	fb02 f203 	mul.w	r2, r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cbe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006cc0:	4b6e      	ldr	r3, [pc, #440]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc6:	0a1b      	lsrs	r3, r3, #8
 8006cc8:	f003 031f 	and.w	r3, r3, #31
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd8:	617b      	str	r3, [r7, #20]
        break;
 8006cda:	e03b      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006cdc:	4b67      	ldr	r3, [pc, #412]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d108      	bne.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ce8:	4b64      	ldr	r3, [pc, #400]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cf0:	4a63      	ldr	r2, [pc, #396]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	e007      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006cfa:	4b60      	ldr	r3, [pc, #384]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d02:	4a60      	ldr	r2, [pc, #384]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d08:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006d0a:	4b5c      	ldr	r3, [pc, #368]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d10:	0e1b      	lsrs	r3, r3, #24
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006d18:	4b58      	ldr	r3, [pc, #352]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d1e:	099b      	lsrs	r3, r3, #6
 8006d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	fb02 f203 	mul.w	r2, r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d30:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006d32:	4b52      	ldr	r3, [pc, #328]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d38:	f003 031f 	and.w	r3, r3, #31
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d48:	617b      	str	r3, [r7, #20]
        break;
 8006d4a:	e003      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d4c:	4b4e      	ldr	r3, [pc, #312]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006d4e:	617b      	str	r3, [r7, #20]
        break;
 8006d50:	e000      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8006d52:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d5a:	f040 8086 	bne.w	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006d5e:	4b47      	ldr	r3, [pc, #284]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d64:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006d6c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d74:	d03e      	beq.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006d76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d7a:	d073      	beq.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d000      	beq.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006d80:	e074      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d82:	4b3e      	ldr	r3, [pc, #248]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d108      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d8e:	4b3b      	ldr	r3, [pc, #236]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d96:	4a3a      	ldr	r2, [pc, #232]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	e007      	b.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006da0:	4b36      	ldr	r3, [pc, #216]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006da8:	4a36      	ldr	r2, [pc, #216]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006db0:	4b32      	ldr	r3, [pc, #200]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db6:	0e1b      	lsrs	r3, r3, #24
 8006db8:	f003 030f 	and.w	r3, r3, #15
 8006dbc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006dbe:	4b2f      	ldr	r3, [pc, #188]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc4:	099b      	lsrs	r3, r3, #6
 8006dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	fb02 f203 	mul.w	r2, r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006dd8:	4b28      	ldr	r3, [pc, #160]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dde:	0a1b      	lsrs	r3, r3, #8
 8006de0:	f003 031f 	and.w	r3, r3, #31
 8006de4:	3301      	adds	r3, #1
 8006de6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df0:	617b      	str	r3, [r7, #20]
        break;
 8006df2:	e03b      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006df4:	4b21      	ldr	r3, [pc, #132]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d108      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e00:	4b1e      	ldr	r3, [pc, #120]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e08:	4a1d      	ldr	r2, [pc, #116]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	e007      	b.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006e12:	4b1a      	ldr	r3, [pc, #104]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e1a:	4a1a      	ldr	r2, [pc, #104]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e20:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006e22:	4b16      	ldr	r3, [pc, #88]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e28:	0e1b      	lsrs	r3, r3, #24
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006e30:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	fb02 f203 	mul.w	r2, r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	3301      	adds	r3, #1
 8006e56:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e60:	617b      	str	r3, [r7, #20]
        break;
 8006e62:	e003      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e64:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006e66:	617b      	str	r3, [r7, #20]
        break;
 8006e68:	e000      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006e6a:	bf00      	nop

  return frequency;
 8006e6c:	697b      	ldr	r3, [r7, #20]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	00f42400 	.word	0x00f42400
 8006e84:	017d7840 	.word	0x017d7840
 8006e88:	00bb8000 	.word	0x00bb8000

08006e8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e06b      	b.n	8006f76 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7f5b      	ldrb	r3, [r3, #29]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d105      	bne.n	8006eb4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fb fa82 	bl	80023b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	22ca      	movs	r2, #202	; 0xca
 8006ec0:	625a      	str	r2, [r3, #36]	; 0x24
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2253      	movs	r2, #83	; 0x53
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fb00 	bl	80074d0 <RTC_EnterInitMode>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d008      	beq.n	8006ee8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	22ff      	movs	r2, #255	; 0xff
 8006edc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2204      	movs	r2, #4
 8006ee2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e046      	b.n	8006f76 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6899      	ldr	r1, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b23      	ldr	r3, [pc, #140]	; (8006f80 <HAL_RTC_Init+0xf4>)
 8006ef4:	400b      	ands	r3, r1
 8006ef6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6899      	ldr	r1, [r3, #8]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68d2      	ldr	r2, [r2, #12]
 8006f1e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6919      	ldr	r1, [r3, #16]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	041a      	lsls	r2, r3, #16
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f42:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0208 	bic.w	r2, r2, #8
 8006f52:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	22ff      	movs	r2, #255	; 0xff
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006f74:	2300      	movs	r3, #0
  }
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	ff8fffbf 	.word	0xff8fffbf

08006f84 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006f84:	b590      	push	{r4, r7, lr}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	7f1b      	ldrb	r3, [r3, #28]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_RTC_SetTime+0x1c>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e0a8      	b.n	80070f2 <HAL_RTC_SetTime+0x16e>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d126      	bne.n	8007000 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d102      	bne.n	8006fc6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 faac 	bl	8007528 <RTC_ByteToBcd2>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	785b      	ldrb	r3, [r3, #1]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 faa5 	bl	8007528 <RTC_ByteToBcd2>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006fe2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	789b      	ldrb	r3, [r3, #2]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fa9d 	bl	8007528 <RTC_ByteToBcd2>
 8006fee:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006ff0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	7b1b      	ldrb	r3, [r3, #12]
 8006ff8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	e018      	b.n	8007032 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	d102      	bne.n	8007014 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2200      	movs	r2, #0
 8007012:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007020:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007026:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	7b1b      	ldrb	r3, [r3, #12]
 800702c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	22ca      	movs	r2, #202	; 0xca
 8007038:	625a      	str	r2, [r3, #36]	; 0x24
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2253      	movs	r2, #83	; 0x53
 8007040:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fa44 	bl	80074d0 <RTC_EnterInitMode>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	22ff      	movs	r2, #255	; 0xff
 8007054:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2204      	movs	r2, #4
 800705a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e045      	b.n	80070f2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	6979      	ldr	r1, [r7, #20]
 800706c:	4b23      	ldr	r3, [pc, #140]	; (80070fc <HAL_RTC_SetTime+0x178>)
 800706e:	400b      	ands	r3, r1
 8007070:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007080:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6899      	ldr	r1, [r3, #8]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	431a      	orrs	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0320 	and.w	r3, r3, #32
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d111      	bne.n	80070dc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f9e1 	bl	8007480 <HAL_RTC_WaitForSynchro>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	22ff      	movs	r2, #255	; 0xff
 80070ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2204      	movs	r2, #4
 80070d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e00a      	b.n	80070f2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	22ff      	movs	r2, #255	; 0xff
 80070e2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80070f0:	2300      	movs	r3, #0
  }
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd90      	pop	{r4, r7, pc}
 80070fa:	bf00      	nop
 80070fc:	007f7f7f 	.word	0x007f7f7f

08007100 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007100:	b590      	push	{r4, r7, lr}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	7f1b      	ldrb	r3, [r3, #28]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d101      	bne.n	800711c <HAL_RTC_SetDate+0x1c>
 8007118:	2302      	movs	r3, #2
 800711a:	e092      	b.n	8007242 <HAL_RTC_SetDate+0x142>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2202      	movs	r2, #2
 8007126:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10e      	bne.n	800714c <HAL_RTC_SetDate+0x4c>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	785b      	ldrb	r3, [r3, #1]
 8007132:	f003 0310 	and.w	r3, r3, #16
 8007136:	2b00      	cmp	r3, #0
 8007138:	d008      	beq.n	800714c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	f023 0310 	bic.w	r3, r3, #16
 8007142:	b2db      	uxtb	r3, r3
 8007144:	330a      	adds	r3, #10
 8007146:	b2da      	uxtb	r2, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d11c      	bne.n	800718c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	78db      	ldrb	r3, [r3, #3]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 f9e6 	bl	8007528 <RTC_ByteToBcd2>
 800715c:	4603      	mov	r3, r0
 800715e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	785b      	ldrb	r3, [r3, #1]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 f9df 	bl	8007528 <RTC_ByteToBcd2>
 800716a:	4603      	mov	r3, r0
 800716c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800716e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	789b      	ldrb	r3, [r3, #2]
 8007174:	4618      	mov	r0, r3
 8007176:	f000 f9d7 	bl	8007528 <RTC_ByteToBcd2>
 800717a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800717c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]
 800718a:	e00e      	b.n	80071aa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	78db      	ldrb	r3, [r3, #3]
 8007190:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	785b      	ldrb	r3, [r3, #1]
 8007196:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007198:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800719e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	22ca      	movs	r2, #202	; 0xca
 80071b0:	625a      	str	r2, [r3, #36]	; 0x24
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2253      	movs	r2, #83	; 0x53
 80071b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 f988 	bl	80074d0 <RTC_EnterInitMode>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	22ff      	movs	r2, #255	; 0xff
 80071cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2204      	movs	r2, #4
 80071d2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e031      	b.n	8007242 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	6979      	ldr	r1, [r7, #20]
 80071e4:	4b19      	ldr	r3, [pc, #100]	; (800724c <HAL_RTC_SetDate+0x14c>)
 80071e6:	400b      	ands	r3, r1
 80071e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071f8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b00      	cmp	r3, #0
 8007206:	d111      	bne.n	800722c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f939 	bl	8007480 <HAL_RTC_WaitForSynchro>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	22ff      	movs	r2, #255	; 0xff
 800721a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2204      	movs	r2, #4
 8007220:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e00a      	b.n	8007242 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	22ff      	movs	r2, #255	; 0xff
 8007232:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007240:	2300      	movs	r3, #0
  }
}
 8007242:	4618      	mov	r0, r3
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	bd90      	pop	{r4, r7, pc}
 800724a:	bf00      	nop
 800724c:	00ffff3f 	.word	0x00ffff3f

08007250 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007250:	b590      	push	{r4, r7, lr}
 8007252:	b089      	sub	sp, #36	; 0x24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	7f1b      	ldrb	r3, [r3, #28]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_RTC_SetAlarm+0x24>
 8007270:	2302      	movs	r3, #2
 8007272:	e101      	b.n	8007478 <HAL_RTC_SetAlarm+0x228>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2202      	movs	r2, #2
 800727e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d137      	bne.n	80072f6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f942 	bl	8007528 <RTC_ByteToBcd2>
 80072a4:	4603      	mov	r3, r0
 80072a6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 f93b 	bl	8007528 <RTC_ByteToBcd2>
 80072b2:	4603      	mov	r3, r0
 80072b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80072b6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	789b      	ldrb	r3, [r3, #2]
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 f933 	bl	8007528 <RTC_ByteToBcd2>
 80072c2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80072c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	7b1b      	ldrb	r3, [r3, #12]
 80072cc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80072ce:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 f925 	bl	8007528 <RTC_ByteToBcd2>
 80072de:	4603      	mov	r3, r0
 80072e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80072e2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80072ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80072f0:	4313      	orrs	r3, r2
 80072f2:	61fb      	str	r3, [r7, #28]
 80072f4:	e023      	b.n	800733e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	d102      	bne.n	800730a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2200      	movs	r2, #0
 8007308:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007316:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800731c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	7b1b      	ldrb	r3, [r3, #12]
 8007322:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007324:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800732c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800732e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007334:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800733a:	4313      	orrs	r3, r2
 800733c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	22ca      	movs	r2, #202	; 0xca
 8007350:	625a      	str	r2, [r3, #36]	; 0x24
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2253      	movs	r2, #83	; 0x53
 8007358:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007362:	d13f      	bne.n	80073e4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007372:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007382:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007384:	f7fb fde2 	bl	8002f4c <HAL_GetTick>
 8007388:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800738a:	e013      	b.n	80073b4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800738c:	f7fb fdde 	bl	8002f4c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800739a:	d90b      	bls.n	80073b4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	22ff      	movs	r2, #255	; 0xff
 80073a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2203      	movs	r2, #3
 80073a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e061      	b.n	8007478 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0e4      	beq.n	800738c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073e0:	609a      	str	r2, [r3, #8]
 80073e2:	e03e      	b.n	8007462 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80073f2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007402:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007404:	f7fb fda2 	bl	8002f4c <HAL_GetTick>
 8007408:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800740a:	e013      	b.n	8007434 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800740c:	f7fb fd9e 	bl	8002f4c <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800741a:	d90b      	bls.n	8007434 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	22ff      	movs	r2, #255	; 0xff
 8007422:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2203      	movs	r2, #3
 8007428:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e021      	b.n	8007478 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d0e4      	beq.n	800740c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69fa      	ldr	r2, [r7, #28]
 8007448:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007460:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	22ff      	movs	r2, #255	; 0xff
 8007468:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3724      	adds	r7, #36	; 0x24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd90      	pop	{r4, r7, pc}

08007480 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800749a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800749c:	f7fb fd56 	bl	8002f4c <HAL_GetTick>
 80074a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80074a2:	e009      	b.n	80074b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074a4:	f7fb fd52 	bl	8002f4c <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b2:	d901      	bls.n	80074b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e007      	b.n	80074c8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0ee      	beq.n	80074a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d119      	bne.n	800751e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f04f 32ff 	mov.w	r2, #4294967295
 80074f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074f4:	f7fb fd2a 	bl	8002f4c <HAL_GetTick>
 80074f8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074fa:	e009      	b.n	8007510 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074fc:	f7fb fd26 	bl	8002f4c <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800750a:	d901      	bls.n	8007510 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e007      	b.n	8007520 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0ee      	beq.n	80074fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007536:	e005      	b.n	8007544 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3301      	adds	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	3b0a      	subs	r3, #10
 8007542:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	2b09      	cmp	r3, #9
 8007548:	d8f6      	bhi.n	8007538 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	b2da      	uxtb	r2, r3
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	4313      	orrs	r3, r2
 8007556:	b2db      	uxtb	r3, r3
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	7f1b      	ldrb	r3, [r3, #28]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_RTCEx_SetTimeStamp+0x1c>
 800757c:	2302      	movs	r3, #2
 800757e:	e03e      	b.n	80075fe <HAL_RTCEx_SetTimeStamp+0x9a>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2201      	movs	r2, #1
 8007584:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2202      	movs	r2, #2
 800758a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	4b1e      	ldr	r3, [pc, #120]	; (800760c <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007594:	4013      	ands	r3, r2
 8007596:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	22ca      	movs	r2, #202	; 0xca
 80075a6:	625a      	str	r2, [r3, #36]	; 0x24
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2253      	movs	r2, #83	; 0x53
 80075ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0206 	bic.w	r2, r2, #6
 80075be:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	22ff      	movs	r2, #255	; 0xff
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	fffff7f7 	.word	0xfffff7f7

08007610 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e149      	b.n	80078c2 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7fb fa62 	bl	8002b0c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f94f 	bl	80078f4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d007      	beq.n	800766e <HAL_SAI_Init+0x5e>
 800765e:	2b01      	cmp	r3, #1
 8007660:	d302      	bcc.n	8007668 <HAL_SAI_Init+0x58>
 8007662:	2b02      	cmp	r3, #2
 8007664:	d006      	beq.n	8007674 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007666:	e008      	b.n	800767a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	61fb      	str	r3, [r7, #28]
      break;
 800766c:	e005      	b.n	800767a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800766e:	2310      	movs	r3, #16
 8007670:	61fb      	str	r3, [r7, #28]
      break;
 8007672:	e002      	b.n	800767a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007674:	2320      	movs	r3, #32
 8007676:	61fb      	str	r3, [r7, #28]
      break;
 8007678:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b03      	cmp	r3, #3
 8007680:	d81d      	bhi.n	80076be <HAL_SAI_Init+0xae>
 8007682:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <HAL_SAI_Init+0x78>)
 8007684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007688:	08007699 	.word	0x08007699
 800768c:	0800769f 	.word	0x0800769f
 8007690:	080076a7 	.word	0x080076a7
 8007694:	080076af 	.word	0x080076af
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]
      }
      break;
 800769c:	e010      	b.n	80076c0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800769e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a2:	617b      	str	r3, [r7, #20]
      }
      break;
 80076a4:	e00c      	b.n	80076c0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80076a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076aa:	617b      	str	r3, [r7, #20]
      }
      break;
 80076ac:	e008      	b.n	80076c0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80076ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076b2:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f043 0301 	orr.w	r3, r3, #1
 80076ba:	61fb      	str	r3, [r7, #28]
      }
      break;
 80076bc:	e000      	b.n	80076c0 <HAL_SAI_Init+0xb0>
  default:
    break;
 80076be:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a81      	ldr	r2, [pc, #516]	; (80078cc <HAL_SAI_Init+0x2bc>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d004      	beq.n	80076d4 <HAL_SAI_Init+0xc4>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a80      	ldr	r2, [pc, #512]	; (80078d0 <HAL_SAI_Init+0x2c0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d103      	bne.n	80076dc <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 80076d4:	4a7f      	ldr	r2, [pc, #508]	; (80078d4 <HAL_SAI_Init+0x2c4>)
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	e002      	b.n	80076e2 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80076dc:	4a7e      	ldr	r2, [pc, #504]	; (80078d8 <HAL_SAI_Init+0x2c8>)
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d043      	beq.n	8007772 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a76      	ldr	r2, [pc, #472]	; (80078cc <HAL_SAI_Init+0x2bc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d004      	beq.n	8007702 <HAL_SAI_Init+0xf2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a74      	ldr	r2, [pc, #464]	; (80078d0 <HAL_SAI_Init+0x2c0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d104      	bne.n	800770c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007702:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007706:	f7ff fa8d 	bl	8006c24 <HAL_RCCEx_GetPeriphCLKFreq>
 800770a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a72      	ldr	r2, [pc, #456]	; (80078dc <HAL_SAI_Init+0x2cc>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d004      	beq.n	8007720 <HAL_SAI_Init+0x110>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a71      	ldr	r2, [pc, #452]	; (80078e0 <HAL_SAI_Init+0x2d0>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d104      	bne.n	800772a <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007720:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007724:	f7ff fa7e 	bl	8006c24 <HAL_RCCEx_GetPeriphCLKFreq>
 8007728:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	4613      	mov	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	461a      	mov	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	025b      	lsls	r3, r3, #9
 800773c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007740:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4a67      	ldr	r2, [pc, #412]	; (80078e4 <HAL_SAI_Init+0x2d4>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	08da      	lsrs	r2, r3, #3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8007750:	68f9      	ldr	r1, [r7, #12]
 8007752:	4b64      	ldr	r3, [pc, #400]	; (80078e4 <HAL_SAI_Init+0x2d4>)
 8007754:	fba3 2301 	umull	r2, r3, r3, r1
 8007758:	08da      	lsrs	r2, r3, #3
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	1aca      	subs	r2, r1, r3
 8007764:	2a08      	cmp	r2, #8
 8007766:	d904      	bls.n	8007772 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_SAI_Init+0x172>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2b02      	cmp	r3, #2
 8007780:	d109      	bne.n	8007796 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_SAI_Init+0x17e>
 800778a:	2300      	movs	r3, #0
 800778c:	e001      	b.n	8007792 <HAL_SAI_Init+0x182>
 800778e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007792:	61bb      	str	r3, [r7, #24]
 8007794:	e008      	b.n	80077a8 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d102      	bne.n	80077a4 <HAL_SAI_Init+0x194>
 800779e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a2:	e000      	b.n	80077a6 <HAL_SAI_Init+0x196>
 80077a4:	2300      	movs	r3, #0
 80077a6:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6819      	ldr	r1, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4b4d      	ldr	r3, [pc, #308]	; (80078e8 <HAL_SAI_Init+0x2d8>)
 80077b4:	400b      	ands	r3, r1
 80077b6:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6819      	ldr	r1, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077cc:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	431a      	orrs	r2, r3
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80077e0:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077ec:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	051b      	lsls	r3, r3, #20
 80077f4:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6859      	ldr	r1, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	4b38      	ldr	r3, [pc, #224]	; (80078ec <HAL_SAI_Init+0x2dc>)
 800780a:	400b      	ands	r3, r1
 800780c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6859      	ldr	r1, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	699a      	ldr	r2, [r3, #24]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6899      	ldr	r1, [r3, #8]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	4b2e      	ldr	r3, [pc, #184]	; (80078f0 <HAL_SAI_Init+0x2e0>)
 8007838:	400b      	ands	r3, r1
 800783a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6899      	ldr	r1, [r3, #8]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800784c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007852:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007858:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785e:	3b01      	subs	r3, #1
 8007860:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8007862:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68d9      	ldr	r1, [r3, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	f24f 0320 	movw	r3, #61472	; 0xf020
 800787a:	400b      	ands	r3, r1
 800787c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68d9      	ldr	r1, [r3, #12]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800788c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007892:	041b      	lsls	r3, r3, #16
 8007894:	431a      	orrs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789a:	3b01      	subs	r3, #1
 800789c:	021b      	lsls	r3, r3, #8
 800789e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3720      	adds	r7, #32
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40015804 	.word	0x40015804
 80078d0:	40015824 	.word	0x40015824
 80078d4:	40015800 	.word	0x40015800
 80078d8:	40015c00 	.word	0x40015c00
 80078dc:	40015c04 	.word	0x40015c04
 80078e0:	40015c24 	.word	0x40015c24
 80078e4:	cccccccd 	.word	0xcccccccd
 80078e8:	ff05c010 	.word	0xff05c010
 80078ec:	ffff1ff0 	.word	0xffff1ff0
 80078f0:	fff88000 	.word	0xfff88000

080078f4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80078f4:	b490      	push	{r4, r7}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80078fc:	4b16      	ldr	r3, [pc, #88]	; (8007958 <SAI_Disable+0x64>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a16      	ldr	r2, [pc, #88]	; (800795c <SAI_Disable+0x68>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	0b1b      	lsrs	r3, r3, #12
 8007908:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800791c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800791e:	4623      	mov	r3, r4
 8007920:	1e5c      	subs	r4, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800792c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	73fb      	strb	r3, [r7, #15]
      break;
 800793a:	e006      	b.n	800794a <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e9      	bne.n	800791e <SAI_Disable+0x2a>

  return status;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bc90      	pop	{r4, r7}
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	20000018 	.word	0x20000018
 800795c:	95cbec1b 	.word	0x95cbec1b

08007960 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e022      	b.n	80079b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d105      	bne.n	800798a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7fa fd31 	bl	80023ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2203      	movs	r2, #3
 800798e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f814 	bl	80079c0 <HAL_SD_InitCard>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e00a      	b.n	80079b8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80079c0:	b5b0      	push	{r4, r5, r7, lr}
 80079c2:	b08e      	sub	sp, #56	; 0x38
 80079c4:	af04      	add	r7, sp, #16
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80079d4:	2300      	movs	r3, #0
 80079d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80079d8:	2300      	movs	r3, #0
 80079da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80079dc:	2376      	movs	r3, #118	; 0x76
 80079de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681d      	ldr	r5, [r3, #0]
 80079e4:	466c      	mov	r4, sp
 80079e6:	f107 0314 	add.w	r3, r7, #20
 80079ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079f2:	f107 0308 	add.w	r3, r7, #8
 80079f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079f8:	4628      	mov	r0, r5
 80079fa:	f002 ff51 	bl	800a8a0 <SDMMC_Init>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e03b      	b.n	8007a88 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a1e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f002 ff74 	bl	800a912 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a38:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fde6 	bl	800860c <SD_PowerON>
 8007a40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e013      	b.n	8007a88 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fd05 	bl	8008470 <SD_InitCard>
 8007a66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3728      	adds	r7, #40	; 0x28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bdb0      	pop	{r4, r5, r7, pc}

08007a90 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08c      	sub	sp, #48	; 0x30
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d107      	bne.n	8007ab8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e0cc      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	f040 80c5 	bne.w	8007c50 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	441a      	add	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d907      	bls.n	8007aea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e0b3      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2203      	movs	r2, #3
 8007aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2200      	movs	r2, #0
 8007af8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007b08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	4a53      	ldr	r2, [pc, #332]	; (8007c5c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	4a52      	ldr	r2, [pc, #328]	; (8007c60 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8007b18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	2200      	movs	r2, #0
 8007b20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3380      	adds	r3, #128	; 0x80
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	025b      	lsls	r3, r3, #9
 8007b34:	089b      	lsrs	r3, r3, #2
 8007b36:	f7fc fcb7 	bl	80044a8 <HAL_DMA_Start_IT>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d017      	beq.n	8007b70 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007b4e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a43      	ldr	r2, [pc, #268]	; (8007c64 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e070      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0208 	orr.w	r2, r2, #8
 8007b7e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d002      	beq.n	8007b8e <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	025b      	lsls	r3, r3, #9
 8007b8c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b96:	4618      	mov	r0, r3
 8007b98:	f002 ff4e 	bl	800aa38 <SDMMC_CmdBlockLength>
 8007b9c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00f      	beq.n	8007bc4 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a2e      	ldr	r2, [pc, #184]	; (8007c64 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007baa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e046      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	025b      	lsls	r3, r3, #9
 8007bce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007bd0:	2390      	movs	r3, #144	; 0x90
 8007bd2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f107 0210 	add.w	r2, r7, #16
 8007be8:	4611      	mov	r1, r2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f002 fef8 	bl	800a9e0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d90a      	bls.n	8007c0c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2282      	movs	r2, #130	; 0x82
 8007bfa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c02:	4618      	mov	r0, r3
 8007c04:	f002 ff5c 	bl	800aac0 <SDMMC_CmdReadMultiBlock>
 8007c08:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007c0a:	e009      	b.n	8007c20 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2281      	movs	r2, #129	; 0x81
 8007c10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f002 ff2f 	bl	800aa7c <SDMMC_CmdReadSingleBlock>
 8007c1e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d012      	beq.n	8007c4c <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a0e      	ldr	r2, [pc, #56]	; (8007c64 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c34:	431a      	orrs	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e002      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e000      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8007c50:	2302      	movs	r3, #2
  }
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3730      	adds	r7, #48	; 0x30
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	0800835b 	.word	0x0800835b
 8007c60:	080083cd 	.word	0x080083cd
 8007c64:	004005ff 	.word	0x004005ff

08007c68 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08c      	sub	sp, #48	; 0x30
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d107      	bne.n	8007c90 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e0cf      	b.n	8007e30 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	f040 80c8 	bne.w	8007e2e <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	441a      	add	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d907      	bls.n	8007cc2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e0b6      	b.n	8007e30 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2203      	movs	r2, #3
 8007cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f042 021a 	orr.w	r2, r2, #26
 8007ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce6:	4a54      	ldr	r2, [pc, #336]	; (8007e38 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cee:	4a53      	ldr	r2, [pc, #332]	; (8007e3c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8007cf0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d002      	beq.n	8007d08 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	025b      	lsls	r3, r3, #9
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d10:	4618      	mov	r0, r3
 8007d12:	f002 fe91 	bl	800aa38 <SDMMC_CmdBlockLength>
 8007d16:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00f      	beq.n	8007d3e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a47      	ldr	r2, [pc, #284]	; (8007e40 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007d24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e078      	b.n	8007e30 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d90a      	bls.n	8007d5a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	22a0      	movs	r2, #160	; 0xa0
 8007d48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d50:	4618      	mov	r0, r3
 8007d52:	f002 fef9 	bl	800ab48 <SDMMC_CmdWriteMultiBlock>
 8007d56:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007d58:	e009      	b.n	8007d6e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2290      	movs	r2, #144	; 0x90
 8007d5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d66:	4618      	mov	r0, r3
 8007d68:	f002 fecc 	bl	800ab04 <SDMMC_CmdWriteSingleBlock>
 8007d6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d012      	beq.n	8007d9a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a31      	ldr	r2, [pc, #196]	; (8007e40 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	431a      	orrs	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e04a      	b.n	8007e30 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0208 	orr.w	r2, r2, #8
 8007da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007dae:	68b9      	ldr	r1, [r7, #8]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3380      	adds	r3, #128	; 0x80
 8007db6:	461a      	mov	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	025b      	lsls	r3, r3, #9
 8007dbc:	089b      	lsrs	r3, r3, #2
 8007dbe:	f7fc fb73 	bl	80044a8 <HAL_DMA_Start_IT>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d01a      	beq.n	8007dfe <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 021a 	bic.w	r2, r2, #26
 8007dd6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a18      	ldr	r2, [pc, #96]	; (8007e40 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007dde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e018      	b.n	8007e30 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007e02:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	025b      	lsls	r3, r3, #9
 8007e08:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007e0a:	2390      	movs	r3, #144	; 0x90
 8007e0c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e16:	2301      	movs	r3, #1
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f107 0210 	add.w	r2, r7, #16
 8007e22:	4611      	mov	r1, r2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f002 fddb 	bl	800a9e0 <SDMMC_ConfigData>

      return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	e000      	b.n	8007e30 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8007e2e:	2302      	movs	r3, #2
  }
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3730      	adds	r7, #48	; 0x30
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	08008331 	.word	0x08008331
 8007e3c:	080083cd 	.word	0x080083cd
 8007e40:	004005ff 	.word	0x004005ff

08007e44 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e66:	0f9b      	lsrs	r3, r3, #30
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e72:	0e9b      	lsrs	r3, r3, #26
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	f003 030f 	and.w	r3, r3, #15
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e84:	0e1b      	lsrs	r3, r3, #24
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e96:	0c1b      	lsrs	r3, r3, #16
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea2:	0a1b      	lsrs	r3, r3, #8
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb8:	0d1b      	lsrs	r3, r3, #20
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ec4:	0c1b      	lsrs	r3, r3, #16
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	f003 030f 	and.w	r3, r3, #15
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ed6:	0bdb      	lsrs	r3, r3, #15
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ee8:	0b9b      	lsrs	r3, r3, #14
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007efa:	0b5b      	lsrs	r3, r3, #13
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f0c:	0b1b      	lsrs	r3, r3, #12
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d163      	bne.n	8007ff0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f2c:	009a      	lsls	r2, r3, #2
 8007f2e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f32:	4013      	ands	r3, r2
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007f38:	0f92      	lsrs	r2, r2, #30
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f44:	0edb      	lsrs	r3, r3, #27
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	f003 0307 	and.w	r3, r3, #7
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f56:	0e1b      	lsrs	r3, r3, #24
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f68:	0d5b      	lsrs	r3, r3, #21
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f003 0307 	and.w	r3, r3, #7
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f7a:	0c9b      	lsrs	r3, r3, #18
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f003 0307 	and.w	r3, r3, #7
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8c:	0bdb      	lsrs	r3, r3, #15
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	f003 0307 	and.w	r3, r3, #7
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	7e1b      	ldrb	r3, [r3, #24]
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	3302      	adds	r3, #2
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007fba:	fb02 f203 	mul.w	r2, r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	7a1b      	ldrb	r3, [r3, #8]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 030f 	and.w	r3, r3, #15
 8007fcc:	2201      	movs	r2, #1
 8007fce:	409a      	lsls	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007fdc:	0a52      	lsrs	r2, r2, #9
 8007fde:	fb02 f203 	mul.w	r2, r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fec:	661a      	str	r2, [r3, #96]	; 0x60
 8007fee:	e031      	b.n	8008054 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d11d      	bne.n	8008034 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ffc:	041b      	lsls	r3, r3, #16
 8007ffe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008006:	0c1b      	lsrs	r3, r3, #16
 8008008:	431a      	orrs	r2, r3
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	3301      	adds	r3, #1
 8008014:	029a      	lsls	r2, r3, #10
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008028:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	661a      	str	r2, [r3, #96]	; 0x60
 8008032:	e00f      	b.n	8008054 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a58      	ldr	r2, [pc, #352]	; (800819c <HAL_SD_GetCardCSD+0x344>)
 800803a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e09d      	b.n	8008190 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008058:	0b9b      	lsrs	r3, r3, #14
 800805a:	b2db      	uxtb	r3, r3
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	b2da      	uxtb	r2, r3
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800806a:	09db      	lsrs	r3, r3, #7
 800806c:	b2db      	uxtb	r3, r3
 800806e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008072:	b2da      	uxtb	r2, r3
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807c:	b2db      	uxtb	r3, r3
 800807e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008082:	b2da      	uxtb	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808c:	0fdb      	lsrs	r3, r3, #31
 800808e:	b2da      	uxtb	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008098:	0f5b      	lsrs	r3, r3, #29
 800809a:	b2db      	uxtb	r3, r3
 800809c:	f003 0303 	and.w	r3, r3, #3
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080aa:	0e9b      	lsrs	r3, r3, #26
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080bc:	0d9b      	lsrs	r3, r3, #22
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ce:	0d5b      	lsrs	r3, r3, #21
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ea:	0c1b      	lsrs	r3, r3, #16
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fe:	0bdb      	lsrs	r3, r3, #15
 8008100:	b2db      	uxtb	r3, r3
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	b2da      	uxtb	r2, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008112:	0b9b      	lsrs	r3, r3, #14
 8008114:	b2db      	uxtb	r3, r3
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	b2da      	uxtb	r2, r3
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008126:	0b5b      	lsrs	r3, r3, #13
 8008128:	b2db      	uxtb	r3, r3
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	b2da      	uxtb	r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813a:	0b1b      	lsrs	r3, r3, #12
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	b2da      	uxtb	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814e:	0a9b      	lsrs	r3, r3, #10
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	b2da      	uxtb	r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f003 0303 	and.w	r3, r3, #3
 800816a:	b2da      	uxtb	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008176:	085b      	lsrs	r3, r3, #1
 8008178:	b2db      	uxtb	r3, r3
 800817a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800817e:	b2da      	uxtb	r2, r3
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	004005ff 	.word	0x004005ff

080081a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80081f8:	b5b0      	push	{r4, r5, r7, lr}
 80081fa:	b08e      	sub	sp, #56	; 0x38
 80081fc:	af04      	add	r7, sp, #16
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2203      	movs	r2, #3
 8008206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820e:	2b03      	cmp	r3, #3
 8008210:	d02e      	beq.n	8008270 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008218:	d106      	bne.n	8008228 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	639a      	str	r2, [r3, #56]	; 0x38
 8008226:	e029      	b.n	800827c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800822e:	d10a      	bne.n	8008246 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 faa1 	bl	8008778 <SD_WideBus_Enable>
 8008236:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	639a      	str	r2, [r3, #56]	; 0x38
 8008244:	e01a      	b.n	800827c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fade 	bl	800880e <SD_WideBus_Disable>
 8008252:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	639a      	str	r2, [r3, #56]	; 0x38
 8008260:	e00c      	b.n	800827c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	639a      	str	r2, [r3, #56]	; 0x38
 800826e:	e005      	b.n	800827c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008274:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	2b00      	cmp	r3, #0
 8008282:	d009      	beq.n	8008298 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a18      	ldr	r2, [pc, #96]	; (80082ec <HAL_SD_ConfigWideBusOperation+0xf4>)
 800828a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e024      	b.n	80082e2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681d      	ldr	r5, [r3, #0]
 80082be:	466c      	mov	r4, sp
 80082c0:	f107 0318 	add.w	r3, r7, #24
 80082c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082cc:	f107 030c 	add.w	r3, r7, #12
 80082d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082d2:	4628      	mov	r0, r5
 80082d4:	f002 fae4 	bl	800a8a0 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3728      	adds	r7, #40	; 0x28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bdb0      	pop	{r4, r5, r7, pc}
 80082ea:	bf00      	nop
 80082ec:	004005ff 	.word	0x004005ff

080082f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80082fc:	f107 030c 	add.w	r3, r7, #12
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa10 	bl	8008728 <SD_SendStatus>
 8008308:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	0a5b      	lsrs	r3, r3, #9
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008326:	693b      	ldr	r3, [r7, #16]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800834c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800834e:	bf00      	nop
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836c:	2b82      	cmp	r3, #130	; 0x82
 800836e:	d111      	bne.n	8008394 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f002 fc09 	bl	800ab8c <SDMMC_CmdStopTransfer>
 800837a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	431a      	orrs	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7ff fd58 	bl	8007e44 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0208 	bic.w	r2, r2, #8
 80083a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80083ac:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f003 f84f 	bl	800b460 <HAL_SD_RxCpltCallback>
#endif
}
 80083c2:	bf00      	nop
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7fc f8c4 	bl	8004568 <HAL_DMA_GetError>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d03e      	beq.n	8008464 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d002      	beq.n	8008402 <SD_DMAError+0x36>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d12d      	bne.n	800845e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a19      	ldr	r2, [pc, #100]	; (800846c <SD_DMAError+0xa0>)
 8008408:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008418:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008426:	6978      	ldr	r0, [r7, #20]
 8008428:	f7ff ff62 	bl	80082f0 <HAL_SD_GetCardState>
 800842c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b06      	cmp	r3, #6
 8008432:	d002      	beq.n	800843a <SD_DMAError+0x6e>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b05      	cmp	r3, #5
 8008438:	d10a      	bne.n	8008450 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f002 fba4 	bl	800ab8c <SDMMC_CmdStopTransfer>
 8008444:	4602      	mov	r2, r0
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	431a      	orrs	r2, r3
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2200      	movs	r2, #0
 800845c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800845e:	6978      	ldr	r0, [r7, #20]
 8008460:	f7ff fcf0 	bl	8007e44 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008464:	bf00      	nop
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	004005ff 	.word	0x004005ff

08008470 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008470:	b5b0      	push	{r4, r5, r7, lr}
 8008472:	b094      	sub	sp, #80	; 0x50
 8008474:	af04      	add	r7, sp, #16
 8008476:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008478:	2301      	movs	r3, #1
 800847a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f002 fa55 	bl	800a930 <SDMMC_GetPowerState>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d102      	bne.n	8008492 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800848c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008490:	e0b7      	b.n	8008602 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008496:	2b03      	cmp	r3, #3
 8008498:	d02f      	beq.n	80084fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4618      	mov	r0, r3
 80084a0:	f002 fc7f 	bl	800ada2 <SDMMC_CmdSendCID>
 80084a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80084ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ae:	e0a8      	b.n	8008602 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f002 fa7f 	bl	800a9ba <SDMMC_GetResponse>
 80084bc:	4602      	mov	r2, r0
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2104      	movs	r1, #4
 80084c8:	4618      	mov	r0, r3
 80084ca:	f002 fa76 	bl	800a9ba <SDMMC_GetResponse>
 80084ce:	4602      	mov	r2, r0
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2108      	movs	r1, #8
 80084da:	4618      	mov	r0, r3
 80084dc:	f002 fa6d 	bl	800a9ba <SDMMC_GetResponse>
 80084e0:	4602      	mov	r2, r0
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	210c      	movs	r1, #12
 80084ec:	4618      	mov	r0, r3
 80084ee:	f002 fa64 	bl	800a9ba <SDMMC_GetResponse>
 80084f2:	4602      	mov	r2, r0
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d00d      	beq.n	800851e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f107 020e 	add.w	r2, r7, #14
 800850a:	4611      	mov	r1, r2
 800850c:	4618      	mov	r0, r3
 800850e:	f002 fc85 	bl	800ae1c <SDMMC_CmdSetRelAdd>
 8008512:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <SD_InitCard+0xae>
    {
      return errorstate;
 800851a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851c:	e071      	b.n	8008602 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008522:	2b03      	cmp	r3, #3
 8008524:	d036      	beq.n	8008594 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008526:	89fb      	ldrh	r3, [r7, #14]
 8008528:	461a      	mov	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008536:	041b      	lsls	r3, r3, #16
 8008538:	4619      	mov	r1, r3
 800853a:	4610      	mov	r0, r2
 800853c:	f002 fc4f 	bl	800adde <SDMMC_CmdSendCSD>
 8008540:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854a:	e05a      	b.n	8008602 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2100      	movs	r1, #0
 8008552:	4618      	mov	r0, r3
 8008554:	f002 fa31 	bl	800a9ba <SDMMC_GetResponse>
 8008558:	4602      	mov	r2, r0
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2104      	movs	r1, #4
 8008564:	4618      	mov	r0, r3
 8008566:	f002 fa28 	bl	800a9ba <SDMMC_GetResponse>
 800856a:	4602      	mov	r2, r0
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2108      	movs	r1, #8
 8008576:	4618      	mov	r0, r3
 8008578:	f002 fa1f 	bl	800a9ba <SDMMC_GetResponse>
 800857c:	4602      	mov	r2, r0
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	210c      	movs	r1, #12
 8008588:	4618      	mov	r0, r3
 800858a:	f002 fa16 	bl	800a9ba <SDMMC_GetResponse>
 800858e:	4602      	mov	r2, r0
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2104      	movs	r1, #4
 800859a:	4618      	mov	r0, r3
 800859c:	f002 fa0d 	bl	800a9ba <SDMMC_GetResponse>
 80085a0:	4603      	mov	r3, r0
 80085a2:	0d1a      	lsrs	r2, r3, #20
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80085a8:	f107 0310 	add.w	r3, r7, #16
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff fc52 	bl	8007e58 <HAL_SD_GetCardCSD>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085be:	e020      	b.n	8008602 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6819      	ldr	r1, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c8:	041b      	lsls	r3, r3, #16
 80085ca:	f04f 0400 	mov.w	r4, #0
 80085ce:	461a      	mov	r2, r3
 80085d0:	4623      	mov	r3, r4
 80085d2:	4608      	mov	r0, r1
 80085d4:	f002 fafc 	bl	800abd0 <SDMMC_CmdSelDesel>
 80085d8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80085da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <SD_InitCard+0x174>
  {
    return errorstate;
 80085e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e2:	e00e      	b.n	8008602 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681d      	ldr	r5, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	466c      	mov	r4, sp
 80085ec:	f103 0210 	add.w	r2, r3, #16
 80085f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80085f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085f6:	3304      	adds	r3, #4
 80085f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085fa:	4628      	mov	r0, r5
 80085fc:	f002 f950 	bl	800a8a0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3740      	adds	r7, #64	; 0x40
 8008606:	46bd      	mov	sp, r7
 8008608:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800860c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	617b      	str	r3, [r7, #20]
 800861c:	2300      	movs	r3, #0
 800861e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4618      	mov	r0, r3
 8008626:	f002 faf6 	bl	800ac16 <SDMMC_CmdGoIdleState>
 800862a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	e072      	b.n	800871c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f002 fb09 	bl	800ac52 <SDMMC_CmdOperCond>
 8008640:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00d      	beq.n	8008664 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4618      	mov	r0, r3
 8008654:	f002 fadf 	bl	800ac16 <SDMMC_CmdGoIdleState>
 8008658:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d004      	beq.n	800866a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	e05b      	b.n	800871c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800866e:	2b01      	cmp	r3, #1
 8008670:	d137      	bne.n	80086e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2100      	movs	r1, #0
 8008678:	4618      	mov	r0, r3
 800867a:	f002 fb09 	bl	800ac90 <SDMMC_CmdAppCommand>
 800867e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d02d      	beq.n	80086e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008686:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800868a:	e047      	b.n	800871c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2100      	movs	r1, #0
 8008692:	4618      	mov	r0, r3
 8008694:	f002 fafc 	bl	800ac90 <SDMMC_CmdAppCommand>
 8008698:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	e03b      	b.n	800871c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	491e      	ldr	r1, [pc, #120]	; (8008724 <SD_PowerON+0x118>)
 80086aa:	4618      	mov	r0, r3
 80086ac:	f002 fb12 	bl	800acd4 <SDMMC_CmdAppOperCommand>
 80086b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086bc:	e02e      	b.n	800871c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2100      	movs	r1, #0
 80086c4:	4618      	mov	r0, r3
 80086c6:	f002 f978 	bl	800a9ba <SDMMC_GetResponse>
 80086ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	0fdb      	lsrs	r3, r3, #31
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d101      	bne.n	80086d8 <SD_PowerON+0xcc>
 80086d4:	2301      	movs	r3, #1
 80086d6:	e000      	b.n	80086da <SD_PowerON+0xce>
 80086d8:	2300      	movs	r3, #0
 80086da:	613b      	str	r3, [r7, #16]

    count++;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	3301      	adds	r3, #1
 80086e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d802      	bhi.n	80086f2 <SD_PowerON+0xe6>
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0cc      	beq.n	800868c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d902      	bls.n	8008702 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80086fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008700:	e00c      	b.n	800871c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	645a      	str	r2, [r3, #68]	; 0x44
 8008712:	e002      	b.n	800871a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3718      	adds	r7, #24
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	c1100000 	.word	0xc1100000

08008728 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d102      	bne.n	800873e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008738:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800873c:	e018      	b.n	8008770 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008746:	041b      	lsls	r3, r3, #16
 8008748:	4619      	mov	r1, r3
 800874a:	4610      	mov	r0, r2
 800874c:	f002 fb87 	bl	800ae5e <SDMMC_CmdSendStatus>
 8008750:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	e009      	b.n	8008770 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2100      	movs	r1, #0
 8008762:	4618      	mov	r0, r3
 8008764:	f002 f929 	bl	800a9ba <SDMMC_GetResponse>
 8008768:	4602      	mov	r2, r0
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	2300      	movs	r3, #0
 8008786:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2100      	movs	r1, #0
 800878e:	4618      	mov	r0, r3
 8008790:	f002 f913 	bl	800a9ba <SDMMC_GetResponse>
 8008794:	4603      	mov	r3, r0
 8008796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800879a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800879e:	d102      	bne.n	80087a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087a4:	e02f      	b.n	8008806 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087a6:	f107 030c 	add.w	r3, r7, #12
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f879 	bl	80088a4 <SD_FindSCR>
 80087b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	e023      	b.n	8008806 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01c      	beq.n	8008802 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d0:	041b      	lsls	r3, r3, #16
 80087d2:	4619      	mov	r1, r3
 80087d4:	4610      	mov	r0, r2
 80087d6:	f002 fa5b 	bl	800ac90 <SDMMC_CmdAppCommand>
 80087da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	e00f      	b.n	8008806 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2102      	movs	r1, #2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f002 fa95 	bl	800ad1c <SDMMC_CmdBusWidth>
 80087f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	e003      	b.n	8008806 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80087fe:	2300      	movs	r3, #0
 8008800:	e001      	b.n	8008806 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008802:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b086      	sub	sp, #24
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	2300      	movs	r3, #0
 800881c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2100      	movs	r1, #0
 8008824:	4618      	mov	r0, r3
 8008826:	f002 f8c8 	bl	800a9ba <SDMMC_GetResponse>
 800882a:	4603      	mov	r3, r0
 800882c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008834:	d102      	bne.n	800883c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008836:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800883a:	e02f      	b.n	800889c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800883c:	f107 030c 	add.w	r3, r7, #12
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f82e 	bl	80088a4 <SD_FindSCR>
 8008848:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	e023      	b.n	800889c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d01c      	beq.n	8008898 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008866:	041b      	lsls	r3, r3, #16
 8008868:	4619      	mov	r1, r3
 800886a:	4610      	mov	r0, r2
 800886c:	f002 fa10 	bl	800ac90 <SDMMC_CmdAppCommand>
 8008870:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	e00f      	b.n	800889c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f002 fa4a 	bl	800ad1c <SDMMC_CmdBusWidth>
 8008888:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	e003      	b.n	800889c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008894:	2300      	movs	r3, #0
 8008896:	e001      	b.n	800889c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008898:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80088a4:	b590      	push	{r4, r7, lr}
 80088a6:	b08f      	sub	sp, #60	; 0x3c
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088ae:	f7fa fb4d 	bl	8002f4c <HAL_GetTick>
 80088b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80088b8:	2300      	movs	r3, #0
 80088ba:	60bb      	str	r3, [r7, #8]
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2108      	movs	r1, #8
 80088ca:	4618      	mov	r0, r3
 80088cc:	f002 f8b4 	bl	800aa38 <SDMMC_CmdBlockLength>
 80088d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80088d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <SD_FindSCR+0x38>
  {
    return errorstate;
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	e0a9      	b.n	8008a30 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e4:	041b      	lsls	r3, r3, #16
 80088e6:	4619      	mov	r1, r3
 80088e8:	4610      	mov	r0, r2
 80088ea:	f002 f9d1 	bl	800ac90 <SDMMC_CmdAppCommand>
 80088ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80088f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <SD_FindSCR+0x56>
  {
    return errorstate;
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	e09a      	b.n	8008a30 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088fa:	f04f 33ff 	mov.w	r3, #4294967295
 80088fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008900:	2308      	movs	r3, #8
 8008902:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008904:	2330      	movs	r3, #48	; 0x30
 8008906:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008908:	2302      	movs	r3, #2
 800890a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800890c:	2300      	movs	r3, #0
 800890e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008910:	2301      	movs	r3, #1
 8008912:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f107 0210 	add.w	r2, r7, #16
 800891c:	4611      	mov	r1, r2
 800891e:	4618      	mov	r0, r3
 8008920:	f002 f85e 	bl	800a9e0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4618      	mov	r0, r3
 800892a:	f002 fa19 	bl	800ad60 <SDMMC_CmdSendSCR>
 800892e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d022      	beq.n	800897c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	e07a      	b.n	8008a30 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00e      	beq.n	8008966 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6819      	ldr	r1, [r3, #0]
 800894c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	f107 0208 	add.w	r2, r7, #8
 8008954:	18d4      	adds	r4, r2, r3
 8008956:	4608      	mov	r0, r1
 8008958:	f001 ffce 	bl	800a8f8 <SDMMC_ReadFIFO>
 800895c:	4603      	mov	r3, r0
 800895e:	6023      	str	r3, [r4, #0]
      index++;
 8008960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008962:	3301      	adds	r3, #1
 8008964:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008966:	f7fa faf1 	bl	8002f4c <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008974:	d102      	bne.n	800897c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008976:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800897a:	e059      	b.n	8008a30 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008982:	f240 432a 	movw	r3, #1066	; 0x42a
 8008986:	4013      	ands	r3, r2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0d6      	beq.n	800893a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008992:	f003 0308 	and.w	r3, r3, #8
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2208      	movs	r2, #8
 80089a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089a2:	2308      	movs	r3, #8
 80089a4:	e044      	b.n	8008a30 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ac:	f003 0302 	and.w	r3, r3, #2
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2202      	movs	r2, #2
 80089ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089bc:	2302      	movs	r3, #2
 80089be:	e037      	b.n	8008a30 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c6:	f003 0320 	and.w	r3, r3, #32
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d005      	beq.n	80089da <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2220      	movs	r2, #32
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80089d6:	2320      	movs	r3, #32
 80089d8:	e02a      	b.n	8008a30 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f240 523a 	movw	r2, #1338	; 0x53a
 80089e2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	061a      	lsls	r2, r3, #24
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	0a1b      	lsrs	r3, r3, #8
 80089f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	0e1b      	lsrs	r3, r3, #24
 8008a00:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a04:	601a      	str	r2, [r3, #0]
    scr++;
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	3304      	adds	r3, #4
 8008a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	061a      	lsls	r2, r3, #24
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	021b      	lsls	r3, r3, #8
 8008a14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a18:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	0a1b      	lsrs	r3, r3, #8
 8008a1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a22:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	0e1b      	lsrs	r3, r3, #24
 8008a28:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	373c      	adds	r7, #60	; 0x3c
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd90      	pop	{r4, r7, pc}

08008a38 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e025      	b.n	8008a98 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d106      	bne.n	8008a66 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7fa f849 	bl	8002af8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3304      	adds	r3, #4
 8008a76:	4619      	mov	r1, r3
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f001 fdeb 	bl	800a654 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6818      	ldr	r0, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	f001 fe55 	bl	800a738 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d101      	bne.n	8008abc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e018      	b.n	8008aee <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f001 feb3 	bl	800a838 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d104      	bne.n	8008ae4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2205      	movs	r2, #5
 8008ade:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008ae2:	e003      	b.n	8008aec <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d101      	bne.n	8008b10 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e00e      	b.n	8008b2e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f001 feab 	bl	800a87a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e04c      	b.n	8008be4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7f9 fca6 	bl	80024b0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0203 	bic.w	r2, r2, #3
 8008b7a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	4b19      	ldr	r3, [pc, #100]	; (8008bec <HAL_SPDIFRX_Init+0xb4>)
 8008b88:	4013      	ands	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008b94:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008b9a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008ba0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008ba6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008bac:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008bb2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008bb8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008bbe:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008bc4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	fff88407 	.word	0xfff88407

08008bf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e084      	b.n	8008d0c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d106      	bne.n	8008c22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7f9 fc89 	bl	8002534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2202      	movs	r2, #2
 8008c26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c38:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c42:	d902      	bls.n	8008c4a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008c44:	2300      	movs	r3, #0
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	e002      	b.n	8008c50 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008c58:	d007      	beq.n	8008c6a <HAL_SPI_Init+0x7a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c62:	d002      	beq.n	8008c6a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10b      	bne.n	8008c8a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c7a:	d903      	bls.n	8008c84 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	631a      	str	r2, [r3, #48]	; 0x30
 8008c82:	e002      	b.n	8008c8a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	69db      	ldr	r3, [r3, #28]
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	ea42 0103 	orr.w	r1, r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	0c1b      	lsrs	r3, r3, #16
 8008cca:	f003 0204 	and.w	r2, r3, #4
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	ea42 0103 	orr.w	r1, r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69da      	ldr	r2, [r3, #28]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e01d      	b.n	8008d62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d106      	bne.n	8008d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7f9 fc5c 	bl	80025f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4619      	mov	r1, r3
 8008d52:	4610      	mov	r0, r2
 8008d54:	f000 fb78 	bl	8009448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0201 	orr.w	r2, r2, #1
 8008d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <HAL_TIM_Base_Start_IT+0x50>)
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b06      	cmp	r3, #6
 8008d94:	d00b      	beq.n	8008dae <HAL_TIM_Base_Start_IT+0x42>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d9c:	d007      	beq.n	8008dae <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f042 0201 	orr.w	r2, r2, #1
 8008dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	00010007 	.word	0x00010007

08008dc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e01d      	b.n	8008e0e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d106      	bne.n	8008dec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7f9 fc74 	bl	80026d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	f000 fb22 	bl	8009448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d122      	bne.n	8008e72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d11b      	bne.n	8008e72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f06f 0202 	mvn.w	r2, #2
 8008e42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	f003 0303 	and.w	r3, r3, #3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d003      	beq.n	8008e60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fad7 	bl	800940c <HAL_TIM_IC_CaptureCallback>
 8008e5e:	e005      	b.n	8008e6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fac9 	bl	80093f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fada 	bl	8009420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d122      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f003 0304 	and.w	r3, r3, #4
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	d11b      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f06f 0204 	mvn.w	r2, #4
 8008e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 faad 	bl	800940c <HAL_TIM_IC_CaptureCallback>
 8008eb2:	e005      	b.n	8008ec0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fa9f 	bl	80093f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fab0 	bl	8009420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0308 	and.w	r3, r3, #8
 8008ed0:	2b08      	cmp	r3, #8
 8008ed2:	d122      	bne.n	8008f1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f003 0308 	and.w	r3, r3, #8
 8008ede:	2b08      	cmp	r3, #8
 8008ee0:	d11b      	bne.n	8008f1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f06f 0208 	mvn.w	r2, #8
 8008eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2204      	movs	r2, #4
 8008ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	f003 0303 	and.w	r3, r3, #3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d003      	beq.n	8008f08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa83 	bl	800940c <HAL_TIM_IC_CaptureCallback>
 8008f06:	e005      	b.n	8008f14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fa75 	bl	80093f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa86 	bl	8009420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	d122      	bne.n	8008f6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	f003 0310 	and.w	r3, r3, #16
 8008f32:	2b10      	cmp	r3, #16
 8008f34:	d11b      	bne.n	8008f6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f06f 0210 	mvn.w	r2, #16
 8008f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2208      	movs	r2, #8
 8008f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fa59 	bl	800940c <HAL_TIM_IC_CaptureCallback>
 8008f5a:	e005      	b.n	8008f68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fa4b 	bl	80093f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fa5c 	bl	8009420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d10e      	bne.n	8008f9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d107      	bne.n	8008f9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f06f 0201 	mvn.w	r2, #1
 8008f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7f8 feb1 	bl	8001cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa4:	2b80      	cmp	r3, #128	; 0x80
 8008fa6:	d10e      	bne.n	8008fc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb2:	2b80      	cmp	r3, #128	; 0x80
 8008fb4:	d107      	bne.n	8008fc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 feef 	bl	8009da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fd4:	d10e      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe0:	2b80      	cmp	r3, #128	; 0x80
 8008fe2:	d107      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fee2 	bl	8009db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffe:	2b40      	cmp	r3, #64	; 0x40
 8009000:	d10e      	bne.n	8009020 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900c:	2b40      	cmp	r3, #64	; 0x40
 800900e:	d107      	bne.n	8009020 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fa0a 	bl	8009434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f003 0320 	and.w	r3, r3, #32
 800902a:	2b20      	cmp	r3, #32
 800902c:	d10e      	bne.n	800904c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b20      	cmp	r3, #32
 800903a:	d107      	bne.n	800904c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0220 	mvn.w	r2, #32
 8009044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fea2 	bl	8009d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009066:	2b01      	cmp	r3, #1
 8009068:	d101      	bne.n	800906e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800906a:	2302      	movs	r3, #2
 800906c:	e105      	b.n	800927a <HAL_TIM_PWM_ConfigChannel+0x226>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2202      	movs	r2, #2
 800907a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b14      	cmp	r3, #20
 8009082:	f200 80f0 	bhi.w	8009266 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009086:	a201      	add	r2, pc, #4	; (adr r2, 800908c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908c:	080090e1 	.word	0x080090e1
 8009090:	08009267 	.word	0x08009267
 8009094:	08009267 	.word	0x08009267
 8009098:	08009267 	.word	0x08009267
 800909c:	08009121 	.word	0x08009121
 80090a0:	08009267 	.word	0x08009267
 80090a4:	08009267 	.word	0x08009267
 80090a8:	08009267 	.word	0x08009267
 80090ac:	08009163 	.word	0x08009163
 80090b0:	08009267 	.word	0x08009267
 80090b4:	08009267 	.word	0x08009267
 80090b8:	08009267 	.word	0x08009267
 80090bc:	080091a3 	.word	0x080091a3
 80090c0:	08009267 	.word	0x08009267
 80090c4:	08009267 	.word	0x08009267
 80090c8:	08009267 	.word	0x08009267
 80090cc:	080091e5 	.word	0x080091e5
 80090d0:	08009267 	.word	0x08009267
 80090d4:	08009267 	.word	0x08009267
 80090d8:	08009267 	.word	0x08009267
 80090dc:	08009225 	.word	0x08009225
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68b9      	ldr	r1, [r7, #8]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fa4e 	bl	8009588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699a      	ldr	r2, [r3, #24]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0208 	orr.w	r2, r2, #8
 80090fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	699a      	ldr	r2, [r3, #24]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f022 0204 	bic.w	r2, r2, #4
 800910a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6999      	ldr	r1, [r3, #24]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	691a      	ldr	r2, [r3, #16]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	430a      	orrs	r2, r1
 800911c:	619a      	str	r2, [r3, #24]
      break;
 800911e:	e0a3      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68b9      	ldr	r1, [r7, #8]
 8009126:	4618      	mov	r0, r3
 8009128:	f000 faa0 	bl	800966c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699a      	ldr	r2, [r3, #24]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800913a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	699a      	ldr	r2, [r3, #24]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800914a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6999      	ldr	r1, [r3, #24]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	021a      	lsls	r2, r3, #8
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	430a      	orrs	r2, r1
 800915e:	619a      	str	r2, [r3, #24]
      break;
 8009160:	e082      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68b9      	ldr	r1, [r7, #8]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 faf7 	bl	800975c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69da      	ldr	r2, [r3, #28]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f042 0208 	orr.w	r2, r2, #8
 800917c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69da      	ldr	r2, [r3, #28]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0204 	bic.w	r2, r2, #4
 800918c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69d9      	ldr	r1, [r3, #28]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	691a      	ldr	r2, [r3, #16]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	61da      	str	r2, [r3, #28]
      break;
 80091a0:	e062      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 fb4d 	bl	8009848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69da      	ldr	r2, [r3, #28]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	69da      	ldr	r2, [r3, #28]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69d9      	ldr	r1, [r3, #28]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	021a      	lsls	r2, r3, #8
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	61da      	str	r2, [r3, #28]
      break;
 80091e2:	e041      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68b9      	ldr	r1, [r7, #8]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fb84 	bl	80098f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 0208 	orr.w	r2, r2, #8
 80091fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f022 0204 	bic.w	r2, r2, #4
 800920e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	691a      	ldr	r2, [r3, #16]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	430a      	orrs	r2, r1
 8009220:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009222:	e021      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68b9      	ldr	r1, [r7, #8]
 800922a:	4618      	mov	r0, r3
 800922c:	f000 fbb6 	bl	800999c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800923e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800924e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	021a      	lsls	r2, r3, #8
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009264:	e000      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009266:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop

08009284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009294:	2b01      	cmp	r3, #1
 8009296:	d101      	bne.n	800929c <HAL_TIM_ConfigClockSource+0x18>
 8009298:	2302      	movs	r3, #2
 800929a:	e0a6      	b.n	80093ea <HAL_TIM_ConfigClockSource+0x166>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	4b4f      	ldr	r3, [pc, #316]	; (80093f4 <HAL_TIM_ConfigClockSource+0x170>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b40      	cmp	r3, #64	; 0x40
 80092d2:	d067      	beq.n	80093a4 <HAL_TIM_ConfigClockSource+0x120>
 80092d4:	2b40      	cmp	r3, #64	; 0x40
 80092d6:	d80b      	bhi.n	80092f0 <HAL_TIM_ConfigClockSource+0x6c>
 80092d8:	2b10      	cmp	r3, #16
 80092da:	d073      	beq.n	80093c4 <HAL_TIM_ConfigClockSource+0x140>
 80092dc:	2b10      	cmp	r3, #16
 80092de:	d802      	bhi.n	80092e6 <HAL_TIM_ConfigClockSource+0x62>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d06f      	beq.n	80093c4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80092e4:	e078      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d06c      	beq.n	80093c4 <HAL_TIM_ConfigClockSource+0x140>
 80092ea:	2b30      	cmp	r3, #48	; 0x30
 80092ec:	d06a      	beq.n	80093c4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80092ee:	e073      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80092f0:	2b70      	cmp	r3, #112	; 0x70
 80092f2:	d00d      	beq.n	8009310 <HAL_TIM_ConfigClockSource+0x8c>
 80092f4:	2b70      	cmp	r3, #112	; 0x70
 80092f6:	d804      	bhi.n	8009302 <HAL_TIM_ConfigClockSource+0x7e>
 80092f8:	2b50      	cmp	r3, #80	; 0x50
 80092fa:	d033      	beq.n	8009364 <HAL_TIM_ConfigClockSource+0xe0>
 80092fc:	2b60      	cmp	r3, #96	; 0x60
 80092fe:	d041      	beq.n	8009384 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009300:	e06a      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009306:	d066      	beq.n	80093d6 <HAL_TIM_ConfigClockSource+0x152>
 8009308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800930c:	d017      	beq.n	800933e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800930e:	e063      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6818      	ldr	r0, [r3, #0]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	6899      	ldr	r1, [r3, #8]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f000 fc0a 	bl	8009b38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009332:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	609a      	str	r2, [r3, #8]
      break;
 800933c:	e04c      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	6899      	ldr	r1, [r3, #8]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	f000 fbf3 	bl	8009b38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009360:	609a      	str	r2, [r3, #8]
      break;
 8009362:	e039      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6818      	ldr	r0, [r3, #0]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	6859      	ldr	r1, [r3, #4]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	461a      	mov	r2, r3
 8009372:	f000 fb67 	bl	8009a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2150      	movs	r1, #80	; 0x50
 800937c:	4618      	mov	r0, r3
 800937e:	f000 fbc0 	bl	8009b02 <TIM_ITRx_SetConfig>
      break;
 8009382:	e029      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	6859      	ldr	r1, [r3, #4]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	461a      	mov	r2, r3
 8009392:	f000 fb86 	bl	8009aa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2160      	movs	r1, #96	; 0x60
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fbb0 	bl	8009b02 <TIM_ITRx_SetConfig>
      break;
 80093a2:	e019      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	6859      	ldr	r1, [r3, #4]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	461a      	mov	r2, r3
 80093b2:	f000 fb47 	bl	8009a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2140      	movs	r1, #64	; 0x40
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fba0 	bl	8009b02 <TIM_ITRx_SetConfig>
      break;
 80093c2:	e009      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f000 fb97 	bl	8009b02 <TIM_ITRx_SetConfig>
      break;
 80093d4:	e000      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80093d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	fffeff88 	.word	0xfffeff88

080093f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a40      	ldr	r2, [pc, #256]	; (800955c <TIM_Base_SetConfig+0x114>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d013      	beq.n	8009488 <TIM_Base_SetConfig+0x40>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009466:	d00f      	beq.n	8009488 <TIM_Base_SetConfig+0x40>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a3d      	ldr	r2, [pc, #244]	; (8009560 <TIM_Base_SetConfig+0x118>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d00b      	beq.n	8009488 <TIM_Base_SetConfig+0x40>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a3c      	ldr	r2, [pc, #240]	; (8009564 <TIM_Base_SetConfig+0x11c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d007      	beq.n	8009488 <TIM_Base_SetConfig+0x40>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a3b      	ldr	r2, [pc, #236]	; (8009568 <TIM_Base_SetConfig+0x120>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d003      	beq.n	8009488 <TIM_Base_SetConfig+0x40>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a3a      	ldr	r2, [pc, #232]	; (800956c <TIM_Base_SetConfig+0x124>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d108      	bne.n	800949a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800948e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	4313      	orrs	r3, r2
 8009498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a2f      	ldr	r2, [pc, #188]	; (800955c <TIM_Base_SetConfig+0x114>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d02b      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a8:	d027      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a2c      	ldr	r2, [pc, #176]	; (8009560 <TIM_Base_SetConfig+0x118>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d023      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a2b      	ldr	r2, [pc, #172]	; (8009564 <TIM_Base_SetConfig+0x11c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d01f      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a2a      	ldr	r2, [pc, #168]	; (8009568 <TIM_Base_SetConfig+0x120>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d01b      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a29      	ldr	r2, [pc, #164]	; (800956c <TIM_Base_SetConfig+0x124>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d017      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a28      	ldr	r2, [pc, #160]	; (8009570 <TIM_Base_SetConfig+0x128>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d013      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a27      	ldr	r2, [pc, #156]	; (8009574 <TIM_Base_SetConfig+0x12c>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d00f      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a26      	ldr	r2, [pc, #152]	; (8009578 <TIM_Base_SetConfig+0x130>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d00b      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a25      	ldr	r2, [pc, #148]	; (800957c <TIM_Base_SetConfig+0x134>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d007      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a24      	ldr	r2, [pc, #144]	; (8009580 <TIM_Base_SetConfig+0x138>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d003      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a23      	ldr	r2, [pc, #140]	; (8009584 <TIM_Base_SetConfig+0x13c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d108      	bne.n	800950c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	4313      	orrs	r3, r2
 800950a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a0a      	ldr	r2, [pc, #40]	; (800955c <TIM_Base_SetConfig+0x114>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d003      	beq.n	8009540 <TIM_Base_SetConfig+0xf8>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a0c      	ldr	r2, [pc, #48]	; (800956c <TIM_Base_SetConfig+0x124>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d103      	bne.n	8009548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	615a      	str	r2, [r3, #20]
}
 800954e:	bf00      	nop
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	40010000 	.word	0x40010000
 8009560:	40000400 	.word	0x40000400
 8009564:	40000800 	.word	0x40000800
 8009568:	40000c00 	.word	0x40000c00
 800956c:	40010400 	.word	0x40010400
 8009570:	40014000 	.word	0x40014000
 8009574:	40014400 	.word	0x40014400
 8009578:	40014800 	.word	0x40014800
 800957c:	40001800 	.word	0x40001800
 8009580:	40001c00 	.word	0x40001c00
 8009584:	40002000 	.word	0x40002000

08009588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	f023 0201 	bic.w	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	4b2b      	ldr	r3, [pc, #172]	; (8009660 <TIM_OC1_SetConfig+0xd8>)
 80095b4:	4013      	ands	r3, r2
 80095b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f023 0303 	bic.w	r3, r3, #3
 80095be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f023 0302 	bic.w	r3, r3, #2
 80095d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	4313      	orrs	r3, r2
 80095da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a21      	ldr	r2, [pc, #132]	; (8009664 <TIM_OC1_SetConfig+0xdc>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d003      	beq.n	80095ec <TIM_OC1_SetConfig+0x64>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a20      	ldr	r2, [pc, #128]	; (8009668 <TIM_OC1_SetConfig+0xe0>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d10c      	bne.n	8009606 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f023 0308 	bic.w	r3, r3, #8
 80095f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f023 0304 	bic.w	r3, r3, #4
 8009604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a16      	ldr	r2, [pc, #88]	; (8009664 <TIM_OC1_SetConfig+0xdc>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d003      	beq.n	8009616 <TIM_OC1_SetConfig+0x8e>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a15      	ldr	r2, [pc, #84]	; (8009668 <TIM_OC1_SetConfig+0xe0>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d111      	bne.n	800963a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800961c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	4313      	orrs	r3, r2
 800962e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	4313      	orrs	r3, r2
 8009638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	621a      	str	r2, [r3, #32]
}
 8009654:	bf00      	nop
 8009656:	371c      	adds	r7, #28
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	fffeff8f 	.word	0xfffeff8f
 8009664:	40010000 	.word	0x40010000
 8009668:	40010400 	.word	0x40010400

0800966c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800966c:	b480      	push	{r7}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	f023 0210 	bic.w	r2, r3, #16
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	4b2e      	ldr	r3, [pc, #184]	; (8009750 <TIM_OC2_SetConfig+0xe4>)
 8009698:	4013      	ands	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	021b      	lsls	r3, r3, #8
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f023 0320 	bic.w	r3, r3, #32
 80096b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	011b      	lsls	r3, r3, #4
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a23      	ldr	r2, [pc, #140]	; (8009754 <TIM_OC2_SetConfig+0xe8>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d003      	beq.n	80096d4 <TIM_OC2_SetConfig+0x68>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a22      	ldr	r2, [pc, #136]	; (8009758 <TIM_OC2_SetConfig+0xec>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d10d      	bne.n	80096f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	011b      	lsls	r3, r3, #4
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a18      	ldr	r2, [pc, #96]	; (8009754 <TIM_OC2_SetConfig+0xe8>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d003      	beq.n	8009700 <TIM_OC2_SetConfig+0x94>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a17      	ldr	r2, [pc, #92]	; (8009758 <TIM_OC2_SetConfig+0xec>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d113      	bne.n	8009728 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800970e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	4313      	orrs	r3, r2
 800971a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	4313      	orrs	r3, r2
 8009726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	621a      	str	r2, [r3, #32]
}
 8009742:	bf00      	nop
 8009744:	371c      	adds	r7, #28
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	feff8fff 	.word	0xfeff8fff
 8009754:	40010000 	.word	0x40010000
 8009758:	40010400 	.word	0x40010400

0800975c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800975c:	b480      	push	{r7}
 800975e:	b087      	sub	sp, #28
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	4b2d      	ldr	r3, [pc, #180]	; (800983c <TIM_OC3_SetConfig+0xe0>)
 8009788:	4013      	ands	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f023 0303 	bic.w	r3, r3, #3
 8009792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	4313      	orrs	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	021b      	lsls	r3, r3, #8
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a22      	ldr	r2, [pc, #136]	; (8009840 <TIM_OC3_SetConfig+0xe4>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d003      	beq.n	80097c2 <TIM_OC3_SetConfig+0x66>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a21      	ldr	r2, [pc, #132]	; (8009844 <TIM_OC3_SetConfig+0xe8>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d10d      	bne.n	80097de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	021b      	lsls	r3, r3, #8
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a17      	ldr	r2, [pc, #92]	; (8009840 <TIM_OC3_SetConfig+0xe4>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d003      	beq.n	80097ee <TIM_OC3_SetConfig+0x92>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a16      	ldr	r2, [pc, #88]	; (8009844 <TIM_OC3_SetConfig+0xe8>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d113      	bne.n	8009816 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	011b      	lsls	r3, r3, #4
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	4313      	orrs	r3, r2
 8009808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	4313      	orrs	r3, r2
 8009814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	621a      	str	r2, [r3, #32]
}
 8009830:	bf00      	nop
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	fffeff8f 	.word	0xfffeff8f
 8009840:	40010000 	.word	0x40010000
 8009844:	40010400 	.word	0x40010400

08009848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	69db      	ldr	r3, [r3, #28]
 800986e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4b1e      	ldr	r3, [pc, #120]	; (80098ec <TIM_OC4_SetConfig+0xa4>)
 8009874:	4013      	ands	r3, r2
 8009876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800987e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	021b      	lsls	r3, r3, #8
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	4313      	orrs	r3, r2
 800988a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	031b      	lsls	r3, r3, #12
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	4313      	orrs	r3, r2
 800989e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a13      	ldr	r2, [pc, #76]	; (80098f0 <TIM_OC4_SetConfig+0xa8>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d003      	beq.n	80098b0 <TIM_OC4_SetConfig+0x68>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a12      	ldr	r2, [pc, #72]	; (80098f4 <TIM_OC4_SetConfig+0xac>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d109      	bne.n	80098c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	019b      	lsls	r3, r3, #6
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	621a      	str	r2, [r3, #32]
}
 80098de:	bf00      	nop
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	feff8fff 	.word	0xfeff8fff
 80098f0:	40010000 	.word	0x40010000
 80098f4:	40010400 	.word	0x40010400

080098f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800991e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	4b1b      	ldr	r3, [pc, #108]	; (8009990 <TIM_OC5_SetConfig+0x98>)
 8009924:	4013      	ands	r3, r2
 8009926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	4313      	orrs	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009938:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	041b      	lsls	r3, r3, #16
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	4313      	orrs	r3, r2
 8009944:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a12      	ldr	r2, [pc, #72]	; (8009994 <TIM_OC5_SetConfig+0x9c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d003      	beq.n	8009956 <TIM_OC5_SetConfig+0x5e>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a11      	ldr	r2, [pc, #68]	; (8009998 <TIM_OC5_SetConfig+0xa0>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d109      	bne.n	800996a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800995c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	4313      	orrs	r3, r2
 8009968:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	621a      	str	r2, [r3, #32]
}
 8009984:	bf00      	nop
 8009986:	371c      	adds	r7, #28
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	fffeff8f 	.word	0xfffeff8f
 8009994:	40010000 	.word	0x40010000
 8009998:	40010400 	.word	0x40010400

0800999c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800999c:	b480      	push	{r7}
 800999e:	b087      	sub	sp, #28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4b1c      	ldr	r3, [pc, #112]	; (8009a38 <TIM_OC6_SetConfig+0x9c>)
 80099c8:	4013      	ands	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	021b      	lsls	r3, r3, #8
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	051b      	lsls	r3, r3, #20
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a13      	ldr	r2, [pc, #76]	; (8009a3c <TIM_OC6_SetConfig+0xa0>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d003      	beq.n	80099fc <TIM_OC6_SetConfig+0x60>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a12      	ldr	r2, [pc, #72]	; (8009a40 <TIM_OC6_SetConfig+0xa4>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d109      	bne.n	8009a10 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	029b      	lsls	r3, r3, #10
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	621a      	str	r2, [r3, #32]
}
 8009a2a:	bf00      	nop
 8009a2c:	371c      	adds	r7, #28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	feff8fff 	.word	0xfeff8fff
 8009a3c:	40010000 	.word	0x40010000
 8009a40:	40010400 	.word	0x40010400

08009a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	f023 0201 	bic.w	r2, r3, #1
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	011b      	lsls	r3, r3, #4
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f023 030a 	bic.w	r3, r3, #10
 8009a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	621a      	str	r2, [r3, #32]
}
 8009a96:	bf00      	nop
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b087      	sub	sp, #28
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	60f8      	str	r0, [r7, #12]
 8009aaa:	60b9      	str	r1, [r7, #8]
 8009aac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	f023 0210 	bic.w	r2, r3, #16
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6a1b      	ldr	r3, [r3, #32]
 8009ac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	031b      	lsls	r3, r3, #12
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ade:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	011b      	lsls	r3, r3, #4
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	621a      	str	r2, [r3, #32]
}
 8009af6:	bf00      	nop
 8009af8:	371c      	adds	r7, #28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b02:	b480      	push	{r7}
 8009b04:	b085      	sub	sp, #20
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	f043 0307 	orr.w	r3, r3, #7
 8009b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	609a      	str	r2, [r3, #8]
}
 8009b2c:	bf00      	nop
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
 8009b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	021a      	lsls	r2, r3, #8
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	609a      	str	r2, [r3, #8]
}
 8009b6c:	bf00      	nop
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d101      	bne.n	8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	e06d      	b.n	8009c6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a30      	ldr	r2, [pc, #192]	; (8009c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d004      	beq.n	8009bc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a2f      	ldr	r2, [pc, #188]	; (8009c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d108      	bne.n	8009bd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009bca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a20      	ldr	r2, [pc, #128]	; (8009c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d022      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c02:	d01d      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a1d      	ldr	r2, [pc, #116]	; (8009c80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d018      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a1c      	ldr	r2, [pc, #112]	; (8009c84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d013      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a1a      	ldr	r2, [pc, #104]	; (8009c88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d00e      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a15      	ldr	r2, [pc, #84]	; (8009c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d009      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a16      	ldr	r2, [pc, #88]	; (8009c8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d004      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a15      	ldr	r2, [pc, #84]	; (8009c90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d10c      	bne.n	8009c5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	40010000 	.word	0x40010000
 8009c7c:	40010400 	.word	0x40010400
 8009c80:	40000400 	.word	0x40000400
 8009c84:	40000800 	.word	0x40000800
 8009c88:	40000c00 	.word	0x40000c00
 8009c8c:	40014000 	.word	0x40014000
 8009c90:	40001800 	.word	0x40001800

08009c94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d101      	bne.n	8009cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009cac:	2302      	movs	r3, #2
 8009cae:	e065      	b.n	8009d7c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d16:	4313      	orrs	r3, r2
 8009d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	041b      	lsls	r3, r3, #16
 8009d26:	4313      	orrs	r3, r2
 8009d28:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a16      	ldr	r2, [pc, #88]	; (8009d88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d004      	beq.n	8009d3e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a14      	ldr	r2, [pc, #80]	; (8009d8c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d115      	bne.n	8009d6a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	051b      	lsls	r3, r3, #20
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	69db      	ldr	r3, [r3, #28]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	40010000 	.word	0x40010000
 8009d8c:	40010400 	.word	0x40010400

08009d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e040      	b.n	8009e60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d106      	bne.n	8009df4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7f8 fd5e 	bl	80028b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2224      	movs	r2, #36	; 0x24
 8009df8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0201 	bic.w	r2, r2, #1
 8009e08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f82c 	bl	8009e68 <UART_SetConfig>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d101      	bne.n	8009e1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e022      	b.n	8009e60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 faca 	bl	800a3bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	689a      	ldr	r2, [r3, #8]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f042 0201 	orr.w	r2, r2, #1
 8009e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fb51 	bl	800a500 <UART_CheckIdleState>
 8009e5e:	4603      	mov	r3, r0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b088      	sub	sp, #32
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009e70:	2300      	movs	r3, #0
 8009e72:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	431a      	orrs	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	431a      	orrs	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	4bb1      	ldr	r3, [pc, #708]	; (800a15c <UART_SetConfig+0x2f4>)
 8009e98:	4013      	ands	r3, r2
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	6812      	ldr	r2, [r2, #0]
 8009e9e:	6939      	ldr	r1, [r7, #16]
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68da      	ldr	r2, [r3, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a9f      	ldr	r2, [pc, #636]	; (800a160 <UART_SetConfig+0x2f8>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d121      	bne.n	8009f2c <UART_SetConfig+0xc4>
 8009ee8:	4b9e      	ldr	r3, [pc, #632]	; (800a164 <UART_SetConfig+0x2fc>)
 8009eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d816      	bhi.n	8009f24 <UART_SetConfig+0xbc>
 8009ef6:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <UART_SetConfig+0x94>)
 8009ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efc:	08009f0d 	.word	0x08009f0d
 8009f00:	08009f19 	.word	0x08009f19
 8009f04:	08009f13 	.word	0x08009f13
 8009f08:	08009f1f 	.word	0x08009f1f
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	77fb      	strb	r3, [r7, #31]
 8009f10:	e151      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f12:	2302      	movs	r3, #2
 8009f14:	77fb      	strb	r3, [r7, #31]
 8009f16:	e14e      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f18:	2304      	movs	r3, #4
 8009f1a:	77fb      	strb	r3, [r7, #31]
 8009f1c:	e14b      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f1e:	2308      	movs	r3, #8
 8009f20:	77fb      	strb	r3, [r7, #31]
 8009f22:	e148      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f24:	2310      	movs	r3, #16
 8009f26:	77fb      	strb	r3, [r7, #31]
 8009f28:	bf00      	nop
 8009f2a:	e144      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a8d      	ldr	r2, [pc, #564]	; (800a168 <UART_SetConfig+0x300>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d134      	bne.n	8009fa0 <UART_SetConfig+0x138>
 8009f36:	4b8b      	ldr	r3, [pc, #556]	; (800a164 <UART_SetConfig+0x2fc>)
 8009f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f3c:	f003 030c 	and.w	r3, r3, #12
 8009f40:	2b0c      	cmp	r3, #12
 8009f42:	d829      	bhi.n	8009f98 <UART_SetConfig+0x130>
 8009f44:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <UART_SetConfig+0xe4>)
 8009f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4a:	bf00      	nop
 8009f4c:	08009f81 	.word	0x08009f81
 8009f50:	08009f99 	.word	0x08009f99
 8009f54:	08009f99 	.word	0x08009f99
 8009f58:	08009f99 	.word	0x08009f99
 8009f5c:	08009f8d 	.word	0x08009f8d
 8009f60:	08009f99 	.word	0x08009f99
 8009f64:	08009f99 	.word	0x08009f99
 8009f68:	08009f99 	.word	0x08009f99
 8009f6c:	08009f87 	.word	0x08009f87
 8009f70:	08009f99 	.word	0x08009f99
 8009f74:	08009f99 	.word	0x08009f99
 8009f78:	08009f99 	.word	0x08009f99
 8009f7c:	08009f93 	.word	0x08009f93
 8009f80:	2300      	movs	r3, #0
 8009f82:	77fb      	strb	r3, [r7, #31]
 8009f84:	e117      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f86:	2302      	movs	r3, #2
 8009f88:	77fb      	strb	r3, [r7, #31]
 8009f8a:	e114      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	77fb      	strb	r3, [r7, #31]
 8009f90:	e111      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f92:	2308      	movs	r3, #8
 8009f94:	77fb      	strb	r3, [r7, #31]
 8009f96:	e10e      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f98:	2310      	movs	r3, #16
 8009f9a:	77fb      	strb	r3, [r7, #31]
 8009f9c:	bf00      	nop
 8009f9e:	e10a      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a71      	ldr	r2, [pc, #452]	; (800a16c <UART_SetConfig+0x304>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d120      	bne.n	8009fec <UART_SetConfig+0x184>
 8009faa:	4b6e      	ldr	r3, [pc, #440]	; (800a164 <UART_SetConfig+0x2fc>)
 8009fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009fb4:	2b10      	cmp	r3, #16
 8009fb6:	d00f      	beq.n	8009fd8 <UART_SetConfig+0x170>
 8009fb8:	2b10      	cmp	r3, #16
 8009fba:	d802      	bhi.n	8009fc2 <UART_SetConfig+0x15a>
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d005      	beq.n	8009fcc <UART_SetConfig+0x164>
 8009fc0:	e010      	b.n	8009fe4 <UART_SetConfig+0x17c>
 8009fc2:	2b20      	cmp	r3, #32
 8009fc4:	d005      	beq.n	8009fd2 <UART_SetConfig+0x16a>
 8009fc6:	2b30      	cmp	r3, #48	; 0x30
 8009fc8:	d009      	beq.n	8009fde <UART_SetConfig+0x176>
 8009fca:	e00b      	b.n	8009fe4 <UART_SetConfig+0x17c>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	77fb      	strb	r3, [r7, #31]
 8009fd0:	e0f1      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	77fb      	strb	r3, [r7, #31]
 8009fd6:	e0ee      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009fd8:	2304      	movs	r3, #4
 8009fda:	77fb      	strb	r3, [r7, #31]
 8009fdc:	e0eb      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009fde:	2308      	movs	r3, #8
 8009fe0:	77fb      	strb	r3, [r7, #31]
 8009fe2:	e0e8      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009fe4:	2310      	movs	r3, #16
 8009fe6:	77fb      	strb	r3, [r7, #31]
 8009fe8:	bf00      	nop
 8009fea:	e0e4      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a5f      	ldr	r2, [pc, #380]	; (800a170 <UART_SetConfig+0x308>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d120      	bne.n	800a038 <UART_SetConfig+0x1d0>
 8009ff6:	4b5b      	ldr	r3, [pc, #364]	; (800a164 <UART_SetConfig+0x2fc>)
 8009ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ffc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a000:	2b40      	cmp	r3, #64	; 0x40
 800a002:	d00f      	beq.n	800a024 <UART_SetConfig+0x1bc>
 800a004:	2b40      	cmp	r3, #64	; 0x40
 800a006:	d802      	bhi.n	800a00e <UART_SetConfig+0x1a6>
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d005      	beq.n	800a018 <UART_SetConfig+0x1b0>
 800a00c:	e010      	b.n	800a030 <UART_SetConfig+0x1c8>
 800a00e:	2b80      	cmp	r3, #128	; 0x80
 800a010:	d005      	beq.n	800a01e <UART_SetConfig+0x1b6>
 800a012:	2bc0      	cmp	r3, #192	; 0xc0
 800a014:	d009      	beq.n	800a02a <UART_SetConfig+0x1c2>
 800a016:	e00b      	b.n	800a030 <UART_SetConfig+0x1c8>
 800a018:	2300      	movs	r3, #0
 800a01a:	77fb      	strb	r3, [r7, #31]
 800a01c:	e0cb      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a01e:	2302      	movs	r3, #2
 800a020:	77fb      	strb	r3, [r7, #31]
 800a022:	e0c8      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a024:	2304      	movs	r3, #4
 800a026:	77fb      	strb	r3, [r7, #31]
 800a028:	e0c5      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a02a:	2308      	movs	r3, #8
 800a02c:	77fb      	strb	r3, [r7, #31]
 800a02e:	e0c2      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a030:	2310      	movs	r3, #16
 800a032:	77fb      	strb	r3, [r7, #31]
 800a034:	bf00      	nop
 800a036:	e0be      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a4d      	ldr	r2, [pc, #308]	; (800a174 <UART_SetConfig+0x30c>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d124      	bne.n	800a08c <UART_SetConfig+0x224>
 800a042:	4b48      	ldr	r3, [pc, #288]	; (800a164 <UART_SetConfig+0x2fc>)
 800a044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a04c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a050:	d012      	beq.n	800a078 <UART_SetConfig+0x210>
 800a052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a056:	d802      	bhi.n	800a05e <UART_SetConfig+0x1f6>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d007      	beq.n	800a06c <UART_SetConfig+0x204>
 800a05c:	e012      	b.n	800a084 <UART_SetConfig+0x21c>
 800a05e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a062:	d006      	beq.n	800a072 <UART_SetConfig+0x20a>
 800a064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a068:	d009      	beq.n	800a07e <UART_SetConfig+0x216>
 800a06a:	e00b      	b.n	800a084 <UART_SetConfig+0x21c>
 800a06c:	2300      	movs	r3, #0
 800a06e:	77fb      	strb	r3, [r7, #31]
 800a070:	e0a1      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a072:	2302      	movs	r3, #2
 800a074:	77fb      	strb	r3, [r7, #31]
 800a076:	e09e      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a078:	2304      	movs	r3, #4
 800a07a:	77fb      	strb	r3, [r7, #31]
 800a07c:	e09b      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a07e:	2308      	movs	r3, #8
 800a080:	77fb      	strb	r3, [r7, #31]
 800a082:	e098      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a084:	2310      	movs	r3, #16
 800a086:	77fb      	strb	r3, [r7, #31]
 800a088:	bf00      	nop
 800a08a:	e094      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a39      	ldr	r2, [pc, #228]	; (800a178 <UART_SetConfig+0x310>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d124      	bne.n	800a0e0 <UART_SetConfig+0x278>
 800a096:	4b33      	ldr	r3, [pc, #204]	; (800a164 <UART_SetConfig+0x2fc>)
 800a098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a09c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a0a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0a4:	d012      	beq.n	800a0cc <UART_SetConfig+0x264>
 800a0a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0aa:	d802      	bhi.n	800a0b2 <UART_SetConfig+0x24a>
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d007      	beq.n	800a0c0 <UART_SetConfig+0x258>
 800a0b0:	e012      	b.n	800a0d8 <UART_SetConfig+0x270>
 800a0b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0b6:	d006      	beq.n	800a0c6 <UART_SetConfig+0x25e>
 800a0b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0bc:	d009      	beq.n	800a0d2 <UART_SetConfig+0x26a>
 800a0be:	e00b      	b.n	800a0d8 <UART_SetConfig+0x270>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	77fb      	strb	r3, [r7, #31]
 800a0c4:	e077      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	77fb      	strb	r3, [r7, #31]
 800a0ca:	e074      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a0cc:	2304      	movs	r3, #4
 800a0ce:	77fb      	strb	r3, [r7, #31]
 800a0d0:	e071      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a0d2:	2308      	movs	r3, #8
 800a0d4:	77fb      	strb	r3, [r7, #31]
 800a0d6:	e06e      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a0d8:	2310      	movs	r3, #16
 800a0da:	77fb      	strb	r3, [r7, #31]
 800a0dc:	bf00      	nop
 800a0de:	e06a      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a25      	ldr	r2, [pc, #148]	; (800a17c <UART_SetConfig+0x314>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d124      	bne.n	800a134 <UART_SetConfig+0x2cc>
 800a0ea:	4b1e      	ldr	r3, [pc, #120]	; (800a164 <UART_SetConfig+0x2fc>)
 800a0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a0f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0f8:	d012      	beq.n	800a120 <UART_SetConfig+0x2b8>
 800a0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0fe:	d802      	bhi.n	800a106 <UART_SetConfig+0x29e>
 800a100:	2b00      	cmp	r3, #0
 800a102:	d007      	beq.n	800a114 <UART_SetConfig+0x2ac>
 800a104:	e012      	b.n	800a12c <UART_SetConfig+0x2c4>
 800a106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a10a:	d006      	beq.n	800a11a <UART_SetConfig+0x2b2>
 800a10c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a110:	d009      	beq.n	800a126 <UART_SetConfig+0x2be>
 800a112:	e00b      	b.n	800a12c <UART_SetConfig+0x2c4>
 800a114:	2300      	movs	r3, #0
 800a116:	77fb      	strb	r3, [r7, #31]
 800a118:	e04d      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a11a:	2302      	movs	r3, #2
 800a11c:	77fb      	strb	r3, [r7, #31]
 800a11e:	e04a      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a120:	2304      	movs	r3, #4
 800a122:	77fb      	strb	r3, [r7, #31]
 800a124:	e047      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a126:	2308      	movs	r3, #8
 800a128:	77fb      	strb	r3, [r7, #31]
 800a12a:	e044      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a12c:	2310      	movs	r3, #16
 800a12e:	77fb      	strb	r3, [r7, #31]
 800a130:	bf00      	nop
 800a132:	e040      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a11      	ldr	r2, [pc, #68]	; (800a180 <UART_SetConfig+0x318>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d139      	bne.n	800a1b2 <UART_SetConfig+0x34a>
 800a13e:	4b09      	ldr	r3, [pc, #36]	; (800a164 <UART_SetConfig+0x2fc>)
 800a140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a14c:	d027      	beq.n	800a19e <UART_SetConfig+0x336>
 800a14e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a152:	d817      	bhi.n	800a184 <UART_SetConfig+0x31c>
 800a154:	2b00      	cmp	r3, #0
 800a156:	d01c      	beq.n	800a192 <UART_SetConfig+0x32a>
 800a158:	e027      	b.n	800a1aa <UART_SetConfig+0x342>
 800a15a:	bf00      	nop
 800a15c:	efff69f3 	.word	0xefff69f3
 800a160:	40011000 	.word	0x40011000
 800a164:	40023800 	.word	0x40023800
 800a168:	40004400 	.word	0x40004400
 800a16c:	40004800 	.word	0x40004800
 800a170:	40004c00 	.word	0x40004c00
 800a174:	40005000 	.word	0x40005000
 800a178:	40011400 	.word	0x40011400
 800a17c:	40007800 	.word	0x40007800
 800a180:	40007c00 	.word	0x40007c00
 800a184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a188:	d006      	beq.n	800a198 <UART_SetConfig+0x330>
 800a18a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a18e:	d009      	beq.n	800a1a4 <UART_SetConfig+0x33c>
 800a190:	e00b      	b.n	800a1aa <UART_SetConfig+0x342>
 800a192:	2300      	movs	r3, #0
 800a194:	77fb      	strb	r3, [r7, #31]
 800a196:	e00e      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a198:	2302      	movs	r3, #2
 800a19a:	77fb      	strb	r3, [r7, #31]
 800a19c:	e00b      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a19e:	2304      	movs	r3, #4
 800a1a0:	77fb      	strb	r3, [r7, #31]
 800a1a2:	e008      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a1a4:	2308      	movs	r3, #8
 800a1a6:	77fb      	strb	r3, [r7, #31]
 800a1a8:	e005      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a1aa:	2310      	movs	r3, #16
 800a1ac:	77fb      	strb	r3, [r7, #31]
 800a1ae:	bf00      	nop
 800a1b0:	e001      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a1b2:	2310      	movs	r3, #16
 800a1b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	69db      	ldr	r3, [r3, #28]
 800a1ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1be:	d17f      	bne.n	800a2c0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a1c0:	7ffb      	ldrb	r3, [r7, #31]
 800a1c2:	2b08      	cmp	r3, #8
 800a1c4:	d85c      	bhi.n	800a280 <UART_SetConfig+0x418>
 800a1c6:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <UART_SetConfig+0x364>)
 800a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1cc:	0800a1f1 	.word	0x0800a1f1
 800a1d0:	0800a211 	.word	0x0800a211
 800a1d4:	0800a231 	.word	0x0800a231
 800a1d8:	0800a281 	.word	0x0800a281
 800a1dc:	0800a249 	.word	0x0800a249
 800a1e0:	0800a281 	.word	0x0800a281
 800a1e4:	0800a281 	.word	0x0800a281
 800a1e8:	0800a281 	.word	0x0800a281
 800a1ec:	0800a269 	.word	0x0800a269
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1f0:	f7fc f8d0 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 800a1f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	005a      	lsls	r2, r3, #1
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	085b      	lsrs	r3, r3, #1
 800a200:	441a      	add	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	61bb      	str	r3, [r7, #24]
        break;
 800a20e:	e03a      	b.n	800a286 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a210:	f7fc f8d4 	bl	80063bc <HAL_RCC_GetPCLK2Freq>
 800a214:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	005a      	lsls	r2, r3, #1
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	085b      	lsrs	r3, r3, #1
 800a220:	441a      	add	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	61bb      	str	r3, [r7, #24]
        break;
 800a22e:	e02a      	b.n	800a286 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	085a      	lsrs	r2, r3, #1
 800a236:	4b5f      	ldr	r3, [pc, #380]	; (800a3b4 <UART_SetConfig+0x54c>)
 800a238:	4413      	add	r3, r2
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	6852      	ldr	r2, [r2, #4]
 800a23e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a242:	b29b      	uxth	r3, r3
 800a244:	61bb      	str	r3, [r7, #24]
        break;
 800a246:	e01e      	b.n	800a286 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a248:	f7fb ffe6 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 800a24c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	005a      	lsls	r2, r3, #1
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	085b      	lsrs	r3, r3, #1
 800a258:	441a      	add	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a262:	b29b      	uxth	r3, r3
 800a264:	61bb      	str	r3, [r7, #24]
        break;
 800a266:	e00e      	b.n	800a286 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	085b      	lsrs	r3, r3, #1
 800a26e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	61bb      	str	r3, [r7, #24]
        break;
 800a27e:	e002      	b.n	800a286 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	75fb      	strb	r3, [r7, #23]
        break;
 800a284:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	2b0f      	cmp	r3, #15
 800a28a:	d916      	bls.n	800a2ba <UART_SetConfig+0x452>
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a292:	d212      	bcs.n	800a2ba <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	b29b      	uxth	r3, r3
 800a298:	f023 030f 	bic.w	r3, r3, #15
 800a29c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	085b      	lsrs	r3, r3, #1
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	f003 0307 	and.w	r3, r3, #7
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	897b      	ldrh	r3, [r7, #10]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	897a      	ldrh	r2, [r7, #10]
 800a2b6:	60da      	str	r2, [r3, #12]
 800a2b8:	e070      	b.n	800a39c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	75fb      	strb	r3, [r7, #23]
 800a2be:	e06d      	b.n	800a39c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a2c0:	7ffb      	ldrb	r3, [r7, #31]
 800a2c2:	2b08      	cmp	r3, #8
 800a2c4:	d859      	bhi.n	800a37a <UART_SetConfig+0x512>
 800a2c6:	a201      	add	r2, pc, #4	; (adr r2, 800a2cc <UART_SetConfig+0x464>)
 800a2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2cc:	0800a2f1 	.word	0x0800a2f1
 800a2d0:	0800a30f 	.word	0x0800a30f
 800a2d4:	0800a32d 	.word	0x0800a32d
 800a2d8:	0800a37b 	.word	0x0800a37b
 800a2dc:	0800a345 	.word	0x0800a345
 800a2e0:	0800a37b 	.word	0x0800a37b
 800a2e4:	0800a37b 	.word	0x0800a37b
 800a2e8:	0800a37b 	.word	0x0800a37b
 800a2ec:	0800a363 	.word	0x0800a363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2f0:	f7fc f850 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 800a2f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	085a      	lsrs	r2, r3, #1
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	441a      	add	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	fbb2 f3f3 	udiv	r3, r2, r3
 800a308:	b29b      	uxth	r3, r3
 800a30a:	61bb      	str	r3, [r7, #24]
        break;
 800a30c:	e038      	b.n	800a380 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a30e:	f7fc f855 	bl	80063bc <HAL_RCC_GetPCLK2Freq>
 800a312:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	085a      	lsrs	r2, r3, #1
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	441a      	add	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	fbb2 f3f3 	udiv	r3, r2, r3
 800a326:	b29b      	uxth	r3, r3
 800a328:	61bb      	str	r3, [r7, #24]
        break;
 800a32a:	e029      	b.n	800a380 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	085a      	lsrs	r2, r3, #1
 800a332:	4b21      	ldr	r3, [pc, #132]	; (800a3b8 <UART_SetConfig+0x550>)
 800a334:	4413      	add	r3, r2
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	6852      	ldr	r2, [r2, #4]
 800a33a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a33e:	b29b      	uxth	r3, r3
 800a340:	61bb      	str	r3, [r7, #24]
        break;
 800a342:	e01d      	b.n	800a380 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a344:	f7fb ff68 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 800a348:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	085a      	lsrs	r2, r3, #1
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	441a      	add	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	fbb2 f3f3 	udiv	r3, r2, r3
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	61bb      	str	r3, [r7, #24]
        break;
 800a360:	e00e      	b.n	800a380 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	085b      	lsrs	r3, r3, #1
 800a368:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	fbb2 f3f3 	udiv	r3, r2, r3
 800a374:	b29b      	uxth	r3, r3
 800a376:	61bb      	str	r3, [r7, #24]
        break;
 800a378:	e002      	b.n	800a380 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	75fb      	strb	r3, [r7, #23]
        break;
 800a37e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	2b0f      	cmp	r3, #15
 800a384:	d908      	bls.n	800a398 <UART_SetConfig+0x530>
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38c:	d204      	bcs.n	800a398 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	60da      	str	r2, [r3, #12]
 800a396:	e001      	b.n	800a39c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3720      	adds	r7, #32
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	01e84800 	.word	0x01e84800
 800a3b8:	00f42400 	.word	0x00f42400

0800a3bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00a      	beq.n	800a3e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	f003 0302 	and.w	r3, r3, #2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00a      	beq.n	800a408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00a      	beq.n	800a42a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	f003 0308 	and.w	r3, r3, #8
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00a      	beq.n	800a44c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	430a      	orrs	r2, r1
 800a44a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a450:	f003 0310 	and.w	r3, r3, #16
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00a      	beq.n	800a46e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a472:	f003 0320 	and.w	r3, r3, #32
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00a      	beq.n	800a490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	430a      	orrs	r2, r1
 800a48e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d01a      	beq.n	800a4d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4ba:	d10a      	bne.n	800a4d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	605a      	str	r2, [r3, #4]
  }
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af02      	add	r7, sp, #8
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a50e:	f7f8 fd1d 	bl	8002f4c <HAL_GetTick>
 800a512:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0308 	and.w	r3, r3, #8
 800a51e:	2b08      	cmp	r3, #8
 800a520:	d10e      	bne.n	800a540 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a522:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f814 	bl	800a55e <UART_WaitOnFlagUntilTimeout>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e00a      	b.n	800a556 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2220      	movs	r2, #32
 800a544:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2220      	movs	r2, #32
 800a54a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	60f8      	str	r0, [r7, #12]
 800a566:	60b9      	str	r1, [r7, #8]
 800a568:	603b      	str	r3, [r7, #0]
 800a56a:	4613      	mov	r3, r2
 800a56c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a56e:	e05d      	b.n	800a62c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a576:	d059      	beq.n	800a62c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a578:	f7f8 fce8 	bl	8002f4c <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	429a      	cmp	r2, r3
 800a586:	d302      	bcc.n	800a58e <UART_WaitOnFlagUntilTimeout+0x30>
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d11b      	bne.n	800a5c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a59c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689a      	ldr	r2, [r3, #8]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f022 0201 	bic.w	r2, r2, #1
 800a5ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2220      	movs	r2, #32
 800a5b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e042      	b.n	800a64c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d02b      	beq.n	800a62c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5e2:	d123      	bne.n	800a62c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5ec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f022 0201 	bic.w	r2, r2, #1
 800a60c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2220      	movs	r2, #32
 800a612:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2220      	movs	r2, #32
 800a618:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2220      	movs	r2, #32
 800a61e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a628:	2303      	movs	r3, #3
 800a62a:	e00f      	b.n	800a64c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	69da      	ldr	r2, [r3, #28]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	4013      	ands	r3, r2
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	429a      	cmp	r2, r3
 800a63a:	bf0c      	ite	eq
 800a63c:	2301      	moveq	r3, #1
 800a63e:	2300      	movne	r3, #0
 800a640:	b2db      	uxtb	r3, r3
 800a642:	461a      	mov	r2, r3
 800a644:	79fb      	ldrb	r3, [r7, #7]
 800a646:	429a      	cmp	r2, r3
 800a648:	d092      	beq.n	800a570 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d027      	beq.n	800a6be <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4b2f      	ldr	r3, [pc, #188]	; (800a734 <FMC_SDRAM_Init+0xe0>)
 800a678:	4013      	ands	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a684:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a68a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a690:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a696:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a69c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a6a2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a6a8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a6ae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	e032      	b.n	800a724 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6ca:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a6d4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a6da:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	4b12      	ldr	r3, [pc, #72]	; (800a734 <FMC_SDRAM_Init+0xe0>)
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6f8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a6fe:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a704:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a70a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a710:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	4313      	orrs	r3, r2
 800a716:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	ffff8000 	.word	0xffff8000

0800a738 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a738:	b480      	push	{r7}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d02e      	beq.n	800a7b0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a75e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a76e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	3b01      	subs	r3, #1
 800a776:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a778:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	3b01      	subs	r3, #1
 800a780:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a782:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	3b01      	subs	r3, #1
 800a78a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a78c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	3b01      	subs	r3, #1
 800a794:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a796:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	609a      	str	r2, [r3, #8]
 800a7ae:	e039      	b.n	800a824 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	4b1e      	ldr	r3, [pc, #120]	; (800a834 <FMC_SDRAM_Timing_Init+0xfc>)
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	695b      	ldr	r3, [r3, #20]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	697a      	ldr	r2, [r7, #20]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a7e2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7f2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a7fc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	3b01      	subs	r3, #1
 800a804:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a806:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a810:	4313      	orrs	r3, r2
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	4313      	orrs	r3, r2
 800a816:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	ff0f0fff 	.word	0xff0f0fff

0800a838 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a850:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	3b01      	subs	r3, #1
 800a858:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a85a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a862:	4313      	orrs	r3, r2
 800a864:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	371c      	adds	r7, #28
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	695a      	ldr	r2, [r3, #20]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	005b      	lsls	r3, r3, #1
 800a88c:	431a      	orrs	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	b480      	push	{r7}
 800a8a4:	b085      	sub	sp, #20
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	f107 001c 	add.w	r0, r7, #28
 800a8ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a8b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a8ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a8be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a8c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a8c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a8ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <SDMMC_Init+0x54>)
 800a8d8:	4013      	ands	r3, r2
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	b004      	add	sp, #16
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	ffff8100 	.word	0xffff8100

0800a8f8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2203      	movs	r2, #3
 800a91e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a920:	2002      	movs	r0, #2
 800a922:	f7f8 fb1f 	bl	8002f64 <HAL_Delay>
  
  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0303 	and.w	r3, r3, #3
}
 800a940:	4618      	mov	r0, r3
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a96a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a970:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a976:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68da      	ldr	r2, [r3, #12]
 800a982:	4b06      	ldr	r3, [pc, #24]	; (800a99c <SDMMC_SendCommand+0x50>)
 800a984:	4013      	ands	r3, r2
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	431a      	orrs	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	fffff000 	.word	0xfffff000

0800a9a0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	b2db      	uxtb	r3, r3
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	b085      	sub	sp, #20
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	3314      	adds	r3, #20
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
}  
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa06:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aa0c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aa12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	431a      	orrs	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0

}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aa46:	2310      	movs	r3, #16
 800aa48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa4a:	2340      	movs	r3, #64	; 0x40
 800aa4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa58:	f107 0308 	add.w	r3, r7, #8
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff ff74 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aa64:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa68:	2110      	movs	r1, #16
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fa42 	bl	800aef4 <SDMMC_GetCmdResp1>
 800aa70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa72:	69fb      	ldr	r3, [r7, #28]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3720      	adds	r7, #32
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aa8a:	2311      	movs	r3, #17
 800aa8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa8e:	2340      	movs	r3, #64	; 0x40
 800aa90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa92:	2300      	movs	r3, #0
 800aa94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa9c:	f107 0308 	add.w	r3, r7, #8
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff ff52 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aaa8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaac:	2111      	movs	r1, #17
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fa20 	bl	800aef4 <SDMMC_GetCmdResp1>
 800aab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aab6:	69fb      	ldr	r3, [r7, #28]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3720      	adds	r7, #32
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aace:	2312      	movs	r3, #18
 800aad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aad2:	2340      	movs	r3, #64	; 0x40
 800aad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aad6:	2300      	movs	r3, #0
 800aad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aade:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aae0:	f107 0308 	add.w	r3, r7, #8
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7ff ff30 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aaec:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf0:	2112      	movs	r1, #18
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f9fe 	bl	800aef4 <SDMMC_GetCmdResp1>
 800aaf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aafa:	69fb      	ldr	r3, [r7, #28]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3720      	adds	r7, #32
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b088      	sub	sp, #32
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ab12:	2318      	movs	r3, #24
 800ab14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab16:	2340      	movs	r3, #64	; 0x40
 800ab18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab24:	f107 0308 	add.w	r3, r7, #8
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff ff0e 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab34:	2118      	movs	r1, #24
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f9dc 	bl	800aef4 <SDMMC_GetCmdResp1>
 800ab3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab3e:	69fb      	ldr	r3, [r7, #28]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3720      	adds	r7, #32
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ab56:	2319      	movs	r3, #25
 800ab58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab5a:	2340      	movs	r3, #64	; 0x40
 800ab5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab68:	f107 0308 	add.w	r3, r7, #8
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff feec 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ab74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab78:	2119      	movs	r1, #25
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f9ba 	bl	800aef4 <SDMMC_GetCmdResp1>
 800ab80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab82:	69fb      	ldr	r3, [r7, #28]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3720      	adds	r7, #32
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ab98:	230c      	movs	r3, #12
 800ab9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab9c:	2340      	movs	r3, #64	; 0x40
 800ab9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aba0:	2300      	movs	r3, #0
 800aba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aba8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abaa:	f107 0308 	add.w	r3, r7, #8
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff fecb 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800abb6:	4a05      	ldr	r2, [pc, #20]	; (800abcc <SDMMC_CmdStopTransfer+0x40>)
 800abb8:	210c      	movs	r1, #12
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f99a 	bl	800aef4 <SDMMC_GetCmdResp1>
 800abc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abc2:	69fb      	ldr	r3, [r7, #28]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3720      	adds	r7, #32
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	05f5e100 	.word	0x05f5e100

0800abd0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b08a      	sub	sp, #40	; 0x28
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800abe0:	2307      	movs	r3, #7
 800abe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abe4:	2340      	movs	r3, #64	; 0x40
 800abe6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abe8:	2300      	movs	r3, #0
 800abea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abf0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abf2:	f107 0310 	add.w	r3, r7, #16
 800abf6:	4619      	mov	r1, r3
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f7ff fea7 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800abfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac02:	2107      	movs	r1, #7
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 f975 	bl	800aef4 <SDMMC_GetCmdResp1>
 800ac0a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3728      	adds	r7, #40	; 0x28
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b088      	sub	sp, #32
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ac22:	2300      	movs	r3, #0
 800ac24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ac26:	2300      	movs	r3, #0
 800ac28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac34:	f107 0308 	add.w	r3, r7, #8
 800ac38:	4619      	mov	r1, r3
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff fe86 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f92f 	bl	800aea4 <SDMMC_GetCmdError>
 800ac46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac48:	69fb      	ldr	r3, [r7, #28]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3720      	adds	r7, #32
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b088      	sub	sp, #32
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ac5a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ac5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ac60:	2308      	movs	r3, #8
 800ac62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac64:	2340      	movs	r3, #64	; 0x40
 800ac66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac72:	f107 0308 	add.w	r3, r7, #8
 800ac76:	4619      	mov	r1, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff fe67 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fb18 	bl	800b2b4 <SDMMC_GetCmdResp7>
 800ac84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac86:	69fb      	ldr	r3, [r7, #28]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3720      	adds	r7, #32
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ac9e:	2337      	movs	r3, #55	; 0x37
 800aca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aca2:	2340      	movs	r3, #64	; 0x40
 800aca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aca6:	2300      	movs	r3, #0
 800aca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acb0:	f107 0308 	add.w	r3, r7, #8
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fe48 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800acbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc0:	2137      	movs	r1, #55	; 0x37
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f916 	bl	800aef4 <SDMMC_GetCmdResp1>
 800acc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acca:	69fb      	ldr	r3, [r7, #28]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3720      	adds	r7, #32
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	4b0d      	ldr	r3, [pc, #52]	; (800ad18 <SDMMC_CmdAppOperCommand+0x44>)
 800ace2:	4313      	orrs	r3, r2
 800ace4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ace6:	2329      	movs	r3, #41	; 0x29
 800ace8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acea:	2340      	movs	r3, #64	; 0x40
 800acec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acee:	2300      	movs	r3, #0
 800acf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acf8:	f107 0308 	add.w	r3, r7, #8
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7ff fe24 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fa27 	bl	800b158 <SDMMC_GetCmdResp3>
 800ad0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3720      	adds	r7, #32
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	80100000 	.word	0x80100000

0800ad1c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b088      	sub	sp, #32
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ad2a:	2306      	movs	r3, #6
 800ad2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad2e:	2340      	movs	r3, #64	; 0x40
 800ad30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad32:	2300      	movs	r3, #0
 800ad34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad3c:	f107 0308 	add.w	r3, r7, #8
 800ad40:	4619      	mov	r1, r3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff fe02 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ad48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad4c:	2106      	movs	r1, #6
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f8d0 	bl	800aef4 <SDMMC_GetCmdResp1>
 800ad54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad56:	69fb      	ldr	r3, [r7, #28]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3720      	adds	r7, #32
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ad6c:	2333      	movs	r3, #51	; 0x33
 800ad6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad70:	2340      	movs	r3, #64	; 0x40
 800ad72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad74:	2300      	movs	r3, #0
 800ad76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad7e:	f107 0308 	add.w	r3, r7, #8
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7ff fde1 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ad8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad8e:	2133      	movs	r1, #51	; 0x33
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f8af 	bl	800aef4 <SDMMC_GetCmdResp1>
 800ad96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad98:	69fb      	ldr	r3, [r7, #28]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3720      	adds	r7, #32
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b088      	sub	sp, #32
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800adae:	2302      	movs	r3, #2
 800adb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800adb2:	23c0      	movs	r3, #192	; 0xc0
 800adb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adb6:	2300      	movs	r3, #0
 800adb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adc0:	f107 0308 	add.w	r3, r7, #8
 800adc4:	4619      	mov	r1, r3
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7ff fdc0 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f97d 	bl	800b0cc <SDMMC_GetCmdResp2>
 800add2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800add4:	69fb      	ldr	r3, [r7, #28]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3720      	adds	r7, #32
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b088      	sub	sp, #32
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800adec:	2309      	movs	r3, #9
 800adee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800adf0:	23c0      	movs	r3, #192	; 0xc0
 800adf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adf4:	2300      	movs	r3, #0
 800adf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adfe:	f107 0308 	add.w	r3, r7, #8
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7ff fda1 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 f95e 	bl	800b0cc <SDMMC_GetCmdResp2>
 800ae10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae12:	69fb      	ldr	r3, [r7, #28]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3720      	adds	r7, #32
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b088      	sub	sp, #32
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae26:	2300      	movs	r3, #0
 800ae28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae2e:	2340      	movs	r3, #64	; 0x40
 800ae30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae32:	2300      	movs	r3, #0
 800ae34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae3c:	f107 0308 	add.w	r3, r7, #8
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7ff fd82 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	2103      	movs	r1, #3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f9bd 	bl	800b1cc <SDMMC_GetCmdResp6>
 800ae52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae54:	69fb      	ldr	r3, [r7, #28]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3720      	adds	r7, #32
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b088      	sub	sp, #32
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ae6c:	230d      	movs	r3, #13
 800ae6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae70:	2340      	movs	r3, #64	; 0x40
 800ae72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae74:	2300      	movs	r3, #0
 800ae76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae7e:	f107 0308 	add.w	r3, r7, #8
 800ae82:	4619      	mov	r1, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff fd61 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ae8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae8e:	210d      	movs	r1, #13
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f82f 	bl	800aef4 <SDMMC_GetCmdResp1>
 800ae96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae98:	69fb      	ldr	r3, [r7, #28]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3720      	adds	r7, #32
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
	...

0800aea4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800aea4:	b490      	push	{r4, r7}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aeac:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <SDMMC_GetCmdError+0x48>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a0f      	ldr	r2, [pc, #60]	; (800aef0 <SDMMC_GetCmdError+0x4c>)
 800aeb2:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb6:	0a5b      	lsrs	r3, r3, #9
 800aeb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aebc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aec0:	4623      	mov	r3, r4
 800aec2:	1e5c      	subs	r4, r3, #1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d102      	bne.n	800aece <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aec8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aecc:	e009      	b.n	800aee2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0f2      	beq.n	800aec0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	22c5      	movs	r2, #197	; 0xc5
 800aede:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bc90      	pop	{r4, r7}
 800aeea:	4770      	bx	lr
 800aeec:	20000018 	.word	0x20000018
 800aef0:	10624dd3 	.word	0x10624dd3

0800aef4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aef4:	b590      	push	{r4, r7, lr}
 800aef6:	b087      	sub	sp, #28
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	460b      	mov	r3, r1
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800af02:	4b6f      	ldr	r3, [pc, #444]	; (800b0c0 <SDMMC_GetCmdResp1+0x1cc>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a6f      	ldr	r2, [pc, #444]	; (800b0c4 <SDMMC_GetCmdResp1+0x1d0>)
 800af08:	fba2 2303 	umull	r2, r3, r2, r3
 800af0c:	0a5b      	lsrs	r3, r3, #9
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800af14:	4623      	mov	r3, r4
 800af16:	1e5c      	subs	r4, r3, #1
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d102      	bne.n	800af22 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af20:	e0c9      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af26:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0f0      	beq.n	800af14 <SDMMC_GetCmdResp1+0x20>
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1eb      	bne.n	800af14 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af40:	f003 0304 	and.w	r3, r3, #4
 800af44:	2b00      	cmp	r3, #0
 800af46:	d004      	beq.n	800af52 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2204      	movs	r2, #4
 800af4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af4e:	2304      	movs	r3, #4
 800af50:	e0b1      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af56:	f003 0301 	and.w	r3, r3, #1
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d004      	beq.n	800af68 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2201      	movs	r2, #1
 800af62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af64:	2301      	movs	r3, #1
 800af66:	e0a6      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	22c5      	movs	r2, #197	; 0xc5
 800af6c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f7ff fd16 	bl	800a9a0 <SDMMC_GetCommandResponse>
 800af74:	4603      	mov	r3, r0
 800af76:	461a      	mov	r2, r3
 800af78:	7afb      	ldrb	r3, [r7, #11]
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d001      	beq.n	800af82 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af7e:	2301      	movs	r3, #1
 800af80:	e099      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800af82:	2100      	movs	r1, #0
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7ff fd18 	bl	800a9ba <SDMMC_GetResponse>
 800af8a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	4b4e      	ldr	r3, [pc, #312]	; (800b0c8 <SDMMC_GetCmdResp1+0x1d4>)
 800af90:	4013      	ands	r3, r2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d101      	bne.n	800af9a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800af96:	2300      	movs	r3, #0
 800af98:	e08d      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	da02      	bge.n	800afa6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800afa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afa4:	e087      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800afb0:	2340      	movs	r3, #64	; 0x40
 800afb2:	e080      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800afbe:	2380      	movs	r3, #128	; 0x80
 800afc0:	e079      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800afcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afd0:	e071      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800afdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afe0:	e069      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800afec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aff0:	e061      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800affc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b000:	e059      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b00c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b010:	e051      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b01c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b020:	e049      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b02c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b030:	e041      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b03c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b040:	e039      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b04c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b050:	e031      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b05c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b060:	e029      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d002      	beq.n	800b072 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b06c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b070:	e021      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b07c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b080:	e019      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b08c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b090:	e011      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b09c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0a0:	e009      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	f003 0308 	and.w	r3, r3, #8
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b0ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b0b0:	e001      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b0b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd90      	pop	{r4, r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20000018 	.word	0x20000018
 800b0c4:	10624dd3 	.word	0x10624dd3
 800b0c8:	fdffe008 	.word	0xfdffe008

0800b0cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b0cc:	b490      	push	{r4, r7}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0d4:	4b1e      	ldr	r3, [pc, #120]	; (800b150 <SDMMC_GetCmdResp2+0x84>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a1e      	ldr	r2, [pc, #120]	; (800b154 <SDMMC_GetCmdResp2+0x88>)
 800b0da:	fba2 2303 	umull	r2, r3, r2, r3
 800b0de:	0a5b      	lsrs	r3, r3, #9
 800b0e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b0e8:	4623      	mov	r3, r4
 800b0ea:	1e5c      	subs	r4, r3, #1
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d102      	bne.n	800b0f6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0f4:	e026      	b.n	800b144 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b102:	2b00      	cmp	r3, #0
 800b104:	d0f0      	beq.n	800b0e8 <SDMMC_GetCmdResp2+0x1c>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1eb      	bne.n	800b0e8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d004      	beq.n	800b126 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2204      	movs	r2, #4
 800b120:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b122:	2304      	movs	r3, #4
 800b124:	e00e      	b.n	800b144 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d004      	beq.n	800b13c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b138:	2301      	movs	r3, #1
 800b13a:	e003      	b.n	800b144 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	22c5      	movs	r2, #197	; 0xc5
 800b140:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bc90      	pop	{r4, r7}
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	20000018 	.word	0x20000018
 800b154:	10624dd3 	.word	0x10624dd3

0800b158 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b158:	b490      	push	{r4, r7}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b160:	4b18      	ldr	r3, [pc, #96]	; (800b1c4 <SDMMC_GetCmdResp3+0x6c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a18      	ldr	r2, [pc, #96]	; (800b1c8 <SDMMC_GetCmdResp3+0x70>)
 800b166:	fba2 2303 	umull	r2, r3, r2, r3
 800b16a:	0a5b      	lsrs	r3, r3, #9
 800b16c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b170:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b174:	4623      	mov	r3, r4
 800b176:	1e5c      	subs	r4, r3, #1
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d102      	bne.n	800b182 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b17c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b180:	e01b      	b.n	800b1ba <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b186:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d0f0      	beq.n	800b174 <SDMMC_GetCmdResp3+0x1c>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1eb      	bne.n	800b174 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a0:	f003 0304 	and.w	r3, r3, #4
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d004      	beq.n	800b1b2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2204      	movs	r2, #4
 800b1ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1ae:	2304      	movs	r3, #4
 800b1b0:	e003      	b.n	800b1ba <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	22c5      	movs	r2, #197	; 0xc5
 800b1b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bc90      	pop	{r4, r7}
 800b1c2:	4770      	bx	lr
 800b1c4:	20000018 	.word	0x20000018
 800b1c8:	10624dd3 	.word	0x10624dd3

0800b1cc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b1cc:	b590      	push	{r4, r7, lr}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1da:	4b34      	ldr	r3, [pc, #208]	; (800b2ac <SDMMC_GetCmdResp6+0xe0>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a34      	ldr	r2, [pc, #208]	; (800b2b0 <SDMMC_GetCmdResp6+0xe4>)
 800b1e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1e4:	0a5b      	lsrs	r3, r3, #9
 800b1e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ea:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b1ee:	4623      	mov	r3, r4
 800b1f0:	1e5c      	subs	r4, r3, #1
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d102      	bne.n	800b1fc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1fa:	e052      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b200:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0f0      	beq.n	800b1ee <SDMMC_GetCmdResp6+0x22>
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1eb      	bne.n	800b1ee <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21a:	f003 0304 	and.w	r3, r3, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2204      	movs	r2, #4
 800b226:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b228:	2304      	movs	r3, #4
 800b22a:	e03a      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b00      	cmp	r3, #0
 800b236:	d004      	beq.n	800b242 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2201      	movs	r2, #1
 800b23c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b23e:	2301      	movs	r3, #1
 800b240:	e02f      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f7ff fbac 	bl	800a9a0 <SDMMC_GetCommandResponse>
 800b248:	4603      	mov	r3, r0
 800b24a:	461a      	mov	r2, r3
 800b24c:	7afb      	ldrb	r3, [r7, #11]
 800b24e:	4293      	cmp	r3, r2
 800b250:	d001      	beq.n	800b256 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b252:	2301      	movs	r3, #1
 800b254:	e025      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	22c5      	movs	r2, #197	; 0xc5
 800b25a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b25c:	2100      	movs	r1, #0
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f7ff fbab 	bl	800a9ba <SDMMC_GetResponse>
 800b264:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d106      	bne.n	800b27e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	0c1b      	lsrs	r3, r3, #16
 800b274:	b29a      	uxth	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b27a:	2300      	movs	r3, #0
 800b27c:	e011      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b28c:	e009      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b29c:	e001      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b29e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd90      	pop	{r4, r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20000018 	.word	0x20000018
 800b2b0:	10624dd3 	.word	0x10624dd3

0800b2b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b2b4:	b490      	push	{r4, r7}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2bc:	4b21      	ldr	r3, [pc, #132]	; (800b344 <SDMMC_GetCmdResp7+0x90>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a21      	ldr	r2, [pc, #132]	; (800b348 <SDMMC_GetCmdResp7+0x94>)
 800b2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c6:	0a5b      	lsrs	r3, r3, #9
 800b2c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b2d0:	4623      	mov	r3, r4
 800b2d2:	1e5c      	subs	r4, r3, #1
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d102      	bne.n	800b2de <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2dc:	e02c      	b.n	800b338 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0f0      	beq.n	800b2d0 <SDMMC_GetCmdResp7+0x1c>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1eb      	bne.n	800b2d0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fc:	f003 0304 	and.w	r3, r3, #4
 800b300:	2b00      	cmp	r3, #0
 800b302:	d004      	beq.n	800b30e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2204      	movs	r2, #4
 800b308:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b30a:	2304      	movs	r3, #4
 800b30c:	e014      	b.n	800b338 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	d004      	beq.n	800b324 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b320:	2301      	movs	r3, #1
 800b322:	e009      	b.n	800b338 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2240      	movs	r2, #64	; 0x40
 800b334:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b336:	2300      	movs	r3, #0
  
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bc90      	pop	{r4, r7}
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	20000018 	.word	0x20000018
 800b348:	10624dd3 	.word	0x10624dd3

0800b34c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b350:	4904      	ldr	r1, [pc, #16]	; (800b364 <MX_FATFS_Init+0x18>)
 800b352:	4805      	ldr	r0, [pc, #20]	; (800b368 <MX_FATFS_Init+0x1c>)
 800b354:	f000 fa96 	bl	800b884 <FATFS_LinkDriver>
 800b358:	4603      	mov	r3, r0
 800b35a:	461a      	mov	r2, r3
 800b35c:	4b03      	ldr	r3, [pc, #12]	; (800b36c <MX_FATFS_Init+0x20>)
 800b35e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b360:	bf00      	nop
 800b362:	bd80      	pop	{r7, pc}
 800b364:	2000bec0 	.word	0x2000bec0
 800b368:	08023f98 	.word	0x08023f98
 800b36c:	2000bebc 	.word	0x2000bebc

0800b370 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b37a:	f000 f87b 	bl	800b474 <BSP_SD_IsDetected>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b01      	cmp	r3, #1
 800b382:	d001      	beq.n	800b388 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b384:	2302      	movs	r3, #2
 800b386:	e012      	b.n	800b3ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b388:	480b      	ldr	r0, [pc, #44]	; (800b3b8 <BSP_SD_Init+0x48>)
 800b38a:	f7fc fae9 	bl	8007960 <HAL_SD_Init>
 800b38e:	4603      	mov	r3, r0
 800b390:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b392:	79fb      	ldrb	r3, [r7, #7]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d109      	bne.n	800b3ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b39c:	4806      	ldr	r0, [pc, #24]	; (800b3b8 <BSP_SD_Init+0x48>)
 800b39e:	f7fc ff2b 	bl	80081f8 <HAL_SD_ConfigWideBusOperation>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d001      	beq.n	800b3ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b3ac:	79fb      	ldrb	r3, [r7, #7]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	2000b948 	.word	0x2000b948

0800b3bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	68f9      	ldr	r1, [r7, #12]
 800b3d2:	4806      	ldr	r0, [pc, #24]	; (800b3ec <BSP_SD_ReadBlocks_DMA+0x30>)
 800b3d4:	f7fc fb5c 	bl	8007a90 <HAL_SD_ReadBlocks_DMA>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	2000b948 	.word	0x2000b948

0800b3f0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	68f9      	ldr	r1, [r7, #12]
 800b406:	4806      	ldr	r0, [pc, #24]	; (800b420 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b408:	f7fc fc2e 	bl	8007c68 <HAL_SD_WriteBlocks_DMA>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b416:	7dfb      	ldrb	r3, [r7, #23]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	2000b948 	.word	0x2000b948

0800b424 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b428:	4805      	ldr	r0, [pc, #20]	; (800b440 <BSP_SD_GetCardState+0x1c>)
 800b42a:	f7fc ff61 	bl	80082f0 <HAL_SD_GetCardState>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b04      	cmp	r3, #4
 800b432:	bf14      	ite	ne
 800b434:	2301      	movne	r3, #1
 800b436:	2300      	moveq	r3, #0
 800b438:	b2db      	uxtb	r3, r3
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	2000b948 	.word	0x2000b948

0800b444 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b44c:	6879      	ldr	r1, [r7, #4]
 800b44e:	4803      	ldr	r0, [pc, #12]	; (800b45c <BSP_SD_GetCardInfo+0x18>)
 800b450:	f7fc fea6 	bl	80081a0 <HAL_SD_GetCardInfo>
}
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	2000b948 	.word	0x2000b948

0800b460 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b468:	f000 f9b2 	bl	800b7d0 <BSP_SD_ReadCpltCallback>
}
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b47a:	2301      	movs	r3, #1
 800b47c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800b47e:	f000 f80b 	bl	800b498 <BSP_PlatformIsDetected>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b488:	2300      	movs	r3, #0
 800b48a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b48c:	79fb      	ldrb	r3, [r7, #7]
 800b48e:	b2db      	uxtb	r3, r3
}
 800b490:	4618      	mov	r0, r3
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b4a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b4a6:	4806      	ldr	r0, [pc, #24]	; (800b4c0 <BSP_PlatformIsDetected+0x28>)
 800b4a8:	f7f9 fe3a 	bl	8005120 <HAL_GPIO_ReadPin>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800b4b6:	79fb      	ldrb	r3, [r7, #7]
}  
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	40020800 	.word	0x40020800

0800b4c4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b4cc:	f000 fa26 	bl	800b91c <osKernelSysTick>
 800b4d0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b4d2:	e006      	b.n	800b4e2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b4d4:	f7ff ffa6 	bl	800b424 <BSP_SD_GetCardState>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e009      	b.n	800b4f6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b4e2:	f000 fa1b 	bl	800b91c <osKernelSysTick>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d8f0      	bhi.n	800b4d4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b4f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
	...

0800b500 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b50a:	4b0b      	ldr	r3, [pc, #44]	; (800b538 <SD_CheckStatus+0x38>)
 800b50c:	2201      	movs	r2, #1
 800b50e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b510:	f7ff ff88 	bl	800b424 <BSP_SD_GetCardState>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d107      	bne.n	800b52a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b51a:	4b07      	ldr	r3, [pc, #28]	; (800b538 <SD_CheckStatus+0x38>)
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	f023 0301 	bic.w	r3, r3, #1
 800b524:	b2da      	uxtb	r2, r3
 800b526:	4b04      	ldr	r3, [pc, #16]	; (800b538 <SD_CheckStatus+0x38>)
 800b528:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b52a:	4b03      	ldr	r3, [pc, #12]	; (800b538 <SD_CheckStatus+0x38>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	b2db      	uxtb	r3, r3
}
 800b530:	4618      	mov	r0, r3
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	20000021 	.word	0x20000021

0800b53c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b53c:	b590      	push	{r4, r7, lr}
 800b53e:	b087      	sub	sp, #28
 800b540:	af00      	add	r7, sp, #0
 800b542:	4603      	mov	r3, r0
 800b544:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800b546:	4b20      	ldr	r3, [pc, #128]	; (800b5c8 <SD_initialize+0x8c>)
 800b548:	2201      	movs	r2, #1
 800b54a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b54c:	f000 f9da 	bl	800b904 <osKernelRunning>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d030      	beq.n	800b5b8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b556:	f7ff ff0b 	bl	800b370 <BSP_SD_Init>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d107      	bne.n	800b570 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b560:	79fb      	ldrb	r3, [r7, #7]
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff ffcc 	bl	800b500 <SD_CheckStatus>
 800b568:	4603      	mov	r3, r0
 800b56a:	461a      	mov	r2, r3
 800b56c:	4b16      	ldr	r3, [pc, #88]	; (800b5c8 <SD_initialize+0x8c>)
 800b56e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b570:	4b15      	ldr	r3, [pc, #84]	; (800b5c8 <SD_initialize+0x8c>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	b2db      	uxtb	r3, r3
 800b576:	2b01      	cmp	r3, #1
 800b578:	d01e      	beq.n	800b5b8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b57a:	4b14      	ldr	r3, [pc, #80]	; (800b5cc <SD_initialize+0x90>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10e      	bne.n	800b5a0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b582:	4b13      	ldr	r3, [pc, #76]	; (800b5d0 <SD_initialize+0x94>)
 800b584:	f107 0408 	add.w	r4, r7, #8
 800b588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b58a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b58e:	f107 0308 	add.w	r3, r7, #8
 800b592:	2100      	movs	r1, #0
 800b594:	4618      	mov	r0, r3
 800b596:	f000 fa31 	bl	800b9fc <osMessageCreate>
 800b59a:	4602      	mov	r2, r0
 800b59c:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <SD_initialize+0x90>)
 800b59e:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b5a0:	4b0a      	ldr	r3, [pc, #40]	; (800b5cc <SD_initialize+0x90>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d107      	bne.n	800b5b8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b5a8:	4b07      	ldr	r3, [pc, #28]	; (800b5c8 <SD_initialize+0x8c>)
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	f043 0301 	orr.w	r3, r3, #1
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	4b04      	ldr	r3, [pc, #16]	; (800b5c8 <SD_initialize+0x8c>)
 800b5b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b5b8:	4b03      	ldr	r3, [pc, #12]	; (800b5c8 <SD_initialize+0x8c>)
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	b2db      	uxtb	r3, r3
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	371c      	adds	r7, #28
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd90      	pop	{r4, r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20000021 	.word	0x20000021
 800b5cc:	2000038c 	.word	0x2000038c
 800b5d0:	08023910 	.word	0x08023910

0800b5d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7ff ff8d 	bl	800b500 <SD_CheckStatus>
 800b5e6:	4603      	mov	r3, r0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3708      	adds	r7, #8
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08a      	sub	sp, #40	; 0x28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60b9      	str	r1, [r7, #8]
 800b5f8:	607a      	str	r2, [r7, #4]
 800b5fa:	603b      	str	r3, [r7, #0]
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b606:	f247 5030 	movw	r0, #30000	; 0x7530
 800b60a:	f7ff ff5b 	bl	800b4c4 <SD_CheckStatusWithTimeout>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	da02      	bge.n	800b61a <SD_read+0x2a>
  {
    return res;
 800b614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b618:	e032      	b.n	800b680 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	6879      	ldr	r1, [r7, #4]
 800b61e:	68b8      	ldr	r0, [r7, #8]
 800b620:	f7ff fecc 	bl	800b3bc <BSP_SD_ReadBlocks_DMA>
 800b624:	4603      	mov	r3, r0
 800b626:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800b62a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d124      	bne.n	800b67c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b632:	4b15      	ldr	r3, [pc, #84]	; (800b688 <SD_read+0x98>)
 800b634:	6819      	ldr	r1, [r3, #0]
 800b636:	f107 0314 	add.w	r3, r7, #20
 800b63a:	f247 5230 	movw	r2, #30000	; 0x7530
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 fa46 	bl	800bad0 <osMessageGet>

    if (event.status == osEventMessage)
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	2b10      	cmp	r3, #16
 800b648:	d118      	bne.n	800b67c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d115      	bne.n	800b67c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b650:	f000 f964 	bl	800b91c <osKernelSysTick>
 800b654:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b656:	e008      	b.n	800b66a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b658:	f7ff fee4 	bl	800b424 <BSP_SD_GetCardState>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d103      	bne.n	800b66a <SD_read+0x7a>
              {
                res = RES_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b668:	e008      	b.n	800b67c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b66a:	f000 f957 	bl	800b91c <osKernelSysTick>
 800b66e:	4602      	mov	r2, r0
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	f247 522f 	movw	r2, #29999	; 0x752f
 800b678:	4293      	cmp	r3, r2
 800b67a:	d9ed      	bls.n	800b658 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b680:	4618      	mov	r0, r3
 800b682:	3728      	adds	r7, #40	; 0x28
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	2000038c 	.word	0x2000038c

0800b68c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b08a      	sub	sp, #40	; 0x28
 800b690:	af00      	add	r7, sp, #0
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	607a      	str	r2, [r7, #4]
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b6a2:	f247 5030 	movw	r0, #30000	; 0x7530
 800b6a6:	f7ff ff0d 	bl	800b4c4 <SD_CheckStatusWithTimeout>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	da02      	bge.n	800b6b6 <SD_write+0x2a>
  {
    return res;
 800b6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6b4:	e02e      	b.n	800b714 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	6879      	ldr	r1, [r7, #4]
 800b6ba:	68b8      	ldr	r0, [r7, #8]
 800b6bc:	f7ff fe98 	bl	800b3f0 <BSP_SD_WriteBlocks_DMA>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d124      	bne.n	800b710 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b6c6:	4b15      	ldr	r3, [pc, #84]	; (800b71c <SD_write+0x90>)
 800b6c8:	6819      	ldr	r1, [r3, #0]
 800b6ca:	f107 0314 	add.w	r3, r7, #20
 800b6ce:	f247 5230 	movw	r2, #30000	; 0x7530
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 f9fc 	bl	800bad0 <osMessageGet>

    if (event.status == osEventMessage)
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2b10      	cmp	r3, #16
 800b6dc:	d118      	bne.n	800b710 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d115      	bne.n	800b710 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b6e4:	f000 f91a 	bl	800b91c <osKernelSysTick>
 800b6e8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b6ea:	e008      	b.n	800b6fe <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b6ec:	f7ff fe9a 	bl	800b424 <BSP_SD_GetCardState>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d103      	bne.n	800b6fe <SD_write+0x72>
          {
            res = RES_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b6fc:	e008      	b.n	800b710 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b6fe:	f000 f90d 	bl	800b91c <osKernelSysTick>
 800b702:	4602      	mov	r2, r0
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	f247 522f 	movw	r2, #29999	; 0x752f
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d9ed      	bls.n	800b6ec <SD_write+0x60>
    }

  }
#endif

  return res;
 800b710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b714:	4618      	mov	r0, r3
 800b716:	3728      	adds	r7, #40	; 0x28
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	2000038c 	.word	0x2000038c

0800b720 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b08c      	sub	sp, #48	; 0x30
 800b724:	af00      	add	r7, sp, #0
 800b726:	4603      	mov	r3, r0
 800b728:	603a      	str	r2, [r7, #0]
 800b72a:	71fb      	strb	r3, [r7, #7]
 800b72c:	460b      	mov	r3, r1
 800b72e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b736:	4b25      	ldr	r3, [pc, #148]	; (800b7cc <SD_ioctl+0xac>)
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	f003 0301 	and.w	r3, r3, #1
 800b740:	2b00      	cmp	r3, #0
 800b742:	d001      	beq.n	800b748 <SD_ioctl+0x28>
 800b744:	2303      	movs	r3, #3
 800b746:	e03c      	b.n	800b7c2 <SD_ioctl+0xa2>

  switch (cmd)
 800b748:	79bb      	ldrb	r3, [r7, #6]
 800b74a:	2b03      	cmp	r3, #3
 800b74c:	d834      	bhi.n	800b7b8 <SD_ioctl+0x98>
 800b74e:	a201      	add	r2, pc, #4	; (adr r2, 800b754 <SD_ioctl+0x34>)
 800b750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b754:	0800b765 	.word	0x0800b765
 800b758:	0800b76d 	.word	0x0800b76d
 800b75c:	0800b785 	.word	0x0800b785
 800b760:	0800b79f 	.word	0x0800b79f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b764:	2300      	movs	r3, #0
 800b766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b76a:	e028      	b.n	800b7be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b76c:	f107 030c 	add.w	r3, r7, #12
 800b770:	4618      	mov	r0, r3
 800b772:	f7ff fe67 	bl	800b444 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b782:	e01c      	b.n	800b7be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b784:	f107 030c 	add.w	r3, r7, #12
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff fe5b 	bl	800b444 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	b29a      	uxth	r2, r3
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b79c:	e00f      	b.n	800b7be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b79e:	f107 030c 	add.w	r3, r7, #12
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7ff fe4e 	bl	800b444 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	0a5a      	lsrs	r2, r3, #9
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b7b6:	e002      	b.n	800b7be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b7b8:	2304      	movs	r3, #4
 800b7ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b7be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3730      	adds	r7, #48	; 0x30
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20000021 	.word	0x20000021

0800b7d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b7d4:	4b04      	ldr	r3, [pc, #16]	; (800b7e8 <BSP_SD_ReadCpltCallback+0x18>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	2101      	movs	r1, #1
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 f937 	bl	800ba50 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b7e2:	bf00      	nop
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	2000038c 	.word	0x2000038c

0800b7ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b802:	4b1f      	ldr	r3, [pc, #124]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b804:	7a5b      	ldrb	r3, [r3, #9]
 800b806:	b2db      	uxtb	r3, r3
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d131      	bne.n	800b870 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b80c:	4b1c      	ldr	r3, [pc, #112]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b80e:	7a5b      	ldrb	r3, [r3, #9]
 800b810:	b2db      	uxtb	r3, r3
 800b812:	461a      	mov	r2, r3
 800b814:	4b1a      	ldr	r3, [pc, #104]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b816:	2100      	movs	r1, #0
 800b818:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b81a:	4b19      	ldr	r3, [pc, #100]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b81c:	7a5b      	ldrb	r3, [r3, #9]
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	4a17      	ldr	r2, [pc, #92]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4413      	add	r3, r2
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b82a:	4b15      	ldr	r3, [pc, #84]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b82c:	7a5b      	ldrb	r3, [r3, #9]
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	461a      	mov	r2, r3
 800b832:	4b13      	ldr	r3, [pc, #76]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b834:	4413      	add	r3, r2
 800b836:	79fa      	ldrb	r2, [r7, #7]
 800b838:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b83a:	4b11      	ldr	r3, [pc, #68]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b83c:	7a5b      	ldrb	r3, [r3, #9]
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	1c5a      	adds	r2, r3, #1
 800b842:	b2d1      	uxtb	r1, r2
 800b844:	4a0e      	ldr	r2, [pc, #56]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b846:	7251      	strb	r1, [r2, #9]
 800b848:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b84a:	7dbb      	ldrb	r3, [r7, #22]
 800b84c:	3330      	adds	r3, #48	; 0x30
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	3301      	adds	r3, #1
 800b858:	223a      	movs	r2, #58	; 0x3a
 800b85a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	3302      	adds	r3, #2
 800b860:	222f      	movs	r2, #47	; 0x2f
 800b862:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	3303      	adds	r3, #3
 800b868:	2200      	movs	r2, #0
 800b86a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b870:	7dfb      	ldrb	r3, [r7, #23]
}
 800b872:	4618      	mov	r0, r3
 800b874:	371c      	adds	r7, #28
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	20000390 	.word	0x20000390

0800b884 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b88e:	2200      	movs	r2, #0
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff ffaa 	bl	800b7ec <FATFS_LinkDriverEx>
 800b898:	4603      	mov	r3, r0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b085      	sub	sp, #20
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b8b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b8b4:	2b84      	cmp	r3, #132	; 0x84
 800b8b6:	d005      	beq.n	800b8c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b8b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4413      	add	r3, r2
 800b8c0:	3303      	adds	r3, #3
 800b8c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3714      	adds	r7, #20
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b083      	sub	sp, #12
 800b8d6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8d8:	f3ef 8305 	mrs	r3, IPSR
 800b8dc:	607b      	str	r3, [r7, #4]
  return(result);
 800b8de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	bf14      	ite	ne
 800b8e4:	2301      	movne	r3, #1
 800b8e6:	2300      	moveq	r3, #0
 800b8e8:	b2db      	uxtb	r3, r3
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	370c      	adds	r7, #12
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b8fa:	f001 faff 	bl	800cefc <vTaskStartScheduler>
  
  return osOK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	bd80      	pop	{r7, pc}

0800b904 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800b908:	f001 ff4a 	bl	800d7a0 <xTaskGetSchedulerState>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d101      	bne.n	800b916 <osKernelRunning+0x12>
    return 0;
 800b912:	2300      	movs	r3, #0
 800b914:	e000      	b.n	800b918 <osKernelRunning+0x14>
  else
    return 1;
 800b916:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800b918:	4618      	mov	r0, r3
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b920:	f7ff ffd7 	bl	800b8d2 <inHandlerMode>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d003      	beq.n	800b932 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b92a:	f001 fc05 	bl	800d138 <xTaskGetTickCountFromISR>
 800b92e:	4603      	mov	r3, r0
 800b930:	e002      	b.n	800b938 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b932:	f001 fbf1 	bl	800d118 <xTaskGetTickCount>
 800b936:	4603      	mov	r3, r0
  }
}
 800b938:	4618      	mov	r0, r3
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b93e:	b089      	sub	sp, #36	; 0x24
 800b940:	af04      	add	r7, sp, #16
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d020      	beq.n	800b990 <osThreadCreate+0x54>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d01c      	beq.n	800b990 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685c      	ldr	r4, [r3, #4]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681d      	ldr	r5, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	691e      	ldr	r6, [r3, #16]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b968:	4618      	mov	r0, r3
 800b96a:	f7ff ff9a 	bl	800b8a2 <makeFreeRtosPriority>
 800b96e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b978:	9202      	str	r2, [sp, #8]
 800b97a:	9301      	str	r3, [sp, #4]
 800b97c:	9100      	str	r1, [sp, #0]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	4632      	mov	r2, r6
 800b982:	4629      	mov	r1, r5
 800b984:	4620      	mov	r0, r4
 800b986:	f001 f8e0 	bl	800cb4a <xTaskCreateStatic>
 800b98a:	4603      	mov	r3, r0
 800b98c:	60fb      	str	r3, [r7, #12]
 800b98e:	e01c      	b.n	800b9ca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685c      	ldr	r4, [r3, #4]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b99c:	b29e      	uxth	r6, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff ff7c 	bl	800b8a2 <makeFreeRtosPriority>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	f107 030c 	add.w	r3, r7, #12
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	9200      	str	r2, [sp, #0]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	4632      	mov	r2, r6
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f001 f925 	bl	800cc0a <xTaskCreate>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d001      	beq.n	800b9ca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	e000      	b.n	800b9cc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b9d4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <osDelay+0x16>
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	e000      	b.n	800b9ec <osDelay+0x18>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f001 fa4f 	bl	800ce90 <vTaskDelay>
  
  return osOK;
 800b9f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b9fc:	b590      	push	{r4, r7, lr}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af02      	add	r7, sp, #8
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d012      	beq.n	800ba34 <osMessageCreate+0x38>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00e      	beq.n	800ba34 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6818      	ldr	r0, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6859      	ldr	r1, [r3, #4]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	689a      	ldr	r2, [r3, #8]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68dc      	ldr	r4, [r3, #12]
 800ba26:	2300      	movs	r3, #0
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	4623      	mov	r3, r4
 800ba2c:	f000 f9e2 	bl	800bdf4 <xQueueGenericCreateStatic>
 800ba30:	4603      	mov	r3, r0
 800ba32:	e008      	b.n	800ba46 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6818      	ldr	r0, [r3, #0]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	4619      	mov	r1, r3
 800ba40:	f000 fa55 	bl	800beee <xQueueGenericCreate>
 800ba44:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd90      	pop	{r4, r7, pc}
	...

0800ba50 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d101      	bne.n	800ba6e <osMessagePut+0x1e>
    ticks = 1;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ba6e:	f7ff ff30 	bl	800b8d2 <inHandlerMode>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d018      	beq.n	800baaa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ba78:	f107 0210 	add.w	r2, r7, #16
 800ba7c:	f107 0108 	add.w	r1, r7, #8
 800ba80:	2300      	movs	r3, #0
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f000 fb96 	bl	800c1b4 <xQueueGenericSendFromISR>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d001      	beq.n	800ba92 <osMessagePut+0x42>
      return osErrorOS;
 800ba8e:	23ff      	movs	r3, #255	; 0xff
 800ba90:	e018      	b.n	800bac4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d014      	beq.n	800bac2 <osMessagePut+0x72>
 800ba98:	4b0c      	ldr	r3, [pc, #48]	; (800bacc <osMessagePut+0x7c>)
 800ba9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba9e:	601a      	str	r2, [r3, #0]
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	e00b      	b.n	800bac2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800baaa:	f107 0108 	add.w	r1, r7, #8
 800baae:	2300      	movs	r3, #0
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f000 fa7c 	bl	800bfb0 <xQueueGenericSend>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b01      	cmp	r3, #1
 800babc:	d001      	beq.n	800bac2 <osMessagePut+0x72>
      return osErrorOS;
 800babe:	23ff      	movs	r3, #255	; 0xff
 800bac0:	e000      	b.n	800bac4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3718      	adds	r7, #24
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	e000ed04 	.word	0xe000ed04

0800bad0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bad0:	b590      	push	{r4, r7, lr}
 800bad2:	b08b      	sub	sp, #44	; 0x2c
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bae0:	2300      	movs	r3, #0
 800bae2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10a      	bne.n	800bb00 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800baea:	2380      	movs	r3, #128	; 0x80
 800baec:	617b      	str	r3, [r7, #20]
    return event;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	461c      	mov	r4, r3
 800baf2:	f107 0314 	add.w	r3, r7, #20
 800baf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bafa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bafe:	e054      	b.n	800bbaa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bb00:	2300      	movs	r3, #0
 800bb02:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bb04:	2300      	movs	r3, #0
 800bb06:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0e:	d103      	bne.n	800bb18 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bb10:	f04f 33ff 	mov.w	r3, #4294967295
 800bb14:	627b      	str	r3, [r7, #36]	; 0x24
 800bb16:	e009      	b.n	800bb2c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d006      	beq.n	800bb2c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d101      	bne.n	800bb2c <osMessageGet+0x5c>
      ticks = 1;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bb2c:	f7ff fed1 	bl	800b8d2 <inHandlerMode>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d01c      	beq.n	800bb70 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bb36:	f107 0220 	add.w	r2, r7, #32
 800bb3a:	f107 0314 	add.w	r3, r7, #20
 800bb3e:	3304      	adds	r3, #4
 800bb40:	4619      	mov	r1, r3
 800bb42:	68b8      	ldr	r0, [r7, #8]
 800bb44:	f000 fe56 	bl	800c7f4 <xQueueReceiveFromISR>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d102      	bne.n	800bb54 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bb4e:	2310      	movs	r3, #16
 800bb50:	617b      	str	r3, [r7, #20]
 800bb52:	e001      	b.n	800bb58 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bb58:	6a3b      	ldr	r3, [r7, #32]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d01d      	beq.n	800bb9a <osMessageGet+0xca>
 800bb5e:	4b15      	ldr	r3, [pc, #84]	; (800bbb4 <osMessageGet+0xe4>)
 800bb60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	e014      	b.n	800bb9a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bb70:	f107 0314 	add.w	r3, r7, #20
 800bb74:	3304      	adds	r3, #4
 800bb76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb78:	4619      	mov	r1, r3
 800bb7a:	68b8      	ldr	r0, [r7, #8]
 800bb7c:	f000 fc48 	bl	800c410 <xQueueReceive>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d102      	bne.n	800bb8c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bb86:	2310      	movs	r3, #16
 800bb88:	617b      	str	r3, [r7, #20]
 800bb8a:	e006      	b.n	800bb9a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d101      	bne.n	800bb96 <osMessageGet+0xc6>
 800bb92:	2300      	movs	r3, #0
 800bb94:	e000      	b.n	800bb98 <osMessageGet+0xc8>
 800bb96:	2340      	movs	r3, #64	; 0x40
 800bb98:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	461c      	mov	r4, r3
 800bb9e:	f107 0314 	add.w	r3, r7, #20
 800bba2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	372c      	adds	r7, #44	; 0x2c
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd90      	pop	{r4, r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	e000ed04 	.word	0xe000ed04

0800bbb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f103 0208 	add.w	r2, r3, #8
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f103 0208 	add.w	r2, r3, #8
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f103 0208 	add.w	r2, r3, #8
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bbec:	bf00      	nop
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc06:	bf00      	nop
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr

0800bc12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc12:	b480      	push	{r7}
 800bc14:	b085      	sub	sp, #20
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
 800bc1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	689a      	ldr	r2, [r3, #8]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	683a      	ldr	r2, [r7, #0]
 800bc3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	1c5a      	adds	r2, r3, #1
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	601a      	str	r2, [r3, #0]
}
 800bc4e:	bf00      	nop
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b085      	sub	sp, #20
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc70:	d103      	bne.n	800bc7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	e00c      	b.n	800bc94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	3308      	adds	r3, #8
 800bc7e:	60fb      	str	r3, [r7, #12]
 800bc80:	e002      	b.n	800bc88 <vListInsert+0x2e>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	60fb      	str	r3, [r7, #12]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d2f6      	bcs.n	800bc82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	601a      	str	r2, [r3, #0]
}
 800bcc0:	bf00      	nop
 800bcc2:	3714      	adds	r7, #20
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	691b      	ldr	r3, [r3, #16]
 800bcd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	6892      	ldr	r2, [r2, #8]
 800bce2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	6852      	ldr	r2, [r2, #4]
 800bcec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d103      	bne.n	800bd00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	689a      	ldr	r2, [r3, #8]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	1e5a      	subs	r2, r3, #1
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10b      	bne.n	800bd4c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	b672      	cpsid	i
 800bd3a:	f383 8811 	msr	BASEPRI, r3
 800bd3e:	f3bf 8f6f 	isb	sy
 800bd42:	f3bf 8f4f 	dsb	sy
 800bd46:	b662      	cpsie	i
 800bd48:	60bb      	str	r3, [r7, #8]
 800bd4a:	e7fe      	b.n	800bd4a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800bd4c:	f002 f86c 	bl	800de28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd58:	68f9      	ldr	r1, [r7, #12]
 800bd5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd5c:	fb01 f303 	mul.w	r3, r1, r3
 800bd60:	441a      	add	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	68f9      	ldr	r1, [r7, #12]
 800bd80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd82:	fb01 f303 	mul.w	r3, r1, r3
 800bd86:	441a      	add	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	22ff      	movs	r2, #255	; 0xff
 800bd90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	22ff      	movs	r2, #255	; 0xff
 800bd98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d114      	bne.n	800bdcc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d01a      	beq.n	800bde0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3310      	adds	r3, #16
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f001 fb36 	bl	800d420 <xTaskRemoveFromEventList>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d012      	beq.n	800bde0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdba:	4b0d      	ldr	r3, [pc, #52]	; (800bdf0 <xQueueGenericReset+0xd0>)
 800bdbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc0:	601a      	str	r2, [r3, #0]
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	e009      	b.n	800bde0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	3310      	adds	r3, #16
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff fef1 	bl	800bbb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3324      	adds	r3, #36	; 0x24
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff feec 	bl	800bbb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bde0:	f002 f854 	bl	800de8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bde4:	2301      	movs	r3, #1
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	e000ed04 	.word	0xe000ed04

0800bdf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b08e      	sub	sp, #56	; 0x38
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10b      	bne.n	800be20 <xQueueGenericCreateStatic+0x2c>
 800be08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0c:	b672      	cpsid	i
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	b662      	cpsie	i
 800be1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800be1e:	e7fe      	b.n	800be1e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10b      	bne.n	800be3e <xQueueGenericCreateStatic+0x4a>
 800be26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2a:	b672      	cpsid	i
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	b662      	cpsie	i
 800be3a:	627b      	str	r3, [r7, #36]	; 0x24
 800be3c:	e7fe      	b.n	800be3c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d002      	beq.n	800be4a <xQueueGenericCreateStatic+0x56>
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <xQueueGenericCreateStatic+0x5a>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e000      	b.n	800be50 <xQueueGenericCreateStatic+0x5c>
 800be4e:	2300      	movs	r3, #0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d10b      	bne.n	800be6c <xQueueGenericCreateStatic+0x78>
 800be54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be58:	b672      	cpsid	i
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	b662      	cpsie	i
 800be68:	623b      	str	r3, [r7, #32]
 800be6a:	e7fe      	b.n	800be6a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d102      	bne.n	800be78 <xQueueGenericCreateStatic+0x84>
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <xQueueGenericCreateStatic+0x88>
 800be78:	2301      	movs	r3, #1
 800be7a:	e000      	b.n	800be7e <xQueueGenericCreateStatic+0x8a>
 800be7c:	2300      	movs	r3, #0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10b      	bne.n	800be9a <xQueueGenericCreateStatic+0xa6>
 800be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be86:	b672      	cpsid	i
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	b662      	cpsie	i
 800be96:	61fb      	str	r3, [r7, #28]
 800be98:	e7fe      	b.n	800be98 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800be9a:	2348      	movs	r3, #72	; 0x48
 800be9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b48      	cmp	r3, #72	; 0x48
 800bea2:	d00b      	beq.n	800bebc <xQueueGenericCreateStatic+0xc8>
 800bea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea8:	b672      	cpsid	i
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	b662      	cpsie	i
 800beb8:	61bb      	str	r3, [r7, #24]
 800beba:	e7fe      	b.n	800beba <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bebc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00d      	beq.n	800bee4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beca:	2201      	movs	r2, #1
 800becc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bed0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	4613      	mov	r3, r2
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	68b9      	ldr	r1, [r7, #8]
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f000 f846 	bl	800bf70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3730      	adds	r7, #48	; 0x30
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b08a      	sub	sp, #40	; 0x28
 800bef2:	af02      	add	r7, sp, #8
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	60b9      	str	r1, [r7, #8]
 800bef8:	4613      	mov	r3, r2
 800befa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10b      	bne.n	800bf1a <xQueueGenericCreate+0x2c>
 800bf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf06:	b672      	cpsid	i
 800bf08:	f383 8811 	msr	BASEPRI, r3
 800bf0c:	f3bf 8f6f 	isb	sy
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	b662      	cpsie	i
 800bf16:	613b      	str	r3, [r7, #16]
 800bf18:	e7fe      	b.n	800bf18 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d102      	bne.n	800bf26 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bf20:	2300      	movs	r3, #0
 800bf22:	61fb      	str	r3, [r7, #28]
 800bf24:	e004      	b.n	800bf30 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	fb02 f303 	mul.w	r3, r2, r3
 800bf2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	3348      	adds	r3, #72	; 0x48
 800bf34:	4618      	mov	r0, r3
 800bf36:	f002 f899 	bl	800e06c <pvPortMalloc>
 800bf3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d011      	beq.n	800bf66 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	3348      	adds	r3, #72	; 0x48
 800bf4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf54:	79fa      	ldrb	r2, [r7, #7]
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	697a      	ldr	r2, [r7, #20]
 800bf5e:	68b9      	ldr	r1, [r7, #8]
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f000 f805 	bl	800bf70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf66:	69bb      	ldr	r3, [r7, #24]
	}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3720      	adds	r7, #32
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
 800bf7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d103      	bne.n	800bf8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	69ba      	ldr	r2, [r7, #24]
 800bf88:	601a      	str	r2, [r3, #0]
 800bf8a:	e002      	b.n	800bf92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	68ba      	ldr	r2, [r7, #8]
 800bf9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf9e:	2101      	movs	r1, #1
 800bfa0:	69b8      	ldr	r0, [r7, #24]
 800bfa2:	f7ff febd 	bl	800bd20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bfa6:	bf00      	nop
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
	...

0800bfb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08e      	sub	sp, #56	; 0x38
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10b      	bne.n	800bfe4 <xQueueGenericSend+0x34>
 800bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd0:	b672      	cpsid	i
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	b662      	cpsie	i
 800bfe0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfe2:	e7fe      	b.n	800bfe2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d103      	bne.n	800bff2 <xQueueGenericSend+0x42>
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d101      	bne.n	800bff6 <xQueueGenericSend+0x46>
 800bff2:	2301      	movs	r3, #1
 800bff4:	e000      	b.n	800bff8 <xQueueGenericSend+0x48>
 800bff6:	2300      	movs	r3, #0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d10b      	bne.n	800c014 <xQueueGenericSend+0x64>
 800bffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c000:	b672      	cpsid	i
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	b662      	cpsie	i
 800c010:	627b      	str	r3, [r7, #36]	; 0x24
 800c012:	e7fe      	b.n	800c012 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	2b02      	cmp	r3, #2
 800c018:	d103      	bne.n	800c022 <xQueueGenericSend+0x72>
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d101      	bne.n	800c026 <xQueueGenericSend+0x76>
 800c022:	2301      	movs	r3, #1
 800c024:	e000      	b.n	800c028 <xQueueGenericSend+0x78>
 800c026:	2300      	movs	r3, #0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10b      	bne.n	800c044 <xQueueGenericSend+0x94>
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	b672      	cpsid	i
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	b662      	cpsie	i
 800c040:	623b      	str	r3, [r7, #32]
 800c042:	e7fe      	b.n	800c042 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c044:	f001 fbac 	bl	800d7a0 <xTaskGetSchedulerState>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d102      	bne.n	800c054 <xQueueGenericSend+0xa4>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d101      	bne.n	800c058 <xQueueGenericSend+0xa8>
 800c054:	2301      	movs	r3, #1
 800c056:	e000      	b.n	800c05a <xQueueGenericSend+0xaa>
 800c058:	2300      	movs	r3, #0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10b      	bne.n	800c076 <xQueueGenericSend+0xc6>
 800c05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c062:	b672      	cpsid	i
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	b662      	cpsie	i
 800c072:	61fb      	str	r3, [r7, #28]
 800c074:	e7fe      	b.n	800c074 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c076:	f001 fed7 	bl	800de28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c082:	429a      	cmp	r2, r3
 800c084:	d302      	bcc.n	800c08c <xQueueGenericSend+0xdc>
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d129      	bne.n	800c0e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	68b9      	ldr	r1, [r7, #8]
 800c090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c092:	f000 fc4a 	bl	800c92a <prvCopyDataToQueue>
 800c096:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d010      	beq.n	800c0c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a2:	3324      	adds	r3, #36	; 0x24
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f001 f9bb 	bl	800d420 <xTaskRemoveFromEventList>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d013      	beq.n	800c0d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c0b0:	4b3f      	ldr	r3, [pc, #252]	; (800c1b0 <xQueueGenericSend+0x200>)
 800c0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0b6:	601a      	str	r2, [r3, #0]
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	e00a      	b.n	800c0d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d007      	beq.n	800c0d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c0c8:	4b39      	ldr	r3, [pc, #228]	; (800c1b0 <xQueueGenericSend+0x200>)
 800c0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c0d8:	f001 fed8 	bl	800de8c <vPortExitCritical>
				return pdPASS;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e063      	b.n	800c1a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d103      	bne.n	800c0ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0e6:	f001 fed1 	bl	800de8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	e05c      	b.n	800c1a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d106      	bne.n	800c102 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0f4:	f107 0314 	add.w	r3, r7, #20
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f001 f9f5 	bl	800d4e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0fe:	2301      	movs	r3, #1
 800c100:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c102:	f001 fec3 	bl	800de8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c106:	f000 ff5b 	bl	800cfc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c10a:	f001 fe8d 	bl	800de28 <vPortEnterCritical>
 800c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c114:	b25b      	sxtb	r3, r3
 800c116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11a:	d103      	bne.n	800c124 <xQueueGenericSend+0x174>
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c12a:	b25b      	sxtb	r3, r3
 800c12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c130:	d103      	bne.n	800c13a <xQueueGenericSend+0x18a>
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	2200      	movs	r2, #0
 800c136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c13a:	f001 fea7 	bl	800de8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c13e:	1d3a      	adds	r2, r7, #4
 800c140:	f107 0314 	add.w	r3, r7, #20
 800c144:	4611      	mov	r1, r2
 800c146:	4618      	mov	r0, r3
 800c148:	f001 f9e4 	bl	800d514 <xTaskCheckForTimeOut>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d124      	bne.n	800c19c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c154:	f000 fce1 	bl	800cb1a <prvIsQueueFull>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d018      	beq.n	800c190 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c160:	3310      	adds	r3, #16
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	4611      	mov	r1, r2
 800c166:	4618      	mov	r0, r3
 800c168:	f001 f934 	bl	800d3d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c16c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c16e:	f000 fc6c 	bl	800ca4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c172:	f000 ff33 	bl	800cfdc <xTaskResumeAll>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f47f af7c 	bne.w	800c076 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c17e:	4b0c      	ldr	r3, [pc, #48]	; (800c1b0 <xQueueGenericSend+0x200>)
 800c180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c184:	601a      	str	r2, [r3, #0]
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	e772      	b.n	800c076 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c192:	f000 fc5a 	bl	800ca4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c196:	f000 ff21 	bl	800cfdc <xTaskResumeAll>
 800c19a:	e76c      	b.n	800c076 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c19e:	f000 fc54 	bl	800ca4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1a2:	f000 ff1b 	bl	800cfdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c1a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3738      	adds	r7, #56	; 0x38
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	e000ed04 	.word	0xe000ed04

0800c1b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08e      	sub	sp, #56	; 0x38
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10b      	bne.n	800c1e4 <xQueueGenericSendFromISR+0x30>
 800c1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d0:	b672      	cpsid	i
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	b662      	cpsie	i
 800c1e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c1e2:	e7fe      	b.n	800c1e2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d103      	bne.n	800c1f2 <xQueueGenericSendFromISR+0x3e>
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <xQueueGenericSendFromISR+0x42>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e000      	b.n	800c1f8 <xQueueGenericSendFromISR+0x44>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10b      	bne.n	800c214 <xQueueGenericSendFromISR+0x60>
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	b672      	cpsid	i
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	b662      	cpsie	i
 800c210:	623b      	str	r3, [r7, #32]
 800c212:	e7fe      	b.n	800c212 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2b02      	cmp	r3, #2
 800c218:	d103      	bne.n	800c222 <xQueueGenericSendFromISR+0x6e>
 800c21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d101      	bne.n	800c226 <xQueueGenericSendFromISR+0x72>
 800c222:	2301      	movs	r3, #1
 800c224:	e000      	b.n	800c228 <xQueueGenericSendFromISR+0x74>
 800c226:	2300      	movs	r3, #0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10b      	bne.n	800c244 <xQueueGenericSendFromISR+0x90>
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	b672      	cpsid	i
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	b662      	cpsie	i
 800c240:	61fb      	str	r3, [r7, #28]
 800c242:	e7fe      	b.n	800c242 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c244:	f001 fed0 	bl	800dfe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c248:	f3ef 8211 	mrs	r2, BASEPRI
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	b672      	cpsid	i
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	b662      	cpsie	i
 800c260:	61ba      	str	r2, [r7, #24]
 800c262:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c264:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c266:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c270:	429a      	cmp	r2, r3
 800c272:	d302      	bcc.n	800c27a <xQueueGenericSendFromISR+0xc6>
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	2b02      	cmp	r3, #2
 800c278:	d12c      	bne.n	800c2d4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c284:	683a      	ldr	r2, [r7, #0]
 800c286:	68b9      	ldr	r1, [r7, #8]
 800c288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c28a:	f000 fb4e 	bl	800c92a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c28e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c296:	d112      	bne.n	800c2be <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d016      	beq.n	800c2ce <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	3324      	adds	r3, #36	; 0x24
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f001 f8bb 	bl	800d420 <xTaskRemoveFromEventList>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00e      	beq.n	800c2ce <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00b      	beq.n	800c2ce <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	601a      	str	r2, [r3, #0]
 800c2bc:	e007      	b.n	800c2ce <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	b25a      	sxtb	r2, r3
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c2d2:	e001      	b.n	800c2d8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3738      	adds	r7, #56	; 0x38
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08e      	sub	sp, #56	; 0x38
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10b      	bne.n	800c318 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c304:	b672      	cpsid	i
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	b662      	cpsie	i
 800c314:	623b      	str	r3, [r7, #32]
 800c316:	e7fe      	b.n	800c316 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00b      	beq.n	800c338 <xQueueGiveFromISR+0x4c>
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	b672      	cpsid	i
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	b662      	cpsie	i
 800c334:	61fb      	str	r3, [r7, #28]
 800c336:	e7fe      	b.n	800c336 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d103      	bne.n	800c348 <xQueueGiveFromISR+0x5c>
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d101      	bne.n	800c34c <xQueueGiveFromISR+0x60>
 800c348:	2301      	movs	r3, #1
 800c34a:	e000      	b.n	800c34e <xQueueGiveFromISR+0x62>
 800c34c:	2300      	movs	r3, #0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10b      	bne.n	800c36a <xQueueGiveFromISR+0x7e>
 800c352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c356:	b672      	cpsid	i
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	b662      	cpsie	i
 800c366:	61bb      	str	r3, [r7, #24]
 800c368:	e7fe      	b.n	800c368 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c36a:	f001 fe3d 	bl	800dfe8 <vPortValidateInterruptPriority>
	__asm volatile
 800c36e:	f3ef 8211 	mrs	r2, BASEPRI
 800c372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c376:	b672      	cpsid	i
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	b662      	cpsie	i
 800c386:	617a      	str	r2, [r7, #20]
 800c388:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c38a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c38c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c392:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d22b      	bcs.n	800c3f6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3aa:	1c5a      	adds	r2, r3, #1
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c3b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b8:	d112      	bne.n	800c3e0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d016      	beq.n	800c3f0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c4:	3324      	adds	r3, #36	; 0x24
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f001 f82a 	bl	800d420 <xTaskRemoveFromEventList>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00e      	beq.n	800c3f0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00b      	beq.n	800c3f0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	601a      	str	r2, [r3, #0]
 800c3de:	e007      	b.n	800c3f0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	b25a      	sxtb	r2, r3
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	637b      	str	r3, [r7, #52]	; 0x34
 800c3f4:	e001      	b.n	800c3fa <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c406:	4618      	mov	r0, r3
 800c408:	3738      	adds	r7, #56	; 0x38
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
	...

0800c410 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b08c      	sub	sp, #48	; 0x30
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c41c:	2300      	movs	r3, #0
 800c41e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10b      	bne.n	800c442 <xQueueReceive+0x32>
	__asm volatile
 800c42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42e:	b672      	cpsid	i
 800c430:	f383 8811 	msr	BASEPRI, r3
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	b662      	cpsie	i
 800c43e:	623b      	str	r3, [r7, #32]
 800c440:	e7fe      	b.n	800c440 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d103      	bne.n	800c450 <xQueueReceive+0x40>
 800c448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d101      	bne.n	800c454 <xQueueReceive+0x44>
 800c450:	2301      	movs	r3, #1
 800c452:	e000      	b.n	800c456 <xQueueReceive+0x46>
 800c454:	2300      	movs	r3, #0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10b      	bne.n	800c472 <xQueueReceive+0x62>
 800c45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45e:	b672      	cpsid	i
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	b662      	cpsie	i
 800c46e:	61fb      	str	r3, [r7, #28]
 800c470:	e7fe      	b.n	800c470 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c472:	f001 f995 	bl	800d7a0 <xTaskGetSchedulerState>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d102      	bne.n	800c482 <xQueueReceive+0x72>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d101      	bne.n	800c486 <xQueueReceive+0x76>
 800c482:	2301      	movs	r3, #1
 800c484:	e000      	b.n	800c488 <xQueueReceive+0x78>
 800c486:	2300      	movs	r3, #0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10b      	bne.n	800c4a4 <xQueueReceive+0x94>
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	b672      	cpsid	i
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	b662      	cpsie	i
 800c4a0:	61bb      	str	r3, [r7, #24]
 800c4a2:	e7fe      	b.n	800c4a2 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4a4:	f001 fcc0 	bl	800de28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d01f      	beq.n	800c4f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4b4:	68b9      	ldr	r1, [r7, #8]
 800c4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b8:	f000 faa1 	bl	800c9fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	1e5a      	subs	r2, r3, #1
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00f      	beq.n	800c4ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ce:	3310      	adds	r3, #16
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 ffa5 	bl	800d420 <xTaskRemoveFromEventList>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d007      	beq.n	800c4ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c4dc:	4b3c      	ldr	r3, [pc, #240]	; (800c5d0 <xQueueReceive+0x1c0>)
 800c4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4ec:	f001 fcce 	bl	800de8c <vPortExitCritical>
				return pdPASS;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e069      	b.n	800c5c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d103      	bne.n	800c502 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4fa:	f001 fcc7 	bl	800de8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c4fe:	2300      	movs	r3, #0
 800c500:	e062      	b.n	800c5c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d106      	bne.n	800c516 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c508:	f107 0310 	add.w	r3, r7, #16
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 ffeb 	bl	800d4e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c512:	2301      	movs	r3, #1
 800c514:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c516:	f001 fcb9 	bl	800de8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c51a:	f000 fd51 	bl	800cfc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c51e:	f001 fc83 	bl	800de28 <vPortEnterCritical>
 800c522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c528:	b25b      	sxtb	r3, r3
 800c52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c52e:	d103      	bne.n	800c538 <xQueueReceive+0x128>
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c532:	2200      	movs	r2, #0
 800c534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c53e:	b25b      	sxtb	r3, r3
 800c540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c544:	d103      	bne.n	800c54e <xQueueReceive+0x13e>
 800c546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c54e:	f001 fc9d 	bl	800de8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c552:	1d3a      	adds	r2, r7, #4
 800c554:	f107 0310 	add.w	r3, r7, #16
 800c558:	4611      	mov	r1, r2
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 ffda 	bl	800d514 <xTaskCheckForTimeOut>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d123      	bne.n	800c5ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c568:	f000 fac1 	bl	800caee <prvIsQueueEmpty>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d017      	beq.n	800c5a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c574:	3324      	adds	r3, #36	; 0x24
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	4611      	mov	r1, r2
 800c57a:	4618      	mov	r0, r3
 800c57c:	f000 ff2a 	bl	800d3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c582:	f000 fa62 	bl	800ca4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c586:	f000 fd29 	bl	800cfdc <xTaskResumeAll>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d189      	bne.n	800c4a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c590:	4b0f      	ldr	r3, [pc, #60]	; (800c5d0 <xQueueReceive+0x1c0>)
 800c592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	e780      	b.n	800c4a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c5a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5a4:	f000 fa51 	bl	800ca4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5a8:	f000 fd18 	bl	800cfdc <xTaskResumeAll>
 800c5ac:	e77a      	b.n	800c4a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c5ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5b0:	f000 fa4b 	bl	800ca4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5b4:	f000 fd12 	bl	800cfdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5ba:	f000 fa98 	bl	800caee <prvIsQueueEmpty>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f43f af6f 	beq.w	800c4a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c5c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3730      	adds	r7, #48	; 0x30
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	e000ed04 	.word	0xe000ed04

0800c5d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08e      	sub	sp, #56	; 0x38
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10b      	bne.n	800c608 <xQueueSemaphoreTake+0x34>
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	b672      	cpsid	i
 800c5f6:	f383 8811 	msr	BASEPRI, r3
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	b662      	cpsie	i
 800c604:	623b      	str	r3, [r7, #32]
 800c606:	e7fe      	b.n	800c606 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00b      	beq.n	800c628 <xQueueSemaphoreTake+0x54>
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	b672      	cpsid	i
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	b662      	cpsie	i
 800c624:	61fb      	str	r3, [r7, #28]
 800c626:	e7fe      	b.n	800c626 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c628:	f001 f8ba 	bl	800d7a0 <xTaskGetSchedulerState>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d102      	bne.n	800c638 <xQueueSemaphoreTake+0x64>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d101      	bne.n	800c63c <xQueueSemaphoreTake+0x68>
 800c638:	2301      	movs	r3, #1
 800c63a:	e000      	b.n	800c63e <xQueueSemaphoreTake+0x6a>
 800c63c:	2300      	movs	r3, #0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d10b      	bne.n	800c65a <xQueueSemaphoreTake+0x86>
 800c642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c646:	b672      	cpsid	i
 800c648:	f383 8811 	msr	BASEPRI, r3
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	b662      	cpsie	i
 800c656:	61bb      	str	r3, [r7, #24]
 800c658:	e7fe      	b.n	800c658 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c65a:	f001 fbe5 	bl	800de28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c662:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c666:	2b00      	cmp	r3, #0
 800c668:	d024      	beq.n	800c6b4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66c:	1e5a      	subs	r2, r3, #1
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c670:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d104      	bne.n	800c684 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c67a:	f001 fa53 	bl	800db24 <pvTaskIncrementMutexHeldCount>
 800c67e:	4602      	mov	r2, r0
 800c680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c682:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00f      	beq.n	800c6ac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68e:	3310      	adds	r3, #16
 800c690:	4618      	mov	r0, r3
 800c692:	f000 fec5 	bl	800d420 <xTaskRemoveFromEventList>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d007      	beq.n	800c6ac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c69c:	4b54      	ldr	r3, [pc, #336]	; (800c7f0 <xQueueSemaphoreTake+0x21c>)
 800c69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6ac:	f001 fbee 	bl	800de8c <vPortExitCritical>
				return pdPASS;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e098      	b.n	800c7e6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d112      	bne.n	800c6e0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00b      	beq.n	800c6d8 <xQueueSemaphoreTake+0x104>
 800c6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c4:	b672      	cpsid	i
 800c6c6:	f383 8811 	msr	BASEPRI, r3
 800c6ca:	f3bf 8f6f 	isb	sy
 800c6ce:	f3bf 8f4f 	dsb	sy
 800c6d2:	b662      	cpsie	i
 800c6d4:	617b      	str	r3, [r7, #20]
 800c6d6:	e7fe      	b.n	800c6d6 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c6d8:	f001 fbd8 	bl	800de8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	e082      	b.n	800c7e6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d106      	bne.n	800c6f4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6e6:	f107 030c 	add.w	r3, r7, #12
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 fefc 	bl	800d4e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6f4:	f001 fbca 	bl	800de8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6f8:	f000 fc62 	bl	800cfc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6fc:	f001 fb94 	bl	800de28 <vPortEnterCritical>
 800c700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c706:	b25b      	sxtb	r3, r3
 800c708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70c:	d103      	bne.n	800c716 <xQueueSemaphoreTake+0x142>
 800c70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c710:	2200      	movs	r2, #0
 800c712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c71c:	b25b      	sxtb	r3, r3
 800c71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c722:	d103      	bne.n	800c72c <xQueueSemaphoreTake+0x158>
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	2200      	movs	r2, #0
 800c728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c72c:	f001 fbae 	bl	800de8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c730:	463a      	mov	r2, r7
 800c732:	f107 030c 	add.w	r3, r7, #12
 800c736:	4611      	mov	r1, r2
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 feeb 	bl	800d514 <xTaskCheckForTimeOut>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d132      	bne.n	800c7aa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c746:	f000 f9d2 	bl	800caee <prvIsQueueEmpty>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d026      	beq.n	800c79e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d109      	bne.n	800c76c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c758:	f001 fb66 	bl	800de28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	4618      	mov	r0, r3
 800c762:	f001 f83b 	bl	800d7dc <xTaskPriorityInherit>
 800c766:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c768:	f001 fb90 	bl	800de8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	3324      	adds	r3, #36	; 0x24
 800c770:	683a      	ldr	r2, [r7, #0]
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f000 fe2d 	bl	800d3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c77a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c77c:	f000 f965 	bl	800ca4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c780:	f000 fc2c 	bl	800cfdc <xTaskResumeAll>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	f47f af67 	bne.w	800c65a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c78c:	4b18      	ldr	r3, [pc, #96]	; (800c7f0 <xQueueSemaphoreTake+0x21c>)
 800c78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c792:	601a      	str	r2, [r3, #0]
 800c794:	f3bf 8f4f 	dsb	sy
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	e75d      	b.n	800c65a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c79e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7a0:	f000 f953 	bl	800ca4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7a4:	f000 fc1a 	bl	800cfdc <xTaskResumeAll>
 800c7a8:	e757      	b.n	800c65a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c7aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7ac:	f000 f94d 	bl	800ca4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7b0:	f000 fc14 	bl	800cfdc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7b6:	f000 f99a 	bl	800caee <prvIsQueueEmpty>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f43f af4c 	beq.w	800c65a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00d      	beq.n	800c7e4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c7c8:	f001 fb2e 	bl	800de28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c7cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7ce:	f000 f894 	bl	800c8fa <prvGetDisinheritPriorityAfterTimeout>
 800c7d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f001 f906 	bl	800d9ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c7e0:	f001 fb54 	bl	800de8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3738      	adds	r7, #56	; 0x38
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	e000ed04 	.word	0xe000ed04

0800c7f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b08e      	sub	sp, #56	; 0x38
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c806:	2b00      	cmp	r3, #0
 800c808:	d10b      	bne.n	800c822 <xQueueReceiveFromISR+0x2e>
 800c80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80e:	b672      	cpsid	i
 800c810:	f383 8811 	msr	BASEPRI, r3
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	b662      	cpsie	i
 800c81e:	623b      	str	r3, [r7, #32]
 800c820:	e7fe      	b.n	800c820 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d103      	bne.n	800c830 <xQueueReceiveFromISR+0x3c>
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <xQueueReceiveFromISR+0x40>
 800c830:	2301      	movs	r3, #1
 800c832:	e000      	b.n	800c836 <xQueueReceiveFromISR+0x42>
 800c834:	2300      	movs	r3, #0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10b      	bne.n	800c852 <xQueueReceiveFromISR+0x5e>
 800c83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83e:	b672      	cpsid	i
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	b662      	cpsie	i
 800c84e:	61fb      	str	r3, [r7, #28]
 800c850:	e7fe      	b.n	800c850 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c852:	f001 fbc9 	bl	800dfe8 <vPortValidateInterruptPriority>
	__asm volatile
 800c856:	f3ef 8211 	mrs	r2, BASEPRI
 800c85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85e:	b672      	cpsid	i
 800c860:	f383 8811 	msr	BASEPRI, r3
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	f3bf 8f4f 	dsb	sy
 800c86c:	b662      	cpsie	i
 800c86e:	61ba      	str	r2, [r7, #24]
 800c870:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c872:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c874:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d02f      	beq.n	800c8e2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c884:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c88c:	68b9      	ldr	r1, [r7, #8]
 800c88e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c890:	f000 f8b5 	bl	800c9fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	1e5a      	subs	r2, r3, #1
 800c898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c89c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a4:	d112      	bne.n	800c8cc <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d016      	beq.n	800c8dc <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b0:	3310      	adds	r3, #16
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 fdb4 	bl	800d420 <xTaskRemoveFromEventList>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00e      	beq.n	800c8dc <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00b      	beq.n	800c8dc <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	e007      	b.n	800c8dc <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	b25a      	sxtb	r2, r3
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	637b      	str	r3, [r7, #52]	; 0x34
 800c8e0:	e001      	b.n	800c8e6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	637b      	str	r3, [r7, #52]	; 0x34
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3738      	adds	r7, #56	; 0x38
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c8fa:	b480      	push	{r7}
 800c8fc:	b085      	sub	sp, #20
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c906:	2b00      	cmp	r3, #0
 800c908:	d006      	beq.n	800c918 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f1c3 0307 	rsb	r3, r3, #7
 800c914:	60fb      	str	r3, [r7, #12]
 800c916:	e001      	b.n	800c91c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c918:	2300      	movs	r3, #0
 800c91a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c91c:	68fb      	ldr	r3, [r7, #12]
	}
 800c91e:	4618      	mov	r0, r3
 800c920:	3714      	adds	r7, #20
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b086      	sub	sp, #24
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	60b9      	str	r1, [r7, #8]
 800c934:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c936:	2300      	movs	r3, #0
 800c938:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10d      	bne.n	800c964 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d14d      	bne.n	800c9ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	4618      	mov	r0, r3
 800c956:	f000 ffc1 	bl	800d8dc <xTaskPriorityDisinherit>
 800c95a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2200      	movs	r2, #0
 800c960:	609a      	str	r2, [r3, #8]
 800c962:	e043      	b.n	800c9ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d119      	bne.n	800c99e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6858      	ldr	r0, [r3, #4]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c972:	461a      	mov	r2, r3
 800c974:	68b9      	ldr	r1, [r7, #8]
 800c976:	f016 f811 	bl	802299c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c982:	441a      	add	r2, r3
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	429a      	cmp	r2, r3
 800c992:	d32b      	bcc.n	800c9ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	605a      	str	r2, [r3, #4]
 800c99c:	e026      	b.n	800c9ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	68d8      	ldr	r0, [r3, #12]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	68b9      	ldr	r1, [r7, #8]
 800c9aa:	f015 fff7 	bl	802299c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	68da      	ldr	r2, [r3, #12]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b6:	425b      	negs	r3, r3
 800c9b8:	441a      	add	r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	68da      	ldr	r2, [r3, #12]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d207      	bcs.n	800c9da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	689a      	ldr	r2, [r3, #8]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d2:	425b      	negs	r3, r3
 800c9d4:	441a      	add	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d105      	bne.n	800c9ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d002      	beq.n	800c9ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	1c5a      	adds	r2, r3, #1
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c9f4:	697b      	ldr	r3, [r7, #20]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d018      	beq.n	800ca42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	68da      	ldr	r2, [r3, #12]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca18:	441a      	add	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	68da      	ldr	r2, [r3, #12]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d303      	bcc.n	800ca32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68d9      	ldr	r1, [r3, #12]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	6838      	ldr	r0, [r7, #0]
 800ca3e:	f015 ffad 	bl	802299c <memcpy>
	}
}
 800ca42:	bf00      	nop
 800ca44:	3708      	adds	r7, #8
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b084      	sub	sp, #16
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca52:	f001 f9e9 	bl	800de28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca5e:	e011      	b.n	800ca84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d012      	beq.n	800ca8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	3324      	adds	r3, #36	; 0x24
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f000 fcd7 	bl	800d420 <xTaskRemoveFromEventList>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d001      	beq.n	800ca7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca78:	f000 fdb0 	bl	800d5dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	dce9      	bgt.n	800ca60 <prvUnlockQueue+0x16>
 800ca8c:	e000      	b.n	800ca90 <prvUnlockQueue+0x46>
					break;
 800ca8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	22ff      	movs	r2, #255	; 0xff
 800ca94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ca98:	f001 f9f8 	bl	800de8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca9c:	f001 f9c4 	bl	800de28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caa6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800caa8:	e011      	b.n	800cace <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d012      	beq.n	800cad8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3310      	adds	r3, #16
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 fcb2 	bl	800d420 <xTaskRemoveFromEventList>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cac2:	f000 fd8b 	bl	800d5dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cac6:	7bbb      	ldrb	r3, [r7, #14]
 800cac8:	3b01      	subs	r3, #1
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	dce9      	bgt.n	800caaa <prvUnlockQueue+0x60>
 800cad6:	e000      	b.n	800cada <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cad8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	22ff      	movs	r2, #255	; 0xff
 800cade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cae2:	f001 f9d3 	bl	800de8c <vPortExitCritical>
}
 800cae6:	bf00      	nop
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b084      	sub	sp, #16
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800caf6:	f001 f997 	bl	800de28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d102      	bne.n	800cb08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb02:	2301      	movs	r3, #1
 800cb04:	60fb      	str	r3, [r7, #12]
 800cb06:	e001      	b.n	800cb0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb0c:	f001 f9be 	bl	800de8c <vPortExitCritical>

	return xReturn;
 800cb10:	68fb      	ldr	r3, [r7, #12]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b084      	sub	sp, #16
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb22:	f001 f981 	bl	800de28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d102      	bne.n	800cb38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb32:	2301      	movs	r3, #1
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	e001      	b.n	800cb3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb3c:	f001 f9a6 	bl	800de8c <vPortExitCritical>

	return xReturn;
 800cb40:	68fb      	ldr	r3, [r7, #12]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b08e      	sub	sp, #56	; 0x38
 800cb4e:	af04      	add	r7, sp, #16
 800cb50:	60f8      	str	r0, [r7, #12]
 800cb52:	60b9      	str	r1, [r7, #8]
 800cb54:	607a      	str	r2, [r7, #4]
 800cb56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10b      	bne.n	800cb76 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	b672      	cpsid	i
 800cb64:	f383 8811 	msr	BASEPRI, r3
 800cb68:	f3bf 8f6f 	isb	sy
 800cb6c:	f3bf 8f4f 	dsb	sy
 800cb70:	b662      	cpsie	i
 800cb72:	623b      	str	r3, [r7, #32]
 800cb74:	e7fe      	b.n	800cb74 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800cb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10b      	bne.n	800cb94 <xTaskCreateStatic+0x4a>
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	b672      	cpsid	i
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	b662      	cpsie	i
 800cb90:	61fb      	str	r3, [r7, #28]
 800cb92:	e7fe      	b.n	800cb92 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb94:	2358      	movs	r3, #88	; 0x58
 800cb96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	2b58      	cmp	r3, #88	; 0x58
 800cb9c:	d00b      	beq.n	800cbb6 <xTaskCreateStatic+0x6c>
 800cb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba2:	b672      	cpsid	i
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	b662      	cpsie	i
 800cbb2:	61bb      	str	r3, [r7, #24]
 800cbb4:	e7fe      	b.n	800cbb4 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cbb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d01e      	beq.n	800cbfc <xTaskCreateStatic+0xb2>
 800cbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d01b      	beq.n	800cbfc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbcc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd0:	2202      	movs	r2, #2
 800cbd2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	9303      	str	r3, [sp, #12]
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	9302      	str	r3, [sp, #8]
 800cbde:	f107 0314 	add.w	r3, r7, #20
 800cbe2:	9301      	str	r3, [sp, #4]
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	68b9      	ldr	r1, [r7, #8]
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f000 f850 	bl	800cc94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbf6:	f000 f8e1 	bl	800cdbc <prvAddNewTaskToReadyList>
 800cbfa:	e001      	b.n	800cc00 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc00:	697b      	ldr	r3, [r7, #20]
	}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3728      	adds	r7, #40	; 0x28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b08c      	sub	sp, #48	; 0x30
 800cc0e:	af04      	add	r7, sp, #16
 800cc10:	60f8      	str	r0, [r7, #12]
 800cc12:	60b9      	str	r1, [r7, #8]
 800cc14:	603b      	str	r3, [r7, #0]
 800cc16:	4613      	mov	r3, r2
 800cc18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc1a:	88fb      	ldrh	r3, [r7, #6]
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f001 fa24 	bl	800e06c <pvPortMalloc>
 800cc24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00e      	beq.n	800cc4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc2c:	2058      	movs	r0, #88	; 0x58
 800cc2e:	f001 fa1d 	bl	800e06c <pvPortMalloc>
 800cc32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	697a      	ldr	r2, [r7, #20]
 800cc3e:	631a      	str	r2, [r3, #48]	; 0x30
 800cc40:	e005      	b.n	800cc4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc42:	6978      	ldr	r0, [r7, #20]
 800cc44:	f001 fade 	bl	800e204 <vPortFree>
 800cc48:	e001      	b.n	800cc4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d017      	beq.n	800cc84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc5c:	88fa      	ldrh	r2, [r7, #6]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	9303      	str	r3, [sp, #12]
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	9302      	str	r3, [sp, #8]
 800cc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc68:	9301      	str	r3, [sp, #4]
 800cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	68b9      	ldr	r1, [r7, #8]
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	f000 f80e 	bl	800cc94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc78:	69f8      	ldr	r0, [r7, #28]
 800cc7a:	f000 f89f 	bl	800cdbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	61bb      	str	r3, [r7, #24]
 800cc82:	e002      	b.n	800cc8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc84:	f04f 33ff 	mov.w	r3, #4294967295
 800cc88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc8a:	69bb      	ldr	r3, [r7, #24]
	}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3720      	adds	r7, #32
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b088      	sub	sp, #32
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	461a      	mov	r2, r3
 800ccac:	21a5      	movs	r1, #165	; 0xa5
 800ccae:	f015 fe80 	bl	80229b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccb6:	6879      	ldr	r1, [r7, #4]
 800ccb8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ccbc:	440b      	add	r3, r1
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	4413      	add	r3, r2
 800ccc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	f023 0307 	bic.w	r3, r3, #7
 800ccca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	f003 0307 	and.w	r3, r3, #7
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00b      	beq.n	800ccee <prvInitialiseNewTask+0x5a>
 800ccd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccda:	b672      	cpsid	i
 800ccdc:	f383 8811 	msr	BASEPRI, r3
 800cce0:	f3bf 8f6f 	isb	sy
 800cce4:	f3bf 8f4f 	dsb	sy
 800cce8:	b662      	cpsie	i
 800ccea:	617b      	str	r3, [r7, #20]
 800ccec:	e7fe      	b.n	800ccec <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d01f      	beq.n	800cd34 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	61fb      	str	r3, [r7, #28]
 800ccf8:	e012      	b.n	800cd20 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccfa:	68ba      	ldr	r2, [r7, #8]
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	4413      	add	r3, r2
 800cd00:	7819      	ldrb	r1, [r3, #0]
 800cd02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	4413      	add	r3, r2
 800cd08:	3334      	adds	r3, #52	; 0x34
 800cd0a:	460a      	mov	r2, r1
 800cd0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	4413      	add	r3, r2
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d006      	beq.n	800cd28 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	61fb      	str	r3, [r7, #28]
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	2b0f      	cmp	r3, #15
 800cd24:	d9e9      	bls.n	800ccfa <prvInitialiseNewTask+0x66>
 800cd26:	e000      	b.n	800cd2a <prvInitialiseNewTask+0x96>
			{
				break;
 800cd28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd32:	e003      	b.n	800cd3c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3e:	2b06      	cmp	r3, #6
 800cd40:	d901      	bls.n	800cd46 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd42:	2306      	movs	r3, #6
 800cd44:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd50:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	2200      	movs	r2, #0
 800cd56:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5a:	3304      	adds	r3, #4
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7fe ff4b 	bl	800bbf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	3318      	adds	r3, #24
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fe ff46 	bl	800bbf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd74:	f1c3 0207 	rsb	r2, r3, #7
 800cd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd80:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	2200      	movs	r2, #0
 800cd86:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd90:	2200      	movs	r2, #0
 800cd92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	68f9      	ldr	r1, [r7, #12]
 800cd9a:	69b8      	ldr	r0, [r7, #24]
 800cd9c:	f000 ff3c 	bl	800dc18 <pxPortInitialiseStack>
 800cda0:	4602      	mov	r2, r0
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdb2:	bf00      	nop
 800cdb4:	3720      	adds	r7, #32
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cdc4:	f001 f830 	bl	800de28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cdc8:	4b2a      	ldr	r3, [pc, #168]	; (800ce74 <prvAddNewTaskToReadyList+0xb8>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	4a29      	ldr	r2, [pc, #164]	; (800ce74 <prvAddNewTaskToReadyList+0xb8>)
 800cdd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cdd2:	4b29      	ldr	r3, [pc, #164]	; (800ce78 <prvAddNewTaskToReadyList+0xbc>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d109      	bne.n	800cdee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cdda:	4a27      	ldr	r2, [pc, #156]	; (800ce78 <prvAddNewTaskToReadyList+0xbc>)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cde0:	4b24      	ldr	r3, [pc, #144]	; (800ce74 <prvAddNewTaskToReadyList+0xb8>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d110      	bne.n	800ce0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cde8:	f000 fc1e 	bl	800d628 <prvInitialiseTaskLists>
 800cdec:	e00d      	b.n	800ce0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cdee:	4b23      	ldr	r3, [pc, #140]	; (800ce7c <prvAddNewTaskToReadyList+0xc0>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d109      	bne.n	800ce0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdf6:	4b20      	ldr	r3, [pc, #128]	; (800ce78 <prvAddNewTaskToReadyList+0xbc>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d802      	bhi.n	800ce0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce04:	4a1c      	ldr	r2, [pc, #112]	; (800ce78 <prvAddNewTaskToReadyList+0xbc>)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce0a:	4b1d      	ldr	r3, [pc, #116]	; (800ce80 <prvAddNewTaskToReadyList+0xc4>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	4a1b      	ldr	r2, [pc, #108]	; (800ce80 <prvAddNewTaskToReadyList+0xc4>)
 800ce12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce18:	2201      	movs	r2, #1
 800ce1a:	409a      	lsls	r2, r3
 800ce1c:	4b19      	ldr	r3, [pc, #100]	; (800ce84 <prvAddNewTaskToReadyList+0xc8>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4313      	orrs	r3, r2
 800ce22:	4a18      	ldr	r2, [pc, #96]	; (800ce84 <prvAddNewTaskToReadyList+0xc8>)
 800ce24:	6013      	str	r3, [r2, #0]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	4413      	add	r3, r2
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	4a15      	ldr	r2, [pc, #84]	; (800ce88 <prvAddNewTaskToReadyList+0xcc>)
 800ce34:	441a      	add	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	3304      	adds	r3, #4
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	f7fe fee8 	bl	800bc12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce42:	f001 f823 	bl	800de8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce46:	4b0d      	ldr	r3, [pc, #52]	; (800ce7c <prvAddNewTaskToReadyList+0xc0>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00e      	beq.n	800ce6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce4e:	4b0a      	ldr	r3, [pc, #40]	; (800ce78 <prvAddNewTaskToReadyList+0xbc>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d207      	bcs.n	800ce6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce5c:	4b0b      	ldr	r3, [pc, #44]	; (800ce8c <prvAddNewTaskToReadyList+0xd0>)
 800ce5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce6c:	bf00      	nop
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	2000049c 	.word	0x2000049c
 800ce78:	2000039c 	.word	0x2000039c
 800ce7c:	200004a8 	.word	0x200004a8
 800ce80:	200004b8 	.word	0x200004b8
 800ce84:	200004a4 	.word	0x200004a4
 800ce88:	200003a0 	.word	0x200003a0
 800ce8c:	e000ed04 	.word	0xe000ed04

0800ce90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d018      	beq.n	800ced4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cea2:	4b14      	ldr	r3, [pc, #80]	; (800cef4 <vTaskDelay+0x64>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00b      	beq.n	800cec2 <vTaskDelay+0x32>
 800ceaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceae:	b672      	cpsid	i
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	b662      	cpsie	i
 800cebe:	60bb      	str	r3, [r7, #8]
 800cec0:	e7fe      	b.n	800cec0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800cec2:	f000 f87d 	bl	800cfc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cec6:	2100      	movs	r1, #0
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 fe3f 	bl	800db4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cece:	f000 f885 	bl	800cfdc <xTaskResumeAll>
 800ced2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d107      	bne.n	800ceea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ceda:	4b07      	ldr	r3, [pc, #28]	; (800cef8 <vTaskDelay+0x68>)
 800cedc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ceea:	bf00      	nop
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	200004c4 	.word	0x200004c4
 800cef8:	e000ed04 	.word	0xe000ed04

0800cefc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b08a      	sub	sp, #40	; 0x28
 800cf00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf02:	2300      	movs	r3, #0
 800cf04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf06:	2300      	movs	r3, #0
 800cf08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf0a:	463a      	mov	r2, r7
 800cf0c:	1d39      	adds	r1, r7, #4
 800cf0e:	f107 0308 	add.w	r3, r7, #8
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7f3 fb66 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	9202      	str	r2, [sp, #8]
 800cf20:	9301      	str	r3, [sp, #4]
 800cf22:	2300      	movs	r3, #0
 800cf24:	9300      	str	r3, [sp, #0]
 800cf26:	2300      	movs	r3, #0
 800cf28:	460a      	mov	r2, r1
 800cf2a:	491f      	ldr	r1, [pc, #124]	; (800cfa8 <vTaskStartScheduler+0xac>)
 800cf2c:	481f      	ldr	r0, [pc, #124]	; (800cfac <vTaskStartScheduler+0xb0>)
 800cf2e:	f7ff fe0c 	bl	800cb4a <xTaskCreateStatic>
 800cf32:	4602      	mov	r2, r0
 800cf34:	4b1e      	ldr	r3, [pc, #120]	; (800cfb0 <vTaskStartScheduler+0xb4>)
 800cf36:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf38:	4b1d      	ldr	r3, [pc, #116]	; (800cfb0 <vTaskStartScheduler+0xb4>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d002      	beq.n	800cf46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf40:	2301      	movs	r3, #1
 800cf42:	617b      	str	r3, [r7, #20]
 800cf44:	e001      	b.n	800cf4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf46:	2300      	movs	r3, #0
 800cf48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d117      	bne.n	800cf80 <vTaskStartScheduler+0x84>
 800cf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf54:	b672      	cpsid	i
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	b662      	cpsie	i
 800cf64:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf66:	4b13      	ldr	r3, [pc, #76]	; (800cfb4 <vTaskStartScheduler+0xb8>)
 800cf68:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf6e:	4b12      	ldr	r3, [pc, #72]	; (800cfb8 <vTaskStartScheduler+0xbc>)
 800cf70:	2201      	movs	r2, #1
 800cf72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf74:	4b11      	ldr	r3, [pc, #68]	; (800cfbc <vTaskStartScheduler+0xc0>)
 800cf76:	2200      	movs	r2, #0
 800cf78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf7a:	f000 fed9 	bl	800dd30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf7e:	e00f      	b.n	800cfa0 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf86:	d10b      	bne.n	800cfa0 <vTaskStartScheduler+0xa4>
 800cf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8c:	b672      	cpsid	i
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	b662      	cpsie	i
 800cf9c:	60fb      	str	r3, [r7, #12]
 800cf9e:	e7fe      	b.n	800cf9e <vTaskStartScheduler+0xa2>
}
 800cfa0:	bf00      	nop
 800cfa2:	3718      	adds	r7, #24
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	08023920 	.word	0x08023920
 800cfac:	0800d5f5 	.word	0x0800d5f5
 800cfb0:	200004c0 	.word	0x200004c0
 800cfb4:	200004bc 	.word	0x200004bc
 800cfb8:	200004a8 	.word	0x200004a8
 800cfbc:	200004a0 	.word	0x200004a0

0800cfc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cfc4:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <vTaskSuspendAll+0x18>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	4a03      	ldr	r2, [pc, #12]	; (800cfd8 <vTaskSuspendAll+0x18>)
 800cfcc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cfce:	bf00      	nop
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr
 800cfd8:	200004c4 	.word	0x200004c4

0800cfdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cfea:	4b42      	ldr	r3, [pc, #264]	; (800d0f4 <xTaskResumeAll+0x118>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d10b      	bne.n	800d00a <xTaskResumeAll+0x2e>
 800cff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff6:	b672      	cpsid	i
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	b662      	cpsie	i
 800d006:	603b      	str	r3, [r7, #0]
 800d008:	e7fe      	b.n	800d008 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d00a:	f000 ff0d 	bl	800de28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d00e:	4b39      	ldr	r3, [pc, #228]	; (800d0f4 <xTaskResumeAll+0x118>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	3b01      	subs	r3, #1
 800d014:	4a37      	ldr	r2, [pc, #220]	; (800d0f4 <xTaskResumeAll+0x118>)
 800d016:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d018:	4b36      	ldr	r3, [pc, #216]	; (800d0f4 <xTaskResumeAll+0x118>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d161      	bne.n	800d0e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d020:	4b35      	ldr	r3, [pc, #212]	; (800d0f8 <xTaskResumeAll+0x11c>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d05d      	beq.n	800d0e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d028:	e02e      	b.n	800d088 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d02a:	4b34      	ldr	r3, [pc, #208]	; (800d0fc <xTaskResumeAll+0x120>)
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	3318      	adds	r3, #24
 800d036:	4618      	mov	r0, r3
 800d038:	f7fe fe48 	bl	800bccc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	3304      	adds	r3, #4
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe fe43 	bl	800bccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04a:	2201      	movs	r2, #1
 800d04c:	409a      	lsls	r2, r3
 800d04e:	4b2c      	ldr	r3, [pc, #176]	; (800d100 <xTaskResumeAll+0x124>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4313      	orrs	r3, r2
 800d054:	4a2a      	ldr	r2, [pc, #168]	; (800d100 <xTaskResumeAll+0x124>)
 800d056:	6013      	str	r3, [r2, #0]
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d05c:	4613      	mov	r3, r2
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	4413      	add	r3, r2
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	4a27      	ldr	r2, [pc, #156]	; (800d104 <xTaskResumeAll+0x128>)
 800d066:	441a      	add	r2, r3
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	3304      	adds	r3, #4
 800d06c:	4619      	mov	r1, r3
 800d06e:	4610      	mov	r0, r2
 800d070:	f7fe fdcf 	bl	800bc12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d078:	4b23      	ldr	r3, [pc, #140]	; (800d108 <xTaskResumeAll+0x12c>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07e:	429a      	cmp	r2, r3
 800d080:	d302      	bcc.n	800d088 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d082:	4b22      	ldr	r3, [pc, #136]	; (800d10c <xTaskResumeAll+0x130>)
 800d084:	2201      	movs	r2, #1
 800d086:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d088:	4b1c      	ldr	r3, [pc, #112]	; (800d0fc <xTaskResumeAll+0x120>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1cc      	bne.n	800d02a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d001      	beq.n	800d09a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d096:	f000 fb63 	bl	800d760 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d09a:	4b1d      	ldr	r3, [pc, #116]	; (800d110 <xTaskResumeAll+0x134>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d010      	beq.n	800d0c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0a6:	f000 f859 	bl	800d15c <xTaskIncrementTick>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d002      	beq.n	800d0b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d0b0:	4b16      	ldr	r3, [pc, #88]	; (800d10c <xTaskResumeAll+0x130>)
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1f1      	bne.n	800d0a6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d0c2:	4b13      	ldr	r3, [pc, #76]	; (800d110 <xTaskResumeAll+0x134>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0c8:	4b10      	ldr	r3, [pc, #64]	; (800d10c <xTaskResumeAll+0x130>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d009      	beq.n	800d0e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d0d4:	4b0f      	ldr	r3, [pc, #60]	; (800d114 <xTaskResumeAll+0x138>)
 800d0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0e4:	f000 fed2 	bl	800de8c <vPortExitCritical>

	return xAlreadyYielded;
 800d0e8:	68bb      	ldr	r3, [r7, #8]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	200004c4 	.word	0x200004c4
 800d0f8:	2000049c 	.word	0x2000049c
 800d0fc:	2000045c 	.word	0x2000045c
 800d100:	200004a4 	.word	0x200004a4
 800d104:	200003a0 	.word	0x200003a0
 800d108:	2000039c 	.word	0x2000039c
 800d10c:	200004b0 	.word	0x200004b0
 800d110:	200004ac 	.word	0x200004ac
 800d114:	e000ed04 	.word	0xe000ed04

0800d118 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d11e:	4b05      	ldr	r3, [pc, #20]	; (800d134 <xTaskGetTickCount+0x1c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d124:	687b      	ldr	r3, [r7, #4]
}
 800d126:	4618      	mov	r0, r3
 800d128:	370c      	adds	r7, #12
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	200004a0 	.word	0x200004a0

0800d138 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d13e:	f000 ff53 	bl	800dfe8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d142:	2300      	movs	r3, #0
 800d144:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d146:	4b04      	ldr	r3, [pc, #16]	; (800d158 <xTaskGetTickCountFromISR+0x20>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d14c:	683b      	ldr	r3, [r7, #0]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	200004a0 	.word	0x200004a0

0800d15c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d162:	2300      	movs	r3, #0
 800d164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d166:	4b4f      	ldr	r3, [pc, #316]	; (800d2a4 <xTaskIncrementTick+0x148>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f040 8089 	bne.w	800d282 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d170:	4b4d      	ldr	r3, [pc, #308]	; (800d2a8 <xTaskIncrementTick+0x14c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	3301      	adds	r3, #1
 800d176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d178:	4a4b      	ldr	r2, [pc, #300]	; (800d2a8 <xTaskIncrementTick+0x14c>)
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d121      	bne.n	800d1c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d184:	4b49      	ldr	r3, [pc, #292]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00b      	beq.n	800d1a6 <xTaskIncrementTick+0x4a>
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	b672      	cpsid	i
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	b662      	cpsie	i
 800d1a2:	603b      	str	r3, [r7, #0]
 800d1a4:	e7fe      	b.n	800d1a4 <xTaskIncrementTick+0x48>
 800d1a6:	4b41      	ldr	r3, [pc, #260]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	60fb      	str	r3, [r7, #12]
 800d1ac:	4b40      	ldr	r3, [pc, #256]	; (800d2b0 <xTaskIncrementTick+0x154>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a3e      	ldr	r2, [pc, #248]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d1b2:	6013      	str	r3, [r2, #0]
 800d1b4:	4a3e      	ldr	r2, [pc, #248]	; (800d2b0 <xTaskIncrementTick+0x154>)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6013      	str	r3, [r2, #0]
 800d1ba:	4b3e      	ldr	r3, [pc, #248]	; (800d2b4 <xTaskIncrementTick+0x158>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	4a3c      	ldr	r2, [pc, #240]	; (800d2b4 <xTaskIncrementTick+0x158>)
 800d1c2:	6013      	str	r3, [r2, #0]
 800d1c4:	f000 facc 	bl	800d760 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1c8:	4b3b      	ldr	r3, [pc, #236]	; (800d2b8 <xTaskIncrementTick+0x15c>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	693a      	ldr	r2, [r7, #16]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d348      	bcc.n	800d264 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1d2:	4b36      	ldr	r3, [pc, #216]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d104      	bne.n	800d1e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1dc:	4b36      	ldr	r3, [pc, #216]	; (800d2b8 <xTaskIncrementTick+0x15c>)
 800d1de:	f04f 32ff 	mov.w	r2, #4294967295
 800d1e2:	601a      	str	r2, [r3, #0]
					break;
 800d1e4:	e03e      	b.n	800d264 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1e6:	4b31      	ldr	r3, [pc, #196]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1f6:	693a      	ldr	r2, [r7, #16]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d203      	bcs.n	800d206 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d1fe:	4a2e      	ldr	r2, [pc, #184]	; (800d2b8 <xTaskIncrementTick+0x15c>)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d204:	e02e      	b.n	800d264 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	3304      	adds	r3, #4
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fe fd5e 	bl	800bccc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d214:	2b00      	cmp	r3, #0
 800d216:	d004      	beq.n	800d222 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	3318      	adds	r3, #24
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe fd55 	bl	800bccc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d226:	2201      	movs	r2, #1
 800d228:	409a      	lsls	r2, r3
 800d22a:	4b24      	ldr	r3, [pc, #144]	; (800d2bc <xTaskIncrementTick+0x160>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4313      	orrs	r3, r2
 800d230:	4a22      	ldr	r2, [pc, #136]	; (800d2bc <xTaskIncrementTick+0x160>)
 800d232:	6013      	str	r3, [r2, #0]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d238:	4613      	mov	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	4413      	add	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4a1f      	ldr	r2, [pc, #124]	; (800d2c0 <xTaskIncrementTick+0x164>)
 800d242:	441a      	add	r2, r3
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	3304      	adds	r3, #4
 800d248:	4619      	mov	r1, r3
 800d24a:	4610      	mov	r0, r2
 800d24c:	f7fe fce1 	bl	800bc12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d254:	4b1b      	ldr	r3, [pc, #108]	; (800d2c4 <xTaskIncrementTick+0x168>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d3b9      	bcc.n	800d1d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d25e:	2301      	movs	r3, #1
 800d260:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d262:	e7b6      	b.n	800d1d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d264:	4b17      	ldr	r3, [pc, #92]	; (800d2c4 <xTaskIncrementTick+0x168>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26a:	4915      	ldr	r1, [pc, #84]	; (800d2c0 <xTaskIncrementTick+0x164>)
 800d26c:	4613      	mov	r3, r2
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	4413      	add	r3, r2
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	440b      	add	r3, r1
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d907      	bls.n	800d28c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800d27c:	2301      	movs	r3, #1
 800d27e:	617b      	str	r3, [r7, #20]
 800d280:	e004      	b.n	800d28c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d282:	4b11      	ldr	r3, [pc, #68]	; (800d2c8 <xTaskIncrementTick+0x16c>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	3301      	adds	r3, #1
 800d288:	4a0f      	ldr	r2, [pc, #60]	; (800d2c8 <xTaskIncrementTick+0x16c>)
 800d28a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d28c:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <xTaskIncrementTick+0x170>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d001      	beq.n	800d298 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800d294:	2301      	movs	r3, #1
 800d296:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d298:	697b      	ldr	r3, [r7, #20]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3718      	adds	r7, #24
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	200004c4 	.word	0x200004c4
 800d2a8:	200004a0 	.word	0x200004a0
 800d2ac:	20000454 	.word	0x20000454
 800d2b0:	20000458 	.word	0x20000458
 800d2b4:	200004b4 	.word	0x200004b4
 800d2b8:	200004bc 	.word	0x200004bc
 800d2bc:	200004a4 	.word	0x200004a4
 800d2c0:	200003a0 	.word	0x200003a0
 800d2c4:	2000039c 	.word	0x2000039c
 800d2c8:	200004ac 	.word	0x200004ac
 800d2cc:	200004b0 	.word	0x200004b0

0800d2d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b088      	sub	sp, #32
 800d2d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2d6:	4b3a      	ldr	r3, [pc, #232]	; (800d3c0 <vTaskSwitchContext+0xf0>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d003      	beq.n	800d2e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2de:	4b39      	ldr	r3, [pc, #228]	; (800d3c4 <vTaskSwitchContext+0xf4>)
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2e4:	e067      	b.n	800d3b6 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800d2e6:	4b37      	ldr	r3, [pc, #220]	; (800d3c4 <vTaskSwitchContext+0xf4>)
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d2ec:	4b36      	ldr	r3, [pc, #216]	; (800d3c8 <vTaskSwitchContext+0xf8>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2f2:	61fb      	str	r3, [r7, #28]
 800d2f4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d2f8:	61bb      	str	r3, [r7, #24]
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	69ba      	ldr	r2, [r7, #24]
 800d300:	429a      	cmp	r2, r3
 800d302:	d111      	bne.n	800d328 <vTaskSwitchContext+0x58>
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	3304      	adds	r3, #4
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	69ba      	ldr	r2, [r7, #24]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d10b      	bne.n	800d328 <vTaskSwitchContext+0x58>
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	3308      	adds	r3, #8
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	69ba      	ldr	r2, [r7, #24]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d105      	bne.n	800d328 <vTaskSwitchContext+0x58>
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	330c      	adds	r3, #12
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	69ba      	ldr	r2, [r7, #24]
 800d324:	429a      	cmp	r2, r3
 800d326:	d008      	beq.n	800d33a <vTaskSwitchContext+0x6a>
 800d328:	4b27      	ldr	r3, [pc, #156]	; (800d3c8 <vTaskSwitchContext+0xf8>)
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	4b26      	ldr	r3, [pc, #152]	; (800d3c8 <vTaskSwitchContext+0xf8>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3334      	adds	r3, #52	; 0x34
 800d332:	4619      	mov	r1, r3
 800d334:	4610      	mov	r0, r2
 800d336:	f7f3 f942 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d33a:	4b24      	ldr	r3, [pc, #144]	; (800d3cc <vTaskSwitchContext+0xfc>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	fab3 f383 	clz	r3, r3
 800d346:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d348:	7afb      	ldrb	r3, [r7, #11]
 800d34a:	f1c3 031f 	rsb	r3, r3, #31
 800d34e:	617b      	str	r3, [r7, #20]
 800d350:	491f      	ldr	r1, [pc, #124]	; (800d3d0 <vTaskSwitchContext+0x100>)
 800d352:	697a      	ldr	r2, [r7, #20]
 800d354:	4613      	mov	r3, r2
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	4413      	add	r3, r2
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	440b      	add	r3, r1
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10b      	bne.n	800d37c <vTaskSwitchContext+0xac>
	__asm volatile
 800d364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d368:	b672      	cpsid	i
 800d36a:	f383 8811 	msr	BASEPRI, r3
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	f3bf 8f4f 	dsb	sy
 800d376:	b662      	cpsie	i
 800d378:	607b      	str	r3, [r7, #4]
 800d37a:	e7fe      	b.n	800d37a <vTaskSwitchContext+0xaa>
 800d37c:	697a      	ldr	r2, [r7, #20]
 800d37e:	4613      	mov	r3, r2
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	4413      	add	r3, r2
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4a12      	ldr	r2, [pc, #72]	; (800d3d0 <vTaskSwitchContext+0x100>)
 800d388:	4413      	add	r3, r2
 800d38a:	613b      	str	r3, [r7, #16]
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	685a      	ldr	r2, [r3, #4]
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	605a      	str	r2, [r3, #4]
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	685a      	ldr	r2, [r3, #4]
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	3308      	adds	r3, #8
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d104      	bne.n	800d3ac <vTaskSwitchContext+0xdc>
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	685a      	ldr	r2, [r3, #4]
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	605a      	str	r2, [r3, #4]
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	4a05      	ldr	r2, [pc, #20]	; (800d3c8 <vTaskSwitchContext+0xf8>)
 800d3b4:	6013      	str	r3, [r2, #0]
}
 800d3b6:	bf00      	nop
 800d3b8:	3720      	adds	r7, #32
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	200004c4 	.word	0x200004c4
 800d3c4:	200004b0 	.word	0x200004b0
 800d3c8:	2000039c 	.word	0x2000039c
 800d3cc:	200004a4 	.word	0x200004a4
 800d3d0:	200003a0 	.word	0x200003a0

0800d3d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10b      	bne.n	800d3fc <vTaskPlaceOnEventList+0x28>
 800d3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e8:	b672      	cpsid	i
 800d3ea:	f383 8811 	msr	BASEPRI, r3
 800d3ee:	f3bf 8f6f 	isb	sy
 800d3f2:	f3bf 8f4f 	dsb	sy
 800d3f6:	b662      	cpsie	i
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	e7fe      	b.n	800d3fa <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3fc:	4b07      	ldr	r3, [pc, #28]	; (800d41c <vTaskPlaceOnEventList+0x48>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3318      	adds	r3, #24
 800d402:	4619      	mov	r1, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f7fe fc28 	bl	800bc5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d40a:	2101      	movs	r1, #1
 800d40c:	6838      	ldr	r0, [r7, #0]
 800d40e:	f000 fb9d 	bl	800db4c <prvAddCurrentTaskToDelayedList>
}
 800d412:	bf00      	nop
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	2000039c 	.word	0x2000039c

0800d420 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d10b      	bne.n	800d44e <xTaskRemoveFromEventList+0x2e>
 800d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43a:	b672      	cpsid	i
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	b662      	cpsie	i
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	e7fe      	b.n	800d44c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	3318      	adds	r3, #24
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe fc3a 	bl	800bccc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d458:	4b1d      	ldr	r3, [pc, #116]	; (800d4d0 <xTaskRemoveFromEventList+0xb0>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d11c      	bne.n	800d49a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	3304      	adds	r3, #4
 800d464:	4618      	mov	r0, r3
 800d466:	f7fe fc31 	bl	800bccc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d46e:	2201      	movs	r2, #1
 800d470:	409a      	lsls	r2, r3
 800d472:	4b18      	ldr	r3, [pc, #96]	; (800d4d4 <xTaskRemoveFromEventList+0xb4>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4313      	orrs	r3, r2
 800d478:	4a16      	ldr	r2, [pc, #88]	; (800d4d4 <xTaskRemoveFromEventList+0xb4>)
 800d47a:	6013      	str	r3, [r2, #0]
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d480:	4613      	mov	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4a13      	ldr	r2, [pc, #76]	; (800d4d8 <xTaskRemoveFromEventList+0xb8>)
 800d48a:	441a      	add	r2, r3
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	3304      	adds	r3, #4
 800d490:	4619      	mov	r1, r3
 800d492:	4610      	mov	r0, r2
 800d494:	f7fe fbbd 	bl	800bc12 <vListInsertEnd>
 800d498:	e005      	b.n	800d4a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	3318      	adds	r3, #24
 800d49e:	4619      	mov	r1, r3
 800d4a0:	480e      	ldr	r0, [pc, #56]	; (800d4dc <xTaskRemoveFromEventList+0xbc>)
 800d4a2:	f7fe fbb6 	bl	800bc12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4aa:	4b0d      	ldr	r3, [pc, #52]	; (800d4e0 <xTaskRemoveFromEventList+0xc0>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d905      	bls.n	800d4c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4b8:	4b0a      	ldr	r3, [pc, #40]	; (800d4e4 <xTaskRemoveFromEventList+0xc4>)
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	e001      	b.n	800d4c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d4c4:	697b      	ldr	r3, [r7, #20]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3718      	adds	r7, #24
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	200004c4 	.word	0x200004c4
 800d4d4:	200004a4 	.word	0x200004a4
 800d4d8:	200003a0 	.word	0x200003a0
 800d4dc:	2000045c 	.word	0x2000045c
 800d4e0:	2000039c 	.word	0x2000039c
 800d4e4:	200004b0 	.word	0x200004b0

0800d4e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d4f0:	4b06      	ldr	r3, [pc, #24]	; (800d50c <vTaskInternalSetTimeOutState+0x24>)
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d4f8:	4b05      	ldr	r3, [pc, #20]	; (800d510 <vTaskInternalSetTimeOutState+0x28>)
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	605a      	str	r2, [r3, #4]
}
 800d500:	bf00      	nop
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	200004b4 	.word	0x200004b4
 800d510:	200004a0 	.word	0x200004a0

0800d514 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b088      	sub	sp, #32
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10b      	bne.n	800d53c <xTaskCheckForTimeOut+0x28>
 800d524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d528:	b672      	cpsid	i
 800d52a:	f383 8811 	msr	BASEPRI, r3
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	b662      	cpsie	i
 800d538:	613b      	str	r3, [r7, #16]
 800d53a:	e7fe      	b.n	800d53a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d10b      	bne.n	800d55a <xTaskCheckForTimeOut+0x46>
 800d542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d546:	b672      	cpsid	i
 800d548:	f383 8811 	msr	BASEPRI, r3
 800d54c:	f3bf 8f6f 	isb	sy
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	b662      	cpsie	i
 800d556:	60fb      	str	r3, [r7, #12]
 800d558:	e7fe      	b.n	800d558 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800d55a:	f000 fc65 	bl	800de28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d55e:	4b1d      	ldr	r3, [pc, #116]	; (800d5d4 <xTaskCheckForTimeOut+0xc0>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	69ba      	ldr	r2, [r7, #24]
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d576:	d102      	bne.n	800d57e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d578:	2300      	movs	r3, #0
 800d57a:	61fb      	str	r3, [r7, #28]
 800d57c:	e023      	b.n	800d5c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	4b15      	ldr	r3, [pc, #84]	; (800d5d8 <xTaskCheckForTimeOut+0xc4>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	429a      	cmp	r2, r3
 800d588:	d007      	beq.n	800d59a <xTaskCheckForTimeOut+0x86>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	69ba      	ldr	r2, [r7, #24]
 800d590:	429a      	cmp	r2, r3
 800d592:	d302      	bcc.n	800d59a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d594:	2301      	movs	r3, #1
 800d596:	61fb      	str	r3, [r7, #28]
 800d598:	e015      	b.n	800d5c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d20b      	bcs.n	800d5bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	1ad2      	subs	r2, r2, r3
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7ff ff99 	bl	800d4e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	61fb      	str	r3, [r7, #28]
 800d5ba:	e004      	b.n	800d5c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d5c6:	f000 fc61 	bl	800de8c <vPortExitCritical>

	return xReturn;
 800d5ca:	69fb      	ldr	r3, [r7, #28]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3720      	adds	r7, #32
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	200004a0 	.word	0x200004a0
 800d5d8:	200004b4 	.word	0x200004b4

0800d5dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d5dc:	b480      	push	{r7}
 800d5de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d5e0:	4b03      	ldr	r3, [pc, #12]	; (800d5f0 <vTaskMissedYield+0x14>)
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	601a      	str	r2, [r3, #0]
}
 800d5e6:	bf00      	nop
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	200004b0 	.word	0x200004b0

0800d5f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d5fc:	f000 f854 	bl	800d6a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d600:	4b07      	ldr	r3, [pc, #28]	; (800d620 <prvIdleTask+0x2c>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2b01      	cmp	r3, #1
 800d606:	d907      	bls.n	800d618 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d608:	4b06      	ldr	r3, [pc, #24]	; (800d624 <prvIdleTask+0x30>)
 800d60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d60e:	601a      	str	r2, [r3, #0]
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d618:	f7f2 ffca 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d61c:	e7ee      	b.n	800d5fc <prvIdleTask+0x8>
 800d61e:	bf00      	nop
 800d620:	200003a0 	.word	0x200003a0
 800d624:	e000ed04 	.word	0xe000ed04

0800d628 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d62e:	2300      	movs	r3, #0
 800d630:	607b      	str	r3, [r7, #4]
 800d632:	e00c      	b.n	800d64e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	4613      	mov	r3, r2
 800d638:	009b      	lsls	r3, r3, #2
 800d63a:	4413      	add	r3, r2
 800d63c:	009b      	lsls	r3, r3, #2
 800d63e:	4a12      	ldr	r2, [pc, #72]	; (800d688 <prvInitialiseTaskLists+0x60>)
 800d640:	4413      	add	r3, r2
 800d642:	4618      	mov	r0, r3
 800d644:	f7fe fab8 	bl	800bbb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	3301      	adds	r3, #1
 800d64c:	607b      	str	r3, [r7, #4]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b06      	cmp	r3, #6
 800d652:	d9ef      	bls.n	800d634 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d654:	480d      	ldr	r0, [pc, #52]	; (800d68c <prvInitialiseTaskLists+0x64>)
 800d656:	f7fe faaf 	bl	800bbb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d65a:	480d      	ldr	r0, [pc, #52]	; (800d690 <prvInitialiseTaskLists+0x68>)
 800d65c:	f7fe faac 	bl	800bbb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d660:	480c      	ldr	r0, [pc, #48]	; (800d694 <prvInitialiseTaskLists+0x6c>)
 800d662:	f7fe faa9 	bl	800bbb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d666:	480c      	ldr	r0, [pc, #48]	; (800d698 <prvInitialiseTaskLists+0x70>)
 800d668:	f7fe faa6 	bl	800bbb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d66c:	480b      	ldr	r0, [pc, #44]	; (800d69c <prvInitialiseTaskLists+0x74>)
 800d66e:	f7fe faa3 	bl	800bbb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d672:	4b0b      	ldr	r3, [pc, #44]	; (800d6a0 <prvInitialiseTaskLists+0x78>)
 800d674:	4a05      	ldr	r2, [pc, #20]	; (800d68c <prvInitialiseTaskLists+0x64>)
 800d676:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d678:	4b0a      	ldr	r3, [pc, #40]	; (800d6a4 <prvInitialiseTaskLists+0x7c>)
 800d67a:	4a05      	ldr	r2, [pc, #20]	; (800d690 <prvInitialiseTaskLists+0x68>)
 800d67c:	601a      	str	r2, [r3, #0]
}
 800d67e:	bf00      	nop
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	200003a0 	.word	0x200003a0
 800d68c:	2000042c 	.word	0x2000042c
 800d690:	20000440 	.word	0x20000440
 800d694:	2000045c 	.word	0x2000045c
 800d698:	20000470 	.word	0x20000470
 800d69c:	20000488 	.word	0x20000488
 800d6a0:	20000454 	.word	0x20000454
 800d6a4:	20000458 	.word	0x20000458

0800d6a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6ae:	e019      	b.n	800d6e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6b0:	f000 fbba 	bl	800de28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6b4:	4b0f      	ldr	r3, [pc, #60]	; (800d6f4 <prvCheckTasksWaitingTermination+0x4c>)
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	3304      	adds	r3, #4
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fe fb03 	bl	800bccc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6c6:	4b0c      	ldr	r3, [pc, #48]	; (800d6f8 <prvCheckTasksWaitingTermination+0x50>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	4a0a      	ldr	r2, [pc, #40]	; (800d6f8 <prvCheckTasksWaitingTermination+0x50>)
 800d6ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d6d0:	4b0a      	ldr	r3, [pc, #40]	; (800d6fc <prvCheckTasksWaitingTermination+0x54>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	4a09      	ldr	r2, [pc, #36]	; (800d6fc <prvCheckTasksWaitingTermination+0x54>)
 800d6d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d6da:	f000 fbd7 	bl	800de8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 f80e 	bl	800d700 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6e4:	4b05      	ldr	r3, [pc, #20]	; (800d6fc <prvCheckTasksWaitingTermination+0x54>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1e1      	bne.n	800d6b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d6ec:	bf00      	nop
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	20000470 	.word	0x20000470
 800d6f8:	2000049c 	.word	0x2000049c
 800d6fc:	20000484 	.word	0x20000484

0800d700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d108      	bne.n	800d724 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d716:	4618      	mov	r0, r3
 800d718:	f000 fd74 	bl	800e204 <vPortFree>
				vPortFree( pxTCB );
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 fd71 	bl	800e204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d722:	e019      	b.n	800d758 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d103      	bne.n	800d736 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fd68 	bl	800e204 <vPortFree>
	}
 800d734:	e010      	b.n	800d758 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	d00b      	beq.n	800d758 <prvDeleteTCB+0x58>
 800d740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d744:	b672      	cpsid	i
 800d746:	f383 8811 	msr	BASEPRI, r3
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	b662      	cpsie	i
 800d754:	60fb      	str	r3, [r7, #12]
 800d756:	e7fe      	b.n	800d756 <prvDeleteTCB+0x56>
	}
 800d758:	bf00      	nop
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d766:	4b0c      	ldr	r3, [pc, #48]	; (800d798 <prvResetNextTaskUnblockTime+0x38>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d104      	bne.n	800d77a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d770:	4b0a      	ldr	r3, [pc, #40]	; (800d79c <prvResetNextTaskUnblockTime+0x3c>)
 800d772:	f04f 32ff 	mov.w	r2, #4294967295
 800d776:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d778:	e008      	b.n	800d78c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d77a:	4b07      	ldr	r3, [pc, #28]	; (800d798 <prvResetNextTaskUnblockTime+0x38>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	4a04      	ldr	r2, [pc, #16]	; (800d79c <prvResetNextTaskUnblockTime+0x3c>)
 800d78a:	6013      	str	r3, [r2, #0]
}
 800d78c:	bf00      	nop
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr
 800d798:	20000454 	.word	0x20000454
 800d79c:	200004bc 	.word	0x200004bc

0800d7a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7a6:	4b0b      	ldr	r3, [pc, #44]	; (800d7d4 <xTaskGetSchedulerState+0x34>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d102      	bne.n	800d7b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	607b      	str	r3, [r7, #4]
 800d7b2:	e008      	b.n	800d7c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7b4:	4b08      	ldr	r3, [pc, #32]	; (800d7d8 <xTaskGetSchedulerState+0x38>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d102      	bne.n	800d7c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7bc:	2302      	movs	r3, #2
 800d7be:	607b      	str	r3, [r7, #4]
 800d7c0:	e001      	b.n	800d7c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d7c6:	687b      	ldr	r3, [r7, #4]
	}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr
 800d7d4:	200004a8 	.word	0x200004a8
 800d7d8:	200004c4 	.word	0x200004c4

0800d7dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d069      	beq.n	800d8c6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f6:	4b36      	ldr	r3, [pc, #216]	; (800d8d0 <xTaskPriorityInherit+0xf4>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d259      	bcs.n	800d8b4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	699b      	ldr	r3, [r3, #24]
 800d804:	2b00      	cmp	r3, #0
 800d806:	db06      	blt.n	800d816 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d808:	4b31      	ldr	r3, [pc, #196]	; (800d8d0 <xTaskPriorityInherit+0xf4>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80e:	f1c3 0207 	rsb	r2, r3, #7
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	6959      	ldr	r1, [r3, #20]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81e:	4613      	mov	r3, r2
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	4413      	add	r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	4a2b      	ldr	r2, [pc, #172]	; (800d8d4 <xTaskPriorityInherit+0xf8>)
 800d828:	4413      	add	r3, r2
 800d82a:	4299      	cmp	r1, r3
 800d82c:	d13a      	bne.n	800d8a4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	3304      	adds	r3, #4
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe fa4a 	bl	800bccc <uxListRemove>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d115      	bne.n	800d86a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d842:	4924      	ldr	r1, [pc, #144]	; (800d8d4 <xTaskPriorityInherit+0xf8>)
 800d844:	4613      	mov	r3, r2
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	4413      	add	r3, r2
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	440b      	add	r3, r1
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10a      	bne.n	800d86a <xTaskPriorityInherit+0x8e>
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d858:	2201      	movs	r2, #1
 800d85a:	fa02 f303 	lsl.w	r3, r2, r3
 800d85e:	43da      	mvns	r2, r3
 800d860:	4b1d      	ldr	r3, [pc, #116]	; (800d8d8 <xTaskPriorityInherit+0xfc>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4013      	ands	r3, r2
 800d866:	4a1c      	ldr	r2, [pc, #112]	; (800d8d8 <xTaskPriorityInherit+0xfc>)
 800d868:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d86a:	4b19      	ldr	r3, [pc, #100]	; (800d8d0 <xTaskPriorityInherit+0xf4>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d878:	2201      	movs	r2, #1
 800d87a:	409a      	lsls	r2, r3
 800d87c:	4b16      	ldr	r3, [pc, #88]	; (800d8d8 <xTaskPriorityInherit+0xfc>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4313      	orrs	r3, r2
 800d882:	4a15      	ldr	r2, [pc, #84]	; (800d8d8 <xTaskPriorityInherit+0xfc>)
 800d884:	6013      	str	r3, [r2, #0]
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d88a:	4613      	mov	r3, r2
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	4413      	add	r3, r2
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	4a10      	ldr	r2, [pc, #64]	; (800d8d4 <xTaskPriorityInherit+0xf8>)
 800d894:	441a      	add	r2, r3
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	3304      	adds	r3, #4
 800d89a:	4619      	mov	r1, r3
 800d89c:	4610      	mov	r0, r2
 800d89e:	f7fe f9b8 	bl	800bc12 <vListInsertEnd>
 800d8a2:	e004      	b.n	800d8ae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8a4:	4b0a      	ldr	r3, [pc, #40]	; (800d8d0 <xTaskPriorityInherit+0xf4>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	60fb      	str	r3, [r7, #12]
 800d8b2:	e008      	b.n	800d8c6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8b8:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <xTaskPriorityInherit+0xf4>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d201      	bcs.n	800d8c6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
	}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	2000039c 	.word	0x2000039c
 800d8d4:	200003a0 	.word	0x200003a0
 800d8d8:	200004a4 	.word	0x200004a4

0800d8dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b086      	sub	sp, #24
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d070      	beq.n	800d9d4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d8f2:	4b3b      	ldr	r3, [pc, #236]	; (800d9e0 <xTaskPriorityDisinherit+0x104>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	693a      	ldr	r2, [r7, #16]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d00b      	beq.n	800d914 <xTaskPriorityDisinherit+0x38>
 800d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d900:	b672      	cpsid	i
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	b662      	cpsie	i
 800d910:	60fb      	str	r3, [r7, #12]
 800d912:	e7fe      	b.n	800d912 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d10b      	bne.n	800d934 <xTaskPriorityDisinherit+0x58>
 800d91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d920:	b672      	cpsid	i
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	b662      	cpsie	i
 800d930:	60bb      	str	r3, [r7, #8]
 800d932:	e7fe      	b.n	800d932 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d938:	1e5a      	subs	r2, r3, #1
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d946:	429a      	cmp	r2, r3
 800d948:	d044      	beq.n	800d9d4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d140      	bne.n	800d9d4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	3304      	adds	r3, #4
 800d956:	4618      	mov	r0, r3
 800d958:	f7fe f9b8 	bl	800bccc <uxListRemove>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d115      	bne.n	800d98e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d966:	491f      	ldr	r1, [pc, #124]	; (800d9e4 <xTaskPriorityDisinherit+0x108>)
 800d968:	4613      	mov	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	4413      	add	r3, r2
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	440b      	add	r3, r1
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10a      	bne.n	800d98e <xTaskPriorityDisinherit+0xb2>
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97c:	2201      	movs	r2, #1
 800d97e:	fa02 f303 	lsl.w	r3, r2, r3
 800d982:	43da      	mvns	r2, r3
 800d984:	4b18      	ldr	r3, [pc, #96]	; (800d9e8 <xTaskPriorityDisinherit+0x10c>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4013      	ands	r3, r2
 800d98a:	4a17      	ldr	r2, [pc, #92]	; (800d9e8 <xTaskPriorityDisinherit+0x10c>)
 800d98c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99a:	f1c3 0207 	rsb	r2, r3, #7
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	409a      	lsls	r2, r3
 800d9aa:	4b0f      	ldr	r3, [pc, #60]	; (800d9e8 <xTaskPriorityDisinherit+0x10c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	4a0d      	ldr	r2, [pc, #52]	; (800d9e8 <xTaskPriorityDisinherit+0x10c>)
 800d9b2:	6013      	str	r3, [r2, #0]
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9b8:	4613      	mov	r3, r2
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	4413      	add	r3, r2
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	4a08      	ldr	r2, [pc, #32]	; (800d9e4 <xTaskPriorityDisinherit+0x108>)
 800d9c2:	441a      	add	r2, r3
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	3304      	adds	r3, #4
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	4610      	mov	r0, r2
 800d9cc:	f7fe f921 	bl	800bc12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d9d4:	697b      	ldr	r3, [r7, #20]
	}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3718      	adds	r7, #24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	2000039c 	.word	0x2000039c
 800d9e4:	200003a0 	.word	0x200003a0
 800d9e8:	200004a4 	.word	0x200004a4

0800d9ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b088      	sub	sp, #32
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2b00      	cmp	r3, #0
 800da02:	f000 8085 	beq.w	800db10 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d10b      	bne.n	800da26 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800da0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da12:	b672      	cpsid	i
 800da14:	f383 8811 	msr	BASEPRI, r3
 800da18:	f3bf 8f6f 	isb	sy
 800da1c:	f3bf 8f4f 	dsb	sy
 800da20:	b662      	cpsie	i
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	e7fe      	b.n	800da24 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da26:	69bb      	ldr	r3, [r7, #24]
 800da28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da2a:	683a      	ldr	r2, [r7, #0]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d902      	bls.n	800da36 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	61fb      	str	r3, [r7, #28]
 800da34:	e002      	b.n	800da3c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da40:	69fa      	ldr	r2, [r7, #28]
 800da42:	429a      	cmp	r2, r3
 800da44:	d064      	beq.n	800db10 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da4a:	697a      	ldr	r2, [r7, #20]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d15f      	bne.n	800db10 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da50:	4b31      	ldr	r3, [pc, #196]	; (800db18 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	69ba      	ldr	r2, [r7, #24]
 800da56:	429a      	cmp	r2, r3
 800da58:	d10b      	bne.n	800da72 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800da5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5e:	b672      	cpsid	i
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	b662      	cpsie	i
 800da6e:	60bb      	str	r3, [r7, #8]
 800da70:	e7fe      	b.n	800da70 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da76:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	69fa      	ldr	r2, [r7, #28]
 800da7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	699b      	ldr	r3, [r3, #24]
 800da82:	2b00      	cmp	r3, #0
 800da84:	db04      	blt.n	800da90 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	f1c3 0207 	rsb	r2, r3, #7
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	6959      	ldr	r1, [r3, #20]
 800da94:	693a      	ldr	r2, [r7, #16]
 800da96:	4613      	mov	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	4a1f      	ldr	r2, [pc, #124]	; (800db1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800daa0:	4413      	add	r3, r2
 800daa2:	4299      	cmp	r1, r3
 800daa4:	d134      	bne.n	800db10 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	3304      	adds	r3, #4
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fe f90e 	bl	800bccc <uxListRemove>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d115      	bne.n	800dae2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daba:	4918      	ldr	r1, [pc, #96]	; (800db1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dabc:	4613      	mov	r3, r2
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	440b      	add	r3, r1
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10a      	bne.n	800dae2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad0:	2201      	movs	r2, #1
 800dad2:	fa02 f303 	lsl.w	r3, r2, r3
 800dad6:	43da      	mvns	r2, r3
 800dad8:	4b11      	ldr	r3, [pc, #68]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4013      	ands	r3, r2
 800dade:	4a10      	ldr	r2, [pc, #64]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dae0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae6:	2201      	movs	r2, #1
 800dae8:	409a      	lsls	r2, r3
 800daea:	4b0d      	ldr	r3, [pc, #52]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4313      	orrs	r3, r2
 800daf0:	4a0b      	ldr	r2, [pc, #44]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800daf2:	6013      	str	r3, [r2, #0]
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf8:	4613      	mov	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	4413      	add	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4a06      	ldr	r2, [pc, #24]	; (800db1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800db02:	441a      	add	r2, r3
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	3304      	adds	r3, #4
 800db08:	4619      	mov	r1, r3
 800db0a:	4610      	mov	r0, r2
 800db0c:	f7fe f881 	bl	800bc12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db10:	bf00      	nop
 800db12:	3720      	adds	r7, #32
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	2000039c 	.word	0x2000039c
 800db1c:	200003a0 	.word	0x200003a0
 800db20:	200004a4 	.word	0x200004a4

0800db24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db24:	b480      	push	{r7}
 800db26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db28:	4b07      	ldr	r3, [pc, #28]	; (800db48 <pvTaskIncrementMutexHeldCount+0x24>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d004      	beq.n	800db3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db30:	4b05      	ldr	r3, [pc, #20]	; (800db48 <pvTaskIncrementMutexHeldCount+0x24>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db36:	3201      	adds	r2, #1
 800db38:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800db3a:	4b03      	ldr	r3, [pc, #12]	; (800db48 <pvTaskIncrementMutexHeldCount+0x24>)
 800db3c:	681b      	ldr	r3, [r3, #0]
	}
 800db3e:	4618      	mov	r0, r3
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr
 800db48:	2000039c 	.word	0x2000039c

0800db4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db56:	4b29      	ldr	r3, [pc, #164]	; (800dbfc <prvAddCurrentTaskToDelayedList+0xb0>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db5c:	4b28      	ldr	r3, [pc, #160]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	3304      	adds	r3, #4
 800db62:	4618      	mov	r0, r3
 800db64:	f7fe f8b2 	bl	800bccc <uxListRemove>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10b      	bne.n	800db86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800db6e:	4b24      	ldr	r3, [pc, #144]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db74:	2201      	movs	r2, #1
 800db76:	fa02 f303 	lsl.w	r3, r2, r3
 800db7a:	43da      	mvns	r2, r3
 800db7c:	4b21      	ldr	r3, [pc, #132]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4013      	ands	r3, r2
 800db82:	4a20      	ldr	r2, [pc, #128]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db8c:	d10a      	bne.n	800dba4 <prvAddCurrentTaskToDelayedList+0x58>
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d007      	beq.n	800dba4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db94:	4b1a      	ldr	r3, [pc, #104]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	3304      	adds	r3, #4
 800db9a:	4619      	mov	r1, r3
 800db9c:	481a      	ldr	r0, [pc, #104]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800db9e:	f7fe f838 	bl	800bc12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dba2:	e026      	b.n	800dbf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	4413      	add	r3, r2
 800dbaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbac:	4b14      	ldr	r3, [pc, #80]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d209      	bcs.n	800dbd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbbc:	4b13      	ldr	r3, [pc, #76]	; (800dc0c <prvAddCurrentTaskToDelayedList+0xc0>)
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	4b0f      	ldr	r3, [pc, #60]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	4610      	mov	r0, r2
 800dbca:	f7fe f846 	bl	800bc5a <vListInsert>
}
 800dbce:	e010      	b.n	800dbf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbd0:	4b0f      	ldr	r3, [pc, #60]	; (800dc10 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	4b0a      	ldr	r3, [pc, #40]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4619      	mov	r1, r3
 800dbdc:	4610      	mov	r0, r2
 800dbde:	f7fe f83c 	bl	800bc5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dbe2:	4b0c      	ldr	r3, [pc, #48]	; (800dc14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d202      	bcs.n	800dbf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dbec:	4a09      	ldr	r2, [pc, #36]	; (800dc14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	6013      	str	r3, [r2, #0]
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	200004a0 	.word	0x200004a0
 800dc00:	2000039c 	.word	0x2000039c
 800dc04:	200004a4 	.word	0x200004a4
 800dc08:	20000488 	.word	0x20000488
 800dc0c:	20000458 	.word	0x20000458
 800dc10:	20000454 	.word	0x20000454
 800dc14:	200004bc 	.word	0x200004bc

0800dc18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b085      	sub	sp, #20
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	3b04      	subs	r3, #4
 800dc28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	3b04      	subs	r3, #4
 800dc36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	f023 0201 	bic.w	r2, r3, #1
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3b04      	subs	r3, #4
 800dc46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc48:	4a0c      	ldr	r2, [pc, #48]	; (800dc7c <pxPortInitialiseStack+0x64>)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	3b14      	subs	r3, #20
 800dc52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	3b04      	subs	r3, #4
 800dc5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f06f 0202 	mvn.w	r2, #2
 800dc66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	3b20      	subs	r3, #32
 800dc6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr
 800dc7c:	0800dc81 	.word	0x0800dc81

0800dc80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dc86:	2300      	movs	r3, #0
 800dc88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc8a:	4b13      	ldr	r3, [pc, #76]	; (800dcd8 <prvTaskExitError+0x58>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc92:	d00b      	beq.n	800dcac <prvTaskExitError+0x2c>
 800dc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc98:	b672      	cpsid	i
 800dc9a:	f383 8811 	msr	BASEPRI, r3
 800dc9e:	f3bf 8f6f 	isb	sy
 800dca2:	f3bf 8f4f 	dsb	sy
 800dca6:	b662      	cpsie	i
 800dca8:	60fb      	str	r3, [r7, #12]
 800dcaa:	e7fe      	b.n	800dcaa <prvTaskExitError+0x2a>
 800dcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb0:	b672      	cpsid	i
 800dcb2:	f383 8811 	msr	BASEPRI, r3
 800dcb6:	f3bf 8f6f 	isb	sy
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	b662      	cpsie	i
 800dcc0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dcc2:	bf00      	nop
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d0fc      	beq.n	800dcc4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dcca:	bf00      	nop
 800dccc:	3714      	adds	r7, #20
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr
 800dcd6:	bf00      	nop
 800dcd8:	20000024 	.word	0x20000024
 800dcdc:	00000000 	.word	0x00000000

0800dce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dce0:	4b07      	ldr	r3, [pc, #28]	; (800dd00 <pxCurrentTCBConst2>)
 800dce2:	6819      	ldr	r1, [r3, #0]
 800dce4:	6808      	ldr	r0, [r1, #0]
 800dce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcea:	f380 8809 	msr	PSP, r0
 800dcee:	f3bf 8f6f 	isb	sy
 800dcf2:	f04f 0000 	mov.w	r0, #0
 800dcf6:	f380 8811 	msr	BASEPRI, r0
 800dcfa:	4770      	bx	lr
 800dcfc:	f3af 8000 	nop.w

0800dd00 <pxCurrentTCBConst2>:
 800dd00:	2000039c 	.word	0x2000039c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd04:	bf00      	nop
 800dd06:	bf00      	nop

0800dd08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd08:	4808      	ldr	r0, [pc, #32]	; (800dd2c <prvPortStartFirstTask+0x24>)
 800dd0a:	6800      	ldr	r0, [r0, #0]
 800dd0c:	6800      	ldr	r0, [r0, #0]
 800dd0e:	f380 8808 	msr	MSP, r0
 800dd12:	f04f 0000 	mov.w	r0, #0
 800dd16:	f380 8814 	msr	CONTROL, r0
 800dd1a:	b662      	cpsie	i
 800dd1c:	b661      	cpsie	f
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	f3bf 8f6f 	isb	sy
 800dd26:	df00      	svc	0
 800dd28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd2a:	bf00      	nop
 800dd2c:	e000ed08 	.word	0xe000ed08

0800dd30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd36:	4b36      	ldr	r3, [pc, #216]	; (800de10 <xPortStartScheduler+0xe0>)
 800dd38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	22ff      	movs	r2, #255	; 0xff
 800dd46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd50:	78fb      	ldrb	r3, [r7, #3]
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dd58:	b2da      	uxtb	r2, r3
 800dd5a:	4b2e      	ldr	r3, [pc, #184]	; (800de14 <xPortStartScheduler+0xe4>)
 800dd5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd5e:	4b2e      	ldr	r3, [pc, #184]	; (800de18 <xPortStartScheduler+0xe8>)
 800dd60:	2207      	movs	r2, #7
 800dd62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd64:	e009      	b.n	800dd7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dd66:	4b2c      	ldr	r3, [pc, #176]	; (800de18 <xPortStartScheduler+0xe8>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	4a2a      	ldr	r2, [pc, #168]	; (800de18 <xPortStartScheduler+0xe8>)
 800dd6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd70:	78fb      	ldrb	r3, [r7, #3]
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	005b      	lsls	r3, r3, #1
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd7a:	78fb      	ldrb	r3, [r7, #3]
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd82:	2b80      	cmp	r3, #128	; 0x80
 800dd84:	d0ef      	beq.n	800dd66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd86:	4b24      	ldr	r3, [pc, #144]	; (800de18 <xPortStartScheduler+0xe8>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f1c3 0307 	rsb	r3, r3, #7
 800dd8e:	2b04      	cmp	r3, #4
 800dd90:	d00b      	beq.n	800ddaa <xPortStartScheduler+0x7a>
 800dd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd96:	b672      	cpsid	i
 800dd98:	f383 8811 	msr	BASEPRI, r3
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	b662      	cpsie	i
 800dda6:	60bb      	str	r3, [r7, #8]
 800dda8:	e7fe      	b.n	800dda8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ddaa:	4b1b      	ldr	r3, [pc, #108]	; (800de18 <xPortStartScheduler+0xe8>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	021b      	lsls	r3, r3, #8
 800ddb0:	4a19      	ldr	r2, [pc, #100]	; (800de18 <xPortStartScheduler+0xe8>)
 800ddb2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ddb4:	4b18      	ldr	r3, [pc, #96]	; (800de18 <xPortStartScheduler+0xe8>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ddbc:	4a16      	ldr	r2, [pc, #88]	; (800de18 <xPortStartScheduler+0xe8>)
 800ddbe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ddc8:	4b14      	ldr	r3, [pc, #80]	; (800de1c <xPortStartScheduler+0xec>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a13      	ldr	r2, [pc, #76]	; (800de1c <xPortStartScheduler+0xec>)
 800ddce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ddd2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ddd4:	4b11      	ldr	r3, [pc, #68]	; (800de1c <xPortStartScheduler+0xec>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a10      	ldr	r2, [pc, #64]	; (800de1c <xPortStartScheduler+0xec>)
 800ddda:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ddde:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dde0:	f000 f8d4 	bl	800df8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dde4:	4b0e      	ldr	r3, [pc, #56]	; (800de20 <xPortStartScheduler+0xf0>)
 800dde6:	2200      	movs	r2, #0
 800dde8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ddea:	f000 f8f3 	bl	800dfd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ddee:	4b0d      	ldr	r3, [pc, #52]	; (800de24 <xPortStartScheduler+0xf4>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a0c      	ldr	r2, [pc, #48]	; (800de24 <xPortStartScheduler+0xf4>)
 800ddf4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ddf8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ddfa:	f7ff ff85 	bl	800dd08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ddfe:	f7ff fa67 	bl	800d2d0 <vTaskSwitchContext>
	prvTaskExitError();
 800de02:	f7ff ff3d 	bl	800dc80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800de06:	2300      	movs	r3, #0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	e000e400 	.word	0xe000e400
 800de14:	200004c8 	.word	0x200004c8
 800de18:	200004cc 	.word	0x200004cc
 800de1c:	e000ed20 	.word	0xe000ed20
 800de20:	20000024 	.word	0x20000024
 800de24:	e000ef34 	.word	0xe000ef34

0800de28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de32:	b672      	cpsid	i
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	b662      	cpsie	i
 800de42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de44:	4b0f      	ldr	r3, [pc, #60]	; (800de84 <vPortEnterCritical+0x5c>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	3301      	adds	r3, #1
 800de4a:	4a0e      	ldr	r2, [pc, #56]	; (800de84 <vPortEnterCritical+0x5c>)
 800de4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de4e:	4b0d      	ldr	r3, [pc, #52]	; (800de84 <vPortEnterCritical+0x5c>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b01      	cmp	r3, #1
 800de54:	d110      	bne.n	800de78 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de56:	4b0c      	ldr	r3, [pc, #48]	; (800de88 <vPortEnterCritical+0x60>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00b      	beq.n	800de78 <vPortEnterCritical+0x50>
 800de60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de64:	b672      	cpsid	i
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	b662      	cpsie	i
 800de74:	603b      	str	r3, [r7, #0]
 800de76:	e7fe      	b.n	800de76 <vPortEnterCritical+0x4e>
	}
}
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr
 800de84:	20000024 	.word	0x20000024
 800de88:	e000ed04 	.word	0xe000ed04

0800de8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de92:	4b12      	ldr	r3, [pc, #72]	; (800dedc <vPortExitCritical+0x50>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d10b      	bne.n	800deb2 <vPortExitCritical+0x26>
 800de9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9e:	b672      	cpsid	i
 800dea0:	f383 8811 	msr	BASEPRI, r3
 800dea4:	f3bf 8f6f 	isb	sy
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	b662      	cpsie	i
 800deae:	607b      	str	r3, [r7, #4]
 800deb0:	e7fe      	b.n	800deb0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800deb2:	4b0a      	ldr	r3, [pc, #40]	; (800dedc <vPortExitCritical+0x50>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	3b01      	subs	r3, #1
 800deb8:	4a08      	ldr	r2, [pc, #32]	; (800dedc <vPortExitCritical+0x50>)
 800deba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800debc:	4b07      	ldr	r3, [pc, #28]	; (800dedc <vPortExitCritical+0x50>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d104      	bne.n	800dece <vPortExitCritical+0x42>
 800dec4:	2300      	movs	r3, #0
 800dec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800dece:	bf00      	nop
 800ded0:	370c      	adds	r7, #12
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	20000024 	.word	0x20000024

0800dee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dee0:	f3ef 8009 	mrs	r0, PSP
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	4b15      	ldr	r3, [pc, #84]	; (800df40 <pxCurrentTCBConst>)
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	f01e 0f10 	tst.w	lr, #16
 800def0:	bf08      	it	eq
 800def2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800def6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800defa:	6010      	str	r0, [r2, #0]
 800defc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800df04:	b672      	cpsid	i
 800df06:	f380 8811 	msr	BASEPRI, r0
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	b662      	cpsie	i
 800df14:	f7ff f9dc 	bl	800d2d0 <vTaskSwitchContext>
 800df18:	f04f 0000 	mov.w	r0, #0
 800df1c:	f380 8811 	msr	BASEPRI, r0
 800df20:	bc09      	pop	{r0, r3}
 800df22:	6819      	ldr	r1, [r3, #0]
 800df24:	6808      	ldr	r0, [r1, #0]
 800df26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2a:	f01e 0f10 	tst.w	lr, #16
 800df2e:	bf08      	it	eq
 800df30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df34:	f380 8809 	msr	PSP, r0
 800df38:	f3bf 8f6f 	isb	sy
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop

0800df40 <pxCurrentTCBConst>:
 800df40:	2000039c 	.word	0x2000039c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df44:	bf00      	nop
 800df46:	bf00      	nop

0800df48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
	__asm volatile
 800df4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df52:	b672      	cpsid	i
 800df54:	f383 8811 	msr	BASEPRI, r3
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	f3bf 8f4f 	dsb	sy
 800df60:	b662      	cpsie	i
 800df62:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df64:	f7ff f8fa 	bl	800d15c <xTaskIncrementTick>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d003      	beq.n	800df76 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df6e:	4b06      	ldr	r3, [pc, #24]	; (800df88 <SysTick_Handler+0x40>)
 800df70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df74:	601a      	str	r2, [r3, #0]
 800df76:	2300      	movs	r3, #0
 800df78:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	e000ed04 	.word	0xe000ed04

0800df8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df8c:	b480      	push	{r7}
 800df8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df90:	4b0b      	ldr	r3, [pc, #44]	; (800dfc0 <vPortSetupTimerInterrupt+0x34>)
 800df92:	2200      	movs	r2, #0
 800df94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df96:	4b0b      	ldr	r3, [pc, #44]	; (800dfc4 <vPortSetupTimerInterrupt+0x38>)
 800df98:	2200      	movs	r2, #0
 800df9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df9c:	4b0a      	ldr	r3, [pc, #40]	; (800dfc8 <vPortSetupTimerInterrupt+0x3c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a0a      	ldr	r2, [pc, #40]	; (800dfcc <vPortSetupTimerInterrupt+0x40>)
 800dfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800dfa6:	099b      	lsrs	r3, r3, #6
 800dfa8:	4a09      	ldr	r2, [pc, #36]	; (800dfd0 <vPortSetupTimerInterrupt+0x44>)
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dfae:	4b04      	ldr	r3, [pc, #16]	; (800dfc0 <vPortSetupTimerInterrupt+0x34>)
 800dfb0:	2207      	movs	r2, #7
 800dfb2:	601a      	str	r2, [r3, #0]
}
 800dfb4:	bf00      	nop
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	e000e010 	.word	0xe000e010
 800dfc4:	e000e018 	.word	0xe000e018
 800dfc8:	20000018 	.word	0x20000018
 800dfcc:	10624dd3 	.word	0x10624dd3
 800dfd0:	e000e014 	.word	0xe000e014

0800dfd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dfd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dfe4 <vPortEnableVFP+0x10>
 800dfd8:	6801      	ldr	r1, [r0, #0]
 800dfda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dfde:	6001      	str	r1, [r0, #0]
 800dfe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dfe2:	bf00      	nop
 800dfe4:	e000ed88 	.word	0xe000ed88

0800dfe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dfe8:	b480      	push	{r7}
 800dfea:	b085      	sub	sp, #20
 800dfec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dfee:	f3ef 8305 	mrs	r3, IPSR
 800dff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b0f      	cmp	r3, #15
 800dff8:	d915      	bls.n	800e026 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dffa:	4a18      	ldr	r2, [pc, #96]	; (800e05c <vPortValidateInterruptPriority+0x74>)
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	4413      	add	r3, r2
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e004:	4b16      	ldr	r3, [pc, #88]	; (800e060 <vPortValidateInterruptPriority+0x78>)
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	7afa      	ldrb	r2, [r7, #11]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d20b      	bcs.n	800e026 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	b672      	cpsid	i
 800e014:	f383 8811 	msr	BASEPRI, r3
 800e018:	f3bf 8f6f 	isb	sy
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	b662      	cpsie	i
 800e022:	607b      	str	r3, [r7, #4]
 800e024:	e7fe      	b.n	800e024 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e026:	4b0f      	ldr	r3, [pc, #60]	; (800e064 <vPortValidateInterruptPriority+0x7c>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e02e:	4b0e      	ldr	r3, [pc, #56]	; (800e068 <vPortValidateInterruptPriority+0x80>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	429a      	cmp	r2, r3
 800e034:	d90b      	bls.n	800e04e <vPortValidateInterruptPriority+0x66>
 800e036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03a:	b672      	cpsid	i
 800e03c:	f383 8811 	msr	BASEPRI, r3
 800e040:	f3bf 8f6f 	isb	sy
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	b662      	cpsie	i
 800e04a:	603b      	str	r3, [r7, #0]
 800e04c:	e7fe      	b.n	800e04c <vPortValidateInterruptPriority+0x64>
	}
 800e04e:	bf00      	nop
 800e050:	3714      	adds	r7, #20
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr
 800e05a:	bf00      	nop
 800e05c:	e000e3f0 	.word	0xe000e3f0
 800e060:	200004c8 	.word	0x200004c8
 800e064:	e000ed0c 	.word	0xe000ed0c
 800e068:	200004cc 	.word	0x200004cc

0800e06c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b08a      	sub	sp, #40	; 0x28
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e074:	2300      	movs	r3, #0
 800e076:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e078:	f7fe ffa2 	bl	800cfc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e07c:	4b5c      	ldr	r3, [pc, #368]	; (800e1f0 <pvPortMalloc+0x184>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d101      	bne.n	800e088 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e084:	f000 f91a 	bl	800e2bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e088:	4b5a      	ldr	r3, [pc, #360]	; (800e1f4 <pvPortMalloc+0x188>)
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	4013      	ands	r3, r2
 800e090:	2b00      	cmp	r3, #0
 800e092:	f040 8090 	bne.w	800e1b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d01e      	beq.n	800e0da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e09c:	2208      	movs	r2, #8
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f003 0307 	and.w	r3, r3, #7
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d015      	beq.n	800e0da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f023 0307 	bic.w	r3, r3, #7
 800e0b4:	3308      	adds	r3, #8
 800e0b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f003 0307 	and.w	r3, r3, #7
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d00b      	beq.n	800e0da <pvPortMalloc+0x6e>
 800e0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c6:	b672      	cpsid	i
 800e0c8:	f383 8811 	msr	BASEPRI, r3
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f3bf 8f4f 	dsb	sy
 800e0d4:	b662      	cpsie	i
 800e0d6:	617b      	str	r3, [r7, #20]
 800e0d8:	e7fe      	b.n	800e0d8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d06a      	beq.n	800e1b6 <pvPortMalloc+0x14a>
 800e0e0:	4b45      	ldr	r3, [pc, #276]	; (800e1f8 <pvPortMalloc+0x18c>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d865      	bhi.n	800e1b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e0ea:	4b44      	ldr	r3, [pc, #272]	; (800e1fc <pvPortMalloc+0x190>)
 800e0ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e0ee:	4b43      	ldr	r3, [pc, #268]	; (800e1fc <pvPortMalloc+0x190>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0f4:	e004      	b.n	800e100 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	429a      	cmp	r2, r3
 800e108:	d903      	bls.n	800e112 <pvPortMalloc+0xa6>
 800e10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d1f1      	bne.n	800e0f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e112:	4b37      	ldr	r3, [pc, #220]	; (800e1f0 <pvPortMalloc+0x184>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e118:	429a      	cmp	r2, r3
 800e11a:	d04c      	beq.n	800e1b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e11c:	6a3b      	ldr	r3, [r7, #32]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2208      	movs	r2, #8
 800e122:	4413      	add	r3, r2
 800e124:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	6a3b      	ldr	r3, [r7, #32]
 800e12c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e130:	685a      	ldr	r2, [r3, #4]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	1ad2      	subs	r2, r2, r3
 800e136:	2308      	movs	r3, #8
 800e138:	005b      	lsls	r3, r3, #1
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d920      	bls.n	800e180 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4413      	add	r3, r2
 800e144:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	f003 0307 	and.w	r3, r3, #7
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00b      	beq.n	800e168 <pvPortMalloc+0xfc>
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	b672      	cpsid	i
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	b662      	cpsie	i
 800e164:	613b      	str	r3, [r7, #16]
 800e166:	e7fe      	b.n	800e166 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16a:	685a      	ldr	r2, [r3, #4]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	1ad2      	subs	r2, r2, r3
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e17a:	69b8      	ldr	r0, [r7, #24]
 800e17c:	f000 f900 	bl	800e380 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e180:	4b1d      	ldr	r3, [pc, #116]	; (800e1f8 <pvPortMalloc+0x18c>)
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	4a1b      	ldr	r2, [pc, #108]	; (800e1f8 <pvPortMalloc+0x18c>)
 800e18c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e18e:	4b1a      	ldr	r3, [pc, #104]	; (800e1f8 <pvPortMalloc+0x18c>)
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	4b1b      	ldr	r3, [pc, #108]	; (800e200 <pvPortMalloc+0x194>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	429a      	cmp	r2, r3
 800e198:	d203      	bcs.n	800e1a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e19a:	4b17      	ldr	r3, [pc, #92]	; (800e1f8 <pvPortMalloc+0x18c>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4a18      	ldr	r2, [pc, #96]	; (800e200 <pvPortMalloc+0x194>)
 800e1a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a4:	685a      	ldr	r2, [r3, #4]
 800e1a6:	4b13      	ldr	r3, [pc, #76]	; (800e1f4 <pvPortMalloc+0x188>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	431a      	orrs	r2, r3
 800e1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e1b6:	f7fe ff11 	bl	800cfdc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d101      	bne.n	800e1c4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e1c0:	f7f2 fa08 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	f003 0307 	and.w	r3, r3, #7
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00b      	beq.n	800e1e6 <pvPortMalloc+0x17a>
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	b672      	cpsid	i
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	b662      	cpsie	i
 800e1e2:	60fb      	str	r3, [r7, #12]
 800e1e4:	e7fe      	b.n	800e1e4 <pvPortMalloc+0x178>
	return pvReturn;
 800e1e6:	69fb      	ldr	r3, [r7, #28]
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3728      	adds	r7, #40	; 0x28
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	200084d8 	.word	0x200084d8
 800e1f4:	200084e4 	.word	0x200084e4
 800e1f8:	200084dc 	.word	0x200084dc
 800e1fc:	200084d0 	.word	0x200084d0
 800e200:	200084e0 	.word	0x200084e0

0800e204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b086      	sub	sp, #24
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d04a      	beq.n	800e2ac <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e216:	2308      	movs	r3, #8
 800e218:	425b      	negs	r3, r3
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	4413      	add	r3, r2
 800e21e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	4b22      	ldr	r3, [pc, #136]	; (800e2b4 <vPortFree+0xb0>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4013      	ands	r3, r2
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d10b      	bne.n	800e24a <vPortFree+0x46>
 800e232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e236:	b672      	cpsid	i
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	b662      	cpsie	i
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	e7fe      	b.n	800e248 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00b      	beq.n	800e26a <vPortFree+0x66>
 800e252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e256:	b672      	cpsid	i
 800e258:	f383 8811 	msr	BASEPRI, r3
 800e25c:	f3bf 8f6f 	isb	sy
 800e260:	f3bf 8f4f 	dsb	sy
 800e264:	b662      	cpsie	i
 800e266:	60bb      	str	r3, [r7, #8]
 800e268:	e7fe      	b.n	800e268 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	685a      	ldr	r2, [r3, #4]
 800e26e:	4b11      	ldr	r3, [pc, #68]	; (800e2b4 <vPortFree+0xb0>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4013      	ands	r3, r2
 800e274:	2b00      	cmp	r3, #0
 800e276:	d019      	beq.n	800e2ac <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d115      	bne.n	800e2ac <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	685a      	ldr	r2, [r3, #4]
 800e284:	4b0b      	ldr	r3, [pc, #44]	; (800e2b4 <vPortFree+0xb0>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	43db      	mvns	r3, r3
 800e28a:	401a      	ands	r2, r3
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e290:	f7fe fe96 	bl	800cfc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	685a      	ldr	r2, [r3, #4]
 800e298:	4b07      	ldr	r3, [pc, #28]	; (800e2b8 <vPortFree+0xb4>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4413      	add	r3, r2
 800e29e:	4a06      	ldr	r2, [pc, #24]	; (800e2b8 <vPortFree+0xb4>)
 800e2a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e2a2:	6938      	ldr	r0, [r7, #16]
 800e2a4:	f000 f86c 	bl	800e380 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e2a8:	f7fe fe98 	bl	800cfdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e2ac:	bf00      	nop
 800e2ae:	3718      	adds	r7, #24
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	200084e4 	.word	0x200084e4
 800e2b8:	200084dc 	.word	0x200084dc

0800e2bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b085      	sub	sp, #20
 800e2c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e2c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e2c8:	4b27      	ldr	r3, [pc, #156]	; (800e368 <prvHeapInit+0xac>)
 800e2ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f003 0307 	and.w	r3, r3, #7
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00c      	beq.n	800e2f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	3307      	adds	r3, #7
 800e2da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f023 0307 	bic.w	r3, r3, #7
 800e2e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e2e4:	68ba      	ldr	r2, [r7, #8]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	1ad3      	subs	r3, r2, r3
 800e2ea:	4a1f      	ldr	r2, [pc, #124]	; (800e368 <prvHeapInit+0xac>)
 800e2ec:	4413      	add	r3, r2
 800e2ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e2f4:	4a1d      	ldr	r2, [pc, #116]	; (800e36c <prvHeapInit+0xb0>)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e2fa:	4b1c      	ldr	r3, [pc, #112]	; (800e36c <prvHeapInit+0xb0>)
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	68ba      	ldr	r2, [r7, #8]
 800e304:	4413      	add	r3, r2
 800e306:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e308:	2208      	movs	r2, #8
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	1a9b      	subs	r3, r3, r2
 800e30e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f023 0307 	bic.w	r3, r3, #7
 800e316:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	4a15      	ldr	r2, [pc, #84]	; (800e370 <prvHeapInit+0xb4>)
 800e31c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e31e:	4b14      	ldr	r3, [pc, #80]	; (800e370 <prvHeapInit+0xb4>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2200      	movs	r2, #0
 800e324:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e326:	4b12      	ldr	r3, [pc, #72]	; (800e370 <prvHeapInit+0xb4>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2200      	movs	r2, #0
 800e32c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	1ad2      	subs	r2, r2, r3
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e33c:	4b0c      	ldr	r3, [pc, #48]	; (800e370 <prvHeapInit+0xb4>)
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	4a0a      	ldr	r2, [pc, #40]	; (800e374 <prvHeapInit+0xb8>)
 800e34a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	4a09      	ldr	r2, [pc, #36]	; (800e378 <prvHeapInit+0xbc>)
 800e352:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e354:	4b09      	ldr	r3, [pc, #36]	; (800e37c <prvHeapInit+0xc0>)
 800e356:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e35a:	601a      	str	r2, [r3, #0]
}
 800e35c:	bf00      	nop
 800e35e:	3714      	adds	r7, #20
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr
 800e368:	200004d0 	.word	0x200004d0
 800e36c:	200084d0 	.word	0x200084d0
 800e370:	200084d8 	.word	0x200084d8
 800e374:	200084e0 	.word	0x200084e0
 800e378:	200084dc 	.word	0x200084dc
 800e37c:	200084e4 	.word	0x200084e4

0800e380 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e388:	4b28      	ldr	r3, [pc, #160]	; (800e42c <prvInsertBlockIntoFreeList+0xac>)
 800e38a:	60fb      	str	r3, [r7, #12]
 800e38c:	e002      	b.n	800e394 <prvInsertBlockIntoFreeList+0x14>
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d8f7      	bhi.n	800e38e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d108      	bne.n	800e3c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	685a      	ldr	r2, [r3, #4]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	441a      	add	r2, r3
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	441a      	add	r2, r3
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d118      	bne.n	800e408 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	4b15      	ldr	r3, [pc, #84]	; (800e430 <prvInsertBlockIntoFreeList+0xb0>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d00d      	beq.n	800e3fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	685a      	ldr	r2, [r3, #4]
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	441a      	add	r2, r3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	601a      	str	r2, [r3, #0]
 800e3fc:	e008      	b.n	800e410 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e3fe:	4b0c      	ldr	r3, [pc, #48]	; (800e430 <prvInsertBlockIntoFreeList+0xb0>)
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	601a      	str	r2, [r3, #0]
 800e406:	e003      	b.n	800e410 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e410:	68fa      	ldr	r2, [r7, #12]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	429a      	cmp	r2, r3
 800e416:	d002      	beq.n	800e41e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e41e:	bf00      	nop
 800e420:	3714      	adds	r7, #20
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	200084d0 	.word	0x200084d0
 800e430:	200084d8 	.word	0x200084d8

0800e434 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800e438:	f004 f802 	bl	8012440 <touchgfx_init>
}
 800e43c:	bf00      	nop
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800e444:	f004 f826 	bl	8012494 <touchgfx_taskEntry>
}
 800e448:	bf00      	nop
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
    {
 800e454:	4a04      	ldr	r2, [pc, #16]	; (800e468 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	601a      	str	r2, [r3, #0]
    }
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	4618      	mov	r0, r3
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr
 800e468:	08023fc8 	.word	0x08023fc8

0800e46c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
    }
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7ff ffe9 	bl	800e44c <_ZN8touchgfx12FontProviderD1Ev>
 800e47a:	2104      	movs	r1, #4
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f014 f9e4 	bl	802284a <_ZdlPvj>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	4618      	mov	r0, r3
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	460b      	mov	r3, r1
 800e496:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800e498:	887b      	ldrh	r3, [r7, #2]
 800e49a:	2b03      	cmp	r3, #3
 800e49c:	d81e      	bhi.n	800e4dc <_ZN23ApplicationFontProvider7getFontEt+0x50>
 800e49e:	a201      	add	r2, pc, #4	; (adr r2, 800e4a4 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800e4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a4:	0800e4b5 	.word	0x0800e4b5
 800e4a8:	0800e4bf 	.word	0x0800e4bf
 800e4ac:	0800e4c9 	.word	0x0800e4c9
 800e4b0:	0800e4d3 	.word	0x0800e4d3
    {
    case Typography::DEFAULT:
        // Asap_Regular_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800e4b4:	f002 fa6c 	bl	8010990 <_ZN17TypedTextDatabase8getFontsEv>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	e00f      	b.n	800e4de <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800e4be:	f002 fa67 	bl	8010990 <_ZN17TypedTextDatabase8getFontsEv>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	e00a      	b.n	800e4de <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800e4c8:	f002 fa62 	bl	8010990 <_ZN17TypedTextDatabase8getFontsEv>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	e005      	b.n	800e4de <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800e4d2:	f002 fa5d 	bl	8010990 <_ZN17TypedTextDatabase8getFontsEv>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	689b      	ldr	r3, [r3, #8]
 800e4da:	e000      	b.n	800e4de <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 800e4dc:	2300      	movs	r3, #0
    }
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop

0800e4e8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId VALUES = 2;  // Asap_Bold_30_4bpp
    static const touchgfx::FontId LAMBDA = 2;  // Asap_Bold_30_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	4a05      	ldr	r2, [pc, #20]	; (800e508 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	601a      	str	r2, [r3, #0]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7ff ffa7 	bl	800e44c <_ZN8touchgfx12FontProviderD1Ev>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4618      	mov	r0, r3
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	08023fb4 	.word	0x08023fb4

0800e50c <_ZN23ApplicationFontProviderD0Ev>:
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7ff ffe7 	bl	800e4e8 <_ZN23ApplicationFontProviderD1Ev>
 800e51a:	2104      	movs	r1, #4
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f014 f994 	bl	802284a <_ZdlPvj>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4618      	mov	r0, r3
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	4a04      	ldr	r2, [pc, #16]	; (800e548 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	601a      	str	r2, [r3, #0]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4618      	mov	r0, r3
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr
 800e548:	080260f0 	.word	0x080260f0

0800e54c <_ZN8touchgfx4FontD0Ev>:
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f7ff ffe9 	bl	800e52c <_ZN8touchgfx4FontD1Ev>
 800e55a:	2110      	movs	r1, #16
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f014 f974 	bl	802284a <_ZdlPvj>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4618      	mov	r0, r3
 800e566:	3708      	adds	r7, #8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800e56c:	b590      	push	{r4, r7, lr}
 800e56e:	b087      	sub	sp, #28
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	460b      	mov	r3, r1
 800e576:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800e578:	2300      	movs	r3, #0
 800e57a:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800e57c:	2300      	movs	r3, #0
 800e57e:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	3308      	adds	r3, #8
 800e586:	681c      	ldr	r4, [r3, #0]
 800e588:	f107 030f 	add.w	r3, r7, #15
 800e58c:	f107 0210 	add.w	r2, r7, #16
 800e590:	8879      	ldrh	r1, [r7, #2]
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	47a0      	blx	r4
 800e596:	6178      	str	r0, [r7, #20]
        return glyph;
 800e598:	697b      	ldr	r3, [r7, #20]
    }
 800e59a:	4618      	mov	r0, r3
 800e59c:	371c      	adds	r7, #28
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd90      	pop	{r4, r7, pc}

0800e5a2 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800e5a2:	b480      	push	{r7}
 800e5a4:	b083      	sub	sp, #12
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	895b      	ldrh	r3, [r3, #10]
    }
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	370c      	adds	r7, #12
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800e5ba:	b480      	push	{r7}
 800e5bc:	b083      	sub	sp, #12
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	899b      	ldrh	r3, [r3, #12]
    }
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	370c      	adds	r7, #12
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr

0800e5d2 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800e5d2:	b480      	push	{r7}
 800e5d4:	b083      	sub	sp, #12
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	889b      	ldrh	r3, [r3, #4]
    }
 800e5de:	4618      	mov	r0, r3
 800e5e0:	370c      	adds	r7, #12
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e8:	4770      	bx	lr

0800e5ea <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800e5ea:	b480      	push	{r7}
 800e5ec:	b083      	sub	sp, #12
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	889a      	ldrh	r2, [r3, #4]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	799b      	ldrb	r3, [r3, #6]
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	4413      	add	r3, r2
 800e5fe:	b29b      	uxth	r3, r3
    }
 800e600:	4618      	mov	r0, r3
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	79db      	ldrb	r3, [r3, #7]
 800e618:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800e61c:	b2db      	uxtb	r3, r3
    }
 800e61e:	4618      	mov	r0, r3
 800e620:	370c      	adds	r7, #12
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr

0800e62a <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800e62a:	b480      	push	{r7}
 800e62c:	b083      	sub	sp, #12
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	79db      	ldrb	r3, [r3, #7]
 800e636:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e63a:	b2db      	uxtb	r3, r3
    }
 800e63c:	4618      	mov	r0, r3
 800e63e:	370c      	adds	r7, #12
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	4a05      	ldr	r2, [pc, #20]	; (800e668 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	601a      	str	r2, [r3, #0]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4618      	mov	r0, r3
 800e65a:	f7ff ff67 	bl	800e52c <_ZN8touchgfx4FontD1Ev>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4618      	mov	r0, r3
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	080261a8 	.word	0x080261a8

0800e66c <_ZN8touchgfx9ConstFontD0Ev>:
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7ff ffe7 	bl	800e648 <_ZN8touchgfx9ConstFontD1Ev>
 800e67a:	2118      	movs	r1, #24
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f014 f8e4 	bl	802284a <_ZdlPvj>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	4618      	mov	r0, r3
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	4a05      	ldr	r2, [pc, #20]	; (800e6ac <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7ff ffd3 	bl	800e648 <_ZN8touchgfx9ConstFontD1Ev>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	0802400c 	.word	0x0802400c

0800e6b0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f7ff ffe7 	bl	800e68c <_ZN8touchgfx13GeneratedFontD1Ev>
 800e6be:	2124      	movs	r1, #36	; 0x24
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f014 f8c2 	bl	802284a <_ZdlPvj>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3708      	adds	r7, #8
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b082      	sub	sp, #8
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 f82d 	bl	800e738 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800e6de:	4b08      	ldr	r3, [pc, #32]	; (800e700 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	4b08      	ldr	r3, [pc, #32]	; (800e704 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800e6e4:	6819      	ldr	r1, [r3, #0]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	881b      	ldrh	r3, [r3, #0]
 800e6ea:	005b      	lsls	r3, r3, #1
 800e6ec:	440b      	add	r3, r1
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4413      	add	r3, r2
 800e6f4:	681b      	ldr	r3, [r3, #0]
    }
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	2000b500 	.word	0x2000b500
 800e704:	2000b4f8 	.word	0x2000b4f8

0800e708 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f000 f811 	bl	800e738 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800e716:	4b07      	ldr	r3, [pc, #28]	; (800e734 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800e718:	681a      	ldr	r2, [r3, #0]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	881b      	ldrh	r3, [r3, #0]
 800e71e:	005b      	lsls	r3, r3, #1
 800e720:	4413      	add	r3, r2
 800e722:	785b      	ldrb	r3, [r3, #1]
 800e724:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e728:	b2db      	uxtb	r3, r3
    }
 800e72a:	4618      	mov	r0, r3
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	2000b4f8 	.word	0x2000b4f8

0800e738 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e740:	4b0c      	ldr	r3, [pc, #48]	; (800e774 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d105      	bne.n	800e754 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800e748:	4b0b      	ldr	r3, [pc, #44]	; (800e778 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800e74a:	4a0c      	ldr	r2, [pc, #48]	; (800e77c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800e74c:	21de      	movs	r1, #222	; 0xde
 800e74e:	480c      	ldr	r0, [pc, #48]	; (800e780 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800e750:	f014 f8a6 	bl	80228a0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	881a      	ldrh	r2, [r3, #0]
 800e758:	4b0a      	ldr	r3, [pc, #40]	; (800e784 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800e75a:	881b      	ldrh	r3, [r3, #0]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d305      	bcc.n	800e76c <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800e760:	4b09      	ldr	r3, [pc, #36]	; (800e788 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800e762:	4a06      	ldr	r2, [pc, #24]	; (800e77c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800e764:	21df      	movs	r1, #223	; 0xdf
 800e766:	4806      	ldr	r0, [pc, #24]	; (800e780 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800e768:	f014 f89a 	bl	80228a0 <__assert_func>
    }
 800e76c:	bf00      	nop
 800e76e:	3708      	adds	r7, #8
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}
 800e774:	2000b4f8 	.word	0x2000b4f8
 800e778:	08023928 	.word	0x08023928
 800e77c:	08023fd4 	.word	0x08023fd4
 800e780:	0802396c 	.word	0x0802396c
 800e784:	2000b4fc 	.word	0x2000b4fc
 800e788:	080239b0 	.word	0x080239b0

0800e78c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	7b5b      	ldrb	r3, [r3, #13]
 800e798:	021b      	lsls	r3, r3, #8
 800e79a:	b21b      	sxth	r3, r3
 800e79c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e7a0:	b21a      	sxth	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	7adb      	ldrb	r3, [r3, #11]
 800e7a6:	b21b      	sxth	r3, r3
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	b21b      	sxth	r3, r3
 800e7ac:	b29b      	uxth	r3, r3
    }
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	370c      	adds	r7, #12
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr

0800e7ba <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800e7ba:	b480      	push	{r7}
 800e7bc:	b083      	sub	sp, #12
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6a1b      	ldr	r3, [r3, #32]
    }
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
	...

0800e7d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b08c      	sub	sp, #48	; 0x30
 800e7d8:	af08      	add	r7, sp, #32
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	4611      	mov	r1, r2
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	80fb      	strh	r3, [r7, #6]
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	88b9      	ldrh	r1, [r7, #4]
 800e7ee:	88fa      	ldrh	r2, [r7, #6]
 800e7f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e7f2:	9306      	str	r3, [sp, #24]
 800e7f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e7f6:	9305      	str	r3, [sp, #20]
 800e7f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e7fc:	9304      	str	r3, [sp, #16]
 800e7fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e802:	9303      	str	r3, [sp, #12]
 800e804:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e808:	9302      	str	r3, [sp, #8]
 800e80a:	7f3b      	ldrb	r3, [r7, #28]
 800e80c:	9301      	str	r3, [sp, #4]
 800e80e:	7e3b      	ldrb	r3, [r7, #24]
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	460b      	mov	r3, r1
 800e814:	68b9      	ldr	r1, [r7, #8]
 800e816:	f008 fd37 	bl	8017288 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800e81a:	4a08      	ldr	r2, [pc, #32]	; (800e83c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	601a      	str	r2, [r3, #0]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e824:	619a      	str	r2, [r3, #24]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e82a:	61da      	str	r2, [r3, #28]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e830:	621a      	str	r2, [r3, #32]
{
}
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	4618      	mov	r0, r3
 800e836:	3710      	adds	r7, #16
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	0802400c 	.word	0x0802400c

0800e840 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800e840:	b480      	push	{r7}
 800e842:	b085      	sub	sp, #20
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	699b      	ldr	r3, [r3, #24]
 800e84e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	889b      	ldrh	r3, [r3, #4]
 800e854:	0adb      	lsrs	r3, r3, #11
 800e856:	b29b      	uxth	r3, r3
 800e858:	009b      	lsls	r3, r3, #2
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	4413      	add	r3, r2
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4413      	add	r3, r2
}
 800e866:	4618      	mov	r0, r3
 800e868:	3714      	adds	r7, #20
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr

0800e872 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b086      	sub	sp, #24
 800e876:	af00      	add	r7, sp, #0
 800e878:	60f8      	str	r0, [r7, #12]
 800e87a:	460b      	mov	r3, r1
 800e87c:	607a      	str	r2, [r7, #4]
 800e87e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d003      	beq.n	800e88e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	7b1b      	ldrb	r3, [r3, #12]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d101      	bne.n	800e892 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800e88e:	2300      	movs	r3, #0
 800e890:	e023      	b.n	800e8da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7ff ff7a 	bl	800e78c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800e898:	4603      	mov	r3, r0
 800e89a:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800e89c:	8abb      	ldrh	r3, [r7, #20]
 800e89e:	82fb      	strh	r3, [r7, #22]
 800e8a0:	8afa      	ldrh	r2, [r7, #22]
 800e8a2:	8abb      	ldrh	r3, [r7, #20]
 800e8a4:	6879      	ldr	r1, [r7, #4]
 800e8a6:	7b09      	ldrb	r1, [r1, #12]
 800e8a8:	440b      	add	r3, r1
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	da14      	bge.n	800e8d8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	69da      	ldr	r2, [r3, #28]
 800e8b2:	8afb      	ldrh	r3, [r7, #22]
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	4413      	add	r3, r2
 800e8b8:	881b      	ldrh	r3, [r3, #0]
 800e8ba:	897a      	ldrh	r2, [r7, #10]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d107      	bne.n	800e8d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	69da      	ldr	r2, [r3, #28]
 800e8c4:	8afb      	ldrh	r3, [r7, #22]
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	4413      	add	r3, r2
 800e8ca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e8ce:	e004      	b.n	800e8da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800e8d0:	8afb      	ldrh	r3, [r7, #22]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	82fb      	strh	r3, [r7, #22]
 800e8d6:	e7e3      	b.n	800e8a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800e8d8:	2300      	movs	r3, #0
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3718      	adds	r7, #24
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
	...

0800e8e4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	4801      	ldr	r0, [pc, #4]	; (800e8f0 <__tcf_0+0xc>)
 800e8ea:	f7ff fecf 	bl	800e68c <_ZN8touchgfx13GeneratedFontD1Ev>
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	200084e8 	.word	0x200084e8

0800e8f4 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b08a      	sub	sp, #40	; 0x28
 800e8f8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800e8fa:	4b15      	ldr	r3, [pc, #84]	; (800e950 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f003 0301 	and.w	r3, r3, #1
 800e902:	2b00      	cmp	r3, #0
 800e904:	d11f      	bne.n	800e946 <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 800e906:	2300      	movs	r3, #0
 800e908:	9309      	str	r3, [sp, #36]	; 0x24
 800e90a:	2300      	movs	r3, #0
 800e90c:	9308      	str	r3, [sp, #32]
 800e90e:	233f      	movs	r3, #63	; 0x3f
 800e910:	9307      	str	r3, [sp, #28]
 800e912:	4b10      	ldr	r3, [pc, #64]	; (800e954 <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 800e914:	9306      	str	r3, [sp, #24]
 800e916:	4b10      	ldr	r3, [pc, #64]	; (800e958 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 800e918:	9305      	str	r3, [sp, #20]
 800e91a:	2301      	movs	r3, #1
 800e91c:	9304      	str	r3, [sp, #16]
 800e91e:	2300      	movs	r3, #0
 800e920:	9303      	str	r3, [sp, #12]
 800e922:	2301      	movs	r3, #1
 800e924:	9302      	str	r3, [sp, #8]
 800e926:	2304      	movs	r3, #4
 800e928:	9301      	str	r3, [sp, #4]
 800e92a:	2300      	movs	r3, #0
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	231e      	movs	r3, #30
 800e930:	220d      	movs	r2, #13
 800e932:	490a      	ldr	r1, [pc, #40]	; (800e95c <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 800e934:	480a      	ldr	r0, [pc, #40]	; (800e960 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 800e936:	f7ff ff4d 	bl	800e7d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e93a:	4b05      	ldr	r3, [pc, #20]	; (800e950 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800e93c:	2201      	movs	r2, #1
 800e93e:	601a      	str	r2, [r3, #0]
 800e940:	4808      	ldr	r0, [pc, #32]	; (800e964 <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 800e942:	f013 ffcb 	bl	80228dc <atexit>
    return Asap_Bold_30_4bpp;
 800e946:	4b06      	ldr	r3, [pc, #24]	; (800e960 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 800e948:	4618      	mov	r0, r3
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	2000850c 	.word	0x2000850c
 800e954:	08029274 	.word	0x08029274
 800e958:	08024058 	.word	0x08024058
 800e95c:	08029280 	.word	0x08029280
 800e960:	200084e8 	.word	0x200084e8
 800e964:	0800e8e5 	.word	0x0800e8e5

0800e968 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800e968:	b580      	push	{r7, lr}
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	4801      	ldr	r0, [pc, #4]	; (800e974 <__tcf_0+0xc>)
 800e96e:	f7ff fe8d 	bl	800e68c <_ZN8touchgfx13GeneratedFontD1Ev>
 800e972:	bd80      	pop	{r7, pc}
 800e974:	20008510 	.word	0x20008510

0800e978 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08a      	sub	sp, #40	; 0x28
 800e97c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800e97e:	4b15      	ldr	r3, [pc, #84]	; (800e9d4 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f003 0301 	and.w	r3, r3, #1
 800e986:	2b00      	cmp	r3, #0
 800e988:	d11f      	bne.n	800e9ca <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 800e98a:	2300      	movs	r3, #0
 800e98c:	9309      	str	r3, [sp, #36]	; 0x24
 800e98e:	2300      	movs	r3, #0
 800e990:	9308      	str	r3, [sp, #32]
 800e992:	233f      	movs	r3, #63	; 0x3f
 800e994:	9307      	str	r3, [sp, #28]
 800e996:	4b10      	ldr	r3, [pc, #64]	; (800e9d8 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 800e998:	9306      	str	r3, [sp, #24]
 800e99a:	4b10      	ldr	r3, [pc, #64]	; (800e9dc <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 800e99c:	9305      	str	r3, [sp, #20]
 800e99e:	2301      	movs	r3, #1
 800e9a0:	9304      	str	r3, [sp, #16]
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	9303      	str	r3, [sp, #12]
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	9302      	str	r3, [sp, #8]
 800e9aa:	2304      	movs	r3, #4
 800e9ac:	9301      	str	r3, [sp, #4]
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	9300      	str	r3, [sp, #0]
 800e9b2:	2328      	movs	r3, #40	; 0x28
 800e9b4:	220c      	movs	r2, #12
 800e9b6:	490a      	ldr	r1, [pc, #40]	; (800e9e0 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 800e9b8:	480a      	ldr	r0, [pc, #40]	; (800e9e4 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 800e9ba:	f7ff ff0b 	bl	800e7d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e9be:	4b05      	ldr	r3, [pc, #20]	; (800e9d4 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	601a      	str	r2, [r3, #0]
 800e9c4:	4808      	ldr	r0, [pc, #32]	; (800e9e8 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 800e9c6:	f013 ff89 	bl	80228dc <atexit>
    return Asap_Bold_40_4bpp;
 800e9ca:	4b06      	ldr	r3, [pc, #24]	; (800e9e4 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	20008534 	.word	0x20008534
 800e9d8:	08029278 	.word	0x08029278
 800e9dc:	0802405c 	.word	0x0802405c
 800e9e0:	08029338 	.word	0x08029338
 800e9e4:	20008510 	.word	0x20008510
 800e9e8:	0800e969 	.word	0x0800e969

0800e9ec <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Regular_20_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Regular_20_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Regular_20_4bpp()
{
    static touchgfx::GeneratedFont Asap_Regular_20_4bpp(glyphs_Asap_Regular_20_4bpp, 21, 20, 4, 4, 1, 0, 0, unicodes_Asap_Regular_20_4bpp, kerning_Asap_Regular_20_4bpp, 0, 0, 0);
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	4801      	ldr	r0, [pc, #4]	; (800e9f8 <__tcf_0+0xc>)
 800e9f2:	f7ff fe4b 	bl	800e68c <_ZN8touchgfx13GeneratedFontD1Ev>
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	20008538 	.word	0x20008538

0800e9fc <_Z28getFont_Asap_Regular_20_4bppv>:
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b08a      	sub	sp, #40	; 0x28
 800ea00:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Regular_20_4bpp(glyphs_Asap_Regular_20_4bpp, 21, 20, 4, 4, 1, 0, 0, unicodes_Asap_Regular_20_4bpp, kerning_Asap_Regular_20_4bpp, 0, 0, 0);
 800ea02:	4b15      	ldr	r3, [pc, #84]	; (800ea58 <_Z28getFont_Asap_Regular_20_4bppv+0x5c>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f003 0301 	and.w	r3, r3, #1
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d11f      	bne.n	800ea4e <_Z28getFont_Asap_Regular_20_4bppv+0x52>
 800ea0e:	2300      	movs	r3, #0
 800ea10:	9309      	str	r3, [sp, #36]	; 0x24
 800ea12:	2300      	movs	r3, #0
 800ea14:	9308      	str	r3, [sp, #32]
 800ea16:	2300      	movs	r3, #0
 800ea18:	9307      	str	r3, [sp, #28]
 800ea1a:	4b10      	ldr	r3, [pc, #64]	; (800ea5c <_Z28getFont_Asap_Regular_20_4bppv+0x60>)
 800ea1c:	9306      	str	r3, [sp, #24]
 800ea1e:	4b10      	ldr	r3, [pc, #64]	; (800ea60 <_Z28getFont_Asap_Regular_20_4bppv+0x64>)
 800ea20:	9305      	str	r3, [sp, #20]
 800ea22:	2300      	movs	r3, #0
 800ea24:	9304      	str	r3, [sp, #16]
 800ea26:	2300      	movs	r3, #0
 800ea28:	9303      	str	r3, [sp, #12]
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	9302      	str	r3, [sp, #8]
 800ea2e:	2304      	movs	r3, #4
 800ea30:	9301      	str	r3, [sp, #4]
 800ea32:	2304      	movs	r3, #4
 800ea34:	9300      	str	r3, [sp, #0]
 800ea36:	2314      	movs	r3, #20
 800ea38:	2215      	movs	r2, #21
 800ea3a:	490a      	ldr	r1, [pc, #40]	; (800ea64 <_Z28getFont_Asap_Regular_20_4bppv+0x68>)
 800ea3c:	480a      	ldr	r0, [pc, #40]	; (800ea68 <_Z28getFont_Asap_Regular_20_4bppv+0x6c>)
 800ea3e:	f7ff fec9 	bl	800e7d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800ea42:	4b05      	ldr	r3, [pc, #20]	; (800ea58 <_Z28getFont_Asap_Regular_20_4bppv+0x5c>)
 800ea44:	2201      	movs	r2, #1
 800ea46:	601a      	str	r2, [r3, #0]
 800ea48:	4808      	ldr	r0, [pc, #32]	; (800ea6c <_Z28getFont_Asap_Regular_20_4bppv+0x70>)
 800ea4a:	f013 ff47 	bl	80228dc <atexit>
    return Asap_Regular_20_4bpp;
 800ea4e:	4b06      	ldr	r3, [pc, #24]	; (800ea68 <_Z28getFont_Asap_Regular_20_4bppv+0x6c>)
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	bf00      	nop
 800ea58:	2000855c 	.word	0x2000855c
 800ea5c:	0802927c 	.word	0x0802927c
 800ea60:	08024060 	.word	0x08024060
 800ea64:	080293e0 	.word	0x080293e0
 800ea68:	20008538 	.word	0x20008538
 800ea6c:	0800e9ed 	.word	0x0800e9ed

0800ea70 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800ea70:	b480      	push	{r7}
 800ea72:	b083      	sub	sp, #12
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	370c      	adds	r7, #12
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
    {
    }
 800ea92:	bf00      	nop
 800ea94:	370c      	adds	r7, #12
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr

0800ea9e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ea9e:	b480      	push	{r7}
 800eaa0:	b083      	sub	sp, #12
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
 800eaa6:	6039      	str	r1, [r7, #0]
    {
    }
 800eaa8:	bf00      	nop
 800eaaa:	370c      	adds	r7, #12
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
    {
    }
 800eabe:	bf00      	nop
 800eac0:	370c      	adds	r7, #12
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr

0800eaca <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800eaca:	b480      	push	{r7}
 800eacc:	b083      	sub	sp, #12
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	460b      	mov	r3, r1
 800ead4:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ead6:	bf00      	nop
 800ead8:	370c      	adds	r7, #12
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800eae2:	b480      	push	{r7}
 800eae4:	b083      	sub	sp, #12
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
    {
    }
 800eaea:	bf00      	nop
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800eaf6:	b480      	push	{r7}
 800eaf8:	b083      	sub	sp, #12
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
    {
    }
 800eafe:	bf00      	nop
 800eb00:	370c      	adds	r7, #12
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr
	...

0800eb0c <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
    {
 800eb14:	4a04      	ldr	r2, [pc, #16]	; (800eb28 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	601a      	str	r2, [r3, #0]
    }
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr
 800eb28:	08024154 	.word	0x08024154

0800eb2c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
    }
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7ff ffe9 	bl	800eb0c <_ZN8touchgfx15UIEventListenerD1Ev>
 800eb3a:	2104      	movs	r1, #4
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f013 fe84 	bl	802284a <_ZdlPvj>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4618      	mov	r0, r3
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800eb54:	4a07      	ldr	r2, [pc, #28]	; (800eb74 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	605a      	str	r2, [r3, #4]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2200      	movs	r2, #0
 800eb64:	721a      	strb	r2, [r3, #8]
    {
    }
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr
 800eb74:	08024134 	.word	0x08024134

0800eb78 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800eb78:	b480      	push	{r7}
 800eb7a:	b083      	sub	sp, #12
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
    {
 800eb80:	4a04      	ldr	r2, [pc, #16]	; (800eb94 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	601a      	str	r2, [r3, #0]
    }
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr
 800eb94:	08024134 	.word	0x08024134

0800eb98 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
    }
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f7ff ffe9 	bl	800eb78 <_ZN8touchgfx10TransitionD1Ev>
 800eba6:	210c      	movs	r1, #12
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f013 fe4e 	bl	802284a <_ZdlPvj>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	bf00      	nop
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	bf00      	nop
 800ebd6:	370c      	adds	r7, #12
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr

0800ebe0 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800ebe0:	b480      	push	{r7}
 800ebe2:	b083      	sub	sp, #12
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	bf00      	nop
 800ebea:	370c      	adds	r7, #12
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	683a      	ldr	r2, [r7, #0]
 800ec02:	605a      	str	r2, [r3, #4]
    }
 800ec04:	bf00      	nop
 800ec06:	370c      	adds	r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ec1c:	bf00      	nop
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
    {
 800ec30:	4a04      	ldr	r2, [pc, #16]	; (800ec44 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	601a      	str	r2, [r3, #0]
    }
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	370c      	adds	r7, #12
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr
 800ec44:	0802411c 	.word	0x0802411c

0800ec48 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
    }
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f7ff ffe9 	bl	800ec28 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ec56:	2104      	movs	r1, #4
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f013 fdf6 	bl	802284a <_ZdlPvj>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4618      	mov	r0, r3
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ec68:	b480      	push	{r7}
 800ec6a:	af00      	add	r7, sp, #0
    {
        return instance;
 800ec6c:	4b03      	ldr	r3, [pc, #12]	; (800ec7c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
    }
 800ec70:	4618      	mov	r0, r3
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr
 800ec7a:	bf00      	nop
 800ec7c:	2000b468 	.word	0x2000b468

0800ec80 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ec80:	b480      	push	{r7}
 800ec82:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ec84:	4b0b      	ldr	r3, [pc, #44]	; (800ecb4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d008      	beq.n	800eca2 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800ec90:	4b08      	ldr	r3, [pc, #32]	; (800ecb4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d003      	beq.n	800eca2 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800ec9a:	4b06      	ldr	r3, [pc, #24]	; (800ecb4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eca0:	e002      	b.n	800eca8 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800eca2:	4b04      	ldr	r3, [pc, #16]	; (800ecb4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	689b      	ldr	r3, [r3, #8]
        }
    }
 800eca8:	4618      	mov	r0, r3
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop
 800ecb4:	2000b468 	.word	0x2000b468

0800ecb8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	4a05      	ldr	r2, [pc, #20]	; (800ecd8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	601a      	str	r2, [r3, #0]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7ff ff1f 	bl	800eb0c <_ZN8touchgfx15UIEventListenerD1Ev>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	08026008 	.word	0x08026008

0800ecdc <_ZN8touchgfx11ApplicationD0Ev>:
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f7ff ffe7 	bl	800ecb8 <_ZN8touchgfx11ApplicationD1Ev>
 800ecea:	f44f 7198 	mov.w	r1, #304	; 0x130
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f013 fdab 	bl	802284a <_ZdlPvj>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3708      	adds	r7, #8
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
	...

0800ed00 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f007 fdf6 	bl	80168fc <_ZN8touchgfx11ApplicationC1Ev>
 800ed10:	4a09      	ldr	r2, [pc, #36]	; (800ed38 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	601a      	str	r2, [r3, #0]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2200      	movs	r2, #0
 800ed22:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	4a04      	ldr	r2, [pc, #16]	; (800ed3c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800ed2a:	6013      	str	r3, [r2, #0]
    }
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	080240e0 	.word	0x080240e0
 800ed3c:	2000b4f4 	.word	0x2000b4f4

0800ed40 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	4a05      	ldr	r2, [pc, #20]	; (800ed60 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	601a      	str	r2, [r3, #0]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7ff ffb1 	bl	800ecb8 <_ZN8touchgfx11ApplicationD1Ev>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3708      	adds	r7, #8
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	080240e0 	.word	0x080240e0

0800ed64 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f7ff ffe7 	bl	800ed40 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ed72:	f44f 719c 	mov.w	r1, #312	; 0x138
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f013 fd67 	bl	802284a <_ZdlPvj>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3708      	adds	r7, #8
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b082      	sub	sp, #8
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 f804 	bl	800ed9c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800ed94:	bf00      	nop
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d00f      	beq.n	800edce <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	330c      	adds	r3, #12
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4610      	mov	r0, r2
 800edc2:	4798      	blx	r3
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d001      	beq.n	800edce <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800edca:	2301      	movs	r3, #1
 800edcc:	e000      	b.n	800edd0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800edce:	2300      	movs	r3, #0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d00e      	beq.n	800edf2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	3308      	adds	r3, #8
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4610      	mov	r0, r2
 800ede8:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800edf2:	bf00      	nop
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b084      	sub	sp, #16
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	60f8      	str	r0, [r7, #12]
 800ee02:	60b9      	str	r1, [r7, #8]
 800ee04:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800ee06:	f007 fd57 	bl	80168b8 <_ZN8touchgfx11Application11getInstanceEv>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f007 fd59 	bl	80168c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d008      	beq.n	800ee2c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	330c      	adds	r3, #12
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4610      	mov	r0, r2
 800ee2a:	4798      	blx	r3
    }
    if (*currentTrans)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d007      	beq.n	800ee44 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4610      	mov	r0, r2
 800ee42:	4798      	blx	r3
    }
    if (*currentScreen)
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d008      	beq.n	800ee5e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	3314      	adds	r3, #20
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	4610      	mov	r0, r2
 800ee5c:	4798      	blx	r3
    }
    if (*currentPresenter)
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d008      	beq.n	800ee78 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	3304      	adds	r3, #4
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4610      	mov	r0, r2
 800ee76:	4798      	blx	r3
    }
    if (*currentScreen)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d007      	beq.n	800ee90 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4610      	mov	r0, r2
 800ee8e:	4798      	blx	r3
    }
    if (*currentPresenter)
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d008      	beq.n	800eeaa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	3308      	adds	r3, #8
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	4610      	mov	r0, r2
 800eea8:	4798      	blx	r3
    }
}
 800eeaa:	bf00      	nop
 800eeac:	3710      	adds	r7, #16
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b084      	sub	sp, #16
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	60f8      	str	r0, [r7, #12]
 800eeba:	60b9      	str	r1, [r7, #8]
 800eebc:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	330c      	adds	r3, #12
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	4798      	blx	r3
    newPresenter->activate();
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	68b8      	ldr	r0, [r7, #8]
 800eed2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800eed4:	6879      	ldr	r1, [r7, #4]
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	f008 fdfe 	bl	8017ad8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	3310      	adds	r3, #16
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	4798      	blx	r3

    Application::getInstance()->draw();
 800eee8:	f007 fce6 	bl	80168b8 <_ZN8touchgfx11Application11getInstanceEv>
 800eeec:	4602      	mov	r2, r0
 800eeee:	6813      	ldr	r3, [r2, #0]
 800eef0:	3328      	adds	r3, #40	; 0x28
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4610      	mov	r0, r2
 800eef6:	4798      	blx	r3
}
 800eef8:	bf00      	nop
 800eefa:	3710      	adds	r7, #16
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	683a      	ldr	r2, [r7, #0]
 800ef0e:	601a      	str	r2, [r3, #0]
    }
 800ef10:	bf00      	nop
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	4a08      	ldr	r2, [pc, #32]	; (800ef48 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	601a      	str	r2, [r3, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ef30:	4618      	mov	r0, r3
 800ef32:	f000 fa5f 	bl	800f3f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7ff ff01 	bl	800ed40 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4618      	mov	r0, r3
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	0802408c 	.word	0x0802408c

0800ef4c <_ZN23FrontendApplicationBaseD0Ev>:
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7ff ffe1 	bl	800ef1c <_ZN23FrontendApplicationBaseD1Ev>
 800ef5a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f013 fc73 	bl	802284a <_ZdlPvj>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	4618      	mov	r0, r3
 800ef68:	3708      	adds	r7, #8
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
	...

0800ef70 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7ff fde6 	bl	800eb4c <_ZN8touchgfx10TransitionC1Ev>
 800ef80:	4a03      	ldr	r2, [pc, #12]	; (800ef90 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	601a      	str	r2, [r3, #0]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	0802406c 	.word	0x0802406c

0800ef94 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	4a05      	ldr	r2, [pc, #20]	; (800efb4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	601a      	str	r2, [r3, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7ff fde7 	bl	800eb78 <_ZN8touchgfx10TransitionD1Ev>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4618      	mov	r0, r3
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	0802406c 	.word	0x0802406c

0800efb8 <_ZN8touchgfx12NoTransitionD0Ev>:
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff ffe7 	bl	800ef94 <_ZN8touchgfx12NoTransitionD1Ev>
 800efc6:	210c      	movs	r1, #12
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f013 fc3e 	bl	802284a <_ZdlPvj>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	4618      	mov	r0, r3
 800efd2:	3708      	adds	r7, #8
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2201      	movs	r2, #1
 800efe4:	721a      	strb	r2, [r3, #8]
    }
 800efe6:	bf00      	nop
 800efe8:	370c      	adds	r7, #12
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr

0800eff2 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800eff2:	b480      	push	{r7}
 800eff4:	b083      	sub	sp, #12
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]
 800effa:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	683a      	ldr	r2, [r7, #0]
 800f000:	605a      	str	r2, [r3, #4]
    }
 800f002:	bf00      	nop
 800f004:	370c      	adds	r7, #12
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
	...

0800f010 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	4618      	mov	r0, r3
 800f020:	f7ff fe6e 	bl	800ed00 <_ZN8touchgfx14MVPApplicationC1Ev>
 800f024:	4a13      	ldr	r2, [pc, #76]	; (800f074 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	601a      	str	r2, [r3, #0]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f030:	4618      	mov	r0, r3
 800f032:	f000 f89f 	bl	800f174 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	68ba      	ldr	r2, [r7, #8]
 800f042:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800f046:	f7ff fe0f 	bl	800ec68 <_ZN8touchgfx3HAL11getInstanceEv>
 800f04a:	4602      	mov	r2, r0
 800f04c:	6813      	ldr	r3, [r2, #0]
 800f04e:	3308      	adds	r3, #8
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2100      	movs	r1, #0
 800f054:	4610      	mov	r0, r2
 800f056:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800f058:	2000      	movs	r0, #0
 800f05a:	f001 fc21 	bl	80108a0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800f05e:	f7ff fe0f 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 800f062:	4603      	mov	r3, r0
 800f064:	4618      	mov	r0, r3
 800f066:	f00d f8fe 	bl	801c266 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	4618      	mov	r0, r3
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}
 800f074:	0802408c 	.word	0x0802408c

0800f078 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800f078:	b480      	push	{r7}
 800f07a:	b083      	sub	sp, #12
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	4618      	mov	r0, r3
 800f086:	370c      	adds	r7, #12
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	683a      	ldr	r2, [r7, #0]
 800f09e:	4611      	mov	r1, r2
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7ff ffe9 	bl	800f078 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	685a      	ldr	r2, [r3, #4]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	605a      	str	r2, [r3, #4]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	683a      	ldr	r2, [r7, #0]
 800f0b2:	3308      	adds	r3, #8
 800f0b4:	3208      	adds	r2, #8
 800f0b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0ba:	e883 0003 	stmia.w	r3, {r0, r1}
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800f0c8:	b590      	push	{r4, r7, lr}
 800f0ca:	b089      	sub	sp, #36	; 0x24
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800f0d6:	4b10      	ldr	r3, [pc, #64]	; (800f118 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800f0d8:	61bb      	str	r3, [r7, #24]
 800f0da:	2300      	movs	r3, #0
 800f0dc:	61fb      	str	r3, [r7, #28]
 800f0de:	f107 0008 	add.w	r0, r7, #8
 800f0e2:	f107 0318 	add.w	r3, r7, #24
 800f0e6:	cb0c      	ldmia	r3, {r2, r3}
 800f0e8:	6879      	ldr	r1, [r7, #4]
 800f0ea:	f000 f85f 	bl	800f1ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800f0ee:	f107 0308 	add.w	r3, r7, #8
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f7ff ffcb 	bl	800f090 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800f0fa:	f107 0308 	add.w	r3, r7, #8
 800f0fe:	4618      	mov	r0, r3
 800f100:	f000 f978 	bl	800f3f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800f110:	bf00      	nop
 800f112:	3724      	adds	r7, #36	; 0x24
 800f114:	46bd      	mov	sp, r7
 800f116:	bd90      	pop	{r4, r7, pc}
 800f118:	0800f11d 	.word	0x0800f11d

0800f11c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af02      	add	r7, sp, #8
 800f122:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800f130:	461a      	mov	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	4b04      	ldr	r3, [pc, #16]	; (800f14c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800f13c:	4804      	ldr	r0, [pc, #16]	; (800f150 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800f13e:	f000 f855 	bl	800f1ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800f142:	bf00      	nop
 800f144:	3708      	adds	r7, #8
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	2000b4e8 	.word	0x2000b4e8
 800f150:	2000b4e4 	.word	0x2000b4e4

0800f154 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800f154:	b480      	push	{r7}
 800f156:	b083      	sub	sp, #12
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	4a04      	ldr	r2, [pc, #16]	; (800f170 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	601a      	str	r2, [r3, #0]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	4618      	mov	r0, r3
 800f166:	370c      	adds	r7, #12
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr
 800f170:	0802411c 	.word	0x0802411c

0800f174 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	4618      	mov	r0, r3
 800f180:	f7ff ffe8 	bl	800f154 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f184:	4a08      	ldr	r2, [pc, #32]	; (800f1a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	601a      	str	r2, [r3, #0]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	605a      	str	r2, [r3, #4]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	609a      	str	r2, [r3, #8]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	60da      	str	r2, [r3, #12]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	080240c8 	.word	0x080240c8

0800f1ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	4639      	mov	r1, r7
 800f1b8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff ffc8 	bl	800f154 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f1c4:	4a08      	ldr	r2, [pc, #32]	; (800f1e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	68ba      	ldr	r2, [r7, #8]
 800f1ce:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	3308      	adds	r3, #8
 800f1d4:	463a      	mov	r2, r7
 800f1d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1da:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3710      	adds	r7, #16
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	080240c8 	.word	0x080240c8

0800f1ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f1ec:	b590      	push	{r4, r7, lr}
 800f1ee:	b089      	sub	sp, #36	; 0x24
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	60f8      	str	r0, [r7, #12]
 800f1f4:	60b9      	str	r1, [r7, #8]
 800f1f6:	607a      	str	r2, [r7, #4]
 800f1f8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	689a      	ldr	r2, [r3, #8]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	3320      	adds	r3, #32
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4610      	mov	r0, r2
 800f20a:	4798      	blx	r3
 800f20c:	4602      	mov	r2, r0
 800f20e:	f242 0313 	movw	r3, #8211	; 0x2013
 800f212:	429a      	cmp	r2, r3
 800f214:	d805      	bhi.n	800f222 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800f216:	4b4e      	ldr	r3, [pc, #312]	; (800f350 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800f218:	4a4e      	ldr	r2, [pc, #312]	; (800f354 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800f21a:	21c2      	movs	r1, #194	; 0xc2
 800f21c:	484e      	ldr	r0, [pc, #312]	; (800f358 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800f21e:	f013 fb3f 	bl	80228a0 <__assert_func>
 800f222:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685a      	ldr	r2, [r3, #4]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	3320      	adds	r3, #32
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	4610      	mov	r0, r2
 800f234:	4798      	blx	r3
 800f236:	4603      	mov	r3, r0
 800f238:	2b0f      	cmp	r3, #15
 800f23a:	d805      	bhi.n	800f248 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800f23c:	4b47      	ldr	r3, [pc, #284]	; (800f35c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800f23e:	4a45      	ldr	r2, [pc, #276]	; (800f354 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800f240:	21c3      	movs	r1, #195	; 0xc3
 800f242:	4845      	ldr	r0, [pc, #276]	; (800f358 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800f244:	f013 fb2c 	bl	80228a0 <__assert_func>
 800f248:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	68da      	ldr	r2, [r3, #12]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	3320      	adds	r3, #32
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4610      	mov	r0, r2
 800f25a:	4798      	blx	r3
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b0b      	cmp	r3, #11
 800f260:	d805      	bhi.n	800f26e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800f262:	4b3f      	ldr	r3, [pc, #252]	; (800f360 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800f264:	4a3b      	ldr	r2, [pc, #236]	; (800f354 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800f266:	21c4      	movs	r1, #196	; 0xc4
 800f268:	483b      	ldr	r0, [pc, #236]	; (800f358 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800f26a:	f013 fb19 	bl	80228a0 <__assert_func>
 800f26e:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800f270:	683a      	ldr	r2, [r7, #0]
 800f272:	68b9      	ldr	r1, [r7, #8]
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f7ff fdc0 	bl	800edfa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	2100      	movs	r1, #0
 800f280:	4618      	mov	r0, r3
 800f282:	f000 f86f 	bl	800f364 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800f286:	4603      	mov	r3, r0
 800f288:	4619      	mov	r1, r3
 800f28a:	200c      	movs	r0, #12
 800f28c:	f7ff fbf0 	bl	800ea70 <_ZnwjPv>
 800f290:	4604      	mov	r4, r0
 800f292:	2c00      	cmp	r4, #0
 800f294:	d004      	beq.n	800f2a0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800f296:	4620      	mov	r0, r4
 800f298:	f7ff fe6a 	bl	800ef70 <_ZN8touchgfx12NoTransitionC1Ev>
 800f29c:	4623      	mov	r3, r4
 800f29e:	e000      	b.n	800f2a2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800f2a0:	4623      	mov	r3, r4
 800f2a2:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	689b      	ldr	r3, [r3, #8]
 800f2a8:	2100      	movs	r1, #0
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f000 f86d 	bl	800f38a <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	f242 0014 	movw	r0, #8212	; 0x2014
 800f2b8:	f7ff fbda 	bl	800ea70 <_ZnwjPv>
 800f2bc:	4604      	mov	r4, r0
 800f2be:	2c00      	cmp	r4, #0
 800f2c0:	d004      	beq.n	800f2cc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f001 fd36 	bl	8010d34 <_ZN8MainViewC1Ev>
 800f2c8:	4623      	mov	r3, r4
 800f2ca:	e000      	b.n	800f2ce <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800f2cc:	4623      	mov	r3, r4
 800f2ce:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f000 f86a 	bl	800f3b0 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	4619      	mov	r1, r3
 800f2e0:	2010      	movs	r0, #16
 800f2e2:	f7ff fbc5 	bl	800ea70 <_ZnwjPv>
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	2c00      	cmp	r4, #0
 800f2ea:	d005      	beq.n	800f2f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800f2ec:	69b9      	ldr	r1, [r7, #24]
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	f001 fc86 	bl	8010c00 <_ZN13MainPresenterC1ER8MainView>
 800f2f4:	4623      	mov	r3, r4
 800f2f6:	e000      	b.n	800f2fa <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800f2f8:	4623      	mov	r3, r4
 800f2fa:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	69fa      	ldr	r2, [r7, #28]
 800f300:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	697a      	ldr	r2, [r7, #20]
 800f306:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	69ba      	ldr	r2, [r7, #24]
 800f30c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d002      	beq.n	800f31a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	3304      	adds	r3, #4
 800f318:	e000      	b.n	800f31c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800f31a:	2300      	movs	r3, #0
 800f31c:	4619      	mov	r1, r3
 800f31e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f320:	f7ff fdee 	bl	800ef00 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	3304      	adds	r3, #4
 800f328:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7ff fe61 	bl	800eff2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	6979      	ldr	r1, [r7, #20]
 800f334:	4618      	mov	r0, r3
 800f336:	f000 f84e 	bl	800f3d6 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800f33a:	69fa      	ldr	r2, [r7, #28]
 800f33c:	6979      	ldr	r1, [r7, #20]
 800f33e:	69b8      	ldr	r0, [r7, #24]
 800f340:	f7ff fdb7 	bl	800eeb2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800f344:	697b      	ldr	r3, [r7, #20]
}
 800f346:	4618      	mov	r0, r3
 800f348:	3724      	adds	r7, #36	; 0x24
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd90      	pop	{r4, r7, pc}
 800f34e:	bf00      	nop
 800f350:	08023a04 	.word	0x08023a04
 800f354:	08024174 	.word	0x08024174
 800f358:	08023a94 	.word	0x08023a94
 800f35c:	08023ad8 	.word	0x08023ad8
 800f360:	08023b7c 	.word	0x08023b7c

0800f364 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	460b      	mov	r3, r1
 800f36e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	3324      	adds	r3, #36	; 0x24
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	887a      	ldrh	r2, [r7, #2]
 800f37a:	4611      	mov	r1, r2
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	4798      	blx	r3
 800f380:	4603      	mov	r3, r0
    }
 800f382:	4618      	mov	r0, r3
 800f384:	3708      	adds	r7, #8
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b082      	sub	sp, #8
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
 800f392:	460b      	mov	r3, r1
 800f394:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	3324      	adds	r3, #36	; 0x24
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	887a      	ldrh	r2, [r7, #2]
 800f3a0:	4611      	mov	r1, r2
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	4798      	blx	r3
 800f3a6:	4603      	mov	r3, r0
    }
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	460b      	mov	r3, r1
 800f3ba:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	3324      	adds	r3, #36	; 0x24
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	887a      	ldrh	r2, [r7, #2]
 800f3c6:	4611      	mov	r1, r2
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	4798      	blx	r3
 800f3cc:	4603      	mov	r3, r0
    }
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3708      	adds	r7, #8
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}

0800f3d6 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800f3d6:	b480      	push	{r7}
 800f3d8:	b083      	sub	sp, #12
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
 800f3de:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	683a      	ldr	r2, [r7, #0]
 800f3e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f3e6:	bf00      	nop
 800f3e8:	370c      	adds	r7, #12
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr
	...

0800f3f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	4a05      	ldr	r2, [pc, #20]	; (800f414 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	601a      	str	r2, [r3, #0]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	4618      	mov	r0, r3
 800f406:	f7ff fc0f 	bl	800ec28 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	4618      	mov	r0, r3
 800f40e:	3708      	adds	r7, #8
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	080240c8 	.word	0x080240c8

0800f418 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800f418:	b580      	push	{r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7ff ffe7 	bl	800f3f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f426:	2110      	movs	r1, #16
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f013 fa0e 	bl	802284a <_ZdlPvj>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4618      	mov	r0, r3
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	68d2      	ldr	r2, [r2, #12]
 800f448:	1052      	asrs	r2, r2, #1
 800f44a:	1899      	adds	r1, r3, r2
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	f003 0301 	and.w	r3, r3, #1
 800f454:	2b00      	cmp	r3, #0
 800f456:	d102      	bne.n	800f45e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	689b      	ldr	r3, [r3, #8]
 800f45c:	e00a      	b.n	800f474 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	68d2      	ldr	r2, [r2, #12]
 800f466:	1052      	asrs	r2, r2, #1
 800f468:	4413      	add	r3, r2
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	6892      	ldr	r2, [r2, #8]
 800f470:	4413      	add	r3, r2
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4608      	mov	r0, r1
 800f476:	4798      	blx	r3
    }
 800f478:	bf00      	nop
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f480:	b480      	push	{r7}
 800f482:	b083      	sub	sp, #12
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d010      	beq.n	800f4b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	689b      	ldr	r3, [r3, #8]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d107      	bne.n	800f4a8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	f003 0301 	and.w	r3, r3, #1
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d101      	bne.n	800f4a8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	e000      	b.n	800f4aa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	2b01      	cmp	r3, #1
 800f4ac:	d001      	beq.n	800f4b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	e000      	b.n	800f4b4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f4b2:	2300      	movs	r3, #0
    }
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	370c      	adds	r7, #12
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	601a      	str	r2, [r3, #0]
    }
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	370c      	adds	r7, #12
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr

0800f4de <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800f4de:	b480      	push	{r7}
 800f4e0:	b083      	sub	sp, #12
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	80da      	strh	r2, [r3, #6]
    }
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4618      	mov	r0, r3
 800f502:	370c      	adds	r7, #12
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr

0800f50c <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800f50c:	b480      	push	{r7}
 800f50e:	b085      	sub	sp, #20
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	4608      	mov	r0, r1
 800f516:	4611      	mov	r1, r2
 800f518:	461a      	mov	r2, r3
 800f51a:	4603      	mov	r3, r0
 800f51c:	817b      	strh	r3, [r7, #10]
 800f51e:	460b      	mov	r3, r1
 800f520:	813b      	strh	r3, [r7, #8]
 800f522:	4613      	mov	r3, r2
 800f524:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	897a      	ldrh	r2, [r7, #10]
 800f52a:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	893a      	ldrh	r2, [r7, #8]
 800f530:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	88fa      	ldrh	r2, [r7, #6]
 800f536:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	8b3a      	ldrh	r2, [r7, #24]
 800f53c:	80da      	strh	r2, [r3, #6]
    }
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	4618      	mov	r0, r3
 800f542:	3714      	adds	r7, #20
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr

0800f54c <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800f54c:	b480      	push	{r7}
 800f54e:	b083      	sub	sp, #12
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	460b      	mov	r3, r1
 800f556:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	887a      	ldrh	r2, [r7, #2]
 800f55c:	801a      	strh	r2, [r3, #0]
    {
    }
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4618      	mov	r0, r3
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af02      	add	r7, sp, #8
 800f572:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 800f574:	4a13      	ldr	r2, [pc, #76]	; (800f5c4 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	601a      	str	r2, [r3, #0]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	1d18      	adds	r0, r3, #4
 800f57e:	2300      	movs	r3, #0
 800f580:	9300      	str	r3, [sp, #0]
 800f582:	2300      	movs	r3, #0
 800f584:	2200      	movs	r2, #0
 800f586:	2100      	movs	r1, #0
 800f588:	f7ff ffc0 	bl	800f50c <_ZN8touchgfx4RectC1Essss>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	330c      	adds	r3, #12
 800f590:	4618      	mov	r0, r3
 800f592:	f7ff ffa4 	bl	800f4de <_ZN8touchgfx4RectC1Ev>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2200      	movs	r2, #0
 800f59a:	615a      	str	r2, [r3, #20]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	619a      	str	r2, [r3, #24]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	61da      	str	r2, [r3, #28]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3708      	adds	r7, #8
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	08026140 	.word	0x08026140

0800f5c8 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800f5c8:	b480      	push	{r7}
 800f5ca:	b083      	sub	sp, #12
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	4a04      	ldr	r2, [pc, #16]	; (800f5e4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	601a      	str	r2, [r3, #0]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr
 800f5e4:	08026140 	.word	0x08026140

0800f5e8 <_ZN8touchgfx8DrawableD0Ev>:
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7ff ffe9 	bl	800f5c8 <_ZN8touchgfx8DrawableD1Ev>
 800f5f6:	2128      	movs	r1, #40	; 0x28
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f013 f926 	bl	802284a <_ZdlPvj>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4618      	mov	r0, r3
 800f602:	3708      	adds	r7, #8
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}

0800f608 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	4608      	mov	r0, r1
 800f612:	4611      	mov	r1, r2
 800f614:	461a      	mov	r2, r3
 800f616:	4603      	mov	r3, r0
 800f618:	817b      	strh	r3, [r7, #10]
 800f61a:	460b      	mov	r3, r1
 800f61c:	813b      	strh	r3, [r7, #8]
 800f61e:	4613      	mov	r3, r2
 800f620:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	3334      	adds	r3, #52	; 0x34
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f62e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f632:	68f8      	ldr	r0, [r7, #12]
 800f634:	4798      	blx	r3
        setWidth(width);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	3338      	adds	r3, #56	; 0x38
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f642:	4611      	mov	r1, r2
 800f644:	68f8      	ldr	r0, [r7, #12]
 800f646:	4798      	blx	r3
        setHeight(height);
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	333c      	adds	r3, #60	; 0x3c
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f654:	4611      	mov	r1, r2
 800f656:	68f8      	ldr	r0, [r7, #12]
 800f658:	4798      	blx	r3
    }
 800f65a:	bf00      	nop
 800f65c:	3710      	adds	r7, #16
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}

0800f662 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800f662:	b480      	push	{r7}
 800f664:	b083      	sub	sp, #12
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
 800f66a:	460b      	mov	r3, r1
 800f66c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	887a      	ldrh	r2, [r7, #2]
 800f672:	809a      	strh	r2, [r3, #4]
    }
 800f674:	bf00      	nop
 800f676:	370c      	adds	r7, #12
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	460b      	mov	r3, r1
 800f68a:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	887a      	ldrh	r2, [r7, #2]
 800f690:	80da      	strh	r2, [r3, #6]
    }
 800f692:	bf00      	nop
 800f694:	370c      	adds	r7, #12
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr

0800f69e <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b082      	sub	sp, #8
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	807b      	strh	r3, [r7, #2]
 800f6aa:	4613      	mov	r3, r2
 800f6ac:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	332c      	adds	r3, #44	; 0x2c
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f6ba:	4611      	mov	r1, r2
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	4798      	blx	r3
        setY(y);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	3330      	adds	r3, #48	; 0x30
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f6cc:	4611      	mov	r1, r2
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	4798      	blx	r3
    }
 800f6d2:	bf00      	nop
 800f6d4:	3708      	adds	r7, #8
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}

0800f6da <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800f6da:	b480      	push	{r7}
 800f6dc:	b083      	sub	sp, #12
 800f6de:	af00      	add	r7, sp, #0
 800f6e0:	6078      	str	r0, [r7, #4]
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	887a      	ldrh	r2, [r7, #2]
 800f6ea:	811a      	strh	r2, [r3, #8]
    }
 800f6ec:	bf00      	nop
 800f6ee:	370c      	adds	r7, #12
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	460b      	mov	r3, r1
 800f702:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	887a      	ldrh	r2, [r7, #2]
 800f708:	815a      	strh	r2, [r3, #10]
    }
 800f70a:	bf00      	nop
 800f70c:	370c      	adds	r7, #12
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr

0800f716 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800f716:	b480      	push	{r7}
 800f718:	b083      	sub	sp, #12
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	6078      	str	r0, [r7, #4]
 800f71e:	bf00      	nop
 800f720:	370c      	adds	r7, #12
 800f722:	46bd      	mov	sp, r7
 800f724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f728:	4770      	bx	lr

0800f72a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800f72a:	b480      	push	{r7}
 800f72c:	b083      	sub	sp, #12
 800f72e:	af00      	add	r7, sp, #0
 800f730:	6078      	str	r0, [r7, #4]
 800f732:	6039      	str	r1, [r7, #0]
 800f734:	bf00      	nop
 800f736:	370c      	adds	r7, #12
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
 800f74a:	bf00      	nop
 800f74c:	370c      	adds	r7, #12
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr

0800f756 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800f756:	b480      	push	{r7}
 800f758:	b083      	sub	sp, #12
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	6078      	str	r0, [r7, #4]
 800f75e:	6039      	str	r1, [r7, #0]
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	bf00      	nop
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 800f780:	b480      	push	{r7}
 800f782:	b083      	sub	sp, #12
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	460b      	mov	r3, r1
 800f78a:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	78fa      	ldrb	r2, [r7, #3]
 800f790:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800f794:	bf00      	nop
 800f796:	370c      	adds	r7, #12
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	370c      	adds	r7, #12
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr

0800f7ba <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800f7ba:	b480      	push	{r7}
 800f7bc:	b083      	sub	sp, #12
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	370c      	adds	r7, #12
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d2:	4770      	bx	lr

0800f7d4 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	460b      	mov	r3, r1
 800f7de:	807b      	strh	r3, [r7, #2]
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	3354      	adds	r3, #84	; 0x54
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	8879      	ldrh	r1, [r7, #2]
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f7f4:	b292      	uxth	r2, r2
 800f7f6:	1a8a      	subs	r2, r1, r2
 800f7f8:	b292      	uxth	r2, r2
 800f7fa:	b210      	sxth	r0, r2
 800f7fc:	8839      	ldrh	r1, [r7, #0]
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800f804:	b292      	uxth	r2, r2
 800f806:	1a8a      	subs	r2, r1, r2
 800f808:	b292      	uxth	r2, r2
 800f80a:	b212      	sxth	r2, r2
 800f80c:	4601      	mov	r1, r0
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	4798      	blx	r3
    }
 800f812:	bf00      	nop
 800f814:	3708      	adds	r7, #8
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800f81a:	b480      	push	{r7}
 800f81c:	b083      	sub	sp, #12
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f828:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f830:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f838:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800f83a:	bf00      	nop
 800f83c:	370c      	adds	r7, #12
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr

0800f846 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f846:	b580      	push	{r7, lr}
 800f848:	b084      	sub	sp, #16
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	60f8      	str	r0, [r7, #12]
 800f84e:	60b9      	str	r1, [r7, #8]
 800f850:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f7ff ffe1 	bl	800f81a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	68fa      	ldr	r2, [r7, #12]
 800f864:	601a      	str	r2, [r3, #0]
    }
 800f866:	bf00      	nop
 800f868:	3710      	adds	r7, #16
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
	...

0800f870 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	4a05      	ldr	r2, [pc, #20]	; (800f890 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	4618      	mov	r0, r3
 800f882:	f7ff fea1 	bl	800f5c8 <_ZN8touchgfx8DrawableD1Ev>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4618      	mov	r0, r3
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	08024ec8 	.word	0x08024ec8

0800f894 <_ZN8touchgfx9ContainerD0Ev>:
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f7ff ffe7 	bl	800f870 <_ZN8touchgfx9ContainerD1Ev>
 800f8a2:	212c      	movs	r1, #44	; 0x2c
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f012 ffd0 	bl	802284a <_ZdlPvj>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3708      	adds	r7, #8
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	4a06      	ldr	r2, [pc, #24]	; (800f8d8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	601a      	str	r2, [r3, #0]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	3304      	adds	r3, #4
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7ff ffd2 	bl	800f870 <_ZN8touchgfx9ContainerD1Ev>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	08026238 	.word	0x08026238

0800f8dc <_ZN8touchgfx6ScreenD0Ev>:
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f7ff ffe5 	bl	800f8b4 <_ZN8touchgfx6ScreenD1Ev>
 800f8ea:	213c      	movs	r1, #60	; 0x3c
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f012 ffac 	bl	802284a <_ZdlPvj>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3708      	adds	r7, #8
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	bf00      	nop
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	bf00      	nop
 800f92e:	370c      	adds	r7, #12
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr

0800f938 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
    {
    }
 800f940:	bf00      	nop
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	460b      	mov	r3, r1
 800f956:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f958:	bf00      	nop
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	3304      	adds	r3, #4
 800f972:	6839      	ldr	r1, [r7, #0]
 800f974:	4618      	mov	r0, r3
 800f976:	f003 fca9 	bl	80132cc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f97a:	bf00      	nop
 800f97c:	3708      	adds	r7, #8
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
	...

0800f984 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800f984:	b580      	push	{r7, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4618      	mov	r0, r3
 800f990:	f7ff fdec 	bl	800f56c <_ZN8touchgfx8DrawableC1Ev>
 800f994:	4a03      	ldr	r2, [pc, #12]	; (800f9a4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	601a      	str	r2, [r3, #0]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4618      	mov	r0, r3
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}
 800f9a4:	08024360 	.word	0x08024360

0800f9a8 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	4a05      	ldr	r2, [pc, #20]	; (800f9c8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	601a      	str	r2, [r3, #0]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7ff fe05 	bl	800f5c8 <_ZN8touchgfx8DrawableD1Ev>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	08024360 	.word	0x08024360

0800f9cc <_ZN8touchgfx6WidgetD0Ev>:
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f7ff ffe7 	bl	800f9a8 <_ZN8touchgfx6WidgetD1Ev>
 800f9da:	2128      	movs	r1, #40	; 0x28
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f012 ff34 	bl	802284a <_ZdlPvj>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3708      	adds	r7, #8
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	607b      	str	r3, [r7, #4]
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	817b      	strh	r3, [r7, #10]
 800f9fa:	4613      	mov	r3, r2
 800f9fc:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	4618      	mov	r0, r3
 800fa02:	f7ff fecd 	bl	800f7a0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d008      	beq.n	800fa1e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7ff fed3 	bl	800f7ba <_ZNK8touchgfx8Drawable11isTouchableEv>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d001      	beq.n	800fa1e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	e000      	b.n	800fa20 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800fa1e:	2300      	movs	r3, #0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d002      	beq.n	800fa2a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	601a      	str	r2, [r3, #0]
        }
    }
 800fa2a:	bf00      	nop
 800fa2c:	3710      	adds	r7, #16
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
	...

0800fa34 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7ff ffa0 	bl	800f984 <_ZN8touchgfx6WidgetC1Ev>
 800fa44:	4a0a      	ldr	r2, [pc, #40]	; (800fa70 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	601a      	str	r2, [r3, #0]
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	22ff      	movs	r2, #255	; 0xff
 800fa4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	3328      	adds	r3, #40	; 0x28
 800fa56:	2100      	movs	r1, #0
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7ff fd31 	bl	800f4c0 <_ZN8touchgfx9colortypeC1Em>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	08025cc8 	.word	0x08025cc8

0800fa74 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	4a05      	ldr	r2, [pc, #20]	; (800fa94 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	601a      	str	r2, [r3, #0]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7ff ff8f 	bl	800f9a8 <_ZN8touchgfx6WidgetD1Ev>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	08025cc8 	.word	0x08025cc8

0800fa98 <_ZN8touchgfx3BoxD0Ev>:
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7ff ffe7 	bl	800fa74 <_ZN8touchgfx3BoxD1Ev>
 800faa6:	2130      	movs	r1, #48	; 0x30
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f012 fece 	bl	802284a <_ZdlPvj>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	4618      	mov	r0, r3
 800fab2:	3708      	adds	r7, #8
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 800fab8:	b480      	push	{r7}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	683a      	ldr	r2, [r7, #0]
 800fac6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800fac8:	bf00      	nop
 800faca:	370c      	adds	r7, #12
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
 800fadc:	6039      	str	r1, [r7, #0]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7ff ff4f 	bl	800f984 <_ZN8touchgfx6WidgetC1Ev>
 800fae6:	4a0b      	ldr	r2, [pc, #44]	; (800fb14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	601a      	str	r2, [r3, #0]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	3326      	adds	r3, #38	; 0x26
 800faf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7ff fd29 	bl	800f54c <_ZN8touchgfx6BitmapC1Et>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	22ff      	movs	r2, #255	; 0xff
 800fafe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800fb02:	6839      	ldr	r1, [r7, #0]
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f005 fde3 	bl	80156d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	08025dac 	.word	0x08025dac

0800fb18 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	4a05      	ldr	r2, [pc, #20]	; (800fb38 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	601a      	str	r2, [r3, #0]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f005 fb17 	bl	801515c <_ZN8touchgfx15AbstractPainterD1Ev>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	4618      	mov	r0, r3
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	080256d8 	.word	0x080256d8

0800fb3c <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f7ff ffe7 	bl	800fb18 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800fb4a:	2114      	movs	r1, #20
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f012 fe7c 	bl	802284a <_ZdlPvj>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4618      	mov	r0, r3
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800fb5c:	b480      	push	{r7}
 800fb5e:	b083      	sub	sp, #12
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	460b      	mov	r3, r1
 800fb66:	807b      	strh	r3, [r7, #2]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	887a      	ldrh	r2, [r7, #2]
 800fb6c:	801a      	strh	r2, [r3, #0]
    }
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	4618      	mov	r0, r3
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
        assertValid();
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7fe fdd7 	bl	800e738 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800fb8a:	4b06      	ldr	r3, [pc, #24]	; (800fba4 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	881b      	ldrh	r3, [r3, #0]
 800fb92:	4619      	mov	r1, r3
 800fb94:	4610      	mov	r0, r2
 800fb96:	f000 fed9 	bl	801094c <_ZNK8touchgfx5Texts7getTextEt>
 800fb9a:	4603      	mov	r3, r0
    }
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	2000b504 	.word	0x2000b504

0800fba8 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7ff fee6 	bl	800f984 <_ZN8touchgfx6WidgetC1Ev>
 800fbb8:	4a13      	ldr	r2, [pc, #76]	; (800fc08 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	601a      	str	r2, [r3, #0]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	3326      	adds	r3, #38	; 0x26
 800fbc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7ff ffc8 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	3328      	adds	r3, #40	; 0x28
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7ff fc74 	bl	800f4c0 <_ZN8touchgfx9colortypeC1Em>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	859a      	strh	r2, [r3, #44]	; 0x2c
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	22ff      	movs	r2, #255	; 0xff
 800fbe2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4618      	mov	r0, r3
 800fc02:	3708      	adds	r7, #8
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	08025c4c 	.word	0x08025c4c

0800fc0c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af02      	add	r7, sp, #8
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800fc16:	2300      	movs	r3, #0
 800fc18:	9300      	str	r3, [sp, #0]
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	2100      	movs	r1, #0
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f7ff fc73 	bl	800f50c <_ZN8touchgfx4RectC1Essss>
    }
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	3708      	adds	r7, #8
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}

0800fc2e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800fc2e:	b480      	push	{r7}
 800fc30:	b083      	sub	sp, #12
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
 800fc36:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	683a      	ldr	r2, [r7, #0]
 800fc3c:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800fc3e:	bf00      	nop
 800fc40:	370c      	adds	r7, #12
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr

0800fc4a <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800fc4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc4c:	b085      	sub	sp, #20
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	6078      	str	r0, [r7, #4]
 800fc52:	460b      	mov	r3, r1
 800fc54:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800fc56:	687e      	ldr	r6, [r7, #4]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	3330      	adds	r3, #48	; 0x30
 800fc5e:	681c      	ldr	r4, [r3, #0]
 800fc60:	887d      	ldrh	r5, [r7, #2]
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f000 f845 	bl	800fcf2 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	81bb      	strh	r3, [r7, #12]
 800fc6c:	f107 030c 	add.w	r3, r7, #12
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7fe fd2d 	bl	800e6d0 <_ZNK8touchgfx9TypedText7getFontEv>
 800fc76:	4602      	mov	r2, r0
 800fc78:	6813      	ldr	r3, [r2, #0]
 800fc7a:	332c      	adds	r3, #44	; 0x2c
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	4610      	mov	r0, r2
 800fc80:	4798      	blx	r3
 800fc82:	4603      	mov	r3, r0
 800fc84:	1aeb      	subs	r3, r5, r3
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	b21b      	sxth	r3, r3
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	4630      	mov	r0, r6
 800fc8e:	47a0      	blx	r4
    }
 800fc90:	bf00      	nop
 800fc92:	3714      	adds	r7, #20
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc98 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	460b      	mov	r3, r1
 800fca2:	807b      	strh	r3, [r7, #2]
 800fca4:	4613      	mov	r3, r2
 800fca6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	332c      	adds	r3, #44	; 0x2c
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800fcb6:	4610      	mov	r0, r2
 800fcb8:	4798      	blx	r3
        setBaselineY(baselineY);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	3360      	adds	r3, #96	; 0x60
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800fcc6:	4611      	mov	r1, r2
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	4798      	blx	r3
    }
 800fccc:	bf00      	nop
 800fcce:	3708      	adds	r7, #8
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	460b      	mov	r3, r1
 800fcde:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	887a      	ldrh	r2, [r7, #2]
 800fce4:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 800fce6:	bf00      	nop
 800fce8:	370c      	adds	r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr

0800fcf2 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800fcf2:	b480      	push	{r7}
 800fcf4:	b083      	sub	sp, #12
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800fcfe:	4618      	mov	r0, r3
 800fd00:	370c      	adds	r7, #12
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
	...

0800fd0c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	4a05      	ldr	r2, [pc, #20]	; (800fd2c <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	601a      	str	r2, [r3, #0]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7ff fe43 	bl	800f9a8 <_ZN8touchgfx6WidgetD1Ev>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	4618      	mov	r0, r3
 800fd26:	3708      	adds	r7, #8
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	08025c4c 	.word	0x08025c4c

0800fd30 <_ZN8touchgfx8TextAreaD0Ev>:
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7ff ffe7 	bl	800fd0c <_ZN8touchgfx8TextAreaD1Ev>
 800fd3e:	2134      	movs	r1, #52	; 0x34
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f012 fd82 	bl	802284a <_ZdlPvj>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
        : TextArea()
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7ff ff24 	bl	800fba8 <_ZN8touchgfx8TextAreaC1Ev>
 800fd60:	4a03      	ldr	r2, [pc, #12]	; (800fd70 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	601a      	str	r2, [r3, #0]
    {
    }
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	080242e4 	.word	0x080242e4

0800fd74 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	4a05      	ldr	r2, [pc, #20]	; (800fd94 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	601a      	str	r2, [r3, #0]
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7ff ffc1 	bl	800fd0c <_ZN8touchgfx8TextAreaD1Ev>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	080242e4 	.word	0x080242e4

0800fd98 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f7ff ffe7 	bl	800fd74 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800fda6:	2134      	movs	r1, #52	; 0x34
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f012 fd4e 	bl	802284a <_ZdlPvj>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7ff ffc4 	bl	800fd50 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800fdc8:	4a05      	ldr	r2, [pc, #20]	; (800fde0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	601a      	str	r2, [r3, #0]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3708      	adds	r7, #8
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	08025d30 	.word	0x08025d30

0800fde4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800fde4:	b480      	push	{r7}
 800fde6:	b083      	sub	sp, #12
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	683a      	ldr	r2, [r7, #0]
 800fdf2:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800fdf4:	bf00      	nop
 800fdf6:	370c      	adds	r7, #12
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr

0800fe00 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	4a05      	ldr	r2, [pc, #20]	; (800fe20 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	601a      	str	r2, [r3, #0]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7ff fd4f 	bl	800f8b4 <_ZN8touchgfx6ScreenD1Ev>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3708      	adds	r7, #8
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	080242b0 	.word	0x080242b0

0800fe24 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7ff ffe7 	bl	800fe00 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 800fe32:	2140      	movs	r1, #64	; 0x40
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f012 fd08 	bl	802284a <_ZdlPvj>
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	3708      	adds	r7, #8
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b082      	sub	sp, #8
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	4a2e      	ldr	r2, [pc, #184]	; (800ff08 <_ZN12MainViewBaseD1Ev+0xc4>)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	601a      	str	r2, [r3, #0]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f503 7365 	add.w	r3, r3, #916	; 0x394
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f000 fcd1 	bl	8010800 <_ZN8touchgfx5ImageD1Ev>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800fe64:	4618      	mov	r0, r3
 800fe66:	f000 fca9 	bl	80107bc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800fe70:	4618      	mov	r0, r3
 800fe72:	f000 fca3 	bl	80107bc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f000 fc9d 	bl	80107bc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f000 fc97 	bl	80107bc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800fe94:	4618      	mov	r0, r3
 800fe96:	f000 fc91 	bl	80107bc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7ff ff33 	bl	800fd0c <_ZN8touchgfx8TextAreaD1Ev>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800feac:	4618      	mov	r0, r3
 800feae:	f7ff ff2d 	bl	800fd0c <_ZN8touchgfx8TextAreaD1Ev>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800feb8:	4618      	mov	r0, r3
 800feba:	f7ff ff27 	bl	800fd0c <_ZN8touchgfx8TextAreaD1Ev>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7ff ff21 	bl	800fd0c <_ZN8touchgfx8TextAreaD1Ev>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7ff ff1b 	bl	800fd0c <_ZN8touchgfx8TextAreaD1Ev>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fedc:	4618      	mov	r0, r3
 800fede:	f000 fc4b 	bl	8010778 <_ZN8touchgfx19PainterRGB888BitmapD1Ev>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	3370      	adds	r3, #112	; 0x70
 800fee6:	4618      	mov	r0, r3
 800fee8:	f002 ffa6 	bl	8012e38 <_ZN8touchgfx14CircleProgressD1Ev>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	3340      	adds	r3, #64	; 0x40
 800fef0:	4618      	mov	r0, r3
 800fef2:	f7ff fdbf 	bl	800fa74 <_ZN8touchgfx3BoxD1Ev>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7ff ff81 	bl	800fe00 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	4618      	mov	r0, r3
 800ff02:	3708      	adds	r7, #8
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	0802427c 	.word	0x0802427c

0800ff0c <_ZN12MainViewBaseD0Ev>:
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f7ff ff95 	bl	800fe44 <_ZN12MainViewBaseD1Ev>
 800ff1a:	f242 0114 	movw	r1, #8212	; 0x2014
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f012 fc93 	bl	802284a <_ZdlPvj>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	4618      	mov	r0, r3
 800ff28:	3708      	adds	r7, #8
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
	...

0800ff30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800ff30:	b590      	push	{r4, r7, lr}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	4603      	mov	r3, r0
 800ff38:	71fb      	strb	r3, [r7, #7]
 800ff3a:	460b      	mov	r3, r1
 800ff3c:	71bb      	strb	r3, [r7, #6]
 800ff3e:	4613      	mov	r3, r2
 800ff40:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800ff42:	f7fe fe91 	bl	800ec68 <_ZN8touchgfx3HAL11getInstanceEv>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d105      	bne.n	800ff58 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800ff4c:	4b0a      	ldr	r3, [pc, #40]	; (800ff78 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800ff4e:	4a0b      	ldr	r2, [pc, #44]	; (800ff7c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800ff50:	2138      	movs	r1, #56	; 0x38
 800ff52:	480b      	ldr	r0, [pc, #44]	; (800ff80 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800ff54:	f012 fca4 	bl	80228a0 <__assert_func>
 800ff58:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800ff5a:	f7fe fe91 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 800ff5e:	6803      	ldr	r3, [r0, #0]
 800ff60:	332c      	adds	r3, #44	; 0x2c
 800ff62:	681c      	ldr	r4, [r3, #0]
 800ff64:	797b      	ldrb	r3, [r7, #5]
 800ff66:	79ba      	ldrb	r2, [r7, #6]
 800ff68:	79f9      	ldrb	r1, [r7, #7]
 800ff6a:	47a0      	blx	r4
 800ff6c:	4603      	mov	r3, r0
    }
 800ff6e:	4618      	mov	r0, r3
 800ff70:	370c      	adds	r7, #12
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd90      	pop	{r4, r7, pc}
 800ff76:	bf00      	nop
 800ff78:	08023cfc 	.word	0x08023cfc
 800ff7c:	080243c0 	.word	0x080243c0
 800ff80:	08023d40 	.word	0x08023d40

0800ff84 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase()
 800ff84:	b590      	push	{r4, r7, lr}
 800ff86:	b099      	sub	sp, #100	; 0x64
 800ff88:	af02      	add	r7, sp, #8
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f000 fbdc 	bl	801074c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 800ff94:	4ae0      	ldr	r2, [pc, #896]	; (8010318 <_ZN12MainViewBaseC1Ev+0x394>)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	601a      	str	r2, [r3, #0]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	3340      	adds	r3, #64	; 0x40
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7ff fd48 	bl	800fa34 <_ZN8touchgfx3BoxC1Ev>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	3370      	adds	r3, #112	; 0x70
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f002 ffc9 	bl	8012f40 <_ZN8touchgfx14CircleProgressC1Ev>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800ffb4:	f107 030c 	add.w	r3, r7, #12
 800ffb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7ff fac5 	bl	800f54c <_ZN8touchgfx6BitmapC1Et>
 800ffc2:	f107 030c 	add.w	r3, r7, #12
 800ffc6:	22ff      	movs	r2, #255	; 0xff
 800ffc8:	4619      	mov	r1, r3
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f004 fc18 	bl	8014800 <_ZN8touchgfx19PainterRGB888BitmapC1ERKNS_6BitmapEh>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7ff fde6 	bl	800fba8 <_ZN8touchgfx8TextAreaC1Ev>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7ff fde0 	bl	800fba8 <_ZN8touchgfx8TextAreaC1Ev>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7ff fdda 	bl	800fba8 <_ZN8touchgfx8TextAreaC1Ev>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7ff fdd4 	bl	800fba8 <_ZN8touchgfx8TextAreaC1Ev>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8010006:	4618      	mov	r0, r3
 8010008:	f7ff fdce 	bl	800fba8 <_ZN8touchgfx8TextAreaC1Ev>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8010012:	4618      	mov	r0, r3
 8010014:	f7ff fed0 	bl	800fdb8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 801001e:	4618      	mov	r0, r3
 8010020:	f7ff feca 	bl	800fdb8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 801002a:	4618      	mov	r0, r3
 801002c:	f7ff fec4 	bl	800fdb8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8010036:	4618      	mov	r0, r3
 8010038:	f7ff febe 	bl	800fdb8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8010042:	4618      	mov	r0, r3
 8010044:	f7ff feb8 	bl	800fdb8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f503 7465 	add.w	r4, r3, #916	; 0x394
 801004e:	f107 0310 	add.w	r3, r7, #16
 8010052:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010056:	4618      	mov	r0, r3
 8010058:	f7ff fa78 	bl	800f54c <_ZN8touchgfx6BitmapC1Et>
 801005c:	f107 0310 	add.w	r3, r7, #16
 8010060:	4619      	mov	r1, r3
 8010062:	4620      	mov	r0, r4
 8010064:	f7ff fd36 	bl	800fad4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 801006e:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8010072:	4618      	mov	r0, r3
 8010074:	f005 fb9a 	bl	80157ac <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801007e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010082:	9300      	str	r3, [sp, #0]
 8010084:	f44f 7348 	mov.w	r3, #800	; 0x320
 8010088:	2200      	movs	r2, #0
 801008a:	2100      	movs	r1, #0
 801008c:	f7ff fabc 	bl	800f608 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010096:	2200      	movs	r2, #0
 8010098:	2100      	movs	r1, #0
 801009a:	2000      	movs	r0, #0
 801009c:	f7ff ff48 	bl	800ff30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80100a0:	4603      	mov	r3, r0
 80100a2:	4619      	mov	r1, r3
 80100a4:	4620      	mov	r0, r4
 80100a6:	f7ff fd07 	bl	800fab8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    circleProgress1.setXY(9, 126);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	3370      	adds	r3, #112	; 0x70
 80100ae:	227e      	movs	r2, #126	; 0x7e
 80100b0:	2109      	movs	r1, #9
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7ff faf3 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
    circleProgress1.setProgressIndicatorPosition(0, 0, 184, 184);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80100be:	23b8      	movs	r3, #184	; 0xb8
 80100c0:	9300      	str	r3, [sp, #0]
 80100c2:	23b8      	movs	r3, #184	; 0xb8
 80100c4:	2200      	movs	r2, #0
 80100c6:	2100      	movs	r1, #0
 80100c8:	f002 fee6 	bl	8012e98 <_ZN8touchgfx14CircleProgress28setProgressIndicatorPositionEssss>
    circleProgress1.setRange(0, 6500, 100, 0);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80100d2:	2300      	movs	r3, #0
 80100d4:	9300      	str	r3, [sp, #0]
 80100d6:	2364      	movs	r3, #100	; 0x64
 80100d8:	f641 1264 	movw	r2, #6500	; 0x1964
 80100dc:	2100      	movs	r1, #0
 80100de:	f002 ffc1 	bl	8013064 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    circleProgress1.setCenter(92, 92);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	3370      	adds	r3, #112	; 0x70
 80100e6:	225c      	movs	r2, #92	; 0x5c
 80100e8:	215c      	movs	r1, #92	; 0x5c
 80100ea:	4618      	mov	r0, r3
 80100ec:	f002 fe62 	bl	8012db4 <_ZN8touchgfx14CircleProgress9setCenterEii>
    circleProgress1.setRadius(82);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	3370      	adds	r3, #112	; 0x70
 80100f4:	2152      	movs	r1, #82	; 0x52
 80100f6:	4618      	mov	r0, r3
 80100f8:	f002 fe70 	bl	8012ddc <_ZN8touchgfx14CircleProgress9setRadiusEi>
    circleProgress1.setLineWidth(30);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	3370      	adds	r3, #112	; 0x70
 8010100:	211e      	movs	r1, #30
 8010102:	4618      	mov	r0, r3
 8010104:	f002 fe74 	bl	8012df0 <_ZN8touchgfx14CircleProgress12setLineWidthEi>
    circleProgress1.setStartEndAngle(240, 440);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	3370      	adds	r3, #112	; 0x70
 801010c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010110:	21f0      	movs	r1, #240	; 0xf0
 8010112:	4618      	mov	r0, r3
 8010114:	f002 fef4 	bl	8012f00 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii>
    circleProgress1.setCapPrecision(180);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	3370      	adds	r3, #112	; 0x70
 801011c:	21b4      	movs	r1, #180	; 0xb4
 801011e:	4618      	mov	r0, r3
 8010120:	f002 fe83 	bl	8012e2a <_ZN8touchgfx14CircleProgress15setCapPrecisionEi>
    circleProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_CIRCLE_INDICATOR_BG_LINE_FULL_ID));
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801012a:	f107 0314 	add.w	r3, r7, #20
 801012e:	2100      	movs	r1, #0
 8010130:	4618      	mov	r0, r3
 8010132:	f7ff fa0b 	bl	800f54c <_ZN8touchgfx6BitmapC1Et>
 8010136:	f107 0314 	add.w	r3, r7, #20
 801013a:	4619      	mov	r1, r3
 801013c:	4620      	mov	r0, r4
 801013e:	f002 ff87 	bl	8013050 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    circleProgress1Painter.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_LARGE_CIRCLE_INDICATOR_FILL_LINE_FULL_ID));
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8010148:	f107 0318 	add.w	r3, r7, #24
 801014c:	2101      	movs	r1, #1
 801014e:	4618      	mov	r0, r3
 8010150:	f7ff f9fc 	bl	800f54c <_ZN8touchgfx6BitmapC1Et>
 8010154:	f107 0318 	add.w	r3, r7, #24
 8010158:	4619      	mov	r1, r3
 801015a:	4620      	mov	r0, r4
 801015c:	f004 fb1a 	bl	8014794 <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE>
    circleProgress1.setPainter(circleProgress1Painter);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801016c:	4619      	mov	r1, r3
 801016e:	4610      	mov	r0, r2
 8010170:	f002 fe58 	bl	8012e24 <_ZN8touchgfx14CircleProgress10setPainterERNS_15AbstractPainterE>
    circleProgress1.setValue(6500);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	3370      	adds	r3, #112	; 0x70
 8010178:	f641 1164 	movw	r1, #6500	; 0x1964
 801017c:	4618      	mov	r0, r3
 801017e:	f002 fea3 	bl	8012ec8 <_ZN8touchgfx14CircleProgress8setValueEi>

    RpmDescriptor.setXY(83, 229);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010188:	22e5      	movs	r2, #229	; 0xe5
 801018a:	2153      	movs	r1, #83	; 0x53
 801018c:	4618      	mov	r0, r3
 801018e:	f7ff fa86 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
    RpmDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8010198:	22ff      	movs	r2, #255	; 0xff
 801019a:	21ff      	movs	r1, #255	; 0xff
 801019c:	20ff      	movs	r0, #255	; 0xff
 801019e:	f7ff fec7 	bl	800ff30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80101a2:	4603      	mov	r3, r0
 80101a4:	4619      	mov	r1, r3
 80101a6:	4620      	mov	r0, r4
 80101a8:	f7ff fd41 	bl	800fc2e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RpmDescriptor.setLinespacing(0);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80101b2:	2100      	movs	r1, #0
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7ff fd8d 	bl	800fcd4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    RpmDescriptor.setTypedText(touchgfx::TypedText(T_RPMDESCR));
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 80101c0:	f107 031c 	add.w	r3, r7, #28
 80101c4:	2100      	movs	r1, #0
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7ff fcc8 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 80101cc:	8bb9      	ldrh	r1, [r7, #28]
 80101ce:	4620      	mov	r0, r4
 80101d0:	f005 f9b2 	bl	8015538 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KpaDescriptor.setXY(420, 159);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80101da:	229f      	movs	r2, #159	; 0x9f
 80101dc:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7ff fa5c 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 80101ec:	22ff      	movs	r2, #255	; 0xff
 80101ee:	21ff      	movs	r1, #255	; 0xff
 80101f0:	20ff      	movs	r0, #255	; 0xff
 80101f2:	f7ff fe9d 	bl	800ff30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80101f6:	4603      	mov	r3, r0
 80101f8:	4619      	mov	r1, r3
 80101fa:	4620      	mov	r0, r4
 80101fc:	f7ff fd17 	bl	800fc2e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010206:	2100      	movs	r1, #0
 8010208:	4618      	mov	r0, r3
 801020a:	f7ff fd63 	bl	800fcd4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_KPADESCR));
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 8010214:	f107 0320 	add.w	r3, r7, #32
 8010218:	2101      	movs	r1, #1
 801021a:	4618      	mov	r0, r3
 801021c:	f7ff fc9e 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 8010220:	8c39      	ldrh	r1, [r7, #32]
 8010222:	4620      	mov	r0, r4
 8010224:	f005 f988 	bl	8015538 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(340, 159);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801022e:	229f      	movs	r2, #159	; 0x9f
 8010230:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8010234:	4618      	mov	r0, r3
 8010236:	f7ff fa32 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8010240:	22ff      	movs	r2, #255	; 0xff
 8010242:	21ff      	movs	r1, #255	; 0xff
 8010244:	20ff      	movs	r0, #255	; 0xff
 8010246:	f7ff fe73 	bl	800ff30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801024a:	4603      	mov	r3, r0
 801024c:	4619      	mov	r1, r3
 801024e:	4620      	mov	r0, r4
 8010250:	f7ff fced 	bl	800fc2e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801025a:	2100      	movs	r1, #0
 801025c:	4618      	mov	r0, r3
 801025e:	f7ff fd39 	bl	800fcd4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_CLTDESCR));
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8010268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801026c:	2104      	movs	r1, #4
 801026e:	4618      	mov	r0, r3
 8010270:	f7ff fc74 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 8010274:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8010276:	4620      	mov	r0, r4
 8010278:	f005 f95e 	bl	8015538 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(324, 74);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010282:	224a      	movs	r2, #74	; 0x4a
 8010284:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8010288:	4618      	mov	r0, r3
 801028a:	f7ff fa08 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8010294:	22ff      	movs	r2, #255	; 0xff
 8010296:	21ff      	movs	r1, #255	; 0xff
 8010298:	20ff      	movs	r0, #255	; 0xff
 801029a:	f7ff fe49 	bl	800ff30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801029e:	4603      	mov	r3, r0
 80102a0:	4619      	mov	r1, r3
 80102a2:	4620      	mov	r0, r4
 80102a4:	f7ff fcc3 	bl	800fc2e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80102ae:	2100      	movs	r1, #0
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7ff fd0f 	bl	800fcd4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_LAMBDESCR));
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f503 7405 	add.w	r4, r3, #532	; 0x214
 80102bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102c0:	2103      	movs	r1, #3
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7ff fc4a 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 80102c8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80102ca:	4620      	mov	r0, r4
 80102cc:	f005 f934 	bl	8015538 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(420, 74);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80102d6:	224a      	movs	r2, #74	; 0x4a
 80102d8:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80102dc:	4618      	mov	r0, r3
 80102de:	f7ff f9de 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f503 7412 	add.w	r4, r3, #584	; 0x248
 80102e8:	22ff      	movs	r2, #255	; 0xff
 80102ea:	21ff      	movs	r1, #255	; 0xff
 80102ec:	20ff      	movs	r0, #255	; 0xff
 80102ee:	f7ff fe1f 	bl	800ff30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80102f2:	4603      	mov	r3, r0
 80102f4:	4619      	mov	r1, r3
 80102f6:	4620      	mov	r0, r4
 80102f8:	f7ff fc99 	bl	800fc2e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8010302:	2100      	movs	r1, #0
 8010304:	4618      	mov	r0, r3
 8010306:	f7ff fce5 	bl	800fcd4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_TRGTDESCR));
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f503 7412 	add.w	r4, r3, #584	; 0x248
 8010310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010314:	e002      	b.n	801031c <_ZN12MainViewBaseC1Ev+0x398>
 8010316:	bf00      	nop
 8010318:	0802427c 	.word	0x0802427c
 801031c:	2102      	movs	r1, #2
 801031e:	4618      	mov	r0, r3
 8010320:	f7ff fc1c 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 8010324:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8010326:	4620      	mov	r0, r4
 8010328:	f005 f906 	bl	8015538 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setXY(324, 39);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8010332:	2227      	movs	r2, #39	; 0x27
 8010334:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8010338:	4618      	mov	r0, r3
 801033a:	f7ff f9b0 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(54, 112, 255));
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 8010344:	22ff      	movs	r2, #255	; 0xff
 8010346:	2170      	movs	r1, #112	; 0x70
 8010348:	2036      	movs	r0, #54	; 0x36
 801034a:	f7ff fdf1 	bl	800ff30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801034e:	4603      	mov	r3, r0
 8010350:	4619      	mov	r1, r3
 8010352:	4620      	mov	r0, r4
 8010354:	f7ff fc6b 	bl	800fc2e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801035e:	2100      	movs	r1, #0
 8010360:	4618      	mov	r0, r3
 8010362:	f7ff fcb7 	bl	800fcd4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f503 7470 	add.w	r4, r3, #960	; 0x3c0
 801036c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010370:	2112      	movs	r1, #18
 8010372:	4618      	mov	r0, r3
 8010374:	f7ff fbf2 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 8010378:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801037c:	4618      	mov	r0, r3
 801037e:	f7ff fbfd 	bl	800fb7c <_ZNK8touchgfx9TypedText7getTextEv>
 8010382:	4603      	mov	r3, r0
 8010384:	4add      	ldr	r2, [pc, #884]	; (80106fc <_ZN12MainViewBaseC1Ev+0x778>)
 8010386:	2105      	movs	r1, #5
 8010388:	4620      	mov	r0, r4
 801038a:	f008 faf1 	bl	8018970 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 801039a:	4619      	mov	r1, r3
 801039c:	4610      	mov	r0, r2
 801039e:	f7ff fd21 	bl	800fde4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.resizeToCurrentText();
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80103a8:	4618      	mov	r0, r3
 80103aa:	f005 f89b 	bl	80154e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 80103b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80103b8:	2111      	movs	r1, #17
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7ff fbce 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 80103c0:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80103c2:	4620      	mov	r0, r4
 80103c4:	f005 f8b8 	bl	8015538 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setXY(409, 39);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80103ce:	2227      	movs	r2, #39	; 0x27
 80103d0:	f240 1199 	movw	r1, #409	; 0x199
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7ff f962 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(54, 112, 255));
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f503 742d 	add.w	r4, r3, #692	; 0x2b4
 80103e0:	22ff      	movs	r2, #255	; 0xff
 80103e2:	2170      	movs	r1, #112	; 0x70
 80103e4:	2036      	movs	r0, #54	; 0x36
 80103e6:	f7ff fda3 	bl	800ff30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80103ea:	4603      	mov	r3, r0
 80103ec:	4619      	mov	r1, r3
 80103ee:	4620      	mov	r0, r4
 80103f0:	f7ff fc1d 	bl	800fc2e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80103fa:	2100      	movs	r1, #0
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7ff fc69 	bl	800fcd4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f203 34ca 	addw	r4, r3, #970	; 0x3ca
 8010408:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801040c:	2110      	movs	r1, #16
 801040e:	4618      	mov	r0, r3
 8010410:	f7ff fba4 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 8010414:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010418:	4618      	mov	r0, r3
 801041a:	f7ff fbaf 	bl	800fb7c <_ZNK8touchgfx9TypedText7getTextEv>
 801041e:	4603      	mov	r3, r0
 8010420:	4ab6      	ldr	r2, [pc, #728]	; (80106fc <_ZN12MainViewBaseC1Ev+0x778>)
 8010422:	2105      	movs	r1, #5
 8010424:	4620      	mov	r0, r4
 8010426:	f008 faa3 	bl	8018970 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f203 33ca 	addw	r3, r3, #970	; 0x3ca
 8010436:	4619      	mov	r1, r3
 8010438:	4610      	mov	r0, r2
 801043a:	f7ff fcd3 	bl	800fde4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.resizeToCurrentText();
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8010444:	4618      	mov	r0, r3
 8010446:	f005 f84d 	bl	80154e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f503 742d 	add.w	r4, r3, #692	; 0x2b4
 8010450:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010454:	210f      	movs	r1, #15
 8010456:	4618      	mov	r0, r3
 8010458:	f7ff fb80 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 801045c:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 801045e:	4620      	mov	r0, r4
 8010460:	f005 f86a 	bl	8015538 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KpaValue.setXY(412, 124);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 801046a:	227c      	movs	r2, #124	; 0x7c
 801046c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8010470:	4618      	mov	r0, r3
 8010472:	f7ff f914 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
    KpaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(54, 112, 255));
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f503 743b 	add.w	r4, r3, #748	; 0x2ec
 801047c:	22ff      	movs	r2, #255	; 0xff
 801047e:	2170      	movs	r1, #112	; 0x70
 8010480:	2036      	movs	r0, #54	; 0x36
 8010482:	f7ff fd55 	bl	800ff30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010486:	4603      	mov	r3, r0
 8010488:	4619      	mov	r1, r3
 801048a:	4620      	mov	r0, r4
 801048c:	f7ff fbcf 	bl	800fc2e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaValue.setLinespacing(0);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8010496:	2100      	movs	r1, #0
 8010498:	4618      	mov	r0, r3
 801049a:	f7ff fc1b 	bl	800fcd4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(KpaValueBuffer, KPAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID6).getText());
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f503 7475 	add.w	r4, r3, #980	; 0x3d4
 80104a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80104a8:	210e      	movs	r1, #14
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff fb56 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 80104b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80104b4:	4618      	mov	r0, r3
 80104b6:	f7ff fb61 	bl	800fb7c <_ZNK8touchgfx9TypedText7getTextEv>
 80104ba:	4603      	mov	r3, r0
 80104bc:	4a8f      	ldr	r2, [pc, #572]	; (80106fc <_ZN12MainViewBaseC1Ev+0x778>)
 80104be:	2105      	movs	r1, #5
 80104c0:	4620      	mov	r0, r4
 80104c2:	f008 fa55 	bl	8018970 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    KpaValue.setWildcard(KpaValueBuffer);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f503 723b 	add.w	r2, r3, #748	; 0x2ec
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 80104d2:	4619      	mov	r1, r3
 80104d4:	4610      	mov	r0, r2
 80104d6:	f7ff fc85 	bl	800fde4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    KpaValue.resizeToCurrentText();
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 80104e0:	4618      	mov	r0, r3
 80104e2:	f004 ffff 	bl	80154e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    KpaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f503 743b 	add.w	r4, r3, #748	; 0x2ec
 80104ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80104f0:	210d      	movs	r1, #13
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7ff fb32 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 80104f8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80104fc:	4620      	mov	r0, r4
 80104fe:	f005 f81b 	bl	8015538 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue.setXY(327, 124);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8010508:	227c      	movs	r2, #124	; 0x7c
 801050a:	f240 1147 	movw	r1, #327	; 0x147
 801050e:	4618      	mov	r0, r3
 8010510:	f7ff f8c5 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
    CltValue.setColor(touchgfx::Color::getColorFrom24BitRGB(54, 112, 255));
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f503 7449 	add.w	r4, r3, #804	; 0x324
 801051a:	22ff      	movs	r2, #255	; 0xff
 801051c:	2170      	movs	r1, #112	; 0x70
 801051e:	2036      	movs	r0, #54	; 0x36
 8010520:	f7ff fd06 	bl	800ff30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010524:	4603      	mov	r3, r0
 8010526:	4619      	mov	r1, r3
 8010528:	4620      	mov	r0, r4
 801052a:	f7ff fb80 	bl	800fc2e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue.setLinespacing(0);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8010534:	2100      	movs	r1, #0
 8010536:	4618      	mov	r0, r3
 8010538:	f7ff fbcc 	bl	800fcd4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CltValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4).getText());
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f203 34de 	addw	r4, r3, #990	; 0x3de
 8010542:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010546:	210c      	movs	r1, #12
 8010548:	4618      	mov	r0, r3
 801054a:	f7ff fb07 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 801054e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010552:	4618      	mov	r0, r3
 8010554:	f7ff fb12 	bl	800fb7c <_ZNK8touchgfx9TypedText7getTextEv>
 8010558:	4603      	mov	r3, r0
 801055a:	4a68      	ldr	r2, [pc, #416]	; (80106fc <_ZN12MainViewBaseC1Ev+0x778>)
 801055c:	2105      	movs	r1, #5
 801055e:	4620      	mov	r0, r4
 8010560:	f008 fa06 	bl	8018970 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CltValue.setWildcard(CltValueBuffer);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f503 7249 	add.w	r2, r3, #804	; 0x324
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f203 33de 	addw	r3, r3, #990	; 0x3de
 8010570:	4619      	mov	r1, r3
 8010572:	4610      	mov	r0, r2
 8010574:	f7ff fc36 	bl	800fde4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CltValue.resizeToCurrentText();
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f503 7349 	add.w	r3, r3, #804	; 0x324
 801057e:	4618      	mov	r0, r3
 8010580:	f004 ffb0 	bl	80154e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    CltValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f503 7449 	add.w	r4, r3, #804	; 0x324
 801058a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801058e:	210b      	movs	r1, #11
 8010590:	4618      	mov	r0, r3
 8010592:	f7ff fae3 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 8010596:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 801059a:	4620      	mov	r0, r4
 801059c:	f004 ffcc 	bl	8015538 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RpmValue.setXY(58, 183);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 80105a6:	22b7      	movs	r2, #183	; 0xb7
 80105a8:	213a      	movs	r1, #58	; 0x3a
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ff f877 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
    RpmValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f503 7457 	add.w	r4, r3, #860	; 0x35c
 80105b6:	22ff      	movs	r2, #255	; 0xff
 80105b8:	21ff      	movs	r1, #255	; 0xff
 80105ba:	20ff      	movs	r0, #255	; 0xff
 80105bc:	f7ff fcb8 	bl	800ff30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80105c0:	4603      	mov	r3, r0
 80105c2:	4619      	mov	r1, r3
 80105c4:	4620      	mov	r0, r4
 80105c6:	f7ff fb32 	bl	800fc2e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RpmValue.setLinespacing(0);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 80105d0:	2100      	movs	r1, #0
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7ff fb7e 	bl	800fcd4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RpmValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID2).getText());
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 80105de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80105e2:	210a      	movs	r1, #10
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7ff fab9 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 80105ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7ff fac4 	bl	800fb7c <_ZNK8touchgfx9TypedText7getTextEv>
 80105f4:	4603      	mov	r3, r0
 80105f6:	4a41      	ldr	r2, [pc, #260]	; (80106fc <_ZN12MainViewBaseC1Ev+0x778>)
 80105f8:	2105      	movs	r1, #5
 80105fa:	4620      	mov	r0, r4
 80105fc:	f008 f9b8 	bl	8018970 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RpmValue.setWildcard(RpmValueBuffer);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f503 7257 	add.w	r2, r3, #860	; 0x35c
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801060c:	4619      	mov	r1, r3
 801060e:	4610      	mov	r0, r2
 8010610:	f7ff fbe8 	bl	800fde4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RpmValue.resizeToCurrentText();
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 801061a:	4618      	mov	r0, r3
 801061c:	f004 ff62 	bl	80154e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    RpmValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f503 7457 	add.w	r4, r3, #860	; 0x35c
 8010626:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801062a:	2109      	movs	r1, #9
 801062c:	4618      	mov	r0, r3
 801062e:	f7ff fa95 	bl	800fb5c <_ZN8touchgfx9TypedTextC1Et>
 8010632:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8010636:	4620      	mov	r0, r4
 8010638:	f004 ff7e 	bl	8015538 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8010642:	223f      	movs	r2, #63	; 0x3f
 8010644:	21b3      	movs	r1, #179	; 0xb3
 8010646:	4618      	mov	r0, r3
 8010648:	f7ff f829 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8010652:	2100      	movs	r1, #0
 8010654:	4618      	mov	r0, r3
 8010656:	f7ff f893 	bl	800f780 <_ZN8touchgfx8Drawable10setVisibleEb>

    add(backgroundBox);
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	3340      	adds	r3, #64	; 0x40
 8010660:	4619      	mov	r1, r3
 8010662:	4610      	mov	r0, r2
 8010664:	f7ff f97e 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circleProgress1);
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	3370      	adds	r3, #112	; 0x70
 801066e:	4619      	mov	r1, r3
 8010670:	4610      	mov	r0, r2
 8010672:	f7ff f977 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RpmDescriptor);
 8010676:	687a      	ldr	r2, [r7, #4]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801067e:	4619      	mov	r1, r3
 8010680:	4610      	mov	r0, r2
 8010682:	f7ff f96f 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801068e:	4619      	mov	r1, r3
 8010690:	4610      	mov	r0, r2
 8010692:	f7ff f967 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801069e:	4619      	mov	r1, r3
 80106a0:	4610      	mov	r0, r2
 80106a2:	f7ff f95f 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80106ae:	4619      	mov	r1, r3
 80106b0:	4610      	mov	r0, r2
 80106b2:	f7ff f957 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 80106b6:	687a      	ldr	r2, [r7, #4]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80106be:	4619      	mov	r1, r3
 80106c0:	4610      	mov	r0, r2
 80106c2:	f7ff f94f 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80106ce:	4619      	mov	r1, r3
 80106d0:	4610      	mov	r0, r2
 80106d2:	f7ff f947 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80106de:	4619      	mov	r1, r3
 80106e0:	4610      	mov	r0, r2
 80106e2:	f7ff f93f 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaValue);
 80106e6:	687a      	ldr	r2, [r7, #4]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 80106ee:	4619      	mov	r1, r3
 80106f0:	4610      	mov	r0, r2
 80106f2:	f7ff f937 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue);
 80106f6:	687a      	ldr	r2, [r7, #4]
 80106f8:	e002      	b.n	8010700 <_ZN12MainViewBaseC1Ev+0x77c>
 80106fa:	bf00      	nop
 80106fc:	08023d80 	.word	0x08023d80
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8010706:	4619      	mov	r1, r3
 8010708:	4610      	mov	r0, r2
 801070a:	f7ff f92b 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RpmValue);
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8010716:	4619      	mov	r1, r3
 8010718:	4610      	mov	r0, r2
 801071a:	f7ff f923 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8010726:	4619      	mov	r1, r3
 8010728:	4610      	mov	r0, r2
 801072a:	f7ff f91b 	bl	800f964 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	4618      	mov	r0, r3
 8010732:	375c      	adds	r7, #92	; 0x5c
 8010734:	46bd      	mov	sp, r7
 8010736:	bd90      	pop	{r4, r7, pc}

08010738 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8010738:	b480      	push	{r7}
 801073a:	b083      	sub	sp, #12
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]

}
 8010740:	bf00      	nop
 8010742:	370c      	adds	r7, #12
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr

0801074c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	4618      	mov	r0, r3
 8010758:	f007 f844 	bl	80177e4 <_ZN8touchgfx6ScreenC1Ev>
 801075c:	4a05      	ldr	r2, [pc, #20]	; (8010774 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	601a      	str	r2, [r3, #0]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	4618      	mov	r0, r3
 801076c:	3708      	adds	r7, #8
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	080242b0 	.word	0x080242b0

08010778 <_ZN8touchgfx19PainterRGB888BitmapD1Ev>:
 *        might specify for a Canvas Widget (e.g. Shape) is not applied to the bitmap as CWR is
 *        not aware of this rotation.
 *
 * @see AbstractPainter
 */
class PainterRGB888Bitmap : public AbstractPainterRGB888
 8010778:	b580      	push	{r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	4a05      	ldr	r2, [pc, #20]	; (8010798 <_ZN8touchgfx19PainterRGB888BitmapD1Ev+0x20>)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	601a      	str	r2, [r3, #0]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	4618      	mov	r0, r3
 801078a:	f7ff f9c5 	bl	800fb18 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	4618      	mov	r0, r3
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}
 8010798:	080258f8 	.word	0x080258f8

0801079c <_ZN8touchgfx19PainterRGB888BitmapD0Ev>:
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f7ff ffe7 	bl	8010778 <_ZN8touchgfx19PainterRGB888BitmapD1Ev>
 80107aa:	2128      	movs	r1, #40	; 0x28
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f012 f84c 	bl	802284a <_ZdlPvj>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4618      	mov	r0, r3
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	4a05      	ldr	r2, [pc, #20]	; (80107dc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	601a      	str	r2, [r3, #0]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7ff fad1 	bl	800fd74 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	4618      	mov	r0, r3
 80107d6:	3708      	adds	r7, #8
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	08025d30 	.word	0x08025d30

080107e0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f7ff ffe7 	bl	80107bc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80107ee:	2138      	movs	r1, #56	; 0x38
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f012 f82a 	bl	802284a <_ZdlPvj>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	4618      	mov	r0, r3
 80107fa:	3708      	adds	r7, #8
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}

08010800 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	4a05      	ldr	r2, [pc, #20]	; (8010820 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	601a      	str	r2, [r3, #0]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	4618      	mov	r0, r3
 8010812:	f7ff f8c9 	bl	800f9a8 <_ZN8touchgfx6WidgetD1Ev>
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	4618      	mov	r0, r3
 801081a:	3708      	adds	r7, #8
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	08025dac 	.word	0x08025dac

08010824 <_ZN8touchgfx5ImageD0Ev>:
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f7ff ffe7 	bl	8010800 <_ZN8touchgfx5ImageD1Ev>
 8010832:	212c      	movs	r1, #44	; 0x2c
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f012 f808 	bl	802284a <_ZdlPvj>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	4618      	mov	r0, r3
 801083e:	3708      	adds	r7, #8
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8010844:	b480      	push	{r7}
 8010846:	af00      	add	r7, sp, #0
    return bitmap_database;
 8010848:	4b02      	ldr	r3, [pc, #8]	; (8010854 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801084a:	4618      	mov	r0, r3
 801084c:	46bd      	mov	sp, r7
 801084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010852:	4770      	bx	lr
 8010854:	0802441c 	.word	0x0802441c

08010858 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8010858:	b480      	push	{r7}
 801085a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801085c:	2302      	movs	r3, #2
}
 801085e:	4618      	mov	r0, r3
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr

08010868 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8010868:	b480      	push	{r7}
 801086a:	b085      	sub	sp, #20
 801086c:	af00      	add	r7, sp, #0
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	4613      	mov	r3, r2
 8010874:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8010876:	4a07      	ldr	r2, [pc, #28]	; (8010894 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	6013      	str	r3, [r2, #0]
        fonts = f;
 801087c:	4a06      	ldr	r2, [pc, #24]	; (8010898 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8010882:	4a06      	ldr	r2, [pc, #24]	; (801089c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010884:	88fb      	ldrh	r3, [r7, #6]
 8010886:	8013      	strh	r3, [r2, #0]
    }
 8010888:	bf00      	nop
 801088a:	3714      	adds	r7, #20
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr
 8010894:	2000b4f8 	.word	0x2000b4f8
 8010898:	2000b500 	.word	0x2000b500
 801089c:	2000b4fc 	.word	0x2000b4fc

080108a0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80108a0:	b590      	push	{r4, r7, lr}
 80108a2:	b085      	sub	sp, #20
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	4603      	mov	r3, r0
 80108a8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80108aa:	2300      	movs	r3, #0
 80108ac:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80108ae:	88fb      	ldrh	r3, [r7, #6]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d127      	bne.n	8010904 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80108b4:	88fb      	ldrh	r3, [r7, #6]
 80108b6:	4a1e      	ldr	r2, [pc, #120]	; (8010930 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80108b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d016      	beq.n	80108ee <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80108c0:	88fb      	ldrh	r3, [r7, #6]
 80108c2:	4a1b      	ldr	r2, [pc, #108]	; (8010930 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80108c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108c8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	68ba      	ldr	r2, [r7, #8]
 80108d0:	4413      	add	r3, r2
 80108d2:	4a18      	ldr	r2, [pc, #96]	; (8010934 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80108d4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	68ba      	ldr	r2, [r7, #8]
 80108dc:	4413      	add	r3, r2
 80108de:	4a16      	ldr	r2, [pc, #88]	; (8010938 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80108e0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	689b      	ldr	r3, [r3, #8]
 80108e6:	68ba      	ldr	r2, [r7, #8]
 80108e8:	4413      	add	r3, r2
 80108ea:	60fb      	str	r3, [r7, #12]
 80108ec:	e00a      	b.n	8010904 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80108ee:	4b11      	ldr	r3, [pc, #68]	; (8010934 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80108f0:	4a12      	ldr	r2, [pc, #72]	; (801093c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80108f2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80108f4:	4a12      	ldr	r2, [pc, #72]	; (8010940 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80108f6:	4b10      	ldr	r3, [pc, #64]	; (8010938 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80108f8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80108fa:	88fb      	ldrh	r3, [r7, #6]
 80108fc:	4a11      	ldr	r2, [pc, #68]	; (8010944 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80108fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010902:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d00d      	beq.n	8010926 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801090a:	4a0f      	ldr	r2, [pc, #60]	; (8010948 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 801090c:	88fb      	ldrh	r3, [r7, #6]
 801090e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010910:	f000 f83e 	bl	8010990 <_ZN17TypedTextDatabase8getFontsEv>
 8010914:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8010916:	f000 f833 	bl	8010980 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801091a:	4603      	mov	r3, r0
 801091c:	461a      	mov	r2, r3
 801091e:	4621      	mov	r1, r4
 8010920:	68f8      	ldr	r0, [r7, #12]
 8010922:	f7ff ffa1 	bl	8010868 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8010926:	bf00      	nop
 8010928:	3714      	adds	r7, #20
 801092a:	46bd      	mov	sp, r7
 801092c:	bd90      	pop	{r4, r7, pc}
 801092e:	bf00      	nop
 8010930:	20008570 	.word	0x20008570
 8010934:	20008578 	.word	0x20008578
 8010938:	2000857c 	.word	0x2000857c
 801093c:	0806b754 	.word	0x0806b754
 8010940:	0806b708 	.word	0x0806b708
 8010944:	0806b7dc 	.word	0x0806b7dc
 8010948:	20008574 	.word	0x20008574

0801094c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 801094c:	b480      	push	{r7}
 801094e:	b083      	sub	sp, #12
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	460b      	mov	r3, r1
 8010956:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8010958:	4b07      	ldr	r3, [pc, #28]	; (8010978 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	4b07      	ldr	r3, [pc, #28]	; (801097c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801095e:	6819      	ldr	r1, [r3, #0]
 8010960:	887b      	ldrh	r3, [r7, #2]
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	440b      	add	r3, r1
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	005b      	lsls	r3, r3, #1
 801096a:	4413      	add	r3, r2
}
 801096c:	4618      	mov	r0, r3
 801096e:	370c      	adds	r7, #12
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr
 8010978:	20008578 	.word	0x20008578
 801097c:	2000857c 	.word	0x2000857c

08010980 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8010980:	b480      	push	{r7}
 8010982:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8010984:	2313      	movs	r3, #19
}
 8010986:	4618      	mov	r0, r3
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr

08010990 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8010990:	b480      	push	{r7}
 8010992:	af00      	add	r7, sp, #0
    return _fonts;
 8010994:	4b02      	ldr	r3, [pc, #8]	; (80109a0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8010996:	4618      	mov	r0, r3
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr
 80109a0:	20008580 	.word	0x20008580

080109a4 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        _fonts[2] = &(getFont_Asap_Bold_30_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	6039      	str	r1, [r7, #0]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d113      	bne.n	80109dc <_Z41__static_initialization_and_destruction_0ii+0x38>
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d10e      	bne.n	80109dc <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_Asap_Regular_20_4bpp()),
 80109be:	f7fe f81d 	bl	800e9fc <_Z28getFont_Asap_Regular_20_4bppv>
 80109c2:	4602      	mov	r2, r0
};
 80109c4:	4b07      	ldr	r3, [pc, #28]	; (80109e4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80109c6:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 80109c8:	f7fd ffd6 	bl	800e978 <_Z25getFont_Asap_Bold_40_4bppv>
 80109cc:	4602      	mov	r2, r0
};
 80109ce:	4b05      	ldr	r3, [pc, #20]	; (80109e4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80109d0:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp())
 80109d2:	f7fd ff8f 	bl	800e8f4 <_Z25getFont_Asap_Bold_30_4bppv>
 80109d6:	4602      	mov	r2, r0
};
 80109d8:	4b02      	ldr	r3, [pc, #8]	; (80109e4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80109da:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 80109dc:	bf00      	nop
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	20008580 	.word	0x20008580

080109e8 <_GLOBAL__sub_I__fonts>:
 80109e8:	b580      	push	{r7, lr}
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80109f0:	2001      	movs	r0, #1
 80109f2:	f7ff ffd7 	bl	80109a4 <_Z41__static_initialization_and_destruction_0ii>
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	4a05      	ldr	r2, [pc, #20]	; (8010a18 <_ZN19FrontendApplicationD1Ev+0x20>)
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	601a      	str	r2, [r3, #0]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7fe fa87 	bl	800ef1c <_ZN23FrontendApplicationBaseD1Ev>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4618      	mov	r0, r3
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	0802444c 	.word	0x0802444c

08010a1c <_ZN19FrontendApplicationD0Ev>:
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f7ff ffe7 	bl	80109f8 <_ZN19FrontendApplicationD1Ev>
 8010a2a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f011 ff0b 	bl	802284a <_ZdlPvj>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	4618      	mov	r0, r3
 8010a38:	3708      	adds	r7, #8
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}

08010a3e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8010a3e:	b580      	push	{r7, lr}
 8010a40:	b082      	sub	sp, #8
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f000 fa61 	bl	8010f14 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4618      	mov	r0, r3
 8010a56:	f005 fe03 	bl	8016660 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8010a5a:	bf00      	nop
 8010a5c:	3708      	adds	r7, #8
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
	...

08010a64 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b084      	sub	sp, #16
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	687a      	ldr	r2, [r7, #4]
 8010a74:	68b9      	ldr	r1, [r7, #8]
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fe faca 	bl	800f010 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8010a7c:	4a03      	ldr	r2, [pc, #12]	; (8010a8c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	601a      	str	r2, [r3, #0]
{
}
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	4618      	mov	r0, r3
 8010a86:	3710      	adds	r7, #16
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	0802444c 	.word	0x0802444c

08010a90 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8010a90:	b480      	push	{r7}
 8010a92:	b083      	sub	sp, #12
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
    {
    }
 8010a98:	bf00      	nop
 8010a9a:	370c      	adds	r7, #12
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
    {
    }
 8010aac:	bf00      	nop
 8010aae:	370c      	adds	r7, #12
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr

08010ab8 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
    {
 8010ac0:	4a04      	ldr	r2, [pc, #16]	; (8010ad4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	601a      	str	r2, [r3, #0]
    }
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	370c      	adds	r7, #12
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr
 8010ad4:	080244cc 	.word	0x080244cc

08010ad8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
    }
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f7ff ffe9 	bl	8010ab8 <_ZN8touchgfx9PresenterD1Ev>
 8010ae6:	2104      	movs	r1, #4
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f011 feae 	bl	802284a <_ZdlPvj>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	4618      	mov	r0, r3
 8010af2:	3708      	adds	r7, #8
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
    {
 8010b00:	4a04      	ldr	r2, [pc, #16]	; (8010b14 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	601a      	str	r2, [r3, #0]
    }
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	370c      	adds	r7, #12
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr
 8010b14:	080244cc 	.word	0x080244cc

08010b18 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8010b18:	b480      	push	{r7}
 8010b1a:	b083      	sub	sp, #12
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	4a06      	ldr	r2, [pc, #24]	; (8010b3c <_ZN13ModelListenerC1Ev+0x24>)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	601a      	str	r2, [r3, #0]
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	605a      	str	r2, [r3, #4]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	370c      	adds	r7, #12
 8010b32:	46bd      	mov	sp, r7
 8010b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b38:	4770      	bx	lr
 8010b3a:	bf00      	nop
 8010b3c:	080244b8 	.word	0x080244b8

08010b40 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8010b40:	b480      	push	{r7}
 8010b42:	b083      	sub	sp, #12
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	4a04      	ldr	r2, [pc, #16]	; (8010b5c <_ZN13ModelListenerD1Ev+0x1c>)
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	601a      	str	r2, [r3, #0]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	4618      	mov	r0, r3
 8010b52:	370c      	adds	r7, #12
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr
 8010b5c:	080244b8 	.word	0x080244b8

08010b60 <_ZN13ModelListenerD0Ev>:
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7ff ffe9 	bl	8010b40 <_ZN13ModelListenerD1Ev>
 8010b6e:	2108      	movs	r1, #8
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f011 fe6a 	bl	802284a <_ZdlPvj>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3708      	adds	r7, #8
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}

08010b80 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8010b80:	b480      	push	{r7}
 8010b82:	b083      	sub	sp, #12
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	6039      	str	r1, [r7, #0]
 8010b8a:	bf00      	nop
 8010b8c:	370c      	adds	r7, #12
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr
	...

08010b98 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	4a09      	ldr	r2, [pc, #36]	; (8010bc8 <_ZN13MainPresenterD1Ev+0x30>)
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	601a      	str	r2, [r3, #0]
 8010ba6:	4a09      	ldr	r2, [pc, #36]	; (8010bcc <_ZN13MainPresenterD1Ev+0x34>)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	605a      	str	r2, [r3, #4]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	3304      	adds	r3, #4
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7ff ffc5 	bl	8010b40 <_ZN13ModelListenerD1Ev>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7ff ff7d 	bl	8010ab8 <_ZN8touchgfx9PresenterD1Ev>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3708      	adds	r7, #8
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}
 8010bc8:	08024488 	.word	0x08024488
 8010bcc:	080244a4 	.word	0x080244a4

08010bd0 <_ZThn4_N13MainPresenterD1Ev>:
 8010bd0:	f1a0 0004 	sub.w	r0, r0, #4
 8010bd4:	e7e0      	b.n	8010b98 <_ZN13MainPresenterD1Ev>
 8010bd6:	bf00      	nop

08010bd8 <_ZN13MainPresenterD0Ev>:
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f7ff ffd9 	bl	8010b98 <_ZN13MainPresenterD1Ev>
 8010be6:	2110      	movs	r1, #16
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f011 fe2e 	bl	802284a <_ZdlPvj>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3708      	adds	r7, #8
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <_ZThn4_N13MainPresenterD0Ev>:
 8010bf8:	f1a0 0004 	sub.w	r0, r0, #4
 8010bfc:	e7ec      	b.n	8010bd8 <_ZN13MainPresenterD0Ev>
	...

08010c00 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
    : view(v)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7ff ff73 	bl	8010af8 <_ZN8touchgfx9PresenterC1Ev>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	3304      	adds	r3, #4
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7ff ff7e 	bl	8010b18 <_ZN13ModelListenerC1Ev>
 8010c1c:	4a06      	ldr	r2, [pc, #24]	; (8010c38 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	601a      	str	r2, [r3, #0]
 8010c22:	4a06      	ldr	r2, [pc, #24]	; (8010c3c <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	605a      	str	r2, [r3, #4]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	683a      	ldr	r2, [r7, #0]
 8010c2c:	60da      	str	r2, [r3, #12]
{
}
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	4618      	mov	r0, r3
 8010c32:	3708      	adds	r7, #8
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	08024488 	.word	0x08024488
 8010c3c:	080244a4 	.word	0x080244a4

08010c40 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
}
 8010c48:	bf00      	nop
 8010c4a:	370c      	adds	r7, #12
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr

08010c54 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8010c54:	b480      	push	{r7}
 8010c56:	b083      	sub	sp, #12
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
}
 8010c5c:	bf00      	nop
 8010c5e:	370c      	adds	r7, #12
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr

08010c68 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	68db      	ldr	r3, [r3, #12]
 8010c76:	6839      	ldr	r1, [r7, #0]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f000 f8a9 	bl	8010dd0 <_ZN8MainView9updateValEPh>
}
 8010c7e:	bf00      	nop
 8010c80:	3708      	adds	r7, #8
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}

08010c86 <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 8010c86:	f1a0 0004 	sub.w	r0, r0, #4
 8010c8a:	f7ff bfed 	b.w	8010c68 <_ZN13MainPresenter11setNewValueEPh>

08010c8e <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8010c8e:	b580      	push	{r7, lr}
 8010c90:	b084      	sub	sp, #16
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	60f8      	str	r0, [r7, #12]
 8010c96:	460b      	mov	r3, r1
 8010c98:	607a      	str	r2, [r7, #4]
 8010c9a:	ed87 0a00 	vstr	s0, [r7]
 8010c9e:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8010ca0:	463b      	mov	r3, r7
 8010ca2:	8979      	ldrh	r1, [r7, #10]
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	68f8      	ldr	r0, [r7, #12]
 8010ca8:	f007 ffbc 	bl	8018c24 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8010cac:	4603      	mov	r3, r0
    }
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3710      	adds	r7, #16
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}

08010cb6 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8010cb6:	b480      	push	{r7}
 8010cb8:	b083      	sub	sp, #12
 8010cba:	af00      	add	r7, sp, #0
 8010cbc:	6078      	str	r0, [r7, #4]
        return rect.width;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	370c      	adds	r7, #12
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr

08010cd0 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8010cd0:	b480      	push	{r7}
 8010cd2:	b083      	sub	sp, #12
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
        return rect.height;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8010cde:	4618      	mov	r0, r3
 8010ce0:	370c      	adds	r7, #12
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce8:	4770      	bx	lr
	...

08010cec <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	4a05      	ldr	r2, [pc, #20]	; (8010d0c <_ZN8MainViewD1Ev+0x20>)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	601a      	str	r2, [r3, #0]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7ff f8a1 	bl	800fe44 <_ZN12MainViewBaseD1Ev>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	4618      	mov	r0, r3
 8010d06:	3708      	adds	r7, #8
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	080244e4 	.word	0x080244e4

08010d10 <_ZN8MainViewD0Ev>:
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f7ff ffe7 	bl	8010cec <_ZN8MainViewD1Ev>
 8010d1e:	f242 0114 	movw	r1, #8212	; 0x2014
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f011 fd91 	bl	802284a <_ZdlPvj>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3708      	adds	r7, #8
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
	...

08010d34 <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

MainView::MainView()
 8010d34:	b590      	push	{r4, r7, lr}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7ff f920 	bl	800ff84 <_ZN12MainViewBaseC1Ev>
 8010d44:	4a15      	ldr	r2, [pc, #84]	; (8010d9c <_ZN8MainViewC1Ev+0x68>)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8010d4a:	4b15      	ldr	r3, [pc, #84]	; (8010da0 <_ZN8MainViewC1Ev+0x6c>)
 8010d4c:	881b      	ldrh	r3, [r3, #0]
 8010d4e:	461c      	mov	r4, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7ff ffad 	bl	8010cb6 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	429c      	cmp	r4, r3
 8010d60:	dc0b      	bgt.n	8010d7a <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8010d62:	4b10      	ldr	r3, [pc, #64]	; (8010da4 <_ZN8MainViewC1Ev+0x70>)
 8010d64:	881b      	ldrh	r3, [r3, #0]
 8010d66:	461c      	mov	r4, r3
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7ff ffae 	bl	8010cd0 <_ZNK8touchgfx8Drawable9getHeightEv>
 8010d74:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8010d76:	429c      	cmp	r4, r3
 8010d78:	dd01      	ble.n	8010d7e <_ZN8MainViewC1Ev+0x4a>
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	e000      	b.n	8010d80 <_ZN8MainViewC1Ev+0x4c>
 8010d7e:	2300      	movs	r3, #0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d005      	beq.n	8010d90 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	3340      	adds	r3, #64	; 0x40
 8010d88:	2101      	movs	r1, #1
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fe fcf8 	bl	800f780 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4618      	mov	r0, r3
 8010d94:	370c      	adds	r7, #12
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd90      	pop	{r4, r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	080244e4 	.word	0x080244e4
 8010da0:	2000b45c 	.word	0x2000b45c
 8010da4:	2000b45e 	.word	0x2000b45e

08010da8 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8010da8:	b480      	push	{r7}
 8010daa:	b083      	sub	sp, #12
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
}
 8010db0:	bf00      	nop
 8010db2:	370c      	adds	r7, #12
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr

08010dbc <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b083      	sub	sp, #12
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
}
 8010dc4:	bf00      	nop
 8010dc6:	370c      	adds	r7, #12
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <_ZN8MainView9updateValEPh>:
   float  lambda;
   float  lambda_trgt;
} display_values;

void MainView::updateVal(uint8_t* newValue)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
	display_values* values = (display_values*) newValue;
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	60fb      	str	r3, [r7, #12]

	Unicode::snprintf(RpmValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f503 707a 	add.w	r0, r3, #1000	; 0x3e8
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a3d      	ldr	r2, [pc, #244]	; (8010ee0 <_ZN8MainView9updateValEPh+0x110>)
 8010dea:	2105      	movs	r1, #5
 8010dec:	f007 fdc0 	bl	8018970 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RpmValue.resizeToCurrentText();
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8010df6:	4618      	mov	r0, r3
 8010df8:	f004 fb74 	bl	80154e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	RpmValue.invalidate();
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8010e02:	4618      	mov	r0, r3
 8010e04:	f006 f986 	bl	8017114 <_ZNK8touchgfx8Drawable10invalidateEv>

	circleProgress1.setValue(values->rpm);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	4619      	mov	r1, r3
 8010e14:	4610      	mov	r0, r2
 8010e16:	f002 f857 	bl	8012ec8 <_ZN8touchgfx14CircleProgress8setValueEi>
	circleProgress1.invalidate();
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	3370      	adds	r3, #112	; 0x70
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f006 f978 	bl	8017114 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(KpaValueBuffer, KPAVALUE_SIZE, "%d", values->map);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	689b      	ldr	r3, [r3, #8]
 8010e2e:	4a2c      	ldr	r2, [pc, #176]	; (8010ee0 <_ZN8MainView9updateValEPh+0x110>)
 8010e30:	2105      	movs	r1, #5
 8010e32:	f007 fd9d 	bl	8018970 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	KpaValue.resizeToCurrentText();
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f004 fb51 	bl	80154e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	KpaValue.invalidate();
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f006 f963 	bl	8017114 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(CltValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f203 30de 	addw	r0, r3, #990	; 0x3de
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	685b      	ldr	r3, [r3, #4]
 8010e58:	4a21      	ldr	r2, [pc, #132]	; (8010ee0 <_ZN8MainView9updateValEPh+0x110>)
 8010e5a:	2105      	movs	r1, #5
 8010e5c:	f007 fd88 	bl	8018970 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	CltValue.resizeToCurrentText();
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8010e66:	4618      	mov	r0, r3
 8010e68:	f004 fb3c 	bl	80154e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	CltValue.invalidate();
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8010e72:	4618      	mov	r0, r3
 8010e74:	f006 f94e 	bl	8017114 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f503 7070 	add.w	r0, r3, #960	; 0x3c0
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	edd3 7a03 	vldr	s15, [r3, #12]
 8010e84:	eeb0 0a67 	vmov.f32	s0, s15
 8010e88:	4a16      	ldr	r2, [pc, #88]	; (8010ee4 <_ZN8MainView9updateValEPh+0x114>)
 8010e8a:	2105      	movs	r1, #5
 8010e8c:	f7ff feff 	bl	8010c8e <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	LambdaValue.resizeToCurrentText();
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8010e96:	4618      	mov	r0, r3
 8010e98:	f004 fb24 	bl	80154e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	LambdaValue.invalidate();
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f006 f936 	bl	8017114 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f203 30ca 	addw	r0, r3, #970	; 0x3ca
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8010eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8010eb8:	4a0a      	ldr	r2, [pc, #40]	; (8010ee4 <_ZN8MainView9updateValEPh+0x114>)
 8010eba:	2105      	movs	r1, #5
 8010ebc:	f7ff fee7 	bl	8010c8e <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	TrgtValue.resizeToCurrentText();
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f004 fb0c 	bl	80154e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	TrgtValue.invalidate();
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f006 f91e 	bl	8017114 <_ZNK8touchgfx8Drawable10invalidateEv>


}
 8010ed8:	bf00      	nop
 8010eda:	3710      	adds	r7, #16
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	08023e60 	.word	0x08023e60
 8010ee4:	08023e64 	.word	0x08023e64

08010ee8 <_ZN5ModelC1Ev>:
extern "C"
{
	xQueueHandle messageQ;
}

Model::Model() : modelListener(0)
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	2114      	movs	r1, #20
 8010efa:	2001      	movs	r0, #1
 8010efc:	f7fa fff7 	bl	800beee <xQueueGenericCreate>
 8010f00:	4602      	mov	r2, r0
 8010f02:	4b03      	ldr	r3, [pc, #12]	; (8010f10 <_ZN5ModelC1Ev+0x28>)
 8010f04:	601a      	str	r2, [r3, #0]
}
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}
 8010f10:	200085a0 	.word	0x200085a0

08010f14 <_ZN5Model4tickEv>:

void Model::tick()
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8010f1c:	4b0e      	ldr	r3, [pc, #56]	; (8010f58 <_ZN5Model4tickEv+0x44>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	2200      	movs	r2, #0
 8010f22:	490e      	ldr	r1, [pc, #56]	; (8010f5c <_ZN5Model4tickEv+0x48>)
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7fb fa73 	bl	800c410 <xQueueReceive>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	bf0c      	ite	eq
 8010f30:	2301      	moveq	r3, #1
 8010f32:	2300      	movne	r3, #0
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d009      	beq.n	8010f4e <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	3308      	adds	r3, #8
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	4904      	ldr	r1, [pc, #16]	; (8010f5c <_ZN5Model4tickEv+0x48>)
 8010f4a:	4610      	mov	r0, r2
 8010f4c:	4798      	blx	r3

		// something to update
	}
}
 8010f4e:	bf00      	nop
 8010f50:	3708      	adds	r7, #8
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop
 8010f58:	200085a0 	.word	0x200085a0
 8010f5c:	2000858c 	.word	0x2000858c

08010f60 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8010f60:	b480      	push	{r7}
 8010f62:	b083      	sub	sp, #12
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
    {
 8010f68:	4a04      	ldr	r2, [pc, #16]	; (8010f7c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	601a      	str	r2, [r3, #0]
    }
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4618      	mov	r0, r3
 8010f72:	370c      	adds	r7, #12
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr
 8010f7c:	08024530 	.word	0x08024530

08010f80 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
    }
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f7ff ffe9 	bl	8010f60 <_ZN8touchgfx15TouchControllerD1Ev>
 8010f8e:	2104      	movs	r1, #4
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f011 fc5a 	bl	802284a <_ZdlPvj>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8010fa8:	bf00      	nop
 8010faa:	370c      	adds	r7, #12
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b085      	sub	sp, #20
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8010fc0:	2300      	movs	r3, #0
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3714      	adds	r7, #20
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr
	...

08010fd0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	4a05      	ldr	r2, [pc, #20]	; (8010ff0 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	601a      	str	r2, [r3, #0]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7ff ffbd 	bl	8010f60 <_ZN8touchgfx15TouchControllerD1Ev>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	08024518 	.word	0x08024518

08010ff4 <_ZN20STM32TouchControllerD0Ev>:
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f7ff ffe7 	bl	8010fd0 <_ZN20STM32TouchControllerD1Ev>
 8011002:	2104      	movs	r1, #4
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f011 fc20 	bl	802284a <_ZdlPvj>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	4618      	mov	r0, r3
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8011014:	b480      	push	{r7}
 8011016:	b083      	sub	sp, #12
 8011018:	af00      	add	r7, sp, #0
 801101a:	4603      	mov	r3, r0
 801101c:	71fb      	strb	r3, [r7, #7]

}
 801101e:	bf00      	nop
 8011020:	370c      	adds	r7, #12
 8011022:	46bd      	mov	sp, r7
 8011024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011028:	4770      	bx	lr

0801102a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801102a:	b480      	push	{r7}
 801102c:	b083      	sub	sp, #12
 801102e:	af00      	add	r7, sp, #0
 8011030:	4603      	mov	r3, r0
 8011032:	71fb      	strb	r3, [r7, #7]

}
 8011034:	bf00      	nop
 8011036:	370c      	adds	r7, #12
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr

08011040 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	4603      	mov	r3, r0
 8011048:	71fb      	strb	r3, [r7, #7]

}
 801104a:	bf00      	nop
 801104c:	370c      	adds	r7, #12
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr
	...

08011058 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8011058:	b480      	push	{r7}
 801105a:	b083      	sub	sp, #12
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
    {
 8011060:	4a04      	ldr	r2, [pc, #16]	; (8011074 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	601a      	str	r2, [r3, #0]
    }
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	4618      	mov	r0, r3
 801106a:	370c      	adds	r7, #12
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr
 8011074:	08025170 	.word	0x08025170

08011078 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
    }
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f7ff ffe9 	bl	8011058 <_ZN8touchgfx3HALD1Ev>
 8011086:	2178      	movs	r1, #120	; 0x78
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f011 fbde 	bl	802284a <_ZdlPvj>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	4618      	mov	r0, r3
 8011092:	3708      	adds	r7, #8
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8011098:	b480      	push	{r7}
 801109a:	b083      	sub	sp, #12
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	460b      	mov	r3, r1
 80110a2:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	78fa      	ldrb	r2, [r7, #3]
 80110a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2201      	movs	r2, #1
 80110b0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80110b4:	bf00      	nop
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr

080110c0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	685a      	ldr	r2, [r3, #4]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	4610      	mov	r0, r2
 80110d6:	4798      	blx	r3
 80110d8:	4603      	mov	r3, r0
    }
 80110da:	4618      	mov	r0, r3
 80110dc:	3708      	adds	r7, #8
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}

080110e2 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 80110e2:	b580      	push	{r7, lr}
 80110e4:	b082      	sub	sp, #8
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f002 ffae 	bl	801404c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	3390      	adds	r3, #144	; 0x90
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	4798      	blx	r3
    }
 80110fc:	bf00      	nop
 80110fe:	3708      	adds	r7, #8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8011104:	b480      	push	{r7}
 8011106:	b083      	sub	sp, #12
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	6039      	str	r1, [r7, #0]
    {
        return false;
 801110e:	2300      	movs	r3, #0
    }
 8011110:	4618      	mov	r0, r3
 8011112:	370c      	adds	r7, #12
 8011114:	46bd      	mov	sp, r7
 8011116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111a:	4770      	bx	lr

0801111c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 801111c:	b590      	push	{r4, r7, lr}
 801111e:	b08b      	sub	sp, #44	; 0x2c
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	4611      	mov	r1, r2
 8011128:	461a      	mov	r2, r3
 801112a:	460b      	mov	r3, r1
 801112c:	80fb      	strh	r3, [r7, #6]
 801112e:	4613      	mov	r3, r2
 8011130:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8011132:	f7fd fda5 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 8011136:	4602      	mov	r2, r0
 8011138:	6813      	ldr	r3, [r2, #0]
 801113a:	3328      	adds	r3, #40	; 0x28
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	4610      	mov	r0, r2
 8011140:	4798      	blx	r3
 8011142:	4603      	mov	r3, r0
 8011144:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8011146:	8b7b      	ldrh	r3, [r7, #26]
 8011148:	4a3d      	ldr	r2, [pc, #244]	; (8011240 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 801114a:	8812      	ldrh	r2, [r2, #0]
 801114c:	fb02 f303 	mul.w	r3, r2, r3
 8011150:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8011152:	68bb      	ldr	r3, [r7, #8]
 8011154:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8011156:	2300      	movs	r3, #0
 8011158:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 801115a:	2300      	movs	r3, #0
 801115c:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 801115e:	797b      	ldrb	r3, [r7, #5]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d005      	beq.n	8011170 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8011164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	4413      	add	r3, r2
 801116a:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 801116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116e:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8011170:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8011174:	2b00      	cmp	r3, #0
 8011176:	d005      	beq.n	8011184 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8011178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	4413      	add	r3, r2
 801117e:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8011180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011182:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8011184:	88fb      	ldrh	r3, [r7, #6]
 8011186:	3b01      	subs	r3, #1
 8011188:	2b1f      	cmp	r3, #31
 801118a:	d84d      	bhi.n	8011228 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 801118c:	a201      	add	r2, pc, #4	; (adr r2, 8011194 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 801118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011192:	bf00      	nop
 8011194:	08011215 	.word	0x08011215
 8011198:	08011215 	.word	0x08011215
 801119c:	08011229 	.word	0x08011229
 80111a0:	08011215 	.word	0x08011215
 80111a4:	08011229 	.word	0x08011229
 80111a8:	08011229 	.word	0x08011229
 80111ac:	08011229 	.word	0x08011229
 80111b0:	08011215 	.word	0x08011215
 80111b4:	08011229 	.word	0x08011229
 80111b8:	08011229 	.word	0x08011229
 80111bc:	08011229 	.word	0x08011229
 80111c0:	08011229 	.word	0x08011229
 80111c4:	08011229 	.word	0x08011229
 80111c8:	08011229 	.word	0x08011229
 80111cc:	08011229 	.word	0x08011229
 80111d0:	08011215 	.word	0x08011215
 80111d4:	08011229 	.word	0x08011229
 80111d8:	08011229 	.word	0x08011229
 80111dc:	08011229 	.word	0x08011229
 80111e0:	08011229 	.word	0x08011229
 80111e4:	08011229 	.word	0x08011229
 80111e8:	08011229 	.word	0x08011229
 80111ec:	08011229 	.word	0x08011229
 80111f0:	08011215 	.word	0x08011215
 80111f4:	08011229 	.word	0x08011229
 80111f8:	08011229 	.word	0x08011229
 80111fc:	08011229 	.word	0x08011229
 8011200:	08011229 	.word	0x08011229
 8011204:	08011229 	.word	0x08011229
 8011208:	08011229 	.word	0x08011229
 801120c:	08011229 	.word	0x08011229
 8011210:	08011215 	.word	0x08011215
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	3374      	adds	r3, #116	; 0x74
 801121a:	681c      	ldr	r4, [r3, #0]
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	6a3a      	ldr	r2, [r7, #32]
 8011220:	68b9      	ldr	r1, [r7, #8]
 8011222:	68f8      	ldr	r0, [r7, #12]
 8011224:	47a0      	blx	r4
            break;
 8011226:	e006      	b.n	8011236 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8011228:	4b06      	ldr	r3, [pc, #24]	; (8011244 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 801122a:	4a07      	ldr	r2, [pc, #28]	; (8011248 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 801122c:	f240 3125 	movw	r1, #805	; 0x325
 8011230:	4806      	ldr	r0, [pc, #24]	; (801124c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8011232:	f011 fb35 	bl	80228a0 <__assert_func>
            break;
        }
    }
 8011236:	bf00      	nop
 8011238:	372c      	adds	r7, #44	; 0x2c
 801123a:	46bd      	mov	sp, r7
 801123c:	bd90      	pop	{r4, r7, pc}
 801123e:	bf00      	nop
 8011240:	2000b464 	.word	0x2000b464
 8011244:	08023e6c 	.word	0x08023e6c
 8011248:	08024644 	.word	0x08024644
 801124c:	08023e8c 	.word	0x08023e8c

08011250 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8011250:	b580      	push	{r7, lr}
 8011252:	b084      	sub	sp, #16
 8011254:	af00      	add	r7, sp, #0
 8011256:	60f8      	str	r0, [r7, #12]
 8011258:	60b9      	str	r1, [r7, #8]
 801125a:	607a      	str	r2, [r7, #4]
 801125c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d106      	bne.n	8011272 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8011264:	4b11      	ldr	r3, [pc, #68]	; (80112ac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8011266:	4a12      	ldr	r2, [pc, #72]	; (80112b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8011268:	f240 3137 	movw	r1, #823	; 0x337
 801126c:	4811      	ldr	r0, [pc, #68]	; (80112b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801126e:	f011 fb17 	bl	80228a0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	68ba      	ldr	r2, [r7, #8]
 8011276:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	683a      	ldr	r2, [r7, #0]
 8011282:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	bf14      	ite	ne
 801128a:	2301      	movne	r3, #1
 801128c:	2300      	moveq	r3, #0
 801128e:	b2da      	uxtb	r2, r3
 8011290:	4b09      	ldr	r3, [pc, #36]	; (80112b8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8011292:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	bf14      	ite	ne
 801129a:	2301      	movne	r3, #1
 801129c:	2300      	moveq	r3, #0
 801129e:	b2da      	uxtb	r2, r3
 80112a0:	4b06      	ldr	r3, [pc, #24]	; (80112bc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80112a2:	701a      	strb	r2, [r3, #0]
    }
 80112a4:	bf00      	nop
 80112a6:	3710      	adds	r7, #16
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	08023ed0 	.word	0x08023ed0
 80112b0:	080245f4 	.word	0x080245f4
 80112b4:	08023e8c 	.word	0x08023e8c
 80112b8:	2000b466 	.word	0x2000b466
 80112bc:	2000b467 	.word	0x2000b467

080112c0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
 80112c8:	460b      	mov	r3, r1
 80112ca:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d004      	beq.n	80112de <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112d8:	887a      	ldrh	r2, [r7, #2]
 80112da:	4610      	mov	r0, r2
 80112dc:	4798      	blx	r3
        }
    }
 80112de:	bf00      	nop
 80112e0:	3708      	adds	r7, #8
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}

080112e6 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80112e6:	b580      	push	{r7, lr}
 80112e8:	b082      	sub	sp, #8
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	685a      	ldr	r2, [r3, #4]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	3318      	adds	r3, #24
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	4610      	mov	r0, r2
 80112fe:	4798      	blx	r3
 8011300:	4603      	mov	r3, r0
    }
 8011302:	4618      	mov	r0, r3
 8011304:	3708      	adds	r7, #8
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
	...

0801130c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011320:	429a      	cmp	r2, r3
 8011322:	d017      	beq.n	8011354 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8011324:	4b1a      	ldr	r3, [pc, #104]	; (8011390 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d12a      	bne.n	8011382 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801132c:	4b19      	ldr	r3, [pc, #100]	; (8011394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801132e:	881a      	ldrh	r2, [r3, #0]
 8011330:	4b19      	ldr	r3, [pc, #100]	; (8011398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8011332:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8011334:	4b19      	ldr	r3, [pc, #100]	; (801139c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8011336:	881a      	ldrh	r2, [r3, #0]
 8011338:	4b19      	ldr	r3, [pc, #100]	; (80113a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801133a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801133c:	4b16      	ldr	r3, [pc, #88]	; (8011398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801133e:	881a      	ldrh	r2, [r3, #0]
 8011340:	4b16      	ldr	r3, [pc, #88]	; (801139c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8011342:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8011344:	4b16      	ldr	r3, [pc, #88]	; (80113a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8011346:	881a      	ldrh	r2, [r3, #0]
 8011348:	4b12      	ldr	r3, [pc, #72]	; (8011394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801134a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801134c:	4b10      	ldr	r3, [pc, #64]	; (8011390 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801134e:	2201      	movs	r2, #1
 8011350:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8011352:	e016      	b.n	8011382 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8011354:	4b0e      	ldr	r3, [pc, #56]	; (8011390 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d012      	beq.n	8011382 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801135c:	4b0f      	ldr	r3, [pc, #60]	; (801139c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801135e:	881a      	ldrh	r2, [r3, #0]
 8011360:	4b0d      	ldr	r3, [pc, #52]	; (8011398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8011362:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8011364:	4b0b      	ldr	r3, [pc, #44]	; (8011394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8011366:	881a      	ldrh	r2, [r3, #0]
 8011368:	4b0d      	ldr	r3, [pc, #52]	; (80113a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801136a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801136c:	4b0c      	ldr	r3, [pc, #48]	; (80113a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801136e:	881a      	ldrh	r2, [r3, #0]
 8011370:	4b0a      	ldr	r3, [pc, #40]	; (801139c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8011372:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8011374:	4b08      	ldr	r3, [pc, #32]	; (8011398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8011376:	881a      	ldrh	r2, [r3, #0]
 8011378:	4b06      	ldr	r3, [pc, #24]	; (8011394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801137a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801137c:	4b04      	ldr	r3, [pc, #16]	; (8011390 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801137e:	2200      	movs	r2, #0
 8011380:	701a      	strb	r2, [r3, #0]
    }
 8011382:	bf00      	nop
 8011384:	370c      	adds	r7, #12
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr
 801138e:	bf00      	nop
 8011390:	2000b460 	.word	0x2000b460
 8011394:	2000b45c 	.word	0x2000b45c
 8011398:	2000b462 	.word	0x2000b462
 801139c:	2000b45e 	.word	0x2000b45e
 80113a0:	2000b464 	.word	0x2000b464

080113a4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f002 f8ce 	bl	8013550 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80113b4:	bf00      	nop
 80113b6:	3708      	adds	r7, #8
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}

080113bc <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	4a05      	ldr	r2, [pc, #20]	; (80113dc <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	601a      	str	r2, [r3, #0]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7ff fe43 	bl	8011058 <_ZN8touchgfx3HALD1Ev>
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	4618      	mov	r0, r3
 80113d6:	3708      	adds	r7, #8
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	0802481c 	.word	0x0802481c

080113e0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f7ff ffe7 	bl	80113bc <_ZN20TouchGFXGeneratedHALD1Ev>
 80113ee:	2178      	movs	r1, #120	; 0x78
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f011 fa2a 	bl	802284a <_ZdlPvj>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	4618      	mov	r0, r3
 80113fa:	3708      	adds	r7, #8
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	4618      	mov	r0, r3
 801140c:	f7ff ffca 	bl	80113a4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8011410:	bf00      	nop
 8011412:	3708      	adds	r7, #8
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}

08011418 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b082      	sub	sp, #8
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	4618      	mov	r0, r3
 8011424:	f001 fb18 	bl	8012a58 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8011428:	bf00      	nop
 801142a:	3708      	adds	r7, #8
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	4618      	mov	r0, r3
 801143c:	f001 fb98 	bl	8012b70 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011440:	4603      	mov	r3, r0
}
 8011442:	4618      	mov	r0, r3
 8011444:	3708      	adds	r7, #8
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}

0801144a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801144a:	b580      	push	{r7, lr}
 801144c:	b082      	sub	sp, #8
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
 8011452:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6839      	ldr	r1, [r7, #0]
 8011458:	4618      	mov	r0, r3
 801145a:	f001 fb97 	bl	8012b8c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801145e:	bf00      	nop
 8011460:	3708      	adds	r7, #8
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}

08011466 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011466:	b580      	push	{r7, lr}
 8011468:	b082      	sub	sp, #8
 801146a:	af00      	add	r7, sp, #0
 801146c:	6078      	str	r0, [r7, #4]
 801146e:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6839      	ldr	r1, [r7, #0]
 8011474:	4618      	mov	r0, r3
 8011476:	f001 fb9f 	bl	8012bb8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 801147a:	bf00      	nop
 801147c:	3708      	adds	r7, #8
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}

08011482 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8011482:	b580      	push	{r7, lr}
 8011484:	b082      	sub	sp, #8
 8011486:	af00      	add	r7, sp, #0
 8011488:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	4618      	mov	r0, r3
 801148e:	f001 fb15 	bl	8012abc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8011492:	bf00      	nop
 8011494:	3708      	adds	r7, #8
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}

0801149a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801149a:	b580      	push	{r7, lr}
 801149c:	b082      	sub	sp, #8
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	4618      	mov	r0, r3
 80114a6:	f001 fb19 	bl	8012adc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80114aa:	bf00      	nop
 80114ac:	3708      	adds	r7, #8
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}

080114b2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80114b2:	b580      	push	{r7, lr}
 80114b4:	b082      	sub	sp, #8
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	4618      	mov	r0, r3
 80114be:	f001 fb1b 	bl	8012af8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80114c2:	bf00      	nop
 80114c4:	3708      	adds	r7, #8
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b082      	sub	sp, #8
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	4618      	mov	r0, r3
 80114d6:	f001 fb1d 	bl	8012b14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80114da:	bf00      	nop
 80114dc:	3708      	adds	r7, #8
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}
	...

080114e4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b082      	sub	sp, #8
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	4a05      	ldr	r2, [pc, #20]	; (8011504 <_ZN11TouchGFXHALD1Ev+0x20>)
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	601a      	str	r2, [r3, #0]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7ff ff61 	bl	80113bc <_ZN20TouchGFXGeneratedHALD1Ev>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	4618      	mov	r0, r3
 80114fe:	3708      	adds	r7, #8
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}
 8011504:	08024548 	.word	0x08024548

08011508 <_ZN11TouchGFXHALD0Ev>:
 8011508:	b580      	push	{r7, lr}
 801150a:	b082      	sub	sp, #8
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f7ff ffe7 	bl	80114e4 <_ZN11TouchGFXHALD1Ev>
 8011516:	2178      	movs	r1, #120	; 0x78
 8011518:	6878      	ldr	r0, [r7, #4]
 801151a:	f011 f996 	bl	802284a <_ZdlPvj>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	4618      	mov	r0, r3
 8011522:	3708      	adds	r7, #8
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}

08011528 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011528:	b580      	push	{r7, lr}
 801152a:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 801152c:	2203      	movs	r2, #3
 801152e:	2100      	movs	r1, #0
 8011530:	2001      	movs	r0, #1
 8011532:	f7fa fcdc 	bl	800beee <xQueueGenericCreate>
 8011536:	4602      	mov	r2, r0
 8011538:	4b0b      	ldr	r3, [pc, #44]	; (8011568 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801153a:	601a      	str	r2, [r3, #0]
 801153c:	4b0a      	ldr	r3, [pc, #40]	; (8011568 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d006      	beq.n	8011552 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8011544:	4b08      	ldr	r3, [pc, #32]	; (8011568 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8011546:	6818      	ldr	r0, [r3, #0]
 8011548:	2300      	movs	r3, #0
 801154a:	2200      	movs	r2, #0
 801154c:	2100      	movs	r1, #0
 801154e:	f7fa fd2f 	bl	800bfb0 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8011552:	2200      	movs	r2, #0
 8011554:	2101      	movs	r1, #1
 8011556:	2001      	movs	r0, #1
 8011558:	f7fa fcc9 	bl	800beee <xQueueGenericCreate>
 801155c:	4602      	mov	r2, r0
 801155e:	4b03      	ldr	r3, [pc, #12]	; (801156c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8011560:	601a      	str	r2, [r3, #0]
}
 8011562:	bf00      	nop
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	200085a4 	.word	0x200085a4
 801156c:	200085a8 	.word	0x200085a8

08011570 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8011570:	b580      	push	{r7, lr}
 8011572:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8011574:	4b04      	ldr	r3, [pc, #16]	; (8011588 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f04f 31ff 	mov.w	r1, #4294967295
 801157c:	4618      	mov	r0, r3
 801157e:	f7fb f829 	bl	800c5d4 <xQueueSemaphoreTake>
}
 8011582:	bf00      	nop
 8011584:	bd80      	pop	{r7, pc}
 8011586:	bf00      	nop
 8011588:	200085a4 	.word	0x200085a4

0801158c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 801158c:	b580      	push	{r7, lr}
 801158e:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8011590:	4b04      	ldr	r3, [pc, #16]	; (80115a4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8011592:	6818      	ldr	r0, [r3, #0]
 8011594:	2300      	movs	r3, #0
 8011596:	2200      	movs	r2, #0
 8011598:	2100      	movs	r1, #0
 801159a:	f7fa fd09 	bl	800bfb0 <xQueueGenericSend>
}
 801159e:	bf00      	nop
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	200085a4 	.word	0x200085a4

080115a8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 80115ac:	4b03      	ldr	r3, [pc, #12]	; (80115bc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2100      	movs	r1, #0
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7fb f80e 	bl	800c5d4 <xQueueSemaphoreTake>
}
 80115b8:	bf00      	nop
 80115ba:	bd80      	pop	{r7, pc}
 80115bc:	200085a4 	.word	0x200085a4

080115c0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b082      	sub	sp, #8
 80115c4:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80115c6:	2300      	movs	r3, #0
 80115c8:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80115ca:	4b0b      	ldr	r3, [pc, #44]	; (80115f8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	1d3a      	adds	r2, r7, #4
 80115d0:	4611      	mov	r1, r2
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fa fe8a 	bl	800c2ec <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d007      	beq.n	80115ee <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 80115de:	4b07      	ldr	r3, [pc, #28]	; (80115fc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 80115e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115e4:	601a      	str	r2, [r3, #0]
 80115e6:	f3bf 8f4f 	dsb	sy
 80115ea:	f3bf 8f6f 	isb	sy
}
 80115ee:	bf00      	nop
 80115f0:	3708      	adds	r7, #8
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
 80115f6:	bf00      	nop
 80115f8:	200085a4 	.word	0x200085a4
 80115fc:	e000ed04 	.word	0xe000ed04

08011600 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b082      	sub	sp, #8
 8011604:	af00      	add	r7, sp, #0
    if (vsync_q)
 8011606:	4b0e      	ldr	r3, [pc, #56]	; (8011640 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d013      	beq.n	8011636 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 801160e:	2300      	movs	r3, #0
 8011610:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8011612:	4b0b      	ldr	r3, [pc, #44]	; (8011640 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8011614:	6818      	ldr	r0, [r3, #0]
 8011616:	1d3a      	adds	r2, r7, #4
 8011618:	2300      	movs	r3, #0
 801161a:	490a      	ldr	r1, [pc, #40]	; (8011644 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 801161c:	f7fa fdca 	bl	800c1b4 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d007      	beq.n	8011636 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8011626:	4b08      	ldr	r3, [pc, #32]	; (8011648 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8011628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801162c:	601a      	str	r2, [r3, #0]
 801162e:	f3bf 8f4f 	dsb	sy
 8011632:	f3bf 8f6f 	isb	sy
    }
}
 8011636:	bf00      	nop
 8011638:	3708      	adds	r7, #8
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
 801163e:	bf00      	nop
 8011640:	200085a8 	.word	0x200085a8
 8011644:	20000038 	.word	0x20000038
 8011648:	e000ed04 	.word	0xe000ed04

0801164c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801164c:	b580      	push	{r7, lr}
 801164e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8011650:	4b08      	ldr	r3, [pc, #32]	; (8011674 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	2200      	movs	r2, #0
 8011656:	4908      	ldr	r1, [pc, #32]	; (8011678 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011658:	4618      	mov	r0, r3
 801165a:	f7fa fed9 	bl	800c410 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 801165e:	4b05      	ldr	r3, [pc, #20]	; (8011674 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f04f 32ff 	mov.w	r2, #4294967295
 8011666:	4904      	ldr	r1, [pc, #16]	; (8011678 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011668:	4618      	mov	r0, r3
 801166a:	f7fa fed1 	bl	800c410 <xQueueReceive>
}
 801166e:	bf00      	nop
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop
 8011674:	200085a8 	.word	0x200085a8
 8011678:	20000038 	.word	0x20000038

0801167c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b082      	sub	sp, #8
 8011680:	af00      	add	r7, sp, #0
 8011682:	4603      	mov	r3, r0
 8011684:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8011686:	88fb      	ldrh	r3, [r7, #6]
 8011688:	4618      	mov	r0, r3
 801168a:	f7fb fc01 	bl	800ce90 <vTaskDelay>
}
 801168e:	bf00      	nop
 8011690:	3708      	adds	r7, #8
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}
	...

08011698 <__NVIC_EnableIRQ>:
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	4603      	mov	r3, r0
 80116a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80116a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	db0d      	blt.n	80116c6 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80116aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80116ae:	b2db      	uxtb	r3, r3
 80116b0:	f003 021f 	and.w	r2, r3, #31
 80116b4:	4907      	ldr	r1, [pc, #28]	; (80116d4 <__NVIC_EnableIRQ+0x3c>)
 80116b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80116ba:	095b      	lsrs	r3, r3, #5
 80116bc:	2001      	movs	r0, #1
 80116be:	fa00 f202 	lsl.w	r2, r0, r2
 80116c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80116c6:	bf00      	nop
 80116c8:	370c      	adds	r7, #12
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr
 80116d2:	bf00      	nop
 80116d4:	e000e100 	.word	0xe000e100

080116d8 <__NVIC_DisableIRQ>:
{
 80116d8:	b480      	push	{r7}
 80116da:	b083      	sub	sp, #12
 80116dc:	af00      	add	r7, sp, #0
 80116de:	4603      	mov	r3, r0
 80116e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80116e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	db12      	blt.n	8011710 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80116ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	f003 021f 	and.w	r2, r3, #31
 80116f4:	4909      	ldr	r1, [pc, #36]	; (801171c <__NVIC_DisableIRQ+0x44>)
 80116f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80116fa:	095b      	lsrs	r3, r3, #5
 80116fc:	2001      	movs	r0, #1
 80116fe:	fa00 f202 	lsl.w	r2, r0, r2
 8011702:	3320      	adds	r3, #32
 8011704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011708:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801170c:	f3bf 8f6f 	isb	sy
}
 8011710:	bf00      	nop
 8011712:	370c      	adds	r7, #12
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr
 801171c:	e000e100 	.word	0xe000e100

08011720 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8011720:	b480      	push	{r7}
 8011722:	b083      	sub	sp, #12
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	2200      	movs	r2, #0
 801172c:	601a      	str	r2, [r3, #0]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	4618      	mov	r0, r3
 8011732:	370c      	adds	r7, #12
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr

0801173c <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
        return color;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
    }
 8011748:	4618      	mov	r0, r3
 801174a:	370c      	adds	r7, #12
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr

08011754 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8011754:	b480      	push	{r7}
 8011756:	b083      	sub	sp, #12
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	b29b      	uxth	r3, r3
    }
 8011762:	4618      	mov	r0, r3
 8011764:	370c      	adds	r7, #12
 8011766:	46bd      	mov	sp, r7
 8011768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176c:	4770      	bx	lr
	...

08011770 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
    {
 8011778:	4a04      	ldr	r2, [pc, #16]	; (801178c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	601a      	str	r2, [r3, #0]
    }
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	4618      	mov	r0, r3
 8011782:	370c      	adds	r7, #12
 8011784:	46bd      	mov	sp, r7
 8011786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178a:	4770      	bx	lr
 801178c:	080246f0 	.word	0x080246f0

08011790 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
    }
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f7ff ffe9 	bl	8011770 <_ZN8touchgfx9DMA_QueueD1Ev>
 801179e:	2104      	movs	r1, #4
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f011 f852 	bl	802284a <_ZdlPvj>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	4618      	mov	r0, r3
 80117aa:	3708      	adds	r7, #8
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}

080117b0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	3344      	adds	r3, #68	; 0x44
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	4798      	blx	r3
    }
 80117c4:	bf00      	nop
 80117c6:	3708      	adds	r7, #8
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80117cc:	b480      	push	{r7}
 80117ce:	b083      	sub	sp, #12
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80117d4:	2300      	movs	r3, #0
    }
 80117d6:	4618      	mov	r0, r3
 80117d8:	370c      	adds	r7, #12
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr
	...

080117e4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 80117e4:	b480      	push	{r7}
 80117e6:	b083      	sub	sp, #12
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
    {
 80117ec:	4a04      	ldr	r2, [pc, #16]	; (8011800 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	601a      	str	r2, [r3, #0]
    }
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	4618      	mov	r0, r3
 80117f6:	370c      	adds	r7, #12
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr
 8011800:	080255b4 	.word	0x080255b4

08011804 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
    }
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f7ff ffe9 	bl	80117e4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011812:	210c      	movs	r1, #12
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f011 f818 	bl	802284a <_ZdlPvj>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4618      	mov	r0, r3
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}

08011824 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8011824:	b480      	push	{r7}
 8011826:	b083      	sub	sp, #12
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801182e:	4a09      	ldr	r2, [pc, #36]	; (8011854 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	601a      	str	r2, [r3, #0]
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	683a      	ldr	r2, [r7, #0]
 8011838:	605a      	str	r2, [r3, #4]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2200      	movs	r2, #0
 801183e:	721a      	strb	r2, [r3, #8]
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2200      	movs	r2, #0
 8011844:	725a      	strb	r2, [r3, #9]
    {
    }
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	4618      	mov	r0, r3
 801184a:	370c      	adds	r7, #12
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr
 8011854:	080255b4 	.word	0x080255b4

08011858 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	685a      	ldr	r2, [r3, #4]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	3314      	adds	r3, #20
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	4610      	mov	r0, r2
 8011870:	4798      	blx	r3
    }
 8011872:	bf00      	nop
 8011874:	3708      	adds	r7, #8
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}

0801187a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801187a:	b580      	push	{r7, lr}
 801187c:	b082      	sub	sp, #8
 801187e:	af00      	add	r7, sp, #0
 8011880:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	3328      	adds	r3, #40	; 0x28
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	4610      	mov	r0, r2
 801188e:	4798      	blx	r3
    }
 8011890:	bf00      	nop
 8011892:	3708      	adds	r7, #8
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}

08011898 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8011898:	b480      	push	{r7}
 801189a:	b085      	sub	sp, #20
 801189c:	af00      	add	r7, sp, #0
 801189e:	60f8      	str	r0, [r7, #12]
 80118a0:	60b9      	str	r1, [r7, #8]
 80118a2:	607a      	str	r2, [r7, #4]
 80118a4:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80118b0:	68ba      	ldr	r2, [r7, #8]
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	430a      	orrs	r2, r1
 80118b8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118c0:	f023 0107 	bic.w	r1, r3, #7
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	430a      	orrs	r2, r1
 80118cc:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80118d4:	4b06      	ldr	r3, [pc, #24]	; (80118f0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80118d6:	4013      	ands	r3, r2
 80118d8:	6839      	ldr	r1, [r7, #0]
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	6812      	ldr	r2, [r2, #0]
 80118de:	430b      	orrs	r3, r1
 80118e0:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80118e2:	2300      	movs	r3, #0
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3714      	adds	r7, #20
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr
 80118f0:	ffffc000 	.word	0xffffc000

080118f4 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80118fc:	f7fd f9b4 	bl	800ec68 <_ZN8touchgfx3HAL11getInstanceEv>
 8011900:	4603      	mov	r3, r0
 8011902:	4618      	mov	r0, r3
 8011904:	f7ff ffa8 	bl	8011858 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8011908:	bf00      	nop
 801190a:	3708      	adds	r7, #8
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
    assert(0);
 8011918:	4b02      	ldr	r3, [pc, #8]	; (8011924 <DMA2D_XferErrorCallback+0x14>)
 801191a:	4a03      	ldr	r2, [pc, #12]	; (8011928 <DMA2D_XferErrorCallback+0x18>)
 801191c:	213e      	movs	r1, #62	; 0x3e
 801191e:	4803      	ldr	r0, [pc, #12]	; (801192c <DMA2D_XferErrorCallback+0x1c>)
 8011920:	f010 ffbe 	bl	80228a0 <__assert_func>
 8011924:	08023f08 	.word	0x08023f08
 8011928:	0802470c 	.word	0x0802470c
 801192c:	08023f0c 	.word	0x08023f0c

08011930 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	3318      	adds	r3, #24
 801193c:	4618      	mov	r0, r3
 801193e:	f7ff feef 	bl	8011720 <_ZN8touchgfx9colortypeC1Ev>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	4618      	mov	r0, r3
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 801194c:	b5b0      	push	{r4, r5, r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8011954:	687a      	ldr	r2, [r7, #4]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	330c      	adds	r3, #12
 801195a:	4619      	mov	r1, r3
 801195c:	4610      	mov	r0, r2
 801195e:	f7ff ff61 	bl	8011824 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8011962:	4a0e      	ldr	r2, [pc, #56]	; (801199c <_ZN10STM32F7DMAC1Ev+0x50>)
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	601a      	str	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f103 000c 	add.w	r0, r3, #12
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	3320      	adds	r3, #32
 8011972:	2260      	movs	r2, #96	; 0x60
 8011974:	4619      	mov	r1, r3
 8011976:	f002 fc8f 	bl	8014298 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	3320      	adds	r3, #32
 801197e:	245f      	movs	r4, #95	; 0x5f
 8011980:	461d      	mov	r5, r3
 8011982:	2c00      	cmp	r4, #0
 8011984:	db05      	blt.n	8011992 <_ZN10STM32F7DMAC1Ev+0x46>
 8011986:	4628      	mov	r0, r5
 8011988:	f7ff ffd2 	bl	8011930 <_ZN8touchgfx6BlitOpC1Ev>
 801198c:	3520      	adds	r5, #32
 801198e:	3c01      	subs	r4, #1
 8011990:	e7f7      	b.n	8011982 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	4618      	mov	r0, r3
 8011996:	3708      	adds	r7, #8
 8011998:	46bd      	mov	sp, r7
 801199a:	bdb0      	pop	{r4, r5, r7, pc}
 801199c:	080246a0 	.word	0x080246a0

080119a0 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	4a0b      	ldr	r2, [pc, #44]	; (80119d8 <_ZN10STM32F7DMAD1Ev+0x38>)
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80119ae:	480b      	ldr	r0, [pc, #44]	; (80119dc <_ZN10STM32F7DMAD1Ev+0x3c>)
 80119b0:	f7f2 fe5e 	bl	8004670 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80119b4:	205a      	movs	r0, #90	; 0x5a
 80119b6:	f7ff fe8f 	bl	80116d8 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	330c      	adds	r3, #12
 80119be:	4618      	mov	r0, r3
 80119c0:	f000 faa0 	bl	8011f04 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7ff ff0c 	bl	80117e4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	4618      	mov	r0, r3
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	080246a0 	.word	0x080246a0
 80119dc:	2000bcec 	.word	0x2000bcec

080119e0 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
}
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f7ff ffd9 	bl	80119a0 <_ZN10STM32F7DMAD1Ev>
 80119ee:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f010 ff29 	bl	802284a <_ZdlPvj>
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	4618      	mov	r0, r3
 80119fc:	3708      	adds	r7, #8
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}
	...

08011a04 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8011a0c:	4b09      	ldr	r3, [pc, #36]	; (8011a34 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8011a0e:	4a0a      	ldr	r2, [pc, #40]	; (8011a38 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8011a10:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8011a12:	4808      	ldr	r0, [pc, #32]	; (8011a34 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8011a14:	f7f2 fde2 	bl	80045dc <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8011a18:	4b06      	ldr	r3, [pc, #24]	; (8011a34 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8011a1a:	4a08      	ldr	r2, [pc, #32]	; (8011a3c <_ZN10STM32F7DMA10initializeEv+0x38>)
 8011a1c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8011a1e:	4b05      	ldr	r3, [pc, #20]	; (8011a34 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8011a20:	4a07      	ldr	r2, [pc, #28]	; (8011a40 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8011a22:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8011a24:	205a      	movs	r0, #90	; 0x5a
 8011a26:	f7ff fe37 	bl	8011698 <__NVIC_EnableIRQ>
}
 8011a2a:	bf00      	nop
 8011a2c:	3708      	adds	r7, #8
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	2000bcec 	.word	0x2000bcec
 8011a38:	4002b000 	.word	0x4002b000
 8011a3c:	080118f5 	.word	0x080118f5
 8011a40:	08011911 	.word	0x08011911

08011a44 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8011a44:	b480      	push	{r7}
 8011a46:	b083      	sub	sp, #12
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8011a4c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	370c      	adds	r7, #12
 8011a54:	46bd      	mov	sp, r7
 8011a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5a:	4770      	bx	lr

08011a5c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8011a5c:	b590      	push	{r4, r7, lr}
 8011a5e:	b08d      	sub	sp, #52	; 0x34
 8011a60:	af02      	add	r7, sp, #8
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8011a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011a6a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8011a74:	2b20      	cmp	r3, #32
 8011a76:	d007      	beq.n	8011a88 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	2b40      	cmp	r3, #64	; 0x40
 8011a7e:	d003      	beq.n	8011a88 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	2b04      	cmp	r3, #4
 8011a86:	d101      	bne.n	8011a8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8011a88:	2301      	movs	r3, #1
 8011a8a:	e000      	b.n	8011a8e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8011a8c:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8011a8e:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8011a94:	2b80      	cmp	r3, #128	; 0x80
 8011a96:	d004      	beq.n	8011aa2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011aa0:	d101      	bne.n	8011aa6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	e000      	b.n	8011aa8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8011aa6:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8011aa8:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8011aaa:	f7fd f8e9 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 8011aae:	4602      	mov	r2, r0
 8011ab0:	6813      	ldr	r3, [r2, #0]
 8011ab2:	3320      	adds	r3, #32
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	4610      	mov	r0, r2
 8011ab8:	4798      	blx	r3
 8011aba:	4603      	mov	r3, r0
 8011abc:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b40      	cmp	r3, #64	; 0x40
 8011ac4:	d01d      	beq.n	8011b02 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8011ac6:	2b40      	cmp	r3, #64	; 0x40
 8011ac8:	d804      	bhi.n	8011ad4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8011aca:	2b04      	cmp	r3, #4
 8011acc:	d00e      	beq.n	8011aec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8011ace:	2b20      	cmp	r3, #32
 8011ad0:	d017      	beq.n	8011b02 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8011ad2:	e019      	b.n	8011b08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8011ad4:	2b80      	cmp	r3, #128	; 0x80
 8011ad6:	d003      	beq.n	8011ae0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8011ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011adc:	d003      	beq.n	8011ae6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8011ade:	e013      	b.n	8011b08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8011ae0:	230a      	movs	r3, #10
 8011ae2:	623b      	str	r3, [r7, #32]
        break;
 8011ae4:	e01a      	b.n	8011b1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8011ae6:	2309      	movs	r3, #9
 8011ae8:	623b      	str	r3, [r7, #32]
        break;
 8011aea:	e017      	b.n	8011b1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8011aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011af0:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8011af2:	7f7b      	ldrb	r3, [r7, #29]
 8011af4:	2b10      	cmp	r3, #16
 8011af6:	d101      	bne.n	8011afc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8011af8:	2302      	movs	r3, #2
 8011afa:	e000      	b.n	8011afe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8011afc:	2301      	movs	r3, #1
 8011afe:	623b      	str	r3, [r7, #32]
        break;
 8011b00:	e00c      	b.n	8011b1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8011b02:	2300      	movs	r3, #0
 8011b04:	623b      	str	r3, [r7, #32]
        break;
 8011b06:	e009      	b.n	8011b1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8011b0c:	7f7b      	ldrb	r3, [r7, #29]
 8011b0e:	2b10      	cmp	r3, #16
 8011b10:	d101      	bne.n	8011b16 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8011b12:	2302      	movs	r3, #2
 8011b14:	e000      	b.n	8011b18 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8011b16:	2301      	movs	r3, #1
 8011b18:	623b      	str	r3, [r7, #32]
        break;
 8011b1a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8011b1c:	4a76      	ldr	r2, [pc, #472]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b20:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8011b22:	7f7b      	ldrb	r3, [r7, #29]
 8011b24:	2b10      	cmp	r3, #16
 8011b26:	d101      	bne.n	8011b2c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8011b28:	2302      	movs	r3, #2
 8011b2a:	e000      	b.n	8011b2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	4a72      	ldr	r2, [pc, #456]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011b30:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	8adb      	ldrh	r3, [r3, #22]
 8011b36:	461a      	mov	r2, r3
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	8a1b      	ldrh	r3, [r3, #16]
 8011b3c:	1ad3      	subs	r3, r2, r3
 8011b3e:	461a      	mov	r2, r3
 8011b40:	4b6d      	ldr	r3, [pc, #436]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011b42:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8011b44:	7f7b      	ldrb	r3, [r7, #29]
 8011b46:	2b10      	cmp	r3, #16
 8011b48:	d101      	bne.n	8011b4e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8011b4a:	2202      	movs	r2, #2
 8011b4c:	e000      	b.n	8011b50 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8011b4e:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	8adb      	ldrh	r3, [r3, #22]
 8011b54:	4619      	mov	r1, r3
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	8a1b      	ldrh	r3, [r3, #16]
 8011b5a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8011b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b5e:	4866      	ldr	r0, [pc, #408]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011b60:	f7ff fe9a 	bl	8011898 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8011b64:	4a64      	ldr	r2, [pc, #400]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011b66:	6a3b      	ldr	r3, [r7, #32]
 8011b68:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	8a9b      	ldrh	r3, [r3, #20]
 8011b6e:	461a      	mov	r2, r3
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	8a1b      	ldrh	r3, [r3, #16]
 8011b74:	1ad3      	subs	r3, r2, r3
 8011b76:	461a      	mov	r2, r3
 8011b78:	4b5f      	ldr	r3, [pc, #380]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011b7a:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8011b7c:	7ffb      	ldrb	r3, [r7, #31]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d103      	bne.n	8011b8a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8011b82:	7fbb      	ldrb	r3, [r7, #30]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	f000 8082 	beq.w	8011c8e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	7f1b      	ldrb	r3, [r3, #28]
 8011b8e:	2bff      	cmp	r3, #255	; 0xff
 8011b90:	d008      	beq.n	8011ba4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8011b92:	4b59      	ldr	r3, [pc, #356]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011b94:	2202      	movs	r2, #2
 8011b96:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	7f1b      	ldrb	r3, [r3, #28]
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	4b56      	ldr	r3, [pc, #344]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011ba0:	635a      	str	r2, [r3, #52]	; 0x34
 8011ba2:	e002      	b.n	8011baa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8011ba4:	4b54      	ldr	r3, [pc, #336]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8011baa:	7fbb      	ldrb	r3, [r7, #30]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d059      	beq.n	8011c64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8011bb0:	7f7b      	ldrb	r3, [r7, #29]
 8011bb2:	2b10      	cmp	r3, #16
 8011bb4:	d14a      	bne.n	8011c4c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	3318      	adds	r3, #24
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7ff fdca 	bl	8011754 <_ZNK8touchgfx9colortypecvtEv>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	12db      	asrs	r3, r3, #11
 8011bc4:	f003 021f 	and.w	r2, r3, #31
 8011bc8:	4613      	mov	r3, r2
 8011bca:	021b      	lsls	r3, r3, #8
 8011bcc:	1a9b      	subs	r3, r3, r2
 8011bce:	4a4b      	ldr	r2, [pc, #300]	; (8011cfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8011bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8011bd4:	441a      	add	r2, r3
 8011bd6:	1112      	asrs	r2, r2, #4
 8011bd8:	17db      	asrs	r3, r3, #31
 8011bda:	1ad3      	subs	r3, r2, r3
 8011bdc:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	3318      	adds	r3, #24
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7ff fdb6 	bl	8011754 <_ZNK8touchgfx9colortypecvtEv>
 8011be8:	4603      	mov	r3, r0
 8011bea:	115b      	asrs	r3, r3, #5
 8011bec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011bf0:	4613      	mov	r3, r2
 8011bf2:	021b      	lsls	r3, r3, #8
 8011bf4:	1a9b      	subs	r3, r3, r2
 8011bf6:	4a42      	ldr	r2, [pc, #264]	; (8011d00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8011bf8:	fb82 1203 	smull	r1, r2, r2, r3
 8011bfc:	441a      	add	r2, r3
 8011bfe:	1152      	asrs	r2, r2, #5
 8011c00:	17db      	asrs	r3, r3, #31
 8011c02:	1ad3      	subs	r3, r2, r3
 8011c04:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	3318      	adds	r3, #24
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7ff fda2 	bl	8011754 <_ZNK8touchgfx9colortypecvtEv>
 8011c10:	4603      	mov	r3, r0
 8011c12:	f003 021f 	and.w	r2, r3, #31
 8011c16:	4613      	mov	r3, r2
 8011c18:	021b      	lsls	r3, r3, #8
 8011c1a:	1a9b      	subs	r3, r3, r2
 8011c1c:	4a37      	ldr	r2, [pc, #220]	; (8011cfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8011c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8011c22:	441a      	add	r2, r3
 8011c24:	1112      	asrs	r2, r2, #4
 8011c26:	17db      	asrs	r3, r3, #31
 8011c28:	1ad3      	subs	r3, r2, r3
 8011c2a:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	7f1b      	ldrb	r3, [r3, #28]
 8011c30:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	061a      	lsls	r2, r3, #24
 8011c36:	69bb      	ldr	r3, [r7, #24]
 8011c38:	041b      	lsls	r3, r3, #16
 8011c3a:	431a      	orrs	r2, r3
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	021b      	lsls	r3, r3, #8
 8011c40:	431a      	orrs	r2, r3
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	4313      	orrs	r3, r2
 8011c46:	4a2c      	ldr	r2, [pc, #176]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011c48:	6353      	str	r3, [r2, #52]	; 0x34
 8011c4a:	e00b      	b.n	8011c64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	3318      	adds	r3, #24
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7ff fd73 	bl	801173c <_ZNK8touchgfx9colortype10getColor32Ev>
 8011c56:	4602      	mov	r2, r0
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	7f1b      	ldrb	r3, [r3, #28]
 8011c5c:	061b      	lsls	r3, r3, #24
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	4a25      	ldr	r2, [pc, #148]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011c62:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	8adb      	ldrh	r3, [r3, #22]
 8011c68:	461a      	mov	r2, r3
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	8a1b      	ldrh	r3, [r3, #16]
 8011c6e:	1ad3      	subs	r3, r2, r3
 8011c70:	461a      	mov	r2, r3
 8011c72:	4b21      	ldr	r3, [pc, #132]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011c74:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8011c76:	7f7b      	ldrb	r3, [r7, #29]
 8011c78:	2b10      	cmp	r3, #16
 8011c7a:	d101      	bne.n	8011c80 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8011c7c:	2302      	movs	r3, #2
 8011c7e:	e000      	b.n	8011c82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8011c80:	2301      	movs	r3, #1
 8011c82:	4a1d      	ldr	r2, [pc, #116]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011c84:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8011c86:	2100      	movs	r1, #0
 8011c88:	481b      	ldr	r0, [pc, #108]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011c8a:	f7f2 ff71 	bl	8004b70 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8011c8e:	2101      	movs	r1, #1
 8011c90:	4819      	ldr	r0, [pc, #100]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011c92:	f7f2 ff6d 	bl	8004b70 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8011c96:	7ffb      	ldrb	r3, [r7, #31]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d102      	bne.n	8011ca2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8011c9c:	7fbb      	ldrb	r3, [r7, #30]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d015      	beq.n	8011cce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011ca6:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011cac:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011cb2:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011cb8:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011cbe:	9301      	str	r3, [sp, #4]
 8011cc0:	9200      	str	r2, [sp, #0]
 8011cc2:	4623      	mov	r3, r4
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	480c      	ldr	r0, [pc, #48]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011cc8:	f7f2 fd75 	bl	80047b6 <HAL_DMA2D_BlendingStart_IT>
 8011ccc:	e00f      	b.n	8011cee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8011cd2:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8011cd8:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8011cde:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8011ce4:	9300      	str	r3, [sp, #0]
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	4803      	ldr	r0, [pc, #12]	; (8011cf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011cea:	f7f2 fd31 	bl	8004750 <HAL_DMA2D_Start_IT>
    }
}
 8011cee:	bf00      	nop
 8011cf0:	372c      	adds	r7, #44	; 0x2c
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd90      	pop	{r4, r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	2000bcec 	.word	0x2000bcec
 8011cfc:	84210843 	.word	0x84210843
 8011d00:	82082083 	.word	0x82082083

08011d04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8011d04:	b590      	push	{r4, r7, lr}
 8011d06:	b08d      	sub	sp, #52	; 0x34
 8011d08:	af02      	add	r7, sp, #8
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8011d0e:	f7fc ffb7 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 8011d12:	4602      	mov	r2, r0
 8011d14:	6813      	ldr	r3, [r2, #0]
 8011d16:	3320      	adds	r3, #32
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	4610      	mov	r0, r2
 8011d1c:	4798      	blx	r3
 8011d1e:	4603      	mov	r3, r0
 8011d20:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8011d22:	7ffb      	ldrb	r3, [r7, #31]
 8011d24:	2b10      	cmp	r3, #16
 8011d26:	d101      	bne.n	8011d2c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8011d28:	2302      	movs	r3, #2
 8011d2a:	e000      	b.n	8011d2e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8011d30:	2300      	movs	r3, #0
 8011d32:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8011d34:	7ffb      	ldrb	r3, [r7, #31]
 8011d36:	2b10      	cmp	r3, #16
 8011d38:	d149      	bne.n	8011dce <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	3318      	adds	r3, #24
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7ff fd08 	bl	8011754 <_ZNK8touchgfx9colortypecvtEv>
 8011d44:	4603      	mov	r3, r0
 8011d46:	12db      	asrs	r3, r3, #11
 8011d48:	f003 021f 	and.w	r2, r3, #31
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	021b      	lsls	r3, r3, #8
 8011d50:	1a9b      	subs	r3, r3, r2
 8011d52:	4a69      	ldr	r2, [pc, #420]	; (8011ef8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8011d54:	fb82 1203 	smull	r1, r2, r2, r3
 8011d58:	441a      	add	r2, r3
 8011d5a:	1112      	asrs	r2, r2, #4
 8011d5c:	17db      	asrs	r3, r3, #31
 8011d5e:	1ad3      	subs	r3, r2, r3
 8011d60:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	3318      	adds	r3, #24
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7ff fcf4 	bl	8011754 <_ZNK8touchgfx9colortypecvtEv>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	115b      	asrs	r3, r3, #5
 8011d70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011d74:	4613      	mov	r3, r2
 8011d76:	021b      	lsls	r3, r3, #8
 8011d78:	1a9b      	subs	r3, r3, r2
 8011d7a:	4a60      	ldr	r2, [pc, #384]	; (8011efc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8011d7c:	fb82 1203 	smull	r1, r2, r2, r3
 8011d80:	441a      	add	r2, r3
 8011d82:	1152      	asrs	r2, r2, #5
 8011d84:	17db      	asrs	r3, r3, #31
 8011d86:	1ad3      	subs	r3, r2, r3
 8011d88:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	3318      	adds	r3, #24
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7ff fce0 	bl	8011754 <_ZNK8touchgfx9colortypecvtEv>
 8011d94:	4603      	mov	r3, r0
 8011d96:	f003 021f 	and.w	r2, r3, #31
 8011d9a:	4613      	mov	r3, r2
 8011d9c:	021b      	lsls	r3, r3, #8
 8011d9e:	1a9b      	subs	r3, r3, r2
 8011da0:	4a55      	ldr	r2, [pc, #340]	; (8011ef8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8011da2:	fb82 1203 	smull	r1, r2, r2, r3
 8011da6:	441a      	add	r2, r3
 8011da8:	1112      	asrs	r2, r2, #4
 8011daa:	17db      	asrs	r3, r3, #31
 8011dac:	1ad3      	subs	r3, r2, r3
 8011dae:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	7f1b      	ldrb	r3, [r3, #28]
 8011db4:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	061a      	lsls	r2, r3, #24
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	041b      	lsls	r3, r3, #16
 8011dbe:	431a      	orrs	r2, r3
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	021b      	lsls	r3, r3, #8
 8011dc4:	4313      	orrs	r3, r2
 8011dc6:	68fa      	ldr	r2, [r7, #12]
 8011dc8:	4313      	orrs	r3, r2
 8011dca:	623b      	str	r3, [r7, #32]
 8011dcc:	e00b      	b.n	8011de6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	7f1b      	ldrb	r3, [r3, #28]
 8011dd2:	061b      	lsls	r3, r3, #24
 8011dd4:	461c      	mov	r4, r3
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	3318      	adds	r3, #24
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7ff fcae 	bl	801173c <_ZNK8touchgfx9colortype10getColor32Ev>
 8011de0:	4603      	mov	r3, r0
 8011de2:	4323      	orrs	r3, r4
 8011de4:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	2b08      	cmp	r3, #8
 8011dec:	d103      	bne.n	8011df6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8011dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011df2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011df4:	e003      	b.n	8011dfe <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8011df6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8011dfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011dfc:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8011dfe:	4a40      	ldr	r2, [pc, #256]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e02:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8011e04:	7ffb      	ldrb	r3, [r7, #31]
 8011e06:	2b10      	cmp	r3, #16
 8011e08:	d101      	bne.n	8011e0e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8011e0a:	2302      	movs	r3, #2
 8011e0c:	e000      	b.n	8011e10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8011e0e:	2301      	movs	r3, #1
 8011e10:	4a3b      	ldr	r2, [pc, #236]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e12:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	8adb      	ldrh	r3, [r3, #22]
 8011e18:	461a      	mov	r2, r3
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	8a1b      	ldrh	r3, [r3, #16]
 8011e1e:	1ad3      	subs	r3, r2, r3
 8011e20:	461a      	mov	r2, r3
 8011e22:	4b37      	ldr	r3, [pc, #220]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e24:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8011e26:	7ffb      	ldrb	r3, [r7, #31]
 8011e28:	2b10      	cmp	r3, #16
 8011e2a:	d101      	bne.n	8011e30 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8011e2c:	2202      	movs	r2, #2
 8011e2e:	e000      	b.n	8011e32 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8011e30:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	8adb      	ldrh	r3, [r3, #22]
 8011e36:	4619      	mov	r1, r3
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	8a1b      	ldrh	r3, [r3, #16]
 8011e3c:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8011e3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e40:	482f      	ldr	r0, [pc, #188]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e42:	f7ff fd29 	bl	8011898 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8011e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011e4c:	d11e      	bne.n	8011e8c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8011e4e:	4b2c      	ldr	r3, [pc, #176]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e50:	2201      	movs	r2, #1
 8011e52:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8011e54:	4a2a      	ldr	r2, [pc, #168]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e56:	6a3b      	ldr	r3, [r7, #32]
 8011e58:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8011e5a:	4b29      	ldr	r3, [pc, #164]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e5c:	2209      	movs	r2, #9
 8011e5e:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	8adb      	ldrh	r3, [r3, #22]
 8011e64:	461a      	mov	r2, r3
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	8a1b      	ldrh	r3, [r3, #16]
 8011e6a:	1ad3      	subs	r3, r2, r3
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	4b24      	ldr	r3, [pc, #144]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e70:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8011e72:	7ffb      	ldrb	r3, [r7, #31]
 8011e74:	2b10      	cmp	r3, #16
 8011e76:	d101      	bne.n	8011e7c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8011e78:	2302      	movs	r3, #2
 8011e7a:	e000      	b.n	8011e7e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	4a20      	ldr	r2, [pc, #128]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e80:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8011e82:	2100      	movs	r1, #0
 8011e84:	481e      	ldr	r0, [pc, #120]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e86:	f7f2 fe73 	bl	8004b70 <HAL_DMA2D_ConfigLayer>
 8011e8a:	e005      	b.n	8011e98 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8011e8c:	4a1c      	ldr	r2, [pc, #112]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e8e:	69bb      	ldr	r3, [r7, #24]
 8011e90:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8011e92:	4b1b      	ldr	r3, [pc, #108]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e94:	2200      	movs	r2, #0
 8011e96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8011e98:	2101      	movs	r1, #1
 8011e9a:	4819      	ldr	r0, [pc, #100]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011e9c:	f7f2 fe68 	bl	8004b70 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8011ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011ea6:	d115      	bne.n	8011ed4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011eac:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011eb2:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011eb8:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011ebe:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011ec4:	9301      	str	r3, [sp, #4]
 8011ec6:	9200      	str	r2, [sp, #0]
 8011ec8:	4623      	mov	r3, r4
 8011eca:	4602      	mov	r2, r0
 8011ecc:	480c      	ldr	r0, [pc, #48]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011ece:	f7f2 fc72 	bl	80047b6 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8011ed2:	e00d      	b.n	8011ef0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8011ede:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8011ee4:	9300      	str	r3, [sp, #0]
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	6a39      	ldr	r1, [r7, #32]
 8011eea:	4805      	ldr	r0, [pc, #20]	; (8011f00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011eec:	f7f2 fc30 	bl	8004750 <HAL_DMA2D_Start_IT>
}
 8011ef0:	bf00      	nop
 8011ef2:	372c      	adds	r7, #44	; 0x2c
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd90      	pop	{r4, r7, pc}
 8011ef8:	84210843 	.word	0x84210843
 8011efc:	82082083 	.word	0x82082083
 8011f00:	2000bcec 	.word	0x2000bcec

08011f04 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	4a05      	ldr	r2, [pc, #20]	; (8011f24 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	601a      	str	r2, [r3, #0]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7ff fc2b 	bl	8011770 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3708      	adds	r7, #8
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}
 8011f24:	08025604 	.word	0x08025604

08011f28 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f7ff ffe7 	bl	8011f04 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011f36:	2114      	movs	r1, #20
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f010 fc86 	bl	802284a <_ZdlPvj>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	4618      	mov	r0, r3
 8011f42:	3708      	adds	r7, #8
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8011f48:	b480      	push	{r7}
 8011f4a:	b083      	sub	sp, #12
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
        texts = t;
 8011f50:	4a04      	ldr	r2, [pc, #16]	; (8011f64 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6013      	str	r3, [r2, #0]
    }
 8011f56:	bf00      	nop
 8011f58:	370c      	adds	r7, #12
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f60:	4770      	bx	lr
 8011f62:	bf00      	nop
 8011f64:	2000b504 	.word	0x2000b504

08011f68 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8011f68:	b480      	push	{r7}
 8011f6a:	b085      	sub	sp, #20
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	60b9      	str	r1, [r7, #8]
 8011f72:	607a      	str	r2, [r7, #4]
 8011f74:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8011f76:	4a0b      	ldr	r2, [pc, #44]	; (8011fa4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	601a      	str	r2, [r3, #0]
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	68ba      	ldr	r2, [r7, #8]
 8011f80:	605a      	str	r2, [r3, #4]
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	609a      	str	r2, [r3, #8]
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	683a      	ldr	r2, [r7, #0]
 8011f8c:	60da      	str	r2, [r3, #12]
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	69ba      	ldr	r2, [r7, #24]
 8011f92:	611a      	str	r2, [r3, #16]
    {
    }
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	4618      	mov	r0, r3
 8011f98:	3714      	adds	r7, #20
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop
 8011fa4:	0802480c 	.word	0x0802480c

08011fa8 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8011fa8:	b480      	push	{r7}
 8011faa:	b083      	sub	sp, #12
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
    {
 8011fb0:	4a04      	ldr	r2, [pc, #16]	; (8011fc4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	601a      	str	r2, [r3, #0]
    }
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	370c      	adds	r7, #12
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr
 8011fc4:	0802480c 	.word	0x0802480c

08011fc8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b082      	sub	sp, #8
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
    }
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f7ff ffe9 	bl	8011fa8 <_ZN8touchgfx7MVPHeapD1Ev>
 8011fd6:	2114      	movs	r1, #20
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f010 fc36 	bl	802284a <_ZdlPvj>
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3708      	adds	r7, #8
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
    {
 8011ff0:	4a04      	ldr	r2, [pc, #16]	; (8012004 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	601a      	str	r2, [r3, #0]
    }
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	370c      	adds	r7, #12
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr
 8012004:	08025f2c 	.word	0x08025f2c

08012008 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
    }
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7ff ffe9 	bl	8011fe8 <_ZN8touchgfx3LCDD1Ev>
 8012016:	2108      	movs	r1, #8
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f010 fc16 	bl	802284a <_ZdlPvj>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	4618      	mov	r0, r3
 8012022:	3708      	adds	r7, #8
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8012028:	b480      	push	{r7}
 801202a:	b083      	sub	sp, #12
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2200      	movs	r2, #0
 8012034:	801a      	strh	r2, [r3, #0]
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2200      	movs	r2, #0
 801203a:	805a      	strh	r2, [r3, #2]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2200      	movs	r2, #0
 8012040:	809a      	strh	r2, [r3, #4]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2200      	movs	r2, #0
 8012046:	80da      	strh	r2, [r3, #6]
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2200      	movs	r2, #0
 801204c:	811a      	strh	r2, [r3, #8]
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2200      	movs	r2, #0
 8012052:	815a      	strh	r2, [r3, #10]
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2200      	movs	r2, #0
 8012058:	819a      	strh	r2, [r3, #12]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	739a      	strb	r2, [r3, #14]
        {
        }
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	4618      	mov	r0, r3
 8012064:	370c      	adds	r7, #12
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr

0801206e <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 801206e:	b580      	push	{r7, lr}
 8012070:	b082      	sub	sp, #8
 8012072:	af00      	add	r7, sp, #0
 8012074:	6078      	str	r0, [r7, #4]
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	4618      	mov	r0, r3
 801207a:	f7ff ffd5 	bl	8012028 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2200      	movs	r2, #0
 8012082:	611a      	str	r2, [r3, #16]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2200      	movs	r2, #0
 8012088:	829a      	strh	r2, [r3, #20]
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	4618      	mov	r0, r3
 801208e:	3708      	adds	r7, #8
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}

08012094 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	60f8      	str	r0, [r7, #12]
 801209c:	60b9      	str	r1, [r7, #8]
 801209e:	607a      	str	r2, [r7, #4]
 80120a0:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 80120a2:	4a44      	ldr	r2, [pc, #272]	; (80121b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	601a      	str	r2, [r3, #0]
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	68ba      	ldr	r2, [r7, #8]
 80120ac:	605a      	str	r2, [r3, #4]
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	687a      	ldr	r2, [r7, #4]
 80120b2:	609a      	str	r2, [r3, #8]
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	683a      	ldr	r2, [r7, #0]
 80120b8:	60da      	str	r2, [r3, #12]
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	2200      	movs	r2, #0
 80120be:	611a      	str	r2, [r3, #16]
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	2200      	movs	r2, #0
 80120c4:	615a      	str	r2, [r3, #20]
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2200      	movs	r2, #0
 80120ca:	619a      	str	r2, [r3, #24]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	331c      	adds	r3, #28
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7ff ffcc 	bl	801206e <_ZN8touchgfx8GesturesC1Ev>
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2200      	movs	r2, #0
 80120da:	639a      	str	r2, [r3, #56]	; 0x38
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	2200      	movs	r2, #0
 80120e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	2200      	movs	r2, #0
 80120e6:	641a      	str	r2, [r3, #64]	; 0x40
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	2200      	movs	r2, #0
 80120ec:	645a      	str	r2, [r3, #68]	; 0x44
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	2200      	movs	r2, #0
 80120f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2201      	movs	r2, #1
 80120fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	2201      	movs	r2, #1
 8012102:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	2200      	movs	r2, #0
 801210a:	64da      	str	r2, [r3, #76]	; 0x4c
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	3350      	adds	r3, #80	; 0x50
 8012110:	4618      	mov	r0, r3
 8012112:	f7fd f9e4 	bl	800f4de <_ZN8touchgfx4RectC1Ev>
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2201      	movs	r2, #1
 801211a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	2200      	movs	r2, #0
 8012122:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2200      	movs	r2, #0
 801212a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	2201      	movs	r2, #1
 8012132:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	2200      	movs	r2, #0
 801213a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	2200      	movs	r2, #0
 8012142:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2200      	movs	r2, #0
 801214a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2200      	movs	r2, #0
 8012152:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	2200      	movs	r2, #0
 801215a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2200      	movs	r2, #0
 8012162:	671a      	str	r2, [r3, #112]	; 0x70
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	2200      	movs	r2, #0
 8012168:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 801216c:	4a12      	ldr	r2, [pc, #72]	; (80121b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8012172:	4a12      	ldr	r2, [pc, #72]	; (80121bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8012174:	8b3b      	ldrh	r3, [r7, #24]
 8012176:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8012178:	4a11      	ldr	r2, [pc, #68]	; (80121c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801217a:	8bbb      	ldrh	r3, [r7, #28]
 801217c:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801217e:	4b11      	ldr	r3, [pc, #68]	; (80121c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8012180:	2200      	movs	r2, #0
 8012182:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8012184:	4b0d      	ldr	r3, [pc, #52]	; (80121bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8012186:	881a      	ldrh	r2, [r3, #0]
 8012188:	4b0f      	ldr	r3, [pc, #60]	; (80121c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 801218a:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801218c:	4b0c      	ldr	r3, [pc, #48]	; (80121c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801218e:	881a      	ldrh	r2, [r3, #0]
 8012190:	4b0e      	ldr	r3, [pc, #56]	; (80121cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8012192:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8012194:	8b3a      	ldrh	r2, [r7, #24]
 8012196:	8bbb      	ldrh	r3, [r7, #28]
 8012198:	429a      	cmp	r2, r3
 801219a:	d301      	bcc.n	80121a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 801219c:	2200      	movs	r2, #0
 801219e:	e000      	b.n	80121a2 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 80121a0:	2201      	movs	r2, #1
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	4618      	mov	r0, r3
 80121ac:	3710      	adds	r7, #16
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
 80121b2:	bf00      	nop
 80121b4:	08025170 	.word	0x08025170
 80121b8:	2000b468 	.word	0x2000b468
 80121bc:	2000b45c 	.word	0x2000b45c
 80121c0:	2000b45e 	.word	0x2000b45e
 80121c4:	2000b460 	.word	0x2000b460
 80121c8:	2000b462 	.word	0x2000b462
 80121cc:	2000b464 	.word	0x2000b464

080121d0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	4618      	mov	r0, r3
 80121de:	f7fc ff73 	bl	800f0c8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 80121e2:	bf00      	nop
 80121e4:	3708      	adds	r7, #8
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
	...

080121ec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b086      	sub	sp, #24
 80121f0:	af02      	add	r7, sp, #8
 80121f2:	60f8      	str	r0, [r7, #12]
 80121f4:	60b9      	str	r1, [r7, #8]
 80121f6:	607a      	str	r2, [r7, #4]
 80121f8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80121fa:	68f8      	ldr	r0, [r7, #12]
 80121fc:	69bb      	ldr	r3, [r7, #24]
 80121fe:	9300      	str	r3, [sp, #0]
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	687a      	ldr	r2, [r7, #4]
 8012204:	68b9      	ldr	r1, [r7, #8]
 8012206:	f7ff feaf 	bl	8011f68 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801220a:	4a04      	ldr	r2, [pc, #16]	; (801221c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	601a      	str	r2, [r3, #0]
    {

    }
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	4618      	mov	r0, r3
 8012214:	3710      	adds	r7, #16
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop
 801221c:	080247f8 	.word	0x080247f8

08012220 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8012220:	b580      	push	{r7, lr}
 8012222:	af00      	add	r7, sp, #0
 8012224:	4801      	ldr	r0, [pc, #4]	; (801222c <__tcf_0+0xc>)
 8012226:	f000 f9dd 	bl	80125e4 <_ZN12FrontendHeapD1Ev>
 801222a:	bd80      	pop	{r7, pc}
 801222c:	200085ac 	.word	0x200085ac

08012230 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012230:	b580      	push	{r7, lr}
 8012232:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8012234:	4b08      	ldr	r3, [pc, #32]	; (8012258 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	f003 0301 	and.w	r3, r3, #1
 801223c:	2b00      	cmp	r3, #0
 801223e:	d108      	bne.n	8012252 <_ZN12FrontendHeap11getInstanceEv+0x22>
 8012240:	4806      	ldr	r0, [pc, #24]	; (801225c <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8012242:	f000 f831 	bl	80122a8 <_ZN12FrontendHeapC1Ev>
 8012246:	4b04      	ldr	r3, [pc, #16]	; (8012258 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8012248:	2201      	movs	r2, #1
 801224a:	601a      	str	r2, [r3, #0]
 801224c:	4804      	ldr	r0, [pc, #16]	; (8012260 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 801224e:	f010 fb45 	bl	80228dc <atexit>
        return instance;
 8012252:	4b02      	ldr	r3, [pc, #8]	; (801225c <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8012254:	4618      	mov	r0, r3
 8012256:	bd80      	pop	{r7, pc}
 8012258:	2000a75c 	.word	0x2000a75c
 801225c:	200085ac 	.word	0x200085ac
 8012260:	08012221 	.word	0x08012221

08012264 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8012264:	b580      	push	{r7, lr}
 8012266:	b082      	sub	sp, #8
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	4a05      	ldr	r2, [pc, #20]	; (8012284 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	601a      	str	r2, [r3, #0]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	4618      	mov	r0, r3
 8012276:	f7ff fe97 	bl	8011fa8 <_ZN8touchgfx7MVPHeapD1Ev>
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	4618      	mov	r0, r3
 801227e:	3708      	adds	r7, #8
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}
 8012284:	080247f8 	.word	0x080247f8

08012288 <_ZN16FrontendHeapBaseD0Ev>:
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f7ff ffe7 	bl	8012264 <_ZN16FrontendHeapBaseD1Ev>
 8012296:	2114      	movs	r1, #20
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f010 fad6 	bl	802284a <_ZdlPvj>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	4618      	mov	r0, r3
 80122a2:	3708      	adds	r7, #8
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80122a8:	b5b0      	push	{r4, r5, r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af02      	add	r7, sp, #8
 80122ae:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f103 0414 	add.w	r4, r3, #20
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f242 0248 	movw	r2, #8264	; 0x2048
 80122c4:	441a      	add	r2, r3
 80122c6:	6879      	ldr	r1, [r7, #4]
 80122c8:	f242 035c 	movw	r3, #8284	; 0x205c
 80122cc:	440b      	add	r3, r1
 80122ce:	9300      	str	r3, [sp, #0]
 80122d0:	4613      	mov	r3, r2
 80122d2:	462a      	mov	r2, r5
 80122d4:	4621      	mov	r1, r4
 80122d6:	f7ff ff89 	bl	80121ec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80122da:	4a1a      	ldr	r2, [pc, #104]	; (8012344 <_ZN12FrontendHeapC1Ev+0x9c>)
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	601a      	str	r2, [r3, #0]
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	3314      	adds	r3, #20
 80122e4:	4618      	mov	r0, r3
 80122e6:	f000 f8df 	bl	80124a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	332c      	adds	r3, #44	; 0x2c
 80122ee:	4618      	mov	r0, r3
 80122f0:	f000 f90e 	bl	8012510 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80122f4:	687a      	ldr	r2, [r7, #4]
 80122f6:	f242 0348 	movw	r3, #8264	; 0x2048
 80122fa:	4413      	add	r3, r2
 80122fc:	4618      	mov	r0, r3
 80122fe:	f000 f93d 	bl	801257c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012302:	687a      	ldr	r2, [r7, #4]
 8012304:	f242 035c 	movw	r3, #8284	; 0x205c
 8012308:	4413      	add	r3, r2
 801230a:	687a      	ldr	r2, [r7, #4]
 801230c:	f242 11ac 	movw	r1, #8620	; 0x21ac
 8012310:	4411      	add	r1, r2
 8012312:	687a      	ldr	r2, [r7, #4]
 8012314:	4618      	mov	r0, r3
 8012316:	f7fe fba5 	bl	8010a64 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801231a:	687a      	ldr	r2, [r7, #4]
 801231c:	f242 13ac 	movw	r3, #8620	; 0x21ac
 8012320:	4413      	add	r3, r2
 8012322:	4618      	mov	r0, r3
 8012324:	f7fe fde0 	bl	8010ee8 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	687a      	ldr	r2, [r7, #4]
 801232c:	f242 035c 	movw	r3, #8284	; 0x205c
 8012330:	4413      	add	r3, r2
 8012332:	4619      	mov	r1, r3
 8012334:	f7ff ff4c 	bl	80121d0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	4618      	mov	r0, r3
 801233c:	3708      	adds	r7, #8
 801233e:	46bd      	mov	sp, r7
 8012340:	bdb0      	pop	{r4, r5, r7, pc}
 8012342:	bf00      	nop
 8012344:	08024748 	.word	0x08024748

08012348 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
    {
 8012350:	4a05      	ldr	r2, [pc, #20]	; (8012368 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	601a      	str	r2, [r3, #0]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	4618      	mov	r0, r3
 801235a:	f7ff fe45 	bl	8011fe8 <_ZN8touchgfx3LCDD1Ev>
    }
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	4618      	mov	r0, r3
 8012362:	3708      	adds	r7, #8
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}
 8012368:	08027308 	.word	0x08027308

0801236c <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 801236c:	b580      	push	{r7, lr}
 801236e:	b082      	sub	sp, #8
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
    }
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f7ff ffe7 	bl	8012348 <_ZN8touchgfx8LCD24bppD1Ev>
 801237a:	2158      	movs	r1, #88	; 0x58
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f010 fa64 	bl	802284a <_ZdlPvj>
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	4618      	mov	r0, r3
 8012386:	3708      	adds	r7, #8
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 801238c:	b580      	push	{r7, lr}
 801238e:	b086      	sub	sp, #24
 8012390:	af02      	add	r7, sp, #8
 8012392:	60f8      	str	r0, [r7, #12]
 8012394:	60b9      	str	r1, [r7, #8]
 8012396:	607a      	str	r2, [r7, #4]
 8012398:	603b      	str	r3, [r7, #0]
 801239a:	68f8      	ldr	r0, [r7, #12]
 801239c:	8bbb      	ldrh	r3, [r7, #28]
 801239e:	9301      	str	r3, [sp, #4]
 80123a0:	8b3b      	ldrh	r3, [r7, #24]
 80123a2:	9300      	str	r3, [sp, #0]
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	687a      	ldr	r2, [r7, #4]
 80123a8:	68b9      	ldr	r1, [r7, #8]
 80123aa:	f7ff fe73 	bl	8012094 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80123ae:	4a04      	ldr	r2, [pc, #16]	; (80123c0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	601a      	str	r2, [r3, #0]
    }
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	4618      	mov	r0, r3
 80123b8:	3710      	adds	r7, #16
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	0802481c 	.word	0x0802481c

080123c4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b086      	sub	sp, #24
 80123c8:	af02      	add	r7, sp, #8
 80123ca:	60f8      	str	r0, [r7, #12]
 80123cc:	60b9      	str	r1, [r7, #8]
 80123ce:	607a      	str	r2, [r7, #4]
 80123d0:	603b      	str	r3, [r7, #0]
 80123d2:	68f8      	ldr	r0, [r7, #12]
 80123d4:	8bbb      	ldrh	r3, [r7, #28]
 80123d6:	9301      	str	r3, [sp, #4]
 80123d8:	8b3b      	ldrh	r3, [r7, #24]
 80123da:	9300      	str	r3, [sp, #0]
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	687a      	ldr	r2, [r7, #4]
 80123e0:	68b9      	ldr	r1, [r7, #8]
 80123e2:	f7ff ffd3 	bl	801238c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80123e6:	4a04      	ldr	r2, [pc, #16]	; (80123f8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	601a      	str	r2, [r3, #0]
    }
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	4618      	mov	r0, r3
 80123f0:	3710      	adds	r7, #16
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}
 80123f6:	bf00      	nop
 80123f8:	08024548 	.word	0x08024548

080123fc <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80123fc:	b480      	push	{r7}
 80123fe:	b083      	sub	sp, #12
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	4a04      	ldr	r2, [pc, #16]	; (8012418 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	601a      	str	r2, [r3, #0]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4618      	mov	r0, r3
 801240e:	370c      	adds	r7, #12
 8012410:	46bd      	mov	sp, r7
 8012412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012416:	4770      	bx	lr
 8012418:	08024530 	.word	0x08024530

0801241c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	4618      	mov	r0, r3
 8012428:	f7ff ffe8 	bl	80123fc <_ZN8touchgfx15TouchControllerC1Ev>
 801242c:	4a03      	ldr	r2, [pc, #12]	; (801243c <_ZN20STM32TouchControllerC1Ev+0x20>)
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	601a      	str	r2, [r3, #0]
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	4618      	mov	r0, r3
 8012436:	3708      	adds	r7, #8
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}
 801243c:	08024518 	.word	0x08024518

08012440 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8012440:	b590      	push	{r4, r7, lr}
 8012442:	b085      	sub	sp, #20
 8012444:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8012446:	f7fe f9fd 	bl	8010844 <_ZN14BitmapDatabase11getInstanceEv>
 801244a:	4604      	mov	r4, r0
 801244c:	f7fe fa04 	bl	8010858 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8012450:	4603      	mov	r3, r0
 8012452:	4619      	mov	r1, r3
 8012454:	2300      	movs	r3, #0
 8012456:	9300      	str	r3, [sp, #0]
 8012458:	2300      	movs	r3, #0
 801245a:	2200      	movs	r2, #0
 801245c:	4620      	mov	r0, r4
 801245e:	f006 fcb9 	bl	8018dd4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8012462:	4809      	ldr	r0, [pc, #36]	; (8012488 <touchgfx_init+0x48>)
 8012464:	f7ff fd70 	bl	8011f48 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8012468:	2000      	movs	r0, #0
 801246a:	f7fe fa19 	bl	80108a0 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 801246e:	4807      	ldr	r0, [pc, #28]	; (801248c <touchgfx_init+0x4c>)
 8012470:	f006 fbfe 	bl	8018c70 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8012474:	f7ff fedc 	bl	8012230 <_ZN12FrontendHeap11getInstanceEv>
 8012478:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 801247a:	4805      	ldr	r0, [pc, #20]	; (8012490 <touchgfx_init+0x50>)
 801247c:	f7fe ffcc 	bl	8011418 <_ZN11TouchGFXHAL10initializeEv>
}
 8012480:	bf00      	nop
 8012482:	370c      	adds	r7, #12
 8012484:	46bd      	mov	sp, r7
 8012486:	bd90      	pop	{r4, r7, pc}
 8012488:	2000b3dc 	.word	0x2000b3dc
 801248c:	2000003c 	.word	0x2000003c
 8012490:	2000b3e0 	.word	0x2000b3e0

08012494 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8012494:	b580      	push	{r7, lr}
 8012496:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8012498:	4802      	ldr	r0, [pc, #8]	; (80124a4 <touchgfx_taskEntry+0x10>)
 801249a:	f001 f88a 	bl	80135b2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 801249e:	bf00      	nop
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	2000b3e0 	.word	0x2000b3e0

080124a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b082      	sub	sp, #8
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f000 fc76 	bl	8012da4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80124b8:	4a03      	ldr	r2, [pc, #12]	; (80124c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	601a      	str	r2, [r3, #0]
    {
    }
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	4618      	mov	r0, r3
 80124c2:	3708      	adds	r7, #8
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	080247c4 	.word	0x080247c4

080124cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
    {
    }
 80124d4:	4a05      	ldr	r2, [pc, #20]	; (80124ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	601a      	str	r2, [r3, #0]
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4618      	mov	r0, r3
 80124de:	f000 fc5f 	bl	8012da0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	4618      	mov	r0, r3
 80124e6:	3708      	adds	r7, #8
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	080247c4 	.word	0x080247c4

080124f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b082      	sub	sp, #8
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
    }
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f7ff ffe7 	bl	80124cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80124fe:	2118      	movs	r1, #24
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f010 f9a2 	bl	802284a <_ZdlPvj>
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	4618      	mov	r0, r3
 801250a:	3708      	adds	r7, #8
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	4618      	mov	r0, r3
 801251c:	f000 fc42 	bl	8012da4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012520:	4a03      	ldr	r2, [pc, #12]	; (8012530 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	601a      	str	r2, [r3, #0]
    }
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	4618      	mov	r0, r3
 801252a:	3708      	adds	r7, #8
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}
 8012530:	08024790 	.word	0x08024790

08012534 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8012534:	b580      	push	{r7, lr}
 8012536:	b082      	sub	sp, #8
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
    }
 801253c:	4a05      	ldr	r2, [pc, #20]	; (8012554 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	601a      	str	r2, [r3, #0]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	4618      	mov	r0, r3
 8012546:	f000 fc2b 	bl	8012da0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	4618      	mov	r0, r3
 801254e:	3708      	adds	r7, #8
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}
 8012554:	08024790 	.word	0x08024790

08012558 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8012558:	b580      	push	{r7, lr}
 801255a:	b082      	sub	sp, #8
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
    }
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f7ff ffe7 	bl	8012534 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012566:	f242 011c 	movw	r1, #8220	; 0x201c
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f010 f96d 	bl	802284a <_ZdlPvj>
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	4618      	mov	r0, r3
 8012574:	3708      	adds	r7, #8
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}
	...

0801257c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801257c:	b580      	push	{r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	4618      	mov	r0, r3
 8012588:	f000 fc0c 	bl	8012da4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801258c:	4a03      	ldr	r2, [pc, #12]	; (801259c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	601a      	str	r2, [r3, #0]
    }
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	4618      	mov	r0, r3
 8012596:	3708      	adds	r7, #8
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}
 801259c:	0802475c 	.word	0x0802475c

080125a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b082      	sub	sp, #8
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
    }
 80125a8:	4a05      	ldr	r2, [pc, #20]	; (80125c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	601a      	str	r2, [r3, #0]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4618      	mov	r0, r3
 80125b2:	f000 fbf5 	bl	8012da0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	4618      	mov	r0, r3
 80125ba:	3708      	adds	r7, #8
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	0802475c 	.word	0x0802475c

080125c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b082      	sub	sp, #8
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
    }
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f7ff ffe7 	bl	80125a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80125d2:	2114      	movs	r1, #20
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f010 f938 	bl	802284a <_ZdlPvj>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	4618      	mov	r0, r3
 80125de:	3708      	adds	r7, #8
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}

080125e4 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b082      	sub	sp, #8
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	4a11      	ldr	r2, [pc, #68]	; (8012634 <_ZN12FrontendHeapD1Ev+0x50>)
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	601a      	str	r2, [r3, #0]
 80125f2:	687a      	ldr	r2, [r7, #4]
 80125f4:	f242 035c 	movw	r3, #8284	; 0x205c
 80125f8:	4413      	add	r3, r2
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7fe f9fc 	bl	80109f8 <_ZN19FrontendApplicationD1Ev>
 8012600:	687a      	ldr	r2, [r7, #4]
 8012602:	f242 0348 	movw	r3, #8264	; 0x2048
 8012606:	4413      	add	r3, r2
 8012608:	4618      	mov	r0, r3
 801260a:	f7ff ffc9 	bl	80125a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	332c      	adds	r3, #44	; 0x2c
 8012612:	4618      	mov	r0, r3
 8012614:	f7ff ff8e 	bl	8012534 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	3314      	adds	r3, #20
 801261c:	4618      	mov	r0, r3
 801261e:	f7ff ff55 	bl	80124cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	4618      	mov	r0, r3
 8012626:	f7ff fe1d 	bl	8012264 <_ZN16FrontendHeapBaseD1Ev>
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	4618      	mov	r0, r3
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}
 8012634:	08024748 	.word	0x08024748

08012638 <_ZN12FrontendHeapD0Ev>:
 8012638:	b580      	push	{r7, lr}
 801263a:	b082      	sub	sp, #8
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f7ff ffcf 	bl	80125e4 <_ZN12FrontendHeapD1Ev>
 8012646:	f242 11b0 	movw	r1, #8624	; 0x21b0
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f010 f8fd 	bl	802284a <_ZdlPvj>
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	4618      	mov	r0, r3
 8012654:	3708      	adds	r7, #8
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
	...

0801265c <_Z41__static_initialization_and_destruction_0ii>:
 801265c:	b580      	push	{r7, lr}
 801265e:	b084      	sub	sp, #16
 8012660:	af02      	add	r7, sp, #8
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6039      	str	r1, [r7, #0]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2b01      	cmp	r3, #1
 801266a:	d119      	bne.n	80126a0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012672:	4293      	cmp	r3, r2
 8012674:	d114      	bne.n	80126a0 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8012676:	4818      	ldr	r0, [pc, #96]	; (80126d8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012678:	f7ff fed0 	bl	801241c <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 801267c:	4817      	ldr	r0, [pc, #92]	; (80126dc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801267e:	f7ff f965 	bl	801194c <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8012682:	4817      	ldr	r0, [pc, #92]	; (80126e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012684:	f008 fdcc 	bl	801b220 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8012688:	f44f 7388 	mov.w	r3, #272	; 0x110
 801268c:	9301      	str	r3, [sp, #4]
 801268e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012692:	9300      	str	r3, [sp, #0]
 8012694:	4b10      	ldr	r3, [pc, #64]	; (80126d8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012696:	4a12      	ldr	r2, [pc, #72]	; (80126e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012698:	4910      	ldr	r1, [pc, #64]	; (80126dc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801269a:	4812      	ldr	r0, [pc, #72]	; (80126e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801269c:	f7ff fe92 	bl	80123c4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d113      	bne.n	80126ce <_Z41__static_initialization_and_destruction_0ii+0x72>
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d10e      	bne.n	80126ce <_Z41__static_initialization_and_destruction_0ii+0x72>
 80126b0:	480c      	ldr	r0, [pc, #48]	; (80126e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80126b2:	f7fe ff17 	bl	80114e4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80126b6:	480c      	ldr	r0, [pc, #48]	; (80126e8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80126b8:	f7fb ff16 	bl	800e4e8 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80126bc:	4808      	ldr	r0, [pc, #32]	; (80126e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80126be:	f7ff fe43 	bl	8012348 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80126c2:	4806      	ldr	r0, [pc, #24]	; (80126dc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80126c4:	f7ff f96c 	bl	80119a0 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80126c8:	4803      	ldr	r0, [pc, #12]	; (80126d8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80126ca:	f7fe fc81 	bl	8010fd0 <_ZN20STM32TouchControllerD1Ev>
}
 80126ce:	bf00      	nop
 80126d0:	3708      	adds	r7, #8
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
 80126d6:	bf00      	nop
 80126d8:	2000a760 	.word	0x2000a760
 80126dc:	2000a764 	.word	0x2000a764
 80126e0:	2000b384 	.word	0x2000b384
 80126e4:	2000b3e0 	.word	0x2000b3e0
 80126e8:	2000003c 	.word	0x2000003c

080126ec <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 80126ec:	b480      	push	{r7}
 80126ee:	b083      	sub	sp, #12
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80126f4:	2301      	movs	r3, #1
    }
 80126f6:	4618      	mov	r0, r3
 80126f8:	370c      	adds	r7, #12
 80126fa:	46bd      	mov	sp, r7
 80126fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012700:	4770      	bx	lr

08012702 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8012702:	b480      	push	{r7}
 8012704:	b083      	sub	sp, #12
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801270a:	230c      	movs	r3, #12
    }
 801270c:	4618      	mov	r0, r3
 801270e:	370c      	adds	r7, #12
 8012710:	46bd      	mov	sp, r7
 8012712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012716:	4770      	bx	lr

08012718 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8012718:	b480      	push	{r7}
 801271a:	b083      	sub	sp, #12
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	460b      	mov	r3, r1
 8012722:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012724:	887a      	ldrh	r2, [r7, #2]
 8012726:	4613      	mov	r3, r2
 8012728:	005b      	lsls	r3, r3, #1
 801272a:	4413      	add	r3, r2
 801272c:	009b      	lsls	r3, r3, #2
 801272e:	3308      	adds	r3, #8
 8012730:	687a      	ldr	r2, [r7, #4]
 8012732:	4413      	add	r3, r2
    }
 8012734:	4618      	mov	r0, r3
 8012736:	370c      	adds	r7, #12
 8012738:	46bd      	mov	sp, r7
 801273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273e:	4770      	bx	lr

08012740 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8012740:	b480      	push	{r7}
 8012742:	b083      	sub	sp, #12
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	460b      	mov	r3, r1
 801274a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801274c:	887a      	ldrh	r2, [r7, #2]
 801274e:	4613      	mov	r3, r2
 8012750:	005b      	lsls	r3, r3, #1
 8012752:	4413      	add	r3, r2
 8012754:	009b      	lsls	r3, r3, #2
 8012756:	3308      	adds	r3, #8
 8012758:	687a      	ldr	r2, [r7, #4]
 801275a:	4413      	add	r3, r2
    }
 801275c:	4618      	mov	r0, r3
 801275e:	370c      	adds	r7, #12
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr

08012768 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8012768:	b480      	push	{r7}
 801276a:	b083      	sub	sp, #12
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012770:	2301      	movs	r3, #1
    }
 8012772:	4618      	mov	r0, r3
 8012774:	370c      	adds	r7, #12
 8012776:	46bd      	mov	sp, r7
 8012778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277c:	4770      	bx	lr

0801277e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801277e:	b480      	push	{r7}
 8012780:	b083      	sub	sp, #12
 8012782:	af00      	add	r7, sp, #0
 8012784:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8012786:	f242 0314 	movw	r3, #8212	; 0x2014
    }
 801278a:	4618      	mov	r0, r3
 801278c:	370c      	adds	r7, #12
 801278e:	46bd      	mov	sp, r7
 8012790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012794:	4770      	bx	lr

08012796 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8012796:	b480      	push	{r7}
 8012798:	b083      	sub	sp, #12
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
 801279e:	460b      	mov	r3, r1
 80127a0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80127a2:	887b      	ldrh	r3, [r7, #2]
 80127a4:	f242 0214 	movw	r2, #8212	; 0x2014
 80127a8:	fb02 f303 	mul.w	r3, r2, r3
 80127ac:	3308      	adds	r3, #8
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	4413      	add	r3, r2
    }
 80127b2:	4618      	mov	r0, r3
 80127b4:	370c      	adds	r7, #12
 80127b6:	46bd      	mov	sp, r7
 80127b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127bc:	4770      	bx	lr

080127be <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80127be:	b480      	push	{r7}
 80127c0:	b083      	sub	sp, #12
 80127c2:	af00      	add	r7, sp, #0
 80127c4:	6078      	str	r0, [r7, #4]
 80127c6:	460b      	mov	r3, r1
 80127c8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80127ca:	887b      	ldrh	r3, [r7, #2]
 80127cc:	f242 0214 	movw	r2, #8212	; 0x2014
 80127d0:	fb02 f303 	mul.w	r3, r2, r3
 80127d4:	3308      	adds	r3, #8
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	4413      	add	r3, r2
    }
 80127da:	4618      	mov	r0, r3
 80127dc:	370c      	adds	r7, #12
 80127de:	46bd      	mov	sp, r7
 80127e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e4:	4770      	bx	lr

080127e6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80127e6:	b480      	push	{r7}
 80127e8:	b083      	sub	sp, #12
 80127ea:	af00      	add	r7, sp, #0
 80127ec:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80127ee:	2301      	movs	r3, #1
    }
 80127f0:	4618      	mov	r0, r3
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr

080127fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80127fc:	b480      	push	{r7}
 80127fe:	b083      	sub	sp, #12
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8012804:	2310      	movs	r3, #16
    }
 8012806:	4618      	mov	r0, r3
 8012808:	370c      	adds	r7, #12
 801280a:	46bd      	mov	sp, r7
 801280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012810:	4770      	bx	lr

08012812 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8012812:	b480      	push	{r7}
 8012814:	b083      	sub	sp, #12
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
 801281a:	460b      	mov	r3, r1
 801281c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801281e:	887b      	ldrh	r3, [r7, #2]
 8012820:	011b      	lsls	r3, r3, #4
 8012822:	3308      	adds	r3, #8
 8012824:	687a      	ldr	r2, [r7, #4]
 8012826:	4413      	add	r3, r2
    }
 8012828:	4618      	mov	r0, r3
 801282a:	370c      	adds	r7, #12
 801282c:	46bd      	mov	sp, r7
 801282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012832:	4770      	bx	lr

08012834 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8012834:	b480      	push	{r7}
 8012836:	b083      	sub	sp, #12
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	460b      	mov	r3, r1
 801283e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012840:	887b      	ldrh	r3, [r7, #2]
 8012842:	011b      	lsls	r3, r3, #4
 8012844:	3308      	adds	r3, #8
 8012846:	687a      	ldr	r2, [r7, #4]
 8012848:	4413      	add	r3, r2
    }
 801284a:	4618      	mov	r0, r3
 801284c:	370c      	adds	r7, #12
 801284e:	46bd      	mov	sp, r7
 8012850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012854:	4770      	bx	lr

08012856 <_GLOBAL__sub_I_touchgfx_init>:
 8012856:	b580      	push	{r7, lr}
 8012858:	af00      	add	r7, sp, #0
 801285a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801285e:	2001      	movs	r0, #1
 8012860:	f7ff fefc 	bl	801265c <_Z41__static_initialization_and_destruction_0ii>
 8012864:	bd80      	pop	{r7, pc}

08012866 <_GLOBAL__sub_D_touchgfx_init>:
 8012866:	b580      	push	{r7, lr}
 8012868:	af00      	add	r7, sp, #0
 801286a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801286e:	2000      	movs	r0, #0
 8012870:	f7ff fef4 	bl	801265c <_Z41__static_initialization_and_destruction_0ii>
 8012874:	bd80      	pop	{r7, pc}

08012876 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8012876:	b580      	push	{r7, lr}
 8012878:	b082      	sub	sp, #8
 801287a:	af00      	add	r7, sp, #0
 801287c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	3318      	adds	r3, #24
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	4798      	blx	r3
    }
 801288a:	bf00      	nop
 801288c:	3708      	adds	r7, #8
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}

08012892 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8012892:	b480      	push	{r7}
 8012894:	b083      	sub	sp, #12
 8012896:	af00      	add	r7, sp, #0
 8012898:	6078      	str	r0, [r7, #4]
 801289a:	460b      	mov	r3, r1
 801289c:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	78fa      	ldrb	r2, [r7, #3]
 80128a2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80128a6:	bf00      	nop
 80128a8:	370c      	adds	r7, #12
 80128aa:	46bd      	mov	sp, r7
 80128ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b0:	4770      	bx	lr

080128b2 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80128b2:	b480      	push	{r7}
 80128b4:	b083      	sub	sp, #12
 80128b6:	af00      	add	r7, sp, #0
 80128b8:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80128c0:	3301      	adds	r3, #1
 80128c2:	b2da      	uxtb	r2, r3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80128ca:	bf00      	nop
 80128cc:	370c      	adds	r7, #12
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr
	...

080128d8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	460b      	mov	r3, r1
 80128e2:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80128e4:	78fb      	ldrb	r3, [r7, #3]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d002      	beq.n	80128f0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80128ea:	78fb      	ldrb	r3, [r7, #3]
 80128ec:	2b02      	cmp	r3, #2
 80128ee:	d105      	bne.n	80128fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	78fa      	ldrb	r2, [r7, #3]
 80128f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80128f8:	2301      	movs	r3, #1
 80128fa:	e027      	b.n	801294c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80128fc:	78fb      	ldrb	r3, [r7, #3]
 80128fe:	2b01      	cmp	r3, #1
 8012900:	d123      	bne.n	801294a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012906:	2b00      	cmp	r3, #0
 8012908:	d014      	beq.n	8012934 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	3380      	adds	r3, #128	; 0x80
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	4798      	blx	r3
 8012916:	4603      	mov	r3, r0
 8012918:	461a      	mov	r2, r3
 801291a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801291e:	429a      	cmp	r2, r3
 8012920:	d008      	beq.n	8012934 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8012922:	4b0c      	ldr	r3, [pc, #48]	; (8012954 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	f083 0301 	eor.w	r3, r3, #1
 801292a:	b2db      	uxtb	r3, r3
 801292c:	2b00      	cmp	r3, #0
 801292e:	d001      	beq.n	8012934 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8012930:	2301      	movs	r3, #1
 8012932:	e000      	b.n	8012936 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8012934:	2300      	movs	r3, #0
 8012936:	2b00      	cmp	r3, #0
 8012938:	d005      	beq.n	8012946 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	78fa      	ldrb	r2, [r7, #3]
 801293e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8012942:	2301      	movs	r3, #1
 8012944:	e002      	b.n	801294c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8012946:	2300      	movs	r3, #0
 8012948:	e000      	b.n	801294c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801294a:	2300      	movs	r3, #0
    }
 801294c:	4618      	mov	r0, r3
 801294e:	3708      	adds	r7, #8
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}
 8012954:	2000b466 	.word	0x2000b466

08012958 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8012958:	b480      	push	{r7}
 801295a:	b083      	sub	sp, #12
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	683a      	ldr	r2, [r7, #0]
 8012966:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8012968:	bf00      	nop
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <__NVIC_EnableIRQ>:
{
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	4603      	mov	r3, r0
 801297c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012982:	2b00      	cmp	r3, #0
 8012984:	db0d      	blt.n	80129a2 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801298a:	b2db      	uxtb	r3, r3
 801298c:	f003 021f 	and.w	r2, r3, #31
 8012990:	4907      	ldr	r1, [pc, #28]	; (80129b0 <__NVIC_EnableIRQ+0x3c>)
 8012992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012996:	095b      	lsrs	r3, r3, #5
 8012998:	2001      	movs	r0, #1
 801299a:	fa00 f202 	lsl.w	r2, r0, r2
 801299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80129a2:	bf00      	nop
 80129a4:	370c      	adds	r7, #12
 80129a6:	46bd      	mov	sp, r7
 80129a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop
 80129b0:	e000e100 	.word	0xe000e100

080129b4 <__NVIC_DisableIRQ>:
{
 80129b4:	b480      	push	{r7}
 80129b6:	b083      	sub	sp, #12
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	4603      	mov	r3, r0
 80129bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80129be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	db12      	blt.n	80129ec <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80129c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80129ca:	b2db      	uxtb	r3, r3
 80129cc:	f003 021f 	and.w	r2, r3, #31
 80129d0:	4909      	ldr	r1, [pc, #36]	; (80129f8 <__NVIC_DisableIRQ+0x44>)
 80129d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80129d6:	095b      	lsrs	r3, r3, #5
 80129d8:	2001      	movs	r0, #1
 80129da:	fa00 f202 	lsl.w	r2, r0, r2
 80129de:	3320      	adds	r3, #32
 80129e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80129e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80129e8:	f3bf 8f6f 	isb	sy
}
 80129ec:	bf00      	nop
 80129ee:	370c      	adds	r7, #12
 80129f0:	46bd      	mov	sp, r7
 80129f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f6:	4770      	bx	lr
 80129f8:	e000e100 	.word	0xe000e100

080129fc <__NVIC_SetPriority>:
{
 80129fc:	b480      	push	{r7}
 80129fe:	b083      	sub	sp, #12
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	4603      	mov	r3, r0
 8012a04:	6039      	str	r1, [r7, #0]
 8012a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	db0c      	blt.n	8012a2a <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	b2db      	uxtb	r3, r3
 8012a14:	4a0e      	ldr	r2, [pc, #56]	; (8012a50 <__NVIC_SetPriority+0x54>)
 8012a16:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8012a1a:	4608      	mov	r0, r1
 8012a1c:	011b      	lsls	r3, r3, #4
 8012a1e:	b2d9      	uxtb	r1, r3
 8012a20:	1813      	adds	r3, r2, r0
 8012a22:	460a      	mov	r2, r1
 8012a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012a28:	e00c      	b.n	8012a44 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	b2da      	uxtb	r2, r3
 8012a2e:	4909      	ldr	r1, [pc, #36]	; (8012a54 <__NVIC_SetPriority+0x58>)
 8012a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a34:	b2db      	uxtb	r3, r3
 8012a36:	f003 030f 	and.w	r3, r3, #15
 8012a3a:	3b04      	subs	r3, #4
 8012a3c:	0112      	lsls	r2, r2, #4
 8012a3e:	b2d2      	uxtb	r2, r2
 8012a40:	440b      	add	r3, r1
 8012a42:	761a      	strb	r2, [r3, #24]
}
 8012a44:	bf00      	nop
 8012a46:	370c      	adds	r7, #12
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4e:	4770      	bx	lr
 8012a50:	e000e100 	.word	0xe000e100
 8012a54:	e000ed00 	.word	0xe000ed00

08012a58 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8012a58:	b5b0      	push	{r4, r5, r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	4618      	mov	r0, r3
 8012a64:	f001 f86a 	bl	8013b3c <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8012a68:	687d      	ldr	r5, [r7, #4]
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	334c      	adds	r3, #76	; 0x4c
 8012a70:	681c      	ldr	r4, [r3, #0]
 8012a72:	f003 ff21 	bl	80168b8 <_ZN8touchgfx11Application11getInstanceEv>
 8012a76:	4603      	mov	r3, r0
 8012a78:	4619      	mov	r1, r3
 8012a7a:	4628      	mov	r0, r5
 8012a7c:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	490d      	ldr	r1, [pc, #52]	; (8012ab8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7ff ff68 	bl	8012958 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2101      	movs	r1, #1
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f7ff ff23 	bl	80128d8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	3374      	adds	r3, #116	; 0x74
 8012a9a:	681c      	ldr	r4, [r3, #0]
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8012aa4:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2101      	movs	r1, #1
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7ff fef1 	bl	8012892 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8012ab0:	bf00      	nop
 8012ab2:	3708      	adds	r7, #8
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ab8:	0801167d 	.word	0x0801167d

08012abc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b082      	sub	sp, #8
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8012ac4:	2109      	movs	r1, #9
 8012ac6:	205a      	movs	r0, #90	; 0x5a
 8012ac8:	f7ff ff98 	bl	80129fc <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8012acc:	2109      	movs	r1, #9
 8012ace:	2058      	movs	r0, #88	; 0x58
 8012ad0:	f7ff ff94 	bl	80129fc <__NVIC_SetPriority>
}
 8012ad4:	bf00      	nop
 8012ad6:	3708      	adds	r7, #8
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b082      	sub	sp, #8
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8012ae4:	205a      	movs	r0, #90	; 0x5a
 8012ae6:	f7ff ff45 	bl	8012974 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8012aea:	2058      	movs	r0, #88	; 0x58
 8012aec:	f7ff ff42 	bl	8012974 <__NVIC_EnableIRQ>
}
 8012af0:	bf00      	nop
 8012af2:	3708      	adds	r7, #8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012b00:	205a      	movs	r0, #90	; 0x5a
 8012b02:	f7ff ff57 	bl	80129b4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8012b06:	2058      	movs	r0, #88	; 0x58
 8012b08:	f7ff ff54 	bl	80129b4 <__NVIC_DisableIRQ>
}
 8012b0c:	bf00      	nop
 8012b0e:	3708      	adds	r7, #8
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8012b14:	b480      	push	{r7}
 8012b16:	b083      	sub	sp, #12
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8012b1c:	4b11      	ldr	r3, [pc, #68]	; (8012b64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012b1e:	68db      	ldr	r3, [r3, #12]
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	3b01      	subs	r3, #1
 8012b2a:	b29a      	uxth	r2, r3
 8012b2c:	4b0e      	ldr	r3, [pc, #56]	; (8012b68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8012b2e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8012b30:	4b0c      	ldr	r3, [pc, #48]	; (8012b64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012b32:	691b      	ldr	r3, [r3, #16]
 8012b34:	b29b      	uxth	r3, r3
 8012b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	3b01      	subs	r3, #1
 8012b3e:	b29a      	uxth	r2, r3
 8012b40:	4b0a      	ldr	r3, [pc, #40]	; (8012b6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8012b42:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8012b44:	4b08      	ldr	r3, [pc, #32]	; (8012b68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8012b46:	881a      	ldrh	r2, [r3, #0]
 8012b48:	4b06      	ldr	r3, [pc, #24]	; (8012b64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012b4a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8012b4c:	4b05      	ldr	r3, [pc, #20]	; (8012b64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b50:	4a04      	ldr	r2, [pc, #16]	; (8012b64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012b52:	f043 0301 	orr.w	r3, r3, #1
 8012b56:	6353      	str	r3, [r2, #52]	; 0x34
}
 8012b58:	bf00      	nop
 8012b5a:	370c      	adds	r7, #12
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr
 8012b64:	40016800 	.word	0x40016800
 8012b68:	2000b458 	.word	0x2000b458
 8012b6c:	2000b45a 	.word	0x2000b45a

08012b70 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8012b70:	b480      	push	{r7}
 8012b72:	b083      	sub	sp, #12
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8012b78:	4b03      	ldr	r3, [pc, #12]	; (8012b88 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8012b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	370c      	adds	r7, #12
 8012b80:	46bd      	mov	sp, r7
 8012b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b86:	4770      	bx	lr
 8012b88:	40016884 	.word	0x40016884

08012b8c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8012b96:	4a06      	ldr	r2, [pc, #24]	; (8012bb0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8012b9c:	4b05      	ldr	r3, [pc, #20]	; (8012bb4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012ba2:	bf00      	nop
 8012ba4:	370c      	adds	r7, #12
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr
 8012bae:	bf00      	nop
 8012bb0:	40016884 	.word	0x40016884
 8012bb4:	40016800 	.word	0x40016800

08012bb8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6839      	ldr	r1, [r7, #0]
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f000 fcc8 	bl	801355c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8012bcc:	bf00      	nop
 8012bce:	3708      	adds	r7, #8
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}

08012bd4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	b085      	sub	sp, #20
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8012bdc:	4b0d      	ldr	r3, [pc, #52]	; (8012c14 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8012bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012be0:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8012be2:	4b0c      	ldr	r3, [pc, #48]	; (8012c14 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8012be4:	68db      	ldr	r3, [r3, #12]
 8012be6:	b29b      	uxth	r3, r3
 8012be8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	3301      	adds	r3, #1
 8012bf0:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8012bf2:	89fa      	ldrh	r2, [r7, #14]
 8012bf4:	89bb      	ldrh	r3, [r7, #12]
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d201      	bcs.n	8012bfe <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	e003      	b.n	8012c06 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8012bfe:	89fa      	ldrh	r2, [r7, #14]
 8012c00:	89bb      	ldrh	r3, [r7, #12]
 8012c02:	1ad3      	subs	r3, r2, r3
 8012c04:	b29b      	uxth	r3, r3
    }
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3714      	adds	r7, #20
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop
 8012c14:	40016800 	.word	0x40016800

08012c18 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8012c20:	4b1a      	ldr	r3, [pc, #104]	; (8012c8c <HAL_LTDC_LineEventCallback+0x74>)
 8012c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c24:	4a1a      	ldr	r2, [pc, #104]	; (8012c90 <HAL_LTDC_LineEventCallback+0x78>)
 8012c26:	8812      	ldrh	r2, [r2, #0]
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	bf0c      	ite	eq
 8012c2c:	2301      	moveq	r3, #1
 8012c2e:	2300      	movne	r3, #0
 8012c30:	b2db      	uxtb	r3, r3
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d017      	beq.n	8012c66 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8012c36:	4b17      	ldr	r3, [pc, #92]	; (8012c94 <HAL_LTDC_LineEventCallback+0x7c>)
 8012c38:	881b      	ldrh	r3, [r3, #0]
 8012c3a:	4619      	mov	r1, r3
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7f2 fc67 	bl	8005510 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8012c42:	f7fc f811 	bl	800ec68 <_ZN8touchgfx3HAL11getInstanceEv>
 8012c46:	4603      	mov	r3, r0
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7ff fe32 	bl	80128b2 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8012c4e:	f7fe fcd7 	bl	8011600 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8012c52:	f7fc f809 	bl	800ec68 <_ZN8touchgfx3HAL11getInstanceEv>
 8012c56:	4603      	mov	r3, r0
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f001 f9f7 	bl	801404c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8012c5e:	2000      	movs	r0, #0
 8012c60:	f7fe f9d8 	bl	8011014 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8012c64:	e00e      	b.n	8012c84 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8012c66:	4b0a      	ldr	r3, [pc, #40]	; (8012c90 <HAL_LTDC_LineEventCallback+0x78>)
 8012c68:	881b      	ldrh	r3, [r3, #0]
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f7f2 fc4f 	bl	8005510 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8012c72:	2000      	movs	r0, #0
 8012c74:	f7fe f9d9 	bl	801102a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8012c78:	f7fb fff6 	bl	800ec68 <_ZN8touchgfx3HAL11getInstanceEv>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7ff fdf9 	bl	8012876 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8012c84:	bf00      	nop
 8012c86:	3708      	adds	r7, #8
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}
 8012c8c:	40016800 	.word	0x40016800
 8012c90:	2000b458 	.word	0x2000b458
 8012c94:	2000b45a 	.word	0x2000b45a

08012c98 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012c98:	8880      	ldrh	r0, [r0, #4]
 8012c9a:	4770      	bx	lr

08012c9c <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	8083      	strh	r3, [r0, #4]
 8012ca0:	4770      	bx	lr
	...

08012ca4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ca6:	6803      	ldr	r3, [r0, #0]
 8012ca8:	460e      	mov	r6, r1
 8012caa:	2100      	movs	r1, #0
 8012cac:	4605      	mov	r5, r0
 8012cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cb0:	4798      	blx	r3
 8012cb2:	4604      	mov	r4, r0
 8012cb4:	682b      	ldr	r3, [r5, #0]
 8012cb6:	4628      	mov	r0, r5
 8012cb8:	1b34      	subs	r4, r6, r4
 8012cba:	6a1b      	ldr	r3, [r3, #32]
 8012cbc:	b2a4      	uxth	r4, r4
 8012cbe:	4798      	blx	r3
 8012cc0:	88ab      	ldrh	r3, [r5, #4]
 8012cc2:	fbb4 f4f0 	udiv	r4, r4, r0
 8012cc6:	42a3      	cmp	r3, r4
 8012cc8:	d805      	bhi.n	8012cd6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8012cca:	4b0e      	ldr	r3, [pc, #56]	; (8012d04 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8012ccc:	211e      	movs	r1, #30
 8012cce:	4a0e      	ldr	r2, [pc, #56]	; (8012d08 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8012cd0:	480e      	ldr	r0, [pc, #56]	; (8012d0c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8012cd2:	f00f fde5 	bl	80228a0 <__assert_func>
 8012cd6:	682b      	ldr	r3, [r5, #0]
 8012cd8:	2100      	movs	r1, #0
 8012cda:	4628      	mov	r0, r5
 8012cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cde:	4798      	blx	r3
 8012ce0:	682b      	ldr	r3, [r5, #0]
 8012ce2:	4607      	mov	r7, r0
 8012ce4:	4628      	mov	r0, r5
 8012ce6:	6a1b      	ldr	r3, [r3, #32]
 8012ce8:	4798      	blx	r3
 8012cea:	1bf3      	subs	r3, r6, r7
 8012cec:	b29b      	uxth	r3, r3
 8012cee:	fbb3 f2f0 	udiv	r2, r3, r0
 8012cf2:	fb02 3010 	mls	r0, r2, r0, r3
 8012cf6:	b118      	cbz	r0, 8012d00 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8012cf8:	4b05      	ldr	r3, [pc, #20]	; (8012d10 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8012cfa:	211f      	movs	r1, #31
 8012cfc:	4a02      	ldr	r2, [pc, #8]	; (8012d08 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8012cfe:	e7e7      	b.n	8012cd0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8012d00:	4620      	mov	r0, r4
 8012d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d04:	080248c8 	.word	0x080248c8
 8012d08:	08024a36 	.word	0x08024a36
 8012d0c:	080248dd 	.word	0x080248dd
 8012d10:	0802490b 	.word	0x0802490b

08012d14 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012d14:	b538      	push	{r3, r4, r5, lr}
 8012d16:	6803      	ldr	r3, [r0, #0]
 8012d18:	460d      	mov	r5, r1
 8012d1a:	4604      	mov	r4, r0
 8012d1c:	6a1b      	ldr	r3, [r3, #32]
 8012d1e:	4798      	blx	r3
 8012d20:	4285      	cmp	r5, r0
 8012d22:	d905      	bls.n	8012d30 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8012d24:	4b0c      	ldr	r3, [pc, #48]	; (8012d58 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8012d26:	212f      	movs	r1, #47	; 0x2f
 8012d28:	4a0c      	ldr	r2, [pc, #48]	; (8012d5c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8012d2a:	480d      	ldr	r0, [pc, #52]	; (8012d60 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8012d2c:	f00f fdb8 	bl	80228a0 <__assert_func>
 8012d30:	6823      	ldr	r3, [r4, #0]
 8012d32:	4620      	mov	r0, r4
 8012d34:	88a5      	ldrh	r5, [r4, #4]
 8012d36:	69db      	ldr	r3, [r3, #28]
 8012d38:	4798      	blx	r3
 8012d3a:	4285      	cmp	r5, r0
 8012d3c:	d303      	bcc.n	8012d46 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8012d3e:	4b09      	ldr	r3, [pc, #36]	; (8012d64 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8012d40:	2130      	movs	r1, #48	; 0x30
 8012d42:	4a06      	ldr	r2, [pc, #24]	; (8012d5c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8012d44:	e7f1      	b.n	8012d2a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8012d46:	6823      	ldr	r3, [r4, #0]
 8012d48:	4620      	mov	r0, r4
 8012d4a:	88a1      	ldrh	r1, [r4, #4]
 8012d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d4e:	4798      	blx	r3
 8012d50:	88a3      	ldrh	r3, [r4, #4]
 8012d52:	3301      	adds	r3, #1
 8012d54:	80a3      	strh	r3, [r4, #4]
 8012d56:	bd38      	pop	{r3, r4, r5, pc}
 8012d58:	08024985 	.word	0x08024985
 8012d5c:	08024a79 	.word	0x08024a79
 8012d60:	080248dd 	.word	0x080248dd
 8012d64:	0802499c 	.word	0x0802499c

08012d68 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012d68:	b570      	push	{r4, r5, r6, lr}
 8012d6a:	6803      	ldr	r3, [r0, #0]
 8012d6c:	4616      	mov	r6, r2
 8012d6e:	4604      	mov	r4, r0
 8012d70:	460d      	mov	r5, r1
 8012d72:	6a1b      	ldr	r3, [r3, #32]
 8012d74:	4798      	blx	r3
 8012d76:	4286      	cmp	r6, r0
 8012d78:	d905      	bls.n	8012d86 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8012d7a:	4b06      	ldr	r3, [pc, #24]	; (8012d94 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8012d7c:	2139      	movs	r1, #57	; 0x39
 8012d7e:	4a06      	ldr	r2, [pc, #24]	; (8012d98 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8012d80:	4806      	ldr	r0, [pc, #24]	; (8012d9c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8012d82:	f00f fd8d 	bl	80228a0 <__assert_func>
 8012d86:	6823      	ldr	r3, [r4, #0]
 8012d88:	4629      	mov	r1, r5
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d92:	4718      	bx	r3
 8012d94:	08024985 	.word	0x08024985
 8012d98:	080249ec 	.word	0x080249ec
 8012d9c:	080248dd 	.word	0x080248dd

08012da0 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012da0:	4770      	bx	lr
	...

08012da4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012da4:	4a02      	ldr	r2, [pc, #8]	; (8012db0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012da6:	6002      	str	r2, [r0, #0]
 8012da8:	2200      	movs	r2, #0
 8012daa:	8082      	strh	r2, [r0, #4]
 8012dac:	4770      	bx	lr
 8012dae:	bf00      	nop
 8012db0:	080249c0 	.word	0x080249c0

08012db4 <_ZN8touchgfx14CircleProgress9setCenterEii>:
 8012db4:	0149      	lsls	r1, r1, #5
 8012db6:	0152      	lsls	r2, r2, #5
 8012db8:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 8012dbc:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
 8012dc0:	4770      	bx	lr

08012dc2 <_ZNK8touchgfx14CircleProgress9getCenterERiS1_>:
 8012dc2:	b530      	push	{r4, r5, lr}
 8012dc4:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8012dc8:	2520      	movs	r5, #32
 8012dca:	fb94 f4f5 	sdiv	r4, r4, r5
 8012dce:	600c      	str	r4, [r1, #0]
 8012dd0:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 8012dd4:	fb93 f3f5 	sdiv	r3, r3, r5
 8012dd8:	6013      	str	r3, [r2, #0]
 8012dda:	bd30      	pop	{r4, r5, pc}

08012ddc <_ZN8touchgfx14CircleProgress9setRadiusEi>:
 8012ddc:	0149      	lsls	r1, r1, #5
 8012dde:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
 8012de2:	4770      	bx	lr

08012de4 <_ZNK8touchgfx14CircleProgress9getRadiusEv>:
 8012de4:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8012de8:	2320      	movs	r3, #32
 8012dea:	fb90 f0f3 	sdiv	r0, r0, r3
 8012dee:	4770      	bx	lr

08012df0 <_ZN8touchgfx14CircleProgress12setLineWidthEi>:
 8012df0:	0149      	lsls	r1, r1, #5
 8012df2:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
 8012df6:	4770      	bx	lr

08012df8 <_ZNK8touchgfx14CircleProgress12getLineWidthEv>:
 8012df8:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 8012dfc:	2320      	movs	r3, #32
 8012dfe:	fb90 f0f3 	sdiv	r0, r0, r3
 8012e02:	4770      	bx	lr

08012e04 <_ZNK8touchgfx14CircleProgress13getStartAngleEv>:
 8012e04:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 8012e08:	2320      	movs	r3, #32
 8012e0a:	fb90 f0f3 	sdiv	r0, r0, r3
 8012e0e:	b200      	sxth	r0, r0
 8012e10:	4770      	bx	lr

08012e12 <_ZNK8touchgfx14CircleProgress11getEndAngleEv>:
 8012e12:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 8012e16:	4770      	bx	lr

08012e18 <_ZN8touchgfx14CircleProgress8setAlphaEh>:
 8012e18:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
 8012e1c:	4770      	bx	lr

08012e1e <_ZNK8touchgfx14CircleProgress8getAlphaEv>:
 8012e1e:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
 8012e22:	4770      	bx	lr

08012e24 <_ZN8touchgfx14CircleProgress10setPainterERNS_15AbstractPainterE>:
 8012e24:	3090      	adds	r0, #144	; 0x90
 8012e26:	f002 b99f 	b.w	8015168 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

08012e2a <_ZN8touchgfx14CircleProgress15setCapPrecisionEi>:
 8012e2a:	3090      	adds	r0, #144	; 0x90
 8012e2c:	f001 bdb8 	b.w	80149a0 <_ZN8touchgfx6Circle15setCapPrecisionEi>

08012e30 <_ZNK8touchgfx14CircleProgress15getCapPrecisionEv>:
 8012e30:	3090      	adds	r0, #144	; 0x90
 8012e32:	f001 bdbe 	b.w	80149b2 <_ZNK8touchgfx6Circle15getCapPrecisionEv>
	...

08012e38 <_ZN8touchgfx14CircleProgressD1Ev>:
 8012e38:	4b06      	ldr	r3, [pc, #24]	; (8012e54 <_ZN8touchgfx14CircleProgressD1Ev+0x1c>)
 8012e3a:	b510      	push	{r4, lr}
 8012e3c:	6003      	str	r3, [r0, #0]
 8012e3e:	4604      	mov	r4, r0
 8012e40:	4b05      	ldr	r3, [pc, #20]	; (8012e58 <_ZN8touchgfx14CircleProgressD1Ev+0x20>)
 8012e42:	f840 3f90 	str.w	r3, [r0, #144]!
 8012e46:	f002 fa6d 	bl	8015324 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	f000 f89e 	bl	8012f8c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8012e50:	4620      	mov	r0, r4
 8012e52:	bd10      	pop	{r4, pc}
 8012e54:	08024b24 	.word	0x08024b24
 8012e58:	08025a84 	.word	0x08025a84

08012e5c <_ZN8touchgfx14CircleProgressD0Ev>:
 8012e5c:	b510      	push	{r4, lr}
 8012e5e:	4604      	mov	r4, r0
 8012e60:	f7ff ffea 	bl	8012e38 <_ZN8touchgfx14CircleProgressD1Ev>
 8012e64:	21e0      	movs	r1, #224	; 0xe0
 8012e66:	4620      	mov	r0, r4
 8012e68:	f00f fcef 	bl	802284a <_ZdlPvj>
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	bd10      	pop	{r4, pc}

08012e70 <_ZN8touchgfx6Circle12updateArcEndINS_7CWRUtil2Q5EEEvT_>:
 8012e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e72:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8012e74:	4604      	mov	r4, r0
 8012e76:	9101      	str	r1, [sp, #4]
 8012e78:	4299      	cmp	r1, r3
 8012e7a:	d00b      	beq.n	8012e94 <_ZN8touchgfx6Circle12updateArcEndINS_7CWRUtil2Q5EEEvT_+0x24>
 8012e7c:	4601      	mov	r1, r0
 8012e7e:	aa01      	add	r2, sp, #4
 8012e80:	a802      	add	r0, sp, #8
 8012e82:	f001 ff9a 	bl	8014dba <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 8012e86:	9b01      	ldr	r3, [sp, #4]
 8012e88:	a902      	add	r1, sp, #8
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	6423      	str	r3, [r4, #64]	; 0x40
 8012e8e:	6823      	ldr	r3, [r4, #0]
 8012e90:	691b      	ldr	r3, [r3, #16]
 8012e92:	4798      	blx	r3
 8012e94:	b004      	add	sp, #16
 8012e96:	bd10      	pop	{r4, pc}

08012e98 <_ZN8touchgfx14CircleProgress28setProgressIndicatorPositionEssss>:
 8012e98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012e9c:	4617      	mov	r7, r2
 8012e9e:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	4604      	mov	r4, r0
 8012ea6:	460e      	mov	r6, r1
 8012ea8:	4698      	mov	r8, r3
 8012eaa:	4611      	mov	r1, r2
 8012eac:	9500      	str	r5, [sp, #0]
 8012eae:	3090      	adds	r0, #144	; 0x90
 8012eb0:	f7fc fbaa 	bl	800f608 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012eb4:	4643      	mov	r3, r8
 8012eb6:	463a      	mov	r2, r7
 8012eb8:	4631      	mov	r1, r6
 8012eba:	4620      	mov	r0, r4
 8012ebc:	9508      	str	r5, [sp, #32]
 8012ebe:	b002      	add	sp, #8
 8012ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ec4:	f000 b863 	b.w	8012f8e <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08012ec8 <_ZN8touchgfx14CircleProgress8setValueEi>:
 8012ec8:	b570      	push	{r4, r5, r6, lr}
 8012eca:	f8d0 60dc 	ldr.w	r6, [r0, #220]	; 0xdc
 8012ece:	4604      	mov	r4, r0
 8012ed0:	f8d0 50cc 	ldr.w	r5, [r0, #204]	; 0xcc
 8012ed4:	f000 f8a5 	bl	8013022 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8012ed8:	0176      	lsls	r6, r6, #5
 8012eda:	4620      	mov	r0, r4
 8012edc:	42b5      	cmp	r5, r6
 8012ede:	bfcc      	ite	gt
 8012ee0:	1ba9      	subgt	r1, r5, r6
 8012ee2:	1b71      	suble	r1, r6, r5
 8012ee4:	b289      	uxth	r1, r1
 8012ee6:	f000 f8f5 	bl	80130d4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8012eea:	42b5      	cmp	r5, r6
 8012eec:	4601      	mov	r1, r0
 8012eee:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8012ef2:	bfcc      	ite	gt
 8012ef4:	1a69      	subgt	r1, r5, r1
 8012ef6:	1949      	addle	r1, r1, r5
 8012ef8:	f7ff ffba 	bl	8012e70 <_ZN8touchgfx6Circle12updateArcEndINS_7CWRUtil2Q5EEEvT_>
 8012efc:	bd70      	pop	{r4, r5, r6, pc}
	...

08012f00 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii>:
 8012f00:	4291      	cmp	r1, r2
 8012f02:	b510      	push	{r4, lr}
 8012f04:	4604      	mov	r4, r0
 8012f06:	d105      	bne.n	8012f14 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii+0x14>
 8012f08:	4b0a      	ldr	r3, [pc, #40]	; (8012f34 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii+0x34>)
 8012f0a:	2155      	movs	r1, #85	; 0x55
 8012f0c:	4a0a      	ldr	r2, [pc, #40]	; (8012f38 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii+0x38>)
 8012f0e:	480b      	ldr	r0, [pc, #44]	; (8012f3c <_ZN8touchgfx14CircleProgress16setStartEndAngleEii+0x3c>)
 8012f10:	f00f fcc6 	bl	80228a0 <__assert_func>
 8012f14:	0149      	lsls	r1, r1, #5
 8012f16:	f8c0 20dc 	str.w	r2, [r0, #220]	; 0xdc
 8012f1a:	0153      	lsls	r3, r2, #5
 8012f1c:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
 8012f20:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
 8012f24:	f000 f88a 	bl	801303c <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 8012f28:	4601      	mov	r1, r0
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f30:	f7ff bfca 	b.w	8012ec8 <_ZN8touchgfx14CircleProgress8setValueEi>
 8012f34:	08024ab7 	.word	0x08024ab7
 8012f38:	08024c14 	.word	0x08024c14
 8012f3c:	08024ace 	.word	0x08024ace

08012f40 <_ZN8touchgfx14CircleProgressC1Ev>:
 8012f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f42:	4604      	mov	r4, r0
 8012f44:	f000 f8e6 	bl	8013114 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8012f48:	4b0f      	ldr	r3, [pc, #60]	; (8012f88 <_ZN8touchgfx14CircleProgressC1Ev+0x48>)
 8012f4a:	4625      	mov	r5, r4
 8012f4c:	f845 3b90 	str.w	r3, [r5], #144
 8012f50:	4628      	mov	r0, r5
 8012f52:	f001 fd0d 	bl	8014970 <_ZN8touchgfx6CircleC1Ev>
 8012f56:	4629      	mov	r1, r5
 8012f58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012f5c:	f000 f9b6 	bl	80132cc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012f60:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8012f64:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012f68:	4628      	mov	r0, r5
 8012f6a:	9200      	str	r2, [sp, #0]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	4611      	mov	r1, r2
 8012f70:	f7fc fb4a 	bl	800f608 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012f74:	4620      	mov	r0, r4
 8012f76:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012f7a:	2100      	movs	r1, #0
 8012f7c:	f7ff ffc0 	bl	8012f00 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii>
 8012f80:	4620      	mov	r0, r4
 8012f82:	b003      	add	sp, #12
 8012f84:	bd30      	pop	{r4, r5, pc}
 8012f86:	bf00      	nop
 8012f88:	08024b24 	.word	0x08024b24

08012f8c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8012f8c:	4770      	bx	lr

08012f8e <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8012f8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012f92:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8012f96:	4604      	mov	r4, r0
 8012f98:	460e      	mov	r6, r1
 8012f9a:	4698      	mov	r8, r3
 8012f9c:	9700      	str	r7, [sp, #0]
 8012f9e:	3058      	adds	r0, #88	; 0x58
 8012fa0:	4615      	mov	r5, r2
 8012fa2:	f7fc fb31 	bl	800f608 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012fa6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8012faa:	eb06 0308 	add.w	r3, r6, r8
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	eb05 0207 	add.w	r2, r5, r7
 8012fb4:	bfb8      	it	lt
 8012fb6:	8123      	strhlt	r3, [r4, #8]
 8012fb8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012fbc:	4293      	cmp	r3, r2
 8012fbe:	bfb8      	it	lt
 8012fc0:	8162      	strhlt	r2, [r4, #10]
 8012fc2:	b002      	add	sp, #8
 8012fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012fc8 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8012fc8:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8012fcc:	4770      	bx	lr

08012fce <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8012fce:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8012fd2:	4770      	bx	lr

08012fd4 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8012fd4:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8012fd8:	4770      	bx	lr

08012fda <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8012fda:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8012fde:	4770      	bx	lr

08012fe0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8012fe0:	b510      	push	{r4, lr}
 8012fe2:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8012fe6:	800c      	strh	r4, [r1, #0]
 8012fe8:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8012fec:	8011      	strh	r1, [r2, #0]
 8012fee:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8012ff2:	801a      	strh	r2, [r3, #0]
 8012ff4:	9b02      	ldr	r3, [sp, #8]
 8012ff6:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8012ffa:	801a      	strh	r2, [r3, #0]
 8012ffc:	bd10      	pop	{r4, pc}

08012ffe <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8012ffe:	b510      	push	{r4, lr}
 8013000:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8013004:	800c      	strh	r4, [r1, #0]
 8013006:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801300a:	8011      	strh	r1, [r2, #0]
 801300c:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8013010:	801a      	strh	r2, [r3, #0]
 8013012:	bd10      	pop	{r4, pc}

08013014 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8013014:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8013018:	800b      	strh	r3, [r1, #0]
 801301a:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801301e:	8013      	strh	r3, [r2, #0]
 8013020:	4770      	bx	lr

08013022 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8013022:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8013026:	4299      	cmp	r1, r3
 8013028:	bfb8      	it	lt
 801302a:	4619      	movlt	r1, r3
 801302c:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8013030:	4299      	cmp	r1, r3
 8013032:	bfa8      	it	ge
 8013034:	4619      	movge	r1, r3
 8013036:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 801303a:	4770      	bx	lr

0801303c <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801303c:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8013040:	4770      	bx	lr

08013042 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8013042:	b510      	push	{r4, lr}
 8013044:	4604      	mov	r4, r0
 8013046:	2190      	movs	r1, #144	; 0x90
 8013048:	f00f fbff 	bl	802284a <_ZdlPvj>
 801304c:	4620      	mov	r0, r4
 801304e:	bd10      	pop	{r4, pc}

08013050 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8013050:	b510      	push	{r4, lr}
 8013052:	4604      	mov	r4, r0
 8013054:	302c      	adds	r0, #44	; 0x2c
 8013056:	f002 fb3b 	bl	80156d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801305a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801305c:	8123      	strh	r3, [r4, #8]
 801305e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8013060:	8163      	strh	r3, [r4, #10]
 8013062:	bd10      	pop	{r4, pc}

08013064 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8013064:	4291      	cmp	r1, r2
 8013066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801306a:	4604      	mov	r4, r0
 801306c:	460e      	mov	r6, r1
 801306e:	4615      	mov	r5, r2
 8013070:	4698      	mov	r8, r3
 8013072:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8013076:	db05      	blt.n	8013084 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8013078:	4b12      	ldr	r3, [pc, #72]	; (80130c4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801307a:	214d      	movs	r1, #77	; 0x4d
 801307c:	4a12      	ldr	r2, [pc, #72]	; (80130c8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801307e:	4813      	ldr	r0, [pc, #76]	; (80130cc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8013080:	f00f fc0e 	bl	80228a0 <__assert_func>
 8013084:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8013088:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 801308c:	6803      	ldr	r3, [r0, #0]
 801308e:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8013092:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013096:	4798      	blx	r3
 8013098:	f1b8 0f00 	cmp.w	r8, #0
 801309c:	d10c      	bne.n	80130b8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 801309e:	1bad      	subs	r5, r5, r6
 80130a0:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 80130a4:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 80130a8:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 80130ac:	42bb      	cmp	r3, r7
 80130ae:	d806      	bhi.n	80130be <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 80130b0:	4b07      	ldr	r3, [pc, #28]	; (80130d0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 80130b2:	215a      	movs	r1, #90	; 0x5a
 80130b4:	4a04      	ldr	r2, [pc, #16]	; (80130c8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80130b6:	e7e2      	b.n	801307e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 80130b8:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 80130bc:	e7f2      	b.n	80130a4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 80130be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130c2:	bf00      	nop
 80130c4:	08024c56 	.word	0x08024c56
 80130c8:	08024d94 	.word	0x08024d94
 80130cc:	08024c60 	.word	0x08024c60
 80130d0:	08024cb7 	.word	0x08024cb7

080130d4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80130d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130d6:	4604      	mov	r4, r0
 80130d8:	460d      	mov	r5, r1
 80130da:	b1b9      	cbz	r1, 801310c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 80130dc:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 80130e0:	ab01      	add	r3, sp, #4
 80130e2:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 80130e6:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 80130ea:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 80130ee:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 80130f2:	1a12      	subs	r2, r2, r0
 80130f4:	1b89      	subs	r1, r1, r6
 80130f6:	1a38      	subs	r0, r7, r0
 80130f8:	f004 f94d 	bl	8017396 <_ZN8touchgfx6muldivElllRl>
 80130fc:	4629      	mov	r1, r5
 80130fe:	ab01      	add	r3, sp, #4
 8013100:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8013104:	4430      	add	r0, r6
 8013106:	f004 f946 	bl	8017396 <_ZN8touchgfx6muldivElllRl>
 801310a:	b285      	uxth	r5, r0
 801310c:	4628      	mov	r0, r5
 801310e:	b003      	add	sp, #12
 8013110:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08013114 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8013114:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013118:	4604      	mov	r4, r0
 801311a:	2600      	movs	r6, #0
 801311c:	f7fc fa26 	bl	800f56c <_ZN8touchgfx8DrawableC1Ev>
 8013120:	4b1b      	ldr	r3, [pc, #108]	; (8013190 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8013122:	4625      	mov	r5, r4
 8013124:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8013128:	af02      	add	r7, sp, #8
 801312a:	62a6      	str	r6, [r4, #40]	; 0x28
 801312c:	f845 3b2c 	str.w	r3, [r5], #44
 8013130:	4628      	mov	r0, r5
 8013132:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8013136:	f7fc fa19 	bl	800f56c <_ZN8touchgfx8DrawableC1Ev>
 801313a:	4b16      	ldr	r3, [pc, #88]	; (8013194 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 801313c:	4639      	mov	r1, r7
 801313e:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8013142:	4628      	mov	r0, r5
 8013144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013146:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801314a:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801314e:	f002 fabf 	bl	80156d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013152:	4638      	mov	r0, r7
 8013154:	f7fc fa0a 	bl	800f56c <_ZN8touchgfx8DrawableC1Ev>
 8013158:	4b0f      	ldr	r3, [pc, #60]	; (8013198 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 801315a:	4632      	mov	r2, r6
 801315c:	4631      	mov	r1, r6
 801315e:	65a3      	str	r3, [r4, #88]	; 0x58
 8013160:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8013164:	4628      	mov	r0, r5
 8013166:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801316a:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801316e:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8013172:	f7fc fa94 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
 8013176:	4629      	mov	r1, r5
 8013178:	4620      	mov	r0, r4
 801317a:	f000 f8a7 	bl	80132cc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801317e:	4620      	mov	r0, r4
 8013180:	4639      	mov	r1, r7
 8013182:	f000 f8a3 	bl	80132cc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013186:	4620      	mov	r0, r4
 8013188:	b002      	add	sp, #8
 801318a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801318e:	bf00      	nop
 8013190:	08024cdc 	.word	0x08024cdc
 8013194:	08025dac 	.word	0x08025dac
 8013198:	08024ec8 	.word	0x08024ec8

0801319c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801319c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801319e:	2000      	movs	r0, #0
 80131a0:	b12b      	cbz	r3, 80131ae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80131a2:	b920      	cbnz	r0, 80131ae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80131a4:	1a5a      	subs	r2, r3, r1
 80131a6:	699b      	ldr	r3, [r3, #24]
 80131a8:	4250      	negs	r0, r2
 80131aa:	4150      	adcs	r0, r2
 80131ac:	e7f8      	b.n	80131a0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80131ae:	4770      	bx	lr

080131b0 <_ZN8touchgfx9Container9removeAllEv>:
 80131b0:	2200      	movs	r2, #0
 80131b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80131b4:	b123      	cbz	r3, 80131c0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80131b6:	6999      	ldr	r1, [r3, #24]
 80131b8:	6281      	str	r1, [r0, #40]	; 0x28
 80131ba:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80131be:	e7f8      	b.n	80131b2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80131c0:	4770      	bx	lr

080131c2 <_ZN8touchgfx9Container6unlinkEv>:
 80131c2:	2300      	movs	r3, #0
 80131c4:	6283      	str	r3, [r0, #40]	; 0x28
 80131c6:	4770      	bx	lr

080131c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80131c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131cc:	461f      	mov	r7, r3
 80131ce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80131d2:	460d      	mov	r5, r1
 80131d4:	4616      	mov	r6, r2
 80131d6:	b103      	cbz	r3, 80131da <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80131d8:	6038      	str	r0, [r7, #0]
 80131da:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80131dc:	b314      	cbz	r4, 8013224 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80131de:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80131e2:	b1eb      	cbz	r3, 8013220 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80131e4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80131e8:	428d      	cmp	r5, r1
 80131ea:	db19      	blt.n	8013220 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80131ec:	b289      	uxth	r1, r1
 80131ee:	8923      	ldrh	r3, [r4, #8]
 80131f0:	440b      	add	r3, r1
 80131f2:	b21b      	sxth	r3, r3
 80131f4:	429d      	cmp	r5, r3
 80131f6:	da13      	bge.n	8013220 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80131f8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80131fc:	4296      	cmp	r6, r2
 80131fe:	db0f      	blt.n	8013220 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013200:	b292      	uxth	r2, r2
 8013202:	8963      	ldrh	r3, [r4, #10]
 8013204:	4413      	add	r3, r2
 8013206:	b21b      	sxth	r3, r3
 8013208:	429e      	cmp	r6, r3
 801320a:	da09      	bge.n	8013220 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801320c:	6823      	ldr	r3, [r4, #0]
 801320e:	1ab2      	subs	r2, r6, r2
 8013210:	1a69      	subs	r1, r5, r1
 8013212:	4620      	mov	r0, r4
 8013214:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8013218:	b212      	sxth	r2, r2
 801321a:	463b      	mov	r3, r7
 801321c:	b209      	sxth	r1, r1
 801321e:	47c0      	blx	r8
 8013220:	69a4      	ldr	r4, [r4, #24]
 8013222:	e7db      	b.n	80131dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013228 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013228:	2200      	movs	r2, #0
 801322a:	8002      	strh	r2, [r0, #0]
 801322c:	8042      	strh	r2, [r0, #2]
 801322e:	8082      	strh	r2, [r0, #4]
 8013230:	80c2      	strh	r2, [r0, #6]
 8013232:	4770      	bx	lr

08013234 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013234:	b570      	push	{r4, r5, r6, lr}
 8013236:	460d      	mov	r5, r1
 8013238:	4616      	mov	r6, r2
 801323a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801323c:	b13c      	cbz	r4, 801324e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801323e:	6823      	ldr	r3, [r4, #0]
 8013240:	4620      	mov	r0, r4
 8013242:	4632      	mov	r2, r6
 8013244:	4629      	mov	r1, r5
 8013246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013248:	4798      	blx	r3
 801324a:	69a4      	ldr	r4, [r4, #24]
 801324c:	e7f6      	b.n	801323c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801324e:	bd70      	pop	{r4, r5, r6, pc}

08013250 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013250:	b538      	push	{r3, r4, r5, lr}
 8013252:	460d      	mov	r5, r1
 8013254:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013256:	b134      	cbz	r4, 8013266 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013258:	682b      	ldr	r3, [r5, #0]
 801325a:	4621      	mov	r1, r4
 801325c:	4628      	mov	r0, r5
 801325e:	689b      	ldr	r3, [r3, #8]
 8013260:	4798      	blx	r3
 8013262:	69a4      	ldr	r4, [r4, #24]
 8013264:	e7f7      	b.n	8013256 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013266:	bd38      	pop	{r3, r4, r5, pc}

08013268 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013268:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801326a:	b19b      	cbz	r3, 8013294 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801326c:	428b      	cmp	r3, r1
 801326e:	d109      	bne.n	8013284 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013270:	699a      	ldr	r2, [r3, #24]
 8013272:	2100      	movs	r1, #0
 8013274:	6159      	str	r1, [r3, #20]
 8013276:	6282      	str	r2, [r0, #40]	; 0x28
 8013278:	b902      	cbnz	r2, 801327c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801327a:	4770      	bx	lr
 801327c:	6199      	str	r1, [r3, #24]
 801327e:	4770      	bx	lr
 8013280:	4613      	mov	r3, r2
 8013282:	b13a      	cbz	r2, 8013294 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013284:	699a      	ldr	r2, [r3, #24]
 8013286:	428a      	cmp	r2, r1
 8013288:	d1fa      	bne.n	8013280 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801328a:	698a      	ldr	r2, [r1, #24]
 801328c:	619a      	str	r2, [r3, #24]
 801328e:	2300      	movs	r3, #0
 8013290:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013294:	4770      	bx	lr

08013296 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013296:	b410      	push	{r4}
 8013298:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801329a:	4604      	mov	r4, r0
 801329c:	b92b      	cbnz	r3, 80132aa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801329e:	6803      	ldr	r3, [r0, #0]
 80132a0:	4611      	mov	r1, r2
 80132a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80132a8:	4718      	bx	r3
 80132aa:	b941      	cbnz	r1, 80132be <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80132ac:	6193      	str	r3, [r2, #24]
 80132ae:	6282      	str	r2, [r0, #40]	; 0x28
 80132b0:	6154      	str	r4, [r2, #20]
 80132b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132b6:	4770      	bx	lr
 80132b8:	4603      	mov	r3, r0
 80132ba:	2800      	cmp	r0, #0
 80132bc:	d0f9      	beq.n	80132b2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80132be:	4299      	cmp	r1, r3
 80132c0:	6998      	ldr	r0, [r3, #24]
 80132c2:	d1f9      	bne.n	80132b8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80132c4:	6190      	str	r0, [r2, #24]
 80132c6:	618a      	str	r2, [r1, #24]
 80132c8:	e7f2      	b.n	80132b0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080132cc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80132cc:	4288      	cmp	r0, r1
 80132ce:	b508      	push	{r3, lr}
 80132d0:	d105      	bne.n	80132de <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80132d2:	4b11      	ldr	r3, [pc, #68]	; (8013318 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80132d4:	2123      	movs	r1, #35	; 0x23
 80132d6:	4a11      	ldr	r2, [pc, #68]	; (801331c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80132d8:	4811      	ldr	r0, [pc, #68]	; (8013320 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80132da:	f00f fae1 	bl	80228a0 <__assert_func>
 80132de:	694b      	ldr	r3, [r1, #20]
 80132e0:	b11b      	cbz	r3, 80132ea <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80132e2:	4b10      	ldr	r3, [pc, #64]	; (8013324 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80132e4:	2124      	movs	r1, #36	; 0x24
 80132e6:	4a0d      	ldr	r2, [pc, #52]	; (801331c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80132e8:	e7f6      	b.n	80132d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80132ea:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80132ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80132f0:	b913      	cbnz	r3, 80132f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80132f2:	6281      	str	r1, [r0, #40]	; 0x28
 80132f4:	bd08      	pop	{r3, pc}
 80132f6:	4613      	mov	r3, r2
 80132f8:	699a      	ldr	r2, [r3, #24]
 80132fa:	b12a      	cbz	r2, 8013308 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80132fc:	428b      	cmp	r3, r1
 80132fe:	d1fa      	bne.n	80132f6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8013300:	4b09      	ldr	r3, [pc, #36]	; (8013328 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8013302:	2135      	movs	r1, #53	; 0x35
 8013304:	4a05      	ldr	r2, [pc, #20]	; (801331c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013306:	e7e7      	b.n	80132d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8013308:	428b      	cmp	r3, r1
 801330a:	d103      	bne.n	8013314 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801330c:	4b06      	ldr	r3, [pc, #24]	; (8013328 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801330e:	2138      	movs	r1, #56	; 0x38
 8013310:	4a02      	ldr	r2, [pc, #8]	; (801331c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013312:	e7e1      	b.n	80132d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8013314:	6199      	str	r1, [r3, #24]
 8013316:	e7ed      	b.n	80132f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8013318:	08024df5 	.word	0x08024df5
 801331c:	08024f4c 	.word	0x08024f4c
 8013320:	08024e21 	.word	0x08024e21
 8013324:	08024e54 	.word	0x08024e54
 8013328:	08024e8a 	.word	0x08024e8a

0801332c <_ZN8touchgfx4RectaNERKS0_>:
 801332c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013330:	888b      	ldrh	r3, [r1, #4]
 8013332:	f9b1 9000 	ldrsh.w	r9, [r1]
 8013336:	f9b0 a000 	ldrsh.w	sl, [r0]
 801333a:	444b      	add	r3, r9
 801333c:	b29b      	uxth	r3, r3
 801333e:	fa0f f883 	sxth.w	r8, r3
 8013342:	45c2      	cmp	sl, r8
 8013344:	da30      	bge.n	80133a8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8013346:	8882      	ldrh	r2, [r0, #4]
 8013348:	4452      	add	r2, sl
 801334a:	b292      	uxth	r2, r2
 801334c:	fa0f fe82 	sxth.w	lr, r2
 8013350:	45f1      	cmp	r9, lr
 8013352:	da29      	bge.n	80133a8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8013354:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8013358:	88cc      	ldrh	r4, [r1, #6]
 801335a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801335e:	442c      	add	r4, r5
 8013360:	b224      	sxth	r4, r4
 8013362:	42a6      	cmp	r6, r4
 8013364:	da20      	bge.n	80133a8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8013366:	88c7      	ldrh	r7, [r0, #6]
 8013368:	4437      	add	r7, r6
 801336a:	b2bf      	uxth	r7, r7
 801336c:	fa0f fc87 	sxth.w	ip, r7
 8013370:	4565      	cmp	r5, ip
 8013372:	da19      	bge.n	80133a8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8013374:	45ca      	cmp	sl, r9
 8013376:	4654      	mov	r4, sl
 8013378:	bfb8      	it	lt
 801337a:	464c      	movlt	r4, r9
 801337c:	42b5      	cmp	r5, r6
 801337e:	bfb8      	it	lt
 8013380:	4635      	movlt	r5, r6
 8013382:	45f0      	cmp	r8, lr
 8013384:	bfc8      	it	gt
 8013386:	4613      	movgt	r3, r2
 8013388:	1b1b      	subs	r3, r3, r4
 801338a:	8083      	strh	r3, [r0, #4]
 801338c:	88ca      	ldrh	r2, [r1, #6]
 801338e:	884b      	ldrh	r3, [r1, #2]
 8013390:	8004      	strh	r4, [r0, #0]
 8013392:	4413      	add	r3, r2
 8013394:	8045      	strh	r5, [r0, #2]
 8013396:	b29b      	uxth	r3, r3
 8013398:	b21a      	sxth	r2, r3
 801339a:	4594      	cmp	ip, r2
 801339c:	bfb8      	it	lt
 801339e:	463b      	movlt	r3, r7
 80133a0:	1b5b      	subs	r3, r3, r5
 80133a2:	80c3      	strh	r3, [r0, #6]
 80133a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133a8:	2300      	movs	r3, #0
 80133aa:	8003      	strh	r3, [r0, #0]
 80133ac:	8043      	strh	r3, [r0, #2]
 80133ae:	8083      	strh	r3, [r0, #4]
 80133b0:	80c3      	strh	r3, [r0, #6]
 80133b2:	e7f7      	b.n	80133a4 <_ZN8touchgfx4RectaNERKS0_+0x78>

080133b4 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80133b4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80133b8:	b12b      	cbz	r3, 80133c6 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80133ba:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80133be:	fab0 f080 	clz	r0, r0
 80133c2:	0940      	lsrs	r0, r0, #5
 80133c4:	4770      	bx	lr
 80133c6:	2001      	movs	r0, #1
 80133c8:	4770      	bx	lr

080133ca <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80133ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ce:	2300      	movs	r3, #0
 80133d0:	4604      	mov	r4, r0
 80133d2:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80133d4:	8003      	strh	r3, [r0, #0]
 80133d6:	8043      	strh	r3, [r0, #2]
 80133d8:	8083      	strh	r3, [r0, #4]
 80133da:	80c3      	strh	r3, [r0, #6]
 80133dc:	2d00      	cmp	r5, #0
 80133de:	d040      	beq.n	8013462 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80133e0:	1d28      	adds	r0, r5, #4
 80133e2:	f7ff ffe7 	bl	80133b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80133e6:	b988      	cbnz	r0, 801340c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80133e8:	4620      	mov	r0, r4
 80133ea:	f7ff ffe3 	bl	80133b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80133ee:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80133f2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80133f6:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80133fa:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80133fe:	b138      	cbz	r0, 8013410 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8013400:	8022      	strh	r2, [r4, #0]
 8013402:	8063      	strh	r3, [r4, #2]
 8013404:	f8a4 e004 	strh.w	lr, [r4, #4]
 8013408:	f8a4 c006 	strh.w	ip, [r4, #6]
 801340c:	69ad      	ldr	r5, [r5, #24]
 801340e:	e7e5      	b.n	80133dc <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8013410:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013414:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013418:	4290      	cmp	r0, r2
 801341a:	4607      	mov	r7, r0
 801341c:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8013420:	460e      	mov	r6, r1
 8013422:	bfa8      	it	ge
 8013424:	4617      	movge	r7, r2
 8013426:	4299      	cmp	r1, r3
 8013428:	4472      	add	r2, lr
 801342a:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801342e:	bfa8      	it	ge
 8013430:	461e      	movge	r6, r3
 8013432:	4440      	add	r0, r8
 8013434:	4471      	add	r1, lr
 8013436:	4463      	add	r3, ip
 8013438:	b200      	sxth	r0, r0
 801343a:	8027      	strh	r7, [r4, #0]
 801343c:	b212      	sxth	r2, r2
 801343e:	8066      	strh	r6, [r4, #2]
 8013440:	b209      	sxth	r1, r1
 8013442:	b21b      	sxth	r3, r3
 8013444:	4290      	cmp	r0, r2
 8013446:	bfac      	ite	ge
 8013448:	ebc7 0200 	rsbge	r2, r7, r0
 801344c:	ebc7 0202 	rsblt	r2, r7, r2
 8013450:	4299      	cmp	r1, r3
 8013452:	bfac      	ite	ge
 8013454:	ebc6 0301 	rsbge	r3, r6, r1
 8013458:	ebc6 0303 	rsblt	r3, r6, r3
 801345c:	80a2      	strh	r2, [r4, #4]
 801345e:	80e3      	strh	r3, [r4, #6]
 8013460:	e7d4      	b.n	801340c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013462:	4620      	mov	r0, r4
 8013464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013468 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8013468:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801346c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013470:	b383      	cbz	r3, 80134d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013472:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013474:	b374      	cbz	r4, 80134d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013476:	f9b1 5000 	ldrsh.w	r5, [r1]
 801347a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801347e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013482:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013486:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801348a:	b303      	cbz	r3, 80134ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801348c:	4668      	mov	r0, sp
 801348e:	1d21      	adds	r1, r4, #4
 8013490:	f8ad 5000 	strh.w	r5, [sp]
 8013494:	f8ad 6002 	strh.w	r6, [sp, #2]
 8013498:	f8ad 7004 	strh.w	r7, [sp, #4]
 801349c:	f8ad 8006 	strh.w	r8, [sp, #6]
 80134a0:	f7ff ff44 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 80134a4:	4668      	mov	r0, sp
 80134a6:	f7ff ff85 	bl	80133b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80134aa:	b980      	cbnz	r0, 80134ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80134ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80134b0:	4669      	mov	r1, sp
 80134b2:	88a2      	ldrh	r2, [r4, #4]
 80134b4:	4620      	mov	r0, r4
 80134b6:	1a9b      	subs	r3, r3, r2
 80134b8:	88e2      	ldrh	r2, [r4, #6]
 80134ba:	f8ad 3000 	strh.w	r3, [sp]
 80134be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80134c2:	1a9b      	subs	r3, r3, r2
 80134c4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80134c8:	6823      	ldr	r3, [r4, #0]
 80134ca:	689b      	ldr	r3, [r3, #8]
 80134cc:	4798      	blx	r3
 80134ce:	69a4      	ldr	r4, [r4, #24]
 80134d0:	2c00      	cmp	r4, #0
 80134d2:	d1d8      	bne.n	8013486 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80134d4:	b002      	add	sp, #8
 80134d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80134da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80134dc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80134e0:	460d      	mov	r5, r1
 80134e2:	4616      	mov	r6, r2
 80134e4:	b323      	cbz	r3, 8013530 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80134e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80134e8:	b314      	cbz	r4, 8013530 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80134ea:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80134ee:	b1eb      	cbz	r3, 801352c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80134f0:	6828      	ldr	r0, [r5, #0]
 80134f2:	466b      	mov	r3, sp
 80134f4:	6869      	ldr	r1, [r5, #4]
 80134f6:	c303      	stmia	r3!, {r0, r1}
 80134f8:	4668      	mov	r0, sp
 80134fa:	1d21      	adds	r1, r4, #4
 80134fc:	f7ff ff16 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 8013500:	4668      	mov	r0, sp
 8013502:	f7ff ff57 	bl	80133b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013506:	b988      	cbnz	r0, 801352c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013508:	f8bd 3000 	ldrh.w	r3, [sp]
 801350c:	4669      	mov	r1, sp
 801350e:	88a2      	ldrh	r2, [r4, #4]
 8013510:	4620      	mov	r0, r4
 8013512:	1a9b      	subs	r3, r3, r2
 8013514:	88e2      	ldrh	r2, [r4, #6]
 8013516:	f8ad 3000 	strh.w	r3, [sp]
 801351a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801351e:	1a9b      	subs	r3, r3, r2
 8013520:	4632      	mov	r2, r6
 8013522:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013526:	6823      	ldr	r3, [r4, #0]
 8013528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801352a:	4798      	blx	r3
 801352c:	69a4      	ldr	r4, [r4, #24]
 801352e:	e7db      	b.n	80134e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8013530:	b002      	add	sp, #8
 8013532:	bd70      	pop	{r4, r5, r6, pc}

08013534 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8013534:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013538:	4770      	bx	lr

0801353a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801353a:	6803      	ldr	r3, [r0, #0]
 801353c:	b513      	push	{r0, r1, r4, lr}
 801353e:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8013542:	2300      	movs	r3, #0
 8013544:	e9cd 3300 	strd	r3, r3, [sp]
 8013548:	466b      	mov	r3, sp
 801354a:	47a0      	blx	r4
 801354c:	b002      	add	sp, #8
 801354e:	bd10      	pop	{r4, pc}

08013550 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8013550:	2301      	movs	r3, #1
 8013552:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013556:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801355a:	4770      	bx	lr

0801355c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801355c:	2301      	movs	r3, #1
 801355e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013562:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013566:	4770      	bx	lr

08013568 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8013568:	6843      	ldr	r3, [r0, #4]
 801356a:	2201      	movs	r2, #1
 801356c:	725a      	strb	r2, [r3, #9]
 801356e:	6840      	ldr	r0, [r0, #4]
 8013570:	6803      	ldr	r3, [r0, #0]
 8013572:	691b      	ldr	r3, [r3, #16]
 8013574:	4718      	bx	r3

08013576 <_ZN8touchgfx3HAL8flushDMAEv>:
 8013576:	6840      	ldr	r0, [r0, #4]
 8013578:	6803      	ldr	r3, [r0, #0]
 801357a:	689b      	ldr	r3, [r3, #8]
 801357c:	4718      	bx	r3
	...

08013580 <_ZN8touchgfx3HAL10beginFrameEv>:
 8013580:	4b04      	ldr	r3, [pc, #16]	; (8013594 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	b123      	cbz	r3, 8013590 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8013586:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801358a:	f080 0001 	eor.w	r0, r0, #1
 801358e:	4770      	bx	lr
 8013590:	2001      	movs	r0, #1
 8013592:	4770      	bx	lr
 8013594:	2000b466 	.word	0x2000b466

08013598 <_ZN8touchgfx3HAL8endFrameEv>:
 8013598:	b510      	push	{r4, lr}
 801359a:	4604      	mov	r4, r0
 801359c:	6840      	ldr	r0, [r0, #4]
 801359e:	6803      	ldr	r3, [r0, #0]
 80135a0:	689b      	ldr	r3, [r3, #8]
 80135a2:	4798      	blx	r3
 80135a4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80135a8:	b113      	cbz	r3, 80135b0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80135aa:	2301      	movs	r3, #1
 80135ac:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80135b0:	bd10      	pop	{r4, pc}

080135b2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80135b2:	b508      	push	{r3, lr}
 80135b4:	6803      	ldr	r3, [r0, #0]
 80135b6:	4604      	mov	r4, r0
 80135b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80135ba:	4798      	blx	r3
 80135bc:	6823      	ldr	r3, [r4, #0]
 80135be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80135c0:	4620      	mov	r0, r4
 80135c2:	4798      	blx	r3
 80135c4:	f7fe f842 	bl	801164c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80135c8:	6823      	ldr	r3, [r4, #0]
 80135ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135cc:	e7f8      	b.n	80135c0 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080135d0 <_ZN8touchgfx3HAL4tickEv>:
 80135d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80135d2:	6803      	ldr	r3, [r0, #0]
 80135d4:	4604      	mov	r4, r0
 80135d6:	4d5c      	ldr	r5, [pc, #368]	; (8013748 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80135d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80135dc:	4798      	blx	r3
 80135de:	2800      	cmp	r0, #0
 80135e0:	f000 8097 	beq.w	8013712 <_ZN8touchgfx3HAL4tickEv+0x142>
 80135e4:	2001      	movs	r0, #1
 80135e6:	2600      	movs	r6, #0
 80135e8:	f7fd fd14 	bl	8011014 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80135ec:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80135f0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80135f4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80135f8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80135fc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8013600:	b133      	cbz	r3, 8013610 <_ZN8touchgfx3HAL4tickEv+0x40>
 8013602:	6823      	ldr	r3, [r4, #0]
 8013604:	4620      	mov	r0, r4
 8013606:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801360a:	4798      	blx	r3
 801360c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8013610:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8013614:	2601      	movs	r6, #1
 8013616:	6862      	ldr	r2, [r4, #4]
 8013618:	f083 0301 	eor.w	r3, r3, #1
 801361c:	702e      	strb	r6, [r5, #0]
 801361e:	7253      	strb	r3, [r2, #9]
 8013620:	f003 f94a 	bl	80168b8 <_ZN8touchgfx11Application11getInstanceEv>
 8013624:	6803      	ldr	r3, [r0, #0]
 8013626:	4631      	mov	r1, r6
 8013628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801362a:	4798      	blx	r3
 801362c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013630:	b90b      	cbnz	r3, 8013636 <_ZN8touchgfx3HAL4tickEv+0x66>
 8013632:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8013636:	f003 f93f 	bl	80168b8 <_ZN8touchgfx11Application11getInstanceEv>
 801363a:	6803      	ldr	r3, [r0, #0]
 801363c:	695b      	ldr	r3, [r3, #20]
 801363e:	4798      	blx	r3
 8013640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013642:	6803      	ldr	r3, [r0, #0]
 8013644:	691b      	ldr	r3, [r3, #16]
 8013646:	4798      	blx	r3
 8013648:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801364c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8013650:	3b01      	subs	r3, #1
 8013652:	b2db      	uxtb	r3, r3
 8013654:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013658:	b10a      	cbz	r2, 801365e <_ZN8touchgfx3HAL4tickEv+0x8e>
 801365a:	2b00      	cmp	r3, #0
 801365c:	d1eb      	bne.n	8013636 <_ZN8touchgfx3HAL4tickEv+0x66>
 801365e:	4a3b      	ldr	r2, [pc, #236]	; (801374c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013660:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8013664:	7813      	ldrb	r3, [r2, #0]
 8013666:	3301      	adds	r3, #1
 8013668:	b25b      	sxtb	r3, r3
 801366a:	4299      	cmp	r1, r3
 801366c:	7013      	strb	r3, [r2, #0]
 801366e:	dc10      	bgt.n	8013692 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8013670:	2300      	movs	r3, #0
 8013672:	68e0      	ldr	r0, [r4, #12]
 8013674:	a902      	add	r1, sp, #8
 8013676:	7013      	strb	r3, [r2, #0]
 8013678:	aa03      	add	r2, sp, #12
 801367a:	6803      	ldr	r3, [r0, #0]
 801367c:	68db      	ldr	r3, [r3, #12]
 801367e:	4798      	blx	r3
 8013680:	6823      	ldr	r3, [r4, #0]
 8013682:	2800      	cmp	r0, #0
 8013684:	d051      	beq.n	801372a <_ZN8touchgfx3HAL4tickEv+0x15a>
 8013686:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801368a:	4620      	mov	r0, r4
 801368c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013690:	4798      	blx	r3
 8013692:	2300      	movs	r3, #0
 8013694:	6960      	ldr	r0, [r4, #20]
 8013696:	f88d 3007 	strb.w	r3, [sp, #7]
 801369a:	b158      	cbz	r0, 80136b4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801369c:	6803      	ldr	r3, [r0, #0]
 801369e:	f10d 0107 	add.w	r1, sp, #7
 80136a2:	68db      	ldr	r3, [r3, #12]
 80136a4:	4798      	blx	r3
 80136a6:	b128      	cbz	r0, 80136b4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80136a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80136aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80136ae:	6803      	ldr	r3, [r0, #0]
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	4798      	blx	r3
 80136b4:	f104 001c 	add.w	r0, r4, #28
 80136b8:	f00d fc26 	bl	8020f08 <_ZN8touchgfx8Gestures4tickEv>
 80136bc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80136c0:	b30b      	cbz	r3, 8013706 <_ZN8touchgfx3HAL4tickEv+0x136>
 80136c2:	6920      	ldr	r0, [r4, #16]
 80136c4:	6803      	ldr	r3, [r0, #0]
 80136c6:	691b      	ldr	r3, [r3, #16]
 80136c8:	4798      	blx	r3
 80136ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80136cc:	4606      	mov	r6, r0
 80136ce:	b903      	cbnz	r3, 80136d2 <_ZN8touchgfx3HAL4tickEv+0x102>
 80136d0:	6720      	str	r0, [r4, #112]	; 0x70
 80136d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80136d4:	4a1e      	ldr	r2, [pc, #120]	; (8013750 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80136d6:	1af3      	subs	r3, r6, r3
 80136d8:	4293      	cmp	r3, r2
 80136da:	d914      	bls.n	8013706 <_ZN8touchgfx3HAL4tickEv+0x136>
 80136dc:	6920      	ldr	r0, [r4, #16]
 80136de:	6803      	ldr	r3, [r0, #0]
 80136e0:	699b      	ldr	r3, [r3, #24]
 80136e2:	4798      	blx	r3
 80136e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80136e6:	2264      	movs	r2, #100	; 0x64
 80136e8:	1af3      	subs	r3, r6, r3
 80136ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80136ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80136f2:	2800      	cmp	r0, #0
 80136f4:	dc1e      	bgt.n	8013734 <_ZN8touchgfx3HAL4tickEv+0x164>
 80136f6:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80136fa:	6920      	ldr	r0, [r4, #16]
 80136fc:	2100      	movs	r1, #0
 80136fe:	6803      	ldr	r3, [r0, #0]
 8013700:	69db      	ldr	r3, [r3, #28]
 8013702:	4798      	blx	r3
 8013704:	6726      	str	r6, [r4, #112]	; 0x70
 8013706:	f003 f8d7 	bl	80168b8 <_ZN8touchgfx11Application11getInstanceEv>
 801370a:	6803      	ldr	r3, [r0, #0]
 801370c:	2100      	movs	r1, #0
 801370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013710:	4798      	blx	r3
 8013712:	6823      	ldr	r3, [r4, #0]
 8013714:	4620      	mov	r0, r4
 8013716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801371a:	4798      	blx	r3
 801371c:	2001      	movs	r0, #1
 801371e:	f7fd fc84 	bl	801102a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8013722:	2300      	movs	r3, #0
 8013724:	702b      	strb	r3, [r5, #0]
 8013726:	b004      	add	sp, #16
 8013728:	bd70      	pop	{r4, r5, r6, pc}
 801372a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801372e:	4620      	mov	r0, r4
 8013730:	4798      	blx	r3
 8013732:	e7ae      	b.n	8013692 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8013734:	2863      	cmp	r0, #99	; 0x63
 8013736:	bfcb      	itete	gt
 8013738:	2300      	movgt	r3, #0
 801373a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801373e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8013742:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8013746:	e7d8      	b.n	80136fa <_ZN8touchgfx3HAL4tickEv+0x12a>
 8013748:	2000b46c 	.word	0x2000b46c
 801374c:	2000b46d 	.word	0x2000b46d
 8013750:	05f5e100 	.word	0x05f5e100

08013754 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8013754:	f7fd bf1a 	b.w	801158c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013758 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8013758:	6581      	str	r1, [r0, #88]	; 0x58
 801375a:	301c      	adds	r0, #28
 801375c:	f00d bbd2 	b.w	8020f04 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08013760 <_ZN8touchgfx3HAL5touchEll>:
 8013760:	b530      	push	{r4, r5, lr}
 8013762:	b087      	sub	sp, #28
 8013764:	4604      	mov	r4, r0
 8013766:	a804      	add	r0, sp, #16
 8013768:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801376c:	f002 fe62 	bl	8016434 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8013770:	9b04      	ldr	r3, [sp, #16]
 8013772:	a906      	add	r1, sp, #24
 8013774:	a803      	add	r0, sp, #12
 8013776:	f8ad 300c 	strh.w	r3, [sp, #12]
 801377a:	9b05      	ldr	r3, [sp, #20]
 801377c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8013780:	f002 fea6 	bl	80164d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8013784:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8013788:	f104 001c 	add.w	r0, r4, #28
 801378c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013790:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013794:	b189      	cbz	r1, 80137ba <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013796:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801379a:	9300      	str	r3, [sp, #0]
 801379c:	4613      	mov	r3, r2
 801379e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80137a2:	462a      	mov	r2, r5
 80137a4:	f00d fbbe 	bl	8020f24 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80137a8:	b128      	cbz	r0, 80137b6 <_ZN8touchgfx3HAL5touchEll+0x56>
 80137aa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80137ae:	65e3      	str	r3, [r4, #92]	; 0x5c
 80137b0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80137b4:	6623      	str	r3, [r4, #96]	; 0x60
 80137b6:	b007      	add	sp, #28
 80137b8:	bd30      	pop	{r4, r5, pc}
 80137ba:	f00d fbf7 	bl	8020fac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80137be:	2301      	movs	r3, #1
 80137c0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80137c4:	e7f1      	b.n	80137aa <_ZN8touchgfx3HAL5touchEll+0x4a>

080137c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80137c6:	b570      	push	{r4, r5, r6, lr}
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d050      	beq.n	801386e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80137cc:	ea81 0002 	eor.w	r0, r1, r2
 80137d0:	07c6      	lsls	r6, r0, #31
 80137d2:	d508      	bpl.n	80137e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80137d4:	3a01      	subs	r2, #1
 80137d6:	18cc      	adds	r4, r1, r3
 80137d8:	42a1      	cmp	r1, r4
 80137da:	d048      	beq.n	801386e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80137dc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80137e0:	f801 0b01 	strb.w	r0, [r1], #1
 80137e4:	e7f8      	b.n	80137d8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80137e6:	07d5      	lsls	r5, r2, #31
 80137e8:	bf42      	ittt	mi
 80137ea:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80137ee:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80137f2:	f801 0b01 	strbmi.w	r0, [r1], #1
 80137f6:	2b01      	cmp	r3, #1
 80137f8:	d915      	bls.n	8013826 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80137fa:	ea82 0001 	eor.w	r0, r2, r1
 80137fe:	0784      	lsls	r4, r0, #30
 8013800:	d02d      	beq.n	801385e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8013802:	1e94      	subs	r4, r2, #2
 8013804:	4608      	mov	r0, r1
 8013806:	18ce      	adds	r6, r1, r3
 8013808:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801380c:	f820 5b02 	strh.w	r5, [r0], #2
 8013810:	1a35      	subs	r5, r6, r0
 8013812:	2d01      	cmp	r5, #1
 8013814:	d8f8      	bhi.n	8013808 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8013816:	1e98      	subs	r0, r3, #2
 8013818:	f003 0301 	and.w	r3, r3, #1
 801381c:	f020 0001 	bic.w	r0, r0, #1
 8013820:	3002      	adds	r0, #2
 8013822:	4401      	add	r1, r0
 8013824:	4402      	add	r2, r0
 8013826:	1f14      	subs	r4, r2, #4
 8013828:	4608      	mov	r0, r1
 801382a:	18ce      	adds	r6, r1, r3
 801382c:	1a35      	subs	r5, r6, r0
 801382e:	2d03      	cmp	r5, #3
 8013830:	d810      	bhi.n	8013854 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8013832:	089c      	lsrs	r4, r3, #2
 8013834:	00a0      	lsls	r0, r4, #2
 8013836:	4401      	add	r1, r0
 8013838:	3801      	subs	r0, #1
 801383a:	4402      	add	r2, r0
 801383c:	f06f 0003 	mvn.w	r0, #3
 8013840:	fb00 3404 	mla	r4, r0, r4, r3
 8013844:	440c      	add	r4, r1
 8013846:	42a1      	cmp	r1, r4
 8013848:	d011      	beq.n	801386e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801384a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801384e:	f801 3b01 	strb.w	r3, [r1], #1
 8013852:	e7f8      	b.n	8013846 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8013854:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8013858:	f840 5b04 	str.w	r5, [r0], #4
 801385c:	e7e6      	b.n	801382c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801385e:	0790      	lsls	r0, r2, #30
 8013860:	d0e1      	beq.n	8013826 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8013862:	f832 0b02 	ldrh.w	r0, [r2], #2
 8013866:	3b02      	subs	r3, #2
 8013868:	f821 0b02 	strh.w	r0, [r1], #2
 801386c:	e7db      	b.n	8013826 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801386e:	2001      	movs	r0, #1
 8013870:	bd70      	pop	{r4, r5, r6, pc}

08013872 <_ZN8touchgfx3HAL7noTouchEv>:
 8013872:	b510      	push	{r4, lr}
 8013874:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8013878:	4604      	mov	r4, r0
 801387a:	b153      	cbz	r3, 8013892 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801387c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8013880:	2101      	movs	r1, #1
 8013882:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8013886:	301c      	adds	r0, #28
 8013888:	f00d fb90 	bl	8020fac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801388c:	2300      	movs	r3, #0
 801388e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013892:	bd10      	pop	{r4, pc}

08013894 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8013894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013898:	4605      	mov	r5, r0
 801389a:	6980      	ldr	r0, [r0, #24]
 801389c:	b085      	sub	sp, #20
 801389e:	460f      	mov	r7, r1
 80138a0:	4690      	mov	r8, r2
 80138a2:	4699      	mov	r9, r3
 80138a4:	b930      	cbnz	r0, 80138b4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80138a6:	4b1f      	ldr	r3, [pc, #124]	; (8013924 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80138a8:	f44f 7198 	mov.w	r1, #304	; 0x130
 80138ac:	4a1e      	ldr	r2, [pc, #120]	; (8013928 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80138ae:	481f      	ldr	r0, [pc, #124]	; (801392c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80138b0:	f00e fff6 	bl	80228a0 <__assert_func>
 80138b4:	ac04      	add	r4, sp, #16
 80138b6:	2600      	movs	r6, #0
 80138b8:	f844 6d04 	str.w	r6, [r4, #-4]!
 80138bc:	6806      	ldr	r6, [r0, #0]
 80138be:	9401      	str	r4, [sp, #4]
 80138c0:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80138c4:	9400      	str	r4, [sp, #0]
 80138c6:	6834      	ldr	r4, [r6, #0]
 80138c8:	47a0      	blx	r4
 80138ca:	4c19      	ldr	r4, [pc, #100]	; (8013930 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80138cc:	4606      	mov	r6, r0
 80138ce:	f8a4 9000 	strh.w	r9, [r4]
 80138d2:	f7fb f9d5 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 80138d6:	6803      	ldr	r3, [r0, #0]
 80138d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138da:	4798      	blx	r3
 80138dc:	280c      	cmp	r0, #12
 80138de:	d80f      	bhi.n	8013900 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80138e0:	e8df f000 	tbb	[pc, r0]
 80138e4:	1b1b1207 	.word	0x1b1b1207
 80138e8:	1b1b1b1b 	.word	0x1b1b1b1b
 80138ec:	1b1b1b1b 	.word	0x1b1b1b1b
 80138f0:	1b          	.byte	0x1b
 80138f1:	00          	.byte	0x00
 80138f2:	8823      	ldrh	r3, [r4, #0]
 80138f4:	fb08 7203 	mla	r2, r8, r3, r7
 80138f8:	9b03      	ldr	r3, [sp, #12]
 80138fa:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80138fe:	63eb      	str	r3, [r5, #60]	; 0x3c
 8013900:	4630      	mov	r0, r6
 8013902:	b005      	add	sp, #20
 8013904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013908:	8822      	ldrh	r2, [r4, #0]
 801390a:	9b03      	ldr	r3, [sp, #12]
 801390c:	fb08 7202 	mla	r2, r8, r2, r7
 8013910:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013914:	1a9a      	subs	r2, r3, r2
 8013916:	63ea      	str	r2, [r5, #60]	; 0x3c
 8013918:	e7f2      	b.n	8013900 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801391a:	4b06      	ldr	r3, [pc, #24]	; (8013934 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 801391c:	f240 114d 	movw	r1, #333	; 0x14d
 8013920:	4a01      	ldr	r2, [pc, #4]	; (8013928 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8013922:	e7c4      	b.n	80138ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8013924:	08024ff5 	.word	0x08024ff5
 8013928:	08025306 	.word	0x08025306
 801392c:	0802503a 	.word	0x0802503a
 8013930:	2000b462 	.word	0x2000b462
 8013934:	08025060 	.word	0x08025060

08013938 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8013938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801393c:	4698      	mov	r8, r3
 801393e:	6803      	ldr	r3, [r0, #0]
 8013940:	b087      	sub	sp, #28
 8013942:	460e      	mov	r6, r1
 8013944:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8013946:	4617      	mov	r7, r2
 8013948:	4b0d      	ldr	r3, [pc, #52]	; (8013980 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801394a:	4604      	mov	r4, r0
 801394c:	f8b3 9000 	ldrh.w	r9, [r3]
 8013950:	f7fb f996 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 8013954:	6803      	ldr	r3, [r0, #0]
 8013956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013958:	4798      	blx	r3
 801395a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801395e:	463a      	mov	r2, r7
 8013960:	4631      	mov	r1, r6
 8013962:	9302      	str	r3, [sp, #8]
 8013964:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013968:	9301      	str	r3, [sp, #4]
 801396a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801396e:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8013972:	9300      	str	r3, [sp, #0]
 8013974:	4620      	mov	r0, r4
 8013976:	4643      	mov	r3, r8
 8013978:	47a8      	blx	r5
 801397a:	b007      	add	sp, #28
 801397c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013980:	2000b462 	.word	0x2000b462

08013984 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8013984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013988:	4606      	mov	r6, r0
 801398a:	b089      	sub	sp, #36	; 0x24
 801398c:	4610      	mov	r0, r2
 801398e:	460c      	mov	r4, r1
 8013990:	4691      	mov	r9, r2
 8013992:	4698      	mov	r8, r3
 8013994:	f005 f972 	bl	8018c7c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013998:	2800      	cmp	r0, #0
 801399a:	f000 8092 	beq.w	8013ac2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801399e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8013adc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80139a2:	ad08      	add	r5, sp, #32
 80139a4:	f8df b138 	ldr.w	fp, [pc, #312]	; 8013ae0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80139a8:	f8da 0000 	ldr.w	r0, [sl]
 80139ac:	4f4a      	ldr	r7, [pc, #296]	; (8013ad8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80139ae:	6802      	ldr	r2, [r0, #0]
 80139b0:	6a12      	ldr	r2, [r2, #32]
 80139b2:	4790      	blx	r2
 80139b4:	f8da 0000 	ldr.w	r0, [sl]
 80139b8:	6802      	ldr	r2, [r0, #0]
 80139ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80139bc:	4790      	blx	r2
 80139be:	f8bb 3000 	ldrh.w	r3, [fp]
 80139c2:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80139c6:	4628      	mov	r0, r5
 80139c8:	9300      	str	r3, [sp, #0]
 80139ca:	883b      	ldrh	r3, [r7, #0]
 80139cc:	9301      	str	r3, [sp, #4]
 80139ce:	f005 fa15 	bl	8018dfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80139d2:	f8ab 0000 	strh.w	r0, [fp]
 80139d6:	4628      	mov	r0, r5
 80139d8:	f005 fa4a 	bl	8018e70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80139dc:	f8da b000 	ldr.w	fp, [sl]
 80139e0:	8038      	strh	r0, [r7, #0]
 80139e2:	4648      	mov	r0, r9
 80139e4:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80139e8:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80139ec:	9302      	str	r3, [sp, #8]
 80139ee:	f005 f945 	bl	8018c7c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80139f2:	f8da 2000 	ldr.w	r2, [sl]
 80139f6:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80139fa:	63d0      	str	r0, [r2, #60]	; 0x3c
 80139fc:	4620      	mov	r0, r4
 80139fe:	6822      	ldr	r2, [r4, #0]
 8013a00:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8013a04:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8013a06:	2200      	movs	r2, #0
 8013a08:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8013a0c:	4611      	mov	r1, r2
 8013a0e:	4798      	blx	r3
 8013a10:	2201      	movs	r2, #1
 8013a12:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8013a16:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8013a1a:	1d22      	adds	r2, r4, #4
 8013a1c:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8013a20:	2900      	cmp	r1, #0
 8013a22:	d051      	beq.n	8013ac8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8013a24:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8013a28:	2900      	cmp	r1, #0
 8013a2a:	d04d      	beq.n	8013ac8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8013a2c:	6810      	ldr	r0, [r2, #0]
 8013a2e:	f10d 0c18 	add.w	ip, sp, #24
 8013a32:	6851      	ldr	r1, [r2, #4]
 8013a34:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013a38:	4641      	mov	r1, r8
 8013a3a:	a806      	add	r0, sp, #24
 8013a3c:	f7ff fc76 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 8013a40:	4628      	mov	r0, r5
 8013a42:	f005 fb67 	bl	8019114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013a46:	4680      	mov	r8, r0
 8013a48:	f7fb f91a 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 8013a4c:	6802      	ldr	r2, [r0, #0]
 8013a4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013a50:	4790      	blx	r2
 8013a52:	4580      	cmp	r8, r0
 8013a54:	d03d      	beq.n	8013ad2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8013a56:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8013a58:	b150      	cbz	r0, 8013a70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8013a5a:	4628      	mov	r0, r5
 8013a5c:	f005 fb5a 	bl	8019114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013a60:	4605      	mov	r5, r0
 8013a62:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8013a64:	6803      	ldr	r3, [r0, #0]
 8013a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a68:	4798      	blx	r3
 8013a6a:	1a2b      	subs	r3, r5, r0
 8013a6c:	4258      	negs	r0, r3
 8013a6e:	4158      	adcs	r0, r3
 8013a70:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8013a74:	2500      	movs	r5, #0
 8013a76:	6963      	ldr	r3, [r4, #20]
 8013a78:	4620      	mov	r0, r4
 8013a7a:	6822      	ldr	r2, [r4, #0]
 8013a7c:	a906      	add	r1, sp, #24
 8013a7e:	6165      	str	r5, [r4, #20]
 8013a80:	9303      	str	r3, [sp, #12]
 8013a82:	6892      	ldr	r2, [r2, #8]
 8013a84:	4790      	blx	r2
 8013a86:	9b03      	ldr	r3, [sp, #12]
 8013a88:	4620      	mov	r0, r4
 8013a8a:	4652      	mov	r2, sl
 8013a8c:	6163      	str	r3, [r4, #20]
 8013a8e:	4649      	mov	r1, r9
 8013a90:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8013a94:	6823      	ldr	r3, [r4, #0]
 8013a96:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8013a9a:	4c10      	ldr	r4, [pc, #64]	; (8013adc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8013a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a9e:	4798      	blx	r3
 8013aa0:	6820      	ldr	r0, [r4, #0]
 8013aa2:	9b02      	ldr	r3, [sp, #8]
 8013aa4:	9a00      	ldr	r2, [sp, #0]
 8013aa6:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8013aaa:	4b0d      	ldr	r3, [pc, #52]	; (8013ae0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8013aac:	801a      	strh	r2, [r3, #0]
 8013aae:	4b0a      	ldr	r3, [pc, #40]	; (8013ad8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8013ab0:	9a01      	ldr	r2, [sp, #4]
 8013ab2:	801a      	strh	r2, [r3, #0]
 8013ab4:	6803      	ldr	r3, [r0, #0]
 8013ab6:	6a1b      	ldr	r3, [r3, #32]
 8013ab8:	4798      	blx	r3
 8013aba:	6820      	ldr	r0, [r4, #0]
 8013abc:	6803      	ldr	r3, [r0, #0]
 8013abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ac0:	4798      	blx	r3
 8013ac2:	b009      	add	sp, #36	; 0x24
 8013ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ac8:	ab06      	add	r3, sp, #24
 8013aca:	6810      	ldr	r0, [r2, #0]
 8013acc:	6851      	ldr	r1, [r2, #4]
 8013ace:	c303      	stmia	r3!, {r0, r1}
 8013ad0:	e7b6      	b.n	8013a40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8013ad2:	2000      	movs	r0, #0
 8013ad4:	e7cc      	b.n	8013a70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8013ad6:	bf00      	nop
 8013ad8:	2000b464 	.word	0x2000b464
 8013adc:	2000b468 	.word	0x2000b468
 8013ae0:	2000b462 	.word	0x2000b462

08013ae4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8013ae4:	4b07      	ldr	r3, [pc, #28]	; (8013b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8013ae6:	b510      	push	{r4, lr}
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	4604      	mov	r4, r0
 8013aec:	b13b      	cbz	r3, 8013afe <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013aee:	6803      	ldr	r3, [r0, #0]
 8013af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013af2:	4798      	blx	r3
 8013af4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013af6:	4283      	cmp	r3, r0
 8013af8:	d101      	bne.n	8013afe <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013afa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8013afc:	bd10      	pop	{r4, pc}
 8013afe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8013b00:	e7fc      	b.n	8013afc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8013b02:	bf00      	nop
 8013b04:	2000b466 	.word	0x2000b466

08013b08 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013b08:	4b0b      	ldr	r3, [pc, #44]	; (8013b38 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8013b0a:	b510      	push	{r4, lr}
 8013b0c:	781b      	ldrb	r3, [r3, #0]
 8013b0e:	4604      	mov	r4, r0
 8013b10:	b95b      	cbnz	r3, 8013b2a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013b12:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8013b16:	2b02      	cmp	r3, #2
 8013b18:	d007      	beq.n	8013b2a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013b1a:	6840      	ldr	r0, [r0, #4]
 8013b1c:	f000 fbc8 	bl	80142b0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013b20:	b118      	cbz	r0, 8013b2a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013b22:	6862      	ldr	r2, [r4, #4]
 8013b24:	7a53      	ldrb	r3, [r2, #9]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d0fc      	beq.n	8013b24 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013b2a:	f7fd fd21 	bl	8011570 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013b2e:	4620      	mov	r0, r4
 8013b30:	f7ff ffd8 	bl	8013ae4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013b34:	bd10      	pop	{r4, pc}
 8013b36:	bf00      	nop
 8013b38:	2000b466 	.word	0x2000b466

08013b3c <_ZN8touchgfx3HAL10initializeEv>:
 8013b3c:	b510      	push	{r4, lr}
 8013b3e:	4604      	mov	r4, r0
 8013b40:	f7fd fcf2 	bl	8011528 <_ZN8touchgfx10OSWrappers10initializeEv>
 8013b44:	6860      	ldr	r0, [r4, #4]
 8013b46:	6803      	ldr	r3, [r0, #0]
 8013b48:	68db      	ldr	r3, [r3, #12]
 8013b4a:	4798      	blx	r3
 8013b4c:	68e0      	ldr	r0, [r4, #12]
 8013b4e:	6803      	ldr	r3, [r0, #0]
 8013b50:	689b      	ldr	r3, [r3, #8]
 8013b52:	4798      	blx	r3
 8013b54:	6823      	ldr	r3, [r4, #0]
 8013b56:	4620      	mov	r0, r4
 8013b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b5e:	4718      	bx	r3

08013b60 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8013b60:	b508      	push	{r3, lr}
 8013b62:	290c      	cmp	r1, #12
 8013b64:	d817      	bhi.n	8013b96 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8013b66:	e8df f001 	tbb	[pc, r1]
 8013b6a:	090b      	.short	0x090b
 8013b6c:	0d0d0d07 	.word	0x0d0d0d07
 8013b70:	1414140d 	.word	0x1414140d
 8013b74:	1414      	.short	0x1414
 8013b76:	0d          	.byte	0x0d
 8013b77:	00          	.byte	0x00
 8013b78:	2020      	movs	r0, #32
 8013b7a:	bd08      	pop	{r3, pc}
 8013b7c:	2018      	movs	r0, #24
 8013b7e:	e7fc      	b.n	8013b7a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8013b80:	2010      	movs	r0, #16
 8013b82:	e7fa      	b.n	8013b7a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8013b84:	4b05      	ldr	r3, [pc, #20]	; (8013b9c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8013b86:	f44f 710c 	mov.w	r1, #560	; 0x230
 8013b8a:	4a05      	ldr	r2, [pc, #20]	; (8013ba0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8013b8c:	4805      	ldr	r0, [pc, #20]	; (8013ba4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8013b8e:	f00e fe87 	bl	80228a0 <__assert_func>
 8013b92:	2008      	movs	r0, #8
 8013b94:	e7f1      	b.n	8013b7a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8013b96:	2000      	movs	r0, #0
 8013b98:	e7ef      	b.n	8013b7a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8013b9a:	bf00      	nop
 8013b9c:	08025133 	.word	0x08025133
 8013ba0:	080254c8 	.word	0x080254c8
 8013ba4:	0802503a 	.word	0x0802503a

08013ba8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8013ba8:	b570      	push	{r4, r5, r6, lr}
 8013baa:	460d      	mov	r5, r1
 8013bac:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8013bb0:	4616      	mov	r6, r2
 8013bb2:	461c      	mov	r4, r3
 8013bb4:	f7ff ffd4 	bl	8013b60 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8013bb8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8013bbc:	10c0      	asrs	r0, r0, #3
 8013bbe:	fb06 5101 	mla	r1, r6, r1, r5
 8013bc2:	fb00 4001 	mla	r0, r0, r1, r4
 8013bc6:	bd70      	pop	{r4, r5, r6, pc}

08013bc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8013bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bcc:	b08a      	sub	sp, #40	; 0x28
 8013bce:	f04f 0c00 	mov.w	ip, #0
 8013bd2:	4604      	mov	r4, r0
 8013bd4:	469a      	mov	sl, r3
 8013bd6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8013bda:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8013bde:	f1b8 0f02 	cmp.w	r8, #2
 8013be2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8013be6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013bea:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8013bee:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8013bf2:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8013bf6:	f8cd c020 	str.w	ip, [sp, #32]
 8013bfa:	d030      	beq.n	8013c5e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8013bfc:	2bff      	cmp	r3, #255	; 0xff
 8013bfe:	d12c      	bne.n	8013c5a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8013c00:	4560      	cmp	r0, ip
 8013c02:	bf14      	ite	ne
 8013c04:	2004      	movne	r0, #4
 8013c06:	2001      	moveq	r0, #1
 8013c08:	9204      	str	r2, [sp, #16]
 8013c0a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8013c0e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013c12:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013c16:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013c1a:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c22:	4620      	mov	r0, r4
 8013c24:	f7ff ff5e 	bl	8013ae4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013c28:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	4651      	mov	r1, sl
 8013c30:	4620      	mov	r0, r4
 8013c32:	e9cd 9700 	strd	r9, r7, [sp]
 8013c36:	f7ff ffb7 	bl	8013ba8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8013c3a:	f8ad 901e 	strh.w	r9, [sp, #30]
 8013c3e:	9005      	str	r0, [sp, #20]
 8013c40:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8013c44:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8013c48:	b106      	cbz	r6, 8013c4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8013c4a:	b98d      	cbnz	r5, 8013c70 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8013c4c:	4b12      	ldr	r3, [pc, #72]	; (8013c98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8013c4e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8013c52:	4a12      	ldr	r2, [pc, #72]	; (8013c9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8013c54:	4812      	ldr	r0, [pc, #72]	; (8013ca0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8013c56:	f00e fe23 	bl	80228a0 <__assert_func>
 8013c5a:	2004      	movs	r0, #4
 8013c5c:	e7d4      	b.n	8013c08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8013c5e:	2bff      	cmp	r3, #255	; 0xff
 8013c60:	d104      	bne.n	8013c6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	bf14      	ite	ne
 8013c66:	2040      	movne	r0, #64	; 0x40
 8013c68:	2020      	moveq	r0, #32
 8013c6a:	e7cd      	b.n	8013c08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8013c6c:	2040      	movs	r0, #64	; 0x40
 8013c6e:	e7cb      	b.n	8013c08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8013c70:	6823      	ldr	r3, [r4, #0]
 8013c72:	4620      	mov	r0, r4
 8013c74:	9d02      	ldr	r5, [sp, #8]
 8013c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c78:	4798      	blx	r3
 8013c7a:	4228      	tst	r0, r5
 8013c7c:	d104      	bne.n	8013c88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8013c7e:	4b09      	ldr	r3, [pc, #36]	; (8013ca4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8013c80:	f240 11b1 	movw	r1, #433	; 0x1b1
 8013c84:	4a05      	ldr	r2, [pc, #20]	; (8013c9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8013c86:	e7e5      	b.n	8013c54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8013c88:	6860      	ldr	r0, [r4, #4]
 8013c8a:	a902      	add	r1, sp, #8
 8013c8c:	6803      	ldr	r3, [r0, #0]
 8013c8e:	685b      	ldr	r3, [r3, #4]
 8013c90:	4798      	blx	r3
 8013c92:	b00a      	add	sp, #40	; 0x28
 8013c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c98:	080250b6 	.word	0x080250b6
 8013c9c:	0802536a 	.word	0x0802536a
 8013ca0:	0802503a 	.word	0x0802503a
 8013ca4:	080250ee 	.word	0x080250ee

08013ca8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8013ca8:	b510      	push	{r4, lr}
 8013caa:	b08a      	sub	sp, #40	; 0x28
 8013cac:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8013cb0:	9408      	str	r4, [sp, #32]
 8013cb2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8013cb6:	9407      	str	r4, [sp, #28]
 8013cb8:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8013cbc:	9406      	str	r4, [sp, #24]
 8013cbe:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8013cc2:	9405      	str	r4, [sp, #20]
 8013cc4:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8013cc8:	9404      	str	r4, [sp, #16]
 8013cca:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8013cce:	9403      	str	r4, [sp, #12]
 8013cd0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8013cd4:	9402      	str	r4, [sp, #8]
 8013cd6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8013cda:	e9cd 3400 	strd	r3, r4, [sp]
 8013cde:	4613      	mov	r3, r2
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	f7ff ff71 	bl	8013bc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8013ce6:	b00a      	add	sp, #40	; 0x28
 8013ce8:	bd10      	pop	{r4, pc}
	...

08013cec <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8013cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cee:	b08b      	sub	sp, #44	; 0x2c
 8013cf0:	4616      	mov	r6, r2
 8013cf2:	460d      	mov	r5, r1
 8013cf4:	461f      	mov	r7, r3
 8013cf6:	4604      	mov	r4, r0
 8013cf8:	f7fa ffc2 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 8013cfc:	6803      	ldr	r3, [r0, #0]
 8013cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d00:	4798      	blx	r3
 8013d02:	4b0e      	ldr	r3, [pc, #56]	; (8013d3c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8013d04:	2200      	movs	r2, #0
 8013d06:	4629      	mov	r1, r5
 8013d08:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8013d0c:	881b      	ldrh	r3, [r3, #0]
 8013d0e:	4620      	mov	r0, r4
 8013d10:	9306      	str	r3, [sp, #24]
 8013d12:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013d16:	9305      	str	r3, [sp, #20]
 8013d18:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013d1c:	9304      	str	r3, [sp, #16]
 8013d1e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013d22:	9303      	str	r3, [sp, #12]
 8013d24:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013d28:	9302      	str	r3, [sp, #8]
 8013d2a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013d2e:	e9cd 7300 	strd	r7, r3, [sp]
 8013d32:	4633      	mov	r3, r6
 8013d34:	f7ff ff48 	bl	8013bc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8013d38:	b00b      	add	sp, #44	; 0x2c
 8013d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d3c:	2000b462 	.word	0x2000b462

08013d40 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8013d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d44:	461f      	mov	r7, r3
 8013d46:	4b14      	ldr	r3, [pc, #80]	; (8013d98 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8013d48:	b08a      	sub	sp, #40	; 0x28
 8013d4a:	4616      	mov	r6, r2
 8013d4c:	f8b3 8000 	ldrh.w	r8, [r3]
 8013d50:	460d      	mov	r5, r1
 8013d52:	4604      	mov	r4, r0
 8013d54:	f7fa ff94 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 8013d58:	6803      	ldr	r3, [r0, #0]
 8013d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d5c:	4798      	blx	r3
 8013d5e:	2302      	movs	r3, #2
 8013d60:	9008      	str	r0, [sp, #32]
 8013d62:	2200      	movs	r2, #0
 8013d64:	4629      	mov	r1, r5
 8013d66:	4620      	mov	r0, r4
 8013d68:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	9305      	str	r3, [sp, #20]
 8013d70:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013d74:	9304      	str	r3, [sp, #16]
 8013d76:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013d7a:	9303      	str	r3, [sp, #12]
 8013d7c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013d80:	9302      	str	r3, [sp, #8]
 8013d82:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013d86:	e9cd 7300 	strd	r7, r3, [sp]
 8013d8a:	4633      	mov	r3, r6
 8013d8c:	f7ff ff1c 	bl	8013bc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8013d90:	b00a      	add	sp, #40	; 0x28
 8013d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d96:	bf00      	nop
 8013d98:	2000b462 	.word	0x2000b462

08013d9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8013d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013da0:	b08b      	sub	sp, #44	; 0x2c
 8013da2:	469b      	mov	fp, r3
 8013da4:	4604      	mov	r4, r0
 8013da6:	4692      	mov	sl, r2
 8013da8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8013dac:	2600      	movs	r6, #0
 8013dae:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8013db2:	4689      	mov	r9, r1
 8013db4:	2fff      	cmp	r7, #255	; 0xff
 8013db6:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8013dba:	9608      	str	r6, [sp, #32]
 8013dbc:	bf14      	ite	ne
 8013dbe:	2308      	movne	r3, #8
 8013dc0:	2302      	moveq	r3, #2
 8013dc2:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8013dc6:	f7ff fe8d 	bl	8013ae4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013dca:	465a      	mov	r2, fp
 8013dcc:	4603      	mov	r3, r0
 8013dce:	4651      	mov	r1, sl
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	e9cd 8500 	strd	r8, r5, [sp]
 8013dd6:	f7ff fee7 	bl	8013ba8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8013dda:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013dde:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8013de2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013de6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013dea:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8013dee:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013df2:	6823      	ldr	r3, [r4, #0]
 8013df4:	9d02      	ldr	r5, [sp, #8]
 8013df6:	9005      	str	r0, [sp, #20]
 8013df8:	4620      	mov	r0, r4
 8013dfa:	f8ad 601c 	strh.w	r6, [sp, #28]
 8013dfe:	f8ad 801e 	strh.w	r8, [sp, #30]
 8013e02:	f8cd 9020 	str.w	r9, [sp, #32]
 8013e06:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8013e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e0c:	4798      	blx	r3
 8013e0e:	4228      	tst	r0, r5
 8013e10:	d106      	bne.n	8013e20 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8013e12:	4b07      	ldr	r3, [pc, #28]	; (8013e30 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8013e14:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8013e18:	4a06      	ldr	r2, [pc, #24]	; (8013e34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8013e1a:	4807      	ldr	r0, [pc, #28]	; (8013e38 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8013e1c:	f00e fd40 	bl	80228a0 <__assert_func>
 8013e20:	6860      	ldr	r0, [r4, #4]
 8013e22:	a902      	add	r1, sp, #8
 8013e24:	6803      	ldr	r3, [r0, #0]
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	4798      	blx	r3
 8013e2a:	b00b      	add	sp, #44	; 0x2c
 8013e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e30:	080250ee 	.word	0x080250ee
 8013e34:	08025433 	.word	0x08025433
 8013e38:	0802503a 	.word	0x0802503a

08013e3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013e3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013e40:	461f      	mov	r7, r3
 8013e42:	4b0b      	ldr	r3, [pc, #44]	; (8013e70 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8013e44:	460d      	mov	r5, r1
 8013e46:	4616      	mov	r6, r2
 8013e48:	f8b3 8000 	ldrh.w	r8, [r3]
 8013e4c:	4604      	mov	r4, r0
 8013e4e:	f7fa ff17 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 8013e52:	6803      	ldr	r3, [r0, #0]
 8013e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e56:	4798      	blx	r3
 8013e58:	463b      	mov	r3, r7
 8013e5a:	4632      	mov	r2, r6
 8013e5c:	4629      	mov	r1, r5
 8013e5e:	e9cd 8000 	strd	r8, r0, [sp]
 8013e62:	4620      	mov	r0, r4
 8013e64:	f7ff fea0 	bl	8013ba8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8013e68:	b002      	add	sp, #8
 8013e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e6e:	bf00      	nop
 8013e70:	2000b462 	.word	0x2000b462

08013e74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8013e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e78:	4698      	mov	r8, r3
 8013e7a:	b088      	sub	sp, #32
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	4617      	mov	r7, r2
 8013e80:	4604      	mov	r4, r0
 8013e82:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8013e86:	9306      	str	r3, [sp, #24]
 8013e88:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013e8c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8013e90:	f8ad 6010 	strh.w	r6, [sp, #16]
 8013e94:	f8ad 5012 	strh.w	r5, [sp, #18]
 8013e98:	e9cd 3100 	strd	r3, r1, [sp]
 8013e9c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013ea0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013ea4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8013ea8:	f88d 301c 	strb.w	r3, [sp, #28]
 8013eac:	f7ff fe1a 	bl	8013ae4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013eb0:	4642      	mov	r2, r8
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	4639      	mov	r1, r7
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f7ff ffc0 	bl	8013e3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013ebc:	4b16      	ldr	r3, [pc, #88]	; (8013f18 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8013ebe:	9003      	str	r0, [sp, #12]
 8013ec0:	881b      	ldrh	r3, [r3, #0]
 8013ec2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013ec6:	f7fa fedb 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 8013eca:	6803      	ldr	r3, [r0, #0]
 8013ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ece:	4798      	blx	r3
 8013ed0:	f88d 001e 	strb.w	r0, [sp, #30]
 8013ed4:	f88d 001d 	strb.w	r0, [sp, #29]
 8013ed8:	b106      	cbz	r6, 8013edc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8013eda:	b935      	cbnz	r5, 8013eea <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8013edc:	4b0f      	ldr	r3, [pc, #60]	; (8013f1c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8013ede:	f240 11cd 	movw	r1, #461	; 0x1cd
 8013ee2:	4a0f      	ldr	r2, [pc, #60]	; (8013f20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8013ee4:	480f      	ldr	r0, [pc, #60]	; (8013f24 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8013ee6:	f00e fcdb 	bl	80228a0 <__assert_func>
 8013eea:	6823      	ldr	r3, [r4, #0]
 8013eec:	4620      	mov	r0, r4
 8013eee:	9d00      	ldr	r5, [sp, #0]
 8013ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ef2:	4798      	blx	r3
 8013ef4:	4228      	tst	r0, r5
 8013ef6:	d104      	bne.n	8013f02 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8013ef8:	4b0b      	ldr	r3, [pc, #44]	; (8013f28 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8013efa:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8013efe:	4a08      	ldr	r2, [pc, #32]	; (8013f20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8013f00:	e7f0      	b.n	8013ee4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8013f02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f04:	4669      	mov	r1, sp
 8013f06:	6860      	ldr	r0, [r4, #4]
 8013f08:	9306      	str	r3, [sp, #24]
 8013f0a:	6803      	ldr	r3, [r0, #0]
 8013f0c:	685b      	ldr	r3, [r3, #4]
 8013f0e:	4798      	blx	r3
 8013f10:	b008      	add	sp, #32
 8013f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f16:	bf00      	nop
 8013f18:	2000b462 	.word	0x2000b462
 8013f1c:	080250b6 	.word	0x080250b6
 8013f20:	0802521c 	.word	0x0802521c
 8013f24:	0802503a 	.word	0x0802503a
 8013f28:	080250ee 	.word	0x080250ee

08013f2c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013f2c:	b570      	push	{r4, r5, r6, lr}
 8013f2e:	b08a      	sub	sp, #40	; 0x28
 8013f30:	4604      	mov	r4, r0
 8013f32:	466b      	mov	r3, sp
 8013f34:	e883 0006 	stmia.w	r3, {r1, r2}
 8013f38:	4b1f      	ldr	r3, [pc, #124]	; (8013fb8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8013f3a:	781b      	ldrb	r3, [r3, #0]
 8013f3c:	b933      	cbnz	r3, 8013f4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8013f3e:	4b1f      	ldr	r3, [pc, #124]	; (8013fbc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8013f40:	f240 11f9 	movw	r1, #505	; 0x1f9
 8013f44:	4a1e      	ldr	r2, [pc, #120]	; (8013fc0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8013f46:	481f      	ldr	r0, [pc, #124]	; (8013fc4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8013f48:	f00e fcaa 	bl	80228a0 <__assert_func>
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	f8bd 5000 	ldrh.w	r5, [sp]
 8013f52:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8013f56:	9308      	str	r3, [sp, #32]
 8013f58:	2301      	movs	r3, #1
 8013f5a:	9302      	str	r3, [sp, #8]
 8013f5c:	6803      	ldr	r3, [r0, #0]
 8013f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f60:	4798      	blx	r3
 8013f62:	4632      	mov	r2, r6
 8013f64:	4629      	mov	r1, r5
 8013f66:	4603      	mov	r3, r0
 8013f68:	4620      	mov	r0, r4
 8013f6a:	f7ff ff67 	bl	8013e3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013f6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013f70:	9003      	str	r0, [sp, #12]
 8013f72:	9305      	str	r3, [sp, #20]
 8013f74:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013f78:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013f7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013f80:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013f84:	4b10      	ldr	r3, [pc, #64]	; (8013fc8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8013f86:	881b      	ldrh	r3, [r3, #0]
 8013f88:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013f8c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013f90:	f7fa fe76 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 8013f94:	6803      	ldr	r3, [r0, #0]
 8013f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f98:	4798      	blx	r3
 8013f9a:	23ff      	movs	r3, #255	; 0xff
 8013f9c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8013fa0:	a902      	add	r1, sp, #8
 8013fa2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8013fa6:	6860      	ldr	r0, [r4, #4]
 8013fa8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013fac:	6803      	ldr	r3, [r0, #0]
 8013fae:	685b      	ldr	r3, [r3, #4]
 8013fb0:	4798      	blx	r3
 8013fb2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013fb4:	b00a      	add	sp, #40	; 0x28
 8013fb6:	bd70      	pop	{r4, r5, r6, pc}
 8013fb8:	2000b467 	.word	0x2000b467
 8013fbc:	08024f87 	.word	0x08024f87
 8013fc0:	080252c0 	.word	0x080252c0
 8013fc4:	0802503a 	.word	0x0802503a
 8013fc8:	2000b462 	.word	0x2000b462

08013fcc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fce:	b08b      	sub	sp, #44	; 0x2c
 8013fd0:	4604      	mov	r4, r0
 8013fd2:	466d      	mov	r5, sp
 8013fd4:	e885 0006 	stmia.w	r5, {r1, r2}
 8013fd8:	461d      	mov	r5, r3
 8013fda:	2300      	movs	r3, #0
 8013fdc:	f8bd 6000 	ldrh.w	r6, [sp]
 8013fe0:	9308      	str	r3, [sp, #32]
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013fe8:	9302      	str	r3, [sp, #8]
 8013fea:	6803      	ldr	r3, [r0, #0]
 8013fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fee:	4798      	blx	r3
 8013ff0:	463a      	mov	r2, r7
 8013ff2:	4631      	mov	r1, r6
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	f7ff ff20 	bl	8013e3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013ffc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014000:	9003      	str	r0, [sp, #12]
 8014002:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014006:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801400a:	9505      	str	r5, [sp, #20]
 801400c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014010:	4b0d      	ldr	r3, [pc, #52]	; (8014048 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8014012:	881b      	ldrh	r3, [r3, #0]
 8014014:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014018:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801401a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801401e:	f7fa fe2f 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 8014022:	6803      	ldr	r3, [r0, #0]
 8014024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014026:	4798      	blx	r3
 8014028:	23ff      	movs	r3, #255	; 0xff
 801402a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801402e:	a902      	add	r1, sp, #8
 8014030:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8014034:	6860      	ldr	r0, [r4, #4]
 8014036:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801403a:	6803      	ldr	r3, [r0, #0]
 801403c:	685b      	ldr	r3, [r3, #4]
 801403e:	4798      	blx	r3
 8014040:	4628      	mov	r0, r5
 8014042:	b00b      	add	sp, #44	; 0x2c
 8014044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014046:	bf00      	nop
 8014048:	2000b462 	.word	0x2000b462

0801404c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801404c:	b570      	push	{r4, r5, r6, lr}
 801404e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8014052:	4604      	mov	r4, r0
 8014054:	b19b      	cbz	r3, 801407e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014056:	2002      	movs	r0, #2
 8014058:	f7fc fff2 	bl	8011040 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801405c:	2300      	movs	r3, #0
 801405e:	4620      	mov	r0, r4
 8014060:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014064:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8014068:	6823      	ldr	r3, [r4, #0]
 801406a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801406e:	f7ff fd39 	bl	8013ae4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014072:	4601      	mov	r1, r0
 8014074:	4620      	mov	r0, r4
 8014076:	462b      	mov	r3, r5
 8014078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801407c:	4718      	bx	r3
 801407e:	bd70      	pop	{r4, r5, r6, pc}

08014080 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8014080:	4770      	bx	lr

08014082 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8014082:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014086:	1a13      	subs	r3, r2, r0
 8014088:	4258      	negs	r0, r3
 801408a:	4158      	adcs	r0, r3
 801408c:	4770      	bx	lr

0801408e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801408e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8014092:	1a9b      	subs	r3, r3, r2
 8014094:	2b00      	cmp	r3, #0
 8014096:	bfdc      	itt	le
 8014098:	6882      	ldrle	r2, [r0, #8]
 801409a:	189b      	addle	r3, r3, r2
 801409c:	2b01      	cmp	r3, #1
 801409e:	bfcc      	ite	gt
 80140a0:	2000      	movgt	r0, #0
 80140a2:	2001      	movle	r0, #1
 80140a4:	4770      	bx	lr

080140a6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80140a6:	6902      	ldr	r2, [r0, #16]
 80140a8:	6840      	ldr	r0, [r0, #4]
 80140aa:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80140ae:	4770      	bx	lr

080140b0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80140b0:	6803      	ldr	r3, [r0, #0]
 80140b2:	691b      	ldr	r3, [r3, #16]
 80140b4:	4718      	bx	r3

080140b6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80140b6:	4770      	bx	lr

080140b8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80140b8:	4770      	bx	lr
	...

080140bc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80140bc:	2301      	movs	r3, #1
 80140be:	b570      	push	{r4, r5, r6, lr}
 80140c0:	7203      	strb	r3, [r0, #8]
 80140c2:	4604      	mov	r4, r0
 80140c4:	6840      	ldr	r0, [r0, #4]
 80140c6:	6803      	ldr	r3, [r0, #0]
 80140c8:	699b      	ldr	r3, [r3, #24]
 80140ca:	4798      	blx	r3
 80140cc:	6803      	ldr	r3, [r0, #0]
 80140ce:	4605      	mov	r5, r0
 80140d0:	2b08      	cmp	r3, #8
 80140d2:	d01e      	beq.n	8014112 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80140d4:	d80b      	bhi.n	80140ee <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80140d6:	2b02      	cmp	r3, #2
 80140d8:	d027      	beq.n	801412a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80140da:	2b04      	cmp	r3, #4
 80140dc:	d011      	beq.n	8014102 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80140de:	2b01      	cmp	r3, #1
 80140e0:	d028      	beq.n	8014134 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80140e2:	4b17      	ldr	r3, [pc, #92]	; (8014140 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80140e4:	218b      	movs	r1, #139	; 0x8b
 80140e6:	4a17      	ldr	r2, [pc, #92]	; (8014144 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80140e8:	4817      	ldr	r0, [pc, #92]	; (8014148 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80140ea:	f00e fbd9 	bl	80228a0 <__assert_func>
 80140ee:	2b40      	cmp	r3, #64	; 0x40
 80140f0:	d020      	beq.n	8014134 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80140f2:	d801      	bhi.n	80140f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80140f4:	2b20      	cmp	r3, #32
 80140f6:	e7f3      	b.n	80140e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80140f8:	2b80      	cmp	r3, #128	; 0x80
 80140fa:	d01b      	beq.n	8014134 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80140fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014100:	e7ee      	b.n	80140e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8014102:	6823      	ldr	r3, [r4, #0]
 8014104:	7f01      	ldrb	r1, [r0, #28]
 8014106:	4620      	mov	r0, r4
 8014108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801410a:	4798      	blx	r3
 801410c:	6823      	ldr	r3, [r4, #0]
 801410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014110:	e006      	b.n	8014120 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014112:	6823      	ldr	r3, [r4, #0]
 8014114:	7f01      	ldrb	r1, [r0, #28]
 8014116:	4620      	mov	r0, r4
 8014118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801411a:	4798      	blx	r3
 801411c:	6823      	ldr	r3, [r4, #0]
 801411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014120:	4629      	mov	r1, r5
 8014122:	4620      	mov	r0, r4
 8014124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014128:	4718      	bx	r3
 801412a:	6823      	ldr	r3, [r4, #0]
 801412c:	4620      	mov	r0, r4
 801412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014130:	4798      	blx	r3
 8014132:	e7f3      	b.n	801411c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8014134:	6823      	ldr	r3, [r4, #0]
 8014136:	4620      	mov	r0, r4
 8014138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801413a:	4798      	blx	r3
 801413c:	e7e6      	b.n	801410c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801413e:	bf00      	nop
 8014140:	08025511 	.word	0x08025511
 8014144:	08025620 	.word	0x08025620
 8014148:	08025536 	.word	0x08025536

0801414c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801414c:	b570      	push	{r4, r5, r6, lr}
 801414e:	4604      	mov	r4, r0
 8014150:	460e      	mov	r6, r1
 8014152:	6860      	ldr	r0, [r4, #4]
 8014154:	6803      	ldr	r3, [r0, #0]
 8014156:	685b      	ldr	r3, [r3, #4]
 8014158:	4798      	blx	r3
 801415a:	2800      	cmp	r0, #0
 801415c:	d1f9      	bne.n	8014152 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801415e:	4d0b      	ldr	r5, [pc, #44]	; (801418c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8014160:	6828      	ldr	r0, [r5, #0]
 8014162:	6803      	ldr	r3, [r0, #0]
 8014164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014166:	4798      	blx	r3
 8014168:	f7fd fa1e 	bl	80115a8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801416c:	6860      	ldr	r0, [r4, #4]
 801416e:	4631      	mov	r1, r6
 8014170:	6803      	ldr	r3, [r0, #0]
 8014172:	689b      	ldr	r3, [r3, #8]
 8014174:	4798      	blx	r3
 8014176:	6823      	ldr	r3, [r4, #0]
 8014178:	4620      	mov	r0, r4
 801417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801417c:	4798      	blx	r3
 801417e:	6828      	ldr	r0, [r5, #0]
 8014180:	6803      	ldr	r3, [r0, #0]
 8014182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014188:	4718      	bx	r3
 801418a:	bf00      	nop
 801418c:	2000b468 	.word	0x2000b468

08014190 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014190:	b508      	push	{r3, lr}
 8014192:	f7fd f9ed 	bl	8011570 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801419a:	f7fd b9f7 	b.w	801158c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801419e <_ZN8touchgfx13DMA_Interface5startEv>:
 801419e:	b510      	push	{r4, lr}
 80141a0:	4604      	mov	r4, r0
 80141a2:	6840      	ldr	r0, [r0, #4]
 80141a4:	6803      	ldr	r3, [r0, #0]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	4798      	blx	r3
 80141aa:	b948      	cbnz	r0, 80141c0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80141ac:	7a63      	ldrb	r3, [r4, #9]
 80141ae:	b13b      	cbz	r3, 80141c0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80141b0:	7a23      	ldrb	r3, [r4, #8]
 80141b2:	b92b      	cbnz	r3, 80141c0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80141b4:	6823      	ldr	r3, [r4, #0]
 80141b6:	4620      	mov	r0, r4
 80141b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141be:	4718      	bx	r3
 80141c0:	bd10      	pop	{r4, pc}
	...

080141c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80141c4:	b510      	push	{r4, lr}
 80141c6:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80141ca:	1b12      	subs	r2, r2, r4
 80141cc:	2a00      	cmp	r2, #0
 80141ce:	bfdc      	itt	le
 80141d0:	6883      	ldrle	r3, [r0, #8]
 80141d2:	18d2      	addle	r2, r2, r3
 80141d4:	2a01      	cmp	r2, #1
 80141d6:	dd18      	ble.n	801420a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80141d8:	6843      	ldr	r3, [r0, #4]
 80141da:	f101 021c 	add.w	r2, r1, #28
 80141de:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80141e2:	f851 4b04 	ldr.w	r4, [r1], #4
 80141e6:	4291      	cmp	r1, r2
 80141e8:	f843 4b04 	str.w	r4, [r3], #4
 80141ec:	d1f9      	bne.n	80141e2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80141ee:	880a      	ldrh	r2, [r1, #0]
 80141f0:	801a      	strh	r2, [r3, #0]
 80141f2:	788a      	ldrb	r2, [r1, #2]
 80141f4:	709a      	strb	r2, [r3, #2]
 80141f6:	68c3      	ldr	r3, [r0, #12]
 80141f8:	6882      	ldr	r2, [r0, #8]
 80141fa:	f3bf 8f5b 	dmb	ish
 80141fe:	3301      	adds	r3, #1
 8014200:	429a      	cmp	r2, r3
 8014202:	bfd8      	it	le
 8014204:	1a9b      	suble	r3, r3, r2
 8014206:	60c3      	str	r3, [r0, #12]
 8014208:	bd10      	pop	{r4, pc}
 801420a:	4b03      	ldr	r3, [pc, #12]	; (8014218 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801420c:	2139      	movs	r1, #57	; 0x39
 801420e:	4a03      	ldr	r2, [pc, #12]	; (801421c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8014210:	4803      	ldr	r0, [pc, #12]	; (8014220 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8014212:	f00e fb45 	bl	80228a0 <__assert_func>
 8014216:	bf00      	nop
 8014218:	0802555c 	.word	0x0802555c
 801421c:	08025650 	.word	0x08025650
 8014220:	08025536 	.word	0x08025536

08014224 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014224:	b510      	push	{r4, lr}
 8014226:	6803      	ldr	r3, [r0, #0]
 8014228:	4604      	mov	r4, r0
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	4798      	blx	r3
 801422e:	b128      	cbz	r0, 801423c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8014230:	4b07      	ldr	r3, [pc, #28]	; (8014250 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8014232:	213f      	movs	r1, #63	; 0x3f
 8014234:	4a07      	ldr	r2, [pc, #28]	; (8014254 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8014236:	4808      	ldr	r0, [pc, #32]	; (8014258 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8014238:	f00e fb32 	bl	80228a0 <__assert_func>
 801423c:	6923      	ldr	r3, [r4, #16]
 801423e:	68a2      	ldr	r2, [r4, #8]
 8014240:	f3bf 8f5b 	dmb	ish
 8014244:	3301      	adds	r3, #1
 8014246:	429a      	cmp	r2, r3
 8014248:	bfd8      	it	le
 801424a:	1a9b      	suble	r3, r3, r2
 801424c:	6123      	str	r3, [r4, #16]
 801424e:	bd10      	pop	{r4, pc}
 8014250:	0802557f 	.word	0x0802557f
 8014254:	0802569e 	.word	0x0802569e
 8014258:	08025536 	.word	0x08025536

0801425c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801425c:	b570      	push	{r4, r5, r6, lr}
 801425e:	4604      	mov	r4, r0
 8014260:	6840      	ldr	r0, [r0, #4]
 8014262:	6803      	ldr	r3, [r0, #0]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	4798      	blx	r3
 8014268:	4605      	mov	r5, r0
 801426a:	b930      	cbnz	r0, 801427a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801426c:	7a23      	ldrb	r3, [r4, #8]
 801426e:	b123      	cbz	r3, 801427a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014270:	6860      	ldr	r0, [r4, #4]
 8014272:	6803      	ldr	r3, [r0, #0]
 8014274:	695b      	ldr	r3, [r3, #20]
 8014276:	4798      	blx	r3
 8014278:	7225      	strb	r5, [r4, #8]
 801427a:	6860      	ldr	r0, [r4, #4]
 801427c:	6803      	ldr	r3, [r0, #0]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	4798      	blx	r3
 8014282:	b928      	cbnz	r0, 8014290 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014284:	6823      	ldr	r3, [r4, #0]
 8014286:	4620      	mov	r0, r4
 8014288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801428a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801428e:	4718      	bx	r3
 8014290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014294:	f7fd b994 	b.w	80115c0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08014298 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014298:	b510      	push	{r4, lr}
 801429a:	6082      	str	r2, [r0, #8]
 801429c:	2200      	movs	r2, #0
 801429e:	4c03      	ldr	r4, [pc, #12]	; (80142ac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80142a0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80142a4:	e9c0 4100 	strd	r4, r1, [r0]
 80142a8:	bd10      	pop	{r4, pc}
 80142aa:	bf00      	nop
 80142ac:	08025604 	.word	0x08025604

080142b0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80142b0:	6840      	ldr	r0, [r0, #4]
 80142b2:	6803      	ldr	r3, [r0, #0]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	4718      	bx	r3

080142b8 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 80142b8:	2001      	movs	r0, #1
 80142ba:	4770      	bx	lr

080142bc <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 80142bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142c0:	460d      	mov	r5, r1
 80142c2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80142c6:	b085      	sub	sp, #20
 80142c8:	4690      	mov	r8, r2
 80142ca:	4411      	add	r1, r2
 80142cc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80142d0:	4699      	mov	r9, r3
 80142d2:	6803      	ldr	r3, [r0, #0]
 80142d4:	60c1      	str	r1, [r0, #12]
 80142d6:	4604      	mov	r4, r0
 80142d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80142da:	440a      	add	r2, r1
 80142dc:	6102      	str	r2, [r0, #16]
 80142de:	68db      	ldr	r3, [r3, #12]
 80142e0:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80142e4:	4798      	blx	r3
 80142e6:	2800      	cmp	r0, #0
 80142e8:	d039      	beq.n	801435e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 80142ea:	44c8      	add	r8, r9
 80142ec:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80142f0:	4445      	add	r5, r8
 80142f2:	6823      	ldr	r3, [r4, #0]
 80142f4:	f10d 020f 	add.w	r2, sp, #15
 80142f8:	a903      	add	r1, sp, #12
 80142fa:	4620      	mov	r0, r4
 80142fc:	9200      	str	r2, [sp, #0]
 80142fe:	f10d 020d 	add.w	r2, sp, #13
 8014302:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8014306:	f10d 030e 	add.w	r3, sp, #14
 801430a:	47c0      	blx	r8
 801430c:	b1f8      	cbz	r0, 801434e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801430e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8014312:	7a20      	ldrb	r0, [r4, #8]
 8014314:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014318:	4358      	muls	r0, r3
 801431a:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801431e:	1c43      	adds	r3, r0, #1
 8014320:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8014324:	f817 0b01 	ldrb.w	r0, [r7], #1
 8014328:	121b      	asrs	r3, r3, #8
 801432a:	fb10 f003 	smulbb	r0, r0, r3
 801432e:	b283      	uxth	r3, r0
 8014330:	1c58      	adds	r0, r3, #1
 8014332:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8014336:	6823      	ldr	r3, [r4, #0]
 8014338:	1200      	asrs	r0, r0, #8
 801433a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801433e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8014342:	28ff      	cmp	r0, #255	; 0xff
 8014344:	d10e      	bne.n	8014364 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8014346:	9100      	str	r1, [sp, #0]
 8014348:	4629      	mov	r1, r5
 801434a:	4620      	mov	r0, r4
 801434c:	47c0      	blx	r8
 801434e:	68e3      	ldr	r3, [r4, #12]
 8014350:	3e01      	subs	r6, #1
 8014352:	f105 0503 	add.w	r5, r5, #3
 8014356:	f103 0301 	add.w	r3, r3, #1
 801435a:	60e3      	str	r3, [r4, #12]
 801435c:	d1c9      	bne.n	80142f2 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801435e:	b005      	add	sp, #20
 8014360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014364:	fa1f fc80 	uxth.w	ip, r0
 8014368:	43c0      	mvns	r0, r0
 801436a:	f895 e002 	ldrb.w	lr, [r5, #2]
 801436e:	fb12 f20c 	smulbb	r2, r2, ip
 8014372:	b2c0      	uxtb	r0, r0
 8014374:	fb13 f30c 	smulbb	r3, r3, ip
 8014378:	fb0e 2200 	mla	r2, lr, r0, r2
 801437c:	f895 e001 	ldrb.w	lr, [r5, #1]
 8014380:	fb11 f10c 	smulbb	r1, r1, ip
 8014384:	fb0e 3300 	mla	r3, lr, r0, r3
 8014388:	f895 e000 	ldrb.w	lr, [r5]
 801438c:	b292      	uxth	r2, r2
 801438e:	b29b      	uxth	r3, r3
 8014390:	fb0e 1000 	mla	r0, lr, r0, r1
 8014394:	1c59      	adds	r1, r3, #1
 8014396:	b280      	uxth	r0, r0
 8014398:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801439c:	1c51      	adds	r1, r2, #1
 801439e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80143a2:	1c41      	adds	r1, r0, #1
 80143a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80143a8:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80143ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80143b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80143b4:	9000      	str	r0, [sp, #0]
 80143b6:	e7c7      	b.n	8014348 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

080143b8 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 80143b8:	f89d 0000 	ldrb.w	r0, [sp]
 80143bc:	704b      	strb	r3, [r1, #1]
 80143be:	7008      	strb	r0, [r1, #0]
 80143c0:	708a      	strb	r2, [r1, #2]
 80143c2:	4770      	bx	lr

080143c4 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh>:
 80143c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143c8:	4617      	mov	r7, r2
 80143ca:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80143ce:	4699      	mov	r9, r3
 80143d0:	9b08      	ldr	r3, [sp, #32]
 80143d2:	443a      	add	r2, r7
 80143d4:	4605      	mov	r5, r0
 80143d6:	4688      	mov	r8, r1
 80143d8:	60c2      	str	r2, [r0, #12]
 80143da:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80143de:	441a      	add	r2, r3
 80143e0:	6803      	ldr	r3, [r0, #0]
 80143e2:	6102      	str	r2, [r0, #16]
 80143e4:	68db      	ldr	r3, [r3, #12]
 80143e6:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 80143ea:	4798      	blx	r3
 80143ec:	b388      	cbz	r0, 8014452 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x8e>
 80143ee:	68eb      	ldr	r3, [r5, #12]
 80143f0:	444f      	add	r7, r9
 80143f2:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
 80143f6:	18f1      	adds	r1, r6, r3
 80143f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80143fc:	4291      	cmp	r1, r2
 80143fe:	eb08 0107 	add.w	r1, r8, r7
 8014402:	f895 7026 	ldrb.w	r7, [r5, #38]	; 0x26
 8014406:	bfc8      	it	gt
 8014408:	1ad6      	subgt	r6, r2, r3
 801440a:	7a2b      	ldrb	r3, [r5, #8]
 801440c:	437b      	muls	r3, r7
 801440e:	1c5f      	adds	r7, r3, #1
 8014410:	eb07 2713 	add.w	r7, r7, r3, lsr #8
 8014414:	69ab      	ldr	r3, [r5, #24]
 8014416:	123f      	asrs	r7, r7, #8
 8014418:	2b00      	cmp	r3, #0
 801441a:	f000 8093 	beq.w	8014544 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x180>
 801441e:	2fff      	cmp	r7, #255	; 0xff
 8014420:	f103 0303 	add.w	r3, r3, #3
 8014424:	4426      	add	r6, r4
 8014426:	d145      	bne.n	80144b4 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0xf0>
 8014428:	f814 2b01 	ldrb.w	r2, [r4], #1
 801442c:	3103      	adds	r1, #3
 801442e:	f813 7c03 	ldrb.w	r7, [r3, #-3]
 8014432:	2aff      	cmp	r2, #255	; 0xff
 8014434:	d10f      	bne.n	8014456 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x92>
 8014436:	f801 7c03 	strb.w	r7, [r1, #-3]
 801443a:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801443e:	f801 2c02 	strb.w	r2, [r1, #-2]
 8014442:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8014446:	f801 2c01 	strb.w	r2, [r1, #-1]
 801444a:	42b4      	cmp	r4, r6
 801444c:	f103 0303 	add.w	r3, r3, #3
 8014450:	d1ea      	bne.n	8014428 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x64>
 8014452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014456:	b290      	uxth	r0, r2
 8014458:	43d2      	mvns	r2, r2
 801445a:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801445e:	fb17 f700 	smulbb	r7, r7, r0
 8014462:	b2d2      	uxtb	r2, r2
 8014464:	fb05 7502 	mla	r5, r5, r2, r7
 8014468:	b2ad      	uxth	r5, r5
 801446a:	1c6f      	adds	r7, r5, #1
 801446c:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8014470:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 8014474:	fb17 f702 	smulbb	r7, r7, r2
 8014478:	122d      	asrs	r5, r5, #8
 801447a:	f801 5c03 	strb.w	r5, [r1, #-3]
 801447e:	f813 5c02 	ldrb.w	r5, [r3, #-2]
 8014482:	fb05 7500 	mla	r5, r5, r0, r7
 8014486:	b2ad      	uxth	r5, r5
 8014488:	1c6f      	adds	r7, r5, #1
 801448a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801448e:	122d      	asrs	r5, r5, #8
 8014490:	f801 5c02 	strb.w	r5, [r1, #-2]
 8014494:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8014498:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 801449c:	fb15 f202 	smulbb	r2, r5, r2
 80144a0:	fb07 2000 	mla	r0, r7, r0, r2
 80144a4:	b280      	uxth	r0, r0
 80144a6:	1c42      	adds	r2, r0, #1
 80144a8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80144ac:	1200      	asrs	r0, r0, #8
 80144ae:	f801 0c01 	strb.w	r0, [r1, #-1]
 80144b2:	e7ca      	b.n	801444a <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x86>
 80144b4:	3103      	adds	r1, #3
 80144b6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80144ba:	3303      	adds	r3, #3
 80144bc:	f811 cc03 	ldrb.w	ip, [r1, #-3]
 80144c0:	3103      	adds	r1, #3
 80144c2:	fb15 f507 	smulbb	r5, r5, r7
 80144c6:	42b4      	cmp	r4, r6
 80144c8:	b2a8      	uxth	r0, r5
 80144ca:	f100 0501 	add.w	r5, r0, #1
 80144ce:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80144d2:	ea4f 2525 	mov.w	r5, r5, asr #8
 80144d6:	b2aa      	uxth	r2, r5
 80144d8:	ea6f 0505 	mvn.w	r5, r5
 80144dc:	b2e8      	uxtb	r0, r5
 80144de:	f813 5c06 	ldrb.w	r5, [r3, #-6]
 80144e2:	fb1c fc00 	smulbb	ip, ip, r0
 80144e6:	fb05 c502 	mla	r5, r5, r2, ip
 80144ea:	b2ad      	uxth	r5, r5
 80144ec:	f105 0c01 	add.w	ip, r5, #1
 80144f0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80144f4:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 80144f8:	fb1c fc00 	smulbb	ip, ip, r0
 80144fc:	ea4f 2525 	mov.w	r5, r5, asr #8
 8014500:	f801 5c06 	strb.w	r5, [r1, #-6]
 8014504:	f813 5c05 	ldrb.w	r5, [r3, #-5]
 8014508:	fb05 c502 	mla	r5, r5, r2, ip
 801450c:	b2ad      	uxth	r5, r5
 801450e:	f105 0c01 	add.w	ip, r5, #1
 8014512:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8014516:	ea4f 2525 	mov.w	r5, r5, asr #8
 801451a:	f801 5c05 	strb.w	r5, [r1, #-5]
 801451e:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 8014522:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 8014526:	fb15 f000 	smulbb	r0, r5, r0
 801452a:	fb0c 0002 	mla	r0, ip, r2, r0
 801452e:	b280      	uxth	r0, r0
 8014530:	f100 0201 	add.w	r2, r0, #1
 8014534:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8014538:	ea4f 2020 	mov.w	r0, r0, asr #8
 801453c:	f801 0c04 	strb.w	r0, [r1, #-4]
 8014540:	d1b9      	bne.n	80144b6 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0xf2>
 8014542:	e786      	b.n	8014452 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x8e>
 8014544:	696d      	ldr	r5, [r5, #20]
 8014546:	2d00      	cmp	r5, #0
 8014548:	d083      	beq.n	8014452 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x8e>
 801454a:	2fff      	cmp	r7, #255	; 0xff
 801454c:	4426      	add	r6, r4
 801454e:	d145      	bne.n	80145dc <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x218>
 8014550:	682a      	ldr	r2, [r5, #0]
 8014552:	3103      	adds	r1, #3
 8014554:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014558:	0e10      	lsrs	r0, r2, #24
 801455a:	b2d2      	uxtb	r2, r2
 801455c:	4358      	muls	r0, r3
 801455e:	1c43      	adds	r3, r0, #1
 8014560:	eb03 2320 	add.w	r3, r3, r0, asr #8
 8014564:	121b      	asrs	r3, r3, #8
 8014566:	2bff      	cmp	r3, #255	; 0xff
 8014568:	d10d      	bne.n	8014586 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x1c2>
 801456a:	f801 2c03 	strb.w	r2, [r1, #-3]
 801456e:	682b      	ldr	r3, [r5, #0]
 8014570:	0a1b      	lsrs	r3, r3, #8
 8014572:	f801 3c02 	strb.w	r3, [r1, #-2]
 8014576:	886b      	ldrh	r3, [r5, #2]
 8014578:	42b4      	cmp	r4, r6
 801457a:	f801 3c01 	strb.w	r3, [r1, #-1]
 801457e:	f105 0504 	add.w	r5, r5, #4
 8014582:	d1e5      	bne.n	8014550 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x18c>
 8014584:	e765      	b.n	8014452 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x8e>
 8014586:	b298      	uxth	r0, r3
 8014588:	43db      	mvns	r3, r3
 801458a:	f811 7c03 	ldrb.w	r7, [r1, #-3]
 801458e:	fb12 f200 	smulbb	r2, r2, r0
 8014592:	b2db      	uxtb	r3, r3
 8014594:	fb07 2203 	mla	r2, r7, r3, r2
 8014598:	b292      	uxth	r2, r2
 801459a:	1c57      	adds	r7, r2, #1
 801459c:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 80145a0:	1212      	asrs	r2, r2, #8
 80145a2:	f801 2c03 	strb.w	r2, [r1, #-3]
 80145a6:	786a      	ldrb	r2, [r5, #1]
 80145a8:	fb12 f700 	smulbb	r7, r2, r0
 80145ac:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80145b0:	fb02 7203 	mla	r2, r2, r3, r7
 80145b4:	b292      	uxth	r2, r2
 80145b6:	1c57      	adds	r7, r2, #1
 80145b8:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 80145bc:	1212      	asrs	r2, r2, #8
 80145be:	f801 2c02 	strb.w	r2, [r1, #-2]
 80145c2:	78aa      	ldrb	r2, [r5, #2]
 80145c4:	fb12 f000 	smulbb	r0, r2, r0
 80145c8:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80145cc:	fb02 0303 	mla	r3, r2, r3, r0
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	1c5a      	adds	r2, r3, #1
 80145d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80145d8:	121b      	asrs	r3, r3, #8
 80145da:	e7cd      	b.n	8014578 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x1b4>
 80145dc:	3103      	adds	r1, #3
 80145de:	f8d5 e000 	ldr.w	lr, [r5]
 80145e2:	ea4f 631e 	mov.w	r3, lr, lsr #24
 80145e6:	fb13 f307 	smulbb	r3, r3, r7
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	1c58      	adds	r0, r3, #1
 80145ee:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80145f2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80145f6:	121b      	asrs	r3, r3, #8
 80145f8:	fb10 f003 	smulbb	r0, r0, r3
 80145fc:	b283      	uxth	r3, r0
 80145fe:	1c58      	adds	r0, r3, #1
 8014600:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8014604:	1200      	asrs	r0, r0, #8
 8014606:	d02e      	beq.n	8014666 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x2a2>
 8014608:	b283      	uxth	r3, r0
 801460a:	43c0      	mvns	r0, r0
 801460c:	fa5f fe8e 	uxtb.w	lr, lr
 8014610:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 8014614:	fa5f fc80 	uxtb.w	ip, r0
 8014618:	fb1e fe03 	smulbb	lr, lr, r3
 801461c:	fb02 e20c 	mla	r2, r2, ip, lr
 8014620:	b292      	uxth	r2, r2
 8014622:	1c50      	adds	r0, r2, #1
 8014624:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8014628:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 801462c:	fb10 f00c 	smulbb	r0, r0, ip
 8014630:	1212      	asrs	r2, r2, #8
 8014632:	f801 2c03 	strb.w	r2, [r1, #-3]
 8014636:	786a      	ldrb	r2, [r5, #1]
 8014638:	fb02 0203 	mla	r2, r2, r3, r0
 801463c:	b292      	uxth	r2, r2
 801463e:	1c50      	adds	r0, r2, #1
 8014640:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8014644:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8014648:	fb10 f00c 	smulbb	r0, r0, ip
 801464c:	1212      	asrs	r2, r2, #8
 801464e:	f801 2c02 	strb.w	r2, [r1, #-2]
 8014652:	78aa      	ldrb	r2, [r5, #2]
 8014654:	fb02 0003 	mla	r0, r2, r3, r0
 8014658:	b280      	uxth	r0, r0
 801465a:	1c43      	adds	r3, r0, #1
 801465c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8014660:	1200      	asrs	r0, r0, #8
 8014662:	f801 0c01 	strb.w	r0, [r1, #-1]
 8014666:	42b4      	cmp	r4, r6
 8014668:	f105 0504 	add.w	r5, r5, #4
 801466c:	f101 0103 	add.w	r1, r1, #3
 8014670:	d1b5      	bne.n	80145de <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x21a>
 8014672:	e6ee      	b.n	8014452 <_ZN8touchgfx19PainterRGB888Bitmap6renderEPhiiijPKh+0x8e>

08014674 <_ZN8touchgfx19PainterRGB888Bitmap10renderNextERhS1_S1_S1_>:
 8014674:	b570      	push	{r4, r5, r6, lr}
 8014676:	f9b0 5022 	ldrsh.w	r5, [r0, #34]	; 0x22
 801467a:	68c6      	ldr	r6, [r0, #12]
 801467c:	9c04      	ldr	r4, [sp, #16]
 801467e:	42ae      	cmp	r6, r5
 8014680:	da2a      	bge.n	80146d8 <_ZN8touchgfx19PainterRGB888Bitmap10renderNextERhS1_S1_S1_+0x64>
 8014682:	6945      	ldr	r5, [r0, #20]
 8014684:	b1a5      	cbz	r5, 80146b0 <_ZN8touchgfx19PainterRGB888Bitmap10renderNextERhS1_S1_S1_+0x3c>
 8014686:	1d2e      	adds	r6, r5, #4
 8014688:	6146      	str	r6, [r0, #20]
 801468a:	682d      	ldr	r5, [r5, #0]
 801468c:	0e2e      	lsrs	r6, r5, #24
 801468e:	7026      	strb	r6, [r4, #0]
 8014690:	0c2e      	lsrs	r6, r5, #16
 8014692:	700e      	strb	r6, [r1, #0]
 8014694:	0a29      	lsrs	r1, r5, #8
 8014696:	7011      	strb	r1, [r2, #0]
 8014698:	701d      	strb	r5, [r3, #0]
 801469a:	7823      	ldrb	r3, [r4, #0]
 801469c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80146a0:	2001      	movs	r0, #1
 80146a2:	435a      	muls	r2, r3
 80146a4:	1c53      	adds	r3, r2, #1
 80146a6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80146aa:	121b      	asrs	r3, r3, #8
 80146ac:	7023      	strb	r3, [r4, #0]
 80146ae:	bd70      	pop	{r4, r5, r6, pc}
 80146b0:	6985      	ldr	r5, [r0, #24]
 80146b2:	2d00      	cmp	r5, #0
 80146b4:	d0f1      	beq.n	801469a <_ZN8touchgfx19PainterRGB888Bitmap10renderNextERhS1_S1_S1_+0x26>
 80146b6:	1c6e      	adds	r6, r5, #1
 80146b8:	6186      	str	r6, [r0, #24]
 80146ba:	782d      	ldrb	r5, [r5, #0]
 80146bc:	701d      	strb	r5, [r3, #0]
 80146be:	6983      	ldr	r3, [r0, #24]
 80146c0:	1c5d      	adds	r5, r3, #1
 80146c2:	6185      	str	r5, [r0, #24]
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	7013      	strb	r3, [r2, #0]
 80146c8:	6983      	ldr	r3, [r0, #24]
 80146ca:	1c5a      	adds	r2, r3, #1
 80146cc:	6182      	str	r2, [r0, #24]
 80146ce:	781b      	ldrb	r3, [r3, #0]
 80146d0:	700b      	strb	r3, [r1, #0]
 80146d2:	23ff      	movs	r3, #255	; 0xff
 80146d4:	7023      	strb	r3, [r4, #0]
 80146d6:	e7e0      	b.n	801469a <_ZN8touchgfx19PainterRGB888Bitmap10renderNextERhS1_S1_S1_+0x26>
 80146d8:	2000      	movs	r0, #0
 80146da:	e7e8      	b.n	80146ae <_ZN8touchgfx19PainterRGB888Bitmap10renderNextERhS1_S1_S1_+0x3a>

080146dc <_ZNK8touchgfx6Bitmap5getIdEv>:
 80146dc:	b508      	push	{r3, lr}
 80146de:	4b05      	ldr	r3, [pc, #20]	; (80146f4 <_ZNK8touchgfx6Bitmap5getIdEv+0x18>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	b92b      	cbnz	r3, 80146f0 <_ZNK8touchgfx6Bitmap5getIdEv+0x14>
 80146e4:	4b04      	ldr	r3, [pc, #16]	; (80146f8 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>)
 80146e6:	21b8      	movs	r1, #184	; 0xb8
 80146e8:	4a04      	ldr	r2, [pc, #16]	; (80146fc <_ZNK8touchgfx6Bitmap5getIdEv+0x20>)
 80146ea:	4805      	ldr	r0, [pc, #20]	; (8014700 <_ZNK8touchgfx6Bitmap5getIdEv+0x24>)
 80146ec:	f00e f8d8 	bl	80228a0 <__assert_func>
 80146f0:	8800      	ldrh	r0, [r0, #0]
 80146f2:	bd08      	pop	{r3, pc}
 80146f4:	2000b530 	.word	0x2000b530
 80146f8:	0802588c 	.word	0x0802588c
 80146fc:	08025990 	.word	0x08025990
 8014700:	080258c8 	.word	0x080258c8

08014704 <_ZN8touchgfx19PainterRGB888Bitmap10renderInitEv>:
 8014704:	b570      	push	{r4, r5, r6, lr}
 8014706:	2300      	movs	r3, #0
 8014708:	f100 061c 	add.w	r6, r0, #28
 801470c:	4604      	mov	r4, r0
 801470e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014712:	4630      	mov	r0, r6
 8014714:	f7ff ffe2 	bl	80146dc <_ZNK8touchgfx6Bitmap5getIdEv>
 8014718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801471c:	4298      	cmp	r0, r3
 801471e:	d101      	bne.n	8014724 <_ZN8touchgfx19PainterRGB888Bitmap10renderInitEv+0x20>
 8014720:	2000      	movs	r0, #0
 8014722:	bd70      	pop	{r4, r5, r6, pc}
 8014724:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8014728:	68e2      	ldr	r2, [r4, #12]
 801472a:	429a      	cmp	r2, r3
 801472c:	daf8      	bge.n	8014720 <_ZN8touchgfx19PainterRGB888Bitmap10renderInitEv+0x1c>
 801472e:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8014732:	6922      	ldr	r2, [r4, #16]
 8014734:	429a      	cmp	r2, r3
 8014736:	daf3      	bge.n	8014720 <_ZN8touchgfx19PainterRGB888Bitmap10renderInitEv+0x1c>
 8014738:	4630      	mov	r0, r6
 801473a:	f004 fceb 	bl	8019114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801473e:	2802      	cmp	r0, #2
 8014740:	4630      	mov	r0, r6
 8014742:	d10f      	bne.n	8014764 <_ZN8touchgfx19PainterRGB888Bitmap10renderInitEv+0x60>
 8014744:	f004 fc62 	bl	801900c <_ZNK8touchgfx6Bitmap7getDataEv>
 8014748:	6160      	str	r0, [r4, #20]
 801474a:	2800      	cmp	r0, #0
 801474c:	d0e8      	beq.n	8014720 <_ZN8touchgfx19PainterRGB888Bitmap10renderInitEv+0x1c>
 801474e:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8014752:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8014756:	fb01 2303 	mla	r3, r1, r3, r2
 801475a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801475e:	6160      	str	r0, [r4, #20]
 8014760:	2001      	movs	r0, #1
 8014762:	e7de      	b.n	8014722 <_ZN8touchgfx19PainterRGB888Bitmap10renderInitEv+0x1e>
 8014764:	f004 fcd6 	bl	8019114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014768:	2801      	cmp	r0, #1
 801476a:	4605      	mov	r5, r0
 801476c:	d1d8      	bne.n	8014720 <_ZN8touchgfx19PainterRGB888Bitmap10renderInitEv+0x1c>
 801476e:	4630      	mov	r0, r6
 8014770:	f004 fc4c 	bl	801900c <_ZNK8touchgfx6Bitmap7getDataEv>
 8014774:	61a0      	str	r0, [r4, #24]
 8014776:	2800      	cmp	r0, #0
 8014778:	d0d2      	beq.n	8014720 <_ZN8touchgfx19PainterRGB888Bitmap10renderInitEv+0x1c>
 801477a:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 801477e:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 8014782:	fb01 3302 	mla	r3, r1, r2, r3
 8014786:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801478a:	4403      	add	r3, r0
 801478c:	4628      	mov	r0, r5
 801478e:	61a3      	str	r3, [r4, #24]
 8014790:	e7c7      	b.n	8014722 <_ZN8touchgfx19PainterRGB888Bitmap10renderInitEv+0x1e>
	...

08014794 <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE>:
 8014794:	b570      	push	{r4, r5, r6, lr}
 8014796:	4604      	mov	r4, r0
 8014798:	880b      	ldrh	r3, [r1, #0]
 801479a:	4605      	mov	r5, r0
 801479c:	f824 3f1c 	strh.w	r3, [r4, #28]!
 80147a0:	4620      	mov	r0, r4
 80147a2:	f7ff ff9b 	bl	80146dc <_ZNK8touchgfx6Bitmap5getIdEv>
 80147a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80147aa:	4298      	cmp	r0, r3
 80147ac:	d00f      	beq.n	80147ce <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE+0x3a>
 80147ae:	4620      	mov	r0, r4
 80147b0:	f004 fcb0 	bl	8019114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80147b4:	2801      	cmp	r0, #1
 80147b6:	d00a      	beq.n	80147ce <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE+0x3a>
 80147b8:	4620      	mov	r0, r4
 80147ba:	f004 fcab 	bl	8019114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80147be:	2802      	cmp	r0, #2
 80147c0:	d005      	beq.n	80147ce <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE+0x3a>
 80147c2:	4b0c      	ldr	r3, [pc, #48]	; (80147f4 <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE+0x60>)
 80147c4:	211e      	movs	r1, #30
 80147c6:	4a0c      	ldr	r2, [pc, #48]	; (80147f8 <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE+0x64>)
 80147c8:	480c      	ldr	r0, [pc, #48]	; (80147fc <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE+0x68>)
 80147ca:	f00e f869 	bl	80228a0 <__assert_func>
 80147ce:	4620      	mov	r0, r4
 80147d0:	f004 fb14 	bl	8018dfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80147d4:	4606      	mov	r6, r0
 80147d6:	4620      	mov	r0, r4
 80147d8:	f004 fb4a 	bl	8018e70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80147dc:	2300      	movs	r3, #0
 80147de:	84a8      	strh	r0, [r5, #36]	; 0x24
 80147e0:	f105 001e 	add.w	r0, r5, #30
 80147e4:	83eb      	strh	r3, [r5, #30]
 80147e6:	842b      	strh	r3, [r5, #32]
 80147e8:	846e      	strh	r6, [r5, #34]	; 0x22
 80147ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147ee:	f001 bedd 	b.w	80165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80147f2:	bf00      	nop
 80147f4:	080256f0 	.word	0x080256f0
 80147f8:	08025910 	.word	0x08025910
 80147fc:	080257a9 	.word	0x080257a9

08014800 <_ZN8touchgfx19PainterRGB888BitmapC1ERKNS_6BitmapEh>:
 8014800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014804:	4604      	mov	r4, r0
 8014806:	4688      	mov	r8, r1
 8014808:	4617      	mov	r7, r2
 801480a:	4d1b      	ldr	r5, [pc, #108]	; (8014878 <_ZN8touchgfx19PainterRGB888BitmapC1ERKNS_6BitmapEh+0x78>)
 801480c:	f000 fc9c 	bl	8015148 <_ZN8touchgfx15AbstractPainterC1Ev>
 8014810:	4b1a      	ldr	r3, [pc, #104]	; (801487c <_ZN8touchgfx19PainterRGB888BitmapC1ERKNS_6BitmapEh+0x7c>)
 8014812:	6023      	str	r3, [r4, #0]
 8014814:	682a      	ldr	r2, [r5, #0]
 8014816:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801481a:	b109      	cbz	r1, 8014820 <_ZN8touchgfx19PainterRGB888BitmapC1ERKNS_6BitmapEh+0x20>
 801481c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801481e:	b900      	cbnz	r0, 8014822 <_ZN8touchgfx19PainterRGB888BitmapC1ERKNS_6BitmapEh+0x22>
 8014820:	6890      	ldr	r0, [r2, #8]
 8014822:	6803      	ldr	r3, [r0, #0]
 8014824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014826:	4798      	blx	r3
 8014828:	1e43      	subs	r3, r0, #1
 801482a:	425e      	negs	r6, r3
 801482c:	415e      	adcs	r6, r3
 801482e:	682b      	ldr	r3, [r5, #0]
 8014830:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014832:	b130      	cbz	r0, 8014842 <_ZN8touchgfx19PainterRGB888BitmapC1ERKNS_6BitmapEh+0x42>
 8014834:	6803      	ldr	r3, [r0, #0]
 8014836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014838:	4798      	blx	r3
 801483a:	2801      	cmp	r0, #1
 801483c:	bf08      	it	eq
 801483e:	f046 0601 	orreq.w	r6, r6, #1
 8014842:	b92e      	cbnz	r6, 8014850 <_ZN8touchgfx19PainterRGB888BitmapC1ERKNS_6BitmapEh+0x50>
 8014844:	4b0e      	ldr	r3, [pc, #56]	; (8014880 <_ZN8touchgfx19PainterRGB888BitmapC1ERKNS_6BitmapEh+0x80>)
 8014846:	2129      	movs	r1, #41	; 0x29
 8014848:	4a0e      	ldr	r2, [pc, #56]	; (8014884 <_ZN8touchgfx19PainterRGB888BitmapC1ERKNS_6BitmapEh+0x84>)
 801484a:	480f      	ldr	r0, [pc, #60]	; (8014888 <_ZN8touchgfx19PainterRGB888BitmapC1ERKNS_6BitmapEh+0x88>)
 801484c:	f00e f828 	bl	80228a0 <__assert_func>
 8014850:	4b0e      	ldr	r3, [pc, #56]	; (801488c <_ZN8touchgfx19PainterRGB888BitmapC1ERKNS_6BitmapEh+0x8c>)
 8014852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014856:	4620      	mov	r0, r4
 8014858:	4641      	mov	r1, r8
 801485a:	6023      	str	r3, [r4, #0]
 801485c:	2300      	movs	r3, #0
 801485e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8014862:	e9c4 2307 	strd	r2, r3, [r4, #28]
 8014866:	84a3      	strh	r3, [r4, #36]	; 0x24
 8014868:	f7ff ff94 	bl	8014794 <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE>
 801486c:	f884 7026 	strb.w	r7, [r4, #38]	; 0x26
 8014870:	4620      	mov	r0, r4
 8014872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014876:	bf00      	nop
 8014878:	2000b468 	.word	0x2000b468
 801487c:	080256d8 	.word	0x080256d8
 8014880:	080257ea 	.word	0x080257ea
 8014884:	08025957 	.word	0x08025957
 8014888:	08025848 	.word	0x08025848
 801488c:	080258f8 	.word	0x080258f8

08014890 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8014890:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8014894:	4770      	bx	lr

08014896 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8014896:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801489a:	4770      	bx	lr

0801489c <_ZN8touchgfx6CircleD1Ev>:
 801489c:	4b03      	ldr	r3, [pc, #12]	; (80148ac <_ZN8touchgfx6CircleD1Ev+0x10>)
 801489e:	b510      	push	{r4, lr}
 80148a0:	4604      	mov	r4, r0
 80148a2:	6003      	str	r3, [r0, #0]
 80148a4:	f000 fd3e 	bl	8015324 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80148a8:	4620      	mov	r0, r4
 80148aa:	bd10      	pop	{r4, pc}
 80148ac:	08025a84 	.word	0x08025a84

080148b0 <_ZN8touchgfx6CircleD0Ev>:
 80148b0:	b510      	push	{r4, lr}
 80148b2:	4604      	mov	r4, r0
 80148b4:	f7ff fff2 	bl	801489c <_ZN8touchgfx6CircleD1Ev>
 80148b8:	214c      	movs	r1, #76	; 0x4c
 80148ba:	4620      	mov	r0, r4
 80148bc:	f00d ffc5 	bl	802284a <_ZdlPvj>
 80148c0:	4620      	mov	r0, r4
 80148c2:	bd10      	pop	{r4, pc}

080148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80148c4:	b507      	push	{r0, r1, r2, lr}
 80148c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80148ca:	ab01      	add	r3, sp, #4
 80148cc:	6809      	ldr	r1, [r1, #0]
 80148ce:	6800      	ldr	r0, [r0, #0]
 80148d0:	f002 fd61 	bl	8017396 <_ZN8touchgfx6muldivElllRl>
 80148d4:	b003      	add	sp, #12
 80148d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080148dc <_ZN8touchgfx7CWRUtil4sineEi>:
 80148dc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80148e0:	fb90 f3f2 	sdiv	r3, r0, r2
 80148e4:	fb03 0312 	mls	r3, r3, r2, r0
 80148e8:	4413      	add	r3, r2
 80148ea:	fb93 f0f2 	sdiv	r0, r3, r2
 80148ee:	fb02 3010 	mls	r0, r2, r0, r3
 80148f2:	4b0a      	ldr	r3, [pc, #40]	; (801491c <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80148f4:	285a      	cmp	r0, #90	; 0x5a
 80148f6:	dc02      	bgt.n	80148fe <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 80148f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80148fc:	4770      	bx	lr
 80148fe:	28b4      	cmp	r0, #180	; 0xb4
 8014900:	dc02      	bgt.n	8014908 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8014902:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8014906:	e7f7      	b.n	80148f8 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8014908:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801490c:	bfd4      	ite	le
 801490e:	38b4      	suble	r0, #180	; 0xb4
 8014910:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8014914:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014918:	4240      	negs	r0, r0
 801491a:	4770      	bx	lr
 801491c:	080259c4 	.word	0x080259c4

08014920 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8014920:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8014924:	fb90 f3f2 	sdiv	r3, r0, r2
 8014928:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801492a:	fb03 0012 	mls	r0, r3, r2, r0
 801492e:	4410      	add	r0, r2
 8014930:	fb90 f4f2 	sdiv	r4, r0, r2
 8014934:	fb02 0414 	mls	r4, r2, r4, r0
 8014938:	f004 061f 	and.w	r6, r4, #31
 801493c:	1164      	asrs	r4, r4, #5
 801493e:	4620      	mov	r0, r4
 8014940:	f7ff ffcc 	bl	80148dc <_ZN8touchgfx7CWRUtil4sineEi>
 8014944:	4605      	mov	r5, r0
 8014946:	b90e      	cbnz	r6, 801494c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8014948:	b002      	add	sp, #8
 801494a:	bd70      	pop	{r4, r5, r6, pc}
 801494c:	1c60      	adds	r0, r4, #1
 801494e:	f7ff ffc5 	bl	80148dc <_ZN8touchgfx7CWRUtil4sineEi>
 8014952:	ab01      	add	r3, sp, #4
 8014954:	2220      	movs	r2, #32
 8014956:	4631      	mov	r1, r6
 8014958:	1b40      	subs	r0, r0, r5
 801495a:	f002 fd1c 	bl	8017396 <_ZN8touchgfx6muldivElllRl>
 801495e:	4428      	add	r0, r5
 8014960:	e7f2      	b.n	8014948 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08014962 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8014962:	b508      	push	{r3, lr}
 8014964:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8014968:	f7ff ffda 	bl	8014920 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801496c:	bd08      	pop	{r3, pc}
	...

08014970 <_ZN8touchgfx6CircleC1Ev>:
 8014970:	b510      	push	{r4, lr}
 8014972:	4604      	mov	r4, r0
 8014974:	f000 fcb8 	bl	80152e8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8014978:	4b08      	ldr	r3, [pc, #32]	; (801499c <_ZN8touchgfx6CircleC1Ev+0x2c>)
 801497a:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 801497e:	4620      	mov	r0, r4
 8014980:	6023      	str	r3, [r4, #0]
 8014982:	2300      	movs	r3, #0
 8014984:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8014988:	f24b 4205 	movw	r2, #46085	; 0xb405
 801498c:	60a3      	str	r3, [r4, #8]
 801498e:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8014992:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8014996:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801499a:	bd10      	pop	{r4, pc}
 801499c:	08025a84 	.word	0x08025a84

080149a0 <_ZN8touchgfx6Circle15setCapPrecisionEi>:
 80149a0:	29b4      	cmp	r1, #180	; 0xb4
 80149a2:	bfa8      	it	ge
 80149a4:	21b4      	movge	r1, #180	; 0xb4
 80149a6:	2901      	cmp	r1, #1
 80149a8:	bfb8      	it	lt
 80149aa:	2101      	movlt	r1, #1
 80149ac:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
 80149b0:	4770      	bx	lr

080149b2 <_ZNK8touchgfx6Circle15getCapPrecisionEv>:
 80149b2:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 80149b6:	4770      	bx	lr

080149b8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 80149b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80149bc:	4606      	mov	r6, r0
 80149be:	6810      	ldr	r0, [r2, #0]
 80149c0:	4698      	mov	r8, r3
 80149c2:	4691      	mov	r9, r2
 80149c4:	460f      	mov	r7, r1
 80149c6:	f7ff ffab 	bl	8014920 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80149ca:	a902      	add	r1, sp, #8
 80149cc:	2402      	movs	r4, #2
 80149ce:	f841 0d08 	str.w	r0, [r1, #-8]!
 80149d2:	4640      	mov	r0, r8
 80149d4:	f7ff ff76 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80149d8:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80149da:	fb90 f0f4 	sdiv	r0, r0, r4
 80149de:	4405      	add	r5, r0
 80149e0:	f8d9 0000 	ldr.w	r0, [r9]
 80149e4:	f7ff ffbd 	bl	8014962 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80149e8:	a902      	add	r1, sp, #8
 80149ea:	f841 0d04 	str.w	r0, [r1, #-4]!
 80149ee:	4640      	mov	r0, r8
 80149f0:	f7ff ff68 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80149f4:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80149f6:	4629      	mov	r1, r5
 80149f8:	fb90 f0f4 	sdiv	r0, r0, r4
 80149fc:	1a12      	subs	r2, r2, r0
 80149fe:	4638      	mov	r0, r7
 8014a00:	f00c fd4b 	bl	802149a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8014a04:	b003      	add	sp, #12
 8014a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014a0a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8014a0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014a0e:	9e08      	ldr	r6, [sp, #32]
 8014a10:	4698      	mov	r8, r3
 8014a12:	4615      	mov	r5, r2
 8014a14:	460f      	mov	r7, r1
 8014a16:	6830      	ldr	r0, [r6, #0]
 8014a18:	2402      	movs	r4, #2
 8014a1a:	f7ff ff81 	bl	8014920 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014a1e:	a902      	add	r1, sp, #8
 8014a20:	f841 0d08 	str.w	r0, [r1, #-8]!
 8014a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a26:	f7ff ff4d 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a2a:	682d      	ldr	r5, [r5, #0]
 8014a2c:	fb90 f0f4 	sdiv	r0, r0, r4
 8014a30:	4405      	add	r5, r0
 8014a32:	6830      	ldr	r0, [r6, #0]
 8014a34:	f7ff ff95 	bl	8014962 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014a38:	a902      	add	r1, sp, #8
 8014a3a:	f841 0d04 	str.w	r0, [r1, #-4]!
 8014a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a40:	f7ff ff40 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a44:	f8d8 2000 	ldr.w	r2, [r8]
 8014a48:	4629      	mov	r1, r5
 8014a4a:	fb90 f0f4 	sdiv	r0, r0, r4
 8014a4e:	1a12      	subs	r2, r2, r0
 8014a50:	4638      	mov	r0, r7
 8014a52:	f00c fcb1 	bl	80213b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014a56:	b002      	add	sp, #8
 8014a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a5c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8014a5c:	b513      	push	{r0, r1, r4, lr}
 8014a5e:	e9cd 2300 	strd	r2, r3, [sp]
 8014a62:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8014a66:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8014a6a:	f7ff ffce 	bl	8014a0a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8014a6e:	b002      	add	sp, #8
 8014a70:	bd10      	pop	{r4, pc}

08014a72 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8014a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a74:	680e      	ldr	r6, [r1, #0]
 8014a76:	681f      	ldr	r7, [r3, #0]
 8014a78:	9807      	ldr	r0, [sp, #28]
 8014a7a:	42be      	cmp	r6, r7
 8014a7c:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8014a80:	bfb8      	it	lt
 8014a82:	601e      	strlt	r6, [r3, #0]
 8014a84:	680b      	ldr	r3, [r1, #0]
 8014a86:	6829      	ldr	r1, [r5, #0]
 8014a88:	428b      	cmp	r3, r1
 8014a8a:	bfc8      	it	gt
 8014a8c:	602b      	strgt	r3, [r5, #0]
 8014a8e:	6813      	ldr	r3, [r2, #0]
 8014a90:	6821      	ldr	r1, [r4, #0]
 8014a92:	428b      	cmp	r3, r1
 8014a94:	bfb8      	it	lt
 8014a96:	6023      	strlt	r3, [r4, #0]
 8014a98:	6813      	ldr	r3, [r2, #0]
 8014a9a:	6802      	ldr	r2, [r0, #0]
 8014a9c:	4293      	cmp	r3, r2
 8014a9e:	bfc8      	it	gt
 8014aa0:	6003      	strgt	r3, [r0, #0]
 8014aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014aa4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8014aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014aa8:	b089      	sub	sp, #36	; 0x24
 8014aaa:	4690      	mov	r8, r2
 8014aac:	4606      	mov	r6, r0
 8014aae:	2402      	movs	r4, #2
 8014ab0:	ad08      	add	r5, sp, #32
 8014ab2:	6808      	ldr	r0, [r1, #0]
 8014ab4:	461f      	mov	r7, r3
 8014ab6:	4689      	mov	r9, r1
 8014ab8:	f7ff ff32 	bl	8014920 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014abc:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014ac0:	4640      	mov	r0, r8
 8014ac2:	4629      	mov	r1, r5
 8014ac4:	f7ff fefe 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014ac8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8014aca:	fb90 f0f4 	sdiv	r0, r0, r4
 8014ace:	4418      	add	r0, r3
 8014ad0:	9005      	str	r0, [sp, #20]
 8014ad2:	f8d9 0000 	ldr.w	r0, [r9]
 8014ad6:	f7ff ff44 	bl	8014962 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014ada:	4629      	mov	r1, r5
 8014adc:	9007      	str	r0, [sp, #28]
 8014ade:	4640      	mov	r0, r8
 8014ae0:	f7ff fef0 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014ae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ae6:	aa08      	add	r2, sp, #32
 8014ae8:	a905      	add	r1, sp, #20
 8014aea:	fb90 f0f4 	sdiv	r0, r0, r4
 8014aee:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8014af0:	1a24      	subs	r4, r4, r0
 8014af2:	4630      	mov	r0, r6
 8014af4:	f842 4d08 	str.w	r4, [r2, #-8]!
 8014af8:	9302      	str	r3, [sp, #8]
 8014afa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014afc:	9301      	str	r3, [sp, #4]
 8014afe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b00:	9300      	str	r3, [sp, #0]
 8014b02:	463b      	mov	r3, r7
 8014b04:	f7ff ffb5 	bl	8014a72 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014b08:	b009      	add	sp, #36	; 0x24
 8014b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014b0e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8014b0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b12:	4291      	cmp	r1, r2
 8014b14:	b08d      	sub	sp, #52	; 0x34
 8014b16:	461e      	mov	r6, r3
 8014b18:	4604      	mov	r4, r0
 8014b1a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8014b1e:	ad0c      	add	r5, sp, #48	; 0x30
 8014b20:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8014b24:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8014b28:	bfc8      	it	gt
 8014b2a:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 8014b2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014b32:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8014b36:	1a9b      	subs	r3, r3, r2
 8014b38:	a907      	add	r1, sp, #28
 8014b3a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8014b3e:	bfa2      	ittt	ge
 8014b40:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8014b44:	2200      	movge	r2, #0
 8014b46:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 8014b4a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8014b4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8014b4e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014b52:	f845 3d04 	str.w	r3, [r5, #-4]!
 8014b56:	4633      	mov	r3, r6
 8014b58:	462a      	mov	r2, r5
 8014b5a:	9700      	str	r7, [sp, #0]
 8014b5c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014b60:	f7ff ffa0 	bl	8014aa4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014b64:	9b07      	ldr	r3, [sp, #28]
 8014b66:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 8014b6a:	f103 0120 	add.w	r1, r3, #32
 8014b6e:	fb91 f3f0 	sdiv	r3, r1, r0
 8014b72:	fb00 1313 	mls	r3, r0, r3, r1
 8014b76:	1ac3      	subs	r3, r0, r3
 8014b78:	fb93 f2f0 	sdiv	r2, r3, r0
 8014b7c:	fb00 3312 	mls	r3, r0, r2, r3
 8014b80:	440b      	add	r3, r1
 8014b82:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 8014b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b88:	9906      	ldr	r1, [sp, #24]
 8014b8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014b8c:	4291      	cmp	r1, r2
 8014b8e:	db11      	blt.n	8014bb4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8014b90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014b92:	4651      	mov	r1, sl
 8014b94:	9700      	str	r7, [sp, #0]
 8014b96:	4620      	mov	r0, r4
 8014b98:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014b9c:	462a      	mov	r2, r5
 8014b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ba0:	4633      	mov	r3, r6
 8014ba2:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014ba6:	f7ff ff7d 	bl	8014aa4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bac:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8014bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8014bb2:	e7e8      	b.n	8014b86 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8014bb4:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8014bb8:	4291      	cmp	r1, r2
 8014bba:	dd0c      	ble.n	8014bd6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8014bbc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014bbe:	a906      	add	r1, sp, #24
 8014bc0:	9700      	str	r7, [sp, #0]
 8014bc2:	4620      	mov	r0, r4
 8014bc4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014bc8:	462a      	mov	r2, r5
 8014bca:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bcc:	4633      	mov	r3, r6
 8014bce:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014bd2:	f7ff ff67 	bl	8014aa4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014bd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	f040 8097 	bne.w	8014d0c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 8014bde:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8014be2:	1a52      	subs	r2, r2, r1
 8014be4:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8014be8:	da0a      	bge.n	8014c00 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 8014bea:	462a      	mov	r2, r5
 8014bec:	a90a      	add	r1, sp, #40	; 0x28
 8014bee:	9700      	str	r7, [sp, #0]
 8014bf0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8014bf4:	4633      	mov	r3, r6
 8014bf6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f7ff ff52 	bl	8014aa4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014c00:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8014c04:	2bb3      	cmp	r3, #179	; 0xb3
 8014c06:	d87e      	bhi.n	8014d06 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8014c08:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8014c0c:	1a1b      	subs	r3, r3, r0
 8014c0e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8014c12:	da78      	bge.n	8014d06 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8014c14:	ad0c      	add	r5, sp, #48	; 0x30
 8014c16:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8014c1a:	f7ff fe81 	bl	8014920 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014c1e:	f04f 0a02 	mov.w	sl, #2
 8014c22:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014c26:	4658      	mov	r0, fp
 8014c28:	4629      	mov	r1, r5
 8014c2a:	f7ff fe4b 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014c2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014c30:	18c3      	adds	r3, r0, r3
 8014c32:	9807      	ldr	r0, [sp, #28]
 8014c34:	9305      	str	r3, [sp, #20]
 8014c36:	f7ff fe94 	bl	8014962 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014c3a:	4629      	mov	r1, r5
 8014c3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8014c3e:	4658      	mov	r0, fp
 8014c40:	f7ff fe40 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014c44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014c46:	9a05      	ldr	r2, [sp, #20]
 8014c48:	a90a      	add	r1, sp, #40	; 0x28
 8014c4a:	1a1b      	subs	r3, r3, r0
 8014c4c:	9700      	str	r7, [sp, #0]
 8014c4e:	4620      	mov	r0, r4
 8014c50:	9304      	str	r3, [sp, #16]
 8014c52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014c54:	fb93 f3fa 	sdiv	r3, r3, sl
 8014c58:	1ad2      	subs	r2, r2, r3
 8014c5a:	920a      	str	r2, [sp, #40]	; 0x28
 8014c5c:	9a04      	ldr	r2, [sp, #16]
 8014c5e:	1ad3      	subs	r3, r2, r3
 8014c60:	462a      	mov	r2, r5
 8014c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c64:	4633      	mov	r3, r6
 8014c66:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014c6a:	f7ff ff02 	bl	8014a72 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014c6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014c70:	9a05      	ldr	r2, [sp, #20]
 8014c72:	a90a      	add	r1, sp, #40	; 0x28
 8014c74:	4620      	mov	r0, r4
 8014c76:	9700      	str	r7, [sp, #0]
 8014c78:	fb93 f3fa 	sdiv	r3, r3, sl
 8014c7c:	189a      	adds	r2, r3, r2
 8014c7e:	920a      	str	r2, [sp, #40]	; 0x28
 8014c80:	9a04      	ldr	r2, [sp, #16]
 8014c82:	4413      	add	r3, r2
 8014c84:	462a      	mov	r2, r5
 8014c86:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c88:	4633      	mov	r3, r6
 8014c8a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014c8e:	f7ff fef0 	bl	8014a72 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014c92:	9806      	ldr	r0, [sp, #24]
 8014c94:	f7ff fe44 	bl	8014920 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014c98:	4629      	mov	r1, r5
 8014c9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8014c9c:	4658      	mov	r0, fp
 8014c9e:	f7ff fe11 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014ca2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014ca4:	18c3      	adds	r3, r0, r3
 8014ca6:	9806      	ldr	r0, [sp, #24]
 8014ca8:	9304      	str	r3, [sp, #16]
 8014caa:	f7ff fe5a 	bl	8014962 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014cae:	4629      	mov	r1, r5
 8014cb0:	900b      	str	r0, [sp, #44]	; 0x2c
 8014cb2:	4658      	mov	r0, fp
 8014cb4:	f7ff fe06 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014cba:	9a04      	ldr	r2, [sp, #16]
 8014cbc:	a90a      	add	r1, sp, #40	; 0x28
 8014cbe:	eba3 0b00 	sub.w	fp, r3, r0
 8014cc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	9700      	str	r7, [sp, #0]
 8014cc8:	fb93 f3fa 	sdiv	r3, r3, sl
 8014ccc:	1ad2      	subs	r2, r2, r3
 8014cce:	ebab 0303 	sub.w	r3, fp, r3
 8014cd2:	920a      	str	r2, [sp, #40]	; 0x28
 8014cd4:	462a      	mov	r2, r5
 8014cd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014cd8:	4633      	mov	r3, r6
 8014cda:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014cde:	f7ff fec8 	bl	8014a72 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014ce2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014ce4:	9700      	str	r7, [sp, #0]
 8014ce6:	462a      	mov	r2, r5
 8014ce8:	a90a      	add	r1, sp, #40	; 0x28
 8014cea:	4620      	mov	r0, r4
 8014cec:	fb93 fafa 	sdiv	sl, r3, sl
 8014cf0:	9b04      	ldr	r3, [sp, #16]
 8014cf2:	4453      	add	r3, sl
 8014cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8014cf6:	eb0a 030b 	add.w	r3, sl, fp
 8014cfa:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d00:	4633      	mov	r3, r6
 8014d02:	f7ff feb6 	bl	8014a72 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014d06:	b00d      	add	sp, #52	; 0x34
 8014d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014d0e:	a907      	add	r1, sp, #28
 8014d10:	9700      	str	r7, [sp, #0]
 8014d12:	4620      	mov	r0, r4
 8014d14:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8014d18:	462a      	mov	r2, r5
 8014d1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d1c:	4633      	mov	r3, r6
 8014d1e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014d22:	f7ff febf 	bl	8014aa4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014d26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014d28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014d2a:	a906      	add	r1, sp, #24
 8014d2c:	9700      	str	r7, [sp, #0]
 8014d2e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8014d32:	462a      	mov	r2, r5
 8014d34:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d36:	4633      	mov	r3, r6
 8014d38:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014d3c:	e75d      	b.n	8014bfa <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08014d3e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8014d3e:	b530      	push	{r4, r5, lr}
 8014d40:	4604      	mov	r4, r0
 8014d42:	4608      	mov	r0, r1
 8014d44:	4611      	mov	r1, r2
 8014d46:	461a      	mov	r2, r3
 8014d48:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014d4c:	b089      	sub	sp, #36	; 0x24
 8014d4e:	2500      	movs	r5, #0
 8014d50:	015b      	lsls	r3, r3, #5
 8014d52:	9505      	str	r5, [sp, #20]
 8014d54:	9304      	str	r3, [sp, #16]
 8014d56:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014d5a:	015b      	lsls	r3, r3, #5
 8014d5c:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8014d60:	ab07      	add	r3, sp, #28
 8014d62:	2520      	movs	r5, #32
 8014d64:	9302      	str	r3, [sp, #8]
 8014d66:	ab06      	add	r3, sp, #24
 8014d68:	9301      	str	r3, [sp, #4]
 8014d6a:	ab05      	add	r3, sp, #20
 8014d6c:	9300      	str	r3, [sp, #0]
 8014d6e:	ab04      	add	r3, sp, #16
 8014d70:	f7ff fecd 	bl	8014b0e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8014d74:	9a04      	ldr	r2, [sp, #16]
 8014d76:	9805      	ldr	r0, [sp, #20]
 8014d78:	9b06      	ldr	r3, [sp, #24]
 8014d7a:	9907      	ldr	r1, [sp, #28]
 8014d7c:	fb92 f2f5 	sdiv	r2, r2, r5
 8014d80:	fb90 f0f5 	sdiv	r0, r0, r5
 8014d84:	fb93 f3f5 	sdiv	r3, r3, r5
 8014d88:	fb91 f1f5 	sdiv	r1, r1, r5
 8014d8c:	b292      	uxth	r2, r2
 8014d8e:	3002      	adds	r0, #2
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	3102      	adds	r1, #2
 8014d94:	1a80      	subs	r0, r0, r2
 8014d96:	3a01      	subs	r2, #1
 8014d98:	1ac9      	subs	r1, r1, r3
 8014d9a:	3b01      	subs	r3, #1
 8014d9c:	80a0      	strh	r0, [r4, #4]
 8014d9e:	4620      	mov	r0, r4
 8014da0:	8022      	strh	r2, [r4, #0]
 8014da2:	8063      	strh	r3, [r4, #2]
 8014da4:	80e1      	strh	r1, [r4, #6]
 8014da6:	b009      	add	sp, #36	; 0x24
 8014da8:	bd30      	pop	{r4, r5, pc}

08014daa <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8014daa:	b510      	push	{r4, lr}
 8014dac:	4604      	mov	r4, r0
 8014dae:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8014db2:	f7ff ffc4 	bl	8014d3e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8014db6:	4620      	mov	r0, r4
 8014db8:	bd10      	pop	{r4, pc}

08014dba <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 8014dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dbc:	e9d1 540f 	ldrd	r5, r4, [r1, #60]	; 0x3c
 8014dc0:	4606      	mov	r6, r0
 8014dc2:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
 8014dc6:	42a5      	cmp	r5, r4
 8014dc8:	6813      	ldr	r3, [r2, #0]
 8014dca:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8014dce:	da2b      	bge.n	8014e28 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 8014dd0:	42a3      	cmp	r3, r4
 8014dd2:	dd14      	ble.n	8014dfe <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 8014dd4:	b168      	cbz	r0, 8014df2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8014dd6:	4267      	negs	r7, r4
 8014dd8:	fb97 f2f0 	sdiv	r2, r7, r0
 8014ddc:	fb00 7212 	mls	r2, r0, r2, r7
 8014de0:	1a82      	subs	r2, r0, r2
 8014de2:	fb92 f7f0 	sdiv	r7, r2, r0
 8014de6:	fb00 2017 	mls	r0, r0, r7, r2
 8014dea:	1a24      	subs	r4, r4, r0
 8014dec:	42ac      	cmp	r4, r5
 8014dee:	bfb8      	it	lt
 8014df0:	462c      	movlt	r4, r5
 8014df2:	4630      	mov	r0, r6
 8014df4:	4622      	mov	r2, r4
 8014df6:	f7ff ffa2 	bl	8014d3e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8014dfa:	4630      	mov	r0, r6
 8014dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dfe:	42ab      	cmp	r3, r5
 8014e00:	dd0e      	ble.n	8014e20 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8014e02:	b168      	cbz	r0, 8014e20 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8014e04:	425f      	negs	r7, r3
 8014e06:	fb97 f2f0 	sdiv	r2, r7, r0
 8014e0a:	fb00 7212 	mls	r2, r0, r2, r7
 8014e0e:	1a82      	subs	r2, r0, r2
 8014e10:	fb92 f7f0 	sdiv	r7, r2, r0
 8014e14:	fb00 2017 	mls	r0, r0, r7, r2
 8014e18:	1a1b      	subs	r3, r3, r0
 8014e1a:	42ab      	cmp	r3, r5
 8014e1c:	bfb8      	it	lt
 8014e1e:	462b      	movlt	r3, r5
 8014e20:	4622      	mov	r2, r4
 8014e22:	461c      	mov	r4, r3
 8014e24:	4613      	mov	r3, r2
 8014e26:	e7e4      	b.n	8014df2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8014e28:	42a3      	cmp	r3, r4
 8014e2a:	da10      	bge.n	8014e4e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8014e2c:	b148      	cbz	r0, 8014e42 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8014e2e:	fb94 f2f0 	sdiv	r2, r4, r0
 8014e32:	fb00 4212 	mls	r2, r0, r2, r4
 8014e36:	1a82      	subs	r2, r0, r2
 8014e38:	fb92 f7f0 	sdiv	r7, r2, r0
 8014e3c:	fb00 2017 	mls	r0, r0, r7, r2
 8014e40:	4404      	add	r4, r0
 8014e42:	42a5      	cmp	r5, r4
 8014e44:	bfa8      	it	ge
 8014e46:	4625      	movge	r5, r4
 8014e48:	461c      	mov	r4, r3
 8014e4a:	462b      	mov	r3, r5
 8014e4c:	e7d1      	b.n	8014df2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8014e4e:	42ab      	cmp	r3, r5
 8014e50:	dacf      	bge.n	8014df2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8014e52:	2800      	cmp	r0, #0
 8014e54:	d0cd      	beq.n	8014df2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8014e56:	fb93 f2f0 	sdiv	r2, r3, r0
 8014e5a:	fb00 3212 	mls	r2, r0, r2, r3
 8014e5e:	1a82      	subs	r2, r0, r2
 8014e60:	fb92 f7f0 	sdiv	r7, r2, r0
 8014e64:	fb00 2017 	mls	r0, r0, r7, r2
 8014e68:	4403      	add	r3, r0
 8014e6a:	42ab      	cmp	r3, r5
 8014e6c:	bfa8      	it	ge
 8014e6e:	462b      	movge	r3, r5
 8014e70:	e7bf      	b.n	8014df2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08014e72 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8014e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e76:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8014e78:	b0b8      	sub	sp, #224	; 0xe0
 8014e7a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014e7c:	4604      	mov	r4, r0
 8014e7e:	9302      	str	r3, [sp, #8]
 8014e80:	460f      	mov	r7, r1
 8014e82:	4293      	cmp	r3, r2
 8014e84:	9203      	str	r2, [sp, #12]
 8014e86:	ae09      	add	r6, sp, #36	; 0x24
 8014e88:	bfc8      	it	gt
 8014e8a:	e9cd 2302 	strdgt	r2, r3, [sp, #8]
 8014e8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e92:	1a9b      	subs	r3, r3, r2
 8014e94:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8014e98:	bfa2      	ittt	ge
 8014e9a:	2200      	movge	r2, #0
 8014e9c:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8014ea0:	e9cd 2302 	strdge	r2, r3, [sp, #8]
 8014ea4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014ea6:	2a00      	cmp	r2, #0
 8014ea8:	d131      	bne.n	8014f0e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8014eaa:	463a      	mov	r2, r7
 8014eac:	4621      	mov	r1, r4
 8014eae:	a80a      	add	r0, sp, #40	; 0x28
 8014eb0:	f00c f92a 	bl	8021108 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8014eb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014eb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014eb8:	9204      	str	r2, [sp, #16]
 8014eba:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8014ebe:	9305      	str	r3, [sp, #20]
 8014ec0:	dc6f      	bgt.n	8014fa2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 8014ec2:	9b02      	ldr	r3, [sp, #8]
 8014ec4:	a90a      	add	r1, sp, #40	; 0x28
 8014ec6:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8014eca:	4620      	mov	r0, r4
 8014ecc:	9306      	str	r3, [sp, #24]
 8014ece:	016d      	lsls	r5, r5, #5
 8014ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ed4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014ed8:	aa06      	add	r2, sp, #24
 8014eda:	9309      	str	r3, [sp, #36]	; 0x24
 8014edc:	4633      	mov	r3, r6
 8014ede:	f7ff fd6b 	bl	80149b8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8014ee2:	9f06      	ldr	r7, [sp, #24]
 8014ee4:	2d00      	cmp	r5, #0
 8014ee6:	d165      	bne.n	8014fb4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8014ee8:	3720      	adds	r7, #32
 8014eea:	4639      	mov	r1, r7
 8014eec:	9a03      	ldr	r2, [sp, #12]
 8014eee:	9b05      	ldr	r3, [sp, #20]
 8014ef0:	442f      	add	r7, r5
 8014ef2:	4291      	cmp	r1, r2
 8014ef4:	dc6b      	bgt.n	8014fce <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 8014ef6:	9a04      	ldr	r2, [sp, #16]
 8014ef8:	4620      	mov	r0, r4
 8014efa:	9106      	str	r1, [sp, #24]
 8014efc:	a90a      	add	r1, sp, #40	; 0x28
 8014efe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014f02:	aa06      	add	r2, sp, #24
 8014f04:	9309      	str	r3, [sp, #36]	; 0x24
 8014f06:	4633      	mov	r3, r6
 8014f08:	f7ff fda8 	bl	8014a5c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8014f0c:	e7ed      	b.n	8014eea <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8014f0e:	f9b1 c000 	ldrsh.w	ip, [r1]
 8014f12:	88bd      	ldrh	r5, [r7, #4]
 8014f14:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8014f18:	4465      	add	r5, ip
 8014f1a:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8014f1e:	b22d      	sxth	r5, r5
 8014f20:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8014f24:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8014f28:	2d00      	cmp	r5, #0
 8014f2a:	bfb8      	it	lt
 8014f2c:	426d      	neglt	r5, r5
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	bfb8      	it	lt
 8014f32:	425b      	neglt	r3, r3
 8014f34:	429d      	cmp	r5, r3
 8014f36:	bfb8      	it	lt
 8014f38:	461d      	movlt	r5, r3
 8014f3a:	88fb      	ldrh	r3, [r7, #6]
 8014f3c:	4403      	add	r3, r0
 8014f3e:	116d      	asrs	r5, r5, #5
 8014f40:	b21b      	sxth	r3, r3
 8014f42:	3501      	adds	r5, #1
 8014f44:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8014f48:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8014f4c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	f100 0001 	add.w	r0, r0, #1
 8014f56:	bfb8      	it	lt
 8014f58:	425b      	neglt	r3, r3
 8014f5a:	2900      	cmp	r1, #0
 8014f5c:	ea4f 0060 	mov.w	r0, r0, asr #1
 8014f60:	bfb8      	it	lt
 8014f62:	4249      	neglt	r1, r1
 8014f64:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8014f68:	428b      	cmp	r3, r1
 8014f6a:	bfb8      	it	lt
 8014f6c:	460b      	movlt	r3, r1
 8014f6e:	115b      	asrs	r3, r3, #5
 8014f70:	3301      	adds	r3, #1
 8014f72:	435b      	muls	r3, r3
 8014f74:	fb05 3505 	mla	r5, r5, r5, r3
 8014f78:	2302      	movs	r3, #2
 8014f7a:	fb92 f2f3 	sdiv	r2, r2, r3
 8014f7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014f80:	1a9a      	subs	r2, r3, r2
 8014f82:	9209      	str	r2, [sp, #36]	; 0x24
 8014f84:	f7ff fcaa 	bl	80148dc <_ZN8touchgfx7CWRUtil4sineEi>
 8014f88:	a90a      	add	r1, sp, #40	; 0x28
 8014f8a:	900a      	str	r0, [sp, #40]	; 0x28
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	f7ff fc99 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014f92:	2320      	movs	r3, #32
 8014f94:	fb90 f0f3 	sdiv	r0, r0, r3
 8014f98:	4340      	muls	r0, r0
 8014f9a:	42a8      	cmp	r0, r5
 8014f9c:	dd85      	ble.n	8014eaa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 8014f9e:	2401      	movs	r4, #1
 8014fa0:	e036      	b.n	8015010 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 8014fa2:	2102      	movs	r1, #2
 8014fa4:	fb93 f3f1 	sdiv	r3, r3, r1
 8014fa8:	4413      	add	r3, r2
 8014faa:	9305      	str	r3, [sp, #20]
 8014fac:	fb93 f3f1 	sdiv	r3, r3, r1
 8014fb0:	9304      	str	r3, [sp, #16]
 8014fb2:	e786      	b.n	8014ec2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8014fb4:	f107 0320 	add.w	r3, r7, #32
 8014fb8:	fb93 f7f5 	sdiv	r7, r3, r5
 8014fbc:	fb05 3717 	mls	r7, r5, r7, r3
 8014fc0:	1bea      	subs	r2, r5, r7
 8014fc2:	fb92 f7f5 	sdiv	r7, r2, r5
 8014fc6:	fb05 2717 	mls	r7, r5, r7, r2
 8014fca:	441f      	add	r7, r3
 8014fcc:	e78d      	b.n	8014eea <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8014fce:	9906      	ldr	r1, [sp, #24]
 8014fd0:	428a      	cmp	r2, r1
 8014fd2:	dd09      	ble.n	8014fe8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 8014fd4:	9a04      	ldr	r2, [sp, #16]
 8014fd6:	a90a      	add	r1, sp, #40	; 0x28
 8014fd8:	4620      	mov	r0, r4
 8014fda:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014fde:	aa03      	add	r2, sp, #12
 8014fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8014fe2:	4633      	mov	r3, r6
 8014fe4:	f7ff fd3a 	bl	8014a5c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8014fe8:	9a05      	ldr	r2, [sp, #20]
 8014fea:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8014fee:	1ac3      	subs	r3, r0, r3
 8014ff0:	b992      	cbnz	r2, 8015018 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 8014ff2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8014ff6:	da04      	bge.n	8015002 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8014ff8:	a80a      	add	r0, sp, #40	; 0x28
 8014ffa:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8014ffe:	f00c f9db 	bl	80213b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015002:	a80a      	add	r0, sp, #40	; 0x28
 8015004:	f00c fb4d 	bl	80216a2 <_ZN8touchgfx6Canvas6renderEv>
 8015008:	4604      	mov	r4, r0
 801500a:	a80a      	add	r0, sp, #40	; 0x28
 801500c:	f00c fb8a 	bl	8021724 <_ZN8touchgfx6CanvasD1Ev>
 8015010:	4620      	mov	r0, r4
 8015012:	b038      	add	sp, #224	; 0xe0
 8015014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015018:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 801501c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8015020:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8015024:	da2b      	bge.n	801507e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8015026:	f7ff fc7b 	bl	8014920 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801502a:	4631      	mov	r1, r6
 801502c:	9009      	str	r0, [sp, #36]	; 0x24
 801502e:	a804      	add	r0, sp, #16
 8015030:	f7ff fc48 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015034:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015036:	f10d 0814 	add.w	r8, sp, #20
 801503a:	4418      	add	r0, r3
 801503c:	9007      	str	r0, [sp, #28]
 801503e:	9803      	ldr	r0, [sp, #12]
 8015040:	f7ff fc8f 	bl	8014962 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015044:	4631      	mov	r1, r6
 8015046:	9009      	str	r0, [sp, #36]	; 0x24
 8015048:	a804      	add	r0, sp, #16
 801504a:	f7ff fc3b 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801504e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015050:	1a18      	subs	r0, r3, r0
 8015052:	9b03      	ldr	r3, [sp, #12]
 8015054:	443b      	add	r3, r7
 8015056:	9008      	str	r0, [sp, #32]
 8015058:	9309      	str	r3, [sp, #36]	; 0x24
 801505a:	9b03      	ldr	r3, [sp, #12]
 801505c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801505e:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8015062:	4293      	cmp	r3, r2
 8015064:	dd0b      	ble.n	801507e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8015066:	ab08      	add	r3, sp, #32
 8015068:	aa07      	add	r2, sp, #28
 801506a:	a90a      	add	r1, sp, #40	; 0x28
 801506c:	4620      	mov	r0, r4
 801506e:	e9cd 6800 	strd	r6, r8, [sp]
 8015072:	f7ff fcca 	bl	8014a0a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8015076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015078:	443b      	add	r3, r7
 801507a:	9309      	str	r3, [sp, #36]	; 0x24
 801507c:	e7ed      	b.n	801505a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 801507e:	9a03      	ldr	r2, [sp, #12]
 8015080:	9b06      	ldr	r3, [sp, #24]
 8015082:	429a      	cmp	r2, r3
 8015084:	dd0a      	ble.n	801509c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 8015086:	a90a      	add	r1, sp, #40	; 0x28
 8015088:	4620      	mov	r0, r4
 801508a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801508e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8015092:	aa03      	add	r2, sp, #12
 8015094:	9309      	str	r3, [sp, #36]	; 0x24
 8015096:	4633      	mov	r3, r6
 8015098:	f7ff fce0 	bl	8014a5c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801509c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80150a0:	4642      	mov	r2, r8
 80150a2:	9b02      	ldr	r3, [sp, #8]
 80150a4:	eba8 0805 	sub.w	r8, r8, r5
 80150a8:	429a      	cmp	r2, r3
 80150aa:	db0c      	blt.n	80150c6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x254>
 80150ac:	9206      	str	r2, [sp, #24]
 80150ae:	a90a      	add	r1, sp, #40	; 0x28
 80150b0:	4620      	mov	r0, r4
 80150b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150b6:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80150ba:	aa06      	add	r2, sp, #24
 80150bc:	9309      	str	r3, [sp, #36]	; 0x24
 80150be:	4633      	mov	r3, r6
 80150c0:	f7ff fccc 	bl	8014a5c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80150c4:	e7ec      	b.n	80150a0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 80150c6:	9a06      	ldr	r2, [sp, #24]
 80150c8:	4293      	cmp	r3, r2
 80150ca:	da0a      	bge.n	80150e2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x270>
 80150cc:	a90a      	add	r1, sp, #40	; 0x28
 80150ce:	4620      	mov	r0, r4
 80150d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150d4:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80150d8:	aa02      	add	r2, sp, #8
 80150da:	9309      	str	r3, [sp, #36]	; 0x24
 80150dc:	4633      	mov	r3, r6
 80150de:	f7ff fcbd 	bl	8014a5c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80150e2:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80150e6:	1a1b      	subs	r3, r3, r0
 80150e8:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80150ec:	da89      	bge.n	8015002 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 80150ee:	f7ff fc17 	bl	8014920 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80150f2:	4631      	mov	r1, r6
 80150f4:	9009      	str	r0, [sp, #36]	; 0x24
 80150f6:	a804      	add	r0, sp, #16
 80150f8:	f7ff fbe4 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80150fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80150fe:	ad05      	add	r5, sp, #20
 8015100:	4418      	add	r0, r3
 8015102:	9007      	str	r0, [sp, #28]
 8015104:	9802      	ldr	r0, [sp, #8]
 8015106:	f7ff fc2c 	bl	8014962 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801510a:	4631      	mov	r1, r6
 801510c:	9009      	str	r0, [sp, #36]	; 0x24
 801510e:	a804      	add	r0, sp, #16
 8015110:	f7ff fbd8 	bl	80148c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015114:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015116:	1a18      	subs	r0, r3, r0
 8015118:	9b02      	ldr	r3, [sp, #8]
 801511a:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 801511e:	9008      	str	r0, [sp, #32]
 8015120:	443b      	add	r3, r7
 8015122:	9309      	str	r3, [sp, #36]	; 0x24
 8015124:	9a02      	ldr	r2, [sp, #8]
 8015126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015128:	429a      	cmp	r2, r3
 801512a:	f77f af6a 	ble.w	8015002 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 801512e:	ab08      	add	r3, sp, #32
 8015130:	aa07      	add	r2, sp, #28
 8015132:	a90a      	add	r1, sp, #40	; 0x28
 8015134:	4620      	mov	r0, r4
 8015136:	e9cd 6500 	strd	r6, r5, [sp]
 801513a:	f7ff fc66 	bl	8014a0a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 801513e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015140:	443b      	add	r3, r7
 8015142:	9309      	str	r3, [sp, #36]	; 0x24
 8015144:	e7ee      	b.n	8015124 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>
	...

08015148 <_ZN8touchgfx15AbstractPainterC1Ev>:
 8015148:	4a03      	ldr	r2, [pc, #12]	; (8015158 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 801514a:	6002      	str	r2, [r0, #0]
 801514c:	2200      	movs	r2, #0
 801514e:	6042      	str	r2, [r0, #4]
 8015150:	22ff      	movs	r2, #255	; 0xff
 8015152:	7202      	strb	r2, [r0, #8]
 8015154:	4770      	bx	lr
 8015156:	bf00      	nop
 8015158:	08025b04 	.word	0x08025b04

0801515c <_ZN8touchgfx15AbstractPainterD1Ev>:
 801515c:	4770      	bx	lr

0801515e <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 801515e:	8081      	strh	r1, [r0, #4]
 8015160:	80c2      	strh	r2, [r0, #6]
 8015162:	4770      	bx	lr

08015164 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8015164:	7201      	strb	r1, [r0, #8]
 8015166:	4770      	bx	lr

08015168 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8015168:	6281      	str	r1, [r0, #40]	; 0x28
 801516a:	4770      	bx	lr

0801516c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801516c:	b513      	push	{r0, r1, r4, lr}
 801516e:	6803      	ldr	r3, [r0, #0]
 8015170:	4604      	mov	r4, r0
 8015172:	4601      	mov	r1, r0
 8015174:	4668      	mov	r0, sp
 8015176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015178:	4798      	blx	r3
 801517a:	6823      	ldr	r3, [r4, #0]
 801517c:	4669      	mov	r1, sp
 801517e:	4620      	mov	r0, r4
 8015180:	691b      	ldr	r3, [r3, #16]
 8015182:	4798      	blx	r3
 8015184:	b002      	add	sp, #8
 8015186:	bd10      	pop	{r4, pc}

08015188 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8015188:	b510      	push	{r4, lr}
 801518a:	2200      	movs	r2, #0
 801518c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8015190:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8015194:	8002      	strh	r2, [r0, #0]
 8015196:	8042      	strh	r2, [r0, #2]
 8015198:	8084      	strh	r4, [r0, #4]
 801519a:	80c1      	strh	r1, [r0, #6]
 801519c:	bd10      	pop	{r4, pc}

0801519e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801519e:	2200      	movs	r2, #0
 80151a0:	8002      	strh	r2, [r0, #0]
 80151a2:	8042      	strh	r2, [r0, #2]
 80151a4:	8082      	strh	r2, [r0, #4]
 80151a6:	80c2      	strh	r2, [r0, #6]
 80151a8:	4770      	bx	lr
	...

080151ac <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80151ac:	b508      	push	{r3, lr}
 80151ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80151b0:	b928      	cbnz	r0, 80151be <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80151b2:	4b03      	ldr	r3, [pc, #12]	; (80151c0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80151b4:	2127      	movs	r1, #39	; 0x27
 80151b6:	4a03      	ldr	r2, [pc, #12]	; (80151c4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80151b8:	4803      	ldr	r0, [pc, #12]	; (80151c8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80151ba:	f00d fb71 	bl	80228a0 <__assert_func>
 80151be:	bd08      	pop	{r3, pc}
 80151c0:	08025b10 	.word	0x08025b10
 80151c4:	08025bf4 	.word	0x08025bf4
 80151c8:	08025b37 	.word	0x08025b37

080151cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80151cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151d0:	b089      	sub	sp, #36	; 0x24
 80151d2:	4604      	mov	r4, r0
 80151d4:	6808      	ldr	r0, [r1, #0]
 80151d6:	f04f 0a00 	mov.w	sl, #0
 80151da:	6849      	ldr	r1, [r1, #4]
 80151dc:	ab02      	add	r3, sp, #8
 80151de:	f04f 0b01 	mov.w	fp, #1
 80151e2:	c303      	stmia	r3!, {r0, r1}
 80151e4:	4b3f      	ldr	r3, [pc, #252]	; (80152e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 80151e6:	4621      	mov	r1, r4
 80151e8:	a804      	add	r0, sp, #16
 80151ea:	781b      	ldrb	r3, [r3, #0]
 80151ec:	2b01      	cmp	r3, #1
 80151ee:	6823      	ldr	r3, [r4, #0]
 80151f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151f2:	bf1f      	itttt	ne
 80151f4:	f10d 0906 	addne.w	r9, sp, #6
 80151f8:	ae03      	addne	r6, sp, #12
 80151fa:	f10d 050e 	addne.w	r5, sp, #14
 80151fe:	f10d 080a 	addne.w	r8, sp, #10
 8015202:	bf01      	itttt	eq
 8015204:	f10d 090e 	addeq.w	r9, sp, #14
 8015208:	f10d 0606 	addeq.w	r6, sp, #6
 801520c:	ad03      	addeq	r5, sp, #12
 801520e:	f10d 0808 	addeq.w	r8, sp, #8
 8015212:	4798      	blx	r3
 8015214:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015218:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801521c:	2b00      	cmp	r3, #0
 801521e:	d056      	beq.n	80152ce <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8015220:	4293      	cmp	r3, r2
 8015222:	bfa8      	it	ge
 8015224:	4613      	movge	r3, r2
 8015226:	f8ad 3006 	strh.w	r3, [sp, #6]
 801522a:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801522e:	2f00      	cmp	r7, #0
 8015230:	dd34      	ble.n	801529c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8015232:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8015236:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801523a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801523e:	4484      	add	ip, r0
 8015240:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8015244:	f9b6 e000 	ldrsh.w	lr, [r6]
 8015248:	fa0f fc8c 	sxth.w	ip, ip
 801524c:	f9b9 1000 	ldrsh.w	r1, [r9]
 8015250:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015254:	4562      	cmp	r2, ip
 8015256:	f8ad 301a 	strh.w	r3, [sp, #26]
 801525a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801525e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8015262:	da29      	bge.n	80152b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015264:	4472      	add	r2, lr
 8015266:	b212      	sxth	r2, r2
 8015268:	4290      	cmp	r0, r2
 801526a:	da25      	bge.n	80152b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801526c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8015270:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015274:	4402      	add	r2, r0
 8015276:	b212      	sxth	r2, r2
 8015278:	4293      	cmp	r3, r2
 801527a:	da1d      	bge.n	80152b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801527c:	440b      	add	r3, r1
 801527e:	b21b      	sxth	r3, r3
 8015280:	4298      	cmp	r0, r3
 8015282:	da19      	bge.n	80152b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015284:	6823      	ldr	r3, [r4, #0]
 8015286:	a906      	add	r1, sp, #24
 8015288:	4620      	mov	r0, r4
 801528a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801528c:	4798      	blx	r3
 801528e:	b998      	cbnz	r0, 80152b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015290:	107f      	asrs	r7, r7, #1
 8015292:	f04f 0a01 	mov.w	sl, #1
 8015296:	f8ad 7006 	strh.w	r7, [sp, #6]
 801529a:	e7c6      	b.n	801522a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801529c:	d10c      	bne.n	80152b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801529e:	f8ad b006 	strh.w	fp, [sp, #6]
 80152a2:	f8b8 2000 	ldrh.w	r2, [r8]
 80152a6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80152aa:	440a      	add	r2, r1
 80152ac:	f8a8 2000 	strh.w	r2, [r8]
 80152b0:	882b      	ldrh	r3, [r5, #0]
 80152b2:	1a5b      	subs	r3, r3, r1
 80152b4:	802b      	strh	r3, [r5, #0]
 80152b6:	e7ad      	b.n	8015214 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80152b8:	f1ba 0f00 	cmp.w	sl, #0
 80152bc:	d0f1      	beq.n	80152a2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 80152be:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80152c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80152c6:	429a      	cmp	r2, r3
 80152c8:	bf08      	it	eq
 80152ca:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 80152cc:	e7e9      	b.n	80152a2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 80152ce:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80152d2:	429a      	cmp	r2, r3
 80152d4:	bf04      	itt	eq
 80152d6:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 80152da:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 80152dc:	b009      	add	sp, #36	; 0x24
 80152de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e2:	bf00      	nop
 80152e4:	2000b460 	.word	0x2000b460

080152e8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80152e8:	2200      	movs	r2, #0
 80152ea:	2101      	movs	r1, #1
 80152ec:	8082      	strh	r2, [r0, #4]
 80152ee:	80c2      	strh	r2, [r0, #6]
 80152f0:	8102      	strh	r2, [r0, #8]
 80152f2:	8142      	strh	r2, [r0, #10]
 80152f4:	8182      	strh	r2, [r0, #12]
 80152f6:	81c2      	strh	r2, [r0, #14]
 80152f8:	8202      	strh	r2, [r0, #16]
 80152fa:	8242      	strh	r2, [r0, #18]
 80152fc:	61c2      	str	r2, [r0, #28]
 80152fe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8015302:	6282      	str	r2, [r0, #40]	; 0x28
 8015304:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8015308:	4905      	ldr	r1, [pc, #20]	; (8015320 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801530a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801530e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015312:	6001      	str	r1, [r0, #0]
 8015314:	8582      	strh	r2, [r0, #44]	; 0x2c
 8015316:	22ff      	movs	r2, #255	; 0xff
 8015318:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801531c:	4770      	bx	lr
 801531e:	bf00      	nop
 8015320:	08025b7c 	.word	0x08025b7c

08015324 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8015324:	4770      	bx	lr

08015326 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8015326:	b570      	push	{r4, r5, r6, lr}
 8015328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801532c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801532e:	4604      	mov	r4, r0
 8015330:	429a      	cmp	r2, r3
 8015332:	d00c      	beq.n	801534e <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8015334:	f850 3b26 	ldr.w	r3, [r0], #38
 8015338:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801533a:	f7fa fc1f 	bl	800fb7c <_ZNK8touchgfx9TypedText7getTextEv>
 801533e:	2300      	movs	r3, #0
 8015340:	4601      	mov	r1, r0
 8015342:	46ac      	mov	ip, r5
 8015344:	4620      	mov	r0, r4
 8015346:	461a      	mov	r2, r3
 8015348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801534c:	4760      	bx	ip
 801534e:	2000      	movs	r0, #0
 8015350:	bd70      	pop	{r4, r5, r6, pc}

08015352 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015358:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801535a:	429a      	cmp	r2, r3
 801535c:	d016      	beq.n	801538c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801535e:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8015362:	4620      	mov	r0, r4
 8015364:	f7f9 f9b4 	bl	800e6d0 <_ZNK8touchgfx9TypedText7getFontEv>
 8015368:	6803      	ldr	r3, [r0, #0]
 801536a:	4605      	mov	r5, r0
 801536c:	4620      	mov	r0, r4
 801536e:	69de      	ldr	r6, [r3, #28]
 8015370:	f7f9 f9ca 	bl	800e708 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015374:	4607      	mov	r7, r0
 8015376:	4620      	mov	r0, r4
 8015378:	f7fa fc00 	bl	800fb7c <_ZNK8touchgfx9TypedText7getTextEv>
 801537c:	2300      	movs	r3, #0
 801537e:	4602      	mov	r2, r0
 8015380:	4639      	mov	r1, r7
 8015382:	9300      	str	r3, [sp, #0]
 8015384:	4628      	mov	r0, r5
 8015386:	47b0      	blx	r6
 8015388:	b003      	add	sp, #12
 801538a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801538c:	2000      	movs	r0, #0
 801538e:	e7fb      	b.n	8015388 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08015390 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015390:	b40e      	push	{r1, r2, r3}
 8015392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801539a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801539c:	b09b      	sub	sp, #108	; 0x6c
 801539e:	4604      	mov	r4, r0
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d03f      	beq.n	8015424 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 80153a4:	f100 0726 	add.w	r7, r0, #38	; 0x26
 80153a8:	ab22      	add	r3, sp, #136	; 0x88
 80153aa:	4638      	mov	r0, r7
 80153ac:	9303      	str	r3, [sp, #12]
 80153ae:	f7f9 f98f 	bl	800e6d0 <_ZNK8touchgfx9TypedText7getFontEv>
 80153b2:	6803      	ldr	r3, [r0, #0]
 80153b4:	4680      	mov	r8, r0
 80153b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153b8:	4798      	blx	r3
 80153ba:	4606      	mov	r6, r0
 80153bc:	b205      	sxth	r5, r0
 80153be:	a804      	add	r0, sp, #16
 80153c0:	f002 fdf0 	bl	8017fa4 <_ZN8touchgfx12TextProviderC1Ev>
 80153c4:	f8d8 3000 	ldr.w	r3, [r8]
 80153c8:	4640      	mov	r0, r8
 80153ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80153cc:	4798      	blx	r3
 80153ce:	9a03      	ldr	r2, [sp, #12]
 80153d0:	4603      	mov	r3, r0
 80153d2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80153d4:	a804      	add	r0, sp, #16
 80153d6:	f002 fe02 	bl	8017fde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80153da:	4638      	mov	r0, r7
 80153dc:	f7f9 f994 	bl	800e708 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80153e0:	4680      	mov	r8, r0
 80153e2:	4638      	mov	r0, r7
 80153e4:	f7f9 f974 	bl	800e6d0 <_ZNK8touchgfx9TypedText7getFontEv>
 80153e8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80153ec:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80153f0:	4642      	mov	r2, r8
 80153f2:	9300      	str	r3, [sp, #0]
 80153f4:	4603      	mov	r3, r0
 80153f6:	a804      	add	r0, sp, #16
 80153f8:	f000 fe41 	bl	801607e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80153fc:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015400:	b203      	sxth	r3, r0
 8015402:	18a9      	adds	r1, r5, r2
 8015404:	2900      	cmp	r1, #0
 8015406:	dd0b      	ble.n	8015420 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8015408:	3b01      	subs	r3, #1
 801540a:	fb13 f302 	smulbb	r3, r3, r2
 801540e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8015412:	b21d      	sxth	r5, r3
 8015414:	4628      	mov	r0, r5
 8015416:	b01b      	add	sp, #108	; 0x6c
 8015418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801541c:	b003      	add	sp, #12
 801541e:	4770      	bx	lr
 8015420:	2b00      	cmp	r3, #0
 8015422:	dcf7      	bgt.n	8015414 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8015424:	2500      	movs	r5, #0
 8015426:	e7f5      	b.n	8015414 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08015428 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801542c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015430:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8015432:	b08d      	sub	sp, #52	; 0x34
 8015434:	4604      	mov	r4, r0
 8015436:	429e      	cmp	r6, r3
 8015438:	4688      	mov	r8, r1
 801543a:	d04b      	beq.n	80154d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801543c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8015440:	4628      	mov	r0, r5
 8015442:	f7f9 f945 	bl	800e6d0 <_ZNK8touchgfx9TypedText7getFontEv>
 8015446:	4607      	mov	r7, r0
 8015448:	2800      	cmp	r0, #0
 801544a:	d043      	beq.n	80154d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801544c:	4628      	mov	r0, r5
 801544e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8015452:	f7f9 f971 	bl	800e738 <_ZNK8touchgfx9TypedText11assertValidEv>
 8015456:	4b21      	ldr	r3, [pc, #132]	; (80154dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8015458:	4628      	mov	r0, r5
 801545a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8015464:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8015468:	785e      	ldrb	r6, [r3, #1]
 801546a:	f7f9 f94d 	bl	800e708 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801546e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015470:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8015474:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8015478:	9309      	str	r3, [sp, #36]	; 0x24
 801547a:	4b19      	ldr	r3, [pc, #100]	; (80154e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 801547c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8015486:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801548a:	9707      	str	r7, [sp, #28]
 801548c:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8015490:	f88d 6020 	strb.w	r6, [sp, #32]
 8015494:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8015498:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801549c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80154a0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80154a4:	b10a      	cbz	r2, 80154aa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 80154a6:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80154a8:	b906      	cbnz	r6, 80154ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 80154aa:	689e      	ldr	r6, [r3, #8]
 80154ac:	af05      	add	r7, sp, #20
 80154ae:	4621      	mov	r1, r4
 80154b0:	4638      	mov	r0, r7
 80154b2:	f001 fed6 	bl	8017262 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80154b6:	4628      	mov	r0, r5
 80154b8:	f7fa fb60 	bl	800fb7c <_ZNK8touchgfx9TypedText7getTextEv>
 80154bc:	2300      	movs	r3, #0
 80154be:	9001      	str	r0, [sp, #4]
 80154c0:	4630      	mov	r0, r6
 80154c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80154c6:	ab07      	add	r3, sp, #28
 80154c8:	9300      	str	r3, [sp, #0]
 80154ca:	4643      	mov	r3, r8
 80154cc:	e897 0006 	ldmia.w	r7, {r1, r2}
 80154d0:	f000 fba2 	bl	8015c18 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80154d4:	b00d      	add	sp, #52	; 0x34
 80154d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154da:	bf00      	nop
 80154dc:	2000b4f8 	.word	0x2000b4f8
 80154e0:	2000b468 	.word	0x2000b468

080154e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80154e4:	b570      	push	{r4, r5, r6, lr}
 80154e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154ea:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80154ec:	4604      	mov	r4, r0
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d021      	beq.n	8015536 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 80154f2:	6803      	ldr	r3, [r0, #0]
 80154f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80154f6:	4798      	blx	r3
 80154f8:	6823      	ldr	r3, [r4, #0]
 80154fa:	4605      	mov	r5, r0
 80154fc:	4620      	mov	r0, r4
 80154fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015500:	4798      	blx	r3
 8015502:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8015506:	4606      	mov	r6, r0
 8015508:	b22d      	sxth	r5, r5
 801550a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801550e:	6823      	ldr	r3, [r4, #0]
 8015510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015512:	d109      	bne.n	8015528 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8015514:	4629      	mov	r1, r5
 8015516:	4620      	mov	r0, r4
 8015518:	4798      	blx	r3
 801551a:	6823      	ldr	r3, [r4, #0]
 801551c:	4631      	mov	r1, r6
 801551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015520:	4620      	mov	r0, r4
 8015522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015526:	4718      	bx	r3
 8015528:	4601      	mov	r1, r0
 801552a:	4620      	mov	r0, r4
 801552c:	4798      	blx	r3
 801552e:	6823      	ldr	r3, [r4, #0]
 8015530:	4629      	mov	r1, r5
 8015532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015534:	e7f4      	b.n	8015520 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8015536:	bd70      	pop	{r4, r5, r6, pc}

08015538 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8015538:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801553c:	84c1      	strh	r1, [r0, #38]	; 0x26
 801553e:	b922      	cbnz	r2, 801554a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8015540:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015544:	b90b      	cbnz	r3, 801554a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8015546:	f7ff bfcd 	b.w	80154e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801554a:	4770      	bx	lr

0801554c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801554c:	2300      	movs	r3, #0
 801554e:	8003      	strh	r3, [r0, #0]
 8015550:	8043      	strh	r3, [r0, #2]
 8015552:	8083      	strh	r3, [r0, #4]
 8015554:	80c3      	strh	r3, [r0, #6]
 8015556:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801555a:	b91b      	cbnz	r3, 8015564 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801555c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8015560:	2bff      	cmp	r3, #255	; 0xff
 8015562:	d103      	bne.n	801556c <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8015564:	890b      	ldrh	r3, [r1, #8]
 8015566:	8083      	strh	r3, [r0, #4]
 8015568:	894b      	ldrh	r3, [r1, #10]
 801556a:	80c3      	strh	r3, [r0, #6]
 801556c:	4770      	bx	lr
	...

08015570 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8015570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015572:	4604      	mov	r4, r0
 8015574:	466b      	mov	r3, sp
 8015576:	6808      	ldr	r0, [r1, #0]
 8015578:	6849      	ldr	r1, [r1, #4]
 801557a:	c303      	stmia	r3!, {r0, r1}
 801557c:	6823      	ldr	r3, [r4, #0]
 801557e:	4669      	mov	r1, sp
 8015580:	4620      	mov	r0, r4
 8015582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015584:	4798      	blx	r3
 8015586:	4b08      	ldr	r3, [pc, #32]	; (80155a8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801558e:	b10a      	cbz	r2, 8015594 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8015590:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015592:	b900      	cbnz	r0, 8015596 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8015594:	6898      	ldr	r0, [r3, #8]
 8015596:	6803      	ldr	r3, [r0, #0]
 8015598:	4669      	mov	r1, sp
 801559a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801559c:	69dd      	ldr	r5, [r3, #28]
 801559e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80155a2:	47a8      	blx	r5
 80155a4:	b003      	add	sp, #12
 80155a6:	bd30      	pop	{r4, r5, pc}
 80155a8:	2000b468 	.word	0x2000b468

080155ac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 80155ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80155b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155b4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80155b6:	4604      	mov	r4, r0
 80155b8:	429a      	cmp	r2, r3
 80155ba:	d018      	beq.n	80155ee <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 80155bc:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80155c0:	4628      	mov	r0, r5
 80155c2:	f7f9 f885 	bl	800e6d0 <_ZNK8touchgfx9TypedText7getFontEv>
 80155c6:	6803      	ldr	r3, [r0, #0]
 80155c8:	4606      	mov	r6, r0
 80155ca:	4628      	mov	r0, r5
 80155cc:	69df      	ldr	r7, [r3, #28]
 80155ce:	f7f9 f89b 	bl	800e708 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80155d2:	4680      	mov	r8, r0
 80155d4:	4628      	mov	r0, r5
 80155d6:	f7fa fad1 	bl	800fb7c <_ZNK8touchgfx9TypedText7getTextEv>
 80155da:	2300      	movs	r3, #0
 80155dc:	4602      	mov	r2, r0
 80155de:	4641      	mov	r1, r8
 80155e0:	9300      	str	r3, [sp, #0]
 80155e2:	4630      	mov	r0, r6
 80155e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80155e6:	47b8      	blx	r7
 80155e8:	b002      	add	sp, #8
 80155ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ee:	2000      	movs	r0, #0
 80155f0:	e7fa      	b.n	80155e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

080155f2 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80155f2:	b570      	push	{r4, r5, r6, lr}
 80155f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155f8:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80155fa:	4604      	mov	r4, r0
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d00c      	beq.n	801561a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8015600:	f850 3b26 	ldr.w	r3, [r0], #38
 8015604:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8015606:	f7fa fab9 	bl	800fb7c <_ZNK8touchgfx9TypedText7getTextEv>
 801560a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801560c:	4601      	mov	r1, r0
 801560e:	46ac      	mov	ip, r5
 8015610:	4620      	mov	r0, r4
 8015612:	2300      	movs	r3, #0
 8015614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015618:	4760      	bx	ip
 801561a:	2000      	movs	r0, #0
 801561c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015620 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8015620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015628:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801562a:	b08d      	sub	sp, #52	; 0x34
 801562c:	4604      	mov	r4, r0
 801562e:	429e      	cmp	r6, r3
 8015630:	460f      	mov	r7, r1
 8015632:	d048      	beq.n	80156c6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8015634:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8015638:	4628      	mov	r0, r5
 801563a:	f7f9 f849 	bl	800e6d0 <_ZNK8touchgfx9TypedText7getFontEv>
 801563e:	4680      	mov	r8, r0
 8015640:	2800      	cmp	r0, #0
 8015642:	d040      	beq.n	80156c6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8015644:	4628      	mov	r0, r5
 8015646:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801564a:	f7f9 f875 	bl	800e738 <_ZNK8touchgfx9TypedText11assertValidEv>
 801564e:	4b1f      	ldr	r3, [pc, #124]	; (80156cc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8015650:	4628      	mov	r0, r5
 8015652:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801565c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8015660:	785e      	ldrb	r6, [r3, #1]
 8015662:	f7f9 f851 	bl	800e708 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015666:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801566a:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801566e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015670:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8015674:	f88d 6020 	strb.w	r6, [sp, #32]
 8015678:	ae05      	add	r6, sp, #20
 801567a:	9309      	str	r3, [sp, #36]	; 0x24
 801567c:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8015680:	f8cd 801c 	str.w	r8, [sp, #28]
 8015684:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8015688:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801568c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8015690:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8015694:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8015698:	f7f9 faf2 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 801569c:	4621      	mov	r1, r4
 801569e:	4680      	mov	r8, r0
 80156a0:	4630      	mov	r0, r6
 80156a2:	f001 fdde 	bl	8017262 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80156a6:	4628      	mov	r0, r5
 80156a8:	f7fa fa68 	bl	800fb7c <_ZNK8touchgfx9TypedText7getTextEv>
 80156ac:	2300      	movs	r3, #0
 80156ae:	9303      	str	r3, [sp, #12]
 80156b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80156b2:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80156b6:	ab07      	add	r3, sp, #28
 80156b8:	4640      	mov	r0, r8
 80156ba:	9300      	str	r3, [sp, #0]
 80156bc:	463b      	mov	r3, r7
 80156be:	e896 0006 	ldmia.w	r6, {r1, r2}
 80156c2:	f000 faa9 	bl	8015c18 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80156c6:	b00d      	add	sp, #52	; 0x34
 80156c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156cc:	2000b4f8 	.word	0x2000b4f8

080156d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80156d0:	b570      	push	{r4, r5, r6, lr}
 80156d2:	4605      	mov	r5, r0
 80156d4:	880b      	ldrh	r3, [r1, #0]
 80156d6:	4604      	mov	r4, r0
 80156d8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80156da:	f855 3b26 	ldr.w	r3, [r5], #38
 80156de:	4628      	mov	r0, r5
 80156e0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80156e2:	f003 fb8b 	bl	8018dfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80156e6:	b201      	sxth	r1, r0
 80156e8:	4620      	mov	r0, r4
 80156ea:	47b0      	blx	r6
 80156ec:	6823      	ldr	r3, [r4, #0]
 80156ee:	4628      	mov	r0, r5
 80156f0:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80156f2:	f003 fbbd 	bl	8018e70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80156f6:	b201      	sxth	r1, r0
 80156f8:	4620      	mov	r0, r4
 80156fa:	47b0      	blx	r6
 80156fc:	4628      	mov	r0, r5
 80156fe:	f003 fc4b 	bl	8018f98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8015702:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8015706:	bd70      	pop	{r4, r5, r6, pc}

08015708 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8015708:	b510      	push	{r4, lr}
 801570a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801570e:	4604      	mov	r4, r0
 8015710:	2bff      	cmp	r3, #255	; 0xff
 8015712:	d006      	beq.n	8015722 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8015714:	2300      	movs	r3, #0
 8015716:	8003      	strh	r3, [r0, #0]
 8015718:	8043      	strh	r3, [r0, #2]
 801571a:	8083      	strh	r3, [r0, #4]
 801571c:	80c3      	strh	r3, [r0, #6]
 801571e:	4620      	mov	r0, r4
 8015720:	bd10      	pop	{r4, pc}
 8015722:	3126      	adds	r1, #38	; 0x26
 8015724:	f003 fbde 	bl	8018ee4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8015728:	e7f9      	b.n	801571e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801572c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801572c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015730:	4604      	mov	r4, r0
 8015732:	b088      	sub	sp, #32
 8015734:	2500      	movs	r5, #0
 8015736:	460f      	mov	r7, r1
 8015738:	f854 3b26 	ldr.w	r3, [r4], #38
 801573c:	a904      	add	r1, sp, #16
 801573e:	4606      	mov	r6, r0
 8015740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015742:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015746:	4798      	blx	r3
 8015748:	4620      	mov	r0, r4
 801574a:	f003 fb57 	bl	8018dfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801574e:	4680      	mov	r8, r0
 8015750:	4620      	mov	r0, r4
 8015752:	f003 fb8d 	bl	8018e70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015756:	9506      	str	r5, [sp, #24]
 8015758:	ad06      	add	r5, sp, #24
 801575a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801575e:	4639      	mov	r1, r7
 8015760:	f8ad 801c 	strh.w	r8, [sp, #28]
 8015764:	4628      	mov	r0, r5
 8015766:	f7fd fde1 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 801576a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801576e:	b1c3      	cbz	r3, 80157a2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8015770:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015774:	b1ab      	cbz	r3, 80157a2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8015776:	4b0c      	ldr	r3, [pc, #48]	; (80157a8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801577e:	b10a      	cbz	r2, 8015784 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8015780:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015782:	b900      	cbnz	r0, 8015786 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 8015784:	6898      	ldr	r0, [r3, #8]
 8015786:	2701      	movs	r7, #1
 8015788:	6801      	ldr	r1, [r0, #0]
 801578a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801578e:	9702      	str	r7, [sp, #8]
 8015790:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8015794:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8015798:	e9cd 5600 	strd	r5, r6, [sp]
 801579c:	68cd      	ldr	r5, [r1, #12]
 801579e:	4621      	mov	r1, r4
 80157a0:	47a8      	blx	r5
 80157a2:	b008      	add	sp, #32
 80157a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157a8:	2000b468 	.word	0x2000b468

080157ac <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80157ac:	4b02      	ldr	r3, [pc, #8]	; (80157b8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80157ae:	6018      	str	r0, [r3, #0]
 80157b0:	4b02      	ldr	r3, [pc, #8]	; (80157bc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80157b2:	6019      	str	r1, [r3, #0]
 80157b4:	4770      	bx	lr
 80157b6:	bf00      	nop
 80157b8:	2000b470 	.word	0x2000b470
 80157bc:	2000b484 	.word	0x2000b484

080157c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80157c0:	b538      	push	{r3, r4, r5, lr}
 80157c2:	4c2b      	ldr	r4, [pc, #172]	; (8015870 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80157c4:	4b2b      	ldr	r3, [pc, #172]	; (8015874 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80157c6:	6821      	ldr	r1, [r4, #0]
 80157c8:	681a      	ldr	r2, [r3, #0]
 80157ca:	4281      	cmp	r1, r0
 80157cc:	4d2a      	ldr	r5, [pc, #168]	; (8015878 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80157ce:	492b      	ldr	r1, [pc, #172]	; (801587c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80157d0:	d108      	bne.n	80157e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80157d2:	682b      	ldr	r3, [r5, #0]
 80157d4:	4293      	cmp	r3, r2
 80157d6:	d105      	bne.n	80157e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80157d8:	6808      	ldr	r0, [r1, #0]
 80157da:	280f      	cmp	r0, #15
 80157dc:	bf94      	ite	ls
 80157de:	2000      	movls	r0, #0
 80157e0:	2001      	movhi	r0, #1
 80157e2:	bd38      	pop	{r3, r4, r5, pc}
 80157e4:	4b26      	ldr	r3, [pc, #152]	; (8015880 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80157e6:	6020      	str	r0, [r4, #0]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	602a      	str	r2, [r5, #0]
 80157ec:	4298      	cmp	r0, r3
 80157ee:	d905      	bls.n	80157fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80157f0:	4b24      	ldr	r3, [pc, #144]	; (8015884 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80157f2:	2137      	movs	r1, #55	; 0x37
 80157f4:	4a24      	ldr	r2, [pc, #144]	; (8015888 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80157f6:	4825      	ldr	r0, [pc, #148]	; (801588c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80157f8:	f00d f852 	bl	80228a0 <__assert_func>
 80157fc:	f010 0403 	ands.w	r4, r0, #3
 8015800:	bf1f      	itttt	ne
 8015802:	f1c4 0504 	rsbne	r5, r4, #4
 8015806:	3b04      	subne	r3, #4
 8015808:	1952      	addne	r2, r2, r5
 801580a:	191b      	addne	r3, r3, r4
 801580c:	4d20      	ldr	r5, [pc, #128]	; (8015890 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801580e:	4402      	add	r2, r0
 8015810:	1a1b      	subs	r3, r3, r0
 8015812:	3001      	adds	r0, #1
 8015814:	602a      	str	r2, [r5, #0]
 8015816:	f020 0401 	bic.w	r4, r0, #1
 801581a:	42a3      	cmp	r3, r4
 801581c:	d203      	bcs.n	8015826 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801581e:	4b19      	ldr	r3, [pc, #100]	; (8015884 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8015820:	214a      	movs	r1, #74	; 0x4a
 8015822:	4a19      	ldr	r2, [pc, #100]	; (8015888 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8015824:	e7e7      	b.n	80157f6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8015826:	f010 0002 	ands.w	r0, r0, #2
 801582a:	bf1f      	itttt	ne
 801582c:	f1c0 0504 	rsbne	r5, r0, #4
 8015830:	1952      	addne	r2, r2, r5
 8015832:	1f05      	subne	r5, r0, #4
 8015834:	195b      	addne	r3, r3, r5
 8015836:	4422      	add	r2, r4
 8015838:	4d16      	ldr	r5, [pc, #88]	; (8015894 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801583a:	1b1b      	subs	r3, r3, r4
 801583c:	602a      	str	r2, [r5, #0]
 801583e:	429c      	cmp	r4, r3
 8015840:	d903      	bls.n	801584a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8015842:	4b10      	ldr	r3, [pc, #64]	; (8015884 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8015844:	215d      	movs	r1, #93	; 0x5d
 8015846:	4a10      	ldr	r2, [pc, #64]	; (8015888 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8015848:	e7d5      	b.n	80157f6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801584a:	b120      	cbz	r0, 8015856 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801584c:	f1c0 0504 	rsb	r5, r0, #4
 8015850:	3804      	subs	r0, #4
 8015852:	442a      	add	r2, r5
 8015854:	4403      	add	r3, r0
 8015856:	1b1b      	subs	r3, r3, r4
 8015858:	4422      	add	r2, r4
 801585a:	480f      	ldr	r0, [pc, #60]	; (8015898 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801585c:	2b0f      	cmp	r3, #15
 801585e:	600b      	str	r3, [r1, #0]
 8015860:	6002      	str	r2, [r0, #0]
 8015862:	d803      	bhi.n	801586c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8015864:	4b0d      	ldr	r3, [pc, #52]	; (801589c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8015866:	2170      	movs	r1, #112	; 0x70
 8015868:	4a07      	ldr	r2, [pc, #28]	; (8015888 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801586a:	e7c4      	b.n	80157f6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801586c:	2001      	movs	r0, #1
 801586e:	e7b8      	b.n	80157e2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8015870:	2000b478 	.word	0x2000b478
 8015874:	2000b470 	.word	0x2000b470
 8015878:	2000b480 	.word	0x2000b480
 801587c:	2000b488 	.word	0x2000b488
 8015880:	2000b484 	.word	0x2000b484
 8015884:	08025e10 	.word	0x08025e10
 8015888:	08025ed8 	.word	0x08025ed8
 801588c:	08025e49 	.word	0x08025e49
 8015890:	2000b48c 	.word	0x2000b48c
 8015894:	2000b47c 	.word	0x2000b47c
 8015898:	2000b474 	.word	0x2000b474
 801589c:	08025e93 	.word	0x08025e93

080158a0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80158a0:	4b04      	ldr	r3, [pc, #16]	; (80158b4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80158a2:	6818      	ldr	r0, [r3, #0]
 80158a4:	b120      	cbz	r0, 80158b0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80158a6:	4b04      	ldr	r3, [pc, #16]	; (80158b8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80158a8:	6818      	ldr	r0, [r3, #0]
 80158aa:	3000      	adds	r0, #0
 80158ac:	bf18      	it	ne
 80158ae:	2001      	movne	r0, #1
 80158b0:	4770      	bx	lr
 80158b2:	bf00      	nop
 80158b4:	2000b470 	.word	0x2000b470
 80158b8:	2000b484 	.word	0x2000b484

080158bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80158bc:	4b01      	ldr	r3, [pc, #4]	; (80158c4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80158be:	6818      	ldr	r0, [r3, #0]
 80158c0:	4770      	bx	lr
 80158c2:	bf00      	nop
 80158c4:	2000b478 	.word	0x2000b478

080158c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80158c8:	4b01      	ldr	r3, [pc, #4]	; (80158d0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80158ca:	6818      	ldr	r0, [r3, #0]
 80158cc:	4770      	bx	lr
 80158ce:	bf00      	nop
 80158d0:	2000b480 	.word	0x2000b480

080158d4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80158d4:	4b01      	ldr	r3, [pc, #4]	; (80158dc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80158d6:	6818      	ldr	r0, [r3, #0]
 80158d8:	4770      	bx	lr
 80158da:	bf00      	nop
 80158dc:	2000b48c 	.word	0x2000b48c

080158e0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80158e0:	4b01      	ldr	r3, [pc, #4]	; (80158e8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80158e2:	6818      	ldr	r0, [r3, #0]
 80158e4:	4770      	bx	lr
 80158e6:	bf00      	nop
 80158e8:	2000b47c 	.word	0x2000b47c

080158ec <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80158ec:	4b01      	ldr	r3, [pc, #4]	; (80158f4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80158ee:	6818      	ldr	r0, [r3, #0]
 80158f0:	4770      	bx	lr
 80158f2:	bf00      	nop
 80158f4:	2000b474 	.word	0x2000b474

080158f8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80158f8:	4b01      	ldr	r3, [pc, #4]	; (8015900 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80158fa:	6818      	ldr	r0, [r3, #0]
 80158fc:	4770      	bx	lr
 80158fe:	bf00      	nop
 8015900:	2000b488 	.word	0x2000b488

08015904 <_ZN8touchgfx3LCD4initEv>:
 8015904:	4770      	bx	lr

08015906 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015906:	2000      	movs	r0, #0
 8015908:	4770      	bx	lr

0801590a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801590a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801590e:	b091      	sub	sp, #68	; 0x44
 8015910:	4699      	mov	r9, r3
 8015912:	4617      	mov	r7, r2
 8015914:	2500      	movs	r5, #0
 8015916:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801591a:	4680      	mov	r8, r0
 801591c:	a80e      	add	r0, sp, #56	; 0x38
 801591e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8015920:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8015924:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8015928:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801592c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015930:	910d      	str	r1, [sp, #52]	; 0x34
 8015932:	950e      	str	r5, [sp, #56]	; 0x38
 8015934:	f000 fe3a 	bl	80165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015938:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801593a:	f8d9 6000 	ldr.w	r6, [r9]
 801593e:	6818      	ldr	r0, [r3, #0]
 8015940:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015942:	f9b4 b000 	ldrsh.w	fp, [r4]
 8015946:	1b80      	subs	r0, r0, r6
 8015948:	f9b3 2000 	ldrsh.w	r2, [r3]
 801594c:	eb02 0c06 	add.w	ip, r2, r6
 8015950:	ebab 0e0c 	sub.w	lr, fp, ip
 8015954:	4570      	cmp	r0, lr
 8015956:	f340 80bc 	ble.w	8015ad2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801595a:	88a1      	ldrh	r1, [r4, #4]
 801595c:	4459      	add	r1, fp
 801595e:	b209      	sxth	r1, r1
 8015960:	458c      	cmp	ip, r1
 8015962:	f300 80b6 	bgt.w	8015ad2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8015966:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801596a:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801596e:	4283      	cmp	r3, r0
 8015970:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8015974:	edd9 6a07 	vldr	s13, [r9, #28]
 8015978:	bfa8      	it	ge
 801597a:	4603      	movge	r3, r0
 801597c:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8015980:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8015984:	45e3      	cmp	fp, ip
 8015986:	ee07 3a90 	vmov	s15, r3
 801598a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801598e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015992:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015996:	ee65 4a24 	vmul.f32	s9, s10, s9
 801599a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801599e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80159a2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80159a6:	ee32 1a05 	vadd.f32	s2, s4, s10
 80159aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80159ae:	ee36 0a84 	vadd.f32	s0, s13, s8
 80159b2:	ee61 1a87 	vmul.f32	s3, s3, s14
 80159b6:	ee22 2a07 	vmul.f32	s4, s4, s14
 80159ba:	f340 808d 	ble.w	8015ad8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 80159be:	fb9e f5f3 	sdiv	r5, lr, r3
 80159c2:	ee07 5a10 	vmov	s14, r5
 80159c6:	2d00      	cmp	r5, #0
 80159c8:	fb03 e415 	mls	r4, r3, r5, lr
 80159cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80159d0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80159d4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80159d8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80159dc:	dd12      	ble.n	8015a04 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 80159de:	ee70 6a44 	vsub.f32	s13, s0, s8
 80159e2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80159e6:	ee31 2a45 	vsub.f32	s4, s2, s10
 80159ea:	eef5 6a40 	vcmp.f32	s13, #0.0
 80159ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159f2:	bf14      	ite	ne
 80159f4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80159f8:	eeb0 7a67 	vmoveq.f32	s14, s15
 80159fc:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015a00:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015a04:	fb05 f703 	mul.w	r7, r5, r3
 8015a08:	1bc0      	subs	r0, r0, r7
 8015a0a:	443e      	add	r6, r7
 8015a0c:	1997      	adds	r7, r2, r6
 8015a0e:	4407      	add	r7, r0
 8015a10:	42b9      	cmp	r1, r7
 8015a12:	bfbc      	itt	lt
 8015a14:	1a88      	sublt	r0, r1, r2
 8015a16:	1b80      	sublt	r0, r0, r6
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	dd5a      	ble.n	8015ad2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8015a1c:	fb90 f1f3 	sdiv	r1, r0, r3
 8015a20:	fb03 0211 	mls	r2, r3, r1, r0
 8015a24:	b90a      	cbnz	r2, 8015a2a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8015a26:	3901      	subs	r1, #1
 8015a28:	461a      	mov	r2, r3
 8015a2a:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015a2e:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8015a32:	44a4      	add	ip, r4
 8015a34:	2900      	cmp	r1, #0
 8015a36:	bfcc      	ite	gt
 8015a38:	469e      	movgt	lr, r3
 8015a3a:	4696      	movle	lr, r2
 8015a3c:	fb03 c505 	mla	r5, r3, r5, ip
 8015a40:	eef0 6a42 	vmov.f32	s13, s4
 8015a44:	eeb0 7a61 	vmov.f32	s14, s3
 8015a48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015a4c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015a50:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015a54:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015a58:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015a5c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015a60:	ee17 0a90 	vmov	r0, s15
 8015a64:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015a68:	fb90 f6f3 	sdiv	r6, r0, r3
 8015a6c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015a70:	ee17 0a90 	vmov	r0, s15
 8015a74:	fb90 f7f3 	sdiv	r7, r0, r3
 8015a78:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015a7c:	f8d0 8000 	ldr.w	r8, [r0]
 8015a80:	900c      	str	r0, [sp, #48]	; 0x30
 8015a82:	981c      	ldr	r0, [sp, #112]	; 0x70
 8015a84:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015a88:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8015a8c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015a90:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8015a94:	f8cd a020 	str.w	sl, [sp, #32]
 8015a98:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8015a9c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015a9e:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8015aa2:	9603      	str	r6, [sp, #12]
 8015aa4:	44ca      	add	sl, r9
 8015aa6:	9506      	str	r5, [sp, #24]
 8015aa8:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8015aac:	ee16 0a90 	vmov	r0, s13
 8015ab0:	f8cd a01c 	str.w	sl, [sp, #28]
 8015ab4:	fb07 0704 	mla	r7, r7, r4, r0
 8015ab8:	ee17 0a10 	vmov	r0, s14
 8015abc:	fb06 0604 	mla	r6, r6, r4, r0
 8015ac0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015ac2:	9702      	str	r7, [sp, #8]
 8015ac4:	e9cd 3600 	strd	r3, r6, [sp]
 8015ac8:	ebae 0304 	sub.w	r3, lr, r4
 8015acc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015ad0:	47a8      	blx	r5
 8015ad2:	b011      	add	sp, #68	; 0x44
 8015ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad8:	462c      	mov	r4, r5
 8015ada:	e797      	b.n	8015a0c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08015adc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8015adc:	b570      	push	{r4, r5, r6, lr}
 8015ade:	4604      	mov	r4, r0
 8015ae0:	2500      	movs	r5, #0
 8015ae2:	9804      	ldr	r0, [sp, #16]
 8015ae4:	7223      	strb	r3, [r4, #8]
 8015ae6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015aea:	8025      	strh	r5, [r4, #0]
 8015aec:	6061      	str	r1, [r4, #4]
 8015aee:	7263      	strb	r3, [r4, #9]
 8015af0:	60e0      	str	r0, [r4, #12]
 8015af2:	8222      	strh	r2, [r4, #16]
 8015af4:	8265      	strh	r5, [r4, #18]
 8015af6:	82a5      	strh	r5, [r4, #20]
 8015af8:	82e5      	strh	r5, [r4, #22]
 8015afa:	8325      	strh	r5, [r4, #24]
 8015afc:	8365      	strh	r5, [r4, #26]
 8015afe:	83a5      	strh	r5, [r4, #28]
 8015b00:	77a5      	strb	r5, [r4, #30]
 8015b02:	6803      	ldr	r3, [r0, #0]
 8015b04:	695b      	ldr	r3, [r3, #20]
 8015b06:	4798      	blx	r3
 8015b08:	4606      	mov	r6, r0
 8015b0a:	b1f8      	cbz	r0, 8015b4c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8015b0c:	68e0      	ldr	r0, [r4, #12]
 8015b0e:	4631      	mov	r1, r6
 8015b10:	6803      	ldr	r3, [r0, #0]
 8015b12:	68db      	ldr	r3, [r3, #12]
 8015b14:	4798      	blx	r3
 8015b16:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8015b1a:	4605      	mov	r5, r0
 8015b1c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015b20:	7a83      	ldrb	r3, [r0, #10]
 8015b22:	4313      	orrs	r3, r2
 8015b24:	83a3      	strh	r3, [r4, #28]
 8015b26:	7a63      	ldrb	r3, [r4, #9]
 8015b28:	2b04      	cmp	r3, #4
 8015b2a:	d10f      	bne.n	8015b4c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8015b2c:	68e0      	ldr	r0, [r4, #12]
 8015b2e:	462a      	mov	r2, r5
 8015b30:	4631      	mov	r1, r6
 8015b32:	6803      	ldr	r3, [r0, #0]
 8015b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b36:	4798      	blx	r3
 8015b38:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8015b3c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015b40:	7aab      	ldrb	r3, [r5, #10]
 8015b42:	4313      	orrs	r3, r2
 8015b44:	4418      	add	r0, r3
 8015b46:	8ba3      	ldrh	r3, [r4, #28]
 8015b48:	4418      	add	r0, r3
 8015b4a:	83a0      	strh	r0, [r4, #28]
 8015b4c:	4620      	mov	r0, r4
 8015b4e:	bd70      	pop	{r4, r5, r6, pc}

08015b50 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8015b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b54:	2400      	movs	r4, #0
 8015b56:	b085      	sub	sp, #20
 8015b58:	4681      	mov	r9, r0
 8015b5a:	460f      	mov	r7, r1
 8015b5c:	4692      	mov	sl, r2
 8015b5e:	469b      	mov	fp, r3
 8015b60:	46a0      	mov	r8, r4
 8015b62:	4626      	mov	r6, r4
 8015b64:	4554      	cmp	r4, sl
 8015b66:	da21      	bge.n	8015bac <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8015b68:	2300      	movs	r3, #0
 8015b6a:	463a      	mov	r2, r7
 8015b6c:	4659      	mov	r1, fp
 8015b6e:	4648      	mov	r0, r9
 8015b70:	9303      	str	r3, [sp, #12]
 8015b72:	ab03      	add	r3, sp, #12
 8015b74:	f002 fb98 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015b78:	4605      	mov	r5, r0
 8015b7a:	b1b8      	cbz	r0, 8015bac <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8015b7c:	280a      	cmp	r0, #10
 8015b7e:	d015      	beq.n	8015bac <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8015b80:	9a03      	ldr	r2, [sp, #12]
 8015b82:	b182      	cbz	r2, 8015ba6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8015b84:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8015b88:	4641      	mov	r1, r8
 8015b8a:	7a93      	ldrb	r3, [r2, #10]
 8015b8c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015b90:	8895      	ldrh	r5, [r2, #4]
 8015b92:	4303      	orrs	r3, r0
 8015b94:	4638      	mov	r0, r7
 8015b96:	9301      	str	r3, [sp, #4]
 8015b98:	683b      	ldr	r3, [r7, #0]
 8015b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b9c:	4798      	blx	r3
 8015b9e:	9b01      	ldr	r3, [sp, #4]
 8015ba0:	4418      	add	r0, r3
 8015ba2:	4406      	add	r6, r0
 8015ba4:	b2b6      	uxth	r6, r6
 8015ba6:	3401      	adds	r4, #1
 8015ba8:	46a8      	mov	r8, r5
 8015baa:	e7db      	b.n	8015b64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8015bac:	4630      	mov	r0, r6
 8015bae:	b005      	add	sp, #20
 8015bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015bb4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8015bb4:	2a02      	cmp	r2, #2
 8015bb6:	b530      	push	{r4, r5, lr}
 8015bb8:	d011      	beq.n	8015bde <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015bba:	2a03      	cmp	r2, #3
 8015bbc:	d01c      	beq.n	8015bf8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015bbe:	2a01      	cmp	r2, #1
 8015bc0:	d10c      	bne.n	8015bdc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015bc2:	888b      	ldrh	r3, [r1, #4]
 8015bc4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015bc8:	8801      	ldrh	r1, [r0, #0]
 8015bca:	1a9b      	subs	r3, r3, r2
 8015bcc:	8844      	ldrh	r4, [r0, #2]
 8015bce:	1a5b      	subs	r3, r3, r1
 8015bd0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015bd4:	8004      	strh	r4, [r0, #0]
 8015bd6:	8043      	strh	r3, [r0, #2]
 8015bd8:	8081      	strh	r1, [r0, #4]
 8015bda:	80c2      	strh	r2, [r0, #6]
 8015bdc:	bd30      	pop	{r4, r5, pc}
 8015bde:	88cb      	ldrh	r3, [r1, #6]
 8015be0:	88c2      	ldrh	r2, [r0, #6]
 8015be2:	1a9b      	subs	r3, r3, r2
 8015be4:	8842      	ldrh	r2, [r0, #2]
 8015be6:	1a9b      	subs	r3, r3, r2
 8015be8:	888a      	ldrh	r2, [r1, #4]
 8015bea:	8881      	ldrh	r1, [r0, #4]
 8015bec:	8043      	strh	r3, [r0, #2]
 8015bee:	1a52      	subs	r2, r2, r1
 8015bf0:	8801      	ldrh	r1, [r0, #0]
 8015bf2:	1a52      	subs	r2, r2, r1
 8015bf4:	8002      	strh	r2, [r0, #0]
 8015bf6:	e7f1      	b.n	8015bdc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015bf8:	88cb      	ldrh	r3, [r1, #6]
 8015bfa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015bfe:	8841      	ldrh	r1, [r0, #2]
 8015c00:	1a9b      	subs	r3, r3, r2
 8015c02:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015c06:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015c0a:	1a5b      	subs	r3, r3, r1
 8015c0c:	8045      	strh	r5, [r0, #2]
 8015c0e:	8082      	strh	r2, [r0, #4]
 8015c10:	8003      	strh	r3, [r0, #0]
 8015c12:	80c4      	strh	r4, [r0, #6]
 8015c14:	e7e2      	b.n	8015bdc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

08015c18 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8015c18:	b570      	push	{r4, r5, r6, lr}
 8015c1a:	b086      	sub	sp, #24
 8015c1c:	ac02      	add	r4, sp, #8
 8015c1e:	e884 0006 	stmia.w	r4, {r1, r2}
 8015c22:	461a      	mov	r2, r3
 8015c24:	ab0c      	add	r3, sp, #48	; 0x30
 8015c26:	9305      	str	r3, [sp, #20]
 8015c28:	4b0a      	ldr	r3, [pc, #40]	; (8015c54 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8015c2a:	685d      	ldr	r5, [r3, #4]
 8015c2c:	1069      	asrs	r1, r5, #1
 8015c2e:	07ed      	lsls	r5, r5, #31
 8015c30:	eb00 0601 	add.w	r6, r0, r1
 8015c34:	bf46      	itte	mi
 8015c36:	681b      	ldrmi	r3, [r3, #0]
 8015c38:	5841      	ldrmi	r1, [r0, r1]
 8015c3a:	681d      	ldrpl	r5, [r3, #0]
 8015c3c:	4630      	mov	r0, r6
 8015c3e:	bf48      	it	mi
 8015c40:	58cd      	ldrmi	r5, [r1, r3]
 8015c42:	4621      	mov	r1, r4
 8015c44:	9b05      	ldr	r3, [sp, #20]
 8015c46:	9301      	str	r3, [sp, #4]
 8015c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c4a:	9300      	str	r3, [sp, #0]
 8015c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c4e:	47a8      	blx	r5
 8015c50:	b006      	add	sp, #24
 8015c52:	bd70      	pop	{r4, r5, r6, pc}
 8015c54:	20000030 	.word	0x20000030

08015c58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8015c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c5c:	b09d      	sub	sp, #116	; 0x74
 8015c5e:	9114      	str	r1, [sp, #80]	; 0x50
 8015c60:	9315      	str	r3, [sp, #84]	; 0x54
 8015c62:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015c64:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015c66:	8809      	ldrh	r1, [r1, #0]
 8015c68:	889b      	ldrh	r3, [r3, #4]
 8015c6a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8015c6c:	440b      	add	r3, r1
 8015c6e:	9210      	str	r2, [sp, #64]	; 0x40
 8015c70:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8015c74:	b21b      	sxth	r3, r3
 8015c76:	900f      	str	r0, [sp, #60]	; 0x3c
 8015c78:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8015c7c:	930e      	str	r3, [sp, #56]	; 0x38
 8015c7e:	6833      	ldr	r3, [r6, #0]
 8015c80:	7a59      	ldrb	r1, [r3, #9]
 8015c82:	7a1b      	ldrb	r3, [r3, #8]
 8015c84:	9113      	str	r1, [sp, #76]	; 0x4c
 8015c86:	9312      	str	r3, [sp, #72]	; 0x48
 8015c88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015c8a:	f9b3 4000 	ldrsh.w	r4, [r3]
 8015c8e:	2a00      	cmp	r2, #0
 8015c90:	d059      	beq.n	8015d46 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8015c92:	7c33      	ldrb	r3, [r6, #16]
 8015c94:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8015c96:	2b04      	cmp	r3, #4
 8015c98:	bf14      	ite	ne
 8015c9a:	2301      	movne	r3, #1
 8015c9c:	2302      	moveq	r3, #2
 8015c9e:	4413      	add	r3, r2
 8015ca0:	f04f 0800 	mov.w	r8, #0
 8015ca4:	930d      	str	r3, [sp, #52]	; 0x34
 8015ca6:	4645      	mov	r5, r8
 8015ca8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8015cac:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8015cb0:	4293      	cmp	r3, r2
 8015cb2:	da75      	bge.n	8015da0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015cb8:	6832      	ldr	r2, [r6, #0]
 8015cba:	931a      	str	r3, [sp, #104]	; 0x68
 8015cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cbe:	428b      	cmp	r3, r1
 8015cc0:	db43      	blt.n	8015d4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8015cc2:	6813      	ldr	r3, [r2, #0]
 8015cc4:	4610      	mov	r0, r2
 8015cc6:	695b      	ldr	r3, [r3, #20]
 8015cc8:	4798      	blx	r3
 8015cca:	4681      	mov	r9, r0
 8015ccc:	6830      	ldr	r0, [r6, #0]
 8015cce:	aa1b      	add	r2, sp, #108	; 0x6c
 8015cd0:	4649      	mov	r1, r9
 8015cd2:	6803      	ldr	r3, [r0, #0]
 8015cd4:	689f      	ldr	r7, [r3, #8]
 8015cd6:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8015cda:	47b8      	blx	r7
 8015cdc:	901a      	str	r0, [sp, #104]	; 0x68
 8015cde:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8015ce2:	45d1      	cmp	r9, sl
 8015ce4:	d045      	beq.n	8015d72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015ce6:	f242 070b 	movw	r7, #8203	; 0x200b
 8015cea:	45b9      	cmp	r9, r7
 8015cec:	d041      	beq.n	8015d72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015cee:	f1b9 0f00 	cmp.w	r9, #0
 8015cf2:	f000 80ee 	beq.w	8015ed2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8015cf6:	f1b9 0f0a 	cmp.w	r9, #10
 8015cfa:	d057      	beq.n	8015dac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8015cfc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015cfe:	b383      	cbz	r3, 8015d62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8015d00:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8015d04:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015d06:	2a00      	cmp	r2, #0
 8015d08:	f000 80d2 	beq.w	8015eb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8015d0c:	f1bb 0f00 	cmp.w	fp, #0
 8015d10:	d100      	bne.n	8015d14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8015d12:	4444      	add	r4, r8
 8015d14:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8015d18:	f1bb 0f01 	cmp.w	fp, #1
 8015d1c:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8015d20:	f892 800a 	ldrb.w	r8, [r2, #10]
 8015d24:	ea48 0803 	orr.w	r8, r8, r3
 8015d28:	d128      	bne.n	8015d7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8015d2a:	eba4 0408 	sub.w	r4, r4, r8
 8015d2e:	2d00      	cmp	r5, #0
 8015d30:	d143      	bne.n	8015dba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8015d32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015d34:	eb08 0304 	add.w	r3, r8, r4
 8015d38:	4413      	add	r3, r2
 8015d3a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8015d3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d40:	4293      	cmp	r3, r2
 8015d42:	da44      	bge.n	8015dce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8015d44:	e02b      	b.n	8015d9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8015d46:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015d48:	e7aa      	b.n	8015ca0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8015d4a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8015d4e:	4659      	mov	r1, fp
 8015d50:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8015d52:	9301      	str	r3, [sp, #4]
 8015d54:	ab1b      	add	r3, sp, #108	; 0x6c
 8015d56:	9300      	str	r3, [sp, #0]
 8015d58:	ab1a      	add	r3, sp, #104	; 0x68
 8015d5a:	f002 fad9 	bl	8018310 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8015d5e:	4681      	mov	r9, r0
 8015d60:	e7bd      	b.n	8015cde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8015d62:	6830      	ldr	r0, [r6, #0]
 8015d64:	6803      	ldr	r3, [r0, #0]
 8015d66:	691b      	ldr	r3, [r3, #16]
 8015d68:	4798      	blx	r3
 8015d6a:	4550      	cmp	r0, sl
 8015d6c:	d001      	beq.n	8015d72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015d6e:	42b8      	cmp	r0, r7
 8015d70:	d1c8      	bne.n	8015d04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8015d72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d74:	464d      	mov	r5, r9
 8015d76:	3301      	adds	r3, #1
 8015d78:	930c      	str	r3, [sp, #48]	; 0x30
 8015d7a:	e797      	b.n	8015cac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8015d7c:	2d00      	cmp	r5, #0
 8015d7e:	f000 80aa 	beq.w	8015ed6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 8015d82:	f1bb 0f00 	cmp.w	fp, #0
 8015d86:	d118      	bne.n	8015dba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8015d88:	6830      	ldr	r0, [r6, #0]
 8015d8a:	4629      	mov	r1, r5
 8015d8c:	6803      	ldr	r3, [r0, #0]
 8015d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d90:	4798      	blx	r3
 8015d92:	4404      	add	r4, r0
 8015d94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015d98:	1ae3      	subs	r3, r4, r3
 8015d9a:	4293      	cmp	r3, r2
 8015d9c:	dd17      	ble.n	8015dce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8015d9e:	464d      	mov	r5, r9
 8015da0:	2d00      	cmp	r5, #0
 8015da2:	f000 8096 	beq.w	8015ed2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8015da6:	2d0a      	cmp	r5, #10
 8015da8:	f040 8084 	bne.w	8015eb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8015dac:	250a      	movs	r5, #10
 8015dae:	fab5 f085 	clz	r0, r5
 8015db2:	0940      	lsrs	r0, r0, #5
 8015db4:	b01d      	add	sp, #116	; 0x74
 8015db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dba:	6830      	ldr	r0, [r6, #0]
 8015dbc:	4629      	mov	r1, r5
 8015dbe:	6803      	ldr	r3, [r0, #0]
 8015dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015dc2:	4798      	blx	r3
 8015dc4:	f1bb 0f01 	cmp.w	fp, #1
 8015dc8:	eba4 0400 	sub.w	r4, r4, r0
 8015dcc:	d0b1      	beq.n	8015d32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8015dce:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015dd0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015dd2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8015dd6:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015dda:	7b43      	ldrb	r3, [r0, #13]
 8015ddc:	4421      	add	r1, r4
 8015dde:	015b      	lsls	r3, r3, #5
 8015de0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015de4:	7983      	ldrb	r3, [r0, #6]
 8015de6:	4313      	orrs	r3, r2
 8015de8:	440b      	add	r3, r1
 8015dea:	42ab      	cmp	r3, r5
 8015dec:	dbc1      	blt.n	8015d72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015df0:	4299      	cmp	r1, r3
 8015df2:	dabe      	bge.n	8015d72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015df4:	6830      	ldr	r0, [r6, #0]
 8015df6:	42a5      	cmp	r5, r4
 8015df8:	6803      	ldr	r3, [r0, #0]
 8015dfa:	bfcc      	ite	gt
 8015dfc:	1b2d      	subgt	r5, r5, r4
 8015dfe:	2500      	movle	r5, #0
 8015e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e02:	bfc8      	it	gt
 8015e04:	b2ad      	uxthgt	r5, r5
 8015e06:	4798      	blx	r3
 8015e08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015e0a:	4935      	ldr	r1, [pc, #212]	; (8015ee0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8015e0c:	7b5a      	ldrb	r2, [r3, #13]
 8015e0e:	f893 e008 	ldrb.w	lr, [r3, #8]
 8015e12:	f012 0f40 	tst.w	r2, #64	; 0x40
 8015e16:	bf18      	it	ne
 8015e18:	468c      	movne	ip, r1
 8015e1a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015e1c:	bf08      	it	eq
 8015e1e:	f04f 0c00 	moveq.w	ip, #0
 8015e22:	4408      	add	r0, r1
 8015e24:	00d1      	lsls	r1, r2, #3
 8015e26:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015e2a:	ea41 070e 	orr.w	r7, r1, lr
 8015e2e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015e30:	ea4c 0707 	orr.w	r7, ip, r7
 8015e34:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8015e38:	1bc7      	subs	r7, r0, r7
 8015e3a:	b2bf      	uxth	r7, r7
 8015e3c:	fa0f fa87 	sxth.w	sl, r7
 8015e40:	4551      	cmp	r1, sl
 8015e42:	dd33      	ble.n	8015eac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8015e44:	0112      	lsls	r2, r2, #4
 8015e46:	79d8      	ldrb	r0, [r3, #7]
 8015e48:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8015e4c:	4302      	orrs	r2, r0
 8015e4e:	4492      	add	sl, r2
 8015e50:	4551      	cmp	r1, sl
 8015e52:	dc8e      	bgt.n	8015d72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015e54:	1bcf      	subs	r7, r1, r7
 8015e56:	468a      	mov	sl, r1
 8015e58:	b2bf      	uxth	r7, r7
 8015e5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8015e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e5e:	6830      	ldr	r0, [r6, #0]
 8015e60:	681a      	ldr	r2, [r3, #0]
 8015e62:	6801      	ldr	r1, [r0, #0]
 8015e64:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8015e66:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015e68:	9311      	str	r3, [sp, #68]	; 0x44
 8015e6a:	9216      	str	r2, [sp, #88]	; 0x58
 8015e6c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8015e6e:	4788      	blx	r1
 8015e70:	79b1      	ldrb	r1, [r6, #6]
 8015e72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e74:	910b      	str	r1, [sp, #44]	; 0x2c
 8015e76:	7bb1      	ldrb	r1, [r6, #14]
 8015e78:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e7a:	910a      	str	r1, [sp, #40]	; 0x28
 8015e7c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8015e80:	9109      	str	r1, [sp, #36]	; 0x24
 8015e82:	68b1      	ldr	r1, [r6, #8]
 8015e84:	9305      	str	r3, [sp, #20]
 8015e86:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015e88:	9206      	str	r2, [sp, #24]
 8015e8a:	e9cd a501 	strd	sl, r5, [sp, #4]
 8015e8e:	4425      	add	r5, r4
 8015e90:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8015e94:	b22d      	sxth	r5, r5
 8015e96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e98:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8015e9c:	9500      	str	r5, [sp, #0]
 8015e9e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015ea0:	681a      	ldr	r2, [r3, #0]
 8015ea2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015ea4:	685b      	ldr	r3, [r3, #4]
 8015ea6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015ea8:	47a8      	blx	r5
 8015eaa:	e762      	b.n	8015d72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015eac:	2700      	movs	r7, #0
 8015eae:	e7d4      	b.n	8015e5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8015eb0:	4690      	mov	r8, r2
 8015eb2:	e75e      	b.n	8015d72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015eb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015eb6:	3401      	adds	r4, #1
 8015eb8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015eba:	429c      	cmp	r4, r3
 8015ebc:	f6bf af77 	bge.w	8015dae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8015ec0:	4659      	mov	r1, fp
 8015ec2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8015ec4:	f002 f9b0 	bl	8018228 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015ec8:	4605      	mov	r5, r0
 8015eca:	b110      	cbz	r0, 8015ed2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8015ecc:	280a      	cmp	r0, #10
 8015ece:	d1f2      	bne.n	8015eb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8015ed0:	e76c      	b.n	8015dac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8015ed2:	2500      	movs	r5, #0
 8015ed4:	e76b      	b.n	8015dae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8015ed6:	f1bb 0f00 	cmp.w	fp, #0
 8015eda:	f43f af5b 	beq.w	8015d94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8015ede:	e776      	b.n	8015dce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8015ee0:	fffffe00 	.word	0xfffffe00

08015ee4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8015ee4:	b530      	push	{r4, r5, lr}
 8015ee6:	8a44      	ldrh	r4, [r0, #18]
 8015ee8:	8ac5      	ldrh	r5, [r0, #22]
 8015eea:	82c3      	strh	r3, [r0, #22]
 8015eec:	442c      	add	r4, r5
 8015eee:	1ae4      	subs	r4, r4, r3
 8015ef0:	8b03      	ldrh	r3, [r0, #24]
 8015ef2:	8244      	strh	r4, [r0, #18]
 8015ef4:	8a84      	ldrh	r4, [r0, #20]
 8015ef6:	4422      	add	r2, r4
 8015ef8:	440c      	add	r4, r1
 8015efa:	1a59      	subs	r1, r3, r1
 8015efc:	8342      	strh	r2, [r0, #26]
 8015efe:	8284      	strh	r4, [r0, #20]
 8015f00:	8301      	strh	r1, [r0, #24]
 8015f02:	bd30      	pop	{r4, r5, pc}

08015f04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8015f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f08:	7a45      	ldrb	r5, [r0, #9]
 8015f0a:	b085      	sub	sp, #20
 8015f0c:	4604      	mov	r4, r0
 8015f0e:	4689      	mov	r9, r1
 8015f10:	1eeb      	subs	r3, r5, #3
 8015f12:	b2db      	uxtb	r3, r3
 8015f14:	b329      	cbz	r1, 8015f62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8015f16:	2b01      	cmp	r3, #1
 8015f18:	d921      	bls.n	8015f5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8015f1a:	1e69      	subs	r1, r5, #1
 8015f1c:	f1d1 0b00 	rsbs	fp, r1, #0
 8015f20:	eb4b 0b01 	adc.w	fp, fp, r1
 8015f24:	1eaa      	subs	r2, r5, #2
 8015f26:	2500      	movs	r5, #0
 8015f28:	4253      	negs	r3, r2
 8015f2a:	9500      	str	r5, [sp, #0]
 8015f2c:	4153      	adcs	r3, r2
 8015f2e:	9301      	str	r3, [sp, #4]
 8015f30:	2600      	movs	r6, #0
 8015f32:	f242 080b 	movw	r8, #8203	; 0x200b
 8015f36:	8266      	strh	r6, [r4, #18]
 8015f38:	82a6      	strh	r6, [r4, #20]
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	68e2      	ldr	r2, [r4, #12]
 8015f3e:	7a21      	ldrb	r1, [r4, #8]
 8015f40:	9303      	str	r3, [sp, #12]
 8015f42:	ab03      	add	r3, sp, #12
 8015f44:	6860      	ldr	r0, [r4, #4]
 8015f46:	8827      	ldrh	r7, [r4, #0]
 8015f48:	f002 f9ae 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015f4c:	8020      	strh	r0, [r4, #0]
 8015f4e:	b9b0      	cbnz	r0, 8015f7e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8015f50:	8b22      	ldrh	r2, [r4, #24]
 8015f52:	2300      	movs	r3, #0
 8015f54:	4611      	mov	r1, r2
 8015f56:	4620      	mov	r0, r4
 8015f58:	f7ff ffc4 	bl	8015ee4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015f5c:	e062      	b.n	8016024 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8015f5e:	468b      	mov	fp, r1
 8015f60:	e7e0      	b.n	8015f24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8015f62:	2b01      	cmp	r3, #1
 8015f64:	f105 35ff 	add.w	r5, r5, #4294967295
 8015f68:	9101      	str	r1, [sp, #4]
 8015f6a:	468b      	mov	fp, r1
 8015f6c:	bf8c      	ite	hi
 8015f6e:	2300      	movhi	r3, #0
 8015f70:	2301      	movls	r3, #1
 8015f72:	2d01      	cmp	r5, #1
 8015f74:	9300      	str	r3, [sp, #0]
 8015f76:	bf8c      	ite	hi
 8015f78:	2500      	movhi	r5, #0
 8015f7a:	2501      	movls	r5, #1
 8015f7c:	e7d8      	b.n	8015f30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8015f7e:	8ae3      	ldrh	r3, [r4, #22]
 8015f80:	280a      	cmp	r0, #10
 8015f82:	f103 0301 	add.w	r3, r3, #1
 8015f86:	82e3      	strh	r3, [r4, #22]
 8015f88:	d0e2      	beq.n	8015f50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8015f8a:	9a03      	ldr	r2, [sp, #12]
 8015f8c:	b972      	cbnz	r2, 8015fac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8015f8e:	4540      	cmp	r0, r8
 8015f90:	d1d3      	bne.n	8015f3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8015f92:	8823      	ldrh	r3, [r4, #0]
 8015f94:	8b21      	ldrh	r1, [r4, #24]
 8015f96:	2b20      	cmp	r3, #32
 8015f98:	d001      	beq.n	8015f9e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 8015f9a:	4543      	cmp	r3, r8
 8015f9c:	d11d      	bne.n	8015fda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8015f9e:	2f20      	cmp	r7, #32
 8015fa0:	d002      	beq.n	8015fa8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8015fa2:	4547      	cmp	r7, r8
 8015fa4:	bf18      	it	ne
 8015fa6:	460e      	movne	r6, r1
 8015fa8:	2001      	movs	r0, #1
 8015faa:	e017      	b.n	8015fdc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8015fac:	4540      	cmp	r0, r8
 8015fae:	d012      	beq.n	8015fd6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8015fb0:	8893      	ldrh	r3, [r2, #4]
 8015fb2:	4639      	mov	r1, r7
 8015fb4:	8023      	strh	r3, [r4, #0]
 8015fb6:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8015fba:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8015fbe:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8015fc2:	ea4a 0a00 	orr.w	sl, sl, r0
 8015fc6:	68e0      	ldr	r0, [r4, #12]
 8015fc8:	6803      	ldr	r3, [r0, #0]
 8015fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015fcc:	4798      	blx	r3
 8015fce:	eb0a 0200 	add.w	r2, sl, r0
 8015fd2:	b292      	uxth	r2, r2
 8015fd4:	e7dd      	b.n	8015f92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	e7db      	b.n	8015f92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8015fda:	2000      	movs	r0, #0
 8015fdc:	440a      	add	r2, r1
 8015fde:	8aa3      	ldrh	r3, [r4, #20]
 8015fe0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8015fe4:	b292      	uxth	r2, r2
 8015fe6:	8322      	strh	r2, [r4, #24]
 8015fe8:	4413      	add	r3, r2
 8015fea:	f1b9 0f00 	cmp.w	r9, #0
 8015fee:	d022      	beq.n	8016036 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8015ff0:	f1bb 0f00 	cmp.w	fp, #0
 8015ff4:	d102      	bne.n	8015ffc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8015ff6:	9901      	ldr	r1, [sp, #4]
 8015ff8:	b149      	cbz	r1, 801600e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8015ffa:	b140      	cbz	r0, 801600e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8015ffc:	8ba1      	ldrh	r1, [r4, #28]
 8015ffe:	4419      	add	r1, r3
 8016000:	458c      	cmp	ip, r1
 8016002:	da12      	bge.n	801602a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8016004:	8a61      	ldrh	r1, [r4, #18]
 8016006:	b181      	cbz	r1, 801602a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8016008:	4563      	cmp	r3, ip
 801600a:	dd96      	ble.n	8015f3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801600c:	e004      	b.n	8016018 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801600e:	4563      	cmp	r3, ip
 8016010:	dd93      	ble.n	8015f3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016012:	8a63      	ldrh	r3, [r4, #18]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d090      	beq.n	8015f3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016018:	2301      	movs	r3, #1
 801601a:	8ba2      	ldrh	r2, [r4, #28]
 801601c:	77a3      	strb	r3, [r4, #30]
 801601e:	8b63      	ldrh	r3, [r4, #26]
 8016020:	4413      	add	r3, r2
 8016022:	8363      	strh	r3, [r4, #26]
 8016024:	b005      	add	sp, #20
 8016026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801602a:	2300      	movs	r3, #0
 801602c:	4611      	mov	r1, r2
 801602e:	4620      	mov	r0, r4
 8016030:	f7ff ff58 	bl	8015ee4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016034:	e781      	b.n	8015f3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016036:	4563      	cmp	r3, ip
 8016038:	dd16      	ble.n	8016068 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801603a:	9b00      	ldr	r3, [sp, #0]
 801603c:	b113      	cbz	r3, 8016044 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801603e:	2301      	movs	r3, #1
 8016040:	460a      	mov	r2, r1
 8016042:	e787      	b.n	8015f54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8016044:	2d00      	cmp	r5, #0
 8016046:	f43f af78 	beq.w	8015f3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801604a:	2800      	cmp	r0, #0
 801604c:	f47f af75 	bne.w	8015f3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016050:	2f20      	cmp	r7, #32
 8016052:	d001      	beq.n	8016058 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8016054:	4547      	cmp	r7, r8
 8016056:	d102      	bne.n	801605e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8016058:	2301      	movs	r3, #1
 801605a:	4632      	mov	r2, r6
 801605c:	e77b      	b.n	8015f56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801605e:	8a63      	ldrh	r3, [r4, #18]
 8016060:	2b00      	cmp	r3, #0
 8016062:	f43f af6a 	beq.w	8015f3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016066:	e7dd      	b.n	8016024 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8016068:	2800      	cmp	r0, #0
 801606a:	f47f af66 	bne.w	8015f3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801606e:	2f20      	cmp	r7, #32
 8016070:	d002      	beq.n	8016078 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8016072:	4547      	cmp	r7, r8
 8016074:	f47f af61 	bne.w	8015f3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016078:	2301      	movs	r3, #1
 801607a:	4632      	mov	r2, r6
 801607c:	e7d7      	b.n	801602e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801607e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801607e:	b570      	push	{r4, r5, r6, lr}
 8016080:	4606      	mov	r6, r0
 8016082:	b08a      	sub	sp, #40	; 0x28
 8016084:	4615      	mov	r5, r2
 8016086:	b191      	cbz	r1, 80160ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8016088:	2401      	movs	r4, #1
 801608a:	e9cd 3100 	strd	r3, r1, [sp]
 801608e:	4613      	mov	r3, r2
 8016090:	4601      	mov	r1, r0
 8016092:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8016096:	a802      	add	r0, sp, #8
 8016098:	f7ff fd20 	bl	8015adc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801609c:	2100      	movs	r1, #0
 801609e:	a802      	add	r0, sp, #8
 80160a0:	f7ff ff30 	bl	8015f04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80160a4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80160a8:	b173      	cbz	r3, 80160c8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80160aa:	3401      	adds	r4, #1
 80160ac:	e7f6      	b.n	801609c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 80160ae:	2401      	movs	r4, #1
 80160b0:	4611      	mov	r1, r2
 80160b2:	f002 f8b9 	bl	8018228 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80160b6:	280a      	cmp	r0, #10
 80160b8:	4629      	mov	r1, r5
 80160ba:	4630      	mov	r0, r6
 80160bc:	bf08      	it	eq
 80160be:	3401      	addeq	r4, #1
 80160c0:	f002 f8b2 	bl	8018228 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80160c4:	2800      	cmp	r0, #0
 80160c6:	d1f6      	bne.n	80160b6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 80160c8:	b2a0      	uxth	r0, r4
 80160ca:	b00a      	add	sp, #40	; 0x28
 80160cc:	bd70      	pop	{r4, r5, r6, pc}

080160ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80160ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160d2:	b0db      	sub	sp, #364	; 0x16c
 80160d4:	468a      	mov	sl, r1
 80160d6:	461c      	mov	r4, r3
 80160d8:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 80160dc:	9009      	str	r0, [sp, #36]	; 0x24
 80160de:	f1bb 0f00 	cmp.w	fp, #0
 80160e2:	f000 80c7 	beq.w	8016274 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	f000 80c3 	beq.w	8016274 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80160ee:	7ba3      	ldrb	r3, [r4, #14]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	f000 80bf 	beq.w	8016274 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80160f6:	af0c      	add	r7, sp, #48	; 0x30
 80160f8:	6810      	ldr	r0, [r2, #0]
 80160fa:	6851      	ldr	r1, [r2, #4]
 80160fc:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8016100:	463b      	mov	r3, r7
 8016102:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8016106:	c303      	stmia	r3!, {r0, r1}
 8016108:	2100      	movs	r1, #0
 801610a:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801610e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8016112:	4638      	mov	r0, r7
 8016114:	910e      	str	r1, [sp, #56]	; 0x38
 8016116:	a90e      	add	r1, sp, #56	; 0x38
 8016118:	79a2      	ldrb	r2, [r4, #6]
 801611a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801611e:	f7ff fd49 	bl	8015bb4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016122:	a90e      	add	r1, sp, #56	; 0x38
 8016124:	79a2      	ldrb	r2, [r4, #6]
 8016126:	4608      	mov	r0, r1
 8016128:	f7ff fd44 	bl	8015bb4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801612c:	4648      	mov	r0, r9
 801612e:	f001 ff39 	bl	8017fa4 <_ZN8touchgfx12TextProviderC1Ev>
 8016132:	6820      	ldr	r0, [r4, #0]
 8016134:	6803      	ldr	r3, [r0, #0]
 8016136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016138:	4798      	blx	r3
 801613a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801613c:	4603      	mov	r3, r0
 801613e:	4659      	mov	r1, fp
 8016140:	4648      	mov	r0, r9
 8016142:	f001 ff4c 	bl	8017fde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016146:	a82e      	add	r0, sp, #184	; 0xb8
 8016148:	f001 ff2c 	bl	8017fa4 <_ZN8touchgfx12TextProviderC1Ev>
 801614c:	f894 8004 	ldrb.w	r8, [r4, #4]
 8016150:	f1b8 0f00 	cmp.w	r8, #0
 8016154:	d009      	beq.n	801616a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8016156:	6820      	ldr	r0, [r4, #0]
 8016158:	6803      	ldr	r3, [r0, #0]
 801615a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801615c:	4798      	blx	r3
 801615e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016160:	4603      	mov	r3, r0
 8016162:	4659      	mov	r1, fp
 8016164:	a82e      	add	r0, sp, #184	; 0xb8
 8016166:	f001 ff3a 	bl	8017fde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801616a:	6820      	ldr	r0, [r4, #0]
 801616c:	6803      	ldr	r3, [r0, #0]
 801616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016170:	4798      	blx	r3
 8016172:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016176:	182e      	adds	r6, r5, r0
 8016178:	2e00      	cmp	r6, #0
 801617a:	dd45      	ble.n	8016208 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801617c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016180:	4283      	cmp	r3, r0
 8016182:	db41      	blt.n	8016208 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8016184:	441d      	add	r5, r3
 8016186:	fb95 f5f6 	sdiv	r5, r5, r6
 801618a:	a844      	add	r0, sp, #272	; 0x110
 801618c:	f001 ff0a 	bl	8017fa4 <_ZN8touchgfx12TextProviderC1Ev>
 8016190:	7c23      	ldrb	r3, [r4, #16]
 8016192:	b14b      	cbz	r3, 80161a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 8016194:	6820      	ldr	r0, [r4, #0]
 8016196:	6803      	ldr	r3, [r0, #0]
 8016198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801619a:	4798      	blx	r3
 801619c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801619e:	4603      	mov	r3, r0
 80161a0:	4659      	mov	r1, fp
 80161a2:	a844      	add	r0, sp, #272	; 0x110
 80161a4:	f001 ff1b 	bl	8017fde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80161a8:	7c21      	ldrb	r1, [r4, #16]
 80161aa:	a810      	add	r0, sp, #64	; 0x40
 80161ac:	7963      	ldrb	r3, [r4, #5]
 80161ae:	9101      	str	r1, [sp, #4]
 80161b0:	6821      	ldr	r1, [r4, #0]
 80161b2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80161b6:	9100      	str	r1, [sp, #0]
 80161b8:	a944      	add	r1, sp, #272	; 0x110
 80161ba:	f7ff fc8f 	bl	8015adc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80161be:	7c23      	ldrb	r3, [r4, #16]
 80161c0:	bb23      	cbnz	r3, 801620c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 80161c2:	fa1f fb86 	uxth.w	fp, r6
 80161c6:	2d00      	cmp	r5, #0
 80161c8:	dd57      	ble.n	801627a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 80161ca:	7961      	ldrb	r1, [r4, #5]
 80161cc:	4648      	mov	r0, r9
 80161ce:	f002 f82b 	bl	8018228 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80161d2:	4603      	mov	r3, r0
 80161d4:	f1b8 0f00 	cmp.w	r8, #0
 80161d8:	d005      	beq.n	80161e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 80161da:	9008      	str	r0, [sp, #32]
 80161dc:	a82e      	add	r0, sp, #184	; 0xb8
 80161de:	7961      	ldrb	r1, [r4, #5]
 80161e0:	f002 f822 	bl	8018228 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80161e4:	9b08      	ldr	r3, [sp, #32]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d044      	beq.n	8016274 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80161ea:	2b0a      	cmp	r3, #10
 80161ec:	d1eb      	bne.n	80161c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 80161ee:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80161f2:	3d01      	subs	r5, #1
 80161f4:	445b      	add	r3, fp
 80161f6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80161fa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80161fe:	eba3 030b 	sub.w	r3, r3, fp
 8016202:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016206:	e7de      	b.n	80161c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8016208:	2500      	movs	r5, #0
 801620a:	e7be      	b.n	801618a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 801620c:	0073      	lsls	r3, r6, #1
 801620e:	9308      	str	r3, [sp, #32]
 8016210:	2d00      	cmp	r5, #0
 8016212:	dd32      	ble.n	801627a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8016214:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8016218:	a810      	add	r0, sp, #64	; 0x40
 801621a:	9b08      	ldr	r3, [sp, #32]
 801621c:	428b      	cmp	r3, r1
 801621e:	bfd4      	ite	le
 8016220:	2100      	movle	r1, #0
 8016222:	2101      	movgt	r1, #1
 8016224:	f7ff fe6e 	bl	8015f04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016228:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 801622c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016230:	fa1f fb83 	uxth.w	fp, r3
 8016234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016238:	459b      	cmp	fp, r3
 801623a:	d00b      	beq.n	8016254 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801623c:	7961      	ldrb	r1, [r4, #5]
 801623e:	4648      	mov	r0, r9
 8016240:	f001 fff2 	bl	8018228 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016244:	f1b8 0f00 	cmp.w	r8, #0
 8016248:	d0f0      	beq.n	801622c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801624a:	7961      	ldrb	r1, [r4, #5]
 801624c:	a82e      	add	r0, sp, #184	; 0xb8
 801624e:	f001 ffeb 	bl	8018228 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016252:	e7eb      	b.n	801622c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8016254:	b2b3      	uxth	r3, r6
 8016256:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801625a:	3d01      	subs	r5, #1
 801625c:	441a      	add	r2, r3
 801625e:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8016262:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8016266:	1ad3      	subs	r3, r2, r3
 8016268:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801626c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016270:	2b00      	cmp	r3, #0
 8016272:	d1cd      	bne.n	8016210 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8016274:	b05b      	add	sp, #364	; 0x16c
 8016276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801627a:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801627e:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 8016282:	7c23      	ldrb	r3, [r4, #16]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d05f      	beq.n	8016348 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8016288:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801628c:	a810      	add	r0, sp, #64	; 0x40
 801628e:	458b      	cmp	fp, r1
 8016290:	bfd4      	ite	le
 8016292:	2100      	movle	r1, #0
 8016294:	2101      	movgt	r1, #1
 8016296:	f7ff fe35 	bl	8015f04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801629a:	f1b8 0f00 	cmp.w	r8, #0
 801629e:	d04c      	beq.n	801633a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80162a0:	7c23      	ldrb	r3, [r4, #16]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d053      	beq.n	801634e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 80162a6:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80162aa:	7922      	ldrb	r2, [r4, #4]
 80162ac:	2a01      	cmp	r2, #1
 80162ae:	d13c      	bne.n	801632a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80162b0:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80162b4:	1ac0      	subs	r0, r0, r3
 80162b6:	2302      	movs	r3, #2
 80162b8:	fb90 f0f3 	sdiv	r0, r0, r3
 80162bc:	b200      	sxth	r0, r0
 80162be:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80162c2:	4418      	add	r0, r3
 80162c4:	7c23      	ldrb	r3, [r4, #16]
 80162c6:	8028      	strh	r0, [r5, #0]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d03a      	beq.n	8016342 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 80162cc:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80162d0:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 80162d4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80162d8:	f8cd 9010 	str.w	r9, [sp, #16]
 80162dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80162de:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80162e2:	2200      	movs	r2, #0
 80162e4:	2100      	movs	r1, #0
 80162e6:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80162ea:	e9cd 5700 	strd	r5, r7, [sp]
 80162ee:	4652      	mov	r2, sl
 80162f0:	f7ff fcb2 	bl	8015c58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80162f4:	2800      	cmp	r0, #0
 80162f6:	d1bd      	bne.n	8016274 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80162f8:	b2b2      	uxth	r2, r6
 80162fa:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80162fe:	4611      	mov	r1, r2
 8016300:	4413      	add	r3, r2
 8016302:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8016306:	b21b      	sxth	r3, r3
 8016308:	1a52      	subs	r2, r2, r1
 801630a:	7c21      	ldrb	r1, [r4, #16]
 801630c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016310:	b212      	sxth	r2, r2
 8016312:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8016316:	b109      	cbz	r1, 801631c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8016318:	42b2      	cmp	r2, r6
 801631a:	dbab      	blt.n	8016274 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801631c:	887a      	ldrh	r2, [r7, #2]
 801631e:	88f9      	ldrh	r1, [r7, #6]
 8016320:	440a      	add	r2, r1
 8016322:	b212      	sxth	r2, r2
 8016324:	4293      	cmp	r3, r2
 8016326:	ddac      	ble.n	8016282 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8016328:	e7a4      	b.n	8016274 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801632a:	2a02      	cmp	r2, #2
 801632c:	d107      	bne.n	801633e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801632e:	7be2      	ldrb	r2, [r4, #15]
 8016330:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8016334:	1a80      	subs	r0, r0, r2
 8016336:	1ac0      	subs	r0, r0, r3
 8016338:	e7c0      	b.n	80162bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801633a:	7be0      	ldrb	r0, [r4, #15]
 801633c:	e7bf      	b.n	80162be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801633e:	2000      	movs	r0, #0
 8016340:	e7bd      	b.n	80162be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8016342:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016346:	e7c3      	b.n	80162d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8016348:	f1b8 0f00 	cmp.w	r8, #0
 801634c:	d0f5      	beq.n	801633a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801634e:	2300      	movs	r3, #0
 8016350:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016354:	6821      	ldr	r1, [r4, #0]
 8016356:	a82e      	add	r0, sp, #184	; 0xb8
 8016358:	f7ff fbfa 	bl	8015b50 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801635c:	b203      	sxth	r3, r0
 801635e:	e7a4      	b.n	80162aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

08016360 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016360:	2b02      	cmp	r3, #2
 8016362:	b510      	push	{r4, lr}
 8016364:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016368:	d00b      	beq.n	8016382 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801636a:	2b03      	cmp	r3, #3
 801636c:	d00e      	beq.n	801638c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801636e:	2b01      	cmp	r3, #1
 8016370:	d001      	beq.n	8016376 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8016372:	1860      	adds	r0, r4, r1
 8016374:	bd10      	pop	{r4, pc}
 8016376:	8880      	ldrh	r0, [r0, #4]
 8016378:	4420      	add	r0, r4
 801637a:	b200      	sxth	r0, r0
 801637c:	1a80      	subs	r0, r0, r2
 801637e:	3801      	subs	r0, #1
 8016380:	e7f8      	b.n	8016374 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8016382:	8880      	ldrh	r0, [r0, #4]
 8016384:	4420      	add	r0, r4
 8016386:	b200      	sxth	r0, r0
 8016388:	1a40      	subs	r0, r0, r1
 801638a:	e7f8      	b.n	801637e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801638c:	18a0      	adds	r0, r4, r2
 801638e:	e7f1      	b.n	8016374 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08016390 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016390:	2b02      	cmp	r3, #2
 8016392:	b510      	push	{r4, lr}
 8016394:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8016398:	d006      	beq.n	80163a8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801639a:	2b03      	cmp	r3, #3
 801639c:	d00a      	beq.n	80163b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801639e:	2b01      	cmp	r3, #1
 80163a0:	bf14      	ite	ne
 80163a2:	18a0      	addne	r0, r4, r2
 80163a4:	1860      	addeq	r0, r4, r1
 80163a6:	bd10      	pop	{r4, pc}
 80163a8:	88c0      	ldrh	r0, [r0, #6]
 80163aa:	4420      	add	r0, r4
 80163ac:	b200      	sxth	r0, r0
 80163ae:	1a80      	subs	r0, r0, r2
 80163b0:	3801      	subs	r0, #1
 80163b2:	e7f8      	b.n	80163a6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80163b4:	88c0      	ldrh	r0, [r0, #6]
 80163b6:	4420      	add	r0, r4
 80163b8:	b200      	sxth	r0, r0
 80163ba:	1a40      	subs	r0, r0, r1
 80163bc:	e7f8      	b.n	80163b0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080163c0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80163c0:	4b01      	ldr	r3, [pc, #4]	; (80163c8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80163c2:	2200      	movs	r2, #0
 80163c4:	601a      	str	r2, [r3, #0]
 80163c6:	4770      	bx	lr
 80163c8:	2000b490 	.word	0x2000b490

080163cc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 80163cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163ce:	1e05      	subs	r5, r0, #0
 80163d0:	f04f 0601 	mov.w	r6, #1
 80163d4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80163d8:	bfba      	itte	lt
 80163da:	f04f 37ff 	movlt.w	r7, #4294967295
 80163de:	426d      	neglt	r5, r5
 80163e0:	2701      	movge	r7, #1
 80163e2:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 80163e6:	f1be 0f00 	cmp.w	lr, #0
 80163ea:	bfbc      	itt	lt
 80163ec:	f1ce 0e00 	rsblt	lr, lr, #0
 80163f0:	427f      	neglt	r7, r7
 80163f2:	2c00      	cmp	r4, #0
 80163f4:	fa4e f001 	asr.w	r0, lr, r1
 80163f8:	fa06 f101 	lsl.w	r1, r6, r1
 80163fc:	bfbc      	itt	lt
 80163fe:	4264      	neglt	r4, r4
 8016400:	427f      	neglt	r7, r7
 8016402:	3901      	subs	r1, #1
 8016404:	ea01 010e 	and.w	r1, r1, lr
 8016408:	434d      	muls	r5, r1
 801640a:	f8dc 1000 	ldr.w	r1, [ip]
 801640e:	fb03 1300 	mla	r3, r3, r0, r1
 8016412:	fb95 f1f4 	sdiv	r1, r5, r4
 8016416:	fb04 5511 	mls	r5, r4, r1, r5
 801641a:	441d      	add	r5, r3
 801641c:	fb95 f3f4 	sdiv	r3, r5, r4
 8016420:	4419      	add	r1, r3
 8016422:	fb04 5413 	mls	r4, r4, r3, r5
 8016426:	fb02 1000 	mla	r0, r2, r0, r1
 801642a:	f8cc 4000 	str.w	r4, [ip]
 801642e:	4378      	muls	r0, r7
 8016430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016434 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016438:	4c24      	ldr	r4, [pc, #144]	; (80164cc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801643a:	b086      	sub	sp, #24
 801643c:	4605      	mov	r5, r0
 801643e:	6807      	ldr	r7, [r0, #0]
 8016440:	69a3      	ldr	r3, [r4, #24]
 8016442:	b92b      	cbnz	r3, 8016450 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8016444:	6840      	ldr	r0, [r0, #4]
 8016446:	e9c5 7000 	strd	r7, r0, [r5]
 801644a:	b006      	add	sp, #24
 801644c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016450:	f04f 0802 	mov.w	r8, #2
 8016454:	68a2      	ldr	r2, [r4, #8]
 8016456:	ae06      	add	r6, sp, #24
 8016458:	6820      	ldr	r0, [r4, #0]
 801645a:	fb93 f1f8 	sdiv	r1, r3, r8
 801645e:	440a      	add	r2, r1
 8016460:	69e1      	ldr	r1, [r4, #28]
 8016462:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016466:	9700      	str	r7, [sp, #0]
 8016468:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801646a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801646e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016470:	f7ff ffac 	bl	80163cc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8016474:	69a3      	ldr	r3, [r4, #24]
 8016476:	4607      	mov	r7, r0
 8016478:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801647a:	9301      	str	r3, [sp, #4]
 801647c:	686b      	ldr	r3, [r5, #4]
 801647e:	6a21      	ldr	r1, [r4, #32]
 8016480:	9300      	str	r3, [sp, #0]
 8016482:	9602      	str	r6, [sp, #8]
 8016484:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016486:	6860      	ldr	r0, [r4, #4]
 8016488:	f7ff ffa0 	bl	80163cc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801648c:	69a2      	ldr	r2, [r4, #24]
 801648e:	6963      	ldr	r3, [r4, #20]
 8016490:	4407      	add	r7, r0
 8016492:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016494:	68e0      	ldr	r0, [r4, #12]
 8016496:	fb92 f8f8 	sdiv	r8, r2, r8
 801649a:	4443      	add	r3, r8
 801649c:	9305      	str	r3, [sp, #20]
 801649e:	682b      	ldr	r3, [r5, #0]
 80164a0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80164a4:	9300      	str	r3, [sp, #0]
 80164a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80164a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80164aa:	f7ff ff8f 	bl	80163cc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80164ae:	69a3      	ldr	r3, [r4, #24]
 80164b0:	4680      	mov	r8, r0
 80164b2:	9602      	str	r6, [sp, #8]
 80164b4:	9301      	str	r3, [sp, #4]
 80164b6:	686b      	ldr	r3, [r5, #4]
 80164b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80164ba:	9300      	str	r3, [sp, #0]
 80164bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80164be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80164c0:	6920      	ldr	r0, [r4, #16]
 80164c2:	f7ff ff83 	bl	80163cc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80164c6:	4440      	add	r0, r8
 80164c8:	e7bd      	b.n	8016446 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80164ca:	bf00      	nop
 80164cc:	2000b494 	.word	0x2000b494

080164d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80164d0:	4b07      	ldr	r3, [pc, #28]	; (80164f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80164d2:	b510      	push	{r4, lr}
 80164d4:	781b      	ldrb	r3, [r3, #0]
 80164d6:	2b01      	cmp	r3, #1
 80164d8:	d108      	bne.n	80164ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80164da:	4b06      	ldr	r3, [pc, #24]	; (80164f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80164dc:	880c      	ldrh	r4, [r1, #0]
 80164de:	881b      	ldrh	r3, [r3, #0]
 80164e0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80164e4:	3b01      	subs	r3, #1
 80164e6:	1b1b      	subs	r3, r3, r4
 80164e8:	8003      	strh	r3, [r0, #0]
 80164ea:	800a      	strh	r2, [r1, #0]
 80164ec:	bd10      	pop	{r4, pc}
 80164ee:	bf00      	nop
 80164f0:	2000b460 	.word	0x2000b460
 80164f4:	2000b464 	.word	0x2000b464

080164f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80164f8:	4b0a      	ldr	r3, [pc, #40]	; (8016524 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80164fa:	b510      	push	{r4, lr}
 80164fc:	781b      	ldrb	r3, [r3, #0]
 80164fe:	2b01      	cmp	r3, #1
 8016500:	d10e      	bne.n	8016520 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8016502:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016506:	8843      	ldrh	r3, [r0, #2]
 8016508:	f9b0 4000 	ldrsh.w	r4, [r0]
 801650c:	18ca      	adds	r2, r1, r3
 801650e:	4b06      	ldr	r3, [pc, #24]	; (8016528 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016510:	8044      	strh	r4, [r0, #2]
 8016512:	881b      	ldrh	r3, [r3, #0]
 8016514:	1a9b      	subs	r3, r3, r2
 8016516:	8003      	strh	r3, [r0, #0]
 8016518:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801651c:	8081      	strh	r1, [r0, #4]
 801651e:	80c3      	strh	r3, [r0, #6]
 8016520:	bd10      	pop	{r4, pc}
 8016522:	bf00      	nop
 8016524:	2000b460 	.word	0x2000b460
 8016528:	2000b45c 	.word	0x2000b45c

0801652c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801652c:	4b07      	ldr	r3, [pc, #28]	; (801654c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801652e:	b510      	push	{r4, lr}
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	2b01      	cmp	r3, #1
 8016534:	d108      	bne.n	8016548 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016536:	f9b1 3000 	ldrsh.w	r3, [r1]
 801653a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801653e:	8003      	strh	r3, [r0, #0]
 8016540:	8893      	ldrh	r3, [r2, #4]
 8016542:	3b01      	subs	r3, #1
 8016544:	1b1b      	subs	r3, r3, r4
 8016546:	800b      	strh	r3, [r1, #0]
 8016548:	bd10      	pop	{r4, pc}
 801654a:	bf00      	nop
 801654c:	2000b460 	.word	0x2000b460

08016550 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016550:	4b08      	ldr	r3, [pc, #32]	; (8016574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016552:	b513      	push	{r0, r1, r4, lr}
 8016554:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016558:	2400      	movs	r4, #0
 801655a:	4b07      	ldr	r3, [pc, #28]	; (8016578 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801655c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016560:	466a      	mov	r2, sp
 8016562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016566:	9400      	str	r4, [sp, #0]
 8016568:	f8ad 3006 	strh.w	r3, [sp, #6]
 801656c:	f7ff ffde 	bl	801652c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016570:	b002      	add	sp, #8
 8016572:	bd10      	pop	{r4, pc}
 8016574:	2000b45c 	.word	0x2000b45c
 8016578:	2000b45e 	.word	0x2000b45e

0801657c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801657c:	4b0a      	ldr	r3, [pc, #40]	; (80165a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801657e:	460a      	mov	r2, r1
 8016580:	b510      	push	{r4, lr}
 8016582:	781b      	ldrb	r3, [r3, #0]
 8016584:	2b01      	cmp	r3, #1
 8016586:	d10d      	bne.n	80165a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016588:	8881      	ldrh	r1, [r0, #4]
 801658a:	8803      	ldrh	r3, [r0, #0]
 801658c:	440b      	add	r3, r1
 801658e:	4601      	mov	r1, r0
 8016590:	3b01      	subs	r3, #1
 8016592:	f821 3b02 	strh.w	r3, [r1], #2
 8016596:	f7ff ffc9 	bl	801652c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801659a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801659e:	88c2      	ldrh	r2, [r0, #6]
 80165a0:	80c3      	strh	r3, [r0, #6]
 80165a2:	8082      	strh	r2, [r0, #4]
 80165a4:	bd10      	pop	{r4, pc}
 80165a6:	bf00      	nop
 80165a8:	2000b460 	.word	0x2000b460

080165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80165ac:	4b09      	ldr	r3, [pc, #36]	; (80165d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80165ae:	b507      	push	{r0, r1, r2, lr}
 80165b0:	2100      	movs	r1, #0
 80165b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80165b6:	4b08      	ldr	r3, [pc, #32]	; (80165d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80165b8:	9100      	str	r1, [sp, #0]
 80165ba:	4669      	mov	r1, sp
 80165bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165c0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80165c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80165c8:	f7ff ffd8 	bl	801657c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80165cc:	b003      	add	sp, #12
 80165ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80165d2:	bf00      	nop
 80165d4:	2000b45c 	.word	0x2000b45c
 80165d8:	2000b45e 	.word	0x2000b45e

080165dc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80165dc:	4b03      	ldr	r3, [pc, #12]	; (80165ec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80165de:	6818      	ldr	r0, [r3, #0]
 80165e0:	b110      	cbz	r0, 80165e8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80165e2:	6803      	ldr	r3, [r0, #0]
 80165e4:	699b      	ldr	r3, [r3, #24]
 80165e6:	4718      	bx	r3
 80165e8:	4770      	bx	lr
 80165ea:	bf00      	nop
 80165ec:	2000b4e4 	.word	0x2000b4e4

080165f0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80165f0:	4770      	bx	lr
	...

080165f4 <_ZN8touchgfx11Application4drawEv>:
 80165f4:	4b09      	ldr	r3, [pc, #36]	; (801661c <_ZN8touchgfx11Application4drawEv+0x28>)
 80165f6:	b507      	push	{r0, r1, r2, lr}
 80165f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80165fc:	2100      	movs	r1, #0
 80165fe:	4b08      	ldr	r3, [pc, #32]	; (8016620 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016600:	9100      	str	r1, [sp, #0]
 8016602:	4669      	mov	r1, sp
 8016604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016608:	f8ad 2004 	strh.w	r2, [sp, #4]
 801660c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016610:	6803      	ldr	r3, [r0, #0]
 8016612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016614:	4798      	blx	r3
 8016616:	b003      	add	sp, #12
 8016618:	f85d fb04 	ldr.w	pc, [sp], #4
 801661c:	2000b45c 	.word	0x2000b45c
 8016620:	2000b45e 	.word	0x2000b45e

08016624 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016624:	4b03      	ldr	r3, [pc, #12]	; (8016634 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016626:	6818      	ldr	r0, [r3, #0]
 8016628:	b110      	cbz	r0, 8016630 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801662a:	6803      	ldr	r3, [r0, #0]
 801662c:	69db      	ldr	r3, [r3, #28]
 801662e:	4718      	bx	r3
 8016630:	4770      	bx	lr
 8016632:	bf00      	nop
 8016634:	2000b4e4 	.word	0x2000b4e4

08016638 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016638:	4b03      	ldr	r3, [pc, #12]	; (8016648 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801663a:	6818      	ldr	r0, [r3, #0]
 801663c:	b110      	cbz	r0, 8016644 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801663e:	6803      	ldr	r3, [r0, #0]
 8016640:	6a1b      	ldr	r3, [r3, #32]
 8016642:	4718      	bx	r3
 8016644:	4770      	bx	lr
 8016646:	bf00      	nop
 8016648:	2000b4e4 	.word	0x2000b4e4

0801664c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801664c:	4b03      	ldr	r3, [pc, #12]	; (801665c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801664e:	6818      	ldr	r0, [r3, #0]
 8016650:	b110      	cbz	r0, 8016658 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016652:	6803      	ldr	r3, [r0, #0]
 8016654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016656:	4718      	bx	r3
 8016658:	4770      	bx	lr
 801665a:	bf00      	nop
 801665c:	2000b4e4 	.word	0x2000b4e4

08016660 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016664:	4d3a      	ldr	r5, [pc, #232]	; (8016750 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8016666:	4604      	mov	r4, r0
 8016668:	6828      	ldr	r0, [r5, #0]
 801666a:	b140      	cbz	r0, 801667e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801666c:	7a03      	ldrb	r3, [r0, #8]
 801666e:	b933      	cbnz	r3, 801667e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8016670:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8016674:	6803      	ldr	r3, [r0, #0]
 8016676:	689b      	ldr	r3, [r3, #8]
 8016678:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801667c:	4718      	bx	r3
 801667e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8016682:	b97b      	cbnz	r3, 80166a4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8016684:	b170      	cbz	r0, 80166a4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8016686:	7a03      	ldrb	r3, [r0, #8]
 8016688:	b163      	cbz	r3, 80166a4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801668a:	4b32      	ldr	r3, [pc, #200]	; (8016754 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801668c:	6818      	ldr	r0, [r3, #0]
 801668e:	b110      	cbz	r0, 8016696 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8016690:	6803      	ldr	r3, [r0, #0]
 8016692:	691b      	ldr	r3, [r3, #16]
 8016694:	4798      	blx	r3
 8016696:	6828      	ldr	r0, [r5, #0]
 8016698:	6803      	ldr	r3, [r0, #0]
 801669a:	68db      	ldr	r3, [r3, #12]
 801669c:	4798      	blx	r3
 801669e:	2301      	movs	r3, #1
 80166a0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80166a4:	2500      	movs	r5, #0
 80166a6:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80166aa:	42a8      	cmp	r0, r5
 80166ac:	dd0c      	ble.n	80166c8 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 80166ae:	1963      	adds	r3, r4, r5
 80166b0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80166b4:	b132      	cbz	r2, 80166c4 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 80166b6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80166ba:	4413      	add	r3, r2
 80166bc:	6858      	ldr	r0, [r3, #4]
 80166be:	6803      	ldr	r3, [r0, #0]
 80166c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80166c2:	4798      	blx	r3
 80166c4:	3501      	adds	r5, #1
 80166c6:	e7ee      	b.n	80166a6 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 80166c8:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 80166cc:	3801      	subs	r0, #1
 80166ce:	f04f 0c00 	mov.w	ip, #0
 80166d2:	3678      	adds	r6, #120	; 0x78
 80166d4:	1c43      	adds	r3, r0, #1
 80166d6:	d033      	beq.n	8016740 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 80166d8:	1823      	adds	r3, r4, r0
 80166da:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80166de:	bb6a      	cbnz	r2, 801673c <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 80166e0:	b281      	uxth	r1, r0
 80166e2:	1d25      	adds	r5, r4, #4
 80166e4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80166e8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80166ec:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80166f0:	4293      	cmp	r3, r2
 80166f2:	dc0a      	bgt.n	801670a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 80166f4:	f101 0288 	add.w	r2, r1, #136	; 0x88
 80166f8:	4422      	add	r2, r4
 80166fa:	18b1      	adds	r1, r6, r2
 80166fc:	b289      	uxth	r1, r1
 80166fe:	428b      	cmp	r3, r1
 8016700:	d919      	bls.n	8016736 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8016702:	7851      	ldrb	r1, [r2, #1]
 8016704:	f802 1b01 	strb.w	r1, [r2], #1
 8016708:	e7f7      	b.n	80166fa <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801670a:	682f      	ldr	r7, [r5, #0]
 801670c:	f105 0804 	add.w	r8, r5, #4
 8016710:	45b9      	cmp	r9, r7
 8016712:	d10d      	bne.n	8016730 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8016714:	4696      	mov	lr, r2
 8016716:	f1be 0f1e 	cmp.w	lr, #30
 801671a:	dc06      	bgt.n	801672a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801671c:	f10e 0e01 	add.w	lr, lr, #1
 8016720:	686f      	ldr	r7, [r5, #4]
 8016722:	4573      	cmp	r3, lr
 8016724:	f845 7b04 	str.w	r7, [r5], #4
 8016728:	dcf5      	bgt.n	8016716 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801672a:	3b01      	subs	r3, #1
 801672c:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8016730:	3201      	adds	r2, #1
 8016732:	4645      	mov	r5, r8
 8016734:	e7da      	b.n	80166ec <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8016736:	4423      	add	r3, r4
 8016738:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801673c:	3801      	subs	r0, #1
 801673e:	e7c9      	b.n	80166d4 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8016740:	4b04      	ldr	r3, [pc, #16]	; (8016754 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8016742:	6818      	ldr	r0, [r3, #0]
 8016744:	b110      	cbz	r0, 801674c <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8016746:	6803      	ldr	r3, [r0, #0]
 8016748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801674a:	e795      	b.n	8016678 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016750:	2000b4e8 	.word	0x2000b4e8
 8016754:	2000b4e4 	.word	0x2000b4e4

08016758 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016758:	b570      	push	{r4, r5, r6, lr}
 801675a:	4606      	mov	r6, r0
 801675c:	460c      	mov	r4, r1
 801675e:	b929      	cbnz	r1, 801676c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8016760:	4b0c      	ldr	r3, [pc, #48]	; (8016794 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8016762:	2164      	movs	r1, #100	; 0x64
 8016764:	4a0c      	ldr	r2, [pc, #48]	; (8016798 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8016766:	480d      	ldr	r0, [pc, #52]	; (801679c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8016768:	f00c f89a 	bl	80228a0 <__assert_func>
 801676c:	2300      	movs	r3, #0
 801676e:	4d0c      	ldr	r5, [pc, #48]	; (80167a0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8016770:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8016774:	6828      	ldr	r0, [r5, #0]
 8016776:	b110      	cbz	r0, 801677e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8016778:	6803      	ldr	r3, [r0, #0]
 801677a:	695b      	ldr	r3, [r3, #20]
 801677c:	4798      	blx	r3
 801677e:	602c      	str	r4, [r5, #0]
 8016780:	4620      	mov	r0, r4
 8016782:	6823      	ldr	r3, [r4, #0]
 8016784:	68db      	ldr	r3, [r3, #12]
 8016786:	4798      	blx	r3
 8016788:	6833      	ldr	r3, [r6, #0]
 801678a:	4630      	mov	r0, r6
 801678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801678e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016792:	4718      	bx	r3
 8016794:	08025f74 	.word	0x08025f74
 8016798:	0802603c 	.word	0x0802603c
 801679c:	08025f7e 	.word	0x08025f7e
 80167a0:	2000b4e4 	.word	0x2000b4e4

080167a4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80167a4:	b510      	push	{r4, lr}
 80167a6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80167aa:	888a      	ldrh	r2, [r1, #4]
 80167ac:	f9b0 3000 	ldrsh.w	r3, [r0]
 80167b0:	4422      	add	r2, r4
 80167b2:	b212      	sxth	r2, r2
 80167b4:	4293      	cmp	r3, r2
 80167b6:	da15      	bge.n	80167e4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80167b8:	8882      	ldrh	r2, [r0, #4]
 80167ba:	4413      	add	r3, r2
 80167bc:	b21b      	sxth	r3, r3
 80167be:	429c      	cmp	r4, r3
 80167c0:	da10      	bge.n	80167e4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80167c2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80167c6:	88c9      	ldrh	r1, [r1, #6]
 80167c8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80167cc:	4419      	add	r1, r3
 80167ce:	b209      	sxth	r1, r1
 80167d0:	428a      	cmp	r2, r1
 80167d2:	da07      	bge.n	80167e4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80167d4:	88c0      	ldrh	r0, [r0, #6]
 80167d6:	4410      	add	r0, r2
 80167d8:	b200      	sxth	r0, r0
 80167da:	4283      	cmp	r3, r0
 80167dc:	bfac      	ite	ge
 80167de:	2000      	movge	r0, #0
 80167e0:	2001      	movlt	r0, #1
 80167e2:	bd10      	pop	{r4, pc}
 80167e4:	2000      	movs	r0, #0
 80167e6:	e7fc      	b.n	80167e2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080167e8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80167e8:	b570      	push	{r4, r5, r6, lr}
 80167ea:	f9b1 4000 	ldrsh.w	r4, [r1]
 80167ee:	f9b0 5000 	ldrsh.w	r5, [r0]
 80167f2:	42ac      	cmp	r4, r5
 80167f4:	db18      	blt.n	8016828 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80167f6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80167fa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80167fe:	429a      	cmp	r2, r3
 8016800:	db12      	blt.n	8016828 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8016802:	8886      	ldrh	r6, [r0, #4]
 8016804:	4435      	add	r5, r6
 8016806:	888e      	ldrh	r6, [r1, #4]
 8016808:	4434      	add	r4, r6
 801680a:	b22d      	sxth	r5, r5
 801680c:	b224      	sxth	r4, r4
 801680e:	42a5      	cmp	r5, r4
 8016810:	db0a      	blt.n	8016828 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8016812:	88c0      	ldrh	r0, [r0, #6]
 8016814:	4418      	add	r0, r3
 8016816:	88cb      	ldrh	r3, [r1, #6]
 8016818:	441a      	add	r2, r3
 801681a:	b200      	sxth	r0, r0
 801681c:	b212      	sxth	r2, r2
 801681e:	4290      	cmp	r0, r2
 8016820:	bfb4      	ite	lt
 8016822:	2000      	movlt	r0, #0
 8016824:	2001      	movge	r0, #1
 8016826:	bd70      	pop	{r4, r5, r6, pc}
 8016828:	2000      	movs	r0, #0
 801682a:	e7fc      	b.n	8016826 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801682c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801682e:	4604      	mov	r4, r0
 8016830:	4608      	mov	r0, r1
 8016832:	460d      	mov	r5, r1
 8016834:	f7fc fdbe 	bl	80133b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016838:	b978      	cbnz	r0, 801685a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801683a:	4620      	mov	r0, r4
 801683c:	f7fc fdba 	bl	80133b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016840:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016844:	b150      	cbz	r0, 801685c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016846:	8026      	strh	r6, [r4, #0]
 8016848:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801684c:	8063      	strh	r3, [r4, #2]
 801684e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016852:	80a3      	strh	r3, [r4, #4]
 8016854:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016858:	80e3      	strh	r3, [r4, #6]
 801685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801685c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016860:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016864:	42b1      	cmp	r1, r6
 8016866:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801686a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801686e:	460f      	mov	r7, r1
 8016870:	88ed      	ldrh	r5, [r5, #6]
 8016872:	bfa8      	it	ge
 8016874:	4637      	movge	r7, r6
 8016876:	4293      	cmp	r3, r2
 8016878:	4618      	mov	r0, r3
 801687a:	4466      	add	r6, ip
 801687c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016880:	bfa8      	it	ge
 8016882:	4610      	movge	r0, r2
 8016884:	442a      	add	r2, r5
 8016886:	88e5      	ldrh	r5, [r4, #6]
 8016888:	4461      	add	r1, ip
 801688a:	b236      	sxth	r6, r6
 801688c:	8027      	strh	r7, [r4, #0]
 801688e:	442b      	add	r3, r5
 8016890:	b209      	sxth	r1, r1
 8016892:	b212      	sxth	r2, r2
 8016894:	8060      	strh	r0, [r4, #2]
 8016896:	b21b      	sxth	r3, r3
 8016898:	428e      	cmp	r6, r1
 801689a:	bfac      	ite	ge
 801689c:	ebc7 0106 	rsbge	r1, r7, r6
 80168a0:	ebc7 0101 	rsblt	r1, r7, r1
 80168a4:	429a      	cmp	r2, r3
 80168a6:	bfac      	ite	ge
 80168a8:	ebc0 0202 	rsbge	r2, r0, r2
 80168ac:	ebc0 0203 	rsblt	r2, r0, r3
 80168b0:	80a1      	strh	r1, [r4, #4]
 80168b2:	80e2      	strh	r2, [r4, #6]
 80168b4:	e7d1      	b.n	801685a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080168b8 <_ZN8touchgfx11Application11getInstanceEv>:
 80168b8:	4b01      	ldr	r3, [pc, #4]	; (80168c0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80168ba:	6818      	ldr	r0, [r3, #0]
 80168bc:	4770      	bx	lr
 80168be:	bf00      	nop
 80168c0:	2000b4f4 	.word	0x2000b4f4

080168c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80168c4:	2300      	movs	r3, #0
 80168c6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80168ca:	30a8      	adds	r0, #168	; 0xa8
 80168cc:	f820 3c24 	strh.w	r3, [r0, #-36]
 80168d0:	f802 3b01 	strb.w	r3, [r2], #1
 80168d4:	4282      	cmp	r2, r0
 80168d6:	d1fb      	bne.n	80168d0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80168d8:	4770      	bx	lr

080168da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80168da:	4603      	mov	r3, r0
 80168dc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80168e0:	2200      	movs	r2, #0
 80168e2:	801a      	strh	r2, [r3, #0]
 80168e4:	3308      	adds	r3, #8
 80168e6:	f823 2c06 	strh.w	r2, [r3, #-6]
 80168ea:	f823 2c04 	strh.w	r2, [r3, #-4]
 80168ee:	f823 2c02 	strh.w	r2, [r3, #-2]
 80168f2:	428b      	cmp	r3, r1
 80168f4:	d1f5      	bne.n	80168e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80168f6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80168fa:	4770      	bx	lr

080168fc <_ZN8touchgfx11ApplicationC1Ev>:
 80168fc:	b570      	push	{r4, r5, r6, lr}
 80168fe:	4b16      	ldr	r3, [pc, #88]	; (8016958 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8016900:	2500      	movs	r5, #0
 8016902:	4604      	mov	r4, r0
 8016904:	30a8      	adds	r0, #168	; 0xa8
 8016906:	f840 3ca8 	str.w	r3, [r0, #-168]
 801690a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801690e:	f7ff ffe4 	bl	80168da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016912:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8016916:	f7ff ffe0 	bl	80168da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801691a:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801691e:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8016922:	490e      	ldr	r1, [pc, #56]	; (801695c <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8016924:	480e      	ldr	r0, [pc, #56]	; (8016960 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8016926:	f00a faa1 	bl	8020e6c <CRC_Lock>
 801692a:	4e0e      	ldr	r6, [pc, #56]	; (8016964 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801692c:	4b0e      	ldr	r3, [pc, #56]	; (8016968 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801692e:	b158      	cbz	r0, 8016948 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 8016930:	801d      	strh	r5, [r3, #0]
 8016932:	2300      	movs	r3, #0
 8016934:	4a0d      	ldr	r2, [pc, #52]	; (801696c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8016936:	4620      	mov	r0, r4
 8016938:	6013      	str	r3, [r2, #0]
 801693a:	4a0d      	ldr	r2, [pc, #52]	; (8016970 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801693c:	6033      	str	r3, [r6, #0]
 801693e:	6013      	str	r3, [r2, #0]
 8016940:	f7ff ffc0 	bl	80168c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8016944:	4620      	mov	r0, r4
 8016946:	bd70      	pop	{r4, r5, r6, pc}
 8016948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801694c:	2002      	movs	r0, #2
 801694e:	801a      	strh	r2, [r3, #0]
 8016950:	6030      	str	r0, [r6, #0]
 8016952:	f000 ff81 	bl	8017858 <_ZN8touchgfx6Screen4drawEv>
 8016956:	e7ec      	b.n	8016932 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 8016958:	08026008 	.word	0x08026008
 801695c:	b5e8b5cd 	.word	0xb5e8b5cd
 8016960:	f407a5c2 	.word	0xf407a5c2
 8016964:	2000b4e4 	.word	0x2000b4e4
 8016968:	20000040 	.word	0x20000040
 801696c:	2000b4f4 	.word	0x2000b4f4
 8016970:	2000b4e8 	.word	0x2000b4e8

08016974 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016974:	2300      	movs	r3, #0
 8016976:	8003      	strh	r3, [r0, #0]
 8016978:	8043      	strh	r3, [r0, #2]
 801697a:	8083      	strh	r3, [r0, #4]
 801697c:	80c3      	strh	r3, [r0, #6]
 801697e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8016982:	4293      	cmp	r3, r2
 8016984:	b530      	push	{r4, r5, lr}
 8016986:	d912      	bls.n	80169ae <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8016988:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801698c:	3b01      	subs	r3, #1
 801698e:	6825      	ldr	r5, [r4, #0]
 8016990:	b29b      	uxth	r3, r3
 8016992:	6005      	str	r5, [r0, #0]
 8016994:	4293      	cmp	r3, r2
 8016996:	6865      	ldr	r5, [r4, #4]
 8016998:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801699c:	6045      	str	r5, [r0, #4]
 801699e:	d906      	bls.n	80169ae <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80169a0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80169a4:	681d      	ldr	r5, [r3, #0]
 80169a6:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 80169aa:	685d      	ldr	r5, [r3, #4]
 80169ac:	6065      	str	r5, [r4, #4]
 80169ae:	bd30      	pop	{r4, r5, pc}

080169b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80169b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80169b2:	466b      	mov	r3, sp
 80169b4:	4604      	mov	r4, r0
 80169b6:	e883 0006 	stmia.w	r3, {r1, r2}
 80169ba:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80169be:	2a07      	cmp	r2, #7
 80169c0:	d906      	bls.n	80169d0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 80169c2:	4b09      	ldr	r3, [pc, #36]	; (80169e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 80169c4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80169c8:	4a08      	ldr	r2, [pc, #32]	; (80169ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 80169ca:	4809      	ldr	r0, [pc, #36]	; (80169f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 80169cc:	f00b ff68 	bl	80228a0 <__assert_func>
 80169d0:	1c51      	adds	r1, r2, #1
 80169d2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 80169d6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80169da:	cb03      	ldmia	r3!, {r0, r1}
 80169dc:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80169e0:	6069      	str	r1, [r5, #4]
 80169e2:	b003      	add	sp, #12
 80169e4:	bd30      	pop	{r4, r5, pc}
 80169e6:	bf00      	nop
 80169e8:	08025fa8 	.word	0x08025fa8
 80169ec:	08026080 	.word	0x08026080
 80169f0:	08025fd7 	.word	0x08025fd7

080169f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80169f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80169f8:	b089      	sub	sp, #36	; 0x24
 80169fa:	4606      	mov	r6, r0
 80169fc:	466c      	mov	r4, sp
 80169fe:	4620      	mov	r0, r4
 8016a00:	e884 0006 	stmia.w	r4, {r1, r2}
 8016a04:	f7fc fcd6 	bl	80133b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016a08:	bbb0      	cbnz	r0, 8016a78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8016a0a:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8016a0e:	b1fd      	cbz	r5, 8016a50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8016a10:	3d01      	subs	r5, #1
 8016a12:	af04      	add	r7, sp, #16
 8016a14:	f04f 090a 	mov.w	r9, #10
 8016a18:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8016a1c:	ab02      	add	r3, sp, #8
 8016a1e:	fa1f f885 	uxth.w	r8, r5
 8016a22:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016a26:	6851      	ldr	r1, [r2, #4]
 8016a28:	c303      	stmia	r3!, {r0, r1}
 8016a2a:	4621      	mov	r1, r4
 8016a2c:	a802      	add	r0, sp, #8
 8016a2e:	f7ff fedb 	bl	80167e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016a32:	bb08      	cbnz	r0, 8016a78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8016a34:	a902      	add	r1, sp, #8
 8016a36:	4620      	mov	r0, r4
 8016a38:	f7ff fed6 	bl	80167e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016a3c:	b1f8      	cbz	r0, 8016a7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8016a3e:	4642      	mov	r2, r8
 8016a40:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8016a44:	a806      	add	r0, sp, #24
 8016a46:	f7ff ff95 	bl	8016974 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016a4a:	f115 35ff 	adds.w	r5, r5, #4294967295
 8016a4e:	d2e3      	bcs.n	8016a18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8016a50:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8016a54:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8016a58:	2b08      	cmp	r3, #8
 8016a5a:	d108      	bne.n	8016a6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8016a5c:	4629      	mov	r1, r5
 8016a5e:	a806      	add	r0, sp, #24
 8016a60:	2207      	movs	r2, #7
 8016a62:	f7ff ff87 	bl	8016974 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016a66:	a906      	add	r1, sp, #24
 8016a68:	4620      	mov	r0, r4
 8016a6a:	f7ff fedf 	bl	801682c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016a6e:	4628      	mov	r0, r5
 8016a70:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016a74:	f7ff ff9c 	bl	80169b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8016a78:	b009      	add	sp, #36	; 0x24
 8016a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a7e:	4621      	mov	r1, r4
 8016a80:	a802      	add	r0, sp, #8
 8016a82:	f7ff fe8f 	bl	80167a4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016a86:	b150      	cbz	r0, 8016a9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8016a88:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8016a8c:	a806      	add	r0, sp, #24
 8016a8e:	4642      	mov	r2, r8
 8016a90:	f7ff ff70 	bl	8016974 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016a94:	a902      	add	r1, sp, #8
 8016a96:	4620      	mov	r0, r4
 8016a98:	f7ff fec8 	bl	801682c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016a9c:	e7d5      	b.n	8016a4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8016a9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8016aa2:	e887 0003 	stmia.w	r7, {r0, r1}
 8016aa6:	a902      	add	r1, sp, #8
 8016aa8:	4638      	mov	r0, r7
 8016aaa:	f7ff febf 	bl	801682c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016aae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016ab2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8016ab6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8016aba:	fb13 f302 	smulbb	r3, r3, r2
 8016abe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8016ac2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016ac6:	fb11 f102 	smulbb	r1, r1, r2
 8016aca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8016ace:	fb09 f303 	mul.w	r3, r9, r3
 8016ad2:	fb12 1100 	smlabb	r1, r2, r0, r1
 8016ad6:	220b      	movs	r2, #11
 8016ad8:	434a      	muls	r2, r1
 8016ada:	4293      	cmp	r3, r2
 8016adc:	dab5      	bge.n	8016a4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8016ade:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8016ae2:	a806      	add	r0, sp, #24
 8016ae4:	4642      	mov	r2, r8
 8016ae6:	f7ff ff45 	bl	8016974 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016aea:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016aee:	e884 0003 	stmia.w	r4, {r0, r1}
 8016af2:	e7aa      	b.n	8016a4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08016af4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016af4:	4b1d      	ldr	r3, [pc, #116]	; (8016b6c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8016af6:	b530      	push	{r4, r5, lr}
 8016af8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016afc:	b085      	sub	sp, #20
 8016afe:	4b1c      	ldr	r3, [pc, #112]	; (8016b70 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8016b00:	460c      	mov	r4, r1
 8016b02:	2100      	movs	r1, #0
 8016b04:	4605      	mov	r5, r0
 8016b06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b0a:	6820      	ldr	r0, [r4, #0]
 8016b0c:	9100      	str	r1, [sp, #0]
 8016b0e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016b12:	ab02      	add	r3, sp, #8
 8016b14:	6861      	ldr	r1, [r4, #4]
 8016b16:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016b1a:	c303      	stmia	r3!, {r0, r1}
 8016b1c:	4669      	mov	r1, sp
 8016b1e:	a802      	add	r0, sp, #8
 8016b20:	f7fc fc04 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 8016b24:	ab02      	add	r3, sp, #8
 8016b26:	cb03      	ldmia	r3!, {r0, r1}
 8016b28:	4b12      	ldr	r3, [pc, #72]	; (8016b74 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8016b2a:	6020      	str	r0, [r4, #0]
 8016b2c:	6818      	ldr	r0, [r3, #0]
 8016b2e:	6061      	str	r1, [r4, #4]
 8016b30:	b138      	cbz	r0, 8016b42 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8016b32:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8016b36:	b133      	cbz	r3, 8016b46 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8016b38:	6821      	ldr	r1, [r4, #0]
 8016b3a:	4628      	mov	r0, r5
 8016b3c:	6862      	ldr	r2, [r4, #4]
 8016b3e:	f7ff ff59 	bl	80169f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016b42:	b005      	add	sp, #20
 8016b44:	bd30      	pop	{r4, r5, pc}
 8016b46:	6803      	ldr	r3, [r0, #0]
 8016b48:	4621      	mov	r1, r4
 8016b4a:	689b      	ldr	r3, [r3, #8]
 8016b4c:	4798      	blx	r3
 8016b4e:	4b0a      	ldr	r3, [pc, #40]	; (8016b78 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8016b50:	6818      	ldr	r0, [r3, #0]
 8016b52:	b118      	cbz	r0, 8016b5c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8016b54:	6803      	ldr	r3, [r0, #0]
 8016b56:	4621      	mov	r1, r4
 8016b58:	689b      	ldr	r3, [r3, #8]
 8016b5a:	4798      	blx	r3
 8016b5c:	4b07      	ldr	r3, [pc, #28]	; (8016b7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8016b5e:	4621      	mov	r1, r4
 8016b60:	6818      	ldr	r0, [r3, #0]
 8016b62:	6803      	ldr	r3, [r0, #0]
 8016b64:	695b      	ldr	r3, [r3, #20]
 8016b66:	4798      	blx	r3
 8016b68:	e7eb      	b.n	8016b42 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8016b6a:	bf00      	nop
 8016b6c:	2000b45c 	.word	0x2000b45c
 8016b70:	2000b45e 	.word	0x2000b45e
 8016b74:	2000b4e4 	.word	0x2000b4e4
 8016b78:	2000b4e0 	.word	0x2000b4e0
 8016b7c:	2000b468 	.word	0x2000b468

08016b80 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8016b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b84:	4604      	mov	r4, r0
 8016b86:	b09b      	sub	sp, #108	; 0x6c
 8016b88:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8016b8c:	b129      	cbz	r1, 8016b9a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8016b8e:	2300      	movs	r3, #0
 8016b90:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8016b94:	b01b      	add	sp, #108	; 0x6c
 8016b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b9a:	4baf      	ldr	r3, [pc, #700]	; (8016e58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	b33b      	cbz	r3, 8016bf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8016ba0:	4dae      	ldr	r5, [pc, #696]	; (8016e5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8016ba2:	4628      	mov	r0, r5
 8016ba4:	f7fc fc06 	bl	80133b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ba8:	4606      	mov	r6, r0
 8016baa:	bb08      	cbnz	r0, 8016bf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8016bac:	4628      	mov	r0, r5
 8016bae:	f7ff fca3 	bl	80164f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016bb2:	6829      	ldr	r1, [r5, #0]
 8016bb4:	686a      	ldr	r2, [r5, #4]
 8016bb6:	4620      	mov	r0, r4
 8016bb8:	f7ff ff1c 	bl	80169f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016bbc:	802e      	strh	r6, [r5, #0]
 8016bbe:	806e      	strh	r6, [r5, #2]
 8016bc0:	80ae      	strh	r6, [r5, #4]
 8016bc2:	80ee      	strh	r6, [r5, #6]
 8016bc4:	4fa6      	ldr	r7, [pc, #664]	; (8016e60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8016bc6:	a809      	add	r0, sp, #36	; 0x24
 8016bc8:	f7ff fe87 	bl	80168da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016bcc:	883d      	ldrh	r5, [r7, #0]
 8016bce:	462e      	mov	r6, r5
 8016bd0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016bd4:	42b3      	cmp	r3, r6
 8016bd6:	d910      	bls.n	8016bfa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8016bd8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8016bdc:	3601      	adds	r6, #1
 8016bde:	a809      	add	r0, sp, #36	; 0x24
 8016be0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8016be4:	b2b6      	uxth	r6, r6
 8016be6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8016bea:	f7ff fee1 	bl	80169b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8016bee:	e7ef      	b.n	8016bd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8016bf0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d1e5      	bne.n	8016bc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8016bf8:	e7cc      	b.n	8016b94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8016bfa:	462e      	mov	r6, r5
 8016bfc:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8016c00:	42b3      	cmp	r3, r6
 8016c02:	d90b      	bls.n	8016c1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8016c04:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8016c08:	3601      	adds	r6, #1
 8016c0a:	4620      	mov	r0, r4
 8016c0c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8016c10:	b2b6      	uxth	r6, r6
 8016c12:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8016c16:	f7ff feed 	bl	80169f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016c1a:	e7ef      	b.n	8016bfc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8016c1c:	4e91      	ldr	r6, [pc, #580]	; (8016e64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8016c1e:	6833      	ldr	r3, [r6, #0]
 8016c20:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016c24:	2b01      	cmp	r3, #1
 8016c26:	f040 8092 	bne.w	8016d4e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 8016c2a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8016c2e:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8016c32:	f04f 0900 	mov.w	r9, #0
 8016c36:	33aa      	adds	r3, #170	; 0xaa
 8016c38:	42a8      	cmp	r0, r5
 8016c3a:	f103 0308 	add.w	r3, r3, #8
 8016c3e:	dd0a      	ble.n	8016c56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8016c40:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8016c44:	3501      	adds	r5, #1
 8016c46:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8016c4a:	440a      	add	r2, r1
 8016c4c:	b212      	sxth	r2, r2
 8016c4e:	4591      	cmp	r9, r2
 8016c50:	bfb8      	it	lt
 8016c52:	4691      	movlt	r9, r2
 8016c54:	e7f0      	b.n	8016c38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 8016c56:	4b84      	ldr	r3, [pc, #528]	; (8016e68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8016c58:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8016e70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8016c5c:	881d      	ldrh	r5, [r3, #0]
 8016c5e:	2300      	movs	r3, #0
 8016c60:	2d0f      	cmp	r5, #15
 8016c62:	bf8c      	ite	hi
 8016c64:	08ed      	lsrhi	r5, r5, #3
 8016c66:	2501      	movls	r5, #1
 8016c68:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016c6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016c70:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8016c74:	6830      	ldr	r0, [r6, #0]
 8016c76:	440b      	add	r3, r1
 8016c78:	6802      	ldr	r2, [r0, #0]
 8016c7a:	b21b      	sxth	r3, r3
 8016c7c:	4599      	cmp	r9, r3
 8016c7e:	dd49      	ble.n	8016d14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8016c80:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8016c84:	4798      	blx	r3
 8016c86:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016c8a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016c8e:	4413      	add	r3, r2
 8016c90:	b21b      	sxth	r3, r3
 8016c92:	195a      	adds	r2, r3, r5
 8016c94:	4290      	cmp	r0, r2
 8016c96:	da07      	bge.n	8016ca8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8016c98:	4581      	cmp	r9, r0
 8016c9a:	dd05      	ble.n	8016ca8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8016c9c:	4298      	cmp	r0, r3
 8016c9e:	da33      	bge.n	8016d08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	dd31      	ble.n	8016d08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8016ca4:	4648      	mov	r0, r9
 8016ca6:	e004      	b.n	8016cb2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8016ca8:	4298      	cmp	r0, r3
 8016caa:	dbfb      	blt.n	8016ca4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8016cac:	4548      	cmp	r0, r9
 8016cae:	bfa8      	it	ge
 8016cb0:	4648      	movge	r0, r9
 8016cb2:	f9b8 2000 	ldrsh.w	r2, [r8]
 8016cb6:	2100      	movs	r1, #0
 8016cb8:	1ac0      	subs	r0, r0, r3
 8016cba:	f8b7 a000 	ldrh.w	sl, [r7]
 8016cbe:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016cc2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016cc6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016cca:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016cce:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016cd2:	4553      	cmp	r3, sl
 8016cd4:	d9ca      	bls.n	8016c6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8016cd6:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8016cda:	ab07      	add	r3, sp, #28
 8016cdc:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016ce0:	6851      	ldr	r1, [r2, #4]
 8016ce2:	c303      	stmia	r3!, {r0, r1}
 8016ce4:	a807      	add	r0, sp, #28
 8016ce6:	a905      	add	r1, sp, #20
 8016ce8:	f7fc fb20 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 8016cec:	a807      	add	r0, sp, #28
 8016cee:	f7fc fb61 	bl	80133b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016cf2:	b920      	cbnz	r0, 8016cfe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8016cf4:	6823      	ldr	r3, [r4, #0]
 8016cf6:	a907      	add	r1, sp, #28
 8016cf8:	4620      	mov	r0, r4
 8016cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cfc:	4798      	blx	r3
 8016cfe:	f10a 0a01 	add.w	sl, sl, #1
 8016d02:	fa1f fa8a 	uxth.w	sl, sl
 8016d06:	e7e2      	b.n	8016cce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8016d08:	6830      	ldr	r0, [r6, #0]
 8016d0a:	2101      	movs	r1, #1
 8016d0c:	6803      	ldr	r3, [r0, #0]
 8016d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016d10:	4798      	blx	r3
 8016d12:	e7ab      	b.n	8016c6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8016d14:	69d3      	ldr	r3, [r2, #28]
 8016d16:	4798      	blx	r3
 8016d18:	4b54      	ldr	r3, [pc, #336]	; (8016e6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8016d1a:	781b      	ldrb	r3, [r3, #0]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	f43f af39 	beq.w	8016b94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8016d22:	2300      	movs	r3, #0
 8016d24:	883d      	ldrh	r5, [r7, #0]
 8016d26:	34ea      	adds	r4, #234	; 0xea
 8016d28:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8016d2c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8016d30:	42ab      	cmp	r3, r5
 8016d32:	f67f af2f 	bls.w	8016b94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8016d36:	ab1a      	add	r3, sp, #104	; 0x68
 8016d38:	4620      	mov	r0, r4
 8016d3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016d3e:	3501      	adds	r5, #1
 8016d40:	3b44      	subs	r3, #68	; 0x44
 8016d42:	b2ad      	uxth	r5, r5
 8016d44:	e893 0006 	ldmia.w	r3, {r1, r2}
 8016d48:	f7ff fe32 	bl	80169b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8016d4c:	e7ee      	b.n	8016d2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8016d4e:	2b02      	cmp	r3, #2
 8016d50:	d16a      	bne.n	8016e28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8016d52:	f8df a120 	ldr.w	sl, [pc, #288]	; 8016e74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8016d56:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016d5a:	42ab      	cmp	r3, r5
 8016d5c:	d9dc      	bls.n	8016d18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8016d5e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8016d62:	ab03      	add	r3, sp, #12
 8016d64:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016d68:	6851      	ldr	r1, [r2, #4]
 8016d6a:	c303      	stmia	r3!, {r0, r1}
 8016d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8016d70:	2b01      	cmp	r3, #1
 8016d72:	d102      	bne.n	8016d7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 8016d74:	a803      	add	r0, sp, #12
 8016d76:	f7ff fc19 	bl	80165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016d7a:	a803      	add	r0, sp, #12
 8016d7c:	f7fc fb1a 	bl	80133b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016d80:	2800      	cmp	r0, #0
 8016d82:	d14a      	bne.n	8016e1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8016d84:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016d88:	f10d 0914 	add.w	r9, sp, #20
 8016d8c:	f10d 081c 	add.w	r8, sp, #28
 8016d90:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016d94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016d98:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016d9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016da0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016da4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016da8:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8016dac:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8016db0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016db4:	44dc      	add	ip, fp
 8016db6:	6830      	ldr	r0, [r6, #0]
 8016db8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8016dbc:	ebac 0c02 	sub.w	ip, ip, r2
 8016dc0:	f8d0 e000 	ldr.w	lr, [r0]
 8016dc4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8016dc8:	fa1f fc8c 	uxth.w	ip, ip
 8016dcc:	f8cd c000 	str.w	ip, [sp]
 8016dd0:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8016dd4:	47d8      	blx	fp
 8016dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8016dda:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016dde:	2b01      	cmp	r3, #1
 8016de0:	d11e      	bne.n	8016e20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 8016de2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016de6:	e888 0003 	stmia.w	r8, {r0, r1}
 8016dea:	4640      	mov	r0, r8
 8016dec:	f7ff fb84 	bl	80164f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016df0:	6823      	ldr	r3, [r4, #0]
 8016df2:	4641      	mov	r1, r8
 8016df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016df6:	4620      	mov	r0, r4
 8016df8:	4798      	blx	r3
 8016dfa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016dfe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016e02:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8016e06:	4413      	add	r3, r2
 8016e08:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8016e0c:	440a      	add	r2, r1
 8016e0e:	b21b      	sxth	r3, r3
 8016e10:	b212      	sxth	r2, r2
 8016e12:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e16:	4293      	cmp	r3, r2
 8016e18:	dbc6      	blt.n	8016da8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8016e1a:	3501      	adds	r5, #1
 8016e1c:	b2ad      	uxth	r5, r5
 8016e1e:	e79a      	b.n	8016d56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 8016e20:	6823      	ldr	r3, [r4, #0]
 8016e22:	4649      	mov	r1, r9
 8016e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e26:	e7e6      	b.n	8016df6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8016e28:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016e2c:	42ab      	cmp	r3, r5
 8016e2e:	f67f af73 	bls.w	8016d18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8016e32:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8016e36:	ab07      	add	r3, sp, #28
 8016e38:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016e3c:	6851      	ldr	r1, [r2, #4]
 8016e3e:	c303      	stmia	r3!, {r0, r1}
 8016e40:	a807      	add	r0, sp, #28
 8016e42:	f7fc fab7 	bl	80133b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016e46:	b920      	cbnz	r0, 8016e52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8016e48:	6823      	ldr	r3, [r4, #0]
 8016e4a:	a907      	add	r1, sp, #28
 8016e4c:	4620      	mov	r0, r4
 8016e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e50:	4798      	blx	r3
 8016e52:	3501      	adds	r5, #1
 8016e54:	b2ad      	uxth	r5, r5
 8016e56:	e7e7      	b.n	8016e28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8016e58:	2000b4e0 	.word	0x2000b4e0
 8016e5c:	2000b4ec 	.word	0x2000b4ec
 8016e60:	20000040 	.word	0x20000040
 8016e64:	2000b468 	.word	0x2000b468
 8016e68:	2000b45e 	.word	0x2000b45e
 8016e6c:	2000b466 	.word	0x2000b466
 8016e70:	2000b45c 	.word	0x2000b45c
 8016e74:	2000b460 	.word	0x2000b460

08016e78 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016e78:	4b03      	ldr	r3, [pc, #12]	; (8016e88 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	801a      	strh	r2, [r3, #0]
 8016e7e:	805a      	strh	r2, [r3, #2]
 8016e80:	809a      	strh	r2, [r3, #4]
 8016e82:	80da      	strh	r2, [r3, #6]
 8016e84:	4770      	bx	lr
 8016e86:	bf00      	nop
 8016e88:	2000b4ec 	.word	0x2000b4ec

08016e8c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8016e8c:	2000      	movs	r0, #0
 8016e8e:	4770      	bx	lr

08016e90 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8016e90:	2000      	movs	r0, #0
 8016e92:	4770      	bx	lr

08016e94 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016e94:	b508      	push	{r3, lr}
 8016e96:	6803      	ldr	r3, [r0, #0]
 8016e98:	68db      	ldr	r3, [r3, #12]
 8016e9a:	4798      	blx	r3
 8016e9c:	b128      	cbz	r0, 8016eaa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8016e9e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8016ea2:	7a80      	ldrb	r0, [r0, #10]
 8016ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016ea8:	4318      	orrs	r0, r3
 8016eaa:	bd08      	pop	{r3, pc}

08016eac <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8016eac:	b40e      	push	{r1, r2, r3}
 8016eae:	b533      	push	{r0, r1, r4, r5, lr}
 8016eb0:	ab05      	add	r3, sp, #20
 8016eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8016eb6:	9301      	str	r3, [sp, #4]
 8016eb8:	4b0a      	ldr	r3, [pc, #40]	; (8016ee4 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8016eba:	685c      	ldr	r4, [r3, #4]
 8016ebc:	1061      	asrs	r1, r4, #1
 8016ebe:	07e4      	lsls	r4, r4, #31
 8016ec0:	eb00 0501 	add.w	r5, r0, r1
 8016ec4:	bf46      	itte	mi
 8016ec6:	681b      	ldrmi	r3, [r3, #0]
 8016ec8:	5841      	ldrmi	r1, [r0, r1]
 8016eca:	681c      	ldrpl	r4, [r3, #0]
 8016ecc:	4628      	mov	r0, r5
 8016ece:	bf48      	it	mi
 8016ed0:	58cc      	ldrmi	r4, [r1, r3]
 8016ed2:	2100      	movs	r1, #0
 8016ed4:	9b01      	ldr	r3, [sp, #4]
 8016ed6:	47a0      	blx	r4
 8016ed8:	b002      	add	sp, #8
 8016eda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ede:	b003      	add	sp, #12
 8016ee0:	4770      	bx	lr
 8016ee2:	bf00      	nop
 8016ee4:	20000028 	.word	0x20000028

08016ee8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8016ee8:	b40c      	push	{r2, r3}
 8016eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016eec:	ab06      	add	r3, sp, #24
 8016eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ef2:	9301      	str	r3, [sp, #4]
 8016ef4:	4b09      	ldr	r3, [pc, #36]	; (8016f1c <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8016ef6:	685d      	ldr	r5, [r3, #4]
 8016ef8:	106c      	asrs	r4, r5, #1
 8016efa:	07ed      	lsls	r5, r5, #31
 8016efc:	eb00 0604 	add.w	r6, r0, r4
 8016f00:	bf45      	ittet	mi
 8016f02:	681b      	ldrmi	r3, [r3, #0]
 8016f04:	5900      	ldrmi	r0, [r0, r4]
 8016f06:	681c      	ldrpl	r4, [r3, #0]
 8016f08:	58c4      	ldrmi	r4, [r0, r3]
 8016f0a:	4630      	mov	r0, r6
 8016f0c:	9b01      	ldr	r3, [sp, #4]
 8016f0e:	47a0      	blx	r4
 8016f10:	b002      	add	sp, #8
 8016f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f16:	b002      	add	sp, #8
 8016f18:	4770      	bx	lr
 8016f1a:	bf00      	nop
 8016f1c:	20000028 	.word	0x20000028

08016f20 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8016f20:	b40e      	push	{r1, r2, r3}
 8016f22:	b530      	push	{r4, r5, lr}
 8016f24:	b098      	sub	sp, #96	; 0x60
 8016f26:	4604      	mov	r4, r0
 8016f28:	ab1b      	add	r3, sp, #108	; 0x6c
 8016f2a:	a802      	add	r0, sp, #8
 8016f2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8016f30:	9301      	str	r3, [sp, #4]
 8016f32:	f001 f837 	bl	8017fa4 <_ZN8touchgfx12TextProviderC1Ev>
 8016f36:	6823      	ldr	r3, [r4, #0]
 8016f38:	4620      	mov	r0, r4
 8016f3a:	2401      	movs	r4, #1
 8016f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f3e:	4798      	blx	r3
 8016f40:	9a01      	ldr	r2, [sp, #4]
 8016f42:	4603      	mov	r3, r0
 8016f44:	4629      	mov	r1, r5
 8016f46:	a802      	add	r0, sp, #8
 8016f48:	f001 f849 	bl	8017fde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016f4c:	a802      	add	r0, sp, #8
 8016f4e:	f001 f87f 	bl	8018050 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016f52:	b2a3      	uxth	r3, r4
 8016f54:	b138      	cbz	r0, 8016f66 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8016f56:	280a      	cmp	r0, #10
 8016f58:	a802      	add	r0, sp, #8
 8016f5a:	bf04      	itt	eq
 8016f5c:	3301      	addeq	r3, #1
 8016f5e:	b21c      	sxtheq	r4, r3
 8016f60:	f001 f876 	bl	8018050 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016f64:	e7f5      	b.n	8016f52 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8016f66:	4618      	mov	r0, r3
 8016f68:	b018      	add	sp, #96	; 0x60
 8016f6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f6e:	b003      	add	sp, #12
 8016f70:	4770      	bx	lr
	...

08016f74 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8016f74:	b40e      	push	{r1, r2, r3}
 8016f76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f78:	b098      	sub	sp, #96	; 0x60
 8016f7a:	4605      	mov	r5, r0
 8016f7c:	4f25      	ldr	r7, [pc, #148]	; (8017014 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8016f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8016f80:	a802      	add	r0, sp, #8
 8016f82:	ae18      	add	r6, sp, #96	; 0x60
 8016f84:	f853 4b04 	ldr.w	r4, [r3], #4
 8016f88:	9300      	str	r3, [sp, #0]
 8016f8a:	f001 f80b 	bl	8017fa4 <_ZN8touchgfx12TextProviderC1Ev>
 8016f8e:	682b      	ldr	r3, [r5, #0]
 8016f90:	4628      	mov	r0, r5
 8016f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f94:	4798      	blx	r3
 8016f96:	4621      	mov	r1, r4
 8016f98:	2400      	movs	r4, #0
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	9a00      	ldr	r2, [sp, #0]
 8016f9e:	a802      	add	r0, sp, #8
 8016fa0:	f001 f81d 	bl	8017fde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016fa4:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8016fa8:	462a      	mov	r2, r5
 8016faa:	4633      	mov	r3, r6
 8016fac:	4621      	mov	r1, r4
 8016fae:	a802      	add	r0, sp, #8
 8016fb0:	f001 f97a 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016fb4:	b340      	cbz	r0, 8017008 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 8016fb6:	280a      	cmp	r0, #10
 8016fb8:	d01f      	beq.n	8016ffa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016fba:	9901      	ldr	r1, [sp, #4]
 8016fbc:	b1e9      	cbz	r1, 8016ffa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016fbe:	7b4b      	ldrb	r3, [r1, #13]
 8016fc0:	f891 c008 	ldrb.w	ip, [r1, #8]
 8016fc4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016fc8:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8016fcc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8016fd0:	79c9      	ldrb	r1, [r1, #7]
 8016fd2:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8016fd6:	bf18      	it	ne
 8016fd8:	4638      	movne	r0, r7
 8016fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016fde:	bf08      	it	eq
 8016fe0:	2000      	moveq	r0, #0
 8016fe2:	88aa      	ldrh	r2, [r5, #4]
 8016fe4:	ea41 010e 	orr.w	r1, r1, lr
 8016fe8:	ea43 030c 	orr.w	r3, r3, ip
 8016fec:	440a      	add	r2, r1
 8016fee:	4303      	orrs	r3, r0
 8016ff0:	1ad3      	subs	r3, r2, r3
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	42a3      	cmp	r3, r4
 8016ff6:	bfc8      	it	gt
 8016ff8:	b21c      	sxthgt	r4, r3
 8016ffa:	4633      	mov	r3, r6
 8016ffc:	462a      	mov	r2, r5
 8016ffe:	2100      	movs	r1, #0
 8017000:	a802      	add	r0, sp, #8
 8017002:	f001 f951 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017006:	e7d5      	b.n	8016fb4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8017008:	b2a0      	uxth	r0, r4
 801700a:	b018      	add	sp, #96	; 0x60
 801700c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017010:	b003      	add	sp, #12
 8017012:	4770      	bx	lr
 8017014:	fffffe00 	.word	0xfffffe00

08017018 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017018:	b40e      	push	{r1, r2, r3}
 801701a:	b570      	push	{r4, r5, r6, lr}
 801701c:	b099      	sub	sp, #100	; 0x64
 801701e:	4604      	mov	r4, r0
 8017020:	26ff      	movs	r6, #255	; 0xff
 8017022:	ab1d      	add	r3, sp, #116	; 0x74
 8017024:	a802      	add	r0, sp, #8
 8017026:	f853 5b04 	ldr.w	r5, [r3], #4
 801702a:	9300      	str	r3, [sp, #0]
 801702c:	f000 ffba 	bl	8017fa4 <_ZN8touchgfx12TextProviderC1Ev>
 8017030:	6823      	ldr	r3, [r4, #0]
 8017032:	4620      	mov	r0, r4
 8017034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017036:	4798      	blx	r3
 8017038:	4629      	mov	r1, r5
 801703a:	4603      	mov	r3, r0
 801703c:	9a00      	ldr	r2, [sp, #0]
 801703e:	a802      	add	r0, sp, #8
 8017040:	ad18      	add	r5, sp, #96	; 0x60
 8017042:	f000 ffcc 	bl	8017fde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017046:	2100      	movs	r1, #0
 8017048:	4622      	mov	r2, r4
 801704a:	a802      	add	r0, sp, #8
 801704c:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8017050:	462b      	mov	r3, r5
 8017052:	f001 f929 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017056:	b190      	cbz	r0, 801707e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8017058:	280a      	cmp	r0, #10
 801705a:	d009      	beq.n	8017070 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801705c:	9a01      	ldr	r2, [sp, #4]
 801705e:	b13a      	cbz	r2, 8017070 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8017060:	7923      	ldrb	r3, [r4, #4]
 8017062:	7a12      	ldrb	r2, [r2, #8]
 8017064:	1a9b      	subs	r3, r3, r2
 8017066:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801706a:	429e      	cmp	r6, r3
 801706c:	bf28      	it	cs
 801706e:	461e      	movcs	r6, r3
 8017070:	462b      	mov	r3, r5
 8017072:	4622      	mov	r2, r4
 8017074:	2100      	movs	r1, #0
 8017076:	a802      	add	r0, sp, #8
 8017078:	f001 f916 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801707c:	e7eb      	b.n	8017056 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801707e:	4630      	mov	r0, r6
 8017080:	b019      	add	sp, #100	; 0x64
 8017082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017086:	b003      	add	sp, #12
 8017088:	4770      	bx	lr

0801708a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801708a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801708e:	b099      	sub	sp, #100	; 0x64
 8017090:	4606      	mov	r6, r0
 8017092:	4614      	mov	r4, r2
 8017094:	4688      	mov	r8, r1
 8017096:	a802      	add	r0, sp, #8
 8017098:	461d      	mov	r5, r3
 801709a:	f04f 0b00 	mov.w	fp, #0
 801709e:	f000 ff81 	bl	8017fa4 <_ZN8touchgfx12TextProviderC1Ev>
 80170a2:	6833      	ldr	r3, [r6, #0]
 80170a4:	4630      	mov	r0, r6
 80170a6:	465f      	mov	r7, fp
 80170a8:	46da      	mov	sl, fp
 80170aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170ac:	46d9      	mov	r9, fp
 80170ae:	4798      	blx	r3
 80170b0:	462a      	mov	r2, r5
 80170b2:	4603      	mov	r3, r0
 80170b4:	4621      	mov	r1, r4
 80170b6:	a802      	add	r0, sp, #8
 80170b8:	f000 ff91 	bl	8017fde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80170bc:	ab01      	add	r3, sp, #4
 80170be:	4632      	mov	r2, r6
 80170c0:	4641      	mov	r1, r8
 80170c2:	a802      	add	r0, sp, #8
 80170c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80170c8:	f001 f8ee 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80170cc:	4605      	mov	r5, r0
 80170ce:	b108      	cbz	r0, 80170d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 80170d0:	280a      	cmp	r0, #10
 80170d2:	d10b      	bne.n	80170ec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 80170d4:	4557      	cmp	r7, sl
 80170d6:	bf38      	it	cc
 80170d8:	4657      	movcc	r7, sl
 80170da:	f04f 0a00 	mov.w	sl, #0
 80170de:	b91d      	cbnz	r5, 80170e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 80170e0:	4638      	mov	r0, r7
 80170e2:	b019      	add	sp, #100	; 0x64
 80170e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170e8:	46ab      	mov	fp, r5
 80170ea:	e7e7      	b.n	80170bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 80170ec:	9a01      	ldr	r2, [sp, #4]
 80170ee:	2a00      	cmp	r2, #0
 80170f0:	d0fa      	beq.n	80170e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 80170f2:	f992 400d 	ldrsb.w	r4, [r2, #13]
 80170f6:	4659      	mov	r1, fp
 80170f8:	6833      	ldr	r3, [r6, #0]
 80170fa:	f404 7080 	and.w	r0, r4, #256	; 0x100
 80170fe:	7a94      	ldrb	r4, [r2, #10]
 8017100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017102:	4304      	orrs	r4, r0
 8017104:	4630      	mov	r0, r6
 8017106:	8895      	ldrh	r5, [r2, #4]
 8017108:	4798      	blx	r3
 801710a:	4420      	add	r0, r4
 801710c:	4450      	add	r0, sl
 801710e:	fa1f fa80 	uxth.w	sl, r0
 8017112:	e7e4      	b.n	80170de <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08017114 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017114:	b513      	push	{r0, r1, r4, lr}
 8017116:	1d01      	adds	r1, r0, #4
 8017118:	4603      	mov	r3, r0
 801711a:	466a      	mov	r2, sp
 801711c:	c903      	ldmia	r1, {r0, r1}
 801711e:	e882 0003 	stmia.w	r2, {r0, r1}
 8017122:	2100      	movs	r1, #0
 8017124:	4618      	mov	r0, r3
 8017126:	9100      	str	r1, [sp, #0]
 8017128:	6819      	ldr	r1, [r3, #0]
 801712a:	690c      	ldr	r4, [r1, #16]
 801712c:	4611      	mov	r1, r2
 801712e:	47a0      	blx	r4
 8017130:	b002      	add	sp, #8
 8017132:	bd10      	pop	{r4, pc}

08017134 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017134:	b538      	push	{r3, r4, r5, lr}
 8017136:	680b      	ldr	r3, [r1, #0]
 8017138:	460c      	mov	r4, r1
 801713a:	4605      	mov	r5, r0
 801713c:	68db      	ldr	r3, [r3, #12]
 801713e:	4798      	blx	r3
 8017140:	6823      	ldr	r3, [r4, #0]
 8017142:	4620      	mov	r0, r4
 8017144:	4629      	mov	r1, r5
 8017146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017148:	4798      	blx	r3
 801714a:	4628      	mov	r0, r5
 801714c:	bd38      	pop	{r3, r4, r5, pc}

0801714e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801714e:	b410      	push	{r4}
 8017150:	880a      	ldrh	r2, [r1, #0]
 8017152:	8884      	ldrh	r4, [r0, #4]
 8017154:	4422      	add	r2, r4
 8017156:	800a      	strh	r2, [r1, #0]
 8017158:	884a      	ldrh	r2, [r1, #2]
 801715a:	88c4      	ldrh	r4, [r0, #6]
 801715c:	4422      	add	r2, r4
 801715e:	804a      	strh	r2, [r1, #2]
 8017160:	6940      	ldr	r0, [r0, #20]
 8017162:	b120      	cbz	r0, 801716e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017164:	6803      	ldr	r3, [r0, #0]
 8017166:	f85d 4b04 	ldr.w	r4, [sp], #4
 801716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801716c:	4718      	bx	r3
 801716e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017172:	4770      	bx	lr

08017174 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017176:	460b      	mov	r3, r1
 8017178:	b085      	sub	sp, #20
 801717a:	4604      	mov	r4, r0
 801717c:	b901      	cbnz	r1, 8017180 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801717e:	b1fa      	cbz	r2, 80171c0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8017180:	1d27      	adds	r7, r4, #4
 8017182:	466e      	mov	r6, sp
 8017184:	ad02      	add	r5, sp, #8
 8017186:	e897 0003 	ldmia.w	r7, {r0, r1}
 801718a:	e886 0003 	stmia.w	r6, {r0, r1}
 801718e:	88e1      	ldrh	r1, [r4, #6]
 8017190:	4620      	mov	r0, r4
 8017192:	440a      	add	r2, r1
 8017194:	88a1      	ldrh	r1, [r4, #4]
 8017196:	4419      	add	r1, r3
 8017198:	6823      	ldr	r3, [r4, #0]
 801719a:	b212      	sxth	r2, r2
 801719c:	b209      	sxth	r1, r1
 801719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171a0:	4798      	blx	r3
 80171a2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80171a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80171aa:	6960      	ldr	r0, [r4, #20]
 80171ac:	b150      	cbz	r0, 80171c4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 80171ae:	6803      	ldr	r3, [r0, #0]
 80171b0:	4631      	mov	r1, r6
 80171b2:	691b      	ldr	r3, [r3, #16]
 80171b4:	4798      	blx	r3
 80171b6:	6960      	ldr	r0, [r4, #20]
 80171b8:	6803      	ldr	r3, [r0, #0]
 80171ba:	691b      	ldr	r3, [r3, #16]
 80171bc:	4629      	mov	r1, r5
 80171be:	4798      	blx	r3
 80171c0:	b005      	add	sp, #20
 80171c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171c4:	f7ff fb78 	bl	80168b8 <_ZN8touchgfx11Application11getInstanceEv>
 80171c8:	6803      	ldr	r3, [r0, #0]
 80171ca:	4631      	mov	r1, r6
 80171cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ce:	4798      	blx	r3
 80171d0:	f7ff fb72 	bl	80168b8 <_ZN8touchgfx11Application11getInstanceEv>
 80171d4:	6803      	ldr	r3, [r0, #0]
 80171d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171d8:	e7f0      	b.n	80171bc <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

080171da <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80171da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171dc:	8882      	ldrh	r2, [r0, #4]
 80171de:	4605      	mov	r5, r0
 80171e0:	880b      	ldrh	r3, [r1, #0]
 80171e2:	460c      	mov	r4, r1
 80171e4:	4413      	add	r3, r2
 80171e6:	800b      	strh	r3, [r1, #0]
 80171e8:	884b      	ldrh	r3, [r1, #2]
 80171ea:	88c2      	ldrh	r2, [r0, #6]
 80171ec:	4413      	add	r3, r2
 80171ee:	4602      	mov	r2, r0
 80171f0:	804b      	strh	r3, [r1, #2]
 80171f2:	466b      	mov	r3, sp
 80171f4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80171f8:	6851      	ldr	r1, [r2, #4]
 80171fa:	c303      	stmia	r3!, {r0, r1}
 80171fc:	4621      	mov	r1, r4
 80171fe:	4668      	mov	r0, sp
 8017200:	f7fc f894 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 8017204:	466b      	mov	r3, sp
 8017206:	cb03      	ldmia	r3!, {r0, r1}
 8017208:	6020      	str	r0, [r4, #0]
 801720a:	6061      	str	r1, [r4, #4]
 801720c:	6968      	ldr	r0, [r5, #20]
 801720e:	b128      	cbz	r0, 801721c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8017210:	6803      	ldr	r3, [r0, #0]
 8017212:	691b      	ldr	r3, [r3, #16]
 8017214:	4621      	mov	r1, r4
 8017216:	4798      	blx	r3
 8017218:	b003      	add	sp, #12
 801721a:	bd30      	pop	{r4, r5, pc}
 801721c:	f7ff fb4c 	bl	80168b8 <_ZN8touchgfx11Application11getInstanceEv>
 8017220:	6803      	ldr	r3, [r0, #0]
 8017222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017224:	e7f6      	b.n	8017214 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08017226 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017226:	b570      	push	{r4, r5, r6, lr}
 8017228:	8882      	ldrh	r2, [r0, #4]
 801722a:	460c      	mov	r4, r1
 801722c:	880b      	ldrh	r3, [r1, #0]
 801722e:	4605      	mov	r5, r0
 8017230:	4413      	add	r3, r2
 8017232:	800b      	strh	r3, [r1, #0]
 8017234:	884b      	ldrh	r3, [r1, #2]
 8017236:	88c2      	ldrh	r2, [r0, #6]
 8017238:	4413      	add	r3, r2
 801723a:	804b      	strh	r3, [r1, #2]
 801723c:	1d01      	adds	r1, r0, #4
 801723e:	4620      	mov	r0, r4
 8017240:	f7fc f874 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 8017244:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017248:	b153      	cbz	r3, 8017260 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801724a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801724e:	b13b      	cbz	r3, 8017260 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8017250:	6968      	ldr	r0, [r5, #20]
 8017252:	b128      	cbz	r0, 8017260 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8017254:	6803      	ldr	r3, [r0, #0]
 8017256:	4621      	mov	r1, r4
 8017258:	6a1b      	ldr	r3, [r3, #32]
 801725a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801725e:	4718      	bx	r3
 8017260:	bd70      	pop	{r4, r5, r6, pc}

08017262 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017262:	b510      	push	{r4, lr}
 8017264:	2300      	movs	r3, #0
 8017266:	4604      	mov	r4, r0
 8017268:	4608      	mov	r0, r1
 801726a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801726e:	8023      	strh	r3, [r4, #0]
 8017270:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017274:	8063      	strh	r3, [r4, #2]
 8017276:	6803      	ldr	r3, [r0, #0]
 8017278:	80a1      	strh	r1, [r4, #4]
 801727a:	4621      	mov	r1, r4
 801727c:	80e2      	strh	r2, [r4, #6]
 801727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017280:	4798      	blx	r3
 8017282:	4620      	mov	r0, r4
 8017284:	bd10      	pop	{r4, pc}
	...

08017288 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8017288:	b530      	push	{r4, r5, lr}
 801728a:	8083      	strh	r3, [r0, #4]
 801728c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8017290:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8017294:	7183      	strb	r3, [r0, #6]
 8017296:	79c3      	ldrb	r3, [r0, #7]
 8017298:	6101      	str	r1, [r0, #16]
 801729a:	f365 0306 	bfi	r3, r5, #0, #7
 801729e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80172a2:	8282      	strh	r2, [r0, #20]
 80172a4:	f365 13c7 	bfi	r3, r5, #7, #1
 80172a8:	71c3      	strb	r3, [r0, #7]
 80172aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80172ae:	7203      	strb	r3, [r0, #8]
 80172b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80172b4:	7243      	strb	r3, [r0, #9]
 80172b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80172ba:	8143      	strh	r3, [r0, #10]
 80172bc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80172c0:	8183      	strh	r3, [r0, #12]
 80172c2:	4b01      	ldr	r3, [pc, #4]	; (80172c8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80172c4:	6003      	str	r3, [r0, #0]
 80172c6:	bd30      	pop	{r4, r5, pc}
 80172c8:	080261a8 	.word	0x080261a8

080172cc <_ZNK8touchgfx9ConstFont4findEt>:
 80172cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172ce:	8a84      	ldrh	r4, [r0, #20]
 80172d0:	2500      	movs	r5, #0
 80172d2:	260e      	movs	r6, #14
 80172d4:	3c01      	subs	r4, #1
 80172d6:	42a5      	cmp	r5, r4
 80172d8:	dc0c      	bgt.n	80172f4 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 80172da:	192a      	adds	r2, r5, r4
 80172dc:	6903      	ldr	r3, [r0, #16]
 80172de:	1052      	asrs	r2, r2, #1
 80172e0:	fb06 3302 	mla	r3, r6, r2, r3
 80172e4:	889f      	ldrh	r7, [r3, #4]
 80172e6:	428f      	cmp	r7, r1
 80172e8:	d901      	bls.n	80172ee <_ZNK8touchgfx9ConstFont4findEt+0x22>
 80172ea:	1e54      	subs	r4, r2, #1
 80172ec:	e7f3      	b.n	80172d6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 80172ee:	d202      	bcs.n	80172f6 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 80172f0:	1c55      	adds	r5, r2, #1
 80172f2:	e7f0      	b.n	80172d6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 80172f4:	2300      	movs	r3, #0
 80172f6:	4618      	mov	r0, r3
 80172f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080172fa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80172fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172fc:	4605      	mov	r5, r0
 80172fe:	4617      	mov	r7, r2
 8017300:	461e      	mov	r6, r3
 8017302:	f7ff ffe3 	bl	80172cc <_ZNK8touchgfx9ConstFont4findEt>
 8017306:	b9e0      	cbnz	r0, 8017342 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8017308:	b911      	cbnz	r1, 8017310 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801730a:	2400      	movs	r4, #0
 801730c:	4620      	mov	r0, r4
 801730e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017310:	290a      	cmp	r1, #10
 8017312:	d0fa      	beq.n	801730a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017314:	682b      	ldr	r3, [r5, #0]
 8017316:	4628      	mov	r0, r5
 8017318:	691b      	ldr	r3, [r3, #16]
 801731a:	4798      	blx	r3
 801731c:	4601      	mov	r1, r0
 801731e:	4628      	mov	r0, r5
 8017320:	f7ff ffd4 	bl	80172cc <_ZNK8touchgfx9ConstFont4findEt>
 8017324:	4604      	mov	r4, r0
 8017326:	2800      	cmp	r0, #0
 8017328:	d0ef      	beq.n	801730a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801732a:	682b      	ldr	r3, [r5, #0]
 801732c:	4621      	mov	r1, r4
 801732e:	4628      	mov	r0, r5
 8017330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017332:	4798      	blx	r3
 8017334:	6038      	str	r0, [r7, #0]
 8017336:	682b      	ldr	r3, [r5, #0]
 8017338:	4628      	mov	r0, r5
 801733a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801733c:	4798      	blx	r3
 801733e:	7030      	strb	r0, [r6, #0]
 8017340:	e7e4      	b.n	801730c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8017342:	4604      	mov	r4, r0
 8017344:	e7f1      	b.n	801732a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08017346 <_ZN8touchgfx6memsetEPvhm>:
 8017346:	4402      	add	r2, r0
 8017348:	4290      	cmp	r0, r2
 801734a:	d002      	beq.n	8017352 <_ZN8touchgfx6memsetEPvhm+0xc>
 801734c:	f800 1b01 	strb.w	r1, [r0], #1
 8017350:	e7fa      	b.n	8017348 <_ZN8touchgfx6memsetEPvhm+0x2>
 8017352:	4770      	bx	lr

08017354 <_ZN8touchgfx3clzEl>:
 8017354:	b1e8      	cbz	r0, 8017392 <_ZN8touchgfx3clzEl+0x3e>
 8017356:	2800      	cmp	r0, #0
 8017358:	bfb8      	it	lt
 801735a:	4240      	neglt	r0, r0
 801735c:	0c03      	lsrs	r3, r0, #16
 801735e:	041b      	lsls	r3, r3, #16
 8017360:	b9ab      	cbnz	r3, 801738e <_ZN8touchgfx3clzEl+0x3a>
 8017362:	0400      	lsls	r0, r0, #16
 8017364:	2310      	movs	r3, #16
 8017366:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801736a:	bf04      	itt	eq
 801736c:	0200      	lsleq	r0, r0, #8
 801736e:	3308      	addeq	r3, #8
 8017370:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017374:	bf04      	itt	eq
 8017376:	0100      	lsleq	r0, r0, #4
 8017378:	3304      	addeq	r3, #4
 801737a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801737e:	bf04      	itt	eq
 8017380:	0080      	lsleq	r0, r0, #2
 8017382:	3302      	addeq	r3, #2
 8017384:	2800      	cmp	r0, #0
 8017386:	bfa8      	it	ge
 8017388:	3301      	addge	r3, #1
 801738a:	1e58      	subs	r0, r3, #1
 801738c:	4770      	bx	lr
 801738e:	2300      	movs	r3, #0
 8017390:	e7e9      	b.n	8017366 <_ZN8touchgfx3clzEl+0x12>
 8017392:	201f      	movs	r0, #31
 8017394:	4770      	bx	lr

08017396 <_ZN8touchgfx6muldivElllRl>:
 8017396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801739a:	4604      	mov	r4, r0
 801739c:	4698      	mov	r8, r3
 801739e:	2601      	movs	r6, #1
 80173a0:	f7ff ffd8 	bl	8017354 <_ZN8touchgfx3clzEl>
 80173a4:	2c00      	cmp	r4, #0
 80173a6:	fa04 f500 	lsl.w	r5, r4, r0
 80173aa:	fa06 f600 	lsl.w	r6, r6, r0
 80173ae:	bfba      	itte	lt
 80173b0:	f04f 37ff 	movlt.w	r7, #4294967295
 80173b4:	4264      	neglt	r4, r4
 80173b6:	2701      	movge	r7, #1
 80173b8:	2900      	cmp	r1, #0
 80173ba:	f106 36ff 	add.w	r6, r6, #4294967295
 80173be:	bfbc      	itt	lt
 80173c0:	4249      	neglt	r1, r1
 80173c2:	427f      	neglt	r7, r7
 80173c4:	2a00      	cmp	r2, #0
 80173c6:	fa41 fc00 	asr.w	ip, r1, r0
 80173ca:	ea01 0106 	and.w	r1, r1, r6
 80173ce:	bfb8      	it	lt
 80173d0:	427f      	neglt	r7, r7
 80173d2:	fb04 f401 	mul.w	r4, r4, r1
 80173d6:	fb95 f3f2 	sdiv	r3, r5, r2
 80173da:	fb02 5513 	mls	r5, r2, r3, r5
 80173de:	bfb8      	it	lt
 80173e0:	4252      	neglt	r2, r2
 80173e2:	fb94 f0f2 	sdiv	r0, r4, r2
 80173e6:	fb02 4410 	mls	r4, r2, r0, r4
 80173ea:	fb0c 4405 	mla	r4, ip, r5, r4
 80173ee:	fb94 f1f2 	sdiv	r1, r4, r2
 80173f2:	4408      	add	r0, r1
 80173f4:	fb02 4211 	mls	r2, r2, r1, r4
 80173f8:	fb0c 0003 	mla	r0, ip, r3, r0
 80173fc:	f8c8 2000 	str.w	r2, [r8]
 8017400:	4378      	muls	r0, r7
 8017402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017406 <_ZN8touchgfx10ClickEventD1Ev>:
 8017406:	4770      	bx	lr

08017408 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8017408:	2000      	movs	r0, #0
 801740a:	4770      	bx	lr

0801740c <_ZN8touchgfx9DragEventD1Ev>:
 801740c:	4770      	bx	lr

0801740e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801740e:	2001      	movs	r0, #1
 8017410:	4770      	bx	lr

08017412 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8017412:	2002      	movs	r0, #2
 8017414:	4770      	bx	lr

08017416 <_ZN8touchgfx12GestureEventD1Ev>:
 8017416:	4770      	bx	lr

08017418 <_ZN8touchgfx10ClickEventD0Ev>:
 8017418:	b510      	push	{r4, lr}
 801741a:	4604      	mov	r4, r0
 801741c:	210c      	movs	r1, #12
 801741e:	f00b fa14 	bl	802284a <_ZdlPvj>
 8017422:	4620      	mov	r0, r4
 8017424:	bd10      	pop	{r4, pc}

08017426 <_ZN8touchgfx9DragEventD0Ev>:
 8017426:	b510      	push	{r4, lr}
 8017428:	4604      	mov	r4, r0
 801742a:	2110      	movs	r1, #16
 801742c:	f00b fa0d 	bl	802284a <_ZdlPvj>
 8017430:	4620      	mov	r0, r4
 8017432:	bd10      	pop	{r4, pc}

08017434 <_ZN8touchgfx12GestureEventD0Ev>:
 8017434:	b510      	push	{r4, lr}
 8017436:	4604      	mov	r4, r0
 8017438:	210c      	movs	r1, #12
 801743a:	f00b fa06 	bl	802284a <_ZdlPvj>
 801743e:	4620      	mov	r0, r4
 8017440:	bd10      	pop	{r4, pc}
	...

08017444 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017444:	b530      	push	{r4, r5, lr}
 8017446:	460d      	mov	r5, r1
 8017448:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801744a:	b087      	sub	sp, #28
 801744c:	4604      	mov	r4, r0
 801744e:	b301      	cbz	r1, 8017492 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017450:	a801      	add	r0, sp, #4
 8017452:	f7ff ff06 	bl	8017262 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017456:	892a      	ldrh	r2, [r5, #8]
 8017458:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801745c:	7928      	ldrb	r0, [r5, #4]
 801745e:	1ad2      	subs	r2, r2, r3
 8017460:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017462:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017466:	441a      	add	r2, r3
 8017468:	896b      	ldrh	r3, [r5, #10]
 801746a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801746e:	f88d 0010 	strb.w	r0, [sp, #16]
 8017472:	1b5b      	subs	r3, r3, r5
 8017474:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8017476:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017478:	442b      	add	r3, r5
 801747a:	4d07      	ldr	r5, [pc, #28]	; (8017498 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801747c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017480:	a903      	add	r1, sp, #12
 8017482:	9503      	str	r5, [sp, #12]
 8017484:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017488:	f8ad 3016 	strh.w	r3, [sp, #22]
 801748c:	6803      	ldr	r3, [r0, #0]
 801748e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017490:	4798      	blx	r3
 8017492:	b007      	add	sp, #28
 8017494:	bd30      	pop	{r4, r5, pc}
 8017496:	bf00      	nop
 8017498:	08026224 	.word	0x08026224

0801749c <_ZNK8touchgfx4Rect9intersectEss>:
 801749c:	b510      	push	{r4, lr}
 801749e:	f9b0 3000 	ldrsh.w	r3, [r0]
 80174a2:	428b      	cmp	r3, r1
 80174a4:	dc10      	bgt.n	80174c8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80174a6:	8884      	ldrh	r4, [r0, #4]
 80174a8:	4423      	add	r3, r4
 80174aa:	b21b      	sxth	r3, r3
 80174ac:	4299      	cmp	r1, r3
 80174ae:	da0b      	bge.n	80174c8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80174b0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80174b4:	4293      	cmp	r3, r2
 80174b6:	dc07      	bgt.n	80174c8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80174b8:	88c0      	ldrh	r0, [r0, #6]
 80174ba:	4418      	add	r0, r3
 80174bc:	b200      	sxth	r0, r0
 80174be:	4282      	cmp	r2, r0
 80174c0:	bfac      	ite	ge
 80174c2:	2000      	movge	r0, #0
 80174c4:	2001      	movlt	r0, #1
 80174c6:	bd10      	pop	{r4, pc}
 80174c8:	2000      	movs	r0, #0
 80174ca:	e7fc      	b.n	80174c6 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

080174cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80174cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174ce:	460c      	mov	r4, r1
 80174d0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80174d2:	b089      	sub	sp, #36	; 0x24
 80174d4:	4605      	mov	r5, r0
 80174d6:	2900      	cmp	r1, #0
 80174d8:	d054      	beq.n	8017584 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 80174da:	4668      	mov	r0, sp
 80174dc:	f7ff fec1 	bl	8017262 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80174e0:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 80174e2:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 80174e4:	4668      	mov	r0, sp
 80174e6:	8922      	ldrh	r2, [r4, #8]
 80174e8:	88e1      	ldrh	r1, [r4, #6]
 80174ea:	443a      	add	r2, r7
 80174ec:	4431      	add	r1, r6
 80174ee:	b212      	sxth	r2, r2
 80174f0:	b209      	sxth	r1, r1
 80174f2:	f7ff ffd3 	bl	801749c <_ZNK8touchgfx4Rect9intersectEss>
 80174f6:	b1d0      	cbz	r0, 801752e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80174f8:	89a2      	ldrh	r2, [r4, #12]
 80174fa:	4668      	mov	r0, sp
 80174fc:	8961      	ldrh	r1, [r4, #10]
 80174fe:	443a      	add	r2, r7
 8017500:	4431      	add	r1, r6
 8017502:	b212      	sxth	r2, r2
 8017504:	b209      	sxth	r1, r1
 8017506:	f7ff ffc9 	bl	801749c <_ZNK8touchgfx4Rect9intersectEss>
 801750a:	4603      	mov	r3, r0
 801750c:	b978      	cbnz	r0, 801752e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801750e:	4a1e      	ldr	r2, [pc, #120]	; (8017588 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8017510:	a904      	add	r1, sp, #16
 8017512:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017514:	9204      	str	r2, [sp, #16]
 8017516:	2202      	movs	r2, #2
 8017518:	f8ad 3016 	strh.w	r3, [sp, #22]
 801751c:	f88d 2014 	strb.w	r2, [sp, #20]
 8017520:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017524:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017528:	6803      	ldr	r3, [r0, #0]
 801752a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801752c:	4798      	blx	r3
 801752e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8017530:	a802      	add	r0, sp, #8
 8017532:	f7ff fe96 	bl	8017262 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017536:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801753a:	88e0      	ldrh	r0, [r4, #6]
 801753c:	8961      	ldrh	r1, [r4, #10]
 801753e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8017542:	1a80      	subs	r0, r0, r2
 8017544:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8017548:	1a89      	subs	r1, r1, r2
 801754a:	8923      	ldrh	r3, [r4, #8]
 801754c:	4460      	add	r0, ip
 801754e:	89a2      	ldrh	r2, [r4, #12]
 8017550:	4461      	add	r1, ip
 8017552:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8017554:	eba3 030e 	sub.w	r3, r3, lr
 8017558:	eba2 020e 	sub.w	r2, r2, lr
 801755c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8017560:	7927      	ldrb	r7, [r4, #4]
 8017562:	4433      	add	r3, r6
 8017564:	4432      	add	r2, r6
 8017566:	4c09      	ldr	r4, [pc, #36]	; (801758c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8017568:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801756a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801756e:	a904      	add	r1, sp, #16
 8017570:	9404      	str	r4, [sp, #16]
 8017572:	f88d 7014 	strb.w	r7, [sp, #20]
 8017576:	f8ad 3018 	strh.w	r3, [sp, #24]
 801757a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801757e:	6803      	ldr	r3, [r0, #0]
 8017580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017582:	4798      	blx	r3
 8017584:	b009      	add	sp, #36	; 0x24
 8017586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017588:	080261fc 	.word	0x080261fc
 801758c:	08026210 	.word	0x08026210

08017590 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8017590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017594:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8017598:	b0a1      	sub	sp, #132	; 0x84
 801759a:	4604      	mov	r4, r0
 801759c:	460d      	mov	r5, r1
 801759e:	790b      	ldrb	r3, [r1, #4]
 80175a0:	f1b9 0f00 	cmp.w	r9, #0
 80175a4:	d00f      	beq.n	80175c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	f040 80a2 	bne.w	80176f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 80175ac:	b021      	add	sp, #132	; 0x84
 80175ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80175b6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80175ba:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80175be:	1d20      	adds	r0, r4, #4
 80175c0:	f7fb fe02 	bl	80131c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80175c4:	e094      	b.n	80176f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d1f0      	bne.n	80175ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80175ca:	4b5f      	ldr	r3, [pc, #380]	; (8017748 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 80175d2:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 80175d6:	f1ba 0f03 	cmp.w	sl, #3
 80175da:	ddea      	ble.n	80175b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 80175dc:	f1ba 0f0c 	cmp.w	sl, #12
 80175e0:	f04f 0303 	mov.w	r3, #3
 80175e4:	f04f 0600 	mov.w	r6, #0
 80175e8:	4958      	ldr	r1, [pc, #352]	; (801774c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 80175ea:	bfd8      	it	le
 80175ec:	f10a 32ff 	addle.w	r2, sl, #4294967295
 80175f0:	960a      	str	r6, [sp, #40]	; 0x28
 80175f2:	bfd8      	it	le
 80175f4:	fb92 f3f3 	sdivle	r3, r2, r3
 80175f8:	9301      	str	r3, [sp, #4]
 80175fa:	4b55      	ldr	r3, [pc, #340]	; (8017750 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 80175fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017600:	4b54      	ldr	r3, [pc, #336]	; (8017754 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8017602:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017606:	2248      	movs	r2, #72	; 0x48
 8017608:	f9b3 3000 	ldrsh.w	r3, [r3]
 801760c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017610:	ab0e      	add	r3, sp, #56	; 0x38
 8017612:	4618      	mov	r0, r3
 8017614:	f00b f9c2 	bl	802299c <memcpy>
 8017618:	f04f 32ff 	mov.w	r2, #4294967295
 801761c:	f8cd a008 	str.w	sl, [sp, #8]
 8017620:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8017624:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017628:	46b3      	mov	fp, r6
 801762a:	fb93 f3f2 	sdiv	r3, r3, r2
 801762e:	b29b      	uxth	r3, r3
 8017630:	9303      	str	r3, [sp, #12]
 8017632:	2300      	movs	r3, #0
 8017634:	9a03      	ldr	r2, [sp, #12]
 8017636:	88ef      	ldrh	r7, [r5, #6]
 8017638:	a80a      	add	r0, sp, #40	; 0x28
 801763a:	9309      	str	r3, [sp, #36]	; 0x24
 801763c:	9b07      	ldr	r3, [sp, #28]
 801763e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8017642:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8017646:	fb13 f302 	smulbb	r3, r3, r2
 801764a:	b29b      	uxth	r3, r3
 801764c:	9304      	str	r3, [sp, #16]
 801764e:	9b07      	ldr	r3, [sp, #28]
 8017650:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017654:	685b      	ldr	r3, [r3, #4]
 8017656:	fb13 f302 	smulbb	r3, r3, r2
 801765a:	b29b      	uxth	r3, r3
 801765c:	9305      	str	r3, [sp, #20]
 801765e:	9b04      	ldr	r3, [sp, #16]
 8017660:	441f      	add	r7, r3
 8017662:	9b05      	ldr	r3, [sp, #20]
 8017664:	4498      	add	r8, r3
 8017666:	b23f      	sxth	r7, r7
 8017668:	fa0f f888 	sxth.w	r8, r8
 801766c:	4639      	mov	r1, r7
 801766e:	4642      	mov	r2, r8
 8017670:	f7ff ff14 	bl	801749c <_ZNK8touchgfx4Rect9intersectEss>
 8017674:	b380      	cbz	r0, 80176d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8017676:	4639      	mov	r1, r7
 8017678:	ab09      	add	r3, sp, #36	; 0x24
 801767a:	4642      	mov	r2, r8
 801767c:	1d20      	adds	r0, r4, #4
 801767e:	f7fb fda3 	bl	80131c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017682:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017684:	b341      	cbz	r1, 80176d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8017686:	4549      	cmp	r1, r9
 8017688:	d026      	beq.n	80176d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801768a:	a80c      	add	r0, sp, #48	; 0x30
 801768c:	f7ff fde9 	bl	8017262 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017690:	2002      	movs	r0, #2
 8017692:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8017696:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801769a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801769e:	fb92 f2f0 	sdiv	r2, r2, r0
 80176a2:	440a      	add	r2, r1
 80176a4:	1a99      	subs	r1, r3, r2
 80176a6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80176aa:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80176ae:	fb93 f3f0 	sdiv	r3, r3, r0
 80176b2:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 80176b6:	4403      	add	r3, r0
 80176b8:	1ad3      	subs	r3, r2, r3
 80176ba:	9a06      	ldr	r2, [sp, #24]
 80176bc:	435b      	muls	r3, r3
 80176be:	fb01 3301 	mla	r3, r1, r1, r3
 80176c2:	4293      	cmp	r3, r2
 80176c4:	d208      	bcs.n	80176d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80176c6:	9a04      	ldr	r2, [sp, #16]
 80176c8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80176cc:	86a2      	strh	r2, [r4, #52]	; 0x34
 80176ce:	9a05      	ldr	r2, [sp, #20]
 80176d0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 80176d4:	86e2      	strh	r2, [r4, #54]	; 0x36
 80176d6:	9306      	str	r3, [sp, #24]
 80176d8:	f10b 0b02 	add.w	fp, fp, #2
 80176dc:	f1bb 0f08 	cmp.w	fp, #8
 80176e0:	dda7      	ble.n	8017632 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 80176e2:	9b02      	ldr	r3, [sp, #8]
 80176e4:	3601      	adds	r6, #1
 80176e6:	4453      	add	r3, sl
 80176e8:	9302      	str	r3, [sp, #8]
 80176ea:	9b01      	ldr	r3, [sp, #4]
 80176ec:	42b3      	cmp	r3, r6
 80176ee:	d199      	bne.n	8017624 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 80176f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80176f2:	2900      	cmp	r1, #0
 80176f4:	f43f af5a 	beq.w	80175ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80176f8:	a80c      	add	r0, sp, #48	; 0x30
 80176fa:	2600      	movs	r6, #0
 80176fc:	f7ff fdb1 	bl	8017262 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017700:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8017704:	88ea      	ldrh	r2, [r5, #6]
 8017706:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801770a:	1ad2      	subs	r2, r2, r3
 801770c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801770e:	7929      	ldrb	r1, [r5, #4]
 8017710:	441a      	add	r2, r3
 8017712:	892b      	ldrh	r3, [r5, #8]
 8017714:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8017718:	a90e      	add	r1, sp, #56	; 0x38
 801771a:	1a1b      	subs	r3, r3, r0
 801771c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801771e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8017722:	4403      	add	r3, r0
 8017724:	480c      	ldr	r0, [pc, #48]	; (8017758 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 8017726:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801772a:	900e      	str	r0, [sp, #56]	; 0x38
 801772c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801772e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017732:	6803      	ldr	r3, [r0, #0]
 8017734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017736:	4798      	blx	r3
 8017738:	792b      	ldrb	r3, [r5, #4]
 801773a:	2b00      	cmp	r3, #0
 801773c:	f43f af36 	beq.w	80175ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8017740:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8017744:	e732      	b.n	80175ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8017746:	bf00      	nop
 8017748:	2000b468 	.word	0x2000b468
 801774c:	08023f38 	.word	0x08023f38
 8017750:	2000b45c 	.word	0x2000b45c
 8017754:	2000b45e 	.word	0x2000b45e
 8017758:	080261fc 	.word	0x080261fc

0801775c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801775c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801775e:	4604      	mov	r4, r0
 8017760:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8017764:	3201      	adds	r2, #1
 8017766:	d112      	bne.n	801778e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8017768:	2500      	movs	r5, #0
 801776a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801776e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017772:	6803      	ldr	r3, [r0, #0]
 8017774:	9500      	str	r5, [sp, #0]
 8017776:	466d      	mov	r5, sp
 8017778:	f8ad 1004 	strh.w	r1, [sp, #4]
 801777c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017780:	4629      	mov	r1, r5
 8017782:	6a1b      	ldr	r3, [r3, #32]
 8017784:	4798      	blx	r3
 8017786:	e895 0003 	ldmia.w	r5, {r0, r1}
 801778a:	e884 0003 	stmia.w	r4, {r0, r1}
 801778e:	4620      	mov	r0, r4
 8017790:	b003      	add	sp, #12
 8017792:	bd30      	pop	{r4, r5, pc}

08017794 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8017794:	b513      	push	{r0, r1, r4, lr}
 8017796:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801779a:	4604      	mov	r4, r0
 801779c:	3301      	adds	r3, #1
 801779e:	d109      	bne.n	80177b4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80177a0:	4601      	mov	r1, r0
 80177a2:	4668      	mov	r0, sp
 80177a4:	f7ff fd5d 	bl	8017262 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80177ac:	8423      	strh	r3, [r4, #32]
 80177ae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80177b2:	8463      	strh	r3, [r4, #34]	; 0x22
 80177b4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80177b8:	b002      	add	sp, #8
 80177ba:	bd10      	pop	{r4, pc}

080177bc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80177bc:	b513      	push	{r0, r1, r4, lr}
 80177be:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80177c2:	4604      	mov	r4, r0
 80177c4:	3301      	adds	r3, #1
 80177c6:	d109      	bne.n	80177dc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80177c8:	4601      	mov	r1, r0
 80177ca:	4668      	mov	r0, sp
 80177cc:	f7ff fd49 	bl	8017262 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80177d4:	8423      	strh	r3, [r4, #32]
 80177d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80177da:	8463      	strh	r3, [r4, #34]	; 0x22
 80177dc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80177e0:	b002      	add	sp, #8
 80177e2:	bd10      	pop	{r4, pc}

080177e4 <_ZN8touchgfx6ScreenC1Ev>:
 80177e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177e6:	4605      	mov	r5, r0
 80177e8:	4b17      	ldr	r3, [pc, #92]	; (8017848 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80177ea:	2200      	movs	r2, #0
 80177ec:	4917      	ldr	r1, [pc, #92]	; (801784c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80177ee:	f845 3b04 	str.w	r3, [r5], #4
 80177f2:	2301      	movs	r3, #1
 80177f4:	8102      	strh	r2, [r0, #8]
 80177f6:	4604      	mov	r4, r0
 80177f8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80177fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8017800:	4b13      	ldr	r3, [pc, #76]	; (8017850 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017802:	8142      	strh	r2, [r0, #10]
 8017804:	f9b3 7000 	ldrsh.w	r7, [r3]
 8017808:	4b12      	ldr	r3, [pc, #72]	; (8017854 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801780a:	8182      	strh	r2, [r0, #12]
 801780c:	81c2      	strh	r2, [r0, #14]
 801780e:	8202      	strh	r2, [r0, #16]
 8017810:	8242      	strh	r2, [r0, #18]
 8017812:	8282      	strh	r2, [r0, #20]
 8017814:	82c2      	strh	r2, [r0, #22]
 8017816:	6202      	str	r2, [r0, #32]
 8017818:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801781c:	6342      	str	r2, [r0, #52]	; 0x34
 801781e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017822:	6041      	str	r1, [r0, #4]
 8017824:	4611      	mov	r1, r2
 8017826:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801782a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801782e:	4628      	mov	r0, r5
 8017830:	f7f7 ff35 	bl	800f69e <_ZN8touchgfx8Drawable5setXYEss>
 8017834:	4639      	mov	r1, r7
 8017836:	4628      	mov	r0, r5
 8017838:	f7f7 ff4f 	bl	800f6da <_ZN8touchgfx8Drawable8setWidthEs>
 801783c:	4628      	mov	r0, r5
 801783e:	4631      	mov	r1, r6
 8017840:	f7f7 ff5a 	bl	800f6f8 <_ZN8touchgfx8Drawable9setHeightEs>
 8017844:	4620      	mov	r0, r4
 8017846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017848:	08026238 	.word	0x08026238
 801784c:	08024ec8 	.word	0x08024ec8
 8017850:	2000b45c 	.word	0x2000b45c
 8017854:	2000b45e 	.word	0x2000b45e

08017858 <_ZN8touchgfx6Screen4drawEv>:
 8017858:	4b09      	ldr	r3, [pc, #36]	; (8017880 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801785a:	b507      	push	{r0, r1, r2, lr}
 801785c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017860:	2100      	movs	r1, #0
 8017862:	4b08      	ldr	r3, [pc, #32]	; (8017884 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8017864:	9100      	str	r1, [sp, #0]
 8017866:	4669      	mov	r1, sp
 8017868:	f9b3 3000 	ldrsh.w	r3, [r3]
 801786c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017870:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017874:	6803      	ldr	r3, [r0, #0]
 8017876:	689b      	ldr	r3, [r3, #8]
 8017878:	4798      	blx	r3
 801787a:	b003      	add	sp, #12
 801787c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017880:	2000b45c 	.word	0x2000b45c
 8017884:	2000b45e 	.word	0x2000b45e

08017888 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8017888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801788c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017890:	b089      	sub	sp, #36	; 0x24
 8017892:	4680      	mov	r8, r0
 8017894:	460c      	mov	r4, r1
 8017896:	4615      	mov	r5, r2
 8017898:	b16b      	cbz	r3, 80178b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801789a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801789e:	b153      	cbz	r3, 80178b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80178a0:	4628      	mov	r0, r5
 80178a2:	f7ff ff5b 	bl	801775c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80178a6:	4621      	mov	r1, r4
 80178a8:	f7fe ff7c 	bl	80167a4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80178ac:	69eb      	ldr	r3, [r5, #28]
 80178ae:	b928      	cbnz	r0, 80178bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 80178b0:	461d      	mov	r5, r3
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d1f4      	bne.n	80178a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 80178b6:	b009      	add	sp, #36	; 0x24
 80178b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178bc:	ae04      	add	r6, sp, #16
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d051      	beq.n	8017966 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 80178c2:	682b      	ldr	r3, [r5, #0]
 80178c4:	4629      	mov	r1, r5
 80178c6:	a802      	add	r0, sp, #8
 80178c8:	68db      	ldr	r3, [r3, #12]
 80178ca:	4798      	blx	r3
 80178cc:	4628      	mov	r0, r5
 80178ce:	f7ff ff61 	bl	8017794 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80178d2:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80178d6:	4407      	add	r7, r0
 80178d8:	4628      	mov	r0, r5
 80178da:	f7ff ff6f 	bl	80177bc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80178de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80178e2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80178e6:	b23f      	sxth	r7, r7
 80178e8:	4418      	add	r0, r3
 80178ea:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80178ee:	4621      	mov	r1, r4
 80178f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80178f4:	f8ad 0012 	strh.w	r0, [sp, #18]
 80178f8:	4630      	mov	r0, r6
 80178fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80178fe:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017902:	f7fb fd13 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 8017906:	4628      	mov	r0, r5
 8017908:	f7ff ff28 	bl	801775c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801790c:	ab06      	add	r3, sp, #24
 801790e:	4602      	mov	r2, r0
 8017910:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017914:	e883 0003 	stmia.w	r3, {r0, r1}
 8017918:	4611      	mov	r1, r2
 801791a:	4618      	mov	r0, r3
 801791c:	f7fb fd06 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 8017920:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017924:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017928:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801792c:	4299      	cmp	r1, r3
 801792e:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017932:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8017936:	d10b      	bne.n	8017950 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8017938:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801793c:	4552      	cmp	r2, sl
 801793e:	d107      	bne.n	8017950 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8017940:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017944:	455a      	cmp	r2, fp
 8017946:	d103      	bne.n	8017950 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8017948:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801794c:	454a      	cmp	r2, r9
 801794e:	d00a      	beq.n	8017966 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8017950:	f1bb 0f00 	cmp.w	fp, #0
 8017954:	d002      	beq.n	801795c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8017956:	f1b9 0f00 	cmp.w	r9, #0
 801795a:	d12e      	bne.n	80179ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801795c:	69ea      	ldr	r2, [r5, #28]
 801795e:	4621      	mov	r1, r4
 8017960:	4640      	mov	r0, r8
 8017962:	f7ff ff91 	bl	8017888 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017966:	4628      	mov	r0, r5
 8017968:	f7ff fef8 	bl	801775c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801796c:	6861      	ldr	r1, [r4, #4]
 801796e:	4602      	mov	r2, r0
 8017970:	4633      	mov	r3, r6
 8017972:	6820      	ldr	r0, [r4, #0]
 8017974:	c303      	stmia	r3!, {r0, r1}
 8017976:	4611      	mov	r1, r2
 8017978:	4630      	mov	r0, r6
 801797a:	f7fb fcd7 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 801797e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d097      	beq.n	80178b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8017986:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d093      	beq.n	80178b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801798e:	4628      	mov	r0, r5
 8017990:	f7ff ff00 	bl	8017794 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017994:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017998:	1a18      	subs	r0, r3, r0
 801799a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801799e:	4628      	mov	r0, r5
 80179a0:	f7ff ff0c 	bl	80177bc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80179a4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80179a8:	4631      	mov	r1, r6
 80179aa:	1a18      	subs	r0, r3, r0
 80179ac:	f8ad 0012 	strh.w	r0, [sp, #18]
 80179b0:	4628      	mov	r0, r5
 80179b2:	682b      	ldr	r3, [r5, #0]
 80179b4:	689b      	ldr	r3, [r3, #8]
 80179b6:	4798      	blx	r3
 80179b8:	e77d      	b.n	80178b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80179ba:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80179be:	fa1f f08a 	uxth.w	r0, sl
 80179c2:	4552      	cmp	r2, sl
 80179c4:	9000      	str	r0, [sp, #0]
 80179c6:	da12      	bge.n	80179ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 80179c8:	9301      	str	r3, [sp, #4]
 80179ca:	9b00      	ldr	r3, [sp, #0]
 80179cc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80179d0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80179d4:	1a9a      	subs	r2, r3, r2
 80179d6:	f8ad 1010 	strh.w	r1, [sp, #16]
 80179da:	4631      	mov	r1, r6
 80179dc:	f8ad 0014 	strh.w	r0, [sp, #20]
 80179e0:	4640      	mov	r0, r8
 80179e2:	f8ad 2016 	strh.w	r2, [sp, #22]
 80179e6:	69ea      	ldr	r2, [r5, #28]
 80179e8:	f7ff ff4e 	bl	8017888 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80179ec:	9b01      	ldr	r3, [sp, #4]
 80179ee:	f9b4 2000 	ldrsh.w	r2, [r4]
 80179f2:	b29f      	uxth	r7, r3
 80179f4:	429a      	cmp	r2, r3
 80179f6:	da0d      	bge.n	8017a14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 80179f8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80179fc:	1aba      	subs	r2, r7, r2
 80179fe:	f8ad a012 	strh.w	sl, [sp, #18]
 8017a02:	4631      	mov	r1, r6
 8017a04:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017a08:	4640      	mov	r0, r8
 8017a0a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017a0e:	69ea      	ldr	r2, [r5, #28]
 8017a10:	f7ff ff3a 	bl	8017888 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017a14:	8822      	ldrh	r2, [r4, #0]
 8017a16:	445f      	add	r7, fp
 8017a18:	88a3      	ldrh	r3, [r4, #4]
 8017a1a:	b2bf      	uxth	r7, r7
 8017a1c:	4413      	add	r3, r2
 8017a1e:	b23a      	sxth	r2, r7
 8017a20:	b29b      	uxth	r3, r3
 8017a22:	b219      	sxth	r1, r3
 8017a24:	4291      	cmp	r1, r2
 8017a26:	dd0d      	ble.n	8017a44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8017a28:	1bdb      	subs	r3, r3, r7
 8017a2a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017a2e:	f8ad a012 	strh.w	sl, [sp, #18]
 8017a32:	4631      	mov	r1, r6
 8017a34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017a38:	4640      	mov	r0, r8
 8017a3a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017a3e:	69ea      	ldr	r2, [r5, #28]
 8017a40:	f7ff ff22 	bl	8017888 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017a44:	88e2      	ldrh	r2, [r4, #6]
 8017a46:	8863      	ldrh	r3, [r4, #2]
 8017a48:	4413      	add	r3, r2
 8017a4a:	9a00      	ldr	r2, [sp, #0]
 8017a4c:	444a      	add	r2, r9
 8017a4e:	b29b      	uxth	r3, r3
 8017a50:	fa1f f982 	uxth.w	r9, r2
 8017a54:	b219      	sxth	r1, r3
 8017a56:	fa0f f289 	sxth.w	r2, r9
 8017a5a:	428a      	cmp	r2, r1
 8017a5c:	da83      	bge.n	8017966 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8017a5e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017a62:	eba3 0309 	sub.w	r3, r3, r9
 8017a66:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017a6a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017a6e:	4631      	mov	r1, r6
 8017a70:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017a74:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017a78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017a7c:	69ea      	ldr	r2, [r5, #28]
 8017a7e:	e76f      	b.n	8017960 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08017a80 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8017a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a82:	2300      	movs	r3, #0
 8017a84:	aa02      	add	r2, sp, #8
 8017a86:	4604      	mov	r4, r0
 8017a88:	3004      	adds	r0, #4
 8017a8a:	f842 3d04 	str.w	r3, [r2, #-4]!
 8017a8e:	460d      	mov	r5, r1
 8017a90:	f7fb fd23 	bl	80134da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8017a94:	9a01      	ldr	r2, [sp, #4]
 8017a96:	b11a      	cbz	r2, 8017aa0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8017a98:	4629      	mov	r1, r5
 8017a9a:	4620      	mov	r0, r4
 8017a9c:	f7ff fef4 	bl	8017888 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017aa0:	b003      	add	sp, #12
 8017aa2:	bd30      	pop	{r4, r5, pc}

08017aa4 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8017aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017aa6:	4602      	mov	r2, r0
 8017aa8:	4604      	mov	r4, r0
 8017aaa:	460d      	mov	r5, r1
 8017aac:	466b      	mov	r3, sp
 8017aae:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8017ab2:	6851      	ldr	r1, [r2, #4]
 8017ab4:	c303      	stmia	r3!, {r0, r1}
 8017ab6:	4629      	mov	r1, r5
 8017ab8:	4668      	mov	r0, sp
 8017aba:	f7fb fc37 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 8017abe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017ac2:	4669      	mov	r1, sp
 8017ac4:	b123      	cbz	r3, 8017ad0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8017ac6:	4620      	mov	r0, r4
 8017ac8:	f7ff ffda 	bl	8017a80 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017acc:	b003      	add	sp, #12
 8017ace:	bd30      	pop	{r4, r5, pc}
 8017ad0:	1d20      	adds	r0, r4, #4
 8017ad2:	f7fb fcc9 	bl	8013468 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017ad6:	e7f9      	b.n	8017acc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08017ad8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017ad8:	460b      	mov	r3, r1
 8017ada:	680a      	ldr	r2, [r1, #0]
 8017adc:	1d01      	adds	r1, r0, #4
 8017ade:	6952      	ldr	r2, [r2, #20]
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	4710      	bx	r2

08017ae4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 8017ae4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8017ae8:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8017aec:	4b03      	ldr	r3, [pc, #12]	; (8017afc <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8017aee:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017af2:	bf08      	it	eq
 8017af4:	2300      	moveq	r3, #0
 8017af6:	4308      	orrs	r0, r1
 8017af8:	4318      	orrs	r0, r3
 8017afa:	4770      	bx	lr
 8017afc:	fffffe00 	.word	0xfffffe00

08017b00 <_ZN8touchgfx9GlyphNode6setTopEs>:
 8017b00:	7b43      	ldrb	r3, [r0, #13]
 8017b02:	7201      	strb	r1, [r0, #8]
 8017b04:	b289      	uxth	r1, r1
 8017b06:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8017b0a:	05ca      	lsls	r2, r1, #23
 8017b0c:	bf48      	it	mi
 8017b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8017b12:	7343      	strb	r3, [r0, #13]
 8017b14:	058b      	lsls	r3, r1, #22
 8017b16:	bf42      	ittt	mi
 8017b18:	7b43      	ldrbmi	r3, [r0, #13]
 8017b1a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8017b1e:	7343      	strbmi	r3, [r0, #13]
 8017b20:	4770      	bx	lr

08017b22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8017b22:	b530      	push	{r4, r5, lr}
 8017b24:	2500      	movs	r5, #0
 8017b26:	2401      	movs	r4, #1
 8017b28:	6843      	ldr	r3, [r0, #4]
 8017b2a:	b913      	cbnz	r3, 8017b32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8017b2c:	6803      	ldr	r3, [r0, #0]
 8017b2e:	b1f3      	cbz	r3, 8017b6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8017b30:	6043      	str	r3, [r0, #4]
 8017b32:	7c03      	ldrb	r3, [r0, #16]
 8017b34:	b143      	cbz	r3, 8017b48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8017b36:	68c3      	ldr	r3, [r0, #12]
 8017b38:	b12b      	cbz	r3, 8017b46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017b3a:	881a      	ldrh	r2, [r3, #0]
 8017b3c:	b11a      	cbz	r2, 8017b46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017b3e:	1c9a      	adds	r2, r3, #2
 8017b40:	60c2      	str	r2, [r0, #12]
 8017b42:	8818      	ldrh	r0, [r3, #0]
 8017b44:	bd30      	pop	{r4, r5, pc}
 8017b46:	7405      	strb	r5, [r0, #16]
 8017b48:	6843      	ldr	r3, [r0, #4]
 8017b4a:	8819      	ldrh	r1, [r3, #0]
 8017b4c:	b179      	cbz	r1, 8017b6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8017b4e:	1c9a      	adds	r2, r3, #2
 8017b50:	2902      	cmp	r1, #2
 8017b52:	6042      	str	r2, [r0, #4]
 8017b54:	d1f5      	bne.n	8017b42 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017b56:	6883      	ldr	r3, [r0, #8]
 8017b58:	1d1a      	adds	r2, r3, #4
 8017b5a:	6082      	str	r2, [r0, #8]
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	60c3      	str	r3, [r0, #12]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d0e1      	beq.n	8017b28 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017b64:	881b      	ldrh	r3, [r3, #0]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d0de      	beq.n	8017b28 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017b6a:	7404      	strb	r4, [r0, #16]
 8017b6c:	e7dc      	b.n	8017b28 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017b6e:	2000      	movs	r0, #0
 8017b70:	e7e8      	b.n	8017b44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017b72 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b74:	4605      	mov	r5, r0
 8017b76:	4608      	mov	r0, r1
 8017b78:	b1f1      	cbz	r1, 8017bb8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8017b7a:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8017b7e:	460b      	mov	r3, r1
 8017b80:	f101 0708 	add.w	r7, r1, #8
 8017b84:	4622      	mov	r2, r4
 8017b86:	6818      	ldr	r0, [r3, #0]
 8017b88:	3308      	adds	r3, #8
 8017b8a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017b8e:	4626      	mov	r6, r4
 8017b90:	42bb      	cmp	r3, r7
 8017b92:	c603      	stmia	r6!, {r0, r1}
 8017b94:	4634      	mov	r4, r6
 8017b96:	d1f6      	bne.n	8017b86 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017b98:	6818      	ldr	r0, [r3, #0]
 8017b9a:	6030      	str	r0, [r6, #0]
 8017b9c:	4610      	mov	r0, r2
 8017b9e:	889b      	ldrh	r3, [r3, #4]
 8017ba0:	80b3      	strh	r3, [r6, #4]
 8017ba2:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8017ba6:	015b      	lsls	r3, r3, #5
 8017ba8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017bac:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8017bb0:	430b      	orrs	r3, r1
 8017bb2:	425b      	negs	r3, r3
 8017bb4:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8017bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017bba <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017bba:	b538      	push	{r3, r4, r5, lr}
 8017bbc:	460c      	mov	r4, r1
 8017bbe:	6811      	ldr	r1, [r2, #0]
 8017bc0:	4610      	mov	r0, r2
 8017bc2:	68cd      	ldr	r5, [r1, #12]
 8017bc4:	4619      	mov	r1, r3
 8017bc6:	47a8      	blx	r5
 8017bc8:	2800      	cmp	r0, #0
 8017bca:	bf08      	it	eq
 8017bcc:	4620      	moveq	r0, r4
 8017bce:	bd38      	pop	{r3, r4, r5, pc}

08017bd0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017bd0:	b570      	push	{r4, r5, r6, lr}
 8017bd2:	8810      	ldrh	r0, [r2, #0]
 8017bd4:	4298      	cmp	r0, r3
 8017bd6:	d817      	bhi.n	8017c08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017bd8:	1e48      	subs	r0, r1, #1
 8017bda:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8017bde:	4298      	cmp	r0, r3
 8017be0:	d312      	bcc.n	8017c08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017be2:	2400      	movs	r4, #0
 8017be4:	428c      	cmp	r4, r1
 8017be6:	d20f      	bcs.n	8017c08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017be8:	1860      	adds	r0, r4, r1
 8017bea:	1040      	asrs	r0, r0, #1
 8017bec:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8017bf0:	0085      	lsls	r5, r0, #2
 8017bf2:	42b3      	cmp	r3, r6
 8017bf4:	d902      	bls.n	8017bfc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8017bf6:	3001      	adds	r0, #1
 8017bf8:	b284      	uxth	r4, r0
 8017bfa:	e7f3      	b.n	8017be4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017bfc:	d102      	bne.n	8017c04 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 8017bfe:	442a      	add	r2, r5
 8017c00:	8850      	ldrh	r0, [r2, #2]
 8017c02:	bd70      	pop	{r4, r5, r6, pc}
 8017c04:	b281      	uxth	r1, r0
 8017c06:	e7ed      	b.n	8017be4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017c08:	2000      	movs	r0, #0
 8017c0a:	e7fa      	b.n	8017c02 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

08017c0c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8017c0c:	b510      	push	{r4, lr}
 8017c0e:	8ac3      	ldrh	r3, [r0, #22]
 8017c10:	428b      	cmp	r3, r1
 8017c12:	d805      	bhi.n	8017c20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8017c14:	4b07      	ldr	r3, [pc, #28]	; (8017c34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 8017c16:	21fd      	movs	r1, #253	; 0xfd
 8017c18:	4a07      	ldr	r2, [pc, #28]	; (8017c38 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 8017c1a:	4808      	ldr	r0, [pc, #32]	; (8017c3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 8017c1c:	f00a fe40 	bl	80228a0 <__assert_func>
 8017c20:	8a83      	ldrh	r3, [r0, #20]
 8017c22:	240a      	movs	r4, #10
 8017c24:	4419      	add	r1, r3
 8017c26:	fbb1 f3f4 	udiv	r3, r1, r4
 8017c2a:	fb04 1113 	mls	r1, r4, r3, r1
 8017c2e:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8017c32:	bd10      	pop	{r4, pc}
 8017c34:	08026285 	.word	0x08026285
 8017c38:	080266b4 	.word	0x080266b4
 8017c3c:	08026293 	.word	0x08026293

08017c40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8017c40:	b508      	push	{r3, lr}
 8017c42:	8ac3      	ldrh	r3, [r0, #22]
 8017c44:	428b      	cmp	r3, r1
 8017c46:	d805      	bhi.n	8017c54 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 8017c48:	4b07      	ldr	r3, [pc, #28]	; (8017c68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 8017c4a:	21d3      	movs	r1, #211	; 0xd3
 8017c4c:	4a07      	ldr	r2, [pc, #28]	; (8017c6c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8017c4e:	4808      	ldr	r0, [pc, #32]	; (8017c70 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8017c50:	f00a fe26 	bl	80228a0 <__assert_func>
 8017c54:	8a83      	ldrh	r3, [r0, #20]
 8017c56:	220a      	movs	r2, #10
 8017c58:	4419      	add	r1, r3
 8017c5a:	fbb1 f3f2 	udiv	r3, r1, r2
 8017c5e:	fb02 1113 	mls	r1, r2, r3, r1
 8017c62:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8017c66:	bd08      	pop	{r3, pc}
 8017c68:	08026285 	.word	0x08026285
 8017c6c:	08026404 	.word	0x08026404
 8017c70:	08026293 	.word	0x08026293

08017c74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8017c74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c78:	4604      	mov	r4, r0
 8017c7a:	4688      	mov	r8, r1
 8017c7c:	4615      	mov	r5, r2
 8017c7e:	b94a      	cbnz	r2, 8017c94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 8017c80:	4691      	mov	r9, r2
 8017c82:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8017c86:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8017c8a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8017c8e:	4648      	mov	r0, r9
 8017c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c94:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8017c98:	8892      	ldrh	r2, [r2, #4]
 8017c9a:	462b      	mov	r3, r5
 8017c9c:	f105 0c08 	add.w	ip, r5, #8
 8017ca0:	46b3      	mov	fp, r6
 8017ca2:	6818      	ldr	r0, [r3, #0]
 8017ca4:	3308      	adds	r3, #8
 8017ca6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017caa:	4637      	mov	r7, r6
 8017cac:	4563      	cmp	r3, ip
 8017cae:	c703      	stmia	r7!, {r0, r1}
 8017cb0:	463e      	mov	r6, r7
 8017cb2:	d1f6      	bne.n	8017ca2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 8017cb4:	6818      	ldr	r0, [r3, #0]
 8017cb6:	46d9      	mov	r9, fp
 8017cb8:	6038      	str	r0, [r7, #0]
 8017cba:	889b      	ldrh	r3, [r3, #4]
 8017cbc:	80bb      	strh	r3, [r7, #4]
 8017cbe:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 8017cc2:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 8017cc6:	18d3      	adds	r3, r2, r3
 8017cc8:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8017ccc:	b298      	uxth	r0, r3
 8017cce:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 8017cd2:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 8017cd6:	281d      	cmp	r0, #29
 8017cd8:	ea4a 0a01 	orr.w	sl, sl, r1
 8017cdc:	fa1f f68a 	uxth.w	r6, sl
 8017ce0:	d842      	bhi.n	8017d68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 8017ce2:	2301      	movs	r3, #1
 8017ce4:	4950      	ldr	r1, [pc, #320]	; (8017e28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 8017ce6:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8017cea:	4083      	lsls	r3, r0
 8017cec:	420b      	tst	r3, r1
 8017cee:	d114      	bne.n	8017d1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8017cf0:	f413 7f60 	tst.w	r3, #896	; 0x380
 8017cf4:	d03c      	beq.n	8017d70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 8017cf6:	fa1f fa8a 	uxth.w	sl, sl
 8017cfa:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8017cfe:	4658      	mov	r0, fp
 8017d00:	eba1 010a 	sub.w	r1, r1, sl
 8017d04:	b209      	sxth	r1, r1
 8017d06:	f7ff fefb 	bl	8017b00 <_ZN8touchgfx9GlyphNode6setTopEs>
 8017d0a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8017d0e:	1b86      	subs	r6, r0, r6
 8017d10:	eba6 0a0a 	sub.w	sl, r6, sl
 8017d14:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 8017d18:	e7b9      	b.n	8017c8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017d1a:	2100      	movs	r1, #0
 8017d1c:	f104 001a 	add.w	r0, r4, #26
 8017d20:	f7ff ff8e 	bl	8017c40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8017d24:	f640 6333 	movw	r3, #3635	; 0xe33
 8017d28:	4601      	mov	r1, r0
 8017d2a:	4298      	cmp	r0, r3
 8017d2c:	d10a      	bne.n	8017d44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 8017d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8017d32:	4640      	mov	r0, r8
 8017d34:	68db      	ldr	r3, [r3, #12]
 8017d36:	4798      	blx	r3
 8017d38:	7b41      	ldrb	r1, [r0, #13]
 8017d3a:	7a00      	ldrb	r0, [r0, #8]
 8017d3c:	f7ff fed2 	bl	8017ae4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8017d40:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8017d44:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8017d48:	4658      	mov	r0, fp
 8017d4a:	4431      	add	r1, r6
 8017d4c:	4451      	add	r1, sl
 8017d4e:	b209      	sxth	r1, r1
 8017d50:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8017d54:	f7ff fed4 	bl	8017b00 <_ZN8touchgfx9GlyphNode6setTopEs>
 8017d58:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8017d5c:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8017d60:	1a9b      	subs	r3, r3, r2
 8017d62:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8017d66:	e792      	b.n	8017c8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017d68:	f640 631b 	movw	r3, #3611	; 0xe1b
 8017d6c:	429a      	cmp	r2, r3
 8017d6e:	d005      	beq.n	8017d7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 8017d70:	f022 0302 	bic.w	r3, r2, #2
 8017d74:	f640 611d 	movw	r1, #3613	; 0xe1d
 8017d78:	428b      	cmp	r3, r1
 8017d7a:	d119      	bne.n	8017db0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 8017d7c:	1e53      	subs	r3, r2, #1
 8017d7e:	4629      	mov	r1, r5
 8017d80:	4642      	mov	r2, r8
 8017d82:	4620      	mov	r0, r4
 8017d84:	b29b      	uxth	r3, r3
 8017d86:	f7ff ff18 	bl	8017bba <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017d8a:	7b41      	ldrb	r1, [r0, #13]
 8017d8c:	7a00      	ldrb	r0, [r0, #8]
 8017d8e:	f7ff fea9 	bl	8017ae4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8017d92:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8017d96:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8017d9a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017d9e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017da2:	4313      	orrs	r3, r2
 8017da4:	115a      	asrs	r2, r3, #5
 8017da6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8017daa:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017dae:	e02e      	b.n	8017e0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8017db0:	4639      	mov	r1, r7
 8017db2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8017db6:	f7ff fe95 	bl	8017ae4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8017dba:	f640 6109 	movw	r1, #3593	; 0xe09
 8017dbe:	f022 0310 	bic.w	r3, r2, #16
 8017dc2:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8017dc6:	428b      	cmp	r3, r1
 8017dc8:	d003      	beq.n	8017dd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 8017dca:	f640 6313 	movw	r3, #3603	; 0xe13
 8017dce:	429a      	cmp	r2, r3
 8017dd0:	d127      	bne.n	8017e22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 8017dd2:	b27f      	sxtb	r7, r7
 8017dd4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017dd8:	4629      	mov	r1, r5
 8017dda:	4620      	mov	r0, r4
 8017ddc:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8017de0:	431f      	orrs	r7, r3
 8017de2:	f640 6313 	movw	r3, #3603	; 0xe13
 8017de6:	429a      	cmp	r2, r3
 8017de8:	bf14      	ite	ne
 8017dea:	f102 33ff 	addne.w	r3, r2, #4294967295
 8017dee:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8017df2:	4642      	mov	r2, r8
 8017df4:	bf18      	it	ne
 8017df6:	b29b      	uxthne	r3, r3
 8017df8:	f7ff fedf 	bl	8017bba <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017dfc:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8017e00:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017e04:	7a83      	ldrb	r3, [r0, #10]
 8017e06:	4313      	orrs	r3, r2
 8017e08:	1aff      	subs	r7, r7, r3
 8017e0a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 8017e0e:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8017e12:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8017e16:	f7ff fe65 	bl	8017ae4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8017e1a:	1b80      	subs	r0, r0, r6
 8017e1c:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8017e20:	e735      	b.n	8017c8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017e22:	2300      	movs	r3, #0
 8017e24:	e7c1      	b.n	8017daa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 8017e26:	bf00      	nop
 8017e28:	3fc00079 	.word	0x3fc00079

08017e2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8017e2c:	3a01      	subs	r2, #1
 8017e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e32:	b292      	uxth	r2, r2
 8017e34:	460c      	mov	r4, r1
 8017e36:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8017e3a:	42b2      	cmp	r2, r6
 8017e3c:	d018      	beq.n	8017e70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 8017e3e:	8b01      	ldrh	r1, [r0, #24]
 8017e40:	f834 5b02 	ldrh.w	r5, [r4], #2
 8017e44:	4291      	cmp	r1, r2
 8017e46:	d805      	bhi.n	8017e54 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 8017e48:	4b13      	ldr	r3, [pc, #76]	; (8017e98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 8017e4a:	21d3      	movs	r1, #211	; 0xd3
 8017e4c:	4a13      	ldr	r2, [pc, #76]	; (8017e9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 8017e4e:	4814      	ldr	r0, [pc, #80]	; (8017ea0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 8017e50:	f00a fd26 	bl	80228a0 <__assert_func>
 8017e54:	8ac1      	ldrh	r1, [r0, #22]
 8017e56:	4411      	add	r1, r2
 8017e58:	3a01      	subs	r2, #1
 8017e5a:	f001 0101 	and.w	r1, r1, #1
 8017e5e:	b292      	uxth	r2, r2
 8017e60:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8017e64:	8a49      	ldrh	r1, [r1, #18]
 8017e66:	428d      	cmp	r5, r1
 8017e68:	d0e7      	beq.n	8017e3a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 8017e6a:	2000      	movs	r0, #0
 8017e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e70:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8017e74:	2600      	movs	r6, #0
 8017e76:	f100 051a 	add.w	r5, r0, #26
 8017e7a:	441f      	add	r7, r3
 8017e7c:	b2b1      	uxth	r1, r6
 8017e7e:	42b9      	cmp	r1, r7
 8017e80:	da08      	bge.n	8017e94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 8017e82:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 8017e86:	4628      	mov	r0, r5
 8017e88:	f7ff feda 	bl	8017c40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8017e8c:	3601      	adds	r6, #1
 8017e8e:	4540      	cmp	r0, r8
 8017e90:	d0f4      	beq.n	8017e7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 8017e92:	e7ea      	b.n	8017e6a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8017e94:	2001      	movs	r0, #1
 8017e96:	e7e9      	b.n	8017e6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8017e98:	08026285 	.word	0x08026285
 8017e9c:	08026814 	.word	0x08026814
 8017ea0:	08026293 	.word	0x08026293

08017ea4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 8017ea4:	b538      	push	{r3, r4, r5, lr}
 8017ea6:	8ac3      	ldrh	r3, [r0, #22]
 8017ea8:	428b      	cmp	r3, r1
 8017eaa:	d205      	bcs.n	8017eb8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 8017eac:	4b08      	ldr	r3, [pc, #32]	; (8017ed0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 8017eae:	21d8      	movs	r1, #216	; 0xd8
 8017eb0:	4a08      	ldr	r2, [pc, #32]	; (8017ed4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 8017eb2:	4809      	ldr	r0, [pc, #36]	; (8017ed8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 8017eb4:	f00a fcf4 	bl	80228a0 <__assert_func>
 8017eb8:	8a82      	ldrh	r2, [r0, #20]
 8017eba:	250a      	movs	r5, #10
 8017ebc:	1a5b      	subs	r3, r3, r1
 8017ebe:	440a      	add	r2, r1
 8017ec0:	82c3      	strh	r3, [r0, #22]
 8017ec2:	fbb2 f4f5 	udiv	r4, r2, r5
 8017ec6:	fb05 2214 	mls	r2, r5, r4, r2
 8017eca:	8282      	strh	r2, [r0, #20]
 8017ecc:	bd38      	pop	{r3, r4, r5, pc}
 8017ece:	bf00      	nop
 8017ed0:	08026279 	.word	0x08026279
 8017ed4:	08026630 	.word	0x08026630
 8017ed8:	08026293 	.word	0x08026293

08017edc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8017edc:	b538      	push	{r3, r4, r5, lr}
 8017ede:	8ac3      	ldrh	r3, [r0, #22]
 8017ee0:	2b09      	cmp	r3, #9
 8017ee2:	d905      	bls.n	8017ef0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 8017ee4:	4b08      	ldr	r3, [pc, #32]	; (8017f08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 8017ee6:	21f7      	movs	r1, #247	; 0xf7
 8017ee8:	4a08      	ldr	r2, [pc, #32]	; (8017f0c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 8017eea:	4809      	ldr	r0, [pc, #36]	; (8017f10 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 8017eec:	f00a fcd8 	bl	80228a0 <__assert_func>
 8017ef0:	8a82      	ldrh	r2, [r0, #20]
 8017ef2:	250a      	movs	r5, #10
 8017ef4:	441a      	add	r2, r3
 8017ef6:	3301      	adds	r3, #1
 8017ef8:	fbb2 f4f5 	udiv	r4, r2, r5
 8017efc:	fb05 2214 	mls	r2, r5, r4, r2
 8017f00:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8017f04:	82c3      	strh	r3, [r0, #22]
 8017f06:	bd38      	pop	{r3, r4, r5, pc}
 8017f08:	0802626d 	.word	0x0802626d
 8017f0c:	08026581 	.word	0x08026581
 8017f10:	08026293 	.word	0x08026293

08017f14 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017f14:	b538      	push	{r3, r4, r5, lr}
 8017f16:	4604      	mov	r4, r0
 8017f18:	f100 051a 	add.w	r5, r0, #26
 8017f1c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017f1e:	2b0a      	cmp	r3, #10
 8017f20:	d01c      	beq.n	8017f5c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8017f22:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8017f24:	b962      	cbnz	r2, 8017f40 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8017f26:	f104 051a 	add.w	r5, r4, #26
 8017f2a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017f2c:	2b0a      	cmp	r3, #10
 8017f2e:	d015      	beq.n	8017f5c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8017f30:	4620      	mov	r0, r4
 8017f32:	f7ff fdf6 	bl	8017b22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8017f36:	4601      	mov	r1, r0
 8017f38:	4628      	mov	r0, r5
 8017f3a:	f7ff ffcf 	bl	8017edc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8017f3e:	e7f4      	b.n	8017f2a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8017f40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017f42:	3a01      	subs	r2, #1
 8017f44:	4628      	mov	r0, r5
 8017f46:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8017f4a:	3301      	adds	r3, #1
 8017f4c:	f003 0301 	and.w	r3, r3, #1
 8017f50:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8017f52:	8722      	strh	r2, [r4, #56]	; 0x38
 8017f54:	86e3      	strh	r3, [r4, #54]	; 0x36
 8017f56:	f7ff ffc1 	bl	8017edc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8017f5a:	e7df      	b.n	8017f1c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8017f5c:	bd38      	pop	{r3, r4, r5, pc}
	...

08017f60 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8017f60:	2300      	movs	r3, #0
 8017f62:	b510      	push	{r4, lr}
 8017f64:	6043      	str	r3, [r0, #4]
 8017f66:	4604      	mov	r4, r0
 8017f68:	60c3      	str	r3, [r0, #12]
 8017f6a:	7403      	strb	r3, [r0, #16]
 8017f6c:	8603      	strh	r3, [r0, #48]	; 0x30
 8017f6e:	8303      	strh	r3, [r0, #24]
 8017f70:	8703      	strh	r3, [r0, #56]	; 0x38
 8017f72:	f7ff ffcf 	bl	8017f14 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017f76:	4a0a      	ldr	r2, [pc, #40]	; (8017fa0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 8017f78:	6813      	ldr	r3, [r2, #0]
 8017f7a:	4611      	mov	r1, r2
 8017f7c:	b913      	cbnz	r3, 8017f84 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8017f7e:	6852      	ldr	r2, [r2, #4]
 8017f80:	07d0      	lsls	r0, r2, #31
 8017f82:	d50b      	bpl.n	8017f9c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 8017f84:	6849      	ldr	r1, [r1, #4]
 8017f86:	104a      	asrs	r2, r1, #1
 8017f88:	07c9      	lsls	r1, r1, #31
 8017f8a:	eb04 0002 	add.w	r0, r4, r2
 8017f8e:	bf48      	it	mi
 8017f90:	58a2      	ldrmi	r2, [r4, r2]
 8017f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f96:	bf48      	it	mi
 8017f98:	58d3      	ldrmi	r3, [r2, r3]
 8017f9a:	4718      	bx	r3
 8017f9c:	bd10      	pop	{r4, pc}
 8017f9e:	bf00      	nop
 8017fa0:	20008560 	.word	0x20008560

08017fa4 <_ZN8touchgfx12TextProviderC1Ev>:
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	2201      	movs	r2, #1
 8017fa8:	b510      	push	{r4, lr}
 8017faa:	4604      	mov	r4, r0
 8017fac:	60c3      	str	r3, [r0, #12]
 8017fae:	7403      	strb	r3, [r0, #16]
 8017fb0:	82c3      	strh	r3, [r0, #22]
 8017fb2:	8303      	strh	r3, [r0, #24]
 8017fb4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8017fb6:	8603      	strh	r3, [r0, #48]	; 0x30
 8017fb8:	86c3      	strh	r3, [r0, #54]	; 0x36
 8017fba:	8703      	strh	r3, [r0, #56]	; 0x38
 8017fbc:	63c3      	str	r3, [r0, #60]	; 0x3c
 8017fbe:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8017fc2:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8017fc6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8017fca:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8017fce:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8017fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8017fd6:	f7ff ffc3 	bl	8017f60 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017fda:	4620      	mov	r0, r4
 8017fdc:	bd10      	pop	{r4, pc}

08017fde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8017fde:	b410      	push	{r4}
 8017fe0:	6082      	str	r2, [r0, #8]
 8017fe2:	6001      	str	r1, [r0, #0]
 8017fe4:	63c3      	str	r3, [r0, #60]	; 0x3c
 8017fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fea:	f7ff bfb9 	b.w	8017f60 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08017ff0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8017ff0:	b508      	push	{r3, lr}
 8017ff2:	88c2      	ldrh	r2, [r0, #6]
 8017ff4:	440a      	add	r2, r1
 8017ff6:	2a02      	cmp	r2, #2
 8017ff8:	dd05      	ble.n	8018006 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 8017ffa:	4b06      	ldr	r3, [pc, #24]	; (8018014 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 8017ffc:	21ec      	movs	r1, #236	; 0xec
 8017ffe:	4a06      	ldr	r2, [pc, #24]	; (8018018 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 8018000:	4806      	ldr	r0, [pc, #24]	; (801801c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 8018002:	f00a fc4d 	bl	80228a0 <__assert_func>
 8018006:	8883      	ldrh	r3, [r0, #4]
 8018008:	80c2      	strh	r2, [r0, #6]
 801800a:	1a59      	subs	r1, r3, r1
 801800c:	f001 0101 	and.w	r1, r1, #1
 8018010:	8081      	strh	r1, [r0, #4]
 8018012:	bd08      	pop	{r3, pc}
 8018014:	080262bf 	.word	0x080262bf
 8018018:	0802678d 	.word	0x0802678d
 801801c:	08026293 	.word	0x08026293

08018020 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8018020:	b508      	push	{r3, lr}
 8018022:	88c3      	ldrh	r3, [r0, #6]
 8018024:	428b      	cmp	r3, r1
 8018026:	d805      	bhi.n	8018034 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 8018028:	4b06      	ldr	r3, [pc, #24]	; (8018044 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801802a:	21fd      	movs	r1, #253	; 0xfd
 801802c:	4a06      	ldr	r2, [pc, #24]	; (8018048 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801802e:	4807      	ldr	r0, [pc, #28]	; (801804c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8018030:	f00a fc36 	bl	80228a0 <__assert_func>
 8018034:	8883      	ldrh	r3, [r0, #4]
 8018036:	4419      	add	r1, r3
 8018038:	f001 0101 	and.w	r1, r1, #1
 801803c:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8018040:	bd08      	pop	{r3, pc}
 8018042:	bf00      	nop
 8018044:	08026285 	.word	0x08026285
 8018048:	080268e5 	.word	0x080268e5
 801804c:	08026293 	.word	0x08026293

08018050 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018050:	b570      	push	{r4, r5, r6, lr}
 8018052:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8018054:	4604      	mov	r4, r0
 8018056:	b92a      	cbnz	r2, 8018064 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8018058:	4b12      	ldr	r3, [pc, #72]	; (80180a4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801805a:	21de      	movs	r1, #222	; 0xde
 801805c:	4a12      	ldr	r2, [pc, #72]	; (80180a8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801805e:	4813      	ldr	r0, [pc, #76]	; (80180ac <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8018060:	f00a fc1e 	bl	80228a0 <__assert_func>
 8018064:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018066:	260a      	movs	r6, #10
 8018068:	3a01      	subs	r2, #1
 801806a:	3412      	adds	r4, #18
 801806c:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8018070:	3301      	adds	r3, #1
 8018072:	8b4d      	ldrh	r5, [r1, #26]
 8018074:	8602      	strh	r2, [r0, #48]	; 0x30
 8018076:	fbb3 f1f6 	udiv	r1, r3, r6
 801807a:	fb06 3311 	mls	r3, r6, r1, r3
 801807e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018080:	f7ff ff48 	bl	8017f14 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018084:	88e3      	ldrh	r3, [r4, #6]
 8018086:	2101      	movs	r1, #1
 8018088:	2b02      	cmp	r3, #2
 801808a:	bf04      	itt	eq
 801808c:	2301      	moveq	r3, #1
 801808e:	80e3      	strheq	r3, [r4, #6]
 8018090:	4620      	mov	r0, r4
 8018092:	f7ff ffad 	bl	8017ff0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8018096:	4620      	mov	r0, r4
 8018098:	462a      	mov	r2, r5
 801809a:	2100      	movs	r1, #0
 801809c:	f7ff ffc0 	bl	8018020 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 80180a0:	4628      	mov	r0, r5
 80180a2:	bd70      	pop	{r4, r5, r6, pc}
 80180a4:	08026264 	.word	0x08026264
 80180a8:	080264d6 	.word	0x080264d6
 80180ac:	08026293 	.word	0x08026293

080180b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80180b0:	428a      	cmp	r2, r1
 80180b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180b6:	4604      	mov	r4, r0
 80180b8:	460e      	mov	r6, r1
 80180ba:	4615      	mov	r5, r2
 80180bc:	469a      	mov	sl, r3
 80180be:	d92b      	bls.n	8018118 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 80180c0:	1a57      	subs	r7, r2, r1
 80180c2:	f04f 0800 	mov.w	r8, #0
 80180c6:	f100 0932 	add.w	r9, r0, #50	; 0x32
 80180ca:	f04f 0b0a 	mov.w	fp, #10
 80180ce:	b2bf      	uxth	r7, r7
 80180d0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80180d2:	b92b      	cbnz	r3, 80180e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 80180d4:	4b24      	ldr	r3, [pc, #144]	; (8018168 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 80180d6:	21e6      	movs	r1, #230	; 0xe6
 80180d8:	4a24      	ldr	r2, [pc, #144]	; (801816c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 80180da:	4825      	ldr	r0, [pc, #148]	; (8018170 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 80180dc:	f00a fbe0 	bl	80228a0 <__assert_func>
 80180e0:	3b01      	subs	r3, #1
 80180e2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80180e4:	2101      	movs	r1, #1
 80180e6:	4648      	mov	r0, r9
 80180e8:	b29b      	uxth	r3, r3
 80180ea:	f108 0801 	add.w	r8, r8, #1
 80180ee:	441a      	add	r2, r3
 80180f0:	8623      	strh	r3, [r4, #48]	; 0x30
 80180f2:	fbb2 f3fb 	udiv	r3, r2, fp
 80180f6:	fb0b 2313 	mls	r3, fp, r3, r2
 80180fa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80180fe:	8b5a      	ldrh	r2, [r3, #26]
 8018100:	9201      	str	r2, [sp, #4]
 8018102:	f7ff ff75 	bl	8017ff0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8018106:	9a01      	ldr	r2, [sp, #4]
 8018108:	2100      	movs	r1, #0
 801810a:	4648      	mov	r0, r9
 801810c:	f7ff ff88 	bl	8018020 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8018110:	fa1f f388 	uxth.w	r3, r8
 8018114:	429f      	cmp	r7, r3
 8018116:	d8db      	bhi.n	80180d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 8018118:	f104 071a 	add.w	r7, r4, #26
 801811c:	4631      	mov	r1, r6
 801811e:	260a      	movs	r6, #10
 8018120:	4638      	mov	r0, r7
 8018122:	f7ff febf 	bl	8017ea4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8018126:	b1c5      	cbz	r5, 801815a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8018128:	3d01      	subs	r5, #1
 801812a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801812c:	b2ad      	uxth	r5, r5
 801812e:	2b09      	cmp	r3, #9
 8018130:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8018134:	d903      	bls.n	801813e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 8018136:	4b0f      	ldr	r3, [pc, #60]	; (8018174 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8018138:	21ec      	movs	r1, #236	; 0xec
 801813a:	4a0f      	ldr	r2, [pc, #60]	; (8018178 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801813c:	e7cd      	b.n	80180da <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801813e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8018140:	3301      	adds	r3, #1
 8018142:	3109      	adds	r1, #9
 8018144:	8623      	strh	r3, [r4, #48]	; 0x30
 8018146:	fbb1 f0f6 	udiv	r0, r1, r6
 801814a:	fb06 1110 	mls	r1, r6, r0, r1
 801814e:	4638      	mov	r0, r7
 8018150:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8018152:	2100      	movs	r1, #0
 8018154:	f7ff fd5a 	bl	8017c0c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8018158:	e7e5      	b.n	8018126 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801815a:	4620      	mov	r0, r4
 801815c:	b003      	add	sp, #12
 801815e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018162:	f7ff bed7 	b.w	8017f14 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018166:	bf00      	nop
 8018168:	08026264 	.word	0x08026264
 801816c:	0802635a 	.word	0x0802635a
 8018170:	08026293 	.word	0x08026293
 8018174:	080262bf 	.word	0x080262bf
 8018178:	080262d2 	.word	0x080262d2

0801817c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801817c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018180:	4605      	mov	r5, r0
 8018182:	4616      	mov	r6, r2
 8018184:	1c8c      	adds	r4, r1, #2
 8018186:	8809      	ldrh	r1, [r1, #0]
 8018188:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801818c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8018190:	42b3      	cmp	r3, r6
 8018192:	d124      	bne.n	80181de <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8018194:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8018198:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801819c:	f001 070f 	and.w	r7, r1, #15
 80181a0:	4652      	mov	r2, sl
 80181a2:	f8cd 8000 	str.w	r8, [sp]
 80181a6:	464b      	mov	r3, r9
 80181a8:	4621      	mov	r1, r4
 80181aa:	4628      	mov	r0, r5
 80181ac:	f7ff fe3e 	bl	8017e2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80181b0:	4683      	mov	fp, r0
 80181b2:	b168      	cbz	r0, 80181d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80181b4:	eb0a 0109 	add.w	r1, sl, r9
 80181b8:	463a      	mov	r2, r7
 80181ba:	4628      	mov	r0, r5
 80181bc:	4441      	add	r1, r8
 80181be:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80181c2:	4649      	mov	r1, r9
 80181c4:	f7ff ff74 	bl	80180b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80181c8:	4658      	mov	r0, fp
 80181ca:	b003      	add	sp, #12
 80181cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d0:	eb07 010a 	add.w	r1, r7, sl
 80181d4:	4449      	add	r1, r9
 80181d6:	4441      	add	r1, r8
 80181d8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80181dc:	e7d2      	b.n	8018184 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80181de:	f04f 0b00 	mov.w	fp, #0
 80181e2:	e7f1      	b.n	80181c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080181e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80181e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181e8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80181ea:	4604      	mov	r4, r0
 80181ec:	260b      	movs	r6, #11
 80181ee:	f100 091a 	add.w	r9, r0, #26
 80181f2:	886f      	ldrh	r7, [r5, #2]
 80181f4:	087f      	lsrs	r7, r7, #1
 80181f6:	3e01      	subs	r6, #1
 80181f8:	d013      	beq.n	8018222 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 80181fa:	2100      	movs	r1, #0
 80181fc:	4648      	mov	r0, r9
 80181fe:	f7ff fd1f 	bl	8017c40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018202:	462a      	mov	r2, r5
 8018204:	4680      	mov	r8, r0
 8018206:	4603      	mov	r3, r0
 8018208:	4639      	mov	r1, r7
 801820a:	4620      	mov	r0, r4
 801820c:	f7ff fce0 	bl	8017bd0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018210:	b138      	cbz	r0, 8018222 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8018212:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8018216:	4642      	mov	r2, r8
 8018218:	4620      	mov	r0, r4
 801821a:	f7ff ffaf 	bl	801817c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801821e:	2800      	cmp	r0, #0
 8018220:	d1e9      	bne.n	80181f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8018222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08018228 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8018228:	4b1e      	ldr	r3, [pc, #120]	; (80182a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801822a:	b570      	push	{r4, r5, r6, lr}
 801822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018230:	4604      	mov	r4, r0
 8018232:	f003 0501 	and.w	r5, r3, #1
 8018236:	b902      	cbnz	r2, 801823a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 8018238:	b165      	cbz	r5, 8018254 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801823a:	105b      	asrs	r3, r3, #1
 801823c:	f104 061a 	add.w	r6, r4, #26
 8018240:	18e0      	adds	r0, r4, r3
 8018242:	b10d      	cbz	r5, 8018248 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8018244:	58e3      	ldr	r3, [r4, r3]
 8018246:	589a      	ldr	r2, [r3, r2]
 8018248:	4790      	blx	r2
 801824a:	2100      	movs	r1, #0
 801824c:	4602      	mov	r2, r0
 801824e:	4630      	mov	r0, r6
 8018250:	f7ff fcdc 	bl	8017c0c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8018254:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018256:	b303      	cbz	r3, 801829a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8018258:	f104 051a 	add.w	r5, r4, #26
 801825c:	2100      	movs	r1, #0
 801825e:	4628      	mov	r0, r5
 8018260:	f7ff fcee 	bl	8017c40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018264:	b1c8      	cbz	r0, 801829a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8018266:	4620      	mov	r0, r4
 8018268:	f7ff ffbc 	bl	80181e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801826c:	2101      	movs	r1, #1
 801826e:	4628      	mov	r0, r5
 8018270:	f7ff fce6 	bl	8017c40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018274:	f640 133f 	movw	r3, #2367	; 0x93f
 8018278:	4606      	mov	r6, r0
 801827a:	4298      	cmp	r0, r3
 801827c:	d10d      	bne.n	801829a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801827e:	2100      	movs	r1, #0
 8018280:	4628      	mov	r0, r5
 8018282:	f7ff fcdd 	bl	8017c40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018286:	2101      	movs	r1, #1
 8018288:	4602      	mov	r2, r0
 801828a:	4628      	mov	r0, r5
 801828c:	f7ff fcbe 	bl	8017c0c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8018290:	4632      	mov	r2, r6
 8018292:	2100      	movs	r1, #0
 8018294:	4628      	mov	r0, r5
 8018296:	f7ff fcb9 	bl	8017c0c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801829a:	4620      	mov	r0, r4
 801829c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182a0:	f7ff bed6 	b.w	8018050 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80182a4:	20008568 	.word	0x20008568

080182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80182a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182aa:	4617      	mov	r7, r2
 80182ac:	461e      	mov	r6, r3
 80182ae:	4605      	mov	r5, r0
 80182b0:	f7ff ffba 	bl	8018228 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80182b4:	683b      	ldr	r3, [r7, #0]
 80182b6:	4604      	mov	r4, r0
 80182b8:	4601      	mov	r1, r0
 80182ba:	4638      	mov	r0, r7
 80182bc:	68db      	ldr	r3, [r3, #12]
 80182be:	4798      	blx	r3
 80182c0:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 80182c4:	4602      	mov	r2, r0
 80182c6:	6030      	str	r0, [r6, #0]
 80182c8:	b29b      	uxth	r3, r3
 80182ca:	2b7f      	cmp	r3, #127	; 0x7f
 80182cc:	d813      	bhi.n	80182f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 80182ce:	4639      	mov	r1, r7
 80182d0:	4628      	mov	r0, r5
 80182d2:	f7ff fccf 	bl	8017c74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80182d6:	6030      	str	r0, [r6, #0]
 80182d8:	6833      	ldr	r3, [r6, #0]
 80182da:	b143      	cbz	r3, 80182ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80182dc:	f993 200d 	ldrsb.w	r2, [r3, #13]
 80182e0:	7a9b      	ldrb	r3, [r3, #10]
 80182e2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80182e6:	4313      	orrs	r3, r2
 80182e8:	bf0c      	ite	eq
 80182ea:	2301      	moveq	r3, #1
 80182ec:	2300      	movne	r3, #0
 80182ee:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80182f2:	4620      	mov	r0, r4
 80182f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182f6:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d0ec      	beq.n	80182d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 80182fe:	f640 1302 	movw	r3, #2306	; 0x902
 8018302:	429c      	cmp	r4, r3
 8018304:	d1e8      	bne.n	80182d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8018306:	4601      	mov	r1, r0
 8018308:	4628      	mov	r0, r5
 801830a:	f7ff fc32 	bl	8017b72 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801830e:	e7e2      	b.n	80182d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

08018310 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018314:	4617      	mov	r7, r2
 8018316:	461e      	mov	r6, r3
 8018318:	4605      	mov	r5, r0
 801831a:	f7ff ff85 	bl	8018228 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801831e:	683b      	ldr	r3, [r7, #0]
 8018320:	4604      	mov	r4, r0
 8018322:	4601      	mov	r1, r0
 8018324:	4638      	mov	r0, r7
 8018326:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801832a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801832e:	47c0      	blx	r8
 8018330:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8018334:	4602      	mov	r2, r0
 8018336:	6030      	str	r0, [r6, #0]
 8018338:	b29b      	uxth	r3, r3
 801833a:	2b7f      	cmp	r3, #127	; 0x7f
 801833c:	d814      	bhi.n	8018368 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801833e:	4639      	mov	r1, r7
 8018340:	4628      	mov	r0, r5
 8018342:	f7ff fc97 	bl	8017c74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018346:	6030      	str	r0, [r6, #0]
 8018348:	6833      	ldr	r3, [r6, #0]
 801834a:	b143      	cbz	r3, 801835e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801834c:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8018350:	7a9b      	ldrb	r3, [r3, #10]
 8018352:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018356:	4313      	orrs	r3, r2
 8018358:	bf0c      	ite	eq
 801835a:	2301      	moveq	r3, #1
 801835c:	2300      	movne	r3, #0
 801835e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8018362:	4620      	mov	r0, r4
 8018364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018368:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801836c:	2b00      	cmp	r3, #0
 801836e:	d0eb      	beq.n	8018348 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8018370:	f640 1302 	movw	r3, #2306	; 0x902
 8018374:	429c      	cmp	r4, r3
 8018376:	d1e7      	bne.n	8018348 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8018378:	4601      	mov	r1, r0
 801837a:	4628      	mov	r0, r5
 801837c:	f7ff fbf9 	bl	8017b72 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018380:	e7e1      	b.n	8018346 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

08018382 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018382:	4602      	mov	r2, r0
 8018384:	b148      	cbz	r0, 801839a <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018386:	2300      	movs	r3, #0
 8018388:	b298      	uxth	r0, r3
 801838a:	3301      	adds	r3, #1
 801838c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018390:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018394:	2900      	cmp	r1, #0
 8018396:	d1f7      	bne.n	8018388 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8018398:	4770      	bx	lr
 801839a:	4770      	bx	lr

0801839c <_ZN8touchgfx7Unicode6strlenEPKc>:
 801839c:	b140      	cbz	r0, 80183b0 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801839e:	4602      	mov	r2, r0
 80183a0:	1a13      	subs	r3, r2, r0
 80183a2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80183a6:	b29b      	uxth	r3, r3
 80183a8:	2900      	cmp	r1, #0
 80183aa:	d1f9      	bne.n	80183a0 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 80183ac:	4618      	mov	r0, r3
 80183ae:	4770      	bx	lr
 80183b0:	4603      	mov	r3, r0
 80183b2:	e7fb      	b.n	80183ac <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

080183b4 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80183b4:	b530      	push	{r4, r5, lr}
 80183b6:	4604      	mov	r4, r0
 80183b8:	b159      	cbz	r1, 80183d2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 80183ba:	b148      	cbz	r0, 80183d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80183bc:	2300      	movs	r3, #0
 80183be:	b298      	uxth	r0, r3
 80183c0:	4282      	cmp	r2, r0
 80183c2:	d905      	bls.n	80183d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80183c4:	5ccd      	ldrb	r5, [r1, r3]
 80183c6:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80183ca:	3301      	adds	r3, #1
 80183cc:	2d00      	cmp	r5, #0
 80183ce:	d1f6      	bne.n	80183be <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80183d0:	bd30      	pop	{r4, r5, pc}
 80183d2:	4608      	mov	r0, r1
 80183d4:	e7fc      	b.n	80183d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080183d6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 80183d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183d8:	468c      	mov	ip, r1
 80183da:	b08b      	sub	sp, #44	; 0x2c
 80183dc:	2100      	movs	r1, #0
 80183de:	ae01      	add	r6, sp, #4
 80183e0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80183e4:	211f      	movs	r1, #31
 80183e6:	fbb0 f7f3 	udiv	r7, r0, r3
 80183ea:	fb03 0517 	mls	r5, r3, r7, r0
 80183ee:	4638      	mov	r0, r7
 80183f0:	b2ec      	uxtb	r4, r5
 80183f2:	2d09      	cmp	r5, #9
 80183f4:	bfd4      	ite	le
 80183f6:	3430      	addle	r4, #48	; 0x30
 80183f8:	3457      	addgt	r4, #87	; 0x57
 80183fa:	b2e4      	uxtb	r4, r4
 80183fc:	558c      	strb	r4, [r1, r6]
 80183fe:	1e4c      	subs	r4, r1, #1
 8018400:	b92f      	cbnz	r7, 801840e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8018402:	4431      	add	r1, r6
 8018404:	4660      	mov	r0, ip
 8018406:	f7ff ffd5 	bl	80183b4 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801840a:	b00b      	add	sp, #44	; 0x2c
 801840c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801840e:	4621      	mov	r1, r4
 8018410:	e7e9      	b.n	80183e6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08018412 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8018412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018414:	4607      	mov	r7, r0
 8018416:	b08b      	sub	sp, #44	; 0x2c
 8018418:	4608      	mov	r0, r1
 801841a:	b341      	cbz	r1, 801846e <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801841c:	1e99      	subs	r1, r3, #2
 801841e:	290e      	cmp	r1, #14
 8018420:	d825      	bhi.n	801846e <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018422:	2100      	movs	r1, #0
 8018424:	463c      	mov	r4, r7
 8018426:	261f      	movs	r6, #31
 8018428:	f10d 0c04 	add.w	ip, sp, #4
 801842c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018430:	1e71      	subs	r1, r6, #1
 8018432:	fb94 fef3 	sdiv	lr, r4, r3
 8018436:	fb03 441e 	mls	r4, r3, lr, r4
 801843a:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801843e:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018442:	b2ec      	uxtb	r4, r5
 8018444:	2d09      	cmp	r5, #9
 8018446:	bfd4      	ite	le
 8018448:	3430      	addle	r4, #48	; 0x30
 801844a:	3457      	addgt	r4, #87	; 0x57
 801844c:	b2e4      	uxtb	r4, r4
 801844e:	f80c 4006 	strb.w	r4, [ip, r6]
 8018452:	4674      	mov	r4, lr
 8018454:	b96c      	cbnz	r4, 8018472 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8018456:	2f00      	cmp	r7, #0
 8018458:	da05      	bge.n	8018466 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801845a:	ab0a      	add	r3, sp, #40	; 0x28
 801845c:	4419      	add	r1, r3
 801845e:	232d      	movs	r3, #45	; 0x2d
 8018460:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018464:	1eb1      	subs	r1, r6, #2
 8018466:	3101      	adds	r1, #1
 8018468:	4461      	add	r1, ip
 801846a:	f7ff ffa3 	bl	80183b4 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801846e:	b00b      	add	sp, #44	; 0x2c
 8018470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018472:	460e      	mov	r6, r1
 8018474:	e7dc      	b.n	8018430 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08018476 <_ZN8touchgfx7Unicode4atoiEPKt>:
 8018476:	b510      	push	{r4, lr}
 8018478:	b158      	cbz	r0, 8018492 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801847a:	1e82      	subs	r2, r0, #2
 801847c:	210a      	movs	r1, #10
 801847e:	2000      	movs	r0, #0
 8018480:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8018484:	3b30      	subs	r3, #48	; 0x30
 8018486:	b29c      	uxth	r4, r3
 8018488:	2c09      	cmp	r4, #9
 801848a:	d802      	bhi.n	8018492 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801848c:	fb01 3000 	mla	r0, r1, r0, r3
 8018490:	e7f6      	b.n	8018480 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 8018492:	bd10      	pop	{r4, pc}

08018494 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 8018494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018498:	b085      	sub	sp, #20
 801849a:	f8d0 8000 	ldr.w	r8, [r0]
 801849e:	468a      	mov	sl, r1
 80184a0:	461c      	mov	r4, r3
 80184a2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 80184a6:	4681      	mov	r9, r0
 80184a8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80184ac:	4640      	mov	r0, r8
 80184ae:	9203      	str	r2, [sp, #12]
 80184b0:	9102      	str	r1, [sp, #8]
 80184b2:	9301      	str	r3, [sp, #4]
 80184b4:	f7ff ff65 	bl	8018382 <_ZN8touchgfx7Unicode6strlenEPKt>
 80184b8:	9a03      	ldr	r2, [sp, #12]
 80184ba:	f1ba 0f00 	cmp.w	sl, #0
 80184be:	bf0c      	ite	eq
 80184c0:	4684      	moveq	ip, r0
 80184c2:	f100 0c01 	addne.w	ip, r0, #1
 80184c6:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 80184ca:	8812      	ldrh	r2, [r2, #0]
 80184cc:	fa1f fc8c 	uxth.w	ip, ip
 80184d0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80184d2:	2a69      	cmp	r2, #105	; 0x69
 80184d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80184d6:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80184d8:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 80184dc:	d004      	beq.n	80184e8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 80184de:	d844      	bhi.n	801856a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 80184e0:	2a58      	cmp	r2, #88	; 0x58
 80184e2:	d001      	beq.n	80184e8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 80184e4:	2a64      	cmp	r2, #100	; 0x64
 80184e6:	d14b      	bne.n	8018580 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 80184e8:	b1a4      	cbz	r4, 8018514 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 80184ea:	b956      	cbnz	r6, 8018502 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 80184ec:	2801      	cmp	r0, #1
 80184ee:	d108      	bne.n	8018502 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 80184f0:	f8b8 2000 	ldrh.w	r2, [r8]
 80184f4:	2a30      	cmp	r2, #48	; 0x30
 80184f6:	bf02      	ittt	eq
 80184f8:	f108 0202 	addeq.w	r2, r8, #2
 80184fc:	4630      	moveq	r0, r6
 80184fe:	f8c9 2000 	streq.w	r2, [r9]
 8018502:	45b4      	cmp	ip, r6
 8018504:	da3e      	bge.n	8018584 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 8018506:	b2b6      	uxth	r6, r6
 8018508:	eba6 040c 	sub.w	r4, r6, ip
 801850c:	46b4      	mov	ip, r6
 801850e:	b2a4      	uxth	r4, r4
 8018510:	f04f 0b00 	mov.w	fp, #0
 8018514:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8018518:	3a01      	subs	r2, #1
 801851a:	b169      	cbz	r1, 8018538 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801851c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801851e:	458c      	cmp	ip, r1
 8018520:	da09      	bge.n	8018536 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8018522:	eba1 010c 	sub.w	r1, r1, ip
 8018526:	b289      	uxth	r1, r1
 8018528:	b933      	cbnz	r3, 8018538 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801852a:	f1bb 0f00 	cmp.w	fp, #0
 801852e:	d02b      	beq.n	8018588 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8018530:	b350      	cbz	r0, 8018588 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8018532:	440c      	add	r4, r1
 8018534:	b2a4      	uxth	r4, r4
 8018536:	2100      	movs	r1, #0
 8018538:	682b      	ldr	r3, [r5, #0]
 801853a:	4293      	cmp	r3, r2
 801853c:	da07      	bge.n	801854e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801853e:	f1ba 0f00 	cmp.w	sl, #0
 8018542:	d004      	beq.n	801854e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8018544:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 8018548:	682b      	ldr	r3, [r5, #0]
 801854a:	3301      	adds	r3, #1
 801854c:	602b      	str	r3, [r5, #0]
 801854e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8018552:	b354      	cbz	r4, 80185aa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8018554:	682e      	ldr	r6, [r5, #0]
 8018556:	3c01      	subs	r4, #1
 8018558:	42b2      	cmp	r2, r6
 801855a:	b2a4      	uxth	r4, r4
 801855c:	dd25      	ble.n	80185aa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801855e:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 8018562:	682b      	ldr	r3, [r5, #0]
 8018564:	3301      	adds	r3, #1
 8018566:	602b      	str	r3, [r5, #0]
 8018568:	e7f3      	b.n	8018552 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801856a:	2a73      	cmp	r2, #115	; 0x73
 801856c:	d003      	beq.n	8018576 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801856e:	2a78      	cmp	r2, #120	; 0x78
 8018570:	d0ba      	beq.n	80184e8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8018572:	2a6f      	cmp	r2, #111	; 0x6f
 8018574:	e7b7      	b.n	80184e6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 8018576:	2c00      	cmp	r4, #0
 8018578:	d0cc      	beq.n	8018514 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801857a:	42b0      	cmp	r0, r6
 801857c:	dd00      	ble.n	8018580 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801857e:	b2b0      	uxth	r0, r6
 8018580:	2400      	movs	r4, #0
 8018582:	e7c7      	b.n	8018514 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8018584:	2400      	movs	r4, #0
 8018586:	e7c3      	b.n	8018510 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 8018588:	2900      	cmp	r1, #0
 801858a:	d0d5      	beq.n	8018538 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801858c:	f04f 0c20 	mov.w	ip, #32
 8018590:	682e      	ldr	r6, [r5, #0]
 8018592:	2900      	cmp	r1, #0
 8018594:	d0d0      	beq.n	8018538 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8018596:	3901      	subs	r1, #1
 8018598:	4296      	cmp	r6, r2
 801859a:	b289      	uxth	r1, r1
 801859c:	dacb      	bge.n	8018536 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801859e:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 80185a2:	682b      	ldr	r3, [r5, #0]
 80185a4:	3301      	adds	r3, #1
 80185a6:	602b      	str	r3, [r5, #0]
 80185a8:	e7f2      	b.n	8018590 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 80185aa:	b198      	cbz	r0, 80185d4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80185ac:	f8d9 3000 	ldr.w	r3, [r9]
 80185b0:	881c      	ldrh	r4, [r3, #0]
 80185b2:	b17c      	cbz	r4, 80185d4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80185b4:	682c      	ldr	r4, [r5, #0]
 80185b6:	3801      	subs	r0, #1
 80185b8:	42a2      	cmp	r2, r4
 80185ba:	b280      	uxth	r0, r0
 80185bc:	dd0a      	ble.n	80185d4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80185be:	1c9c      	adds	r4, r3, #2
 80185c0:	f8c9 4000 	str.w	r4, [r9]
 80185c4:	881c      	ldrh	r4, [r3, #0]
 80185c6:	682b      	ldr	r3, [r5, #0]
 80185c8:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 80185cc:	682b      	ldr	r3, [r5, #0]
 80185ce:	3301      	adds	r3, #1
 80185d0:	602b      	str	r3, [r5, #0]
 80185d2:	e7ea      	b.n	80185aa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 80185d4:	2620      	movs	r6, #32
 80185d6:	b151      	cbz	r1, 80185ee <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 80185d8:	6828      	ldr	r0, [r5, #0]
 80185da:	3901      	subs	r1, #1
 80185dc:	4282      	cmp	r2, r0
 80185de:	b289      	uxth	r1, r1
 80185e0:	dd05      	ble.n	80185ee <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 80185e2:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 80185e6:	682b      	ldr	r3, [r5, #0]
 80185e8:	3301      	adds	r3, #1
 80185ea:	602b      	str	r3, [r5, #0]
 80185ec:	e7f3      	b.n	80185d6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 80185ee:	b005      	add	sp, #20
 80185f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080185f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 80185f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80185fa:	4604      	mov	r4, r0
 80185fc:	f04f 0801 	mov.w	r8, #1
 8018600:	2000      	movs	r0, #0
 8018602:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 8018606:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801860a:	8008      	strh	r0, [r1, #0]
 801860c:	7010      	strb	r0, [r2, #0]
 801860e:	7018      	strb	r0, [r3, #0]
 8018610:	f88c 0000 	strb.w	r0, [ip]
 8018614:	f88e 0000 	strb.w	r0, [lr]
 8018618:	7030      	strb	r0, [r6, #0]
 801861a:	6820      	ldr	r0, [r4, #0]
 801861c:	8800      	ldrh	r0, [r0, #0]
 801861e:	b190      	cbz	r0, 8018646 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8018620:	282b      	cmp	r0, #43	; 0x2b
 8018622:	d001      	beq.n	8018628 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 8018624:	2820      	cmp	r0, #32
 8018626:	d104      	bne.n	8018632 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 8018628:	8008      	strh	r0, [r1, #0]
 801862a:	6820      	ldr	r0, [r4, #0]
 801862c:	3002      	adds	r0, #2
 801862e:	6020      	str	r0, [r4, #0]
 8018630:	e7f3      	b.n	801861a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 8018632:	282d      	cmp	r0, #45	; 0x2d
 8018634:	d102      	bne.n	801863c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 8018636:	f882 8000 	strb.w	r8, [r2]
 801863a:	e7f6      	b.n	801862a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801863c:	2823      	cmp	r0, #35	; 0x23
 801863e:	d102      	bne.n	8018646 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8018640:	f883 8000 	strb.w	r8, [r3]
 8018644:	e7f1      	b.n	801862a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8018646:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801864a:	2b09      	cmp	r3, #9
 801864c:	d901      	bls.n	8018652 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801864e:	282a      	cmp	r0, #42	; 0x2a
 8018650:	d114      	bne.n	801867c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 8018652:	2201      	movs	r2, #1
 8018654:	f88e 2000 	strb.w	r2, [lr]
 8018658:	6823      	ldr	r3, [r4, #0]
 801865a:	8819      	ldrh	r1, [r3, #0]
 801865c:	2930      	cmp	r1, #48	; 0x30
 801865e:	bf02      	ittt	eq
 8018660:	3302      	addeq	r3, #2
 8018662:	6023      	streq	r3, [r4, #0]
 8018664:	f88c 2000 	strbeq.w	r2, [ip]
 8018668:	6820      	ldr	r0, [r4, #0]
 801866a:	8803      	ldrh	r3, [r0, #0]
 801866c:	2b2a      	cmp	r3, #42	; 0x2a
 801866e:	d11e      	bne.n	80186ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 8018670:	f04f 33ff 	mov.w	r3, #4294967295
 8018674:	603b      	str	r3, [r7, #0]
 8018676:	6823      	ldr	r3, [r4, #0]
 8018678:	3302      	adds	r3, #2
 801867a:	6023      	str	r3, [r4, #0]
 801867c:	6823      	ldr	r3, [r4, #0]
 801867e:	881b      	ldrh	r3, [r3, #0]
 8018680:	2b2e      	cmp	r3, #46	; 0x2e
 8018682:	d112      	bne.n	80186aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 8018684:	2301      	movs	r3, #1
 8018686:	7033      	strb	r3, [r6, #0]
 8018688:	6823      	ldr	r3, [r4, #0]
 801868a:	1c98      	adds	r0, r3, #2
 801868c:	6020      	str	r0, [r4, #0]
 801868e:	885b      	ldrh	r3, [r3, #2]
 8018690:	2b2a      	cmp	r3, #42	; 0x2a
 8018692:	d117      	bne.n	80186c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 8018694:	f04f 33ff 	mov.w	r3, #4294967295
 8018698:	602b      	str	r3, [r5, #0]
 801869a:	6823      	ldr	r3, [r4, #0]
 801869c:	3302      	adds	r3, #2
 801869e:	6023      	str	r3, [r4, #0]
 80186a0:	682b      	ldr	r3, [r5, #0]
 80186a2:	2b06      	cmp	r3, #6
 80186a4:	bfa8      	it	ge
 80186a6:	2306      	movge	r3, #6
 80186a8:	602b      	str	r3, [r5, #0]
 80186aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186ae:	f7ff fee2 	bl	8018476 <_ZN8touchgfx7Unicode4atoiEPKt>
 80186b2:	6038      	str	r0, [r7, #0]
 80186b4:	6823      	ldr	r3, [r4, #0]
 80186b6:	881a      	ldrh	r2, [r3, #0]
 80186b8:	3a30      	subs	r2, #48	; 0x30
 80186ba:	2a09      	cmp	r2, #9
 80186bc:	d8de      	bhi.n	801867c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 80186be:	3302      	adds	r3, #2
 80186c0:	6023      	str	r3, [r4, #0]
 80186c2:	e7f7      	b.n	80186b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 80186c4:	f7ff fed7 	bl	8018476 <_ZN8touchgfx7Unicode4atoiEPKt>
 80186c8:	6028      	str	r0, [r5, #0]
 80186ca:	6823      	ldr	r3, [r4, #0]
 80186cc:	881a      	ldrh	r2, [r3, #0]
 80186ce:	3a30      	subs	r2, #48	; 0x30
 80186d0:	2a09      	cmp	r2, #9
 80186d2:	d8e5      	bhi.n	80186a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 80186d4:	3302      	adds	r3, #2
 80186d6:	6023      	str	r3, [r4, #0]
 80186d8:	e7f7      	b.n	80186ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

080186da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 80186da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186de:	b0a2      	sub	sp, #136	; 0x88
 80186e0:	2500      	movs	r5, #0
 80186e2:	4606      	mov	r6, r0
 80186e4:	460f      	mov	r7, r1
 80186e6:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 80186ea:	9209      	str	r2, [sp, #36]	; 0x24
 80186ec:	4629      	mov	r1, r5
 80186ee:	2242      	movs	r2, #66	; 0x42
 80186f0:	4640      	mov	r0, r8
 80186f2:	461c      	mov	r4, r3
 80186f4:	950d      	str	r5, [sp, #52]	; 0x34
 80186f6:	f7fe fe26 	bl	8017346 <_ZN8touchgfx6memsetEPvhm>
 80186fa:	b30e      	cbz	r6, 8018740 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 80186fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186fe:	b1f3      	cbz	r3, 801873e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 8018700:	f107 3aff 	add.w	sl, r7, #4294967295
 8018704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018708:	8812      	ldrh	r2, [r2, #0]
 801870a:	2a00      	cmp	r2, #0
 801870c:	f000 80b3 	beq.w	8018876 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 8018710:	459a      	cmp	sl, r3
 8018712:	f340 80b0 	ble.w	8018876 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 8018716:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801871a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801871c:	f8b9 2000 	ldrh.w	r2, [r9]
 8018720:	2a00      	cmp	r2, #0
 8018722:	d0ef      	beq.n	8018704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8018724:	2a25      	cmp	r2, #37	; 0x25
 8018726:	f000 80aa 	beq.w	801887e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801872a:	459a      	cmp	sl, r3
 801872c:	ddea      	ble.n	8018704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801872e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8018732:	f109 0202 	add.w	r2, r9, #2
 8018736:	3301      	adds	r3, #1
 8018738:	9209      	str	r2, [sp, #36]	; 0x24
 801873a:	930d      	str	r3, [sp, #52]	; 0x34
 801873c:	e7eb      	b.n	8018716 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801873e:	8033      	strh	r3, [r6, #0]
 8018740:	4630      	mov	r0, r6
 8018742:	b022      	add	sp, #136	; 0x88
 8018744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018748:	3b63      	subs	r3, #99	; 0x63
 801874a:	2b01      	cmp	r3, #1
 801874c:	f200 80df 	bhi.w	801890e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 8018750:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018754:	8813      	ldrh	r3, [r2, #0]
 8018756:	2b69      	cmp	r3, #105	; 0x69
 8018758:	d058      	beq.n	801880c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801875a:	d81b      	bhi.n	8018794 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801875c:	2b63      	cmp	r3, #99	; 0x63
 801875e:	d02e      	beq.n	80187be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 8018760:	2b64      	cmp	r3, #100	; 0x64
 8018762:	d053      	beq.n	801880c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 8018764:	2b58      	cmp	r3, #88	; 0x58
 8018766:	d06f      	beq.n	8018848 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 8018768:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801876c:	46a1      	mov	r9, r4
 801876e:	e02d      	b.n	80187cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8018770:	2b73      	cmp	r3, #115	; 0x73
 8018772:	d0ed      	beq.n	8018750 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8018774:	d803      	bhi.n	801877e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 8018776:	2b6f      	cmp	r3, #111	; 0x6f
 8018778:	f040 80c9 	bne.w	801890e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801877c:	e7e8      	b.n	8018750 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801877e:	2b75      	cmp	r3, #117	; 0x75
 8018780:	d0e6      	beq.n	8018750 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8018782:	2b78      	cmp	r3, #120	; 0x78
 8018784:	e7f8      	b.n	8018778 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 8018786:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018788:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801878c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801878e:	3302      	adds	r3, #2
 8018790:	9309      	str	r3, [sp, #36]	; 0x24
 8018792:	e7b7      	b.n	8018704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8018794:	2b73      	cmp	r3, #115	; 0x73
 8018796:	d034      	beq.n	8018802 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 8018798:	d807      	bhi.n	80187aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801879a:	2b6f      	cmp	r3, #111	; 0x6f
 801879c:	d1e4      	bne.n	8018768 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801879e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80187a0:	f104 0904 	add.w	r9, r4, #4
 80187a4:	2308      	movs	r3, #8
 80187a6:	1aba      	subs	r2, r7, r2
 80187a8:	e048      	b.n	801883c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 80187aa:	2b75      	cmp	r3, #117	; 0x75
 80187ac:	d041      	beq.n	8018832 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 80187ae:	2b78      	cmp	r3, #120	; 0x78
 80187b0:	d1da      	bne.n	8018768 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 80187b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80187b4:	f104 0904 	add.w	r9, r4, #4
 80187b8:	2310      	movs	r3, #16
 80187ba:	1aba      	subs	r2, r7, r2
 80187bc:	e03e      	b.n	801883c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 80187be:	7823      	ldrb	r3, [r4, #0]
 80187c0:	f104 0904 	add.w	r9, r4, #4
 80187c4:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 80187c8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80187cc:	aa0d      	add	r2, sp, #52	; 0x34
 80187ce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80187d2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80187d6:	a810      	add	r0, sp, #64	; 0x40
 80187d8:	9205      	str	r2, [sp, #20]
 80187da:	464c      	mov	r4, r9
 80187dc:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80187e0:	9204      	str	r2, [sp, #16]
 80187e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80187e4:	9203      	str	r2, [sp, #12]
 80187e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80187ea:	9202      	str	r2, [sp, #8]
 80187ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80187ee:	9201      	str	r2, [sp, #4]
 80187f0:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80187f4:	e9cd 7606 	strd	r7, r6, [sp, #24]
 80187f8:	9200      	str	r2, [sp, #0]
 80187fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187fc:	f7ff fe4a 	bl	8018494 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8018800:	e7c4      	b.n	801878c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 8018802:	f104 0904 	add.w	r9, r4, #4
 8018806:	6823      	ldr	r3, [r4, #0]
 8018808:	9310      	str	r3, [sp, #64]	; 0x40
 801880a:	e7df      	b.n	80187cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801880c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801880e:	230a      	movs	r3, #10
 8018810:	4641      	mov	r1, r8
 8018812:	6820      	ldr	r0, [r4, #0]
 8018814:	1aba      	subs	r2, r7, r2
 8018816:	f104 0904 	add.w	r9, r4, #4
 801881a:	b292      	uxth	r2, r2
 801881c:	f7ff fdf9 	bl	8018412 <_ZN8touchgfx7Unicode4itoaElPtti>
 8018820:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018824:	2b2d      	cmp	r3, #45	; 0x2d
 8018826:	d1d1      	bne.n	80187cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8018828:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801882c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801882e:	3302      	adds	r3, #2
 8018830:	e7ea      	b.n	8018808 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 8018832:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018834:	f104 0904 	add.w	r9, r4, #4
 8018838:	230a      	movs	r3, #10
 801883a:	1aba      	subs	r2, r7, r2
 801883c:	b292      	uxth	r2, r2
 801883e:	4641      	mov	r1, r8
 8018840:	6820      	ldr	r0, [r4, #0]
 8018842:	f7ff fdc8 	bl	80183d6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8018846:	e7c1      	b.n	80187cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8018848:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801884a:	2310      	movs	r3, #16
 801884c:	4641      	mov	r1, r8
 801884e:	6820      	ldr	r0, [r4, #0]
 8018850:	1aba      	subs	r2, r7, r2
 8018852:	f104 0904 	add.w	r9, r4, #4
 8018856:	b292      	uxth	r2, r2
 8018858:	f7ff fdbd 	bl	80183d6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801885c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8018860:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8018864:	2b00      	cmp	r3, #0
 8018866:	d0b1      	beq.n	80187cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8018868:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801886c:	2919      	cmp	r1, #25
 801886e:	d8f7      	bhi.n	8018860 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8018870:	3b20      	subs	r3, #32
 8018872:	8013      	strh	r3, [r2, #0]
 8018874:	e7f4      	b.n	8018860 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8018876:	2200      	movs	r2, #0
 8018878:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801887c:	e760      	b.n	8018740 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801887e:	459a      	cmp	sl, r3
 8018880:	f77f af40 	ble.w	8018704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8018884:	f109 0302 	add.w	r3, r9, #2
 8018888:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801888c:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8018890:	a809      	add	r0, sp, #36	; 0x24
 8018892:	9309      	str	r3, [sp, #36]	; 0x24
 8018894:	ab0f      	add	r3, sp, #60	; 0x3c
 8018896:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801889a:	9304      	str	r3, [sp, #16]
 801889c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 80188a0:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 80188a4:	9303      	str	r3, [sp, #12]
 80188a6:	ab0e      	add	r3, sp, #56	; 0x38
 80188a8:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 80188ac:	9302      	str	r3, [sp, #8]
 80188ae:	ab0c      	add	r3, sp, #48	; 0x30
 80188b0:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 80188b4:	9301      	str	r3, [sp, #4]
 80188b6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80188ba:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 80188be:	9300      	str	r3, [sp, #0]
 80188c0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80188c4:	950e      	str	r5, [sp, #56]	; 0x38
 80188c6:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 80188ca:	950f      	str	r5, [sp, #60]	; 0x3c
 80188cc:	f7ff fe92 	bl	80185f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 80188d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	bfbf      	itttt	lt
 80188d8:	6823      	ldrlt	r3, [r4, #0]
 80188da:	3404      	addlt	r4, #4
 80188dc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80188e0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80188e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	bfbf      	itttt	lt
 80188e8:	6823      	ldrlt	r3, [r4, #0]
 80188ea:	3404      	addlt	r4, #4
 80188ec:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80188f0:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80188f2:	8813      	ldrh	r3, [r2, #0]
 80188f4:	2b69      	cmp	r3, #105	; 0x69
 80188f6:	f43f af2b 	beq.w	8018750 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 80188fa:	f63f af39 	bhi.w	8018770 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 80188fe:	2b58      	cmp	r3, #88	; 0x58
 8018900:	f43f af26 	beq.w	8018750 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8018904:	f63f af20 	bhi.w	8018748 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 8018908:	2b25      	cmp	r3, #37	; 0x25
 801890a:	f43f af3c 	beq.w	8018786 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801890e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018910:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018914:	f8b9 2000 	ldrh.w	r2, [r9]
 8018918:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801891c:	3301      	adds	r3, #1
 801891e:	930d      	str	r3, [sp, #52]	; 0x34
 8018920:	e734      	b.n	801878c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

08018924 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8018924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018926:	4605      	mov	r5, r0
 8018928:	b0a1      	sub	sp, #132	; 0x84
 801892a:	4610      	mov	r0, r2
 801892c:	460e      	mov	r6, r1
 801892e:	4614      	mov	r4, r2
 8018930:	461f      	mov	r7, r3
 8018932:	f7ff fd33 	bl	801839c <_ZN8touchgfx7Unicode6strlenEPKc>
 8018936:	283f      	cmp	r0, #63	; 0x3f
 8018938:	d906      	bls.n	8018948 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801893a:	4b0a      	ldr	r3, [pc, #40]	; (8018964 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801893c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8018940:	4a09      	ldr	r2, [pc, #36]	; (8018968 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 8018942:	480a      	ldr	r0, [pc, #40]	; (801896c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 8018944:	f009 ffac 	bl	80228a0 <__assert_func>
 8018948:	4621      	mov	r1, r4
 801894a:	2240      	movs	r2, #64	; 0x40
 801894c:	4668      	mov	r0, sp
 801894e:	f7ff fd31 	bl	80183b4 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018952:	463b      	mov	r3, r7
 8018954:	466a      	mov	r2, sp
 8018956:	4631      	mov	r1, r6
 8018958:	4628      	mov	r0, r5
 801895a:	f7ff febe 	bl	80186da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801895e:	b021      	add	sp, #132	; 0x84
 8018960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018962:	bf00      	nop
 8018964:	080269bd 	.word	0x080269bd
 8018968:	08026a8f 	.word	0x08026a8f
 801896c:	080269da 	.word	0x080269da

08018970 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8018970:	b40c      	push	{r2, r3}
 8018972:	b507      	push	{r0, r1, r2, lr}
 8018974:	ab04      	add	r3, sp, #16
 8018976:	f853 2b04 	ldr.w	r2, [r3], #4
 801897a:	9301      	str	r3, [sp, #4]
 801897c:	f7ff ffd2 	bl	8018924 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8018980:	b003      	add	sp, #12
 8018982:	f85d eb04 	ldr.w	lr, [sp], #4
 8018986:	b002      	add	sp, #8
 8018988:	4770      	bx	lr
	...

0801898c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801898c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018990:	b0c3      	sub	sp, #268	; 0x10c
 8018992:	2400      	movs	r4, #0
 8018994:	4606      	mov	r6, r0
 8018996:	4689      	mov	r9, r1
 8018998:	af10      	add	r7, sp, #64	; 0x40
 801899a:	9209      	str	r2, [sp, #36]	; 0x24
 801899c:	4621      	mov	r1, r4
 801899e:	22c8      	movs	r2, #200	; 0xc8
 80189a0:	4638      	mov	r0, r7
 80189a2:	469a      	mov	sl, r3
 80189a4:	940c      	str	r4, [sp, #48]	; 0x30
 80189a6:	f7fe fcce 	bl	8017346 <_ZN8touchgfx6memsetEPvhm>
 80189aa:	b116      	cbz	r6, 80189b2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 80189ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189ae:	b923      	cbnz	r3, 80189ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 80189b0:	8033      	strh	r3, [r6, #0]
 80189b2:	4630      	mov	r0, r6
 80189b4:	b043      	add	sp, #268	; 0x10c
 80189b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ba:	f109 3bff 	add.w	fp, r9, #4294967295
 80189be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80189c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80189c2:	8812      	ldrh	r2, [r2, #0]
 80189c4:	2a00      	cmp	r2, #0
 80189c6:	f000 80d1 	beq.w	8018b6c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 80189ca:	459b      	cmp	fp, r3
 80189cc:	f340 80ce 	ble.w	8018b6c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 80189d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80189d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80189d4:	882a      	ldrh	r2, [r5, #0]
 80189d6:	2a00      	cmp	r2, #0
 80189d8:	d0f1      	beq.n	80189be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 80189da:	2a25      	cmp	r2, #37	; 0x25
 80189dc:	f000 80ca 	beq.w	8018b74 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 80189e0:	459b      	cmp	fp, r3
 80189e2:	ddec      	ble.n	80189be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 80189e4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 80189e8:	3502      	adds	r5, #2
 80189ea:	3301      	adds	r3, #1
 80189ec:	9509      	str	r5, [sp, #36]	; 0x24
 80189ee:	930c      	str	r3, [sp, #48]	; 0x30
 80189f0:	e7ee      	b.n	80189d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 80189f2:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 80189f6:	3202      	adds	r2, #2
 80189f8:	920c      	str	r2, [sp, #48]	; 0x30
 80189fa:	e0ac      	b.n	8018b56 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 80189fc:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8018a00:	970f      	str	r7, [sp, #60]	; 0x3c
 8018a02:	3401      	adds	r4, #1
 8018a04:	edd3 7a00 	vldr	s15, [r3]
 8018a08:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8018a0c:	b923      	cbnz	r3, 8018a18 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 8018a0e:	2301      	movs	r3, #1
 8018a10:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8018a14:	2303      	movs	r3, #3
 8018a16:	930e      	str	r3, [sp, #56]	; 0x38
 8018a18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018a1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018a1e:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8018a22:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8018c20 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 8018a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a2a:	bf42      	ittt	mi
 8018a2c:	232d      	movmi	r3, #45	; 0x2d
 8018a2e:	eef1 7a67 	vnegmi.f32	s15, s15
 8018a32:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 8018a36:	2300      	movs	r3, #0
 8018a38:	4298      	cmp	r0, r3
 8018a3a:	dd03      	ble.n	8018a44 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 8018a3c:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8018a40:	3301      	adds	r3, #1
 8018a42:	e7f9      	b.n	8018a38 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 8018a44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018a48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018a4c:	eeb0 7a67 	vmov.f32	s14, s15
 8018a50:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8018a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a58:	da26      	bge.n	8018aa8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 8018a5a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8018a5e:	eba9 0202 	sub.w	r2, r9, r2
 8018a62:	2100      	movs	r1, #0
 8018a64:	eef4 6ae5 	vcmpe.f32	s13, s11
 8018a68:	b28d      	uxth	r5, r1
 8018a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a6e:	db21      	blt.n	8018ab4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 8018a70:	1a53      	subs	r3, r2, r1
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	dd1e      	ble.n	8018ab4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 8018a76:	2963      	cmp	r1, #99	; 0x63
 8018a78:	d01b      	beq.n	8018ab2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 8018a7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018a7e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8018a82:	ee17 3a10 	vmov	r3, s14
 8018a86:	2b09      	cmp	r3, #9
 8018a88:	bfa8      	it	ge
 8018a8a:	2309      	movge	r3, #9
 8018a8c:	ee07 3a10 	vmov	s14, r3
 8018a90:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8018a94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018a98:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 8018a9c:	3101      	adds	r1, #1
 8018a9e:	eee7 7a66 	vfms.f32	s15, s14, s13
 8018aa2:	eec6 6a86 	vdiv.f32	s13, s13, s12
 8018aa6:	e7dd      	b.n	8018a64 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 8018aa8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018aac:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8018ab0:	e7ce      	b.n	8018a50 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 8018ab2:	460d      	mov	r5, r1
 8018ab4:	2a63      	cmp	r2, #99	; 0x63
 8018ab6:	bfd4      	ite	le
 8018ab8:	ebc5 0202 	rsble	r2, r5, r2
 8018abc:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 8018ac0:	2a00      	cmp	r2, #0
 8018ac2:	dd4e      	ble.n	8018b62 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 8018ac4:	4603      	mov	r3, r0
 8018ac6:	f04f 0801 	mov.w	r8, #1
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	dd0e      	ble.n	8018aec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 8018ace:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018ad2:	210a      	movs	r1, #10
 8018ad4:	3b01      	subs	r3, #1
 8018ad6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018ada:	ee17 ca10 	vmov	ip, s14
 8018ade:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018ae2:	fb01 c808 	mla	r8, r1, r8, ip
 8018ae6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018aea:	e7ee      	b.n	8018aca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 8018aec:	2800      	cmp	r0, #0
 8018aee:	f100 33ff 	add.w	r3, r0, #4294967295
 8018af2:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8018af6:	bfac      	ite	ge
 8018af8:	1a18      	subge	r0, r3, r0
 8018afa:	4618      	movlt	r0, r3
 8018afc:	b292      	uxth	r2, r2
 8018afe:	230a      	movs	r3, #10
 8018b00:	900e      	str	r0, [sp, #56]	; 0x38
 8018b02:	1979      	adds	r1, r7, r5
 8018b04:	4640      	mov	r0, r8
 8018b06:	f7ff fc84 	bl	8018412 <_ZN8touchgfx7Unicode4itoaElPtti>
 8018b0a:	f1b8 0f01 	cmp.w	r8, #1
 8018b0e:	dc26      	bgt.n	8018b5e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 8018b10:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	bf0c      	ite	eq
 8018b18:	2300      	moveq	r3, #0
 8018b1a:	232e      	movne	r3, #46	; 0x2e
 8018b1c:	aa42      	add	r2, sp, #264	; 0x108
 8018b1e:	4415      	add	r5, r2
 8018b20:	aa0c      	add	r2, sp, #48	; 0x30
 8018b22:	f825 3cc8 	strh.w	r3, [r5, #-200]
 8018b26:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8018b2a:	a80f      	add	r0, sp, #60	; 0x3c
 8018b2c:	9205      	str	r2, [sp, #20]
 8018b2e:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8018b32:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8018b36:	9204      	str	r2, [sp, #16]
 8018b38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018b3a:	9203      	str	r2, [sp, #12]
 8018b3c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8018b40:	9202      	str	r2, [sp, #8]
 8018b42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018b44:	9201      	str	r2, [sp, #4]
 8018b46:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8018b4a:	e9cd 9606 	strd	r9, r6, [sp, #24]
 8018b4e:	9200      	str	r2, [sp, #0]
 8018b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018b52:	f7ff fc9f 	bl	8018494 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8018b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b58:	3302      	adds	r3, #2
 8018b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8018b5c:	e72f      	b.n	80189be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8018b5e:	232e      	movs	r3, #46	; 0x2e
 8018b60:	e7dc      	b.n	8018b1c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 8018b62:	ab42      	add	r3, sp, #264	; 0x108
 8018b64:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8018b68:	2300      	movs	r3, #0
 8018b6a:	e7d9      	b.n	8018b20 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 8018b6c:	2200      	movs	r2, #0
 8018b6e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8018b72:	e71e      	b.n	80189b2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 8018b74:	459b      	cmp	fp, r3
 8018b76:	f77f af22 	ble.w	80189be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8018b80:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8018b84:	a809      	add	r0, sp, #36	; 0x24
 8018b86:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8018b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018b8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018b92:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8018b96:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8018b9a:	930d      	str	r3, [sp, #52]	; 0x34
 8018b9c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8018ba0:	930e      	str	r3, [sp, #56]	; 0x38
 8018ba2:	1cab      	adds	r3, r5, #2
 8018ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8018ba6:	ab0e      	add	r3, sp, #56	; 0x38
 8018ba8:	9304      	str	r3, [sp, #16]
 8018baa:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8018bae:	9303      	str	r3, [sp, #12]
 8018bb0:	ab0d      	add	r3, sp, #52	; 0x34
 8018bb2:	9302      	str	r3, [sp, #8]
 8018bb4:	ab0b      	add	r3, sp, #44	; 0x2c
 8018bb6:	9301      	str	r3, [sp, #4]
 8018bb8:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8018bbc:	9300      	str	r3, [sp, #0]
 8018bbe:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8018bc2:	f7ff fd17 	bl	80185f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 8018bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	da0b      	bge.n	8018be4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 8018bcc:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8018bd0:	3401      	adds	r4, #1
 8018bd2:	edd3 7a00 	vldr	s15, [r3]
 8018bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018bda:	ee17 3a90 	vmov	r3, s15
 8018bde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018be2:	930d      	str	r3, [sp, #52]	; 0x34
 8018be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	da0b      	bge.n	8018c02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 8018bea:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8018bee:	3401      	adds	r4, #1
 8018bf0:	edd3 7a00 	vldr	s15, [r3]
 8018bf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018bf8:	ee17 3a90 	vmov	r3, s15
 8018bfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018c00:	930e      	str	r3, [sp, #56]	; 0x38
 8018c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018c06:	881b      	ldrh	r3, [r3, #0]
 8018c08:	2b25      	cmp	r3, #37	; 0x25
 8018c0a:	f43f aef2 	beq.w	80189f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 8018c0e:	2b66      	cmp	r3, #102	; 0x66
 8018c10:	f43f aef4 	beq.w	80189fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 8018c14:	9509      	str	r5, [sp, #36]	; 0x24
 8018c16:	882b      	ldrh	r3, [r5, #0]
 8018c18:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8018c1c:	3201      	adds	r2, #1
 8018c1e:	e6eb      	b.n	80189f8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 8018c20:	3f000002 	.word	0x3f000002

08018c24 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 8018c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c26:	4605      	mov	r5, r0
 8018c28:	b0a1      	sub	sp, #132	; 0x84
 8018c2a:	4610      	mov	r0, r2
 8018c2c:	460e      	mov	r6, r1
 8018c2e:	4614      	mov	r4, r2
 8018c30:	461f      	mov	r7, r3
 8018c32:	f7ff fbb3 	bl	801839c <_ZN8touchgfx7Unicode6strlenEPKc>
 8018c36:	283f      	cmp	r0, #63	; 0x3f
 8018c38:	d906      	bls.n	8018c48 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 8018c3a:	4b0a      	ldr	r3, [pc, #40]	; (8018c64 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 8018c3c:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8018c40:	4a09      	ldr	r2, [pc, #36]	; (8018c68 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 8018c42:	480a      	ldr	r0, [pc, #40]	; (8018c6c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 8018c44:	f009 fe2c 	bl	80228a0 <__assert_func>
 8018c48:	4621      	mov	r1, r4
 8018c4a:	2240      	movs	r2, #64	; 0x40
 8018c4c:	4668      	mov	r0, sp
 8018c4e:	f7ff fbb1 	bl	80183b4 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018c52:	463b      	mov	r3, r7
 8018c54:	466a      	mov	r2, sp
 8018c56:	4631      	mov	r1, r6
 8018c58:	4628      	mov	r0, r5
 8018c5a:	f7ff fe97 	bl	801898c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 8018c5e:	b021      	add	sp, #132	; 0x84
 8018c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c62:	bf00      	nop
 8018c64:	080269bd 	.word	0x080269bd
 8018c68:	08026a00 	.word	0x08026a00
 8018c6c:	080269da 	.word	0x080269da

08018c70 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8018c70:	4b01      	ldr	r3, [pc, #4]	; (8018c78 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8018c72:	6018      	str	r0, [r3, #0]
 8018c74:	4770      	bx	lr
 8018c76:	bf00      	nop
 8018c78:	2000b508 	.word	0x2000b508

08018c7c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8018c7c:	4b07      	ldr	r3, [pc, #28]	; (8018c9c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8018c7e:	881a      	ldrh	r2, [r3, #0]
 8018c80:	4282      	cmp	r2, r0
 8018c82:	d809      	bhi.n	8018c98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8018c84:	4b06      	ldr	r3, [pc, #24]	; (8018ca0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 8018c86:	881b      	ldrh	r3, [r3, #0]
 8018c88:	4413      	add	r3, r2
 8018c8a:	4298      	cmp	r0, r3
 8018c8c:	da04      	bge.n	8018c98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8018c8e:	4b05      	ldr	r3, [pc, #20]	; (8018ca4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018c96:	4770      	bx	lr
 8018c98:	2000      	movs	r0, #0
 8018c9a:	4770      	bx	lr
 8018c9c:	2000b528 	.word	0x2000b528
 8018ca0:	2000b52c 	.word	0x2000b52c
 8018ca4:	2000b50c 	.word	0x2000b50c

08018ca8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8018ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cac:	4d26      	ldr	r5, [pc, #152]	; (8018d48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8018cae:	682b      	ldr	r3, [r5, #0]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d046      	beq.n	8018d42 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8018cb4:	4a25      	ldr	r2, [pc, #148]	; (8018d4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8018cb6:	4f26      	ldr	r7, [pc, #152]	; (8018d50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8018cb8:	8810      	ldrh	r0, [r2, #0]
 8018cba:	883c      	ldrh	r4, [r7, #0]
 8018cbc:	4e25      	ldr	r6, [pc, #148]	; (8018d54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8018cbe:	4420      	add	r0, r4
 8018cc0:	1c42      	adds	r2, r0, #1
 8018cc2:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8018cc6:	f022 0201 	bic.w	r2, r2, #1
 8018cca:	0412      	lsls	r2, r2, #16
 8018ccc:	0c12      	lsrs	r2, r2, #16
 8018cce:	0051      	lsls	r1, r2, #1
 8018cd0:	220e      	movs	r2, #14
 8018cd2:	eb08 0e01 	add.w	lr, r8, r1
 8018cd6:	fb02 fc04 	mul.w	ip, r2, r4
 8018cda:	eb03 0208 	add.w	r2, r3, r8
 8018cde:	4c1e      	ldr	r4, [pc, #120]	; (8018d58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8018ce0:	6022      	str	r2, [r4, #0]
 8018ce2:	eb03 020e 	add.w	r2, r3, lr
 8018ce6:	44e6      	add	lr, ip
 8018ce8:	6032      	str	r2, [r6, #0]
 8018cea:	4473      	add	r3, lr
 8018cec:	4a1b      	ldr	r2, [pc, #108]	; (8018d5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8018cee:	6013      	str	r3, [r2, #0]
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	4a1b      	ldr	r2, [pc, #108]	; (8018d60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8018cf4:	8013      	strh	r3, [r2, #0]
 8018cf6:	4a1b      	ldr	r2, [pc, #108]	; (8018d64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8018cf8:	6812      	ldr	r2, [r2, #0]
 8018cfa:	eba2 0208 	sub.w	r2, r2, r8
 8018cfe:	1a52      	subs	r2, r2, r1
 8018d00:	4919      	ldr	r1, [pc, #100]	; (8018d68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8018d02:	eba2 020c 	sub.w	r2, r2, ip
 8018d06:	469c      	mov	ip, r3
 8018d08:	600a      	str	r2, [r1, #0]
 8018d0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018d0e:	4a17      	ldr	r2, [pc, #92]	; (8018d6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8018d10:	8013      	strh	r3, [r2, #0]
 8018d12:	4283      	cmp	r3, r0
 8018d14:	d10d      	bne.n	8018d32 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 8018d16:	883d      	ldrh	r5, [r7, #0]
 8018d18:	2300      	movs	r3, #0
 8018d1a:	6830      	ldr	r0, [r6, #0]
 8018d1c:	240e      	movs	r4, #14
 8018d1e:	429d      	cmp	r5, r3
 8018d20:	d90f      	bls.n	8018d42 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8018d22:	fb04 0203 	mla	r2, r4, r3, r0
 8018d26:	3301      	adds	r3, #1
 8018d28:	7b11      	ldrb	r1, [r2, #12]
 8018d2a:	f36f 1145 	bfc	r1, #5, #1
 8018d2e:	7311      	strb	r1, [r2, #12]
 8018d30:	e7f5      	b.n	8018d1e <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 8018d32:	682a      	ldr	r2, [r5, #0]
 8018d34:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8018d38:	6822      	ldr	r2, [r4, #0]
 8018d3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8018d3e:	3301      	adds	r3, #1
 8018d40:	e7e7      	b.n	8018d12 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 8018d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d46:	bf00      	nop
 8018d48:	2000b50c 	.word	0x2000b50c
 8018d4c:	2000b528 	.word	0x2000b528
 8018d50:	2000b52c 	.word	0x2000b52c
 8018d54:	2000b510 	.word	0x2000b510
 8018d58:	2000b520 	.word	0x2000b520
 8018d5c:	2000b518 	.word	0x2000b518
 8018d60:	2000b52a 	.word	0x2000b52a
 8018d64:	2000b514 	.word	0x2000b514
 8018d68:	2000b524 	.word	0x2000b524
 8018d6c:	2000b51c 	.word	0x2000b51c

08018d70 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8018d70:	4b10      	ldr	r3, [pc, #64]	; (8018db4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8018d72:	b510      	push	{r4, lr}
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	b9db      	cbnz	r3, 8018db0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8018d78:	b1d1      	cbz	r1, 8018db0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8018d7a:	4b0f      	ldr	r3, [pc, #60]	; (8018db8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8018d7c:	240e      	movs	r4, #14
 8018d7e:	801a      	strh	r2, [r3, #0]
 8018d80:	b292      	uxth	r2, r2
 8018d82:	4b0e      	ldr	r3, [pc, #56]	; (8018dbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8018d84:	881b      	ldrh	r3, [r3, #0]
 8018d86:	4413      	add	r3, r2
 8018d88:	4362      	muls	r2, r4
 8018d8a:	2406      	movs	r4, #6
 8018d8c:	fb04 2203 	mla	r2, r4, r3, r2
 8018d90:	428a      	cmp	r2, r1
 8018d92:	d305      	bcc.n	8018da0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8018d94:	4b0a      	ldr	r3, [pc, #40]	; (8018dc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8018d96:	2137      	movs	r1, #55	; 0x37
 8018d98:	4a0a      	ldr	r2, [pc, #40]	; (8018dc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8018d9a:	480b      	ldr	r0, [pc, #44]	; (8018dc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8018d9c:	f009 fd80 	bl	80228a0 <__assert_func>
 8018da0:	4b0a      	ldr	r3, [pc, #40]	; (8018dcc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8018da2:	6019      	str	r1, [r3, #0]
 8018da4:	4b0a      	ldr	r3, [pc, #40]	; (8018dd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8018da6:	6018      	str	r0, [r3, #0]
 8018da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018dac:	f7ff bf7c 	b.w	8018ca8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8018db0:	bd10      	pop	{r4, pc}
 8018db2:	bf00      	nop
 8018db4:	2000b518 	.word	0x2000b518
 8018db8:	2000b52c 	.word	0x2000b52c
 8018dbc:	2000b528 	.word	0x2000b528
 8018dc0:	08026b71 	.word	0x08026b71
 8018dc4:	08026bca 	.word	0x08026bca
 8018dc8:	08026b4c 	.word	0x08026b4c
 8018dcc:	2000b514 	.word	0x2000b514
 8018dd0:	2000b50c 	.word	0x2000b50c

08018dd4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8018dd4:	b470      	push	{r4, r5, r6}
 8018dd6:	4c07      	ldr	r4, [pc, #28]	; (8018df4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8018dd8:	4605      	mov	r5, r0
 8018dda:	4610      	mov	r0, r2
 8018ddc:	9a03      	ldr	r2, [sp, #12]
 8018dde:	6826      	ldr	r6, [r4, #0]
 8018de0:	b936      	cbnz	r6, 8018df0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8018de2:	6025      	str	r5, [r4, #0]
 8018de4:	4c04      	ldr	r4, [pc, #16]	; (8018df8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8018de6:	8021      	strh	r1, [r4, #0]
 8018de8:	4619      	mov	r1, r3
 8018dea:	bc70      	pop	{r4, r5, r6}
 8018dec:	f7ff bfc0 	b.w	8018d70 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8018df0:	bc70      	pop	{r4, r5, r6}
 8018df2:	4770      	bx	lr
 8018df4:	2000b530 	.word	0x2000b530
 8018df8:	2000b528 	.word	0x2000b528

08018dfc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8018dfc:	b508      	push	{r3, lr}
 8018dfe:	4b14      	ldr	r3, [pc, #80]	; (8018e50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018e00:	6819      	ldr	r1, [r3, #0]
 8018e02:	b931      	cbnz	r1, 8018e12 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8018e04:	4b13      	ldr	r3, [pc, #76]	; (8018e54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018e06:	f240 21e6 	movw	r1, #742	; 0x2e6
 8018e0a:	4a13      	ldr	r2, [pc, #76]	; (8018e58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018e0c:	4813      	ldr	r0, [pc, #76]	; (8018e5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8018e0e:	f009 fd47 	bl	80228a0 <__assert_func>
 8018e12:	4a13      	ldr	r2, [pc, #76]	; (8018e60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8018e14:	8803      	ldrh	r3, [r0, #0]
 8018e16:	8812      	ldrh	r2, [r2, #0]
 8018e18:	4293      	cmp	r3, r2
 8018e1a:	d204      	bcs.n	8018e26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8018e1c:	2214      	movs	r2, #20
 8018e1e:	fb02 1303 	mla	r3, r2, r3, r1
 8018e22:	8918      	ldrh	r0, [r3, #8]
 8018e24:	bd08      	pop	{r3, pc}
 8018e26:	490f      	ldr	r1, [pc, #60]	; (8018e64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8018e28:	8809      	ldrh	r1, [r1, #0]
 8018e2a:	4411      	add	r1, r2
 8018e2c:	428b      	cmp	r3, r1
 8018e2e:	da06      	bge.n	8018e3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8018e30:	1a9b      	subs	r3, r3, r2
 8018e32:	4a0d      	ldr	r2, [pc, #52]	; (8018e68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8018e34:	210e      	movs	r1, #14
 8018e36:	6812      	ldr	r2, [r2, #0]
 8018e38:	fb01 2303 	mla	r3, r1, r3, r2
 8018e3c:	e7f1      	b.n	8018e22 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8018e3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018e42:	4293      	cmp	r3, r2
 8018e44:	bf0a      	itet	eq
 8018e46:	4b09      	ldreq	r3, [pc, #36]	; (8018e6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8018e48:	2000      	movne	r0, #0
 8018e4a:	8818      	ldrheq	r0, [r3, #0]
 8018e4c:	e7ea      	b.n	8018e24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8018e4e:	bf00      	nop
 8018e50:	2000b530 	.word	0x2000b530
 8018e54:	0802588c 	.word	0x0802588c
 8018e58:	08026c77 	.word	0x08026c77
 8018e5c:	08026b4c 	.word	0x08026b4c
 8018e60:	2000b528 	.word	0x2000b528
 8018e64:	2000b52c 	.word	0x2000b52c
 8018e68:	2000b510 	.word	0x2000b510
 8018e6c:	2000b45c 	.word	0x2000b45c

08018e70 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018e70:	b508      	push	{r3, lr}
 8018e72:	4b14      	ldr	r3, [pc, #80]	; (8018ec4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8018e74:	6819      	ldr	r1, [r3, #0]
 8018e76:	b931      	cbnz	r1, 8018e86 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8018e78:	4b13      	ldr	r3, [pc, #76]	; (8018ec8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8018e7a:	f240 21fa 	movw	r1, #762	; 0x2fa
 8018e7e:	4a13      	ldr	r2, [pc, #76]	; (8018ecc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8018e80:	4813      	ldr	r0, [pc, #76]	; (8018ed0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8018e82:	f009 fd0d 	bl	80228a0 <__assert_func>
 8018e86:	4a13      	ldr	r2, [pc, #76]	; (8018ed4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8018e88:	8803      	ldrh	r3, [r0, #0]
 8018e8a:	8812      	ldrh	r2, [r2, #0]
 8018e8c:	4293      	cmp	r3, r2
 8018e8e:	d204      	bcs.n	8018e9a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8018e90:	2214      	movs	r2, #20
 8018e92:	fb02 1303 	mla	r3, r2, r3, r1
 8018e96:	8958      	ldrh	r0, [r3, #10]
 8018e98:	bd08      	pop	{r3, pc}
 8018e9a:	490f      	ldr	r1, [pc, #60]	; (8018ed8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8018e9c:	8809      	ldrh	r1, [r1, #0]
 8018e9e:	4411      	add	r1, r2
 8018ea0:	428b      	cmp	r3, r1
 8018ea2:	da06      	bge.n	8018eb2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8018ea4:	1a9b      	subs	r3, r3, r2
 8018ea6:	4a0d      	ldr	r2, [pc, #52]	; (8018edc <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8018ea8:	210e      	movs	r1, #14
 8018eaa:	6812      	ldr	r2, [r2, #0]
 8018eac:	fb01 2303 	mla	r3, r1, r3, r2
 8018eb0:	e7f1      	b.n	8018e96 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8018eb2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018eb6:	4293      	cmp	r3, r2
 8018eb8:	bf0a      	itet	eq
 8018eba:	4b09      	ldreq	r3, [pc, #36]	; (8018ee0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8018ebc:	2000      	movne	r0, #0
 8018ebe:	8818      	ldrheq	r0, [r3, #0]
 8018ec0:	e7ea      	b.n	8018e98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8018ec2:	bf00      	nop
 8018ec4:	2000b530 	.word	0x2000b530
 8018ec8:	0802588c 	.word	0x0802588c
 8018ecc:	08026ca3 	.word	0x08026ca3
 8018ed0:	08026b4c 	.word	0x08026b4c
 8018ed4:	2000b528 	.word	0x2000b528
 8018ed8:	2000b52c 	.word	0x2000b52c
 8018edc:	2000b510 	.word	0x2000b510
 8018ee0:	2000b45e 	.word	0x2000b45e

08018ee4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8018ee4:	4b23      	ldr	r3, [pc, #140]	; (8018f74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8018ee6:	b510      	push	{r4, lr}
 8018ee8:	681c      	ldr	r4, [r3, #0]
 8018eea:	b934      	cbnz	r4, 8018efa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8018eec:	4b22      	ldr	r3, [pc, #136]	; (8018f78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8018eee:	f240 310e 	movw	r1, #782	; 0x30e
 8018ef2:	4a22      	ldr	r2, [pc, #136]	; (8018f7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8018ef4:	4822      	ldr	r0, [pc, #136]	; (8018f80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8018ef6:	f009 fcd3 	bl	80228a0 <__assert_func>
 8018efa:	4a22      	ldr	r2, [pc, #136]	; (8018f84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8018efc:	880b      	ldrh	r3, [r1, #0]
 8018efe:	8812      	ldrh	r2, [r2, #0]
 8018f00:	4293      	cmp	r3, r2
 8018f02:	d211      	bcs.n	8018f28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8018f04:	2214      	movs	r2, #20
 8018f06:	fb02 4303 	mla	r3, r2, r3, r4
 8018f0a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8018f0e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8018f12:	8a1a      	ldrh	r2, [r3, #16]
 8018f14:	8a5b      	ldrh	r3, [r3, #18]
 8018f16:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018f1a:	8004      	strh	r4, [r0, #0]
 8018f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018f20:	8041      	strh	r1, [r0, #2]
 8018f22:	8082      	strh	r2, [r0, #4]
 8018f24:	80c3      	strh	r3, [r0, #6]
 8018f26:	e00e      	b.n	8018f46 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8018f28:	4917      	ldr	r1, [pc, #92]	; (8018f88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8018f2a:	8809      	ldrh	r1, [r1, #0]
 8018f2c:	4411      	add	r1, r2
 8018f2e:	428b      	cmp	r3, r1
 8018f30:	da0a      	bge.n	8018f48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8018f32:	1a9b      	subs	r3, r3, r2
 8018f34:	4a15      	ldr	r2, [pc, #84]	; (8018f8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8018f36:	210e      	movs	r1, #14
 8018f38:	6812      	ldr	r2, [r2, #0]
 8018f3a:	fb01 2303 	mla	r3, r1, r3, r2
 8018f3e:	681a      	ldr	r2, [r3, #0]
 8018f40:	6002      	str	r2, [r0, #0]
 8018f42:	685a      	ldr	r2, [r3, #4]
 8018f44:	6042      	str	r2, [r0, #4]
 8018f46:	bd10      	pop	{r4, pc}
 8018f48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018f4c:	4293      	cmp	r3, r2
 8018f4e:	d10b      	bne.n	8018f68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8018f50:	4b0f      	ldr	r3, [pc, #60]	; (8018f90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8018f52:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018f56:	4b0f      	ldr	r3, [pc, #60]	; (8018f94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8018f58:	8081      	strh	r1, [r0, #4]
 8018f5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f5e:	2300      	movs	r3, #0
 8018f60:	80c2      	strh	r2, [r0, #6]
 8018f62:	8003      	strh	r3, [r0, #0]
 8018f64:	8043      	strh	r3, [r0, #2]
 8018f66:	e7ee      	b.n	8018f46 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8018f68:	2300      	movs	r3, #0
 8018f6a:	8003      	strh	r3, [r0, #0]
 8018f6c:	8043      	strh	r3, [r0, #2]
 8018f6e:	8083      	strh	r3, [r0, #4]
 8018f70:	e7d8      	b.n	8018f24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8018f72:	bf00      	nop
 8018f74:	2000b530 	.word	0x2000b530
 8018f78:	0802588c 	.word	0x0802588c
 8018f7c:	08026c10 	.word	0x08026c10
 8018f80:	08026b4c 	.word	0x08026b4c
 8018f84:	2000b528 	.word	0x2000b528
 8018f88:	2000b52c 	.word	0x2000b52c
 8018f8c:	2000b510 	.word	0x2000b510
 8018f90:	2000b45c 	.word	0x2000b45c
 8018f94:	2000b45e 	.word	0x2000b45e

08018f98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8018f98:	4b18      	ldr	r3, [pc, #96]	; (8018ffc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	b34b      	cbz	r3, 8018ff2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8018f9e:	4a18      	ldr	r2, [pc, #96]	; (8019000 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8018fa0:	8800      	ldrh	r0, [r0, #0]
 8018fa2:	8812      	ldrh	r2, [r2, #0]
 8018fa4:	4290      	cmp	r0, r2
 8018fa6:	d211      	bcs.n	8018fcc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8018fa8:	2214      	movs	r2, #20
 8018faa:	fb02 3300 	mla	r3, r2, r0, r3
 8018fae:	8a1a      	ldrh	r2, [r3, #16]
 8018fb0:	8919      	ldrh	r1, [r3, #8]
 8018fb2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018fb6:	428a      	cmp	r2, r1
 8018fb8:	db1d      	blt.n	8018ff6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8018fba:	8a58      	ldrh	r0, [r3, #18]
 8018fbc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8018fc0:	895b      	ldrh	r3, [r3, #10]
 8018fc2:	4298      	cmp	r0, r3
 8018fc4:	bfac      	ite	ge
 8018fc6:	2000      	movge	r0, #0
 8018fc8:	2001      	movlt	r0, #1
 8018fca:	4770      	bx	lr
 8018fcc:	4b0d      	ldr	r3, [pc, #52]	; (8019004 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8018fce:	881b      	ldrh	r3, [r3, #0]
 8018fd0:	4413      	add	r3, r2
 8018fd2:	4298      	cmp	r0, r3
 8018fd4:	da0d      	bge.n	8018ff2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8018fd6:	4b0c      	ldr	r3, [pc, #48]	; (8019008 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8018fd8:	1a80      	subs	r0, r0, r2
 8018fda:	220e      	movs	r2, #14
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	fb02 3300 	mla	r3, r2, r0, r3
 8018fe2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8018fe6:	891a      	ldrh	r2, [r3, #8]
 8018fe8:	4291      	cmp	r1, r2
 8018fea:	db04      	blt.n	8018ff6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8018fec:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8018ff0:	e7e6      	b.n	8018fc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8018ff2:	2000      	movs	r0, #0
 8018ff4:	4770      	bx	lr
 8018ff6:	2001      	movs	r0, #1
 8018ff8:	4770      	bx	lr
 8018ffa:	bf00      	nop
 8018ffc:	2000b530 	.word	0x2000b530
 8019000:	2000b528 	.word	0x2000b528
 8019004:	2000b52c 	.word	0x2000b52c
 8019008:	2000b510 	.word	0x2000b510

0801900c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801900c:	b508      	push	{r3, lr}
 801900e:	4b12      	ldr	r3, [pc, #72]	; (8019058 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8019010:	6819      	ldr	r1, [r3, #0]
 8019012:	b931      	cbnz	r1, 8019022 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019014:	4b11      	ldr	r3, [pc, #68]	; (801905c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019016:	f240 3132 	movw	r1, #818	; 0x332
 801901a:	4a11      	ldr	r2, [pc, #68]	; (8019060 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801901c:	4811      	ldr	r0, [pc, #68]	; (8019064 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801901e:	f009 fc3f 	bl	80228a0 <__assert_func>
 8019022:	8803      	ldrh	r3, [r0, #0]
 8019024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019028:	4293      	cmp	r3, r2
 801902a:	d012      	beq.n	8019052 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801902c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019030:	4293      	cmp	r3, r2
 8019032:	d103      	bne.n	801903c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8019034:	4b0c      	ldr	r3, [pc, #48]	; (8019068 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801903a:	bd08      	pop	{r3, pc}
 801903c:	4a0b      	ldr	r2, [pc, #44]	; (801906c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801903e:	6812      	ldr	r2, [r2, #0]
 8019040:	b11a      	cbz	r2, 801904a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8019042:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019046:	2800      	cmp	r0, #0
 8019048:	d1f7      	bne.n	801903a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801904a:	2214      	movs	r2, #20
 801904c:	4353      	muls	r3, r2
 801904e:	58c8      	ldr	r0, [r1, r3]
 8019050:	e7f3      	b.n	801903a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019052:	2000      	movs	r0, #0
 8019054:	e7f1      	b.n	801903a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019056:	bf00      	nop
 8019058:	2000b530 	.word	0x2000b530
 801905c:	0802588c 	.word	0x0802588c
 8019060:	08026c46 	.word	0x08026c46
 8019064:	08026b4c 	.word	0x08026b4c
 8019068:	2000b468 	.word	0x2000b468
 801906c:	2000b50c 	.word	0x2000b50c

08019070 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019070:	8802      	ldrh	r2, [r0, #0]
 8019072:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8019076:	429a      	cmp	r2, r3
 8019078:	d840      	bhi.n	80190fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801907a:	4b21      	ldr	r3, [pc, #132]	; (8019100 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801907c:	881b      	ldrh	r3, [r3, #0]
 801907e:	429a      	cmp	r2, r3
 8019080:	d220      	bcs.n	80190c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8019082:	4b20      	ldr	r3, [pc, #128]	; (8019104 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8019084:	6819      	ldr	r1, [r3, #0]
 8019086:	2314      	movs	r3, #20
 8019088:	fb03 1302 	mla	r3, r3, r2, r1
 801908c:	6858      	ldr	r0, [r3, #4]
 801908e:	2800      	cmp	r0, #0
 8019090:	d035      	beq.n	80190fe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019092:	491d      	ldr	r1, [pc, #116]	; (8019108 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019094:	6809      	ldr	r1, [r1, #0]
 8019096:	2900      	cmp	r1, #0
 8019098:	d031      	beq.n	80190fe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801909a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801909e:	b371      	cbz	r1, 80190fe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80190a0:	895a      	ldrh	r2, [r3, #10]
 80190a2:	8918      	ldrh	r0, [r3, #8]
 80190a4:	4350      	muls	r0, r2
 80190a6:	7c5a      	ldrb	r2, [r3, #17]
 80190a8:	7cdb      	ldrb	r3, [r3, #19]
 80190aa:	0952      	lsrs	r2, r2, #5
 80190ac:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80190b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80190b4:	2b0b      	cmp	r3, #11
 80190b6:	bf18      	it	ne
 80190b8:	0040      	lslne	r0, r0, #1
 80190ba:	3003      	adds	r0, #3
 80190bc:	f020 0003 	bic.w	r0, r0, #3
 80190c0:	4408      	add	r0, r1
 80190c2:	4770      	bx	lr
 80190c4:	4911      	ldr	r1, [pc, #68]	; (801910c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80190c6:	8809      	ldrh	r1, [r1, #0]
 80190c8:	4419      	add	r1, r3
 80190ca:	428a      	cmp	r2, r1
 80190cc:	da16      	bge.n	80190fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80190ce:	4910      	ldr	r1, [pc, #64]	; (8019110 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80190d0:	1ad3      	subs	r3, r2, r3
 80190d2:	200e      	movs	r0, #14
 80190d4:	6809      	ldr	r1, [r1, #0]
 80190d6:	fb00 1303 	mla	r3, r0, r3, r1
 80190da:	7b19      	ldrb	r1, [r3, #12]
 80190dc:	f001 011f 	and.w	r1, r1, #31
 80190e0:	290b      	cmp	r1, #11
 80190e2:	d10b      	bne.n	80190fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80190e4:	8919      	ldrh	r1, [r3, #8]
 80190e6:	8958      	ldrh	r0, [r3, #10]
 80190e8:	4b07      	ldr	r3, [pc, #28]	; (8019108 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80190ea:	4348      	muls	r0, r1
 80190ec:	6819      	ldr	r1, [r3, #0]
 80190ee:	3003      	adds	r0, #3
 80190f0:	f020 0303 	bic.w	r3, r0, #3
 80190f4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80190f8:	4418      	add	r0, r3
 80190fa:	4770      	bx	lr
 80190fc:	2000      	movs	r0, #0
 80190fe:	4770      	bx	lr
 8019100:	2000b528 	.word	0x2000b528
 8019104:	2000b530 	.word	0x2000b530
 8019108:	2000b50c 	.word	0x2000b50c
 801910c:	2000b52c 	.word	0x2000b52c
 8019110:	2000b510 	.word	0x2000b510

08019114 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019114:	4b19      	ldr	r3, [pc, #100]	; (801917c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8019116:	6819      	ldr	r1, [r3, #0]
 8019118:	8803      	ldrh	r3, [r0, #0]
 801911a:	b1e9      	cbz	r1, 8019158 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801911c:	4a18      	ldr	r2, [pc, #96]	; (8019180 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801911e:	8812      	ldrh	r2, [r2, #0]
 8019120:	429a      	cmp	r2, r3
 8019122:	d90a      	bls.n	801913a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019124:	2214      	movs	r2, #20
 8019126:	fb02 1303 	mla	r3, r2, r3, r1
 801912a:	7c58      	ldrb	r0, [r3, #17]
 801912c:	0942      	lsrs	r2, r0, #5
 801912e:	7cd8      	ldrb	r0, [r3, #19]
 8019130:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019134:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019138:	4770      	bx	lr
 801913a:	4912      	ldr	r1, [pc, #72]	; (8019184 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801913c:	8809      	ldrh	r1, [r1, #0]
 801913e:	4411      	add	r1, r2
 8019140:	428b      	cmp	r3, r1
 8019142:	da09      	bge.n	8019158 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019144:	1a9b      	subs	r3, r3, r2
 8019146:	4a10      	ldr	r2, [pc, #64]	; (8019188 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8019148:	210e      	movs	r1, #14
 801914a:	6812      	ldr	r2, [r2, #0]
 801914c:	fb01 2303 	mla	r3, r1, r3, r2
 8019150:	7b18      	ldrb	r0, [r3, #12]
 8019152:	f000 001f 	and.w	r0, r0, #31
 8019156:	4770      	bx	lr
 8019158:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801915c:	4293      	cmp	r3, r2
 801915e:	d10a      	bne.n	8019176 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8019160:	4b0a      	ldr	r3, [pc, #40]	; (801918c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019168:	b10a      	cbz	r2, 801916e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801916a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801916c:	b900      	cbnz	r0, 8019170 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801916e:	6898      	ldr	r0, [r3, #8]
 8019170:	6803      	ldr	r3, [r0, #0]
 8019172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019174:	4718      	bx	r3
 8019176:	2000      	movs	r0, #0
 8019178:	4770      	bx	lr
 801917a:	bf00      	nop
 801917c:	2000b530 	.word	0x2000b530
 8019180:	2000b528 	.word	0x2000b528
 8019184:	2000b52c 	.word	0x2000b52c
 8019188:	2000b510 	.word	0x2000b510
 801918c:	2000b468 	.word	0x2000b468

08019190 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8019190:	2018      	movs	r0, #24
 8019192:	4770      	bx	lr

08019194 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8019194:	2001      	movs	r0, #1
 8019196:	4770      	bx	lr

08019198 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 8019198:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801919c:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 80191a0:	4770      	bx	lr

080191a2 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 80191a2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80191a6:	4770      	bx	lr

080191a8 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 80191a8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80191ac:	4770      	bx	lr

080191ae <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 80191ae:	b2c8      	uxtb	r0, r1
 80191b0:	4770      	bx	lr

080191b2 <_ZN8touchgfx8LCD24bpp4initEv>:
 80191b2:	4770      	bx	lr

080191b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80191b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191b8:	b085      	sub	sp, #20
 80191ba:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80191bc:	9203      	str	r2, [sp, #12]
 80191be:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80191c2:	6878      	ldr	r0, [r7, #4]
 80191c4:	9201      	str	r2, [sp, #4]
 80191c6:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80191c8:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 80191cc:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 80191d0:	fa1f fc84 	uxth.w	ip, r4
 80191d4:	43e4      	mvns	r4, r4
 80191d6:	9100      	str	r1, [sp, #0]
 80191d8:	b2e4      	uxtb	r4, r4
 80191da:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80191de:	fb00 2505 	mla	r5, r0, r5, r2
 80191e2:	683a      	ldr	r2, [r7, #0]
 80191e4:	6877      	ldr	r7, [r6, #4]
 80191e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80191ea:	3704      	adds	r7, #4
 80191ec:	4415      	add	r5, r2
 80191ee:	6832      	ldr	r2, [r6, #0]
 80191f0:	9202      	str	r2, [sp, #8]
 80191f2:	9a00      	ldr	r2, [sp, #0]
 80191f4:	2a00      	cmp	r2, #0
 80191f6:	dc03      	bgt.n	8019200 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 80191f8:	9a03      	ldr	r2, [sp, #12]
 80191fa:	2a00      	cmp	r2, #0
 80191fc:	f340 8116 	ble.w	801942c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8019200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019202:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019206:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019208:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801920c:	2b00      	cmp	r3, #0
 801920e:	dd0f      	ble.n	8019230 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8019210:	1406      	asrs	r6, r0, #16
 8019212:	d406      	bmi.n	8019222 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019214:	4546      	cmp	r6, r8
 8019216:	da04      	bge.n	8019222 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019218:	1416      	asrs	r6, r2, #16
 801921a:	d402      	bmi.n	8019222 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801921c:	9901      	ldr	r1, [sp, #4]
 801921e:	428e      	cmp	r6, r1
 8019220:	db07      	blt.n	8019232 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8019222:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019224:	3b01      	subs	r3, #1
 8019226:	3503      	adds	r5, #3
 8019228:	4408      	add	r0, r1
 801922a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801922c:	440a      	add	r2, r1
 801922e:	e7ed      	b.n	801920c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8019230:	d011      	beq.n	8019256 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8019232:	1e5e      	subs	r6, r3, #1
 8019234:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019236:	fb01 0e06 	mla	lr, r1, r6, r0
 801923a:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801923e:	d548      	bpl.n	80192d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8019240:	4699      	mov	r9, r3
 8019242:	462e      	mov	r6, r5
 8019244:	f1b9 0f00 	cmp.w	r9, #0
 8019248:	f300 809e 	bgt.w	8019388 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801924c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019250:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019254:	441d      	add	r5, r3
 8019256:	9b00      	ldr	r3, [sp, #0]
 8019258:	2b00      	cmp	r3, #0
 801925a:	f340 80e7 	ble.w	801942c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801925e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019264:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019268:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801926c:	eef0 6a62 	vmov.f32	s13, s5
 8019270:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019274:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019278:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801927c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8019280:	eef0 6a43 	vmov.f32	s13, s6
 8019284:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019288:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801928c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019290:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019294:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019298:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801929c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80192a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80192a4:	ee12 2a90 	vmov	r2, s5
 80192a8:	eef0 2a47 	vmov.f32	s5, s14
 80192ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80192b0:	ee13 2a10 	vmov	r2, s6
 80192b4:	9311      	str	r3, [sp, #68]	; 0x44
 80192b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192b8:	eeb0 3a67 	vmov.f32	s6, s15
 80192bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80192c0:	9312      	str	r3, [sp, #72]	; 0x48
 80192c2:	9b00      	ldr	r3, [sp, #0]
 80192c4:	9a03      	ldr	r2, [sp, #12]
 80192c6:	3b01      	subs	r3, #1
 80192c8:	9300      	str	r3, [sp, #0]
 80192ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192cc:	bf08      	it	eq
 80192ce:	4613      	moveq	r3, r2
 80192d0:	e78f      	b.n	80191f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 80192d2:	45c6      	cmp	lr, r8
 80192d4:	dab4      	bge.n	8019240 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80192d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80192d8:	fb01 2606 	mla	r6, r1, r6, r2
 80192dc:	1436      	asrs	r6, r6, #16
 80192de:	d4af      	bmi.n	8019240 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80192e0:	9901      	ldr	r1, [sp, #4]
 80192e2:	428e      	cmp	r6, r1
 80192e4:	daac      	bge.n	8019240 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80192e6:	1cee      	adds	r6, r5, #3
 80192e8:	4699      	mov	r9, r3
 80192ea:	f1b9 0f00 	cmp.w	r9, #0
 80192ee:	f106 0603 	add.w	r6, r6, #3
 80192f2:	ddab      	ble.n	801924c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80192f4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80192f8:	9902      	ldr	r1, [sp, #8]
 80192fa:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80192fe:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019302:	fb08 1e0e 	mla	lr, r8, lr, r1
 8019306:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019308:	fb1b fb04 	smulbb	fp, fp, r4
 801930c:	f109 39ff 	add.w	r9, r9, #4294967295
 8019310:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8019314:	4408      	add	r0, r1
 8019316:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019318:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801931c:	440a      	add	r2, r1
 801931e:	eb07 0a0e 	add.w	sl, r7, lr
 8019322:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019326:	fb0e be0c 	mla	lr, lr, ip, fp
 801932a:	fa1f fe8e 	uxth.w	lr, lr
 801932e:	f10e 0b01 	add.w	fp, lr, #1
 8019332:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019336:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801933a:	fb1b fb04 	smulbb	fp, fp, r4
 801933e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019342:	f806 ec06 	strb.w	lr, [r6, #-6]
 8019346:	f89a e001 	ldrb.w	lr, [sl, #1]
 801934a:	fb0e be0c 	mla	lr, lr, ip, fp
 801934e:	fa1f fe8e 	uxth.w	lr, lr
 8019352:	f10e 0b01 	add.w	fp, lr, #1
 8019356:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801935a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801935e:	f806 ec05 	strb.w	lr, [r6, #-5]
 8019362:	f89a e002 	ldrb.w	lr, [sl, #2]
 8019366:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801936a:	fb1a fa04 	smulbb	sl, sl, r4
 801936e:	fb0e ae0c 	mla	lr, lr, ip, sl
 8019372:	fa1f fe8e 	uxth.w	lr, lr
 8019376:	f10e 0a01 	add.w	sl, lr, #1
 801937a:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801937e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019382:	f806 ec04 	strb.w	lr, [r6, #-4]
 8019386:	e7b0      	b.n	80192ea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8019388:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801938c:	d446      	bmi.n	801941c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801938e:	45c2      	cmp	sl, r8
 8019390:	da44      	bge.n	801941c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8019392:	ea5f 4e22 	movs.w	lr, r2, asr #16
 8019396:	d441      	bmi.n	801941c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8019398:	9901      	ldr	r1, [sp, #4]
 801939a:	458e      	cmp	lr, r1
 801939c:	da3e      	bge.n	801941c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801939e:	9902      	ldr	r1, [sp, #8]
 80193a0:	f896 b000 	ldrb.w	fp, [r6]
 80193a4:	fb08 1e0e 	mla	lr, r8, lr, r1
 80193a8:	fb1b fb04 	smulbb	fp, fp, r4
 80193ac:	f81e e00a 	ldrb.w	lr, [lr, sl]
 80193b0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80193b4:	eb07 0a0e 	add.w	sl, r7, lr
 80193b8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80193bc:	fb0e be0c 	mla	lr, lr, ip, fp
 80193c0:	fa1f fe8e 	uxth.w	lr, lr
 80193c4:	f10e 0b01 	add.w	fp, lr, #1
 80193c8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80193cc:	f896 b001 	ldrb.w	fp, [r6, #1]
 80193d0:	fb1b fb04 	smulbb	fp, fp, r4
 80193d4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80193d8:	f886 e000 	strb.w	lr, [r6]
 80193dc:	f89a e001 	ldrb.w	lr, [sl, #1]
 80193e0:	fb0e be0c 	mla	lr, lr, ip, fp
 80193e4:	fa1f fe8e 	uxth.w	lr, lr
 80193e8:	f10e 0b01 	add.w	fp, lr, #1
 80193ec:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80193f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80193f4:	f886 e001 	strb.w	lr, [r6, #1]
 80193f8:	f89a e002 	ldrb.w	lr, [sl, #2]
 80193fc:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019400:	fb1a fa04 	smulbb	sl, sl, r4
 8019404:	fb0e ae0c 	mla	lr, lr, ip, sl
 8019408:	fa1f fe8e 	uxth.w	lr, lr
 801940c:	f10e 0a01 	add.w	sl, lr, #1
 8019410:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8019414:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019418:	f886 e002 	strb.w	lr, [r6, #2]
 801941c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801941e:	3603      	adds	r6, #3
 8019420:	f109 39ff 	add.w	r9, r9, #4294967295
 8019424:	4408      	add	r0, r1
 8019426:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019428:	440a      	add	r2, r1
 801942a:	e70b      	b.n	8019244 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801942c:	b005      	add	sp, #20
 801942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019432 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019432:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019436:	b085      	sub	sp, #20
 8019438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801943c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801943e:	9203      	str	r2, [sp, #12]
 8019440:	6870      	ldr	r0, [r6, #4]
 8019442:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8019444:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8019448:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801944c:	9101      	str	r1, [sp, #4]
 801944e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019452:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 8019456:	fb00 2404 	mla	r4, r0, r4, r2
 801945a:	6832      	ldr	r2, [r6, #0]
 801945c:	686e      	ldr	r6, [r5, #4]
 801945e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019462:	3604      	adds	r6, #4
 8019464:	4414      	add	r4, r2
 8019466:	682a      	ldr	r2, [r5, #0]
 8019468:	9202      	str	r2, [sp, #8]
 801946a:	9a01      	ldr	r2, [sp, #4]
 801946c:	2a00      	cmp	r2, #0
 801946e:	dc03      	bgt.n	8019478 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8019470:	9a03      	ldr	r2, [sp, #12]
 8019472:	2a00      	cmp	r2, #0
 8019474:	f340 80b2 	ble.w	80195dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8019478:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801947a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801947e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019480:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019484:	2b00      	cmp	r3, #0
 8019486:	dd0c      	ble.n	80194a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8019488:	1405      	asrs	r5, r0, #16
 801948a:	d405      	bmi.n	8019498 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801948c:	4575      	cmp	r5, lr
 801948e:	da03      	bge.n	8019498 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8019490:	1415      	asrs	r5, r2, #16
 8019492:	d401      	bmi.n	8019498 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8019494:	4545      	cmp	r5, r8
 8019496:	db05      	blt.n	80194a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8019498:	4460      	add	r0, ip
 801949a:	443a      	add	r2, r7
 801949c:	3b01      	subs	r3, #1
 801949e:	3403      	adds	r4, #3
 80194a0:	e7f0      	b.n	8019484 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 80194a2:	d03d      	beq.n	8019520 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80194a4:	1e5d      	subs	r5, r3, #1
 80194a6:	fb0c 0905 	mla	r9, ip, r5, r0
 80194aa:	ea5f 4929 	movs.w	r9, r9, asr #16
 80194ae:	d42c      	bmi.n	801950a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80194b0:	45f1      	cmp	r9, lr
 80194b2:	da2a      	bge.n	801950a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80194b4:	fb07 2505 	mla	r5, r7, r5, r2
 80194b8:	142d      	asrs	r5, r5, #16
 80194ba:	d426      	bmi.n	801950a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80194bc:	4545      	cmp	r5, r8
 80194be:	da24      	bge.n	801950a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80194c0:	1ce5      	adds	r5, r4, #3
 80194c2:	469a      	mov	sl, r3
 80194c4:	f1ba 0f00 	cmp.w	sl, #0
 80194c8:	f105 0503 	add.w	r5, r5, #3
 80194cc:	dd23      	ble.n	8019516 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80194ce:	ea4f 4922 	mov.w	r9, r2, asr #16
 80194d2:	9902      	ldr	r1, [sp, #8]
 80194d4:	ea4f 4b20 	mov.w	fp, r0, asr #16
 80194d8:	443a      	add	r2, r7
 80194da:	fb0e 1909 	mla	r9, lr, r9, r1
 80194de:	4460      	add	r0, ip
 80194e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80194e4:	f819 900b 	ldrb.w	r9, [r9, fp]
 80194e8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80194ec:	eb06 0b09 	add.w	fp, r6, r9
 80194f0:	f816 9009 	ldrb.w	r9, [r6, r9]
 80194f4:	f805 9c06 	strb.w	r9, [r5, #-6]
 80194f8:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80194fc:	f805 9c05 	strb.w	r9, [r5, #-5]
 8019500:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8019504:	f805 9c04 	strb.w	r9, [r5, #-4]
 8019508:	e7dc      	b.n	80194c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801950a:	2500      	movs	r5, #0
 801950c:	eba3 0905 	sub.w	r9, r3, r5
 8019510:	f1b9 0f00 	cmp.w	r9, #0
 8019514:	dc3c      	bgt.n	8019590 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 8019516:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801951a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801951e:	441c      	add	r4, r3
 8019520:	9b01      	ldr	r3, [sp, #4]
 8019522:	2b00      	cmp	r3, #0
 8019524:	dd5a      	ble.n	80195dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8019526:	ee30 0a04 	vadd.f32	s0, s0, s8
 801952a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801952c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019530:	eeb0 6a62 	vmov.f32	s12, s5
 8019534:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019538:	ee31 1a05 	vadd.f32	s2, s2, s10
 801953c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019540:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019544:	eeb0 6a43 	vmov.f32	s12, s6
 8019548:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801954c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019550:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019554:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019558:	ee77 2a62 	vsub.f32	s5, s14, s5
 801955c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019560:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019564:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019568:	ee12 2a90 	vmov	r2, s5
 801956c:	eef0 2a47 	vmov.f32	s5, s14
 8019570:	fb92 fcf3 	sdiv	ip, r2, r3
 8019574:	ee13 2a10 	vmov	r2, s6
 8019578:	eeb0 3a67 	vmov.f32	s6, s15
 801957c:	fb92 f7f3 	sdiv	r7, r2, r3
 8019580:	9b01      	ldr	r3, [sp, #4]
 8019582:	9a03      	ldr	r2, [sp, #12]
 8019584:	3b01      	subs	r3, #1
 8019586:	9301      	str	r3, [sp, #4]
 8019588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801958a:	bf08      	it	eq
 801958c:	4613      	moveq	r3, r2
 801958e:	e76c      	b.n	801946a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8019590:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8019594:	d41e      	bmi.n	80195d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8019596:	45f2      	cmp	sl, lr
 8019598:	da1c      	bge.n	80195d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801959a:	ea5f 4922 	movs.w	r9, r2, asr #16
 801959e:	d419      	bmi.n	80195d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80195a0:	45c1      	cmp	r9, r8
 80195a2:	da17      	bge.n	80195d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80195a4:	9902      	ldr	r1, [sp, #8]
 80195a6:	fb0e 1909 	mla	r9, lr, r9, r1
 80195aa:	f819 900a 	ldrb.w	r9, [r9, sl]
 80195ae:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80195b2:	f816 b009 	ldrb.w	fp, [r6, r9]
 80195b6:	eb06 0a09 	add.w	sl, r6, r9
 80195ba:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 80195be:	f804 b009 	strb.w	fp, [r4, r9]
 80195c2:	44a1      	add	r9, r4
 80195c4:	f89a b001 	ldrb.w	fp, [sl, #1]
 80195c8:	f889 b001 	strb.w	fp, [r9, #1]
 80195cc:	f89a a002 	ldrb.w	sl, [sl, #2]
 80195d0:	f889 a002 	strb.w	sl, [r9, #2]
 80195d4:	4460      	add	r0, ip
 80195d6:	443a      	add	r2, r7
 80195d8:	3501      	adds	r5, #1
 80195da:	e797      	b.n	801950c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80195dc:	b005      	add	sp, #20
 80195de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080195e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80195e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195e6:	b087      	sub	sp, #28
 80195e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80195ec:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80195ee:	9204      	str	r2, [sp, #16]
 80195f0:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80195f4:	6870      	ldr	r0, [r6, #4]
 80195f6:	9205      	str	r2, [sp, #20]
 80195f8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80195fa:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 80195fe:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8019602:	9101      	str	r1, [sp, #4]
 8019604:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8019608:	fb00 2505 	mla	r5, r0, r5, r2
 801960c:	6832      	ldr	r2, [r6, #0]
 801960e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019612:	4415      	add	r5, r2
 8019614:	6822      	ldr	r2, [r4, #0]
 8019616:	9202      	str	r2, [sp, #8]
 8019618:	6862      	ldr	r2, [r4, #4]
 801961a:	3204      	adds	r2, #4
 801961c:	9203      	str	r2, [sp, #12]
 801961e:	9a01      	ldr	r2, [sp, #4]
 8019620:	2a00      	cmp	r2, #0
 8019622:	dc03      	bgt.n	801962c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8019624:	9a04      	ldr	r2, [sp, #16]
 8019626:	2a00      	cmp	r2, #0
 8019628:	f340 8124 	ble.w	8019874 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801962c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801962e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019632:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019634:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019638:	2b00      	cmp	r3, #0
 801963a:	dd0e      	ble.n	801965a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801963c:	1422      	asrs	r2, r4, #16
 801963e:	d405      	bmi.n	801964c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019640:	4572      	cmp	r2, lr
 8019642:	da03      	bge.n	801964c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019644:	1402      	asrs	r2, r0, #16
 8019646:	d401      	bmi.n	801964c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019648:	4542      	cmp	r2, r8
 801964a:	db07      	blt.n	801965c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801964c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801964e:	3b01      	subs	r3, #1
 8019650:	3503      	adds	r5, #3
 8019652:	4414      	add	r4, r2
 8019654:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019656:	4410      	add	r0, r2
 8019658:	e7ee      	b.n	8019638 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801965a:	d010      	beq.n	801967e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801965c:	1e5a      	subs	r2, r3, #1
 801965e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019660:	fb06 4602 	mla	r6, r6, r2, r4
 8019664:	1436      	asrs	r6, r6, #16
 8019666:	d546      	bpl.n	80196f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8019668:	4699      	mov	r9, r3
 801966a:	462f      	mov	r7, r5
 801966c:	f1b9 0f00 	cmp.w	r9, #0
 8019670:	f300 80a5 	bgt.w	80197be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8019674:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019678:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801967c:	441d      	add	r5, r3
 801967e:	9b01      	ldr	r3, [sp, #4]
 8019680:	2b00      	cmp	r3, #0
 8019682:	f340 80f7 	ble.w	8019874 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8019686:	ee30 0a04 	vadd.f32	s0, s0, s8
 801968a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801968c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019690:	eeb0 6a62 	vmov.f32	s12, s5
 8019694:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019698:	ee31 1a05 	vadd.f32	s2, s2, s10
 801969c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80196a0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80196a4:	eeb0 6a43 	vmov.f32	s12, s6
 80196a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80196ac:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80196b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80196b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80196b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80196bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80196c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80196c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80196c8:	ee12 2a90 	vmov	r2, s5
 80196cc:	eef0 2a47 	vmov.f32	s5, s14
 80196d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80196d4:	ee13 2a10 	vmov	r2, s6
 80196d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80196da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80196dc:	eeb0 3a67 	vmov.f32	s6, s15
 80196e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80196e4:	9314      	str	r3, [sp, #80]	; 0x50
 80196e6:	9b01      	ldr	r3, [sp, #4]
 80196e8:	9a04      	ldr	r2, [sp, #16]
 80196ea:	3b01      	subs	r3, #1
 80196ec:	9301      	str	r3, [sp, #4]
 80196ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80196f0:	bf08      	it	eq
 80196f2:	4613      	moveq	r3, r2
 80196f4:	e793      	b.n	801961e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80196f6:	4576      	cmp	r6, lr
 80196f8:	dab6      	bge.n	8019668 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 80196fa:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80196fc:	fb06 0202 	mla	r2, r6, r2, r0
 8019700:	1412      	asrs	r2, r2, #16
 8019702:	d4b1      	bmi.n	8019668 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8019704:	4542      	cmp	r2, r8
 8019706:	daaf      	bge.n	8019668 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8019708:	1cef      	adds	r7, r5, #3
 801970a:	4699      	mov	r9, r3
 801970c:	f1b9 0f00 	cmp.w	r9, #0
 8019710:	ddb0      	ble.n	8019674 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8019712:	9902      	ldr	r1, [sp, #8]
 8019714:	1402      	asrs	r2, r0, #16
 8019716:	1426      	asrs	r6, r4, #16
 8019718:	fb0e 1202 	mla	r2, lr, r2, r1
 801971c:	9903      	ldr	r1, [sp, #12]
 801971e:	5d92      	ldrb	r2, [r2, r6]
 8019720:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8019724:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8019728:	d041      	beq.n	80197ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801972a:	9a05      	ldr	r2, [sp, #20]
 801972c:	fa5f fb86 	uxtb.w	fp, r6
 8019730:	fb02 fc0c 	mul.w	ip, r2, ip
 8019734:	f10c 0201 	add.w	r2, ip, #1
 8019738:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801973c:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8019740:	1212      	asrs	r2, r2, #8
 8019742:	fa1f fa82 	uxth.w	sl, r2
 8019746:	43d2      	mvns	r2, r2
 8019748:	fb1b fb0a 	smulbb	fp, fp, sl
 801974c:	b2d2      	uxtb	r2, r2
 801974e:	fb0c bc02 	mla	ip, ip, r2, fp
 8019752:	fa1f fc8c 	uxth.w	ip, ip
 8019756:	f10c 0b01 	add.w	fp, ip, #1
 801975a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801975e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8019762:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019766:	fb1b fb0a 	smulbb	fp, fp, sl
 801976a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801976e:	fb16 fa0a 	smulbb	sl, r6, sl
 8019772:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8019776:	f807 cc03 	strb.w	ip, [r7, #-3]
 801977a:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801977e:	fb06 aa02 	mla	sl, r6, r2, sl
 8019782:	fb0c bc02 	mla	ip, ip, r2, fp
 8019786:	fa1f fa8a 	uxth.w	sl, sl
 801978a:	fa1f fc8c 	uxth.w	ip, ip
 801978e:	f10a 0601 	add.w	r6, sl, #1
 8019792:	f10c 0b01 	add.w	fp, ip, #1
 8019796:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801979a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801979e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80197a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80197a6:	f807 ac01 	strb.w	sl, [r7, #-1]
 80197aa:	f807 cc02 	strb.w	ip, [r7, #-2]
 80197ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80197b0:	3703      	adds	r7, #3
 80197b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80197b6:	4414      	add	r4, r2
 80197b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80197ba:	4410      	add	r0, r2
 80197bc:	e7a6      	b.n	801970c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 80197be:	1426      	asrs	r6, r4, #16
 80197c0:	d450      	bmi.n	8019864 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80197c2:	4576      	cmp	r6, lr
 80197c4:	da4e      	bge.n	8019864 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80197c6:	1402      	asrs	r2, r0, #16
 80197c8:	d44c      	bmi.n	8019864 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80197ca:	4542      	cmp	r2, r8
 80197cc:	da4a      	bge.n	8019864 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80197ce:	9902      	ldr	r1, [sp, #8]
 80197d0:	fb0e 1202 	mla	r2, lr, r2, r1
 80197d4:	9903      	ldr	r1, [sp, #12]
 80197d6:	5d92      	ldrb	r2, [r2, r6]
 80197d8:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80197dc:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 80197e0:	d040      	beq.n	8019864 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80197e2:	9a05      	ldr	r2, [sp, #20]
 80197e4:	fa5f fb86 	uxtb.w	fp, r6
 80197e8:	fb02 fc0c 	mul.w	ip, r2, ip
 80197ec:	f10c 0201 	add.w	r2, ip, #1
 80197f0:	eb02 222c 	add.w	r2, r2, ip, asr #8
 80197f4:	f897 c000 	ldrb.w	ip, [r7]
 80197f8:	1212      	asrs	r2, r2, #8
 80197fa:	fa1f fa82 	uxth.w	sl, r2
 80197fe:	43d2      	mvns	r2, r2
 8019800:	fb1b fb0a 	smulbb	fp, fp, sl
 8019804:	b2d2      	uxtb	r2, r2
 8019806:	fb0c bc02 	mla	ip, ip, r2, fp
 801980a:	fa1f fc8c 	uxth.w	ip, ip
 801980e:	f10c 0b01 	add.w	fp, ip, #1
 8019812:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019816:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801981a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801981e:	fb1b fb0a 	smulbb	fp, fp, sl
 8019822:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019826:	fb16 fa0a 	smulbb	sl, r6, sl
 801982a:	78be      	ldrb	r6, [r7, #2]
 801982c:	f887 c000 	strb.w	ip, [r7]
 8019830:	f897 c001 	ldrb.w	ip, [r7, #1]
 8019834:	fb06 aa02 	mla	sl, r6, r2, sl
 8019838:	fb0c bc02 	mla	ip, ip, r2, fp
 801983c:	fa1f fa8a 	uxth.w	sl, sl
 8019840:	fa1f fc8c 	uxth.w	ip, ip
 8019844:	f10a 0601 	add.w	r6, sl, #1
 8019848:	f10c 0b01 	add.w	fp, ip, #1
 801984c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8019850:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019854:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019858:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801985c:	f887 a002 	strb.w	sl, [r7, #2]
 8019860:	f887 c001 	strb.w	ip, [r7, #1]
 8019864:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019866:	3703      	adds	r7, #3
 8019868:	f109 39ff 	add.w	r9, r9, #4294967295
 801986c:	4414      	add	r4, r2
 801986e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019870:	4410      	add	r0, r2
 8019872:	e6fb      	b.n	801966c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019874:	b007      	add	sp, #28
 8019876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801987a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801987a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801987e:	b085      	sub	sp, #20
 8019880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019884:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019886:	9203      	str	r2, [sp, #12]
 8019888:	6870      	ldr	r0, [r6, #4]
 801988a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801988c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8019890:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8019894:	9100      	str	r1, [sp, #0]
 8019896:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801989a:	fb00 2404 	mla	r4, r0, r4, r2
 801989e:	6832      	ldr	r2, [r6, #0]
 80198a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80198a4:	4414      	add	r4, r2
 80198a6:	682a      	ldr	r2, [r5, #0]
 80198a8:	9201      	str	r2, [sp, #4]
 80198aa:	686a      	ldr	r2, [r5, #4]
 80198ac:	3204      	adds	r2, #4
 80198ae:	9202      	str	r2, [sp, #8]
 80198b0:	9a00      	ldr	r2, [sp, #0]
 80198b2:	2a00      	cmp	r2, #0
 80198b4:	dc03      	bgt.n	80198be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80198b6:	9a03      	ldr	r2, [sp, #12]
 80198b8:	2a00      	cmp	r2, #0
 80198ba:	f340 8131 	ble.w	8019b20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 80198be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80198c0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80198c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80198c6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	dd0e      	ble.n	80198ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80198ce:	1405      	asrs	r5, r0, #16
 80198d0:	d405      	bmi.n	80198de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80198d2:	4575      	cmp	r5, lr
 80198d4:	da03      	bge.n	80198de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80198d6:	1415      	asrs	r5, r2, #16
 80198d8:	d401      	bmi.n	80198de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80198da:	4545      	cmp	r5, r8
 80198dc:	db07      	blt.n	80198ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80198de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80198e0:	3b01      	subs	r3, #1
 80198e2:	3403      	adds	r4, #3
 80198e4:	4428      	add	r0, r5
 80198e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80198e8:	442a      	add	r2, r5
 80198ea:	e7ee      	b.n	80198ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 80198ec:	d06f      	beq.n	80199ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 80198ee:	1e5d      	subs	r5, r3, #1
 80198f0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80198f2:	fb06 0605 	mla	r6, r6, r5, r0
 80198f6:	1436      	asrs	r6, r6, #16
 80198f8:	d460      	bmi.n	80199bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80198fa:	4576      	cmp	r6, lr
 80198fc:	da5e      	bge.n	80199bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80198fe:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019900:	fb06 2505 	mla	r5, r6, r5, r2
 8019904:	142d      	asrs	r5, r5, #16
 8019906:	d459      	bmi.n	80199bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8019908:	4545      	cmp	r5, r8
 801990a:	da57      	bge.n	80199bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801990c:	1ce5      	adds	r5, r4, #3
 801990e:	469a      	mov	sl, r3
 8019910:	f1ba 0f00 	cmp.w	sl, #0
 8019914:	dd56      	ble.n	80199c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 8019916:	9901      	ldr	r1, [sp, #4]
 8019918:	1416      	asrs	r6, r2, #16
 801991a:	1407      	asrs	r7, r0, #16
 801991c:	fb0e 1606 	mla	r6, lr, r6, r1
 8019920:	9902      	ldr	r1, [sp, #8]
 8019922:	5df6      	ldrb	r6, [r6, r7]
 8019924:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8019928:	0e37      	lsrs	r7, r6, #24
 801992a:	2fff      	cmp	r7, #255	; 0xff
 801992c:	f000 80ef 	beq.w	8019b0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8019930:	fa5f fc87 	uxtb.w	ip, r7
 8019934:	b3d7      	cbz	r7, 80199ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8019936:	fa1f f78c 	uxth.w	r7, ip
 801993a:	ea6f 0c0c 	mvn.w	ip, ip
 801993e:	fa5f fb86 	uxtb.w	fp, r6
 8019942:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8019946:	fa5f fc8c 	uxtb.w	ip, ip
 801994a:	fb1b fb07 	smulbb	fp, fp, r7
 801994e:	fb09 b90c 	mla	r9, r9, ip, fp
 8019952:	fa1f f989 	uxth.w	r9, r9
 8019956:	f109 0b01 	add.w	fp, r9, #1
 801995a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801995e:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8019962:	fb1b fb0c 	smulbb	fp, fp, ip
 8019966:	ea4f 2929 	mov.w	r9, r9, asr #8
 801996a:	f805 9c03 	strb.w	r9, [r5, #-3]
 801996e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8019972:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019976:	fb09 b907 	mla	r9, r9, r7, fp
 801997a:	fa1f f989 	uxth.w	r9, r9
 801997e:	f109 0b01 	add.w	fp, r9, #1
 8019982:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019986:	ea4f 2929 	mov.w	r9, r9, asr #8
 801998a:	f805 9c02 	strb.w	r9, [r5, #-2]
 801998e:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8019992:	fb19 fc0c 	smulbb	ip, r9, ip
 8019996:	fb06 c607 	mla	r6, r6, r7, ip
 801999a:	b2b6      	uxth	r6, r6
 801999c:	f106 0c01 	add.w	ip, r6, #1
 80199a0:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 80199a4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80199a8:	f805 cc01 	strb.w	ip, [r5, #-1]
 80199ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 80199ae:	3503      	adds	r5, #3
 80199b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80199b4:	4408      	add	r0, r1
 80199b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80199b8:	440a      	add	r2, r1
 80199ba:	e7a9      	b.n	8019910 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80199bc:	2600      	movs	r6, #0
 80199be:	1b9d      	subs	r5, r3, r6
 80199c0:	2d00      	cmp	r5, #0
 80199c2:	dc40      	bgt.n	8019a46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 80199c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80199c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80199cc:	441c      	add	r4, r3
 80199ce:	9b00      	ldr	r3, [sp, #0]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	f340 80a5 	ble.w	8019b20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 80199d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80199da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80199dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80199e0:	eeb0 6a62 	vmov.f32	s12, s5
 80199e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80199e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80199ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80199f0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80199f4:	eeb0 6a43 	vmov.f32	s12, s6
 80199f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80199fc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019a00:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019a04:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019a08:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019a0c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019a10:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019a14:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019a18:	ee12 2a90 	vmov	r2, s5
 8019a1c:	eef0 2a47 	vmov.f32	s5, s14
 8019a20:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a24:	ee13 2a10 	vmov	r2, s6
 8019a28:	9311      	str	r3, [sp, #68]	; 0x44
 8019a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a2c:	eeb0 3a67 	vmov.f32	s6, s15
 8019a30:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a34:	9312      	str	r3, [sp, #72]	; 0x48
 8019a36:	9b00      	ldr	r3, [sp, #0]
 8019a38:	9a03      	ldr	r2, [sp, #12]
 8019a3a:	3b01      	subs	r3, #1
 8019a3c:	9300      	str	r3, [sp, #0]
 8019a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a40:	bf08      	it	eq
 8019a42:	4613      	moveq	r3, r2
 8019a44:	e734      	b.n	80198b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8019a46:	1407      	asrs	r7, r0, #16
 8019a48:	d450      	bmi.n	8019aec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8019a4a:	4577      	cmp	r7, lr
 8019a4c:	da4e      	bge.n	8019aec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8019a4e:	1415      	asrs	r5, r2, #16
 8019a50:	d44c      	bmi.n	8019aec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8019a52:	4545      	cmp	r5, r8
 8019a54:	da4a      	bge.n	8019aec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8019a56:	9901      	ldr	r1, [sp, #4]
 8019a58:	fb0e 1505 	mla	r5, lr, r5, r1
 8019a5c:	9902      	ldr	r1, [sp, #8]
 8019a5e:	5ded      	ldrb	r5, [r5, r7]
 8019a60:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8019a64:	0e2f      	lsrs	r7, r5, #24
 8019a66:	2fff      	cmp	r7, #255	; 0xff
 8019a68:	d046      	beq.n	8019af8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8019a6a:	fa5f f987 	uxtb.w	r9, r7
 8019a6e:	b3ef      	cbz	r7, 8019aec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8019a70:	fa1f fc89 	uxth.w	ip, r9
 8019a74:	ea6f 0909 	mvn.w	r9, r9
 8019a78:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8019a7c:	fa5f fb85 	uxtb.w	fp, r5
 8019a80:	f814 a007 	ldrb.w	sl, [r4, r7]
 8019a84:	fa5f f989 	uxtb.w	r9, r9
 8019a88:	fb1b fb0c 	smulbb	fp, fp, ip
 8019a8c:	fb0a ba09 	mla	sl, sl, r9, fp
 8019a90:	fa1f fa8a 	uxth.w	sl, sl
 8019a94:	f10a 0b01 	add.w	fp, sl, #1
 8019a98:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8019a9c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019aa0:	f804 a007 	strb.w	sl, [r4, r7]
 8019aa4:	4427      	add	r7, r4
 8019aa6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019aaa:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8019aae:	f897 b001 	ldrb.w	fp, [r7, #1]
 8019ab2:	fb1b fb09 	smulbb	fp, fp, r9
 8019ab6:	fb0a ba0c 	mla	sl, sl, ip, fp
 8019aba:	fa1f fa8a 	uxth.w	sl, sl
 8019abe:	f10a 0b01 	add.w	fp, sl, #1
 8019ac2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8019ac6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019aca:	f887 a001 	strb.w	sl, [r7, #1]
 8019ace:	f897 a002 	ldrb.w	sl, [r7, #2]
 8019ad2:	fb1a f909 	smulbb	r9, sl, r9
 8019ad6:	fb05 950c 	mla	r5, r5, ip, r9
 8019ada:	b2ad      	uxth	r5, r5
 8019adc:	f105 0901 	add.w	r9, r5, #1
 8019ae0:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8019ae4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019ae8:	f887 9002 	strb.w	r9, [r7, #2]
 8019aec:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019aee:	3601      	adds	r6, #1
 8019af0:	4408      	add	r0, r1
 8019af2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019af4:	440a      	add	r2, r1
 8019af6:	e762      	b.n	80199be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8019af8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8019afc:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8019b00:	55e5      	strb	r5, [r4, r7]
 8019b02:	4427      	add	r7, r4
 8019b04:	0c2d      	lsrs	r5, r5, #16
 8019b06:	f887 c001 	strb.w	ip, [r7, #1]
 8019b0a:	70bd      	strb	r5, [r7, #2]
 8019b0c:	e7ee      	b.n	8019aec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8019b0e:	0a37      	lsrs	r7, r6, #8
 8019b10:	f805 6c03 	strb.w	r6, [r5, #-3]
 8019b14:	0c36      	lsrs	r6, r6, #16
 8019b16:	f805 7c02 	strb.w	r7, [r5, #-2]
 8019b1a:	f805 6c01 	strb.w	r6, [r5, #-1]
 8019b1e:	e745      	b.n	80199ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8019b20:	b005      	add	sp, #20
 8019b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b26 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019b26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b2a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019b2c:	9201      	str	r2, [sp, #4]
 8019b2e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8019b32:	6870      	ldr	r0, [r6, #4]
 8019b34:	9200      	str	r2, [sp, #0]
 8019b36:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8019b3a:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 8019b3e:	fa1f fc85 	uxth.w	ip, r5
 8019b42:	43ed      	mvns	r5, r5
 8019b44:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8019b48:	b2ed      	uxtb	r5, r5
 8019b4a:	fb00 2404 	mla	r4, r0, r4, r2
 8019b4e:	6832      	ldr	r2, [r6, #0]
 8019b50:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019b54:	4414      	add	r4, r2
 8019b56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019b58:	f8d2 8000 	ldr.w	r8, [r2]
 8019b5c:	2900      	cmp	r1, #0
 8019b5e:	dc03      	bgt.n	8019b68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8019b60:	9a01      	ldr	r2, [sp, #4]
 8019b62:	2a00      	cmp	r2, #0
 8019b64:	f340 8104 	ble.w	8019d70 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8019b68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019b6a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019b6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019b70:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	dd0f      	ble.n	8019b98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8019b78:	1406      	asrs	r6, r0, #16
 8019b7a:	d406      	bmi.n	8019b8a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8019b7c:	4576      	cmp	r6, lr
 8019b7e:	da04      	bge.n	8019b8a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8019b80:	1416      	asrs	r6, r2, #16
 8019b82:	d402      	bmi.n	8019b8a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8019b84:	9f00      	ldr	r7, [sp, #0]
 8019b86:	42be      	cmp	r6, r7
 8019b88:	db07      	blt.n	8019b9a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8019b8a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019b8c:	3b01      	subs	r3, #1
 8019b8e:	3403      	adds	r4, #3
 8019b90:	4430      	add	r0, r6
 8019b92:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8019b94:	4432      	add	r2, r6
 8019b96:	e7ed      	b.n	8019b74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8019b98:	d05f      	beq.n	8019c5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 8019b9a:	1e5e      	subs	r6, r3, #1
 8019b9c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019b9e:	fb07 0706 	mla	r7, r7, r6, r0
 8019ba2:	143f      	asrs	r7, r7, #16
 8019ba4:	d450      	bmi.n	8019c48 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8019ba6:	4577      	cmp	r7, lr
 8019ba8:	da4e      	bge.n	8019c48 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8019baa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019bac:	fb07 2606 	mla	r6, r7, r6, r2
 8019bb0:	1436      	asrs	r6, r6, #16
 8019bb2:	d449      	bmi.n	8019c48 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8019bb4:	9f00      	ldr	r7, [sp, #0]
 8019bb6:	42be      	cmp	r6, r7
 8019bb8:	da46      	bge.n	8019c48 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8019bba:	1ce6      	adds	r6, r4, #3
 8019bbc:	4699      	mov	r9, r3
 8019bbe:	f1b9 0f00 	cmp.w	r9, #0
 8019bc2:	f106 0603 	add.w	r6, r6, #3
 8019bc6:	dd43      	ble.n	8019c50 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 8019bc8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019bcc:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019bd0:	1417      	asrs	r7, r2, #16
 8019bd2:	f109 39ff 	add.w	r9, r9, #4294967295
 8019bd6:	fb1b fb05 	smulbb	fp, fp, r5
 8019bda:	fb0e a707 	mla	r7, lr, r7, sl
 8019bde:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019be2:	eb08 0a07 	add.w	sl, r8, r7
 8019be6:	f818 7007 	ldrb.w	r7, [r8, r7]
 8019bea:	fb07 b70c 	mla	r7, r7, ip, fp
 8019bee:	b2bf      	uxth	r7, r7
 8019bf0:	f107 0b01 	add.w	fp, r7, #1
 8019bf4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019bf8:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019bfc:	fb1b fb05 	smulbb	fp, fp, r5
 8019c00:	123f      	asrs	r7, r7, #8
 8019c02:	f806 7c06 	strb.w	r7, [r6, #-6]
 8019c06:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8019c0a:	fb07 b70c 	mla	r7, r7, ip, fp
 8019c0e:	b2bf      	uxth	r7, r7
 8019c10:	f107 0b01 	add.w	fp, r7, #1
 8019c14:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019c18:	123f      	asrs	r7, r7, #8
 8019c1a:	f806 7c05 	strb.w	r7, [r6, #-5]
 8019c1e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8019c22:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8019c26:	fb1a fa05 	smulbb	sl, sl, r5
 8019c2a:	fb07 a70c 	mla	r7, r7, ip, sl
 8019c2e:	b2bf      	uxth	r7, r7
 8019c30:	f107 0a01 	add.w	sl, r7, #1
 8019c34:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019c38:	123f      	asrs	r7, r7, #8
 8019c3a:	f806 7c04 	strb.w	r7, [r6, #-4]
 8019c3e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019c40:	4438      	add	r0, r7
 8019c42:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019c44:	443a      	add	r2, r7
 8019c46:	e7ba      	b.n	8019bbe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8019c48:	2700      	movs	r7, #0
 8019c4a:	1bde      	subs	r6, r3, r7
 8019c4c:	2e00      	cmp	r6, #0
 8019c4e:	dc3f      	bgt.n	8019cd0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8019c50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019c54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c58:	441c      	add	r4, r3
 8019c5a:	2900      	cmp	r1, #0
 8019c5c:	f340 8088 	ble.w	8019d70 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8019c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c66:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019c6a:	3901      	subs	r1, #1
 8019c6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019c70:	eef0 6a62 	vmov.f32	s13, s5
 8019c74:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019c78:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019c7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019c80:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8019c84:	eef0 6a43 	vmov.f32	s13, s6
 8019c88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019c8c:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8019c90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019c94:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019c98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019c9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019ca0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019ca4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019ca8:	ee12 2a90 	vmov	r2, s5
 8019cac:	eef0 2a47 	vmov.f32	s5, s14
 8019cb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8019cb4:	ee13 2a10 	vmov	r2, s6
 8019cb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8019cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019cbc:	eeb0 3a67 	vmov.f32	s6, s15
 8019cc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8019cc4:	9a01      	ldr	r2, [sp, #4]
 8019cc6:	9310      	str	r3, [sp, #64]	; 0x40
 8019cc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019cca:	bf08      	it	eq
 8019ccc:	4613      	moveq	r3, r2
 8019cce:	e745      	b.n	8019b5c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8019cd0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8019cd4:	d446      	bmi.n	8019d64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8019cd6:	45f2      	cmp	sl, lr
 8019cd8:	da44      	bge.n	8019d64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8019cda:	ea5f 4922 	movs.w	r9, r2, asr #16
 8019cde:	d441      	bmi.n	8019d64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8019ce0:	9e00      	ldr	r6, [sp, #0]
 8019ce2:	45b1      	cmp	r9, r6
 8019ce4:	da3e      	bge.n	8019d64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8019ce6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019cea:	fb0e a909 	mla	r9, lr, r9, sl
 8019cee:	f814 b006 	ldrb.w	fp, [r4, r6]
 8019cf2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019cf6:	fb1b fb05 	smulbb	fp, fp, r5
 8019cfa:	eb08 0a09 	add.w	sl, r8, r9
 8019cfe:	f818 9009 	ldrb.w	r9, [r8, r9]
 8019d02:	fb09 b90c 	mla	r9, r9, ip, fp
 8019d06:	fa1f f989 	uxth.w	r9, r9
 8019d0a:	f109 0b01 	add.w	fp, r9, #1
 8019d0e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019d12:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019d16:	f804 9006 	strb.w	r9, [r4, r6]
 8019d1a:	4426      	add	r6, r4
 8019d1c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8019d20:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019d24:	fb1b fb05 	smulbb	fp, fp, r5
 8019d28:	fb09 b90c 	mla	r9, r9, ip, fp
 8019d2c:	fa1f f989 	uxth.w	r9, r9
 8019d30:	f109 0b01 	add.w	fp, r9, #1
 8019d34:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019d38:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019d3c:	f886 9001 	strb.w	r9, [r6, #1]
 8019d40:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019d44:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019d48:	fb1a fa05 	smulbb	sl, sl, r5
 8019d4c:	fb09 a90c 	mla	r9, r9, ip, sl
 8019d50:	fa1f f989 	uxth.w	r9, r9
 8019d54:	f109 0a01 	add.w	sl, r9, #1
 8019d58:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8019d5c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019d60:	f886 9002 	strb.w	r9, [r6, #2]
 8019d64:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019d66:	3701      	adds	r7, #1
 8019d68:	4430      	add	r0, r6
 8019d6a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8019d6c:	4432      	add	r2, r6
 8019d6e:	e76c      	b.n	8019c4a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8019d70:	b003      	add	sp, #12
 8019d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d76 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019d76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d7a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019d7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019d80:	9201      	str	r2, [sp, #4]
 8019d82:	6868      	ldr	r0, [r5, #4]
 8019d84:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8019d88:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8019d8c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8019d90:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8019d94:	fb00 2404 	mla	r4, r0, r4, r2
 8019d98:	682a      	ldr	r2, [r5, #0]
 8019d9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019d9e:	4414      	add	r4, r2
 8019da0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019da2:	f8d2 9000 	ldr.w	r9, [r2]
 8019da6:	2900      	cmp	r1, #0
 8019da8:	dc03      	bgt.n	8019db2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8019daa:	9a01      	ldr	r2, [sp, #4]
 8019dac:	2a00      	cmp	r2, #0
 8019dae:	f340 80a8 	ble.w	8019f02 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8019db2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019db4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019db8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019dba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	dd0c      	ble.n	8019ddc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8019dc2:	1405      	asrs	r5, r0, #16
 8019dc4:	d405      	bmi.n	8019dd2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8019dc6:	4565      	cmp	r5, ip
 8019dc8:	da03      	bge.n	8019dd2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8019dca:	1415      	asrs	r5, r2, #16
 8019dcc:	d401      	bmi.n	8019dd2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8019dce:	4575      	cmp	r5, lr
 8019dd0:	db05      	blt.n	8019dde <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8019dd2:	4438      	add	r0, r7
 8019dd4:	4432      	add	r2, r6
 8019dd6:	3b01      	subs	r3, #1
 8019dd8:	3403      	adds	r4, #3
 8019dda:	e7f0      	b.n	8019dbe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8019ddc:	d03a      	beq.n	8019e54 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8019dde:	1e5d      	subs	r5, r3, #1
 8019de0:	fb07 0805 	mla	r8, r7, r5, r0
 8019de4:	ea5f 4828 	movs.w	r8, r8, asr #16
 8019de8:	d429      	bmi.n	8019e3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8019dea:	45e0      	cmp	r8, ip
 8019dec:	da27      	bge.n	8019e3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8019dee:	fb06 2505 	mla	r5, r6, r5, r2
 8019df2:	142d      	asrs	r5, r5, #16
 8019df4:	d423      	bmi.n	8019e3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8019df6:	4575      	cmp	r5, lr
 8019df8:	da21      	bge.n	8019e3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8019dfa:	f104 0803 	add.w	r8, r4, #3
 8019dfe:	469a      	mov	sl, r3
 8019e00:	f1ba 0f00 	cmp.w	sl, #0
 8019e04:	f108 0803 	add.w	r8, r8, #3
 8019e08:	dd1f      	ble.n	8019e4a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8019e0a:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8019e0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019e12:	1415      	asrs	r5, r2, #16
 8019e14:	4438      	add	r0, r7
 8019e16:	4432      	add	r2, r6
 8019e18:	fb0c b505 	mla	r5, ip, r5, fp
 8019e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019e20:	eb09 0b05 	add.w	fp, r9, r5
 8019e24:	f819 5005 	ldrb.w	r5, [r9, r5]
 8019e28:	f808 5c06 	strb.w	r5, [r8, #-6]
 8019e2c:	f89b 5001 	ldrb.w	r5, [fp, #1]
 8019e30:	f808 5c05 	strb.w	r5, [r8, #-5]
 8019e34:	f89b 5002 	ldrb.w	r5, [fp, #2]
 8019e38:	f808 5c04 	strb.w	r5, [r8, #-4]
 8019e3c:	e7e0      	b.n	8019e00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019e3e:	2500      	movs	r5, #0
 8019e40:	eba3 0805 	sub.w	r8, r3, r5
 8019e44:	f1b8 0f00 	cmp.w	r8, #0
 8019e48:	dc38      	bgt.n	8019ebc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 8019e4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e52:	441c      	add	r4, r3
 8019e54:	2900      	cmp	r1, #0
 8019e56:	dd54      	ble.n	8019f02 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8019e58:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019e5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019e5e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019e62:	3901      	subs	r1, #1
 8019e64:	eeb0 6a62 	vmov.f32	s12, s5
 8019e68:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019e6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019e70:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e74:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8019e78:	eeb0 6a43 	vmov.f32	s12, s6
 8019e7c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e80:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8019e84:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019e88:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019e8c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019e90:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019e94:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019e98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019e9c:	ee12 2a90 	vmov	r2, s5
 8019ea0:	eef0 2a47 	vmov.f32	s5, s14
 8019ea4:	fb92 f7f3 	sdiv	r7, r2, r3
 8019ea8:	ee13 2a10 	vmov	r2, s6
 8019eac:	eeb0 3a67 	vmov.f32	s6, s15
 8019eb0:	fb92 f6f3 	sdiv	r6, r2, r3
 8019eb4:	9a01      	ldr	r2, [sp, #4]
 8019eb6:	bf08      	it	eq
 8019eb8:	4613      	moveq	r3, r2
 8019eba:	e774      	b.n	8019da6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8019ebc:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8019ec0:	d41b      	bmi.n	8019efa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8019ec2:	45e2      	cmp	sl, ip
 8019ec4:	da19      	bge.n	8019efa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8019ec6:	ea5f 4822 	movs.w	r8, r2, asr #16
 8019eca:	d416      	bmi.n	8019efa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8019ecc:	45f0      	cmp	r8, lr
 8019ece:	da14      	bge.n	8019efa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8019ed0:	fb0c a808 	mla	r8, ip, r8, sl
 8019ed4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019ed8:	f819 b008 	ldrb.w	fp, [r9, r8]
 8019edc:	eb09 0a08 	add.w	sl, r9, r8
 8019ee0:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8019ee4:	f804 b008 	strb.w	fp, [r4, r8]
 8019ee8:	44a0      	add	r8, r4
 8019eea:	f89a b001 	ldrb.w	fp, [sl, #1]
 8019eee:	f888 b001 	strb.w	fp, [r8, #1]
 8019ef2:	f89a a002 	ldrb.w	sl, [sl, #2]
 8019ef6:	f888 a002 	strb.w	sl, [r8, #2]
 8019efa:	4438      	add	r0, r7
 8019efc:	4432      	add	r2, r6
 8019efe:	3501      	adds	r5, #1
 8019f00:	e79e      	b.n	8019e40 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8019f02:	b003      	add	sp, #12
 8019f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f08 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f0c:	b085      	sub	sp, #20
 8019f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019f12:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019f14:	9202      	str	r2, [sp, #8]
 8019f16:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019f1a:	6860      	ldr	r0, [r4, #4]
 8019f1c:	9203      	str	r2, [sp, #12]
 8019f1e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8019f22:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8019f26:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8019f2a:	fb00 2505 	mla	r5, r0, r5, r2
 8019f2e:	6822      	ldr	r2, [r4, #0]
 8019f30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f34:	4415      	add	r5, r2
 8019f36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019f38:	6812      	ldr	r2, [r2, #0]
 8019f3a:	9201      	str	r2, [sp, #4]
 8019f3c:	2900      	cmp	r1, #0
 8019f3e:	dc03      	bgt.n	8019f48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8019f40:	9a02      	ldr	r2, [sp, #8]
 8019f42:	2a00      	cmp	r2, #0
 8019f44:	f340 811c 	ble.w	801a180 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8019f48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019f4a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019f4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019f50:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	dd0e      	ble.n	8019f76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019f58:	1422      	asrs	r2, r4, #16
 8019f5a:	d405      	bmi.n	8019f68 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8019f5c:	4572      	cmp	r2, lr
 8019f5e:	da03      	bge.n	8019f68 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8019f60:	1402      	asrs	r2, r0, #16
 8019f62:	d401      	bmi.n	8019f68 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8019f64:	4542      	cmp	r2, r8
 8019f66:	db07      	blt.n	8019f78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8019f68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019f6a:	3b01      	subs	r3, #1
 8019f6c:	3503      	adds	r5, #3
 8019f6e:	4414      	add	r4, r2
 8019f70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019f72:	4410      	add	r0, r2
 8019f74:	e7ee      	b.n	8019f54 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8019f76:	d072      	beq.n	801a05e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 8019f78:	1e5a      	subs	r2, r3, #1
 8019f7a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019f7c:	fb06 4602 	mla	r6, r6, r2, r4
 8019f80:	1436      	asrs	r6, r6, #16
 8019f82:	d461      	bmi.n	801a048 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8019f84:	4576      	cmp	r6, lr
 8019f86:	da5f      	bge.n	801a048 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8019f88:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019f8a:	fb06 0202 	mla	r2, r6, r2, r0
 8019f8e:	1412      	asrs	r2, r2, #16
 8019f90:	d45a      	bmi.n	801a048 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8019f92:	4542      	cmp	r2, r8
 8019f94:	da58      	bge.n	801a048 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8019f96:	1cef      	adds	r7, r5, #3
 8019f98:	4699      	mov	r9, r3
 8019f9a:	f1b9 0f00 	cmp.w	r9, #0
 8019f9e:	dd59      	ble.n	801a054 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 8019fa0:	1426      	asrs	r6, r4, #16
 8019fa2:	1402      	asrs	r2, r0, #16
 8019fa4:	fb0e 6202 	mla	r2, lr, r2, r6
 8019fa8:	9e01      	ldr	r6, [sp, #4]
 8019faa:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8019fae:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8019fb2:	d041      	beq.n	801a038 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 8019fb4:	9a03      	ldr	r2, [sp, #12]
 8019fb6:	fa5f fb86 	uxtb.w	fp, r6
 8019fba:	fb02 fc0c 	mul.w	ip, r2, ip
 8019fbe:	f10c 0201 	add.w	r2, ip, #1
 8019fc2:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8019fc6:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8019fca:	1212      	asrs	r2, r2, #8
 8019fcc:	fa1f fa82 	uxth.w	sl, r2
 8019fd0:	43d2      	mvns	r2, r2
 8019fd2:	fb1b fb0a 	smulbb	fp, fp, sl
 8019fd6:	b2d2      	uxtb	r2, r2
 8019fd8:	fb0c bc02 	mla	ip, ip, r2, fp
 8019fdc:	fa1f fc8c 	uxth.w	ip, ip
 8019fe0:	f10c 0b01 	add.w	fp, ip, #1
 8019fe4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019fe8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8019fec:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019ff0:	fb1b fb0a 	smulbb	fp, fp, sl
 8019ff4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019ff8:	fb16 fa0a 	smulbb	sl, r6, sl
 8019ffc:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801a000:	f807 cc03 	strb.w	ip, [r7, #-3]
 801a004:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801a008:	fb06 aa02 	mla	sl, r6, r2, sl
 801a00c:	fb0c bc02 	mla	ip, ip, r2, fp
 801a010:	fa1f fa8a 	uxth.w	sl, sl
 801a014:	fa1f fc8c 	uxth.w	ip, ip
 801a018:	f10a 0601 	add.w	r6, sl, #1
 801a01c:	f10c 0b01 	add.w	fp, ip, #1
 801a020:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a024:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a028:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a02c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a030:	f807 ac01 	strb.w	sl, [r7, #-1]
 801a034:	f807 cc02 	strb.w	ip, [r7, #-2]
 801a038:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a03a:	3703      	adds	r7, #3
 801a03c:	f109 39ff 	add.w	r9, r9, #4294967295
 801a040:	4414      	add	r4, r2
 801a042:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a044:	4410      	add	r0, r2
 801a046:	e7a8      	b.n	8019f9a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801a048:	f04f 0c00 	mov.w	ip, #0
 801a04c:	eba3 020c 	sub.w	r2, r3, ip
 801a050:	2a00      	cmp	r2, #0
 801a052:	dc3d      	bgt.n	801a0d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801a054:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a058:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a05c:	441d      	add	r5, r3
 801a05e:	2900      	cmp	r1, #0
 801a060:	f340 808e 	ble.w	801a180 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801a064:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a06a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a06e:	3901      	subs	r1, #1
 801a070:	eeb0 6a62 	vmov.f32	s12, s5
 801a074:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a078:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a07c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a080:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a084:	eeb0 6a43 	vmov.f32	s12, s6
 801a088:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a08c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a090:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a094:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a098:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a09c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a0a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a0a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a0a8:	ee12 2a90 	vmov	r2, s5
 801a0ac:	eef0 2a47 	vmov.f32	s5, s14
 801a0b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a0b4:	ee13 2a10 	vmov	r2, s6
 801a0b8:	9311      	str	r3, [sp, #68]	; 0x44
 801a0ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0bc:	eeb0 3a67 	vmov.f32	s6, s15
 801a0c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a0c4:	9a02      	ldr	r2, [sp, #8]
 801a0c6:	9312      	str	r3, [sp, #72]	; 0x48
 801a0c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0ca:	bf08      	it	eq
 801a0cc:	4613      	moveq	r3, r2
 801a0ce:	e735      	b.n	8019f3c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801a0d0:	1426      	asrs	r6, r4, #16
 801a0d2:	d44e      	bmi.n	801a172 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a0d4:	4576      	cmp	r6, lr
 801a0d6:	da4c      	bge.n	801a172 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a0d8:	1402      	asrs	r2, r0, #16
 801a0da:	d44a      	bmi.n	801a172 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a0dc:	4542      	cmp	r2, r8
 801a0de:	da48      	bge.n	801a172 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a0e0:	fb0e 6202 	mla	r2, lr, r2, r6
 801a0e4:	9e01      	ldr	r6, [sp, #4]
 801a0e6:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801a0ea:	0e3a      	lsrs	r2, r7, #24
 801a0ec:	d041      	beq.n	801a172 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a0ee:	9e03      	ldr	r6, [sp, #12]
 801a0f0:	fa5f fb87 	uxtb.w	fp, r7
 801a0f4:	4372      	muls	r2, r6
 801a0f6:	1c56      	adds	r6, r2, #1
 801a0f8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a0fc:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801a100:	1212      	asrs	r2, r2, #8
 801a102:	f815 9006 	ldrb.w	r9, [r5, r6]
 801a106:	fa1f fa82 	uxth.w	sl, r2
 801a10a:	43d2      	mvns	r2, r2
 801a10c:	fb1b fb0a 	smulbb	fp, fp, sl
 801a110:	b2d2      	uxtb	r2, r2
 801a112:	fb09 b902 	mla	r9, r9, r2, fp
 801a116:	fa1f f989 	uxth.w	r9, r9
 801a11a:	f109 0b01 	add.w	fp, r9, #1
 801a11e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a122:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a126:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a12a:	fb1b fb0a 	smulbb	fp, fp, sl
 801a12e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a132:	fb17 fa0a 	smulbb	sl, r7, sl
 801a136:	f805 9006 	strb.w	r9, [r5, r6]
 801a13a:	442e      	add	r6, r5
 801a13c:	78b7      	ldrb	r7, [r6, #2]
 801a13e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801a142:	fb07 aa02 	mla	sl, r7, r2, sl
 801a146:	fb09 b902 	mla	r9, r9, r2, fp
 801a14a:	fa1f fa8a 	uxth.w	sl, sl
 801a14e:	fa1f f989 	uxth.w	r9, r9
 801a152:	f10a 0701 	add.w	r7, sl, #1
 801a156:	f109 0b01 	add.w	fp, r9, #1
 801a15a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a15e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a162:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a166:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a16a:	f886 a002 	strb.w	sl, [r6, #2]
 801a16e:	f886 9001 	strb.w	r9, [r6, #1]
 801a172:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a174:	f10c 0c01 	add.w	ip, ip, #1
 801a178:	4414      	add	r4, r2
 801a17a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a17c:	4410      	add	r0, r2
 801a17e:	e765      	b.n	801a04c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801a180:	b005      	add	sp, #20
 801a182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a186 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a18a:	b085      	sub	sp, #20
 801a18c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a190:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a192:	9203      	str	r2, [sp, #12]
 801a194:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801a198:	6860      	ldr	r0, [r4, #4]
 801a19a:	9201      	str	r2, [sp, #4]
 801a19c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801a1a0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801a1a4:	fb00 2505 	mla	r5, r0, r5, r2
 801a1a8:	6822      	ldr	r2, [r4, #0]
 801a1aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a1ae:	4415      	add	r5, r2
 801a1b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a1b2:	6812      	ldr	r2, [r2, #0]
 801a1b4:	9202      	str	r2, [sp, #8]
 801a1b6:	2900      	cmp	r1, #0
 801a1b8:	dc03      	bgt.n	801a1c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801a1ba:	9a03      	ldr	r2, [sp, #12]
 801a1bc:	2a00      	cmp	r2, #0
 801a1be:	f340 8122 	ble.w	801a406 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801a1c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a1c4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a1c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a1ca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	dd0f      	ble.n	801a1f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a1d2:	1422      	asrs	r2, r4, #16
 801a1d4:	d406      	bmi.n	801a1e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801a1d6:	4572      	cmp	r2, lr
 801a1d8:	da04      	bge.n	801a1e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801a1da:	1402      	asrs	r2, r0, #16
 801a1dc:	d402      	bmi.n	801a1e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801a1de:	9e01      	ldr	r6, [sp, #4]
 801a1e0:	42b2      	cmp	r2, r6
 801a1e2:	db07      	blt.n	801a1f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a1e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a1e6:	3b01      	subs	r3, #1
 801a1e8:	3503      	adds	r5, #3
 801a1ea:	4414      	add	r4, r2
 801a1ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a1ee:	4410      	add	r0, r2
 801a1f0:	e7ed      	b.n	801a1ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801a1f2:	d06e      	beq.n	801a2d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801a1f4:	1e5a      	subs	r2, r3, #1
 801a1f6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a1f8:	fb06 4602 	mla	r6, r6, r2, r4
 801a1fc:	1436      	asrs	r6, r6, #16
 801a1fe:	d45d      	bmi.n	801a2bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801a200:	4576      	cmp	r6, lr
 801a202:	da5b      	bge.n	801a2bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801a204:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a206:	fb06 0202 	mla	r2, r6, r2, r0
 801a20a:	1412      	asrs	r2, r2, #16
 801a20c:	d456      	bmi.n	801a2bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801a20e:	9e01      	ldr	r6, [sp, #4]
 801a210:	42b2      	cmp	r2, r6
 801a212:	da53      	bge.n	801a2bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801a214:	1cee      	adds	r6, r5, #3
 801a216:	469a      	mov	sl, r3
 801a218:	f1ba 0f00 	cmp.w	sl, #0
 801a21c:	dd54      	ble.n	801a2c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a21e:	1427      	asrs	r7, r4, #16
 801a220:	1402      	asrs	r2, r0, #16
 801a222:	fb0e 7202 	mla	r2, lr, r2, r7
 801a226:	9f02      	ldr	r7, [sp, #8]
 801a228:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801a22c:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801a230:	d03c      	beq.n	801a2ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801a232:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a236:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a23a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801a23e:	fa5f f28c 	uxtb.w	r2, ip
 801a242:	b2ff      	uxtb	r7, r7
 801a244:	f000 80d8 	beq.w	801a3f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a248:	fa1f f882 	uxth.w	r8, r2
 801a24c:	43d2      	mvns	r2, r2
 801a24e:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801a252:	fb17 f708 	smulbb	r7, r7, r8
 801a256:	b2d2      	uxtb	r2, r2
 801a258:	fb19 f908 	smulbb	r9, r9, r8
 801a25c:	fb0c 7702 	mla	r7, ip, r2, r7
 801a260:	fb1b f808 	smulbb	r8, fp, r8
 801a264:	b2bf      	uxth	r7, r7
 801a266:	f107 0c01 	add.w	ip, r7, #1
 801a26a:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801a26e:	123f      	asrs	r7, r7, #8
 801a270:	f806 7c03 	strb.w	r7, [r6, #-3]
 801a274:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801a278:	fb07 9902 	mla	r9, r7, r2, r9
 801a27c:	fa1f f989 	uxth.w	r9, r9
 801a280:	f109 0701 	add.w	r7, r9, #1
 801a284:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801a288:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801a28c:	fb07 8802 	mla	r8, r7, r2, r8
 801a290:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a294:	fa1f f888 	uxth.w	r8, r8
 801a298:	f806 9c02 	strb.w	r9, [r6, #-2]
 801a29c:	f108 0201 	add.w	r2, r8, #1
 801a2a0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801a2a4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a2a8:	f806 8c01 	strb.w	r8, [r6, #-1]
 801a2ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a2ae:	3603      	adds	r6, #3
 801a2b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a2b4:	4414      	add	r4, r2
 801a2b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a2b8:	4410      	add	r0, r2
 801a2ba:	e7ad      	b.n	801a218 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801a2bc:	f04f 0c00 	mov.w	ip, #0
 801a2c0:	eba3 020c 	sub.w	r2, r3, ip
 801a2c4:	2a00      	cmp	r2, #0
 801a2c6:	dc3d      	bgt.n	801a344 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801a2c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a2cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a2d0:	441d      	add	r5, r3
 801a2d2:	2900      	cmp	r1, #0
 801a2d4:	f340 8097 	ble.w	801a406 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801a2d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a2dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a2de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a2e2:	3901      	subs	r1, #1
 801a2e4:	eeb0 6a62 	vmov.f32	s12, s5
 801a2e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a2ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a2f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2f4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a2f8:	eeb0 6a43 	vmov.f32	s12, s6
 801a2fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a300:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a304:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a308:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a30c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a310:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a314:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a318:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a31c:	ee12 2a90 	vmov	r2, s5
 801a320:	eef0 2a47 	vmov.f32	s5, s14
 801a324:	fb92 f3f3 	sdiv	r3, r2, r3
 801a328:	ee13 2a10 	vmov	r2, s6
 801a32c:	9311      	str	r3, [sp, #68]	; 0x44
 801a32e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a330:	eeb0 3a67 	vmov.f32	s6, s15
 801a334:	fb92 f3f3 	sdiv	r3, r2, r3
 801a338:	9a03      	ldr	r2, [sp, #12]
 801a33a:	9312      	str	r3, [sp, #72]	; 0x48
 801a33c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a33e:	bf08      	it	eq
 801a340:	4613      	moveq	r3, r2
 801a342:	e738      	b.n	801a1b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801a344:	1426      	asrs	r6, r4, #16
 801a346:	d448      	bmi.n	801a3da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801a348:	4576      	cmp	r6, lr
 801a34a:	da46      	bge.n	801a3da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801a34c:	1402      	asrs	r2, r0, #16
 801a34e:	d444      	bmi.n	801a3da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801a350:	9f01      	ldr	r7, [sp, #4]
 801a352:	42ba      	cmp	r2, r7
 801a354:	da41      	bge.n	801a3da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801a356:	fb0e 6202 	mla	r2, lr, r2, r6
 801a35a:	9e02      	ldr	r6, [sp, #8]
 801a35c:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801a360:	0e3a      	lsrs	r2, r7, #24
 801a362:	d03a      	beq.n	801a3da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801a364:	2aff      	cmp	r2, #255	; 0xff
 801a366:	b2d6      	uxtb	r6, r2
 801a368:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a36c:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801a370:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801a374:	b2ff      	uxtb	r7, r7
 801a376:	d037      	beq.n	801a3e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801a378:	fa1f f986 	uxth.w	r9, r6
 801a37c:	4462      	add	r2, ip
 801a37e:	43f6      	mvns	r6, r6
 801a380:	f815 8002 	ldrb.w	r8, [r5, r2]
 801a384:	fb17 f709 	smulbb	r7, r7, r9
 801a388:	fb1a fa09 	smulbb	sl, sl, r9
 801a38c:	b2f6      	uxtb	r6, r6
 801a38e:	fb1b f909 	smulbb	r9, fp, r9
 801a392:	fb08 7706 	mla	r7, r8, r6, r7
 801a396:	b2bf      	uxth	r7, r7
 801a398:	f107 0801 	add.w	r8, r7, #1
 801a39c:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801a3a0:	123f      	asrs	r7, r7, #8
 801a3a2:	54af      	strb	r7, [r5, r2]
 801a3a4:	442a      	add	r2, r5
 801a3a6:	7857      	ldrb	r7, [r2, #1]
 801a3a8:	fb07 aa06 	mla	sl, r7, r6, sl
 801a3ac:	fa1f fa8a 	uxth.w	sl, sl
 801a3b0:	f10a 0701 	add.w	r7, sl, #1
 801a3b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a3b8:	7897      	ldrb	r7, [r2, #2]
 801a3ba:	fb07 9906 	mla	r9, r7, r6, r9
 801a3be:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a3c2:	fa1f f989 	uxth.w	r9, r9
 801a3c6:	f882 a001 	strb.w	sl, [r2, #1]
 801a3ca:	f109 0601 	add.w	r6, r9, #1
 801a3ce:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801a3d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a3d6:	f882 9002 	strb.w	r9, [r2, #2]
 801a3da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a3dc:	f10c 0c01 	add.w	ip, ip, #1
 801a3e0:	4414      	add	r4, r2
 801a3e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a3e4:	4410      	add	r0, r2
 801a3e6:	e76b      	b.n	801a2c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801a3e8:	4462      	add	r2, ip
 801a3ea:	54af      	strb	r7, [r5, r2]
 801a3ec:	442a      	add	r2, r5
 801a3ee:	f882 a001 	strb.w	sl, [r2, #1]
 801a3f2:	f882 b002 	strb.w	fp, [r2, #2]
 801a3f6:	e7f0      	b.n	801a3da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801a3f8:	f806 7c03 	strb.w	r7, [r6, #-3]
 801a3fc:	f806 9c02 	strb.w	r9, [r6, #-2]
 801a400:	f806 bc01 	strb.w	fp, [r6, #-1]
 801a404:	e752      	b.n	801a2ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801a406:	b005      	add	sp, #20
 801a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a40c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a410:	b087      	sub	sp, #28
 801a412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a416:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a418:	9204      	str	r2, [sp, #16]
 801a41a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801a41e:	6860      	ldr	r0, [r4, #4]
 801a420:	9205      	str	r2, [sp, #20]
 801a422:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801a426:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801a42a:	9101      	str	r1, [sp, #4]
 801a42c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801a430:	fb00 2505 	mla	r5, r0, r5, r2
 801a434:	6822      	ldr	r2, [r4, #0]
 801a436:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a43a:	4415      	add	r5, r2
 801a43c:	f10e 0201 	add.w	r2, lr, #1
 801a440:	f022 0201 	bic.w	r2, r2, #1
 801a444:	9202      	str	r2, [sp, #8]
 801a446:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a448:	6812      	ldr	r2, [r2, #0]
 801a44a:	9203      	str	r2, [sp, #12]
 801a44c:	9a01      	ldr	r2, [sp, #4]
 801a44e:	2a00      	cmp	r2, #0
 801a450:	dc03      	bgt.n	801a45a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801a452:	9a04      	ldr	r2, [sp, #16]
 801a454:	2a00      	cmp	r2, #0
 801a456:	f340 8132 	ble.w	801a6be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801a45a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a45c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a460:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a462:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a466:	2b00      	cmp	r3, #0
 801a468:	dd0e      	ble.n	801a488 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801a46a:	1422      	asrs	r2, r4, #16
 801a46c:	d405      	bmi.n	801a47a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a46e:	4596      	cmp	lr, r2
 801a470:	dd03      	ble.n	801a47a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a472:	1402      	asrs	r2, r0, #16
 801a474:	d401      	bmi.n	801a47a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a476:	4542      	cmp	r2, r8
 801a478:	db07      	blt.n	801a48a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801a47a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a47c:	3b01      	subs	r3, #1
 801a47e:	3503      	adds	r5, #3
 801a480:	4414      	add	r4, r2
 801a482:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a484:	4410      	add	r0, r2
 801a486:	e7ee      	b.n	801a466 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801a488:	d010      	beq.n	801a4ac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801a48a:	1e5a      	subs	r2, r3, #1
 801a48c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a48e:	fb06 4602 	mla	r6, r6, r2, r4
 801a492:	1436      	asrs	r6, r6, #16
 801a494:	d546      	bpl.n	801a524 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801a496:	4699      	mov	r9, r3
 801a498:	462e      	mov	r6, r5
 801a49a:	f1b9 0f00 	cmp.w	r9, #0
 801a49e:	f300 80ac 	bgt.w	801a5fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801a4a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a4a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a4aa:	441d      	add	r5, r3
 801a4ac:	9b01      	ldr	r3, [sp, #4]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	f340 8105 	ble.w	801a6be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801a4b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a4b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a4ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a4be:	eeb0 6a62 	vmov.f32	s12, s5
 801a4c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a4c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a4ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4ce:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a4d2:	eeb0 6a43 	vmov.f32	s12, s6
 801a4d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4da:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a4de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a4e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a4e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a4ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a4ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a4f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a4f6:	ee12 2a90 	vmov	r2, s5
 801a4fa:	eef0 2a47 	vmov.f32	s5, s14
 801a4fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801a502:	ee13 2a10 	vmov	r2, s6
 801a506:	9313      	str	r3, [sp, #76]	; 0x4c
 801a508:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a50a:	eeb0 3a67 	vmov.f32	s6, s15
 801a50e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a512:	9314      	str	r3, [sp, #80]	; 0x50
 801a514:	9b01      	ldr	r3, [sp, #4]
 801a516:	9a04      	ldr	r2, [sp, #16]
 801a518:	3b01      	subs	r3, #1
 801a51a:	9301      	str	r3, [sp, #4]
 801a51c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a51e:	bf08      	it	eq
 801a520:	4613      	moveq	r3, r2
 801a522:	e793      	b.n	801a44c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801a524:	45b6      	cmp	lr, r6
 801a526:	ddb6      	ble.n	801a496 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801a528:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a52a:	fb06 0202 	mla	r2, r6, r2, r0
 801a52e:	1412      	asrs	r2, r2, #16
 801a530:	d4b1      	bmi.n	801a496 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801a532:	4542      	cmp	r2, r8
 801a534:	daaf      	bge.n	801a496 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801a536:	1cee      	adds	r6, r5, #3
 801a538:	4699      	mov	r9, r3
 801a53a:	f1b9 0f00 	cmp.w	r9, #0
 801a53e:	ddb0      	ble.n	801a4a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801a540:	1422      	asrs	r2, r4, #16
 801a542:	9902      	ldr	r1, [sp, #8]
 801a544:	1407      	asrs	r7, r0, #16
 801a546:	fb01 2707 	mla	r7, r1, r7, r2
 801a54a:	9903      	ldr	r1, [sp, #12]
 801a54c:	087a      	lsrs	r2, r7, #1
 801a54e:	5c8a      	ldrb	r2, [r1, r2]
 801a550:	07f9      	lsls	r1, r7, #31
 801a552:	bf54      	ite	pl
 801a554:	f002 020f 	andpl.w	r2, r2, #15
 801a558:	1112      	asrmi	r2, r2, #4
 801a55a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a55e:	b2d2      	uxtb	r2, r2
 801a560:	2a00      	cmp	r2, #0
 801a562:	d042      	beq.n	801a5ea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801a564:	4957      	ldr	r1, [pc, #348]	; (801a6c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801a566:	680f      	ldr	r7, [r1, #0]
 801a568:	9905      	ldr	r1, [sp, #20]
 801a56a:	fa5f fb87 	uxtb.w	fp, r7
 801a56e:	434a      	muls	r2, r1
 801a570:	f102 0c01 	add.w	ip, r2, #1
 801a574:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801a578:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801a57c:	1212      	asrs	r2, r2, #8
 801a57e:	fa1f fa82 	uxth.w	sl, r2
 801a582:	43d2      	mvns	r2, r2
 801a584:	fb1b fb0a 	smulbb	fp, fp, sl
 801a588:	b2d2      	uxtb	r2, r2
 801a58a:	fb0c bc02 	mla	ip, ip, r2, fp
 801a58e:	fa1f fc8c 	uxth.w	ip, ip
 801a592:	f10c 0b01 	add.w	fp, ip, #1
 801a596:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a59a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a59e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a5a2:	fb1b fb0a 	smulbb	fp, fp, sl
 801a5a6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a5aa:	fb17 fa0a 	smulbb	sl, r7, sl
 801a5ae:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801a5b2:	f806 cc03 	strb.w	ip, [r6, #-3]
 801a5b6:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801a5ba:	fb07 aa02 	mla	sl, r7, r2, sl
 801a5be:	fb0c bc02 	mla	ip, ip, r2, fp
 801a5c2:	fa1f fa8a 	uxth.w	sl, sl
 801a5c6:	fa1f fc8c 	uxth.w	ip, ip
 801a5ca:	f10a 0701 	add.w	r7, sl, #1
 801a5ce:	f10c 0b01 	add.w	fp, ip, #1
 801a5d2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a5d6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a5da:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a5de:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a5e2:	f806 ac01 	strb.w	sl, [r6, #-1]
 801a5e6:	f806 cc02 	strb.w	ip, [r6, #-2]
 801a5ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a5ec:	3603      	adds	r6, #3
 801a5ee:	f109 39ff 	add.w	r9, r9, #4294967295
 801a5f2:	4414      	add	r4, r2
 801a5f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a5f6:	4410      	add	r0, r2
 801a5f8:	e79f      	b.n	801a53a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801a5fa:	1422      	asrs	r2, r4, #16
 801a5fc:	d457      	bmi.n	801a6ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a5fe:	4596      	cmp	lr, r2
 801a600:	dd55      	ble.n	801a6ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a602:	1407      	asrs	r7, r0, #16
 801a604:	d453      	bmi.n	801a6ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a606:	4547      	cmp	r7, r8
 801a608:	da51      	bge.n	801a6ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a60a:	9902      	ldr	r1, [sp, #8]
 801a60c:	fb07 2701 	mla	r7, r7, r1, r2
 801a610:	9903      	ldr	r1, [sp, #12]
 801a612:	087a      	lsrs	r2, r7, #1
 801a614:	07ff      	lsls	r7, r7, #31
 801a616:	5c8a      	ldrb	r2, [r1, r2]
 801a618:	bf54      	ite	pl
 801a61a:	f002 020f 	andpl.w	r2, r2, #15
 801a61e:	1112      	asrmi	r2, r2, #4
 801a620:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a624:	b2d2      	uxtb	r2, r2
 801a626:	2a00      	cmp	r2, #0
 801a628:	d041      	beq.n	801a6ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a62a:	4926      	ldr	r1, [pc, #152]	; (801a6c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801a62c:	680f      	ldr	r7, [r1, #0]
 801a62e:	9905      	ldr	r1, [sp, #20]
 801a630:	fa5f fb87 	uxtb.w	fp, r7
 801a634:	434a      	muls	r2, r1
 801a636:	f102 0c01 	add.w	ip, r2, #1
 801a63a:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801a63e:	f896 c000 	ldrb.w	ip, [r6]
 801a642:	1212      	asrs	r2, r2, #8
 801a644:	fa1f fa82 	uxth.w	sl, r2
 801a648:	43d2      	mvns	r2, r2
 801a64a:	fb1b fb0a 	smulbb	fp, fp, sl
 801a64e:	b2d2      	uxtb	r2, r2
 801a650:	fb0c bc02 	mla	ip, ip, r2, fp
 801a654:	fa1f fc8c 	uxth.w	ip, ip
 801a658:	f10c 0b01 	add.w	fp, ip, #1
 801a65c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a660:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a664:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a668:	fb1b fb0a 	smulbb	fp, fp, sl
 801a66c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a670:	fb17 fa0a 	smulbb	sl, r7, sl
 801a674:	78b7      	ldrb	r7, [r6, #2]
 801a676:	f886 c000 	strb.w	ip, [r6]
 801a67a:	f896 c001 	ldrb.w	ip, [r6, #1]
 801a67e:	fb07 aa02 	mla	sl, r7, r2, sl
 801a682:	fb0c bc02 	mla	ip, ip, r2, fp
 801a686:	fa1f fa8a 	uxth.w	sl, sl
 801a68a:	fa1f fc8c 	uxth.w	ip, ip
 801a68e:	f10a 0701 	add.w	r7, sl, #1
 801a692:	f10c 0b01 	add.w	fp, ip, #1
 801a696:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a69a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a69e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a6a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a6a6:	f886 a002 	strb.w	sl, [r6, #2]
 801a6aa:	f886 c001 	strb.w	ip, [r6, #1]
 801a6ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a6b0:	3603      	adds	r6, #3
 801a6b2:	f109 39ff 	add.w	r9, r9, #4294967295
 801a6b6:	4414      	add	r4, r2
 801a6b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a6ba:	4410      	add	r0, r2
 801a6bc:	e6ed      	b.n	801a49a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801a6be:	b007      	add	sp, #28
 801a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6c4:	2000b490 	.word	0x2000b490

0801a6c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6cc:	b087      	sub	sp, #28
 801a6ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a6d2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a6d4:	9205      	str	r2, [sp, #20]
 801a6d6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801a6da:	6860      	ldr	r0, [r4, #4]
 801a6dc:	9202      	str	r2, [sp, #8]
 801a6de:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801a6e2:	9101      	str	r1, [sp, #4]
 801a6e4:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801a6e8:	fb00 2606 	mla	r6, r0, r6, r2
 801a6ec:	6822      	ldr	r2, [r4, #0]
 801a6ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a6f2:	4416      	add	r6, r2
 801a6f4:	f108 0201 	add.w	r2, r8, #1
 801a6f8:	f022 0201 	bic.w	r2, r2, #1
 801a6fc:	9203      	str	r2, [sp, #12]
 801a6fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a700:	6812      	ldr	r2, [r2, #0]
 801a702:	9204      	str	r2, [sp, #16]
 801a704:	9a01      	ldr	r2, [sp, #4]
 801a706:	2a00      	cmp	r2, #0
 801a708:	dc03      	bgt.n	801a712 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801a70a:	9a05      	ldr	r2, [sp, #20]
 801a70c:	2a00      	cmp	r2, #0
 801a70e:	f340 813a 	ble.w	801a986 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801a712:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a714:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801a718:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a71a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a71e:	2b00      	cmp	r3, #0
 801a720:	dd0f      	ble.n	801a742 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801a722:	142a      	asrs	r2, r5, #16
 801a724:	d406      	bmi.n	801a734 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a726:	4590      	cmp	r8, r2
 801a728:	dd04      	ble.n	801a734 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a72a:	1422      	asrs	r2, r4, #16
 801a72c:	d402      	bmi.n	801a734 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a72e:	9802      	ldr	r0, [sp, #8]
 801a730:	4282      	cmp	r2, r0
 801a732:	db07      	blt.n	801a744 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801a734:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a736:	3b01      	subs	r3, #1
 801a738:	3603      	adds	r6, #3
 801a73a:	4415      	add	r5, r2
 801a73c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a73e:	4414      	add	r4, r2
 801a740:	e7ed      	b.n	801a71e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801a742:	d073      	beq.n	801a82c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801a744:	1e5a      	subs	r2, r3, #1
 801a746:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a748:	fb00 5002 	mla	r0, r0, r2, r5
 801a74c:	1400      	asrs	r0, r0, #16
 801a74e:	d464      	bmi.n	801a81a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801a750:	4580      	cmp	r8, r0
 801a752:	dd62      	ble.n	801a81a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801a754:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a756:	fb00 4202 	mla	r2, r0, r2, r4
 801a75a:	1412      	asrs	r2, r2, #16
 801a75c:	d45d      	bmi.n	801a81a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801a75e:	9802      	ldr	r0, [sp, #8]
 801a760:	4282      	cmp	r2, r0
 801a762:	da5a      	bge.n	801a81a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801a764:	1cf0      	adds	r0, r6, #3
 801a766:	469a      	mov	sl, r3
 801a768:	f1ba 0f00 	cmp.w	sl, #0
 801a76c:	dd59      	ble.n	801a822 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801a76e:	142a      	asrs	r2, r5, #16
 801a770:	9903      	ldr	r1, [sp, #12]
 801a772:	1427      	asrs	r7, r4, #16
 801a774:	fb01 2707 	mla	r7, r1, r7, r2
 801a778:	9904      	ldr	r1, [sp, #16]
 801a77a:	087a      	lsrs	r2, r7, #1
 801a77c:	5c8a      	ldrb	r2, [r1, r2]
 801a77e:	07f9      	lsls	r1, r7, #31
 801a780:	bf54      	ite	pl
 801a782:	f002 020f 	andpl.w	r2, r2, #15
 801a786:	1112      	asrmi	r2, r2, #4
 801a788:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a78c:	b2d2      	uxtb	r2, r2
 801a78e:	2a00      	cmp	r2, #0
 801a790:	d03b      	beq.n	801a80a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a792:	497e      	ldr	r1, [pc, #504]	; (801a98c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801a794:	2aff      	cmp	r2, #255	; 0xff
 801a796:	680f      	ldr	r7, [r1, #0]
 801a798:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a79c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801a7a0:	b2ff      	uxtb	r7, r7
 801a7a2:	f000 80e9 	beq.w	801a978 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801a7a6:	fa1f fe82 	uxth.w	lr, r2
 801a7aa:	43d2      	mvns	r2, r2
 801a7ac:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801a7b0:	fb17 f70e 	smulbb	r7, r7, lr
 801a7b4:	b2d2      	uxtb	r2, r2
 801a7b6:	fb19 f90e 	smulbb	r9, r9, lr
 801a7ba:	fb0c 7702 	mla	r7, ip, r2, r7
 801a7be:	fb1b fe0e 	smulbb	lr, fp, lr
 801a7c2:	b2bf      	uxth	r7, r7
 801a7c4:	f107 0c01 	add.w	ip, r7, #1
 801a7c8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801a7cc:	123f      	asrs	r7, r7, #8
 801a7ce:	f800 7c03 	strb.w	r7, [r0, #-3]
 801a7d2:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801a7d6:	fb07 9902 	mla	r9, r7, r2, r9
 801a7da:	fa1f f989 	uxth.w	r9, r9
 801a7de:	f109 0701 	add.w	r7, r9, #1
 801a7e2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801a7e6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801a7ea:	fb07 ee02 	mla	lr, r7, r2, lr
 801a7ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a7f2:	fa1f fe8e 	uxth.w	lr, lr
 801a7f6:	f800 9c02 	strb.w	r9, [r0, #-2]
 801a7fa:	f10e 0201 	add.w	r2, lr, #1
 801a7fe:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801a802:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a806:	f800 ec01 	strb.w	lr, [r0, #-1]
 801a80a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a80c:	3003      	adds	r0, #3
 801a80e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a812:	4415      	add	r5, r2
 801a814:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a816:	4414      	add	r4, r2
 801a818:	e7a6      	b.n	801a768 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801a81a:	2700      	movs	r7, #0
 801a81c:	1bda      	subs	r2, r3, r7
 801a81e:	2a00      	cmp	r2, #0
 801a820:	dc40      	bgt.n	801a8a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801a822:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a826:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a82a:	441e      	add	r6, r3
 801a82c:	9b01      	ldr	r3, [sp, #4]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	f340 80a9 	ble.w	801a986 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801a834:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a838:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a83a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a83e:	eeb0 6a62 	vmov.f32	s12, s5
 801a842:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a846:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a84a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a84e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a852:	eeb0 6a43 	vmov.f32	s12, s6
 801a856:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a85a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a85e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a862:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a866:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a86a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a86e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a872:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a876:	ee12 2a90 	vmov	r2, s5
 801a87a:	eef0 2a47 	vmov.f32	s5, s14
 801a87e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a882:	ee13 2a10 	vmov	r2, s6
 801a886:	9313      	str	r3, [sp, #76]	; 0x4c
 801a888:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a88a:	eeb0 3a67 	vmov.f32	s6, s15
 801a88e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a892:	9314      	str	r3, [sp, #80]	; 0x50
 801a894:	9b01      	ldr	r3, [sp, #4]
 801a896:	9a05      	ldr	r2, [sp, #20]
 801a898:	3b01      	subs	r3, #1
 801a89a:	9301      	str	r3, [sp, #4]
 801a89c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a89e:	bf08      	it	eq
 801a8a0:	4613      	moveq	r3, r2
 801a8a2:	e72f      	b.n	801a704 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801a8a4:	142a      	asrs	r2, r5, #16
 801a8a6:	d458      	bmi.n	801a95a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a8a8:	4590      	cmp	r8, r2
 801a8aa:	dd56      	ble.n	801a95a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a8ac:	1420      	asrs	r0, r4, #16
 801a8ae:	d454      	bmi.n	801a95a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a8b0:	9902      	ldr	r1, [sp, #8]
 801a8b2:	4288      	cmp	r0, r1
 801a8b4:	da51      	bge.n	801a95a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a8b6:	9903      	ldr	r1, [sp, #12]
 801a8b8:	fb00 2001 	mla	r0, r0, r1, r2
 801a8bc:	9904      	ldr	r1, [sp, #16]
 801a8be:	0842      	lsrs	r2, r0, #1
 801a8c0:	07c0      	lsls	r0, r0, #31
 801a8c2:	5c8a      	ldrb	r2, [r1, r2]
 801a8c4:	bf54      	ite	pl
 801a8c6:	f002 020f 	andpl.w	r2, r2, #15
 801a8ca:	1112      	asrmi	r2, r2, #4
 801a8cc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a8d0:	b2d2      	uxtb	r2, r2
 801a8d2:	2a00      	cmp	r2, #0
 801a8d4:	d041      	beq.n	801a95a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a8d6:	492d      	ldr	r1, [pc, #180]	; (801a98c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801a8d8:	2aff      	cmp	r2, #255	; 0xff
 801a8da:	6808      	ldr	r0, [r1, #0]
 801a8dc:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801a8e0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a8e4:	fa5f fc80 	uxtb.w	ip, r0
 801a8e8:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801a8ec:	d03b      	beq.n	801a966 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801a8ee:	fa1f f982 	uxth.w	r9, r2
 801a8f2:	4438      	add	r0, r7
 801a8f4:	43d2      	mvns	r2, r2
 801a8f6:	f816 e000 	ldrb.w	lr, [r6, r0]
 801a8fa:	fb1c fc09 	smulbb	ip, ip, r9
 801a8fe:	fb1a fa09 	smulbb	sl, sl, r9
 801a902:	b2d2      	uxtb	r2, r2
 801a904:	fb1b f909 	smulbb	r9, fp, r9
 801a908:	fb0e cc02 	mla	ip, lr, r2, ip
 801a90c:	fa1f fc8c 	uxth.w	ip, ip
 801a910:	f10c 0e01 	add.w	lr, ip, #1
 801a914:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801a918:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a91c:	f806 c000 	strb.w	ip, [r6, r0]
 801a920:	4430      	add	r0, r6
 801a922:	f890 c001 	ldrb.w	ip, [r0, #1]
 801a926:	fb0c aa02 	mla	sl, ip, r2, sl
 801a92a:	fa1f fa8a 	uxth.w	sl, sl
 801a92e:	f10a 0c01 	add.w	ip, sl, #1
 801a932:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a936:	f890 c002 	ldrb.w	ip, [r0, #2]
 801a93a:	fb0c 9902 	mla	r9, ip, r2, r9
 801a93e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a942:	fa1f f989 	uxth.w	r9, r9
 801a946:	f880 a001 	strb.w	sl, [r0, #1]
 801a94a:	f109 0201 	add.w	r2, r9, #1
 801a94e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801a952:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a956:	f880 9002 	strb.w	r9, [r0, #2]
 801a95a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a95c:	3701      	adds	r7, #1
 801a95e:	4415      	add	r5, r2
 801a960:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a962:	4414      	add	r4, r2
 801a964:	e75a      	b.n	801a81c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801a966:	4438      	add	r0, r7
 801a968:	f806 c000 	strb.w	ip, [r6, r0]
 801a96c:	4430      	add	r0, r6
 801a96e:	f880 a001 	strb.w	sl, [r0, #1]
 801a972:	f880 b002 	strb.w	fp, [r0, #2]
 801a976:	e7f0      	b.n	801a95a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a978:	f800 7c03 	strb.w	r7, [r0, #-3]
 801a97c:	f800 9c02 	strb.w	r9, [r0, #-2]
 801a980:	f800 bc01 	strb.w	fp, [r0, #-1]
 801a984:	e741      	b.n	801a80a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a986:	b007      	add	sp, #28
 801a988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a98c:	2000b490 	.word	0x2000b490

0801a990 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801a990:	4770      	bx	lr

0801a992 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801a992:	4770      	bx	lr

0801a994 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801a994:	4770      	bx	lr

0801a996 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801a996:	4770      	bx	lr

0801a998 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a998:	4770      	bx	lr

0801a99a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a99a:	4770      	bx	lr

0801a99c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a99c:	4770      	bx	lr

0801a99e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a99e:	4770      	bx	lr

0801a9a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a9a0:	4770      	bx	lr

0801a9a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a9a2:	4770      	bx	lr

0801a9a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a9a4:	4770      	bx	lr

0801a9a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a9a6:	4770      	bx	lr

0801a9a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a9a8:	4770      	bx	lr

0801a9aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a9aa:	4770      	bx	lr

0801a9ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a9ac:	4770      	bx	lr

0801a9ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a9ae:	4770      	bx	lr

0801a9b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a9b0:	4770      	bx	lr

0801a9b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a9b2:	4770      	bx	lr

0801a9b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a9b4:	4770      	bx	lr

0801a9b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a9b6:	4770      	bx	lr

0801a9b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a9b8:	2bff      	cmp	r3, #255	; 0xff
 801a9ba:	b508      	push	{r3, lr}
 801a9bc:	d04f      	beq.n	801aa5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801a9be:	2a2c      	cmp	r2, #44	; 0x2c
 801a9c0:	d032      	beq.n	801aa28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801a9c2:	d80f      	bhi.n	801a9e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801a9c4:	2a08      	cmp	r2, #8
 801a9c6:	d046      	beq.n	801aa56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a9c8:	d805      	bhi.n	801a9d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801a9ca:	2a04      	cmp	r2, #4
 801a9cc:	d041      	beq.n	801aa52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a9ce:	2a05      	cmp	r2, #5
 801a9d0:	d03d      	beq.n	801aa4e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801a9d2:	2000      	movs	r0, #0
 801a9d4:	e027      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a9d6:	2a0a      	cmp	r2, #10
 801a9d8:	d03d      	beq.n	801aa56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a9da:	d301      	bcc.n	801a9e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801a9dc:	2a0b      	cmp	r2, #11
 801a9de:	d1f8      	bne.n	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a9e0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801a9e2:	e020      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a9e4:	2a30      	cmp	r2, #48	; 0x30
 801a9e6:	d038      	beq.n	801aa5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801a9e8:	d808      	bhi.n	801a9fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801a9ea:	2a2e      	cmp	r2, #46	; 0x2e
 801a9ec:	684b      	ldr	r3, [r1, #4]
 801a9ee:	d029      	beq.n	801aa44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801a9f0:	d90b      	bls.n	801aa0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801a9f2:	781b      	ldrb	r3, [r3, #0]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d1ec      	bne.n	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a9f8:	6a00      	ldr	r0, [r0, #32]
 801a9fa:	e014      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a9fc:	2a32      	cmp	r2, #50	; 0x32
 801a9fe:	d02c      	beq.n	801aa5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801aa00:	d301      	bcc.n	801aa06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801aa02:	2a33      	cmp	r2, #51	; 0x33
 801aa04:	d1e5      	bne.n	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aa06:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801aa08:	e00d      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa0a:	781b      	ldrb	r3, [r3, #0]
 801aa0c:	2b01      	cmp	r3, #1
 801aa0e:	d009      	beq.n	801aa24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801aa10:	d3f2      	bcc.n	801a9f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801aa12:	2b02      	cmp	r3, #2
 801aa14:	d1dd      	bne.n	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aa16:	4b39      	ldr	r3, [pc, #228]	; (801aafc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801aa18:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801aa1c:	4a38      	ldr	r2, [pc, #224]	; (801ab00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801aa1e:	4839      	ldr	r0, [pc, #228]	; (801ab04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801aa20:	f007 ff3e 	bl	80228a0 <__assert_func>
 801aa24:	6900      	ldr	r0, [r0, #16]
 801aa26:	bd08      	pop	{r3, pc}
 801aa28:	684b      	ldr	r3, [r1, #4]
 801aa2a:	781b      	ldrb	r3, [r3, #0]
 801aa2c:	2b01      	cmp	r3, #1
 801aa2e:	d007      	beq.n	801aa40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801aa30:	d30b      	bcc.n	801aa4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801aa32:	2b02      	cmp	r3, #2
 801aa34:	d1cd      	bne.n	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aa36:	4b31      	ldr	r3, [pc, #196]	; (801aafc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801aa38:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801aa3c:	4a30      	ldr	r2, [pc, #192]	; (801ab00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801aa3e:	e7ee      	b.n	801aa1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801aa40:	6880      	ldr	r0, [r0, #8]
 801aa42:	e7f0      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa44:	781b      	ldrb	r3, [r3, #0]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d1c3      	bne.n	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aa4a:	6980      	ldr	r0, [r0, #24]
 801aa4c:	e7eb      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa4e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801aa50:	e7e9      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa52:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801aa54:	e7e7      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa56:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801aa58:	e7e5      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa5a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801aa5c:	e7e3      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa5e:	2a2c      	cmp	r2, #44	; 0x2c
 801aa60:	d030      	beq.n	801aac4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801aa62:	d80f      	bhi.n	801aa84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801aa64:	2a08      	cmp	r2, #8
 801aa66:	d044      	beq.n	801aaf2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801aa68:	d805      	bhi.n	801aa76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801aa6a:	2a04      	cmp	r2, #4
 801aa6c:	d03f      	beq.n	801aaee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801aa6e:	2a05      	cmp	r2, #5
 801aa70:	d1af      	bne.n	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aa72:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801aa74:	e7d7      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa76:	2a0a      	cmp	r2, #10
 801aa78:	d03b      	beq.n	801aaf2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801aa7a:	d301      	bcc.n	801aa80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801aa7c:	2a0b      	cmp	r2, #11
 801aa7e:	d1a8      	bne.n	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aa80:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801aa82:	e7d0      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa84:	2a30      	cmp	r2, #48	; 0x30
 801aa86:	d036      	beq.n	801aaf6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801aa88:	d808      	bhi.n	801aa9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801aa8a:	2a2e      	cmp	r2, #46	; 0x2e
 801aa8c:	684b      	ldr	r3, [r1, #4]
 801aa8e:	d028      	beq.n	801aae2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801aa90:	d90b      	bls.n	801aaaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801aa92:	781b      	ldrb	r3, [r3, #0]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d19c      	bne.n	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aa98:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801aa9a:	e7c4      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa9c:	2a32      	cmp	r2, #50	; 0x32
 801aa9e:	d02a      	beq.n	801aaf6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801aaa0:	d301      	bcc.n	801aaa6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801aaa2:	2a33      	cmp	r2, #51	; 0x33
 801aaa4:	d195      	bne.n	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aaa6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801aaa8:	e7bd      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aaaa:	781b      	ldrb	r3, [r3, #0]
 801aaac:	2b01      	cmp	r3, #1
 801aaae:	d007      	beq.n	801aac0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801aab0:	d3f2      	bcc.n	801aa98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801aab2:	2b02      	cmp	r3, #2
 801aab4:	d18d      	bne.n	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aab6:	4b11      	ldr	r3, [pc, #68]	; (801aafc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801aab8:	f240 31e1 	movw	r1, #993	; 0x3e1
 801aabc:	4a10      	ldr	r2, [pc, #64]	; (801ab00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801aabe:	e7ae      	b.n	801aa1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801aac0:	6940      	ldr	r0, [r0, #20]
 801aac2:	e7b0      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aac4:	684b      	ldr	r3, [r1, #4]
 801aac6:	781b      	ldrb	r3, [r3, #0]
 801aac8:	2b01      	cmp	r3, #1
 801aaca:	d008      	beq.n	801aade <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801aacc:	d30d      	bcc.n	801aaea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801aace:	2b02      	cmp	r3, #2
 801aad0:	f47f af7f 	bne.w	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aad4:	4b09      	ldr	r3, [pc, #36]	; (801aafc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801aad6:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801aada:	4a09      	ldr	r2, [pc, #36]	; (801ab00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801aadc:	e79f      	b.n	801aa1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801aade:	68c0      	ldr	r0, [r0, #12]
 801aae0:	e7a1      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aae2:	781b      	ldrb	r3, [r3, #0]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	f47f af74 	bne.w	801a9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aaea:	69c0      	ldr	r0, [r0, #28]
 801aaec:	e79b      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aaee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801aaf0:	e799      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aaf2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801aaf4:	e797      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aaf6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801aaf8:	e795      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aafa:	bf00      	nop
 801aafc:	08026e5f 	.word	0x08026e5f
 801ab00:	08027613 	.word	0x08027613
 801ab04:	08026eab 	.word	0x08026eab

0801ab08 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801ab08:	b508      	push	{r3, lr}
 801ab0a:	4b06      	ldr	r3, [pc, #24]	; (801ab24 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801ab0c:	8818      	ldrh	r0, [r3, #0]
 801ab0e:	b928      	cbnz	r0, 801ab1c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801ab10:	4b05      	ldr	r3, [pc, #20]	; (801ab28 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801ab12:	21d7      	movs	r1, #215	; 0xd7
 801ab14:	4a05      	ldr	r2, [pc, #20]	; (801ab2c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801ab16:	4806      	ldr	r0, [pc, #24]	; (801ab30 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801ab18:	f007 fec2 	bl	80228a0 <__assert_func>
 801ab1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ab20:	b280      	uxth	r0, r0
 801ab22:	bd08      	pop	{r3, pc}
 801ab24:	2000b462 	.word	0x2000b462
 801ab28:	080270fa 	.word	0x080270fa
 801ab2c:	080275d8 	.word	0x080275d8
 801ab30:	0802713c 	.word	0x0802713c

0801ab34 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab38:	4616      	mov	r6, r2
 801ab3a:	b087      	sub	sp, #28
 801ab3c:	461f      	mov	r7, r3
 801ab3e:	b33b      	cbz	r3, 801ab90 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ab40:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801ab44:	b323      	cbz	r3, 801ab90 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ab46:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801ab4a:	b30b      	cbz	r3, 801ab90 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ab4c:	6808      	ldr	r0, [r1, #0]
 801ab4e:	ab04      	add	r3, sp, #16
 801ab50:	6849      	ldr	r1, [r1, #4]
 801ab52:	4c5a      	ldr	r4, [pc, #360]	; (801acbc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801ab54:	c303      	stmia	r3!, {r0, r1}
 801ab56:	a804      	add	r0, sp, #16
 801ab58:	f7fb fd28 	bl	80165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ab5c:	6820      	ldr	r0, [r4, #0]
 801ab5e:	6803      	ldr	r3, [r0, #0]
 801ab60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab62:	4798      	blx	r3
 801ab64:	2fff      	cmp	r7, #255	; 0xff
 801ab66:	4623      	mov	r3, r4
 801ab68:	d015      	beq.n	801ab96 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801ab6a:	f010 0f08 	tst.w	r0, #8
 801ab6e:	d015      	beq.n	801ab9c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801ab70:	6818      	ldr	r0, [r3, #0]
 801ab72:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801ab76:	6801      	ldr	r1, [r0, #0]
 801ab78:	9401      	str	r4, [sp, #4]
 801ab7a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801ab7e:	9702      	str	r7, [sp, #8]
 801ab80:	9400      	str	r4, [sp, #0]
 801ab82:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ab86:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801ab88:	4631      	mov	r1, r6
 801ab8a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ab8e:	47a0      	blx	r4
 801ab90:	b007      	add	sp, #28
 801ab92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab96:	f010 0f02 	tst.w	r0, #2
 801ab9a:	e7e8      	b.n	801ab6e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801ab9c:	6818      	ldr	r0, [r3, #0]
 801ab9e:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801aba2:	6803      	ldr	r3, [r0, #0]
 801aba4:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801aba8:	6a1b      	ldr	r3, [r3, #32]
 801abaa:	4798      	blx	r3
 801abac:	4944      	ldr	r1, [pc, #272]	; (801acc0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801abae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801abb2:	2fff      	cmp	r7, #255	; 0xff
 801abb4:	f8b1 c000 	ldrh.w	ip, [r1]
 801abb8:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801abbc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801abc0:	4688      	mov	r8, r1
 801abc2:	fb0c 2303 	mla	r3, ip, r3, r2
 801abc6:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801abca:	b2f2      	uxtb	r2, r6
 801abcc:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801abd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abd4:	4418      	add	r0, r3
 801abd6:	d112      	bne.n	801abfe <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801abd8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801abdc:	2100      	movs	r1, #0
 801abde:	42a9      	cmp	r1, r5
 801abe0:	da66      	bge.n	801acb0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801abe2:	4603      	mov	r3, r0
 801abe4:	2700      	movs	r7, #0
 801abe6:	42a7      	cmp	r7, r4
 801abe8:	f103 0303 	add.w	r3, r3, #3
 801abec:	da57      	bge.n	801ac9e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801abee:	f803 2c03 	strb.w	r2, [r3, #-3]
 801abf2:	3701      	adds	r7, #1
 801abf4:	f803 ec02 	strb.w	lr, [r3, #-2]
 801abf8:	f803 cc01 	strb.w	ip, [r3, #-1]
 801abfc:	e7f3      	b.n	801abe6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801abfe:	b2bb      	uxth	r3, r7
 801ac00:	f04f 0800 	mov.w	r8, #0
 801ac04:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ac08:	fb0c fc03 	mul.w	ip, ip, r3
 801ac0c:	fb0e fe03 	mul.w	lr, lr, r3
 801ac10:	435a      	muls	r2, r3
 801ac12:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801ac16:	460f      	mov	r7, r1
 801ac18:	b29b      	uxth	r3, r3
 801ac1a:	45a8      	cmp	r8, r5
 801ac1c:	da48      	bge.n	801acb0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801ac1e:	4601      	mov	r1, r0
 801ac20:	f04f 0a00 	mov.w	sl, #0
 801ac24:	45a2      	cmp	sl, r4
 801ac26:	f101 0103 	add.w	r1, r1, #3
 801ac2a:	da2f      	bge.n	801ac8c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801ac2c:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801ac30:	f10a 0a01 	add.w	sl, sl, #1
 801ac34:	fb19 f903 	smulbb	r9, r9, r3
 801ac38:	4491      	add	r9, r2
 801ac3a:	fa1f f989 	uxth.w	r9, r9
 801ac3e:	f109 0b01 	add.w	fp, r9, #1
 801ac42:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ac46:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ac4a:	f801 9c03 	strb.w	r9, [r1, #-3]
 801ac4e:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801ac52:	fb19 f903 	smulbb	r9, r9, r3
 801ac56:	44f1      	add	r9, lr
 801ac58:	fa1f f989 	uxth.w	r9, r9
 801ac5c:	f109 0b01 	add.w	fp, r9, #1
 801ac60:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ac64:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ac68:	f801 9c02 	strb.w	r9, [r1, #-2]
 801ac6c:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801ac70:	fb19 f903 	smulbb	r9, r9, r3
 801ac74:	44e1      	add	r9, ip
 801ac76:	fa1f f989 	uxth.w	r9, r9
 801ac7a:	f109 0b01 	add.w	fp, r9, #1
 801ac7e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ac82:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ac86:	f801 9c01 	strb.w	r9, [r1, #-1]
 801ac8a:	e7cb      	b.n	801ac24 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801ac8c:	8839      	ldrh	r1, [r7, #0]
 801ac8e:	f108 0801 	add.w	r8, r8, #1
 801ac92:	1b09      	subs	r1, r1, r4
 801ac94:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ac98:	4431      	add	r1, r6
 801ac9a:	4408      	add	r0, r1
 801ac9c:	e7bd      	b.n	801ac1a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801ac9e:	f8b8 3000 	ldrh.w	r3, [r8]
 801aca2:	3101      	adds	r1, #1
 801aca4:	1b1b      	subs	r3, r3, r4
 801aca6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801acaa:	4433      	add	r3, r6
 801acac:	4418      	add	r0, r3
 801acae:	e796      	b.n	801abde <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801acb0:	4b02      	ldr	r3, [pc, #8]	; (801acbc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801acb2:	6818      	ldr	r0, [r3, #0]
 801acb4:	6803      	ldr	r3, [r0, #0]
 801acb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acb8:	4798      	blx	r3
 801acba:	e769      	b.n	801ab90 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801acbc:	2000b468 	.word	0x2000b468
 801acc0:	2000b462 	.word	0x2000b462

0801acc4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acc8:	b08d      	sub	sp, #52	; 0x34
 801acca:	460c      	mov	r4, r1
 801accc:	4617      	mov	r7, r2
 801acce:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801acd2:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801acd6:	2e00      	cmp	r6, #0
 801acd8:	d04a      	beq.n	801ad70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801acda:	6810      	ldr	r0, [r2, #0]
 801acdc:	ad08      	add	r5, sp, #32
 801acde:	6851      	ldr	r1, [r2, #4]
 801ace0:	c503      	stmia	r5!, {r0, r1}
 801ace2:	6818      	ldr	r0, [r3, #0]
 801ace4:	ad0a      	add	r5, sp, #40	; 0x28
 801ace6:	6859      	ldr	r1, [r3, #4]
 801ace8:	c503      	stmia	r5!, {r0, r1}
 801acea:	a808      	add	r0, sp, #32
 801acec:	f7fb fc5e 	bl	80165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801acf0:	4639      	mov	r1, r7
 801acf2:	a80a      	add	r0, sp, #40	; 0x28
 801acf4:	4f59      	ldr	r7, [pc, #356]	; (801ae5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801acf6:	f7fb fc41 	bl	801657c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801acfa:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801acfe:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801ad02:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ad06:	6838      	ldr	r0, [r7, #0]
 801ad08:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ad0c:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801ad10:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801ad14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ad18:	440c      	add	r4, r1
 801ad1a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801ad1e:	440a      	add	r2, r1
 801ad20:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ad24:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ad28:	4413      	add	r3, r2
 801ad2a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ad2e:	6803      	ldr	r3, [r0, #0]
 801ad30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad32:	4798      	blx	r3
 801ad34:	2eff      	cmp	r6, #255	; 0xff
 801ad36:	f000 8089 	beq.w	801ae4c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801ad3a:	0743      	lsls	r3, r0, #29
 801ad3c:	d405      	bmi.n	801ad4a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801ad3e:	f1b9 0f00 	cmp.w	r9, #0
 801ad42:	d018      	beq.n	801ad76 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801ad44:	f010 0f10 	tst.w	r0, #16
 801ad48:	d015      	beq.n	801ad76 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801ad4a:	6838      	ldr	r0, [r7, #0]
 801ad4c:	b2ad      	uxth	r5, r5
 801ad4e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801ad52:	6801      	ldr	r1, [r0, #0]
 801ad54:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ad58:	9500      	str	r5, [sp, #0]
 801ad5a:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801ad5e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801ad62:	9602      	str	r6, [sp, #8]
 801ad64:	fa1f f688 	uxth.w	r6, r8
 801ad68:	9601      	str	r6, [sp, #4]
 801ad6a:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801ad6c:	4621      	mov	r1, r4
 801ad6e:	47a8      	blx	r5
 801ad70:	b00d      	add	sp, #52	; 0x34
 801ad72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad76:	6838      	ldr	r0, [r7, #0]
 801ad78:	6803      	ldr	r3, [r0, #0]
 801ad7a:	6a1b      	ldr	r3, [r3, #32]
 801ad7c:	4798      	blx	r3
 801ad7e:	4a38      	ldr	r2, [pc, #224]	; (801ae60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801ad80:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801ad84:	2eff      	cmp	r6, #255	; 0xff
 801ad86:	8813      	ldrh	r3, [r2, #0]
 801ad88:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801ad8c:	fb0c 1303 	mla	r3, ip, r3, r1
 801ad90:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801ad94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad98:	4418      	add	r0, r3
 801ad9a:	d032      	beq.n	801ae02 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801ad9c:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801ada0:	f04f 0c00 	mov.w	ip, #0
 801ada4:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801ada8:	9306      	str	r3, [sp, #24]
 801adaa:	45c4      	cmp	ip, r8
 801adac:	da49      	bge.n	801ae42 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801adae:	4686      	mov	lr, r0
 801adb0:	46a1      	mov	r9, r4
 801adb2:	eba9 0304 	sub.w	r3, r9, r4
 801adb6:	428b      	cmp	r3, r1
 801adb8:	da13      	bge.n	801ade2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801adba:	f819 3b01 	ldrb.w	r3, [r9], #1
 801adbe:	f89e b000 	ldrb.w	fp, [lr]
 801adc2:	9307      	str	r3, [sp, #28]
 801adc4:	9b06      	ldr	r3, [sp, #24]
 801adc6:	fb1b fb03 	smulbb	fp, fp, r3
 801adca:	9b07      	ldr	r3, [sp, #28]
 801adcc:	fb03 b306 	mla	r3, r3, r6, fp
 801add0:	b29b      	uxth	r3, r3
 801add2:	f103 0b01 	add.w	fp, r3, #1
 801add6:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801adda:	121b      	asrs	r3, r3, #8
 801addc:	f80e 3b01 	strb.w	r3, [lr], #1
 801ade0:	e7e7      	b.n	801adb2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801ade2:	8813      	ldrh	r3, [r2, #0]
 801ade4:	f10c 0c01 	add.w	ip, ip, #1
 801ade8:	1b5b      	subs	r3, r3, r5
 801adea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801adee:	4453      	add	r3, sl
 801adf0:	4418      	add	r0, r3
 801adf2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801adf6:	1b5b      	subs	r3, r3, r5
 801adf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801adfc:	4453      	add	r3, sl
 801adfe:	441c      	add	r4, r3
 801ae00:	e7d3      	b.n	801adaa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801ae02:	2600      	movs	r6, #0
 801ae04:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801ae08:	4546      	cmp	r6, r8
 801ae0a:	da1a      	bge.n	801ae42 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801ae0c:	f100 3eff 	add.w	lr, r0, #4294967295
 801ae10:	4623      	mov	r3, r4
 801ae12:	eba3 0904 	sub.w	r9, r3, r4
 801ae16:	4589      	cmp	r9, r1
 801ae18:	da04      	bge.n	801ae24 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801ae1a:	f813 9b01 	ldrb.w	r9, [r3], #1
 801ae1e:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801ae22:	e7f6      	b.n	801ae12 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801ae24:	8813      	ldrh	r3, [r2, #0]
 801ae26:	3601      	adds	r6, #1
 801ae28:	1b5b      	subs	r3, r3, r5
 801ae2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ae2e:	4463      	add	r3, ip
 801ae30:	4418      	add	r0, r3
 801ae32:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801ae36:	1b5b      	subs	r3, r3, r5
 801ae38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ae3c:	4463      	add	r3, ip
 801ae3e:	441c      	add	r4, r3
 801ae40:	e7e2      	b.n	801ae08 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801ae42:	6838      	ldr	r0, [r7, #0]
 801ae44:	6803      	ldr	r3, [r0, #0]
 801ae46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae48:	4798      	blx	r3
 801ae4a:	e791      	b.n	801ad70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ae4c:	f1b9 0f00 	cmp.w	r9, #0
 801ae50:	f47f af78 	bne.w	801ad44 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801ae54:	f010 0f01 	tst.w	r0, #1
 801ae58:	e776      	b.n	801ad48 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801ae5a:	bf00      	nop
 801ae5c:	2000b468 	.word	0x2000b468
 801ae60:	2000b462 	.word	0x2000b462

0801ae64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ae64:	b510      	push	{r4, lr}
 801ae66:	4604      	mov	r4, r0
 801ae68:	2104      	movs	r1, #4
 801ae6a:	f007 fcee 	bl	802284a <_ZdlPvj>
 801ae6e:	4620      	mov	r0, r4
 801ae70:	bd10      	pop	{r4, pc}

0801ae72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ae72:	b510      	push	{r4, lr}
 801ae74:	4604      	mov	r4, r0
 801ae76:	2104      	movs	r1, #4
 801ae78:	f007 fce7 	bl	802284a <_ZdlPvj>
 801ae7c:	4620      	mov	r0, r4
 801ae7e:	bd10      	pop	{r4, pc}

0801ae80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ae80:	b510      	push	{r4, lr}
 801ae82:	4604      	mov	r4, r0
 801ae84:	2104      	movs	r1, #4
 801ae86:	f007 fce0 	bl	802284a <_ZdlPvj>
 801ae8a:	4620      	mov	r0, r4
 801ae8c:	bd10      	pop	{r4, pc}

0801ae8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ae8e:	b510      	push	{r4, lr}
 801ae90:	4604      	mov	r4, r0
 801ae92:	2104      	movs	r1, #4
 801ae94:	f007 fcd9 	bl	802284a <_ZdlPvj>
 801ae98:	4620      	mov	r0, r4
 801ae9a:	bd10      	pop	{r4, pc}

0801ae9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ae9c:	b510      	push	{r4, lr}
 801ae9e:	4604      	mov	r4, r0
 801aea0:	2104      	movs	r1, #4
 801aea2:	f007 fcd2 	bl	802284a <_ZdlPvj>
 801aea6:	4620      	mov	r0, r4
 801aea8:	bd10      	pop	{r4, pc}

0801aeaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801aeaa:	b510      	push	{r4, lr}
 801aeac:	4604      	mov	r4, r0
 801aeae:	2104      	movs	r1, #4
 801aeb0:	f007 fccb 	bl	802284a <_ZdlPvj>
 801aeb4:	4620      	mov	r0, r4
 801aeb6:	bd10      	pop	{r4, pc}

0801aeb8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801aeb8:	b510      	push	{r4, lr}
 801aeba:	4604      	mov	r4, r0
 801aebc:	2104      	movs	r1, #4
 801aebe:	f007 fcc4 	bl	802284a <_ZdlPvj>
 801aec2:	4620      	mov	r0, r4
 801aec4:	bd10      	pop	{r4, pc}

0801aec6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801aec6:	b510      	push	{r4, lr}
 801aec8:	4604      	mov	r4, r0
 801aeca:	2104      	movs	r1, #4
 801aecc:	f007 fcbd 	bl	802284a <_ZdlPvj>
 801aed0:	4620      	mov	r0, r4
 801aed2:	bd10      	pop	{r4, pc}

0801aed4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801aed4:	b510      	push	{r4, lr}
 801aed6:	4604      	mov	r4, r0
 801aed8:	2104      	movs	r1, #4
 801aeda:	f007 fcb6 	bl	802284a <_ZdlPvj>
 801aede:	4620      	mov	r0, r4
 801aee0:	bd10      	pop	{r4, pc}

0801aee2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801aee2:	b510      	push	{r4, lr}
 801aee4:	4604      	mov	r4, r0
 801aee6:	2104      	movs	r1, #4
 801aee8:	f007 fcaf 	bl	802284a <_ZdlPvj>
 801aeec:	4620      	mov	r0, r4
 801aeee:	bd10      	pop	{r4, pc}

0801aef0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801aef0:	b510      	push	{r4, lr}
 801aef2:	4604      	mov	r4, r0
 801aef4:	2104      	movs	r1, #4
 801aef6:	f007 fca8 	bl	802284a <_ZdlPvj>
 801aefa:	4620      	mov	r0, r4
 801aefc:	bd10      	pop	{r4, pc}

0801aefe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801aefe:	b510      	push	{r4, lr}
 801af00:	4604      	mov	r4, r0
 801af02:	2104      	movs	r1, #4
 801af04:	f007 fca1 	bl	802284a <_ZdlPvj>
 801af08:	4620      	mov	r0, r4
 801af0a:	bd10      	pop	{r4, pc}

0801af0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801af0c:	b510      	push	{r4, lr}
 801af0e:	4604      	mov	r4, r0
 801af10:	2104      	movs	r1, #4
 801af12:	f007 fc9a 	bl	802284a <_ZdlPvj>
 801af16:	4620      	mov	r0, r4
 801af18:	bd10      	pop	{r4, pc}

0801af1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801af1a:	b510      	push	{r4, lr}
 801af1c:	4604      	mov	r4, r0
 801af1e:	2104      	movs	r1, #4
 801af20:	f007 fc93 	bl	802284a <_ZdlPvj>
 801af24:	4620      	mov	r0, r4
 801af26:	bd10      	pop	{r4, pc}

0801af28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801af28:	b510      	push	{r4, lr}
 801af2a:	4604      	mov	r4, r0
 801af2c:	2104      	movs	r1, #4
 801af2e:	f007 fc8c 	bl	802284a <_ZdlPvj>
 801af32:	4620      	mov	r0, r4
 801af34:	bd10      	pop	{r4, pc}

0801af36 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801af36:	b510      	push	{r4, lr}
 801af38:	4604      	mov	r4, r0
 801af3a:	2104      	movs	r1, #4
 801af3c:	f007 fc85 	bl	802284a <_ZdlPvj>
 801af40:	4620      	mov	r0, r4
 801af42:	bd10      	pop	{r4, pc}

0801af44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801af44:	b510      	push	{r4, lr}
 801af46:	4604      	mov	r4, r0
 801af48:	2104      	movs	r1, #4
 801af4a:	f007 fc7e 	bl	802284a <_ZdlPvj>
 801af4e:	4620      	mov	r0, r4
 801af50:	bd10      	pop	{r4, pc}

0801af52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801af52:	b510      	push	{r4, lr}
 801af54:	4604      	mov	r4, r0
 801af56:	2104      	movs	r1, #4
 801af58:	f007 fc77 	bl	802284a <_ZdlPvj>
 801af5c:	4620      	mov	r0, r4
 801af5e:	bd10      	pop	{r4, pc}

0801af60 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801af60:	b510      	push	{r4, lr}
 801af62:	4604      	mov	r4, r0
 801af64:	2104      	movs	r1, #4
 801af66:	f007 fc70 	bl	802284a <_ZdlPvj>
 801af6a:	4620      	mov	r0, r4
 801af6c:	bd10      	pop	{r4, pc}

0801af6e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801af6e:	b510      	push	{r4, lr}
 801af70:	4604      	mov	r4, r0
 801af72:	2104      	movs	r1, #4
 801af74:	f007 fc69 	bl	802284a <_ZdlPvj>
 801af78:	4620      	mov	r0, r4
 801af7a:	bd10      	pop	{r4, pc}

0801af7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af80:	4d9e      	ldr	r5, [pc, #632]	; (801b1fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801af82:	4690      	mov	r8, r2
 801af84:	b08f      	sub	sp, #60	; 0x3c
 801af86:	4604      	mov	r4, r0
 801af88:	682a      	ldr	r2, [r5, #0]
 801af8a:	4689      	mov	r9, r1
 801af8c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801af90:	2a02      	cmp	r2, #2
 801af92:	d106      	bne.n	801afa2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801af94:	4b9a      	ldr	r3, [pc, #616]	; (801b200 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801af96:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801af9a:	4a9a      	ldr	r2, [pc, #616]	; (801b204 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801af9c:	489a      	ldr	r0, [pc, #616]	; (801b208 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801af9e:	f007 fc7f 	bl	80228a0 <__assert_func>
 801afa2:	ae0e      	add	r6, sp, #56	; 0x38
 801afa4:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801afa8:	4630      	mov	r0, r6
 801afaa:	f7fe f8b3 	bl	8019114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801afae:	6823      	ldr	r3, [r4, #0]
 801afb0:	4607      	mov	r7, r0
 801afb2:	4620      	mov	r0, r4
 801afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afb6:	4798      	blx	r3
 801afb8:	4287      	cmp	r7, r0
 801afba:	d004      	beq.n	801afc6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801afbc:	4b93      	ldr	r3, [pc, #588]	; (801b20c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801afbe:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801afc2:	4a90      	ldr	r2, [pc, #576]	; (801b204 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801afc4:	e7ea      	b.n	801af9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801afc6:	4630      	mov	r0, r6
 801afc8:	f7fe f820 	bl	801900c <_ZNK8touchgfx6Bitmap7getDataEv>
 801afcc:	4607      	mov	r7, r0
 801afce:	b920      	cbnz	r0, 801afda <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801afd0:	4b8f      	ldr	r3, [pc, #572]	; (801b210 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801afd2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801afd6:	4a8b      	ldr	r2, [pc, #556]	; (801b204 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801afd8:	e7e0      	b.n	801af9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801afda:	f8d8 0000 	ldr.w	r0, [r8]
 801afde:	ab06      	add	r3, sp, #24
 801afe0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801afe4:	f9b8 a000 	ldrsh.w	sl, [r8]
 801afe8:	c303      	stmia	r3!, {r0, r1}
 801afea:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801afee:	ab08      	add	r3, sp, #32
 801aff0:	f8d9 0000 	ldr.w	r0, [r9]
 801aff4:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801aff8:	c303      	stmia	r3!, {r0, r1}
 801affa:	4630      	mov	r0, r6
 801affc:	f7fd fefe 	bl	8018dfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b000:	4680      	mov	r8, r0
 801b002:	4630      	mov	r0, r6
 801b004:	4e83      	ldr	r6, [pc, #524]	; (801b214 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801b006:	f7fd ff33 	bl	8018e70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b00a:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801b00e:	f10d 0920 	add.w	r9, sp, #32
 801b012:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801b016:	a806      	add	r0, sp, #24
 801b018:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801b01c:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801b020:	f7fb fac4 	bl	80165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b024:	4648      	mov	r0, r9
 801b026:	f7fb fac1 	bl	80165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b02a:	a80a      	add	r0, sp, #40	; 0x28
 801b02c:	f7fb fabe 	bl	80165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b030:	4b79      	ldr	r3, [pc, #484]	; (801b218 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801b032:	2100      	movs	r1, #0
 801b034:	f9b6 2000 	ldrsh.w	r2, [r6]
 801b038:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b03c:	4648      	mov	r0, r9
 801b03e:	910c      	str	r1, [sp, #48]	; 0x30
 801b040:	a90c      	add	r1, sp, #48	; 0x30
 801b042:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801b046:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b04a:	f7f8 f96f 	bl	801332c <_ZN8touchgfx4RectaNERKS0_>
 801b04e:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801b052:	9602      	str	r6, [sp, #8]
 801b054:	f1bc 0f00 	cmp.w	ip, #0
 801b058:	f000 80a4 	beq.w	801b1a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b05c:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801b060:	2e00      	cmp	r6, #0
 801b062:	f000 809f 	beq.w	801b1a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b066:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801b06a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801b06e:	4288      	cmp	r0, r1
 801b070:	db36      	blt.n	801b0e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801b072:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801b076:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b07a:	429a      	cmp	r2, r3
 801b07c:	db30      	blt.n	801b0e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801b07e:	4460      	add	r0, ip
 801b080:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801b084:	4461      	add	r1, ip
 801b086:	b200      	sxth	r0, r0
 801b088:	b209      	sxth	r1, r1
 801b08a:	4288      	cmp	r0, r1
 801b08c:	dc28      	bgt.n	801b0e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801b08e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801b092:	4432      	add	r2, r6
 801b094:	440b      	add	r3, r1
 801b096:	b212      	sxth	r2, r2
 801b098:	b21b      	sxth	r3, r3
 801b09a:	429a      	cmp	r2, r3
 801b09c:	dc20      	bgt.n	801b0e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801b09e:	6823      	ldr	r3, [r4, #0]
 801b0a0:	4620      	mov	r0, r4
 801b0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0a4:	4798      	blx	r3
 801b0a6:	4682      	mov	sl, r0
 801b0a8:	6828      	ldr	r0, [r5, #0]
 801b0aa:	6803      	ldr	r3, [r0, #0]
 801b0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0ae:	4798      	blx	r3
 801b0b0:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801b0b4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801b0b8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801b0bc:	9303      	str	r3, [sp, #12]
 801b0be:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b0c2:	1a9b      	subs	r3, r3, r2
 801b0c4:	b29b      	uxth	r3, r3
 801b0c6:	b21c      	sxth	r4, r3
 801b0c8:	2c00      	cmp	r4, #0
 801b0ca:	dc0e      	bgt.n	801b0ea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801b0cc:	b134      	cbz	r4, 801b0dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801b0ce:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b0d2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801b0d6:	4413      	add	r3, r2
 801b0d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801b0dc:	463c      	mov	r4, r7
 801b0de:	e00b      	b.n	801b0f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801b0e0:	4b4e      	ldr	r3, [pc, #312]	; (801b21c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801b0e2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b0e6:	4a47      	ldr	r2, [pc, #284]	; (801b204 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801b0e8:	e758      	b.n	801af9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801b0ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b0ee:	ebab 0303 	sub.w	r3, fp, r3
 801b0f2:	443c      	add	r4, r7
 801b0f4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801b0f8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801b0fc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b100:	1a9b      	subs	r3, r3, r2
 801b102:	b29b      	uxth	r3, r3
 801b104:	b219      	sxth	r1, r3
 801b106:	2900      	cmp	r1, #0
 801b108:	dd50      	ble.n	801b1ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801b10a:	9a03      	ldr	r2, [sp, #12]
 801b10c:	fb02 4401 	mla	r4, r2, r1, r4
 801b110:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801b114:	1ad3      	subs	r3, r2, r3
 801b116:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b11a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801b11e:	f1bc 0f00 	cmp.w	ip, #0
 801b122:	dd3f      	ble.n	801b1a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b124:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801b128:	2e00      	cmp	r6, #0
 801b12a:	dd3b      	ble.n	801b1a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b12c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801b130:	2203      	movs	r2, #3
 801b132:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b136:	fb0a f801 	mul.w	r8, sl, r1
 801b13a:	fb13 8802 	smlabb	r8, r3, r2, r8
 801b13e:	9a02      	ldr	r2, [sp, #8]
 801b140:	4480      	add	r8, r0
 801b142:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801b146:	8812      	ldrh	r2, [r2, #0]
 801b148:	4584      	cmp	ip, r0
 801b14a:	eba2 0303 	sub.w	r3, r2, r3
 801b14e:	bfa8      	it	ge
 801b150:	4684      	movge	ip, r0
 801b152:	459c      	cmp	ip, r3
 801b154:	bfa8      	it	ge
 801b156:	469c      	movge	ip, r3
 801b158:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801b15c:	429e      	cmp	r6, r3
 801b15e:	bfa8      	it	ge
 801b160:	461e      	movge	r6, r3
 801b162:	4b2d      	ldr	r3, [pc, #180]	; (801b218 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801b164:	881b      	ldrh	r3, [r3, #0]
 801b166:	1a59      	subs	r1, r3, r1
 801b168:	4633      	mov	r3, r6
 801b16a:	428e      	cmp	r6, r1
 801b16c:	bfa8      	it	ge
 801b16e:	460b      	movge	r3, r1
 801b170:	4562      	cmp	r2, ip
 801b172:	9302      	str	r3, [sp, #8]
 801b174:	d12d      	bne.n	801b1d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801b176:	455a      	cmp	r2, fp
 801b178:	d12b      	bne.n	801b1d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801b17a:	6828      	ldr	r0, [r5, #0]
 801b17c:	6803      	ldr	r3, [r0, #0]
 801b17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b180:	4798      	blx	r3
 801b182:	07c3      	lsls	r3, r0, #31
 801b184:	d51b      	bpl.n	801b1be <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801b186:	6828      	ldr	r0, [r5, #0]
 801b188:	9b02      	ldr	r3, [sp, #8]
 801b18a:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801b18e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b192:	6803      	ldr	r3, [r0, #0]
 801b194:	f8cd b000 	str.w	fp, [sp]
 801b198:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801b19a:	4623      	mov	r3, r4
 801b19c:	e899 0006 	ldmia.w	r9, {r1, r2}
 801b1a0:	47a8      	blx	r5
 801b1a2:	4607      	mov	r7, r0
 801b1a4:	4638      	mov	r0, r7
 801b1a6:	b00f      	add	sp, #60	; 0x3c
 801b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1ac:	bf1f      	itttt	ne
 801b1ae:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801b1b2:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801b1b6:	189b      	addne	r3, r3, r2
 801b1b8:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801b1bc:	e7ad      	b.n	801b11a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801b1be:	6828      	ldr	r0, [r5, #0]
 801b1c0:	4642      	mov	r2, r8
 801b1c2:	4621      	mov	r1, r4
 801b1c4:	6803      	ldr	r3, [r0, #0]
 801b1c6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801b1c8:	9b02      	ldr	r3, [sp, #8]
 801b1ca:	fb03 f30a 	mul.w	r3, r3, sl
 801b1ce:	47a8      	blx	r5
 801b1d0:	e7e8      	b.n	801b1a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b1d2:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801b1d6:	f04f 0900 	mov.w	r9, #0
 801b1da:	9b02      	ldr	r3, [sp, #8]
 801b1dc:	454b      	cmp	r3, r9
 801b1de:	dde1      	ble.n	801b1a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b1e0:	6828      	ldr	r0, [r5, #0]
 801b1e2:	4642      	mov	r2, r8
 801b1e4:	4621      	mov	r1, r4
 801b1e6:	44d0      	add	r8, sl
 801b1e8:	6803      	ldr	r3, [r0, #0]
 801b1ea:	f109 0901 	add.w	r9, r9, #1
 801b1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1f0:	461e      	mov	r6, r3
 801b1f2:	465b      	mov	r3, fp
 801b1f4:	47b0      	blx	r6
 801b1f6:	9b03      	ldr	r3, [sp, #12]
 801b1f8:	441c      	add	r4, r3
 801b1fa:	e7ee      	b.n	801b1da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801b1fc:	2000b468 	.word	0x2000b468
 801b200:	08026edd 	.word	0x08026edd
 801b204:	080276bd 	.word	0x080276bd
 801b208:	08026eab 	.word	0x08026eab
 801b20c:	08026f91 	.word	0x08026f91
 801b210:	08026fe6 	.word	0x08026fe6
 801b214:	2000b462 	.word	0x2000b462
 801b218:	2000b464 	.word	0x2000b464
 801b21c:	08027024 	.word	0x08027024

0801b220 <_ZN8touchgfx8LCD24bppC1Ev>:
 801b220:	4a0b      	ldr	r2, [pc, #44]	; (801b250 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801b222:	6002      	str	r2, [r0, #0]
 801b224:	2200      	movs	r2, #0
 801b226:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801b22a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801b22e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801b232:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801b236:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801b23a:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801b23e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801b242:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801b246:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801b24a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801b24e:	4770      	bx	lr
 801b250:	08027308 	.word	0x08027308

0801b254 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b258:	b093      	sub	sp, #76	; 0x4c
 801b25a:	880c      	ldrh	r4, [r1, #0]
 801b25c:	4605      	mov	r5, r0
 801b25e:	460f      	mov	r7, r1
 801b260:	4691      	mov	r9, r2
 801b262:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801b266:	b12c      	cbz	r4, 801b274 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801b268:	4b71      	ldr	r3, [pc, #452]	; (801b430 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801b26a:	2167      	movs	r1, #103	; 0x67
 801b26c:	4a71      	ldr	r2, [pc, #452]	; (801b434 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801b26e:	4872      	ldr	r0, [pc, #456]	; (801b438 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801b270:	f007 fb16 	bl	80228a0 <__assert_func>
 801b274:	6810      	ldr	r0, [r2, #0]
 801b276:	ae0e      	add	r6, sp, #56	; 0x38
 801b278:	6851      	ldr	r1, [r2, #4]
 801b27a:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801b440 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801b27e:	c603      	stmia	r6!, {r0, r1}
 801b280:	6818      	ldr	r0, [r3, #0]
 801b282:	ae10      	add	r6, sp, #64	; 0x40
 801b284:	6859      	ldr	r1, [r3, #4]
 801b286:	c603      	stmia	r6!, {r0, r1}
 801b288:	a80e      	add	r0, sp, #56	; 0x38
 801b28a:	f7fb f98f 	bl	80165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b28e:	4649      	mov	r1, r9
 801b290:	a810      	add	r0, sp, #64	; 0x40
 801b292:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801b43c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801b296:	f7fb f971 	bl	801657c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b29a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801b29e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801b2a2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801b2a6:	f8d9 0000 	ldr.w	r0, [r9]
 801b2aa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b2ae:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801b2b2:	440d      	add	r5, r1
 801b2b4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801b2b8:	440a      	add	r2, r1
 801b2ba:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b2be:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b2c2:	4413      	add	r3, r2
 801b2c4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b2c8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801b2cc:	930b      	str	r3, [sp, #44]	; 0x2c
 801b2ce:	6803      	ldr	r3, [r0, #0]
 801b2d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b2d4:	4798      	blx	r3
 801b2d6:	2801      	cmp	r0, #1
 801b2d8:	d11e      	bne.n	801b318 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801b2da:	220b      	movs	r2, #11
 801b2dc:	9008      	str	r0, [sp, #32]
 801b2de:	b2b6      	uxth	r6, r6
 801b2e0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801b2e4:	9207      	str	r2, [sp, #28]
 801b2e6:	4629      	mov	r1, r5
 801b2e8:	f8ba 2000 	ldrh.w	r2, [sl]
 801b2ec:	f8cd 8010 	str.w	r8, [sp, #16]
 801b2f0:	9601      	str	r6, [sp, #4]
 801b2f2:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801b2f6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801b2fa:	9203      	str	r2, [sp, #12]
 801b2fc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b300:	9202      	str	r2, [sp, #8]
 801b302:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801b306:	9200      	str	r2, [sp, #0]
 801b308:	463a      	mov	r2, r7
 801b30a:	f8d9 0000 	ldr.w	r0, [r9]
 801b30e:	f7f8 fc5b 	bl	8013bc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801b312:	b013      	add	sp, #76	; 0x4c
 801b314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b318:	f8d9 0000 	ldr.w	r0, [r9]
 801b31c:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801b320:	6803      	ldr	r3, [r0, #0]
 801b322:	6a1b      	ldr	r3, [r3, #32]
 801b324:	4798      	blx	r3
 801b326:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b32a:	f8ba 3000 	ldrh.w	r3, [sl]
 801b32e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801b332:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801b336:	fb01 2303 	mla	r3, r1, r3, r2
 801b33a:	4621      	mov	r1, r4
 801b33c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b340:	4418      	add	r0, r3
 801b342:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801b346:	930c      	str	r3, [sp, #48]	; 0x30
 801b348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b34a:	4299      	cmp	r1, r3
 801b34c:	da6a      	bge.n	801b424 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801b34e:	1cc2      	adds	r2, r0, #3
 801b350:	46aa      	mov	sl, r5
 801b352:	ebaa 0305 	sub.w	r3, sl, r5
 801b356:	429e      	cmp	r6, r3
 801b358:	dd55      	ble.n	801b406 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801b35a:	2404      	movs	r4, #4
 801b35c:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801b360:	fb14 4303 	smlabb	r3, r4, r3, r4
 801b364:	eb07 0e03 	add.w	lr, r7, r3
 801b368:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801b36c:	b184      	cbz	r4, 801b390 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801b36e:	2cff      	cmp	r4, #255	; 0xff
 801b370:	f817 b003 	ldrb.w	fp, [r7, r3]
 801b374:	d10e      	bne.n	801b394 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801b376:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b37a:	d10b      	bne.n	801b394 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801b37c:	f802 bc03 	strb.w	fp, [r2, #-3]
 801b380:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801b384:	f802 3c02 	strb.w	r3, [r2, #-2]
 801b388:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801b38c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b390:	3203      	adds	r2, #3
 801b392:	e7de      	b.n	801b352 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801b394:	fb08 f404 	mul.w	r4, r8, r4
 801b398:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801b39c:	1c63      	adds	r3, r4, #1
 801b39e:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801b3a2:	121b      	asrs	r3, r3, #8
 801b3a4:	b29c      	uxth	r4, r3
 801b3a6:	43db      	mvns	r3, r3
 801b3a8:	fb1b fb04 	smulbb	fp, fp, r4
 801b3ac:	b2db      	uxtb	r3, r3
 801b3ae:	fb0c bc03 	mla	ip, ip, r3, fp
 801b3b2:	fa1f fc8c 	uxth.w	ip, ip
 801b3b6:	f10c 0b01 	add.w	fp, ip, #1
 801b3ba:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b3be:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801b3c2:	fb1b fb03 	smulbb	fp, fp, r3
 801b3c6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b3ca:	f802 cc03 	strb.w	ip, [r2, #-3]
 801b3ce:	f89e c001 	ldrb.w	ip, [lr, #1]
 801b3d2:	fb0c bc04 	mla	ip, ip, r4, fp
 801b3d6:	fa1f fc8c 	uxth.w	ip, ip
 801b3da:	f10c 0b01 	add.w	fp, ip, #1
 801b3de:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b3e2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b3e6:	f802 cc02 	strb.w	ip, [r2, #-2]
 801b3ea:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801b3ee:	f89e e002 	ldrb.w	lr, [lr, #2]
 801b3f2:	fb1c f303 	smulbb	r3, ip, r3
 801b3f6:	fb0e 3304 	mla	r3, lr, r4, r3
 801b3fa:	b29b      	uxth	r3, r3
 801b3fc:	1c5c      	adds	r4, r3, #1
 801b3fe:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801b402:	121b      	asrs	r3, r3, #8
 801b404:	e7c2      	b.n	801b38c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801b406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b408:	3101      	adds	r1, #1
 801b40a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b40c:	881b      	ldrh	r3, [r3, #0]
 801b40e:	1b9b      	subs	r3, r3, r6
 801b410:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b414:	4413      	add	r3, r2
 801b416:	4418      	add	r0, r3
 801b418:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801b41c:	1b9b      	subs	r3, r3, r6
 801b41e:	444b      	add	r3, r9
 801b420:	441d      	add	r5, r3
 801b422:	e791      	b.n	801b348 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801b424:	4b05      	ldr	r3, [pc, #20]	; (801b43c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801b426:	6818      	ldr	r0, [r3, #0]
 801b428:	6803      	ldr	r3, [r0, #0]
 801b42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b42c:	4798      	blx	r3
 801b42e:	e770      	b.n	801b312 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801b430:	08026e0f 	.word	0x08026e0f
 801b434:	080274df 	.word	0x080274df
 801b438:	08026eab 	.word	0x08026eab
 801b43c:	2000b468 	.word	0x2000b468
 801b440:	2000b462 	.word	0x2000b462

0801b444 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801b444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b448:	4614      	mov	r4, r2
 801b44a:	880a      	ldrh	r2, [r1, #0]
 801b44c:	b091      	sub	sp, #68	; 0x44
 801b44e:	4680      	mov	r8, r0
 801b450:	2a01      	cmp	r2, #1
 801b452:	460e      	mov	r6, r1
 801b454:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801b458:	d005      	beq.n	801b466 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801b45a:	4b6d      	ldr	r3, [pc, #436]	; (801b610 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801b45c:	21b5      	movs	r1, #181	; 0xb5
 801b45e:	4a6d      	ldr	r2, [pc, #436]	; (801b614 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801b460:	486d      	ldr	r0, [pc, #436]	; (801b618 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801b462:	f007 fa1d 	bl	80228a0 <__assert_func>
 801b466:	6820      	ldr	r0, [r4, #0]
 801b468:	ad0c      	add	r5, sp, #48	; 0x30
 801b46a:	6861      	ldr	r1, [r4, #4]
 801b46c:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801b61c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801b470:	c503      	stmia	r5!, {r0, r1}
 801b472:	6818      	ldr	r0, [r3, #0]
 801b474:	ad0e      	add	r5, sp, #56	; 0x38
 801b476:	6859      	ldr	r1, [r3, #4]
 801b478:	c503      	stmia	r5!, {r0, r1}
 801b47a:	a80c      	add	r0, sp, #48	; 0x30
 801b47c:	f7fb f896 	bl	80165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b480:	4621      	mov	r1, r4
 801b482:	a80e      	add	r0, sp, #56	; 0x38
 801b484:	f7fb f87a 	bl	801657c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b488:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b48c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b490:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b494:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801b498:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b49c:	eb08 0401 	add.w	r4, r8, r1
 801b4a0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801b4a4:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801b620 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801b4a8:	440a      	add	r2, r1
 801b4aa:	f8d8 0000 	ldr.w	r0, [r8]
 801b4ae:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801b4b2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b4b6:	4413      	add	r3, r2
 801b4b8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b4bc:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801b4c0:	930a      	str	r3, [sp, #40]	; 0x28
 801b4c2:	6803      	ldr	r3, [r0, #0]
 801b4c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b4c8:	4798      	blx	r3
 801b4ca:	2801      	cmp	r0, #1
 801b4cc:	d11e      	bne.n	801b50c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801b4ce:	220b      	movs	r2, #11
 801b4d0:	9008      	str	r0, [sp, #32]
 801b4d2:	b2ad      	uxth	r5, r5
 801b4d4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b4d8:	9207      	str	r2, [sp, #28]
 801b4da:	4621      	mov	r1, r4
 801b4dc:	f8b9 2000 	ldrh.w	r2, [r9]
 801b4e0:	9501      	str	r5, [sp, #4]
 801b4e2:	9206      	str	r2, [sp, #24]
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801b4ea:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801b4ee:	9203      	str	r2, [sp, #12]
 801b4f0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801b4f4:	9202      	str	r2, [sp, #8]
 801b4f6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b4fa:	9200      	str	r2, [sp, #0]
 801b4fc:	4632      	mov	r2, r6
 801b4fe:	f8d8 0000 	ldr.w	r0, [r8]
 801b502:	f7f8 fb61 	bl	8013bc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801b506:	b011      	add	sp, #68	; 0x44
 801b508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b50c:	f8d8 0000 	ldr.w	r0, [r8]
 801b510:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801b514:	6803      	ldr	r3, [r0, #0]
 801b516:	6a1b      	ldr	r3, [r3, #32]
 801b518:	4798      	blx	r3
 801b51a:	f8b9 3000 	ldrh.w	r3, [r9]
 801b51e:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801b522:	f04f 0e00 	mov.w	lr, #0
 801b526:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b52a:	fa1f f987 	uxth.w	r9, r7
 801b52e:	fb01 2303 	mla	r3, r1, r3, r2
 801b532:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801b536:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b53a:	b289      	uxth	r1, r1
 801b53c:	4418      	add	r0, r3
 801b53e:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801b542:	930b      	str	r3, [sp, #44]	; 0x2c
 801b544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b546:	459e      	cmp	lr, r3
 801b548:	da5c      	bge.n	801b604 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801b54a:	1cc3      	adds	r3, r0, #3
 801b54c:	46a2      	mov	sl, r4
 801b54e:	ebaa 0204 	sub.w	r2, sl, r4
 801b552:	4295      	cmp	r5, r2
 801b554:	dd46      	ble.n	801b5e4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801b556:	f04f 0c03 	mov.w	ip, #3
 801b55a:	f04f 0b04 	mov.w	fp, #4
 801b55e:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801b562:	2fff      	cmp	r7, #255	; 0xff
 801b564:	fb1c b202 	smlabb	r2, ip, r2, fp
 801b568:	eb06 0c02 	add.w	ip, r6, r2
 801b56c:	f816 b002 	ldrb.w	fp, [r6, r2]
 801b570:	d02f      	beq.n	801b5d2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801b572:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801b576:	fb12 f201 	smulbb	r2, r2, r1
 801b57a:	fb0b 2209 	mla	r2, fp, r9, r2
 801b57e:	b292      	uxth	r2, r2
 801b580:	f102 0b01 	add.w	fp, r2, #1
 801b584:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801b588:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801b58c:	fb1b fb01 	smulbb	fp, fp, r1
 801b590:	1212      	asrs	r2, r2, #8
 801b592:	f803 2c03 	strb.w	r2, [r3, #-3]
 801b596:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801b59a:	fb02 b209 	mla	r2, r2, r9, fp
 801b59e:	b292      	uxth	r2, r2
 801b5a0:	f102 0b01 	add.w	fp, r2, #1
 801b5a4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801b5a8:	1212      	asrs	r2, r2, #8
 801b5aa:	f803 2c02 	strb.w	r2, [r3, #-2]
 801b5ae:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801b5b2:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801b5b6:	fb1c fc01 	smulbb	ip, ip, r1
 801b5ba:	fb02 c209 	mla	r2, r2, r9, ip
 801b5be:	b292      	uxth	r2, r2
 801b5c0:	f102 0c01 	add.w	ip, r2, #1
 801b5c4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b5c8:	1212      	asrs	r2, r2, #8
 801b5ca:	f803 2c01 	strb.w	r2, [r3, #-1]
 801b5ce:	3303      	adds	r3, #3
 801b5d0:	e7bd      	b.n	801b54e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801b5d2:	f803 bc03 	strb.w	fp, [r3, #-3]
 801b5d6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801b5da:	f803 2c02 	strb.w	r2, [r3, #-2]
 801b5de:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801b5e2:	e7f2      	b.n	801b5ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801b5e4:	4b0d      	ldr	r3, [pc, #52]	; (801b61c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801b5e6:	f10e 0e01 	add.w	lr, lr, #1
 801b5ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b5ec:	881b      	ldrh	r3, [r3, #0]
 801b5ee:	1b5b      	subs	r3, r3, r5
 801b5f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b5f4:	4413      	add	r3, r2
 801b5f6:	4418      	add	r0, r3
 801b5f8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b5fc:	1b5b      	subs	r3, r3, r5
 801b5fe:	4443      	add	r3, r8
 801b600:	441c      	add	r4, r3
 801b602:	e79f      	b.n	801b544 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801b604:	4b06      	ldr	r3, [pc, #24]	; (801b620 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801b606:	6818      	ldr	r0, [r3, #0]
 801b608:	6803      	ldr	r3, [r0, #0]
 801b60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b60c:	4798      	blx	r3
 801b60e:	e77a      	b.n	801b506 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801b610:	08026d1b 	.word	0x08026d1b
 801b614:	080273d2 	.word	0x080273d2
 801b618:	08026eab 	.word	0x08026eab
 801b61c:	2000b462 	.word	0x2000b462
 801b620:	2000b468 	.word	0x2000b468

0801b624 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801b624:	b570      	push	{r4, r5, r6, lr}
 801b626:	780d      	ldrb	r5, [r1, #0]
 801b628:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801b62c:	2d01      	cmp	r5, #1
 801b62e:	d00d      	beq.n	801b64c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801b630:	d307      	bcc.n	801b642 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801b632:	2d02      	cmp	r5, #2
 801b634:	d10f      	bne.n	801b656 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801b636:	4b08      	ldr	r3, [pc, #32]	; (801b658 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801b638:	215a      	movs	r1, #90	; 0x5a
 801b63a:	4a08      	ldr	r2, [pc, #32]	; (801b65c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801b63c:	4808      	ldr	r0, [pc, #32]	; (801b660 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801b63e:	f007 f92f 	bl	80228a0 <__assert_func>
 801b642:	9404      	str	r4, [sp, #16]
 801b644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b648:	f7ff be04 	b.w	801b254 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801b64c:	9404      	str	r4, [sp, #16]
 801b64e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b652:	f7ff bef7 	b.w	801b444 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801b656:	bd70      	pop	{r4, r5, r6, pc}
 801b658:	08026cd0 	.word	0x08026cd0
 801b65c:	08027350 	.word	0x08027350
 801b660:	08026eab 	.word	0x08026eab

0801b664 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b668:	b08b      	sub	sp, #44	; 0x2c
 801b66a:	460c      	mov	r4, r1
 801b66c:	4680      	mov	r8, r0
 801b66e:	469a      	mov	sl, r3
 801b670:	6808      	ldr	r0, [r1, #0]
 801b672:	ab06      	add	r3, sp, #24
 801b674:	6849      	ldr	r1, [r1, #4]
 801b676:	c303      	stmia	r3!, {r0, r1}
 801b678:	6810      	ldr	r0, [r2, #0]
 801b67a:	ab08      	add	r3, sp, #32
 801b67c:	6851      	ldr	r1, [r2, #4]
 801b67e:	c303      	stmia	r3!, {r0, r1}
 801b680:	a806      	add	r0, sp, #24
 801b682:	f7fa ff93 	bl	80165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b686:	4621      	mov	r1, r4
 801b688:	a808      	add	r0, sp, #32
 801b68a:	4c61      	ldr	r4, [pc, #388]	; (801b810 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801b68c:	f7fa ff76 	bl	801657c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b690:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b694:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b698:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b69c:	6820      	ldr	r0, [r4, #0]
 801b69e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b6a2:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801b6a6:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801b6aa:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801b6ae:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b6b2:	440a      	add	r2, r1
 801b6b4:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b6b8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b6bc:	4413      	add	r3, r2
 801b6be:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b6c2:	6803      	ldr	r3, [r0, #0]
 801b6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6c6:	4798      	blx	r3
 801b6c8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b6cc:	d118      	bne.n	801b700 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801b6ce:	f010 0f20 	tst.w	r0, #32
 801b6d2:	6820      	ldr	r0, [r4, #0]
 801b6d4:	d017      	beq.n	801b706 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801b6d6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801b6da:	b2bf      	uxth	r7, r7
 801b6dc:	6801      	ldr	r1, [r0, #0]
 801b6de:	9402      	str	r4, [sp, #8]
 801b6e0:	fa1f f489 	uxth.w	r4, r9
 801b6e4:	f8cd a00c 	str.w	sl, [sp, #12]
 801b6e8:	9401      	str	r4, [sp, #4]
 801b6ea:	9700      	str	r7, [sp, #0]
 801b6ec:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b6f0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801b6f2:	4641      	mov	r1, r8
 801b6f4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b6f8:	47a0      	blx	r4
 801b6fa:	b00b      	add	sp, #44	; 0x2c
 801b6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b700:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b704:	e7e5      	b.n	801b6d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801b706:	6803      	ldr	r3, [r0, #0]
 801b708:	6a1b      	ldr	r3, [r3, #32]
 801b70a:	4798      	blx	r3
 801b70c:	4b41      	ldr	r3, [pc, #260]	; (801b814 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801b70e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801b712:	f04f 0c00 	mov.w	ip, #0
 801b716:	881a      	ldrh	r2, [r3, #0]
 801b718:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801b71c:	fb04 1202 	mla	r2, r4, r2, r1
 801b720:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b724:	4410      	add	r0, r2
 801b726:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801b72a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801b72e:	0092      	lsls	r2, r2, #2
 801b730:	9105      	str	r1, [sp, #20]
 801b732:	9204      	str	r2, [sp, #16]
 801b734:	45cc      	cmp	ip, r9
 801b736:	da65      	bge.n	801b804 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801b738:	1cc4      	adds	r4, r0, #3
 801b73a:	f108 0504 	add.w	r5, r8, #4
 801b73e:	f04f 0e00 	mov.w	lr, #0
 801b742:	45be      	cmp	lr, r7
 801b744:	da4d      	bge.n	801b7e2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801b746:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801b74a:	b181      	cbz	r1, 801b76e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801b74c:	29ff      	cmp	r1, #255	; 0xff
 801b74e:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801b752:	d111      	bne.n	801b778 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801b754:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b758:	d10e      	bne.n	801b778 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801b75a:	f804 bc03 	strb.w	fp, [r4, #-3]
 801b75e:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801b762:	f804 2c02 	strb.w	r2, [r4, #-2]
 801b766:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801b76a:	f804 2c01 	strb.w	r2, [r4, #-1]
 801b76e:	f10e 0e01 	add.w	lr, lr, #1
 801b772:	3403      	adds	r4, #3
 801b774:	3504      	adds	r5, #4
 801b776:	e7e4      	b.n	801b742 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801b778:	fb0a f101 	mul.w	r1, sl, r1
 801b77c:	1c4a      	adds	r2, r1, #1
 801b77e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801b782:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801b786:	1212      	asrs	r2, r2, #8
 801b788:	b296      	uxth	r6, r2
 801b78a:	43d2      	mvns	r2, r2
 801b78c:	fb1b fb06 	smulbb	fp, fp, r6
 801b790:	b2d2      	uxtb	r2, r2
 801b792:	fb01 b102 	mla	r1, r1, r2, fp
 801b796:	b289      	uxth	r1, r1
 801b798:	f101 0b01 	add.w	fp, r1, #1
 801b79c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801b7a0:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801b7a4:	fb1b fb02 	smulbb	fp, fp, r2
 801b7a8:	1209      	asrs	r1, r1, #8
 801b7aa:	f804 1c03 	strb.w	r1, [r4, #-3]
 801b7ae:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801b7b2:	fb01 b106 	mla	r1, r1, r6, fp
 801b7b6:	b289      	uxth	r1, r1
 801b7b8:	f101 0b01 	add.w	fp, r1, #1
 801b7bc:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801b7c0:	1209      	asrs	r1, r1, #8
 801b7c2:	f804 1c02 	strb.w	r1, [r4, #-2]
 801b7c6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801b7ca:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801b7ce:	fb11 f202 	smulbb	r2, r1, r2
 801b7d2:	fb0b 2206 	mla	r2, fp, r6, r2
 801b7d6:	b292      	uxth	r2, r2
 801b7d8:	1c56      	adds	r6, r2, #1
 801b7da:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801b7de:	1212      	asrs	r2, r2, #8
 801b7e0:	e7c3      	b.n	801b76a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801b7e2:	881a      	ldrh	r2, [r3, #0]
 801b7e4:	f10c 0c01 	add.w	ip, ip, #1
 801b7e8:	9905      	ldr	r1, [sp, #20]
 801b7ea:	1bd2      	subs	r2, r2, r7
 801b7ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b7f0:	440a      	add	r2, r1
 801b7f2:	9904      	ldr	r1, [sp, #16]
 801b7f4:	4410      	add	r0, r2
 801b7f6:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801b7fa:	1bd2      	subs	r2, r2, r7
 801b7fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801b800:	4490      	add	r8, r2
 801b802:	e797      	b.n	801b734 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801b804:	4b02      	ldr	r3, [pc, #8]	; (801b810 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801b806:	6818      	ldr	r0, [r3, #0]
 801b808:	6803      	ldr	r3, [r0, #0]
 801b80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b80c:	4798      	blx	r3
 801b80e:	e774      	b.n	801b6fa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801b810:	2000b468 	.word	0x2000b468
 801b814:	2000b462 	.word	0x2000b462

0801b818 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b81c:	b085      	sub	sp, #20
 801b81e:	4606      	mov	r6, r0
 801b820:	460c      	mov	r4, r1
 801b822:	4691      	mov	r9, r2
 801b824:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801b828:	4698      	mov	r8, r3
 801b82a:	b385      	cbz	r5, 801b88e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801b82c:	4608      	mov	r0, r1
 801b82e:	f7fd fae5 	bl	8018dfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b832:	4607      	mov	r7, r0
 801b834:	4620      	mov	r0, r4
 801b836:	f7fd fb1b 	bl	8018e70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b83a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b83e:	4620      	mov	r0, r4
 801b840:	f8ad 9008 	strh.w	r9, [sp, #8]
 801b844:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b848:	f8ad 700c 	strh.w	r7, [sp, #12]
 801b84c:	f7fd fc62 	bl	8019114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b850:	2801      	cmp	r0, #1
 801b852:	d00f      	beq.n	801b874 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b854:	4620      	mov	r0, r4
 801b856:	f7fd fc5d 	bl	8019114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b85a:	2802      	cmp	r0, #2
 801b85c:	d00a      	beq.n	801b874 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b85e:	4620      	mov	r0, r4
 801b860:	f7fd fc58 	bl	8019114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b864:	280b      	cmp	r0, #11
 801b866:	d005      	beq.n	801b874 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b868:	4b1b      	ldr	r3, [pc, #108]	; (801b8d8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801b86a:	2142      	movs	r1, #66	; 0x42
 801b86c:	4a1b      	ldr	r2, [pc, #108]	; (801b8dc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801b86e:	481c      	ldr	r0, [pc, #112]	; (801b8e0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801b870:	f007 f816 	bl	80228a0 <__assert_func>
 801b874:	4620      	mov	r0, r4
 801b876:	f7fd fc4d 	bl	8019114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b87a:	2802      	cmp	r0, #2
 801b87c:	4620      	mov	r0, r4
 801b87e:	d109      	bne.n	801b894 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801b880:	f7fd fbc4 	bl	801900c <_ZNK8touchgfx6Bitmap7getDataEv>
 801b884:	462b      	mov	r3, r5
 801b886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b888:	a902      	add	r1, sp, #8
 801b88a:	f7ff feeb 	bl	801b664 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b88e:	b005      	add	sp, #20
 801b890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b894:	f7fd fc3e 	bl	8019114 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b898:	280b      	cmp	r0, #11
 801b89a:	d10e      	bne.n	801b8ba <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801b89c:	4620      	mov	r0, r4
 801b89e:	f7fd fbb5 	bl	801900c <_ZNK8touchgfx6Bitmap7getDataEv>
 801b8a2:	4606      	mov	r6, r0
 801b8a4:	4620      	mov	r0, r4
 801b8a6:	f7fd fbe3 	bl	8019070 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b8aa:	9500      	str	r5, [sp, #0]
 801b8ac:	4601      	mov	r1, r0
 801b8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8b0:	aa02      	add	r2, sp, #8
 801b8b2:	4630      	mov	r0, r6
 801b8b4:	f7ff feb6 	bl	801b624 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b8b8:	e7e9      	b.n	801b88e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801b8ba:	6833      	ldr	r3, [r6, #0]
 801b8bc:	4620      	mov	r0, r4
 801b8be:	691f      	ldr	r7, [r3, #16]
 801b8c0:	f7fd fba4 	bl	801900c <_ZNK8touchgfx6Bitmap7getDataEv>
 801b8c4:	2300      	movs	r3, #0
 801b8c6:	4601      	mov	r1, r0
 801b8c8:	aa02      	add	r2, sp, #8
 801b8ca:	4630      	mov	r0, r6
 801b8cc:	e9cd 5300 	strd	r5, r3, [sp]
 801b8d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8d2:	47b8      	blx	r7
 801b8d4:	e7db      	b.n	801b88e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801b8d6:	bf00      	nop
 801b8d8:	08026d69 	.word	0x08026d69
 801b8dc:	0802745b 	.word	0x0802745b
 801b8e0:	08026eab 	.word	0x08026eab

0801b8e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801b8e4:	b570      	push	{r4, r5, r6, lr}
 801b8e6:	9d04      	ldr	r5, [sp, #16]
 801b8e8:	460c      	mov	r4, r1
 801b8ea:	4619      	mov	r1, r3
 801b8ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b8f0:	2a0c      	cmp	r2, #12
 801b8f2:	d826      	bhi.n	801b942 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801b8f4:	e8df f002 	tbb	[pc, r2]
 801b8f8:	200e1407 	.word	0x200e1407
 801b8fc:	20202020 	.word	0x20202020
 801b900:	20202020 	.word	0x20202020
 801b904:	20          	.byte	0x20
 801b905:	00          	.byte	0x00
 801b906:	4b0f      	ldr	r3, [pc, #60]	; (801b944 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801b908:	f240 117f 	movw	r1, #383	; 0x17f
 801b90c:	4a0e      	ldr	r2, [pc, #56]	; (801b948 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801b90e:	480f      	ldr	r0, [pc, #60]	; (801b94c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801b910:	f006 ffc6 	bl	80228a0 <__assert_func>
 801b914:	462a      	mov	r2, r5
 801b916:	4620      	mov	r0, r4
 801b918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b91c:	f7ff bea2 	b.w	801b664 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b920:	6802      	ldr	r2, [r0, #0]
 801b922:	2600      	movs	r6, #0
 801b924:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801b928:	6916      	ldr	r6, [r2, #16]
 801b92a:	462b      	mov	r3, r5
 801b92c:	460a      	mov	r2, r1
 801b92e:	4621      	mov	r1, r4
 801b930:	46b4      	mov	ip, r6
 801b932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b936:	4760      	bx	ip
 801b938:	4b05      	ldr	r3, [pc, #20]	; (801b950 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801b93a:	f240 1191 	movw	r1, #401	; 0x191
 801b93e:	4a02      	ldr	r2, [pc, #8]	; (801b948 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801b940:	e7e5      	b.n	801b90e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801b942:	bd70      	pop	{r4, r5, r6, pc}
 801b944:	08027084 	.word	0x08027084
 801b948:	08027743 	.word	0x08027743
 801b94c:	08026eab 	.word	0x08026eab
 801b950:	080270c5 	.word	0x080270c5

0801b954 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801b954:	b158      	cbz	r0, 801b96e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801b956:	2902      	cmp	r1, #2
 801b958:	d00f      	beq.n	801b97a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801b95a:	2903      	cmp	r1, #3
 801b95c:	d010      	beq.n	801b980 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801b95e:	2901      	cmp	r1, #1
 801b960:	d101      	bne.n	801b966 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b962:	2001      	movs	r0, #1
 801b964:	4770      	bx	lr
 801b966:	4b08      	ldr	r3, [pc, #32]	; (801b988 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801b968:	8819      	ldrh	r1, [r3, #0]
 801b96a:	4248      	negs	r0, r1
 801b96c:	4770      	bx	lr
 801b96e:	2902      	cmp	r1, #2
 801b970:	d006      	beq.n	801b980 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801b972:	2903      	cmp	r1, #3
 801b974:	d0f7      	beq.n	801b966 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b976:	2901      	cmp	r1, #1
 801b978:	d1f3      	bne.n	801b962 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801b97a:	4b03      	ldr	r3, [pc, #12]	; (801b988 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801b97c:	8818      	ldrh	r0, [r3, #0]
 801b97e:	4770      	bx	lr
 801b980:	f04f 30ff 	mov.w	r0, #4294967295
 801b984:	4770      	bx	lr
 801b986:	bf00      	nop
 801b988:	2000b462 	.word	0x2000b462

0801b98c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801b98c:	b170      	cbz	r0, 801b9ac <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801b98e:	2902      	cmp	r1, #2
 801b990:	d012      	beq.n	801b9b8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801b992:	2903      	cmp	r1, #3
 801b994:	d006      	beq.n	801b9a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801b996:	2901      	cmp	r1, #1
 801b998:	d001      	beq.n	801b99e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801b99a:	2001      	movs	r0, #1
 801b99c:	4770      	bx	lr
 801b99e:	4b08      	ldr	r3, [pc, #32]	; (801b9c0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801b9a0:	8818      	ldrh	r0, [r3, #0]
 801b9a2:	4770      	bx	lr
 801b9a4:	4b06      	ldr	r3, [pc, #24]	; (801b9c0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801b9a6:	8818      	ldrh	r0, [r3, #0]
 801b9a8:	4240      	negs	r0, r0
 801b9aa:	4770      	bx	lr
 801b9ac:	2902      	cmp	r1, #2
 801b9ae:	d0f9      	beq.n	801b9a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801b9b0:	2903      	cmp	r1, #3
 801b9b2:	d0f2      	beq.n	801b99a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801b9b4:	2901      	cmp	r1, #1
 801b9b6:	d1f2      	bne.n	801b99e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801b9b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b9bc:	4770      	bx	lr
 801b9be:	bf00      	nop
 801b9c0:	2000b462 	.word	0x2000b462

0801b9c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9c8:	b095      	sub	sp, #84	; 0x54
 801b9ca:	9109      	str	r1, [sp, #36]	; 0x24
 801b9cc:	a910      	add	r1, sp, #64	; 0x40
 801b9ce:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801b9d2:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801b9d6:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801b9da:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801b9de:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801b9e2:	e881 000c 	stmia.w	r1, {r2, r3}
 801b9e6:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801b9ea:	9306      	str	r3, [sp, #24]
 801b9ec:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801b9f0:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801b9f4:	930e      	str	r3, [sp, #56]	; 0x38
 801b9f6:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801b9fa:	798f      	ldrb	r7, [r1, #6]
 801b9fc:	930a      	str	r3, [sp, #40]	; 0x28
 801b9fe:	7b4b      	ldrb	r3, [r1, #13]
 801ba00:	0158      	lsls	r0, r3, #5
 801ba02:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ba06:	4338      	orrs	r0, r7
 801ba08:	9008      	str	r0, [sp, #32]
 801ba0a:	f000 8174 	beq.w	801bcf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ba0e:	011b      	lsls	r3, r3, #4
 801ba10:	79c8      	ldrb	r0, [r1, #7]
 801ba12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba16:	4303      	orrs	r3, r0
 801ba18:	9307      	str	r3, [sp, #28]
 801ba1a:	f000 816c 	beq.w	801bcf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ba1e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ba22:	b29b      	uxth	r3, r3
 801ba24:	2e00      	cmp	r6, #0
 801ba26:	f000 8112 	beq.w	801bc4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801ba2a:	1af6      	subs	r6, r6, r3
 801ba2c:	b2b6      	uxth	r6, r6
 801ba2e:	0433      	lsls	r3, r6, #16
 801ba30:	d502      	bpl.n	801ba38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ba32:	1bad      	subs	r5, r5, r6
 801ba34:	2600      	movs	r6, #0
 801ba36:	b22d      	sxth	r5, r5
 801ba38:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ba3c:	a810      	add	r0, sp, #64	; 0x40
 801ba3e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801ba42:	428d      	cmp	r5, r1
 801ba44:	b28b      	uxth	r3, r1
 801ba46:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801ba4a:	bfbf      	itttt	lt
 801ba4c:	18f6      	addlt	r6, r6, r3
 801ba4e:	1b75      	sublt	r5, r6, r5
 801ba50:	b2ae      	uxthlt	r6, r5
 801ba52:	460d      	movlt	r5, r1
 801ba54:	8891      	ldrh	r1, [r2, #4]
 801ba56:	440b      	add	r3, r1
 801ba58:	4629      	mov	r1, r5
 801ba5a:	b21b      	sxth	r3, r3
 801ba5c:	930d      	str	r3, [sp, #52]	; 0x34
 801ba5e:	88d3      	ldrh	r3, [r2, #6]
 801ba60:	9a06      	ldr	r2, [sp, #24]
 801ba62:	449a      	add	sl, r3
 801ba64:	fa0f f38a 	sxth.w	r3, sl
 801ba68:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801ba6c:	930c      	str	r3, [sp, #48]	; 0x30
 801ba6e:	4bb8      	ldr	r3, [pc, #736]	; (801bd50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801ba70:	f893 b000 	ldrb.w	fp, [r3]
 801ba74:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ba78:	f1dc 0300 	rsbs	r3, ip, #0
 801ba7c:	eb43 030c 	adc.w	r3, r3, ip
 801ba80:	930b      	str	r3, [sp, #44]	; 0x2c
 801ba82:	464b      	mov	r3, r9
 801ba84:	f7fa fc6c 	bl	8016360 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ba88:	4629      	mov	r1, r5
 801ba8a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801ba8e:	464b      	mov	r3, r9
 801ba90:	9a06      	ldr	r2, [sp, #24]
 801ba92:	a810      	add	r0, sp, #64	; 0x40
 801ba94:	f7fa fc7c 	bl	8016390 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ba98:	a914      	add	r1, sp, #80	; 0x50
 801ba9a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ba9e:	a813      	add	r0, sp, #76	; 0x4c
 801baa0:	f7fa fd56 	bl	8016550 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801baa4:	f1b9 0f00 	cmp.w	r9, #0
 801baa8:	f040 80d4 	bne.w	801bc54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801baac:	f1bb 0f01 	cmp.w	fp, #1
 801bab0:	f040 80d8 	bne.w	801bc64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801bab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	f040 8122 	bne.w	801bd00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801babc:	4ba5      	ldr	r3, [pc, #660]	; (801bd54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801babe:	6818      	ldr	r0, [r3, #0]
 801bac0:	6803      	ldr	r3, [r0, #0]
 801bac2:	6a1b      	ldr	r3, [r3, #32]
 801bac4:	4798      	blx	r3
 801bac6:	4aa4      	ldr	r2, [pc, #656]	; (801bd58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801bac8:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801bacc:	8811      	ldrh	r1, [r2, #0]
 801bace:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801bad2:	fb01 2303 	mla	r3, r1, r3, r2
 801bad6:	2201      	movs	r2, #1
 801bad8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801badc:	4590      	cmp	r8, r2
 801bade:	4403      	add	r3, r0
 801bae0:	9307      	str	r3, [sp, #28]
 801bae2:	fa02 f308 	lsl.w	r3, r2, r8
 801bae6:	f103 33ff 	add.w	r3, r3, #4294967295
 801baea:	b2db      	uxtb	r3, r3
 801baec:	930f      	str	r3, [sp, #60]	; 0x3c
 801baee:	f000 8109 	beq.w	801bd04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801baf2:	f1b8 0f02 	cmp.w	r8, #2
 801baf6:	f000 813e 	beq.w	801bd76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801bafa:	f1b8 0f04 	cmp.w	r8, #4
 801bafe:	f000 8132 	beq.w	801bd66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801bb02:	b906      	cbnz	r6, 801bb06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801bb04:	b174      	cbz	r4, 801bb24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801bb06:	fb17 6304 	smlabb	r3, r7, r4, r6
 801bb0a:	9924      	ldr	r1, [sp, #144]	; 0x90
 801bb0c:	ebaa 0a04 	sub.w	sl, sl, r4
 801bb10:	fb13 f308 	smulbb	r3, r3, r8
 801bb14:	fa1f fa8a 	uxth.w	sl, sl
 801bb18:	b29b      	uxth	r3, r3
 801bb1a:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801bb1e:	f003 0407 	and.w	r4, r3, #7
 801bb22:	9124      	str	r1, [sp, #144]	; 0x90
 801bb24:	4649      	mov	r1, r9
 801bb26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801bb28:	f7ff ff14 	bl	801b954 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801bb2c:	4649      	mov	r1, r9
 801bb2e:	4683      	mov	fp, r0
 801bb30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801bb32:	f7ff ff2b 	bl	801b98c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801bb36:	9906      	ldr	r1, [sp, #24]
 801bb38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb3a:	1bad      	subs	r5, r5, r6
 801bb3c:	1a5b      	subs	r3, r3, r1
 801bb3e:	459a      	cmp	sl, r3
 801bb40:	bfa8      	it	ge
 801bb42:	469a      	movge	sl, r3
 801bb44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb46:	1b5d      	subs	r5, r3, r5
 801bb48:	9b08      	ldr	r3, [sp, #32]
 801bb4a:	429d      	cmp	r5, r3
 801bb4c:	bfd4      	ite	le
 801bb4e:	ebc6 0605 	rsble	r6, r6, r5
 801bb52:	ebc6 0603 	rsbgt	r6, r6, r3
 801bb56:	1bbf      	subs	r7, r7, r6
 801bb58:	fb0b 0016 	mls	r0, fp, r6, r0
 801bb5c:	fb08 f307 	mul.w	r3, r8, r7
 801bb60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bb64:	9308      	str	r3, [sp, #32]
 801bb66:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bb68:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801bb6c:	930b      	str	r3, [sp, #44]	; 0x2c
 801bb6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bb70:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bb74:	930c      	str	r3, [sp, #48]	; 0x30
 801bb76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bb78:	b2db      	uxtb	r3, r3
 801bb7a:	930d      	str	r3, [sp, #52]	; 0x34
 801bb7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bb7e:	7819      	ldrb	r1, [r3, #0]
 801bb80:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801bb84:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801bb88:	4121      	asrs	r1, r4
 801bb8a:	9306      	str	r3, [sp, #24]
 801bb8c:	fb03 0b0b 	mla	fp, r3, fp, r0
 801bb90:	b2c9      	uxtb	r1, r1
 801bb92:	f1ba 0f00 	cmp.w	sl, #0
 801bb96:	f340 80d1 	ble.w	801bd3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801bb9a:	46b6      	mov	lr, r6
 801bb9c:	9807      	ldr	r0, [sp, #28]
 801bb9e:	f1be 0f00 	cmp.w	lr, #0
 801bba2:	f340 80b8 	ble.w	801bd16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801bba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bba8:	400b      	ands	r3, r1
 801bbaa:	d03e      	beq.n	801bc2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801bbac:	fb13 f302 	smulbb	r3, r3, r2
 801bbb0:	2bfe      	cmp	r3, #254	; 0xfe
 801bbb2:	dd03      	ble.n	801bbbc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801bbb4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801bbb6:	2dff      	cmp	r5, #255	; 0xff
 801bbb8:	f000 80a6 	beq.w	801bd08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801bbbc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801bbbe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801bbc0:	fb15 f303 	smulbb	r3, r5, r3
 801bbc4:	b29b      	uxth	r3, r3
 801bbc6:	1c5d      	adds	r5, r3, #1
 801bbc8:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801bbcc:	7805      	ldrb	r5, [r0, #0]
 801bbce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bbd2:	fa1f fc83 	uxth.w	ip, r3
 801bbd6:	43db      	mvns	r3, r3
 801bbd8:	fb17 f90c 	smulbb	r9, r7, ip
 801bbdc:	b2db      	uxtb	r3, r3
 801bbde:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801bbe0:	fb05 9503 	mla	r5, r5, r3, r9
 801bbe4:	b2ad      	uxth	r5, r5
 801bbe6:	f105 0901 	add.w	r9, r5, #1
 801bbea:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801bbee:	fb17 f90c 	smulbb	r9, r7, ip
 801bbf2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801bbf4:	122d      	asrs	r5, r5, #8
 801bbf6:	fb17 fc0c 	smulbb	ip, r7, ip
 801bbfa:	7005      	strb	r5, [r0, #0]
 801bbfc:	7845      	ldrb	r5, [r0, #1]
 801bbfe:	fb05 9503 	mla	r5, r5, r3, r9
 801bc02:	b2ad      	uxth	r5, r5
 801bc04:	f105 0901 	add.w	r9, r5, #1
 801bc08:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801bc0c:	122d      	asrs	r5, r5, #8
 801bc0e:	7045      	strb	r5, [r0, #1]
 801bc10:	7885      	ldrb	r5, [r0, #2]
 801bc12:	fb05 cc03 	mla	ip, r5, r3, ip
 801bc16:	fa1f fc8c 	uxth.w	ip, ip
 801bc1a:	f10c 0301 	add.w	r3, ip, #1
 801bc1e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801bc22:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bc26:	f880 c002 	strb.w	ip, [r0, #2]
 801bc2a:	4444      	add	r4, r8
 801bc2c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bc30:	b2a4      	uxth	r4, r4
 801bc32:	2c07      	cmp	r4, #7
 801bc34:	bf89      	itett	hi
 801bc36:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801bc38:	fa41 f108 	asrls.w	r1, r1, r8
 801bc3c:	2400      	movhi	r4, #0
 801bc3e:	7859      	ldrbhi	r1, [r3, #1]
 801bc40:	bf8a      	itet	hi
 801bc42:	3301      	addhi	r3, #1
 801bc44:	b2c9      	uxtbls	r1, r1
 801bc46:	9324      	strhi	r3, [sp, #144]	; 0x90
 801bc48:	9b06      	ldr	r3, [sp, #24]
 801bc4a:	4418      	add	r0, r3
 801bc4c:	e7a7      	b.n	801bb9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801bc4e:	441d      	add	r5, r3
 801bc50:	b22d      	sxth	r5, r5
 801bc52:	e6f1      	b.n	801ba38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801bc54:	f1b9 0f01 	cmp.w	r9, #1
 801bc58:	f47f af2c 	bne.w	801bab4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bc5c:	f1bb 0f01 	cmp.w	fp, #1
 801bc60:	f47f af28 	bne.w	801bab4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bc64:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801bd54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801bc68:	f8db 0000 	ldr.w	r0, [fp]
 801bc6c:	6803      	ldr	r3, [r0, #0]
 801bc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc70:	4798      	blx	r3
 801bc72:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801bc76:	465a      	mov	r2, fp
 801bc78:	d006      	beq.n	801bc88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801bc7a:	f1b8 0f04 	cmp.w	r8, #4
 801bc7e:	d13d      	bne.n	801bcfc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801bc80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc82:	3300      	adds	r3, #0
 801bc84:	bf18      	it	ne
 801bc86:	2301      	movne	r3, #1
 801bc88:	05c0      	lsls	r0, r0, #23
 801bc8a:	d567      	bpl.n	801bd5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801bc8c:	f1b8 0f08 	cmp.w	r8, #8
 801bc90:	d164      	bne.n	801bd5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	bf0c      	ite	eq
 801bc96:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801bc9a:	2180      	movne	r1, #128	; 0x80
 801bc9c:	2e00      	cmp	r6, #0
 801bc9e:	f47f af09 	bne.w	801bab4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bca2:	2c00      	cmp	r4, #0
 801bca4:	f47f af06 	bne.w	801bab4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bca8:	9b08      	ldr	r3, [sp, #32]
 801bcaa:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bcac:	442b      	add	r3, r5
 801bcae:	4283      	cmp	r3, r0
 801bcb0:	f73f af00 	bgt.w	801bab4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bcb4:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801bcb8:	4403      	add	r3, r0
 801bcba:	980c      	ldr	r0, [sp, #48]	; 0x30
 801bcbc:	4283      	cmp	r3, r0
 801bcbe:	f73f aef9 	bgt.w	801bab4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bcc2:	f1b8 0f08 	cmp.w	r8, #8
 801bcc6:	6810      	ldr	r0, [r2, #0]
 801bcc8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801bccc:	bf18      	it	ne
 801bcce:	3701      	addne	r7, #1
 801bcd0:	6804      	ldr	r4, [r0, #0]
 801bcd2:	9105      	str	r1, [sp, #20]
 801bcd4:	bf18      	it	ne
 801bcd6:	f027 0701 	bicne.w	r7, r7, #1
 801bcda:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bcdc:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801bce0:	bf18      	it	ne
 801bce2:	b2bf      	uxthne	r7, r7
 801bce4:	9104      	str	r1, [sp, #16]
 801bce6:	9926      	ldr	r1, [sp, #152]	; 0x98
 801bce8:	e9cd 7a00 	strd	r7, sl, [sp]
 801bcec:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801bcf0:	9924      	ldr	r1, [sp, #144]	; 0x90
 801bcf2:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801bcf4:	47a0      	blx	r4
 801bcf6:	b015      	add	sp, #84	; 0x54
 801bcf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcfc:	2300      	movs	r3, #0
 801bcfe:	e7c3      	b.n	801bc88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801bd00:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd02:	e6e0      	b.n	801bac6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801bd04:	22ff      	movs	r2, #255	; 0xff
 801bd06:	e6fc      	b.n	801bb02 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801bd08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd0a:	7003      	strb	r3, [r0, #0]
 801bd0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd0e:	7043      	strb	r3, [r0, #1]
 801bd10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd12:	7083      	strb	r3, [r0, #2]
 801bd14:	e789      	b.n	801bc2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801bd16:	9b08      	ldr	r3, [sp, #32]
 801bd18:	b153      	cbz	r3, 801bd30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801bd1a:	441c      	add	r4, r3
 801bd1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bd1e:	b2a4      	uxth	r4, r4
 801bd20:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801bd24:	f004 0407 	and.w	r4, r4, #7
 801bd28:	7819      	ldrb	r1, [r3, #0]
 801bd2a:	9324      	str	r3, [sp, #144]	; 0x90
 801bd2c:	4121      	asrs	r1, r4
 801bd2e:	b2c9      	uxtb	r1, r1
 801bd30:	9b07      	ldr	r3, [sp, #28]
 801bd32:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bd36:	445b      	add	r3, fp
 801bd38:	9307      	str	r3, [sp, #28]
 801bd3a:	e72a      	b.n	801bb92 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801bd3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d1d9      	bne.n	801bcf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801bd42:	4b04      	ldr	r3, [pc, #16]	; (801bd54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801bd44:	6818      	ldr	r0, [r3, #0]
 801bd46:	6803      	ldr	r3, [r0, #0]
 801bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd4a:	4798      	blx	r3
 801bd4c:	e7d3      	b.n	801bcf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801bd4e:	bf00      	nop
 801bd50:	2000b460 	.word	0x2000b460
 801bd54:	2000b468 	.word	0x2000b468
 801bd58:	2000b462 	.word	0x2000b462
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	f43f aea9 	beq.w	801bab4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bd62:	2180      	movs	r1, #128	; 0x80
 801bd64:	e79a      	b.n	801bc9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801bd66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd68:	b11b      	cbz	r3, 801bd72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801bd6a:	07fb      	lsls	r3, r7, #31
 801bd6c:	d501      	bpl.n	801bd72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801bd6e:	3701      	adds	r7, #1
 801bd70:	b2bf      	uxth	r7, r7
 801bd72:	2211      	movs	r2, #17
 801bd74:	e6c5      	b.n	801bb02 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801bd76:	2255      	movs	r2, #85	; 0x55
 801bd78:	e6c3      	b.n	801bb02 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801bd7a:	bf00      	nop

0801bd7c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801bd7c:	b538      	push	{r3, r4, r5, lr}
 801bd7e:	4c15      	ldr	r4, [pc, #84]	; (801bdd4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801bd80:	4605      	mov	r5, r0
 801bd82:	7823      	ldrb	r3, [r4, #0]
 801bd84:	f3bf 8f5b 	dmb	ish
 801bd88:	07da      	lsls	r2, r3, #31
 801bd8a:	d40b      	bmi.n	801bda4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bd8c:	4620      	mov	r0, r4
 801bd8e:	f006 fd5e 	bl	802284e <__cxa_guard_acquire>
 801bd92:	b138      	cbz	r0, 801bda4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bd94:	4620      	mov	r0, r4
 801bd96:	f006 fd66 	bl	8022866 <__cxa_guard_release>
 801bd9a:	4a0f      	ldr	r2, [pc, #60]	; (801bdd8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bd9c:	490f      	ldr	r1, [pc, #60]	; (801bddc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801bd9e:	4810      	ldr	r0, [pc, #64]	; (801bde0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bda0:	f006 fd4b 	bl	802283a <__aeabi_atexit>
 801bda4:	4c0f      	ldr	r4, [pc, #60]	; (801bde4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801bda6:	7823      	ldrb	r3, [r4, #0]
 801bda8:	f3bf 8f5b 	dmb	ish
 801bdac:	07db      	lsls	r3, r3, #31
 801bdae:	d40b      	bmi.n	801bdc8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bdb0:	4620      	mov	r0, r4
 801bdb2:	f006 fd4c 	bl	802284e <__cxa_guard_acquire>
 801bdb6:	b138      	cbz	r0, 801bdc8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bdb8:	4620      	mov	r0, r4
 801bdba:	f006 fd54 	bl	8022866 <__cxa_guard_release>
 801bdbe:	4a06      	ldr	r2, [pc, #24]	; (801bdd8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bdc0:	4909      	ldr	r1, [pc, #36]	; (801bde8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801bdc2:	480a      	ldr	r0, [pc, #40]	; (801bdec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bdc4:	f006 fd39 	bl	802283a <__aeabi_atexit>
 801bdc8:	4b05      	ldr	r3, [pc, #20]	; (801bde0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bdca:	612b      	str	r3, [r5, #16]
 801bdcc:	4b07      	ldr	r3, [pc, #28]	; (801bdec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bdce:	616b      	str	r3, [r5, #20]
 801bdd0:	bd38      	pop	{r3, r4, r5, pc}
 801bdd2:	bf00      	nop
 801bdd4:	2000b574 	.word	0x2000b574
 801bdd8:	20000000 	.word	0x20000000
 801bddc:	0801a9b3 	.word	0x0801a9b3
 801bde0:	20000084 	.word	0x20000084
 801bde4:	2000b578 	.word	0x2000b578
 801bde8:	0801a9b1 	.word	0x0801a9b1
 801bdec:	20000088 	.word	0x20000088

0801bdf0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801bdf0:	b538      	push	{r3, r4, r5, lr}
 801bdf2:	4c15      	ldr	r4, [pc, #84]	; (801be48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801bdf4:	4605      	mov	r5, r0
 801bdf6:	7823      	ldrb	r3, [r4, #0]
 801bdf8:	f3bf 8f5b 	dmb	ish
 801bdfc:	07da      	lsls	r2, r3, #31
 801bdfe:	d40b      	bmi.n	801be18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801be00:	4620      	mov	r0, r4
 801be02:	f006 fd24 	bl	802284e <__cxa_guard_acquire>
 801be06:	b138      	cbz	r0, 801be18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801be08:	4620      	mov	r0, r4
 801be0a:	f006 fd2c 	bl	8022866 <__cxa_guard_release>
 801be0e:	4a0f      	ldr	r2, [pc, #60]	; (801be4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801be10:	490f      	ldr	r1, [pc, #60]	; (801be50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801be12:	4810      	ldr	r0, [pc, #64]	; (801be54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801be14:	f006 fd11 	bl	802283a <__aeabi_atexit>
 801be18:	4c0f      	ldr	r4, [pc, #60]	; (801be58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801be1a:	7823      	ldrb	r3, [r4, #0]
 801be1c:	f3bf 8f5b 	dmb	ish
 801be20:	07db      	lsls	r3, r3, #31
 801be22:	d40b      	bmi.n	801be3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801be24:	4620      	mov	r0, r4
 801be26:	f006 fd12 	bl	802284e <__cxa_guard_acquire>
 801be2a:	b138      	cbz	r0, 801be3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801be2c:	4620      	mov	r0, r4
 801be2e:	f006 fd1a 	bl	8022866 <__cxa_guard_release>
 801be32:	4a06      	ldr	r2, [pc, #24]	; (801be4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801be34:	4909      	ldr	r1, [pc, #36]	; (801be5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801be36:	480a      	ldr	r0, [pc, #40]	; (801be60 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801be38:	f006 fcff 	bl	802283a <__aeabi_atexit>
 801be3c:	4b05      	ldr	r3, [pc, #20]	; (801be54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801be3e:	60ab      	str	r3, [r5, #8]
 801be40:	4b07      	ldr	r3, [pc, #28]	; (801be60 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801be42:	60eb      	str	r3, [r5, #12]
 801be44:	bd38      	pop	{r3, r4, r5, pc}
 801be46:	bf00      	nop
 801be48:	2000b554 	.word	0x2000b554
 801be4c:	20000000 	.word	0x20000000
 801be50:	0801a9b7 	.word	0x0801a9b7
 801be54:	20000064 	.word	0x20000064
 801be58:	2000b558 	.word	0x2000b558
 801be5c:	0801a9b5 	.word	0x0801a9b5
 801be60:	20000068 	.word	0x20000068

0801be64 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801be64:	b510      	push	{r4, lr}
 801be66:	4604      	mov	r4, r0
 801be68:	f7ff ff88 	bl	801bd7c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801be6c:	4620      	mov	r0, r4
 801be6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be72:	f7ff bfbd 	b.w	801bdf0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801be78 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801be78:	b538      	push	{r3, r4, r5, lr}
 801be7a:	4c15      	ldr	r4, [pc, #84]	; (801bed0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801be7c:	4605      	mov	r5, r0
 801be7e:	7823      	ldrb	r3, [r4, #0]
 801be80:	f3bf 8f5b 	dmb	ish
 801be84:	07da      	lsls	r2, r3, #31
 801be86:	d40b      	bmi.n	801bea0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801be88:	4620      	mov	r0, r4
 801be8a:	f006 fce0 	bl	802284e <__cxa_guard_acquire>
 801be8e:	b138      	cbz	r0, 801bea0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801be90:	4620      	mov	r0, r4
 801be92:	f006 fce8 	bl	8022866 <__cxa_guard_release>
 801be96:	4a0f      	ldr	r2, [pc, #60]	; (801bed4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801be98:	490f      	ldr	r1, [pc, #60]	; (801bed8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801be9a:	4810      	ldr	r0, [pc, #64]	; (801bedc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801be9c:	f006 fccd 	bl	802283a <__aeabi_atexit>
 801bea0:	4c0f      	ldr	r4, [pc, #60]	; (801bee0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801bea2:	7823      	ldrb	r3, [r4, #0]
 801bea4:	f3bf 8f5b 	dmb	ish
 801bea8:	07db      	lsls	r3, r3, #31
 801beaa:	d40b      	bmi.n	801bec4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801beac:	4620      	mov	r0, r4
 801beae:	f006 fcce 	bl	802284e <__cxa_guard_acquire>
 801beb2:	b138      	cbz	r0, 801bec4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801beb4:	4620      	mov	r0, r4
 801beb6:	f006 fcd6 	bl	8022866 <__cxa_guard_release>
 801beba:	4a06      	ldr	r2, [pc, #24]	; (801bed4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bebc:	4909      	ldr	r1, [pc, #36]	; (801bee4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801bebe:	480a      	ldr	r0, [pc, #40]	; (801bee8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bec0:	f006 fcbb 	bl	802283a <__aeabi_atexit>
 801bec4:	4b05      	ldr	r3, [pc, #20]	; (801bedc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bec6:	622b      	str	r3, [r5, #32]
 801bec8:	4b07      	ldr	r3, [pc, #28]	; (801bee8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801beca:	626b      	str	r3, [r5, #36]	; 0x24
 801becc:	bd38      	pop	{r3, r4, r5, pc}
 801bece:	bf00      	nop
 801bed0:	2000b57c 	.word	0x2000b57c
 801bed4:	20000000 	.word	0x20000000
 801bed8:	0801a9ab 	.word	0x0801a9ab
 801bedc:	2000008c 	.word	0x2000008c
 801bee0:	2000b580 	.word	0x2000b580
 801bee4:	0801a9a9 	.word	0x0801a9a9
 801bee8:	20000090 	.word	0x20000090

0801beec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801beec:	b538      	push	{r3, r4, r5, lr}
 801beee:	4c15      	ldr	r4, [pc, #84]	; (801bf44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801bef0:	4605      	mov	r5, r0
 801bef2:	7823      	ldrb	r3, [r4, #0]
 801bef4:	f3bf 8f5b 	dmb	ish
 801bef8:	07da      	lsls	r2, r3, #31
 801befa:	d40b      	bmi.n	801bf14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801befc:	4620      	mov	r0, r4
 801befe:	f006 fca6 	bl	802284e <__cxa_guard_acquire>
 801bf02:	b138      	cbz	r0, 801bf14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801bf04:	4620      	mov	r0, r4
 801bf06:	f006 fcae 	bl	8022866 <__cxa_guard_release>
 801bf0a:	4a0f      	ldr	r2, [pc, #60]	; (801bf48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801bf0c:	490f      	ldr	r1, [pc, #60]	; (801bf4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801bf0e:	4810      	ldr	r0, [pc, #64]	; (801bf50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801bf10:	f006 fc93 	bl	802283a <__aeabi_atexit>
 801bf14:	4c0f      	ldr	r4, [pc, #60]	; (801bf54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801bf16:	7823      	ldrb	r3, [r4, #0]
 801bf18:	f3bf 8f5b 	dmb	ish
 801bf1c:	07db      	lsls	r3, r3, #31
 801bf1e:	d40b      	bmi.n	801bf38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801bf20:	4620      	mov	r0, r4
 801bf22:	f006 fc94 	bl	802284e <__cxa_guard_acquire>
 801bf26:	b138      	cbz	r0, 801bf38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801bf28:	4620      	mov	r0, r4
 801bf2a:	f006 fc9c 	bl	8022866 <__cxa_guard_release>
 801bf2e:	4a06      	ldr	r2, [pc, #24]	; (801bf48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801bf30:	4909      	ldr	r1, [pc, #36]	; (801bf58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801bf32:	480a      	ldr	r0, [pc, #40]	; (801bf5c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bf34:	f006 fc81 	bl	802283a <__aeabi_atexit>
 801bf38:	4b05      	ldr	r3, [pc, #20]	; (801bf50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801bf3a:	61ab      	str	r3, [r5, #24]
 801bf3c:	4b07      	ldr	r3, [pc, #28]	; (801bf5c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bf3e:	61eb      	str	r3, [r5, #28]
 801bf40:	bd38      	pop	{r3, r4, r5, pc}
 801bf42:	bf00      	nop
 801bf44:	2000b55c 	.word	0x2000b55c
 801bf48:	20000000 	.word	0x20000000
 801bf4c:	0801a9af 	.word	0x0801a9af
 801bf50:	2000006c 	.word	0x2000006c
 801bf54:	2000b560 	.word	0x2000b560
 801bf58:	0801a9ad 	.word	0x0801a9ad
 801bf5c:	20000070 	.word	0x20000070

0801bf60 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801bf60:	b510      	push	{r4, lr}
 801bf62:	4604      	mov	r4, r0
 801bf64:	f7ff ff88 	bl	801be78 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801bf68:	4620      	mov	r0, r4
 801bf6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf6e:	f7ff bfbd 	b.w	801beec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801bf74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801bf74:	b538      	push	{r3, r4, r5, lr}
 801bf76:	4c15      	ldr	r4, [pc, #84]	; (801bfcc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801bf78:	4605      	mov	r5, r0
 801bf7a:	7823      	ldrb	r3, [r4, #0]
 801bf7c:	f3bf 8f5b 	dmb	ish
 801bf80:	07da      	lsls	r2, r3, #31
 801bf82:	d40b      	bmi.n	801bf9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801bf84:	4620      	mov	r0, r4
 801bf86:	f006 fc62 	bl	802284e <__cxa_guard_acquire>
 801bf8a:	b138      	cbz	r0, 801bf9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801bf8c:	4620      	mov	r0, r4
 801bf8e:	f006 fc6a 	bl	8022866 <__cxa_guard_release>
 801bf92:	4a0f      	ldr	r2, [pc, #60]	; (801bfd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801bf94:	490f      	ldr	r1, [pc, #60]	; (801bfd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801bf96:	4810      	ldr	r0, [pc, #64]	; (801bfd8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801bf98:	f006 fc4f 	bl	802283a <__aeabi_atexit>
 801bf9c:	4c0f      	ldr	r4, [pc, #60]	; (801bfdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801bf9e:	7823      	ldrb	r3, [r4, #0]
 801bfa0:	f3bf 8f5b 	dmb	ish
 801bfa4:	07db      	lsls	r3, r3, #31
 801bfa6:	d40b      	bmi.n	801bfc0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801bfa8:	4620      	mov	r0, r4
 801bfaa:	f006 fc50 	bl	802284e <__cxa_guard_acquire>
 801bfae:	b138      	cbz	r0, 801bfc0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801bfb0:	4620      	mov	r0, r4
 801bfb2:	f006 fc58 	bl	8022866 <__cxa_guard_release>
 801bfb6:	4a06      	ldr	r2, [pc, #24]	; (801bfd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801bfb8:	4909      	ldr	r1, [pc, #36]	; (801bfe0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801bfba:	480a      	ldr	r0, [pc, #40]	; (801bfe4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801bfbc:	f006 fc3d 	bl	802283a <__aeabi_atexit>
 801bfc0:	4b05      	ldr	r3, [pc, #20]	; (801bfd8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801bfc2:	632b      	str	r3, [r5, #48]	; 0x30
 801bfc4:	4b07      	ldr	r3, [pc, #28]	; (801bfe4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801bfc6:	636b      	str	r3, [r5, #52]	; 0x34
 801bfc8:	bd38      	pop	{r3, r4, r5, pc}
 801bfca:	bf00      	nop
 801bfcc:	2000b564 	.word	0x2000b564
 801bfd0:	20000000 	.word	0x20000000
 801bfd4:	0801a9a3 	.word	0x0801a9a3
 801bfd8:	20000074 	.word	0x20000074
 801bfdc:	2000b568 	.word	0x2000b568
 801bfe0:	0801a9a1 	.word	0x0801a9a1
 801bfe4:	20000078 	.word	0x20000078

0801bfe8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801bfe8:	b538      	push	{r3, r4, r5, lr}
 801bfea:	4c15      	ldr	r4, [pc, #84]	; (801c040 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801bfec:	4605      	mov	r5, r0
 801bfee:	7823      	ldrb	r3, [r4, #0]
 801bff0:	f3bf 8f5b 	dmb	ish
 801bff4:	07da      	lsls	r2, r3, #31
 801bff6:	d40b      	bmi.n	801c010 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801bff8:	4620      	mov	r0, r4
 801bffa:	f006 fc28 	bl	802284e <__cxa_guard_acquire>
 801bffe:	b138      	cbz	r0, 801c010 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c000:	4620      	mov	r0, r4
 801c002:	f006 fc30 	bl	8022866 <__cxa_guard_release>
 801c006:	4a0f      	ldr	r2, [pc, #60]	; (801c044 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c008:	490f      	ldr	r1, [pc, #60]	; (801c048 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801c00a:	4810      	ldr	r0, [pc, #64]	; (801c04c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c00c:	f006 fc15 	bl	802283a <__aeabi_atexit>
 801c010:	4c0f      	ldr	r4, [pc, #60]	; (801c050 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801c012:	7823      	ldrb	r3, [r4, #0]
 801c014:	f3bf 8f5b 	dmb	ish
 801c018:	07db      	lsls	r3, r3, #31
 801c01a:	d40b      	bmi.n	801c034 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c01c:	4620      	mov	r0, r4
 801c01e:	f006 fc16 	bl	802284e <__cxa_guard_acquire>
 801c022:	b138      	cbz	r0, 801c034 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c024:	4620      	mov	r0, r4
 801c026:	f006 fc1e 	bl	8022866 <__cxa_guard_release>
 801c02a:	4a06      	ldr	r2, [pc, #24]	; (801c044 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c02c:	4909      	ldr	r1, [pc, #36]	; (801c054 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801c02e:	480a      	ldr	r0, [pc, #40]	; (801c058 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c030:	f006 fc03 	bl	802283a <__aeabi_atexit>
 801c034:	4b05      	ldr	r3, [pc, #20]	; (801c04c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c036:	62ab      	str	r3, [r5, #40]	; 0x28
 801c038:	4b07      	ldr	r3, [pc, #28]	; (801c058 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c03a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c03c:	bd38      	pop	{r3, r4, r5, pc}
 801c03e:	bf00      	nop
 801c040:	2000b53c 	.word	0x2000b53c
 801c044:	20000000 	.word	0x20000000
 801c048:	0801a9a7 	.word	0x0801a9a7
 801c04c:	2000004c 	.word	0x2000004c
 801c050:	2000b540 	.word	0x2000b540
 801c054:	0801a9a5 	.word	0x0801a9a5
 801c058:	20000050 	.word	0x20000050

0801c05c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801c05c:	b510      	push	{r4, lr}
 801c05e:	4604      	mov	r4, r0
 801c060:	f7ff ff88 	bl	801bf74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801c064:	4620      	mov	r0, r4
 801c066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c06a:	f7ff bfbd 	b.w	801bfe8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801c070 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c070:	b538      	push	{r3, r4, r5, lr}
 801c072:	4c15      	ldr	r4, [pc, #84]	; (801c0c8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c074:	4605      	mov	r5, r0
 801c076:	7823      	ldrb	r3, [r4, #0]
 801c078:	f3bf 8f5b 	dmb	ish
 801c07c:	07da      	lsls	r2, r3, #31
 801c07e:	d40b      	bmi.n	801c098 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c080:	4620      	mov	r0, r4
 801c082:	f006 fbe4 	bl	802284e <__cxa_guard_acquire>
 801c086:	b138      	cbz	r0, 801c098 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c088:	4620      	mov	r0, r4
 801c08a:	f006 fbec 	bl	8022866 <__cxa_guard_release>
 801c08e:	4a0f      	ldr	r2, [pc, #60]	; (801c0cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c090:	490f      	ldr	r1, [pc, #60]	; (801c0d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c092:	4810      	ldr	r0, [pc, #64]	; (801c0d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c094:	f006 fbd1 	bl	802283a <__aeabi_atexit>
 801c098:	4c0f      	ldr	r4, [pc, #60]	; (801c0d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c09a:	7823      	ldrb	r3, [r4, #0]
 801c09c:	f3bf 8f5b 	dmb	ish
 801c0a0:	07db      	lsls	r3, r3, #31
 801c0a2:	d40b      	bmi.n	801c0bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c0a4:	4620      	mov	r0, r4
 801c0a6:	f006 fbd2 	bl	802284e <__cxa_guard_acquire>
 801c0aa:	b138      	cbz	r0, 801c0bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c0ac:	4620      	mov	r0, r4
 801c0ae:	f006 fbda 	bl	8022866 <__cxa_guard_release>
 801c0b2:	4a06      	ldr	r2, [pc, #24]	; (801c0cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c0b4:	4909      	ldr	r1, [pc, #36]	; (801c0dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c0b6:	480a      	ldr	r0, [pc, #40]	; (801c0e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c0b8:	f006 fbbf 	bl	802283a <__aeabi_atexit>
 801c0bc:	4b05      	ldr	r3, [pc, #20]	; (801c0d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c0be:	642b      	str	r3, [r5, #64]	; 0x40
 801c0c0:	4b07      	ldr	r3, [pc, #28]	; (801c0e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c0c2:	646b      	str	r3, [r5, #68]	; 0x44
 801c0c4:	bd38      	pop	{r3, r4, r5, pc}
 801c0c6:	bf00      	nop
 801c0c8:	2000b56c 	.word	0x2000b56c
 801c0cc:	20000000 	.word	0x20000000
 801c0d0:	0801a99b 	.word	0x0801a99b
 801c0d4:	2000007c 	.word	0x2000007c
 801c0d8:	2000b570 	.word	0x2000b570
 801c0dc:	0801a999 	.word	0x0801a999
 801c0e0:	20000080 	.word	0x20000080

0801c0e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c0e4:	b538      	push	{r3, r4, r5, lr}
 801c0e6:	4c15      	ldr	r4, [pc, #84]	; (801c13c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c0e8:	4605      	mov	r5, r0
 801c0ea:	7823      	ldrb	r3, [r4, #0]
 801c0ec:	f3bf 8f5b 	dmb	ish
 801c0f0:	07da      	lsls	r2, r3, #31
 801c0f2:	d40b      	bmi.n	801c10c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c0f4:	4620      	mov	r0, r4
 801c0f6:	f006 fbaa 	bl	802284e <__cxa_guard_acquire>
 801c0fa:	b138      	cbz	r0, 801c10c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c0fc:	4620      	mov	r0, r4
 801c0fe:	f006 fbb2 	bl	8022866 <__cxa_guard_release>
 801c102:	4a0f      	ldr	r2, [pc, #60]	; (801c140 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c104:	490f      	ldr	r1, [pc, #60]	; (801c144 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c106:	4810      	ldr	r0, [pc, #64]	; (801c148 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c108:	f006 fb97 	bl	802283a <__aeabi_atexit>
 801c10c:	4c0f      	ldr	r4, [pc, #60]	; (801c14c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c10e:	7823      	ldrb	r3, [r4, #0]
 801c110:	f3bf 8f5b 	dmb	ish
 801c114:	07db      	lsls	r3, r3, #31
 801c116:	d40b      	bmi.n	801c130 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c118:	4620      	mov	r0, r4
 801c11a:	f006 fb98 	bl	802284e <__cxa_guard_acquire>
 801c11e:	b138      	cbz	r0, 801c130 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c120:	4620      	mov	r0, r4
 801c122:	f006 fba0 	bl	8022866 <__cxa_guard_release>
 801c126:	4a06      	ldr	r2, [pc, #24]	; (801c140 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c128:	4909      	ldr	r1, [pc, #36]	; (801c150 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c12a:	480a      	ldr	r0, [pc, #40]	; (801c154 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c12c:	f006 fb85 	bl	802283a <__aeabi_atexit>
 801c130:	4b05      	ldr	r3, [pc, #20]	; (801c148 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c132:	63ab      	str	r3, [r5, #56]	; 0x38
 801c134:	4b07      	ldr	r3, [pc, #28]	; (801c154 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c136:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c138:	bd38      	pop	{r3, r4, r5, pc}
 801c13a:	bf00      	nop
 801c13c:	2000b54c 	.word	0x2000b54c
 801c140:	20000000 	.word	0x20000000
 801c144:	0801a99f 	.word	0x0801a99f
 801c148:	2000005c 	.word	0x2000005c
 801c14c:	2000b550 	.word	0x2000b550
 801c150:	0801a99d 	.word	0x0801a99d
 801c154:	20000060 	.word	0x20000060

0801c158 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801c158:	b510      	push	{r4, lr}
 801c15a:	4604      	mov	r4, r0
 801c15c:	f7ff ff88 	bl	801c070 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801c160:	4620      	mov	r0, r4
 801c162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c166:	f7ff bfbd 	b.w	801c0e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801c16c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801c16c:	b538      	push	{r3, r4, r5, lr}
 801c16e:	4c15      	ldr	r4, [pc, #84]	; (801c1c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801c170:	4605      	mov	r5, r0
 801c172:	7823      	ldrb	r3, [r4, #0]
 801c174:	f3bf 8f5b 	dmb	ish
 801c178:	07da      	lsls	r2, r3, #31
 801c17a:	d40b      	bmi.n	801c194 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c17c:	4620      	mov	r0, r4
 801c17e:	f006 fb66 	bl	802284e <__cxa_guard_acquire>
 801c182:	b138      	cbz	r0, 801c194 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c184:	4620      	mov	r0, r4
 801c186:	f006 fb6e 	bl	8022866 <__cxa_guard_release>
 801c18a:	4a0f      	ldr	r2, [pc, #60]	; (801c1c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c18c:	490f      	ldr	r1, [pc, #60]	; (801c1cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801c18e:	4810      	ldr	r0, [pc, #64]	; (801c1d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c190:	f006 fb53 	bl	802283a <__aeabi_atexit>
 801c194:	4c0f      	ldr	r4, [pc, #60]	; (801c1d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801c196:	7823      	ldrb	r3, [r4, #0]
 801c198:	f3bf 8f5b 	dmb	ish
 801c19c:	07db      	lsls	r3, r3, #31
 801c19e:	d40b      	bmi.n	801c1b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c1a0:	4620      	mov	r0, r4
 801c1a2:	f006 fb54 	bl	802284e <__cxa_guard_acquire>
 801c1a6:	b138      	cbz	r0, 801c1b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c1a8:	4620      	mov	r0, r4
 801c1aa:	f006 fb5c 	bl	8022866 <__cxa_guard_release>
 801c1ae:	4a06      	ldr	r2, [pc, #24]	; (801c1c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c1b0:	4909      	ldr	r1, [pc, #36]	; (801c1d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801c1b2:	480a      	ldr	r0, [pc, #40]	; (801c1dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c1b4:	f006 fb41 	bl	802283a <__aeabi_atexit>
 801c1b8:	4b05      	ldr	r3, [pc, #20]	; (801c1d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c1ba:	652b      	str	r3, [r5, #80]	; 0x50
 801c1bc:	4b07      	ldr	r3, [pc, #28]	; (801c1dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c1be:	656b      	str	r3, [r5, #84]	; 0x54
 801c1c0:	bd38      	pop	{r3, r4, r5, pc}
 801c1c2:	bf00      	nop
 801c1c4:	2000b544 	.word	0x2000b544
 801c1c8:	20000000 	.word	0x20000000
 801c1cc:	0801a993 	.word	0x0801a993
 801c1d0:	20000054 	.word	0x20000054
 801c1d4:	2000b548 	.word	0x2000b548
 801c1d8:	0801a991 	.word	0x0801a991
 801c1dc:	20000058 	.word	0x20000058

0801c1e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c1e0:	b538      	push	{r3, r4, r5, lr}
 801c1e2:	4c15      	ldr	r4, [pc, #84]	; (801c238 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c1e4:	4605      	mov	r5, r0
 801c1e6:	7823      	ldrb	r3, [r4, #0]
 801c1e8:	f3bf 8f5b 	dmb	ish
 801c1ec:	07da      	lsls	r2, r3, #31
 801c1ee:	d40b      	bmi.n	801c208 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c1f0:	4620      	mov	r0, r4
 801c1f2:	f006 fb2c 	bl	802284e <__cxa_guard_acquire>
 801c1f6:	b138      	cbz	r0, 801c208 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c1f8:	4620      	mov	r0, r4
 801c1fa:	f006 fb34 	bl	8022866 <__cxa_guard_release>
 801c1fe:	4a0f      	ldr	r2, [pc, #60]	; (801c23c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c200:	490f      	ldr	r1, [pc, #60]	; (801c240 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c202:	4810      	ldr	r0, [pc, #64]	; (801c244 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c204:	f006 fb19 	bl	802283a <__aeabi_atexit>
 801c208:	4c0f      	ldr	r4, [pc, #60]	; (801c248 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c20a:	7823      	ldrb	r3, [r4, #0]
 801c20c:	f3bf 8f5b 	dmb	ish
 801c210:	07db      	lsls	r3, r3, #31
 801c212:	d40b      	bmi.n	801c22c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c214:	4620      	mov	r0, r4
 801c216:	f006 fb1a 	bl	802284e <__cxa_guard_acquire>
 801c21a:	b138      	cbz	r0, 801c22c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c21c:	4620      	mov	r0, r4
 801c21e:	f006 fb22 	bl	8022866 <__cxa_guard_release>
 801c222:	4a06      	ldr	r2, [pc, #24]	; (801c23c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c224:	4909      	ldr	r1, [pc, #36]	; (801c24c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c226:	480a      	ldr	r0, [pc, #40]	; (801c250 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c228:	f006 fb07 	bl	802283a <__aeabi_atexit>
 801c22c:	4b05      	ldr	r3, [pc, #20]	; (801c244 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c22e:	64ab      	str	r3, [r5, #72]	; 0x48
 801c230:	4b07      	ldr	r3, [pc, #28]	; (801c250 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c232:	64eb      	str	r3, [r5, #76]	; 0x4c
 801c234:	bd38      	pop	{r3, r4, r5, pc}
 801c236:	bf00      	nop
 801c238:	2000b534 	.word	0x2000b534
 801c23c:	20000000 	.word	0x20000000
 801c240:	0801a997 	.word	0x0801a997
 801c244:	20000044 	.word	0x20000044
 801c248:	2000b538 	.word	0x2000b538
 801c24c:	0801a995 	.word	0x0801a995
 801c250:	20000048 	.word	0x20000048

0801c254 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801c254:	b510      	push	{r4, lr}
 801c256:	4604      	mov	r4, r0
 801c258:	f7ff ff88 	bl	801c16c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c25c:	4620      	mov	r0, r4
 801c25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c262:	f7ff bfbd 	b.w	801c1e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801c266 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801c266:	b510      	push	{r4, lr}
 801c268:	4604      	mov	r4, r0
 801c26a:	f7ff fff3 	bl	801c254 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801c26e:	4620      	mov	r0, r4
 801c270:	f7ff ff72 	bl	801c158 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801c274:	4620      	mov	r0, r4
 801c276:	f7ff fe73 	bl	801bf60 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801c27a:	4620      	mov	r0, r4
 801c27c:	f7ff fdf2 	bl	801be64 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801c280:	4620      	mov	r0, r4
 801c282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c286:	f7ff bee9 	b.w	801c05c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801c28c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801c28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c290:	b087      	sub	sp, #28
 801c292:	7888      	ldrb	r0, [r1, #2]
 801c294:	4616      	mov	r6, r2
 801c296:	9001      	str	r0, [sp, #4]
 801c298:	7848      	ldrb	r0, [r1, #1]
 801c29a:	9100      	str	r1, [sp, #0]
 801c29c:	9002      	str	r0, [sp, #8]
 801c29e:	7808      	ldrb	r0, [r1, #0]
 801c2a0:	9901      	ldr	r1, [sp, #4]
 801c2a2:	9003      	str	r0, [sp, #12]
 801c2a4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801c2a8:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801c2ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801c2b0:	9902      	ldr	r1, [sp, #8]
 801c2b2:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801c2b6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801c2ba:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801c2be:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801c2c2:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801c2c6:	9005      	str	r0, [sp, #20]
 801c2c8:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801c2cc:	fb05 ca0e 	mla	sl, r5, lr, ip
 801c2d0:	2d00      	cmp	r5, #0
 801c2d2:	eb06 080a 	add.w	r8, r6, sl
 801c2d6:	db4a      	blt.n	801c36e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801c2d8:	45a9      	cmp	r9, r5
 801c2da:	dd48      	ble.n	801c36e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801c2dc:	f1bc 0f00 	cmp.w	ip, #0
 801c2e0:	db43      	blt.n	801c36a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801c2e2:	45e6      	cmp	lr, ip
 801c2e4:	dd41      	ble.n	801c36a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801c2e6:	f816 600a 	ldrb.w	r6, [r6, sl]
 801c2ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c2ee:	441e      	add	r6, r3
 801c2f0:	f11c 0001 	adds.w	r0, ip, #1
 801c2f4:	d43e      	bmi.n	801c374 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801c2f6:	4586      	cmp	lr, r0
 801c2f8:	dd3c      	ble.n	801c374 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801c2fa:	2a00      	cmp	r2, #0
 801c2fc:	d03a      	beq.n	801c374 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801c2fe:	f898 0001 	ldrb.w	r0, [r8, #1]
 801c302:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c306:	4418      	add	r0, r3
 801c308:	3501      	adds	r5, #1
 801c30a:	d437      	bmi.n	801c37c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801c30c:	45a9      	cmp	r9, r5
 801c30e:	dd35      	ble.n	801c37c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801c310:	b3a4      	cbz	r4, 801c37c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801c312:	f1bc 0f00 	cmp.w	ip, #0
 801c316:	db2f      	blt.n	801c378 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801c318:	45e6      	cmp	lr, ip
 801c31a:	dd2d      	ble.n	801c378 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801c31c:	f818 500e 	ldrb.w	r5, [r8, lr]
 801c320:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c324:	441d      	add	r5, r3
 801c326:	f11c 0c01 	adds.w	ip, ip, #1
 801c32a:	d42a      	bmi.n	801c382 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801c32c:	45e6      	cmp	lr, ip
 801c32e:	dd28      	ble.n	801c382 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801c330:	b33a      	cbz	r2, 801c382 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801c332:	44c6      	add	lr, r8
 801c334:	f89e c001 	ldrb.w	ip, [lr, #1]
 801c338:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c33c:	4463      	add	r3, ip
 801c33e:	ea6f 0c07 	mvn.w	ip, r7
 801c342:	2a0f      	cmp	r2, #15
 801c344:	f896 a000 	ldrb.w	sl, [r6]
 801c348:	fa5f fc8c 	uxtb.w	ip, ip
 801c34c:	f890 b000 	ldrb.w	fp, [r0]
 801c350:	f895 9000 	ldrb.w	r9, [r5]
 801c354:	7819      	ldrb	r1, [r3, #0]
 801c356:	d801      	bhi.n	801c35c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801c358:	2c0f      	cmp	r4, #15
 801c35a:	d914      	bls.n	801c386 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801c35c:	4b40      	ldr	r3, [pc, #256]	; (801c460 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801c35e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801c362:	4a40      	ldr	r2, [pc, #256]	; (801c464 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801c364:	4840      	ldr	r0, [pc, #256]	; (801c468 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801c366:	f006 fa9b 	bl	80228a0 <__assert_func>
 801c36a:	ae05      	add	r6, sp, #20
 801c36c:	e7c0      	b.n	801c2f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801c36e:	a805      	add	r0, sp, #20
 801c370:	4606      	mov	r6, r0
 801c372:	e7c9      	b.n	801c308 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801c374:	a805      	add	r0, sp, #20
 801c376:	e7c7      	b.n	801c308 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801c378:	ad05      	add	r5, sp, #20
 801c37a:	e7d4      	b.n	801c326 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801c37c:	ab05      	add	r3, sp, #20
 801c37e:	461d      	mov	r5, r3
 801c380:	e7dd      	b.n	801c33e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801c382:	ab05      	add	r3, sp, #20
 801c384:	e7db      	b.n	801c33e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801c386:	b292      	uxth	r2, r2
 801c388:	b2a4      	uxth	r4, r4
 801c38a:	fa1f fc8c 	uxth.w	ip, ip
 801c38e:	fb02 f804 	mul.w	r8, r2, r4
 801c392:	0112      	lsls	r2, r2, #4
 801c394:	b2bf      	uxth	r7, r7
 801c396:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801c39a:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801c39e:	eba2 0208 	sub.w	r2, r2, r8
 801c3a2:	b2a4      	uxth	r4, r4
 801c3a4:	b292      	uxth	r2, r2
 801c3a6:	ebae 0e04 	sub.w	lr, lr, r4
 801c3aa:	fb02 fb0b 	mul.w	fp, r2, fp
 801c3ae:	fa1f fe8e 	uxth.w	lr, lr
 801c3b2:	fb0e ba0a 	mla	sl, lr, sl, fp
 801c3b6:	fb04 aa09 	mla	sl, r4, r9, sl
 801c3ba:	fb08 aa01 	mla	sl, r8, r1, sl
 801c3be:	9903      	ldr	r1, [sp, #12]
 801c3c0:	fb11 f90c 	smulbb	r9, r1, ip
 801c3c4:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801c3c8:	9900      	ldr	r1, [sp, #0]
 801c3ca:	fb0a 9a07 	mla	sl, sl, r7, r9
 801c3ce:	fa1f fa8a 	uxth.w	sl, sl
 801c3d2:	f10a 0901 	add.w	r9, sl, #1
 801c3d6:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801c3da:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c3de:	f881 a000 	strb.w	sl, [r1]
 801c3e2:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c3e6:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c3ea:	fb02 fa0a 	mul.w	sl, r2, sl
 801c3ee:	9902      	ldr	r1, [sp, #8]
 801c3f0:	fb0e aa09 	mla	sl, lr, r9, sl
 801c3f4:	f895 9001 	ldrb.w	r9, [r5, #1]
 801c3f8:	fb04 aa09 	mla	sl, r4, r9, sl
 801c3fc:	f893 9001 	ldrb.w	r9, [r3, #1]
 801c400:	fb08 a909 	mla	r9, r8, r9, sl
 801c404:	fb11 fa0c 	smulbb	sl, r1, ip
 801c408:	9900      	ldr	r1, [sp, #0]
 801c40a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801c40e:	fb09 a907 	mla	r9, r9, r7, sl
 801c412:	fa1f f989 	uxth.w	r9, r9
 801c416:	f109 0a01 	add.w	sl, r9, #1
 801c41a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c41e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c422:	f881 9001 	strb.w	r9, [r1, #1]
 801c426:	7880      	ldrb	r0, [r0, #2]
 801c428:	78b6      	ldrb	r6, [r6, #2]
 801c42a:	4342      	muls	r2, r0
 801c42c:	78a8      	ldrb	r0, [r5, #2]
 801c42e:	789b      	ldrb	r3, [r3, #2]
 801c430:	fb0e 2206 	mla	r2, lr, r6, r2
 801c434:	fb04 2400 	mla	r4, r4, r0, r2
 801c438:	fb08 4803 	mla	r8, r8, r3, r4
 801c43c:	9b01      	ldr	r3, [sp, #4]
 801c43e:	fb13 fc0c 	smulbb	ip, r3, ip
 801c442:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801c446:	fb08 c707 	mla	r7, r8, r7, ip
 801c44a:	b2bf      	uxth	r7, r7
 801c44c:	f107 0c01 	add.w	ip, r7, #1
 801c450:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c454:	123f      	asrs	r7, r7, #8
 801c456:	708f      	strb	r7, [r1, #2]
 801c458:	b007      	add	sp, #28
 801c45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c45e:	bf00      	nop
 801c460:	08027073 	.word	0x08027073
 801c464:	0802756a 	.word	0x0802756a
 801c468:	0802713c 	.word	0x0802713c

0801c46c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c470:	ed2d 8b08 	vpush	{d8-d11}
 801c474:	b095      	sub	sp, #84	; 0x54
 801c476:	eeb0 aa40 	vmov.f32	s20, s0
 801c47a:	eef0 9a60 	vmov.f32	s19, s1
 801c47e:	930a      	str	r3, [sp, #40]	; 0x28
 801c480:	eeb0 9a41 	vmov.f32	s18, s2
 801c484:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801c488:	eeb0 8a62 	vmov.f32	s16, s5
 801c48c:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801c48e:	eef0 8a43 	vmov.f32	s17, s6
 801c492:	930c      	str	r3, [sp, #48]	; 0x30
 801c494:	eef0 ba44 	vmov.f32	s23, s8
 801c498:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801c49c:	eeb0 ba64 	vmov.f32	s22, s9
 801c4a0:	9013      	str	r0, [sp, #76]	; 0x4c
 801c4a2:	eef0 aa45 	vmov.f32	s21, s10
 801c4a6:	9310      	str	r3, [sp, #64]	; 0x40
 801c4a8:	6860      	ldr	r0, [r4, #4]
 801c4aa:	910f      	str	r1, [sp, #60]	; 0x3c
 801c4ac:	9212      	str	r2, [sp, #72]	; 0x48
 801c4ae:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801c4b0:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801c4b4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801c4b8:	fb00 1303 	mla	r3, r0, r3, r1
 801c4bc:	6821      	ldr	r1, [r4, #0]
 801c4be:	6854      	ldr	r4, [r2, #4]
 801c4c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c4c4:	18cb      	adds	r3, r1, r3
 801c4c6:	930b      	str	r3, [sp, #44]	; 0x2c
 801c4c8:	6813      	ldr	r3, [r2, #0]
 801c4ca:	930e      	str	r3, [sp, #56]	; 0x38
 801c4cc:	1d23      	adds	r3, r4, #4
 801c4ce:	9309      	str	r3, [sp, #36]	; 0x24
 801c4d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c4d2:	43db      	mvns	r3, r3
 801c4d4:	b2db      	uxtb	r3, r3
 801c4d6:	930d      	str	r3, [sp, #52]	; 0x34
 801c4d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	dc03      	bgt.n	801c4e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c4de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	f340 823c 	ble.w	801c95e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801c4e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	f340 8115 	ble.w	801c718 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801c4ee:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c4f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c4f2:	1412      	asrs	r2, r2, #16
 801c4f4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c4f8:	d431      	bmi.n	801c55e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801c4fa:	1c51      	adds	r1, r2, #1
 801c4fc:	428d      	cmp	r5, r1
 801c4fe:	dd31      	ble.n	801c564 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801c500:	2b00      	cmp	r3, #0
 801c502:	db2f      	blt.n	801c564 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801c504:	1c59      	adds	r1, r3, #1
 801c506:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c508:	4288      	cmp	r0, r1
 801c50a:	dd2b      	ble.n	801c564 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801c50c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c50e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c510:	3b01      	subs	r3, #1
 801c512:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801c514:	fb02 1203 	mla	r2, r2, r3, r1
 801c518:	1412      	asrs	r2, r2, #16
 801c51a:	d42d      	bmi.n	801c578 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801c51c:	3201      	adds	r2, #1
 801c51e:	4295      	cmp	r5, r2
 801c520:	dd2a      	ble.n	801c578 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801c522:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c524:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c526:	fb02 1303 	mla	r3, r2, r3, r1
 801c52a:	141b      	asrs	r3, r3, #16
 801c52c:	d424      	bmi.n	801c578 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801c52e:	3301      	adds	r3, #1
 801c530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c532:	429a      	cmp	r2, r3
 801c534:	dd20      	ble.n	801c578 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801c536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c538:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801c53c:	f103 0c03 	add.w	ip, r3, #3
 801c540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c542:	9311      	str	r3, [sp, #68]	; 0x44
 801c544:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c546:	2b00      	cmp	r3, #0
 801c548:	f300 814f 	bgt.w	801c7ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801c54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c54e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c550:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c554:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c558:	441a      	add	r2, r3
 801c55a:	920b      	str	r2, [sp, #44]	; 0x2c
 801c55c:	e0de      	b.n	801c71c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801c55e:	1c51      	adds	r1, r2, #1
 801c560:	f040 80cb 	bne.w	801c6fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801c564:	42aa      	cmp	r2, r5
 801c566:	f280 80c8 	bge.w	801c6fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801c56a:	1c5f      	adds	r7, r3, #1
 801c56c:	f2c0 80c5 	blt.w	801c6fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801c570:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c572:	4293      	cmp	r3, r2
 801c574:	f280 80c1 	bge.w	801c6fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801c578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c57a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c57c:	9311      	str	r3, [sp, #68]	; 0x44
 801c57e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c580:	2b00      	cmp	r3, #0
 801c582:	dde3      	ble.n	801c54c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801c584:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c586:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801c588:	141a      	asrs	r2, r3, #16
 801c58a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c58c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c58e:	1400      	asrs	r0, r0, #16
 801c590:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801c594:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c598:	f100 810e 	bmi.w	801c7b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801c59c:	1c46      	adds	r6, r0, #1
 801c59e:	42b5      	cmp	r5, r6
 801c5a0:	f340 810c 	ble.w	801c7bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801c5a4:	2a00      	cmp	r2, #0
 801c5a6:	f2c0 8109 	blt.w	801c7bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801c5aa:	1c56      	adds	r6, r2, #1
 801c5ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c5ae:	42b4      	cmp	r4, r6
 801c5b0:	f340 8104 	ble.w	801c7bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801c5b4:	fb02 0005 	mla	r0, r2, r5, r0
 801c5b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c5ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c5bc:	f814 e000 	ldrb.w	lr, [r4, r0]
 801c5c0:	4402      	add	r2, r0
 801c5c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c5c4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c5c8:	eb00 080e 	add.w	r8, r0, lr
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	f000 80e4 	beq.w	801c79a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801c5d2:	f892 c001 	ldrb.w	ip, [r2, #1]
 801c5d6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c5da:	4484      	add	ip, r0
 801c5dc:	2900      	cmp	r1, #0
 801c5de:	f000 80e5 	beq.w	801c7ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801c5e2:	1950      	adds	r0, r2, r5
 801c5e4:	5d52      	ldrb	r2, [r2, r5]
 801c5e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c5e8:	7840      	ldrb	r0, [r0, #1]
 801c5ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c5ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c5f2:	4422      	add	r2, r4
 801c5f4:	4420      	add	r0, r4
 801c5f6:	b29b      	uxth	r3, r3
 801c5f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c5fa:	b289      	uxth	r1, r1
 801c5fc:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801c600:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801c604:	fb03 fa01 	mul.w	sl, r3, r1
 801c608:	011b      	lsls	r3, r3, #4
 801c60a:	f89c e000 	ldrb.w	lr, [ip]
 801c60e:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801c612:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801c616:	eba3 030a 	sub.w	r3, r3, sl
 801c61a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c61c:	b289      	uxth	r1, r1
 801c61e:	b29b      	uxth	r3, r3
 801c620:	eba9 0901 	sub.w	r9, r9, r1
 801c624:	fb03 fe0e 	mul.w	lr, r3, lr
 801c628:	fa1f f989 	uxth.w	r9, r9
 801c62c:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c630:	f892 b000 	ldrb.w	fp, [r2]
 801c634:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c638:	f890 b000 	ldrb.w	fp, [r0]
 801c63c:	fb0a ee0b 	mla	lr, sl, fp, lr
 801c640:	f897 b000 	ldrb.w	fp, [r7]
 801c644:	fb1b fb04 	smulbb	fp, fp, r4
 801c648:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c64c:	fb0e be06 	mla	lr, lr, r6, fp
 801c650:	fa1f fe8e 	uxth.w	lr, lr
 801c654:	f10e 0b01 	add.w	fp, lr, #1
 801c658:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801c65c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801c660:	f887 b000 	strb.w	fp, [r7]
 801c664:	f89c e001 	ldrb.w	lr, [ip, #1]
 801c668:	f898 b001 	ldrb.w	fp, [r8, #1]
 801c66c:	fb03 fe0e 	mul.w	lr, r3, lr
 801c670:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c674:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c678:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c67c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c680:	fb0a ee0b 	mla	lr, sl, fp, lr
 801c684:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c688:	fb1b fb04 	smulbb	fp, fp, r4
 801c68c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c690:	fb0e be06 	mla	lr, lr, r6, fp
 801c694:	fa1f fe8e 	uxth.w	lr, lr
 801c698:	f10e 0b01 	add.w	fp, lr, #1
 801c69c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c6a0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c6a4:	f887 e001 	strb.w	lr, [r7, #1]
 801c6a8:	f89c c002 	ldrb.w	ip, [ip, #2]
 801c6ac:	f898 e002 	ldrb.w	lr, [r8, #2]
 801c6b0:	fb03 f30c 	mul.w	r3, r3, ip
 801c6b4:	fb09 330e 	mla	r3, r9, lr, r3
 801c6b8:	f892 e002 	ldrb.w	lr, [r2, #2]
 801c6bc:	7882      	ldrb	r2, [r0, #2]
 801c6be:	fb01 310e 	mla	r1, r1, lr, r3
 801c6c2:	fb0a 1a02 	mla	sl, sl, r2, r1
 801c6c6:	78b9      	ldrb	r1, [r7, #2]
 801c6c8:	fb11 f104 	smulbb	r1, r1, r4
 801c6cc:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801c6d0:	fb0a 1606 	mla	r6, sl, r6, r1
 801c6d4:	b2b6      	uxth	r6, r6
 801c6d6:	1c73      	adds	r3, r6, #1
 801c6d8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801c6dc:	1236      	asrs	r6, r6, #8
 801c6de:	70be      	strb	r6, [r7, #2]
 801c6e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c6e2:	3703      	adds	r7, #3
 801c6e4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c6e6:	4413      	add	r3, r2
 801c6e8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c6ea:	9327      	str	r3, [sp, #156]	; 0x9c
 801c6ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c6ee:	4413      	add	r3, r2
 801c6f0:	9328      	str	r3, [sp, #160]	; 0xa0
 801c6f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c6f4:	3b01      	subs	r3, #1
 801c6f6:	9311      	str	r3, [sp, #68]	; 0x44
 801c6f8:	e741      	b.n	801c57e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801c6fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c6fc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c6fe:	4413      	add	r3, r2
 801c700:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c702:	9327      	str	r3, [sp, #156]	; 0x9c
 801c704:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c706:	4413      	add	r3, r2
 801c708:	9328      	str	r3, [sp, #160]	; 0xa0
 801c70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c70c:	3b01      	subs	r3, #1
 801c70e:	930a      	str	r3, [sp, #40]	; 0x28
 801c710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c712:	3303      	adds	r3, #3
 801c714:	930b      	str	r3, [sp, #44]	; 0x2c
 801c716:	e6e6      	b.n	801c4e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c718:	f47f aef8 	bne.w	801c50c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801c71c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c71e:	2b00      	cmp	r3, #0
 801c720:	f340 811d 	ble.w	801c95e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801c724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c728:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c72a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c72e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c732:	eef0 6a48 	vmov.f32	s13, s16
 801c736:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c73a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c73e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c742:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801c746:	eef0 6a68 	vmov.f32	s13, s17
 801c74a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c74e:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801c752:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c756:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c75a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c75e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c762:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c766:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c76a:	ee18 2a10 	vmov	r2, s16
 801c76e:	eeb0 8a47 	vmov.f32	s16, s14
 801c772:	fb92 f3f3 	sdiv	r3, r2, r3
 801c776:	ee18 2a90 	vmov	r2, s17
 801c77a:	9329      	str	r3, [sp, #164]	; 0xa4
 801c77c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c77e:	eef0 8a67 	vmov.f32	s17, s15
 801c782:	fb92 f3f3 	sdiv	r3, r2, r3
 801c786:	932a      	str	r3, [sp, #168]	; 0xa8
 801c788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c78a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c78c:	3b01      	subs	r3, #1
 801c78e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c790:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c792:	bf08      	it	eq
 801c794:	4613      	moveq	r3, r2
 801c796:	930a      	str	r3, [sp, #40]	; 0x28
 801c798:	e69e      	b.n	801c4d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c79a:	b151      	cbz	r1, 801c7b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801c79c:	5d52      	ldrb	r2, [r2, r5]
 801c79e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c7a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c7a4:	4402      	add	r2, r0
 801c7a6:	4640      	mov	r0, r8
 801c7a8:	46c4      	mov	ip, r8
 801c7aa:	e724      	b.n	801c5f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801c7ac:	4640      	mov	r0, r8
 801c7ae:	4642      	mov	r2, r8
 801c7b0:	e721      	b.n	801c5f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801c7b2:	4640      	mov	r0, r8
 801c7b4:	4642      	mov	r2, r8
 801c7b6:	e7f7      	b.n	801c7a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801c7b8:	1c46      	adds	r6, r0, #1
 801c7ba:	d191      	bne.n	801c6e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801c7bc:	4285      	cmp	r5, r0
 801c7be:	dd8f      	ble.n	801c6e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801c7c0:	1c54      	adds	r4, r2, #1
 801c7c2:	db8d      	blt.n	801c6e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801c7c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c7c6:	4294      	cmp	r4, r2
 801c7c8:	dd8a      	ble.n	801c6e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801c7ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c7cc:	9002      	str	r0, [sp, #8]
 801c7ce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c7d0:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801c7d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c7d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c7d8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c7dc:	e9cd 5300 	strd	r5, r3, [sp]
 801c7e0:	4639      	mov	r1, r7
 801c7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7e4:	f7ff fd52 	bl	801c28c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801c7e8:	e77a      	b.n	801c6e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801c7ea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801c7ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c7ee:	1410      	asrs	r0, r2, #16
 801c7f0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c7f4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c7f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c7f8:	1412      	asrs	r2, r2, #16
 801c7fa:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c7fe:	fb05 2000 	mla	r0, r5, r0, r2
 801c802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c804:	f814 8000 	ldrb.w	r8, [r4, r0]
 801c808:	4402      	add	r2, r0
 801c80a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c80c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c810:	eb00 0708 	add.w	r7, r0, r8
 801c814:	2b00      	cmp	r3, #0
 801c816:	f000 8093 	beq.w	801c940 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801c81a:	7856      	ldrb	r6, [r2, #1]
 801c81c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c820:	4406      	add	r6, r0
 801c822:	2900      	cmp	r1, #0
 801c824:	f000 8095 	beq.w	801c952 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801c828:	1950      	adds	r0, r2, r5
 801c82a:	5d52      	ldrb	r2, [r2, r5]
 801c82c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c82e:	7840      	ldrb	r0, [r0, #1]
 801c830:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c834:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c838:	4422      	add	r2, r4
 801c83a:	4420      	add	r0, r4
 801c83c:	b29b      	uxth	r3, r3
 801c83e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c840:	b289      	uxth	r1, r1
 801c842:	f10c 0c03 	add.w	ip, ip, #3
 801c846:	f814 b008 	ldrb.w	fp, [r4, r8]
 801c84a:	fb03 f901 	mul.w	r9, r3, r1
 801c84e:	011b      	lsls	r3, r3, #4
 801c850:	f896 8000 	ldrb.w	r8, [r6]
 801c854:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c858:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c85c:	eba3 0309 	sub.w	r3, r3, r9
 801c860:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c862:	b289      	uxth	r1, r1
 801c864:	b29b      	uxth	r3, r3
 801c866:	ebae 0e01 	sub.w	lr, lr, r1
 801c86a:	fb03 f808 	mul.w	r8, r3, r8
 801c86e:	fa1f fe8e 	uxth.w	lr, lr
 801c872:	fb0e 880b 	mla	r8, lr, fp, r8
 801c876:	f892 b000 	ldrb.w	fp, [r2]
 801c87a:	fb01 880b 	mla	r8, r1, fp, r8
 801c87e:	f890 b000 	ldrb.w	fp, [r0]
 801c882:	fb09 880b 	mla	r8, r9, fp, r8
 801c886:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801c88a:	fb1b fb04 	smulbb	fp, fp, r4
 801c88e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801c892:	fb08 b80a 	mla	r8, r8, sl, fp
 801c896:	fa1f f888 	uxth.w	r8, r8
 801c89a:	f108 0b01 	add.w	fp, r8, #1
 801c89e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c8a2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c8a6:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801c8aa:	f896 8001 	ldrb.w	r8, [r6, #1]
 801c8ae:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c8b2:	fb03 f808 	mul.w	r8, r3, r8
 801c8b6:	fb0e 880b 	mla	r8, lr, fp, r8
 801c8ba:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c8be:	fb01 880b 	mla	r8, r1, fp, r8
 801c8c2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c8c6:	fb09 880b 	mla	r8, r9, fp, r8
 801c8ca:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801c8ce:	fb1b fb04 	smulbb	fp, fp, r4
 801c8d2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801c8d6:	fb08 b80a 	mla	r8, r8, sl, fp
 801c8da:	fa1f f888 	uxth.w	r8, r8
 801c8de:	f108 0b01 	add.w	fp, r8, #1
 801c8e2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c8e6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c8ea:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801c8ee:	78b6      	ldrb	r6, [r6, #2]
 801c8f0:	78bf      	ldrb	r7, [r7, #2]
 801c8f2:	4373      	muls	r3, r6
 801c8f4:	7896      	ldrb	r6, [r2, #2]
 801c8f6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c8f8:	fb0e 3307 	mla	r3, lr, r7, r3
 801c8fc:	fb01 3306 	mla	r3, r1, r6, r3
 801c900:	7886      	ldrb	r6, [r0, #2]
 801c902:	fb09 3906 	mla	r9, r9, r6, r3
 801c906:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801c90a:	fb13 f304 	smulbb	r3, r3, r4
 801c90e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801c912:	fb09 390a 	mla	r9, r9, sl, r3
 801c916:	fa1f f989 	uxth.w	r9, r9
 801c91a:	f109 0301 	add.w	r3, r9, #1
 801c91e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801c922:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c924:	4413      	add	r3, r2
 801c926:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c928:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c92c:	9327      	str	r3, [sp, #156]	; 0x9c
 801c92e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c930:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801c934:	4413      	add	r3, r2
 801c936:	9328      	str	r3, [sp, #160]	; 0xa0
 801c938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c93a:	3b01      	subs	r3, #1
 801c93c:	9311      	str	r3, [sp, #68]	; 0x44
 801c93e:	e601      	b.n	801c544 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c940:	b151      	cbz	r1, 801c958 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801c942:	5d52      	ldrb	r2, [r2, r5]
 801c944:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c946:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c94a:	4402      	add	r2, r0
 801c94c:	4638      	mov	r0, r7
 801c94e:	463e      	mov	r6, r7
 801c950:	e774      	b.n	801c83c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801c952:	4638      	mov	r0, r7
 801c954:	463a      	mov	r2, r7
 801c956:	e771      	b.n	801c83c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801c958:	4638      	mov	r0, r7
 801c95a:	463a      	mov	r2, r7
 801c95c:	e7f7      	b.n	801c94e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801c95e:	b015      	add	sp, #84	; 0x54
 801c960:	ecbd 8b08 	vpop	{d8-d11}
 801c964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c968 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801c968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c96c:	780d      	ldrb	r5, [r1, #0]
 801c96e:	f891 9002 	ldrb.w	r9, [r1, #2]
 801c972:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801c976:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801c97a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801c97e:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801c982:	f891 9001 	ldrb.w	r9, [r1, #1]
 801c986:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801c98a:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801c98e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801c992:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801c996:	9501      	str	r5, [sp, #4]
 801c998:	fb06 470c 	mla	r7, r6, ip, r4
 801c99c:	2e00      	cmp	r6, #0
 801c99e:	eb02 0e07 	add.w	lr, r2, r7
 801c9a2:	db46      	blt.n	801ca32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801c9a4:	45b0      	cmp	r8, r6
 801c9a6:	dd44      	ble.n	801ca32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801c9a8:	2c00      	cmp	r4, #0
 801c9aa:	db40      	blt.n	801ca2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801c9ac:	45a4      	cmp	ip, r4
 801c9ae:	dd3e      	ble.n	801ca2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801c9b0:	5dd7      	ldrb	r7, [r2, r7]
 801c9b2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c9b6:	441f      	add	r7, r3
 801c9b8:	1c62      	adds	r2, r4, #1
 801c9ba:	d43d      	bmi.n	801ca38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801c9bc:	4594      	cmp	ip, r2
 801c9be:	dd3b      	ble.n	801ca38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801c9c0:	f1ba 0f00 	cmp.w	sl, #0
 801c9c4:	d038      	beq.n	801ca38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801c9c6:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801c9ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c9ce:	441d      	add	r5, r3
 801c9d0:	3601      	adds	r6, #1
 801c9d2:	d435      	bmi.n	801ca40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801c9d4:	45b0      	cmp	r8, r6
 801c9d6:	dd33      	ble.n	801ca40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801c9d8:	b390      	cbz	r0, 801ca40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801c9da:	2c00      	cmp	r4, #0
 801c9dc:	db2e      	blt.n	801ca3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801c9de:	45a4      	cmp	ip, r4
 801c9e0:	dd2c      	ble.n	801ca3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801c9e2:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801c9e6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c9ea:	441e      	add	r6, r3
 801c9ec:	1c62      	adds	r2, r4, #1
 801c9ee:	d42a      	bmi.n	801ca46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801c9f0:	4594      	cmp	ip, r2
 801c9f2:	dd28      	ble.n	801ca46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801c9f4:	f1ba 0f00 	cmp.w	sl, #0
 801c9f8:	d025      	beq.n	801ca46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801c9fa:	44f4      	add	ip, lr
 801c9fc:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ca00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ca04:	4413      	add	r3, r2
 801ca06:	f1ba 0f0f 	cmp.w	sl, #15
 801ca0a:	f897 8000 	ldrb.w	r8, [r7]
 801ca0e:	f895 9000 	ldrb.w	r9, [r5]
 801ca12:	f896 e000 	ldrb.w	lr, [r6]
 801ca16:	f893 c000 	ldrb.w	ip, [r3]
 801ca1a:	d801      	bhi.n	801ca20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801ca1c:	280f      	cmp	r0, #15
 801ca1e:	d914      	bls.n	801ca4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801ca20:	4b29      	ldr	r3, [pc, #164]	; (801cac8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801ca22:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ca26:	4a29      	ldr	r2, [pc, #164]	; (801cacc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801ca28:	4829      	ldr	r0, [pc, #164]	; (801cad0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801ca2a:	f005 ff39 	bl	80228a0 <__assert_func>
 801ca2e:	af01      	add	r7, sp, #4
 801ca30:	e7c2      	b.n	801c9b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801ca32:	ad01      	add	r5, sp, #4
 801ca34:	462f      	mov	r7, r5
 801ca36:	e7cb      	b.n	801c9d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ca38:	ad01      	add	r5, sp, #4
 801ca3a:	e7c9      	b.n	801c9d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ca3c:	ae01      	add	r6, sp, #4
 801ca3e:	e7d5      	b.n	801c9ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801ca40:	ab01      	add	r3, sp, #4
 801ca42:	461e      	mov	r6, r3
 801ca44:	e7df      	b.n	801ca06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801ca46:	ab01      	add	r3, sp, #4
 801ca48:	e7dd      	b.n	801ca06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801ca4a:	fa1f f48a 	uxth.w	r4, sl
 801ca4e:	b280      	uxth	r0, r0
 801ca50:	fb04 fa00 	mul.w	sl, r4, r0
 801ca54:	0124      	lsls	r4, r4, #4
 801ca56:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ca5a:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801ca5e:	b282      	uxth	r2, r0
 801ca60:	eba4 000a 	sub.w	r0, r4, sl
 801ca64:	ebab 0b02 	sub.w	fp, fp, r2
 801ca68:	b280      	uxth	r0, r0
 801ca6a:	fa1f fb8b 	uxth.w	fp, fp
 801ca6e:	fb00 f909 	mul.w	r9, r0, r9
 801ca72:	fb0b 9808 	mla	r8, fp, r8, r9
 801ca76:	fb02 8e0e 	mla	lr, r2, lr, r8
 801ca7a:	fb0a ec0c 	mla	ip, sl, ip, lr
 801ca7e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ca82:	f881 c000 	strb.w	ip, [r1]
 801ca86:	786c      	ldrb	r4, [r5, #1]
 801ca88:	f897 c001 	ldrb.w	ip, [r7, #1]
 801ca8c:	4344      	muls	r4, r0
 801ca8e:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801ca92:	7874      	ldrb	r4, [r6, #1]
 801ca94:	fb02 cc04 	mla	ip, r2, r4, ip
 801ca98:	785c      	ldrb	r4, [r3, #1]
 801ca9a:	fb0a c404 	mla	r4, sl, r4, ip
 801ca9e:	1224      	asrs	r4, r4, #8
 801caa0:	704c      	strb	r4, [r1, #1]
 801caa2:	78ad      	ldrb	r5, [r5, #2]
 801caa4:	78bc      	ldrb	r4, [r7, #2]
 801caa6:	4368      	muls	r0, r5
 801caa8:	fb0b 0b04 	mla	fp, fp, r4, r0
 801caac:	78b0      	ldrb	r0, [r6, #2]
 801caae:	fb02 b000 	mla	r0, r2, r0, fp
 801cab2:	789a      	ldrb	r2, [r3, #2]
 801cab4:	fb0a 0a02 	mla	sl, sl, r2, r0
 801cab8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cabc:	f881 a002 	strb.w	sl, [r1, #2]
 801cac0:	b003      	add	sp, #12
 801cac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cac6:	bf00      	nop
 801cac8:	08027073 	.word	0x08027073
 801cacc:	0802756a 	.word	0x0802756a
 801cad0:	0802713c 	.word	0x0802713c

0801cad4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cad8:	ed2d 8b0a 	vpush	{d8-d12}
 801cadc:	b08f      	sub	sp, #60	; 0x3c
 801cade:	eeb0 aa40 	vmov.f32	s20, s0
 801cae2:	eef0 9a60 	vmov.f32	s19, s1
 801cae6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801cae8:	eeb0 9a41 	vmov.f32	s18, s2
 801caec:	9307      	str	r3, [sp, #28]
 801caee:	eeb0 8a62 	vmov.f32	s16, s5
 801caf2:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801caf6:	eef0 8a43 	vmov.f32	s17, s6
 801cafa:	900d      	str	r0, [sp, #52]	; 0x34
 801cafc:	eeb0 ca44 	vmov.f32	s24, s8
 801cb00:	6860      	ldr	r0, [r4, #4]
 801cb02:	eef0 ba64 	vmov.f32	s23, s9
 801cb06:	9309      	str	r3, [sp, #36]	; 0x24
 801cb08:	eeb0 ba45 	vmov.f32	s22, s10
 801cb0c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801cb10:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801cb14:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801cb18:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801cb1c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801cb1e:	fb00 1303 	mla	r3, r0, r3, r1
 801cb22:	6821      	ldr	r1, [r4, #0]
 801cb24:	6854      	ldr	r4, [r2, #4]
 801cb26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb2a:	3404      	adds	r4, #4
 801cb2c:	18cb      	adds	r3, r1, r3
 801cb2e:	9308      	str	r3, [sp, #32]
 801cb30:	6813      	ldr	r3, [r2, #0]
 801cb32:	930a      	str	r3, [sp, #40]	; 0x28
 801cb34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	dc03      	bgt.n	801cb42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cb3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	f340 81d2 	ble.w	801cee6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801cb42:	9b07      	ldr	r3, [sp, #28]
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	f340 80e3 	ble.w	801cd10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801cb4a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801cb4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cb4e:	1412      	asrs	r2, r2, #16
 801cb50:	ea4f 4323 	mov.w	r3, r3, asr #16
 801cb54:	d42f      	bmi.n	801cbb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801cb56:	1c51      	adds	r1, r2, #1
 801cb58:	428d      	cmp	r5, r1
 801cb5a:	dd2f      	ble.n	801cbbc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	db2d      	blt.n	801cbbc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801cb60:	1c59      	adds	r1, r3, #1
 801cb62:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cb64:	4288      	cmp	r0, r1
 801cb66:	dd29      	ble.n	801cbbc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801cb68:	9b07      	ldr	r3, [sp, #28]
 801cb6a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801cb6c:	3b01      	subs	r3, #1
 801cb6e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801cb70:	fb02 1203 	mla	r2, r2, r3, r1
 801cb74:	1412      	asrs	r2, r2, #16
 801cb76:	d42b      	bmi.n	801cbd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801cb78:	3201      	adds	r2, #1
 801cb7a:	4295      	cmp	r5, r2
 801cb7c:	dd28      	ble.n	801cbd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801cb7e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801cb80:	9924      	ldr	r1, [sp, #144]	; 0x90
 801cb82:	fb02 1303 	mla	r3, r2, r3, r1
 801cb86:	141b      	asrs	r3, r3, #16
 801cb88:	d422      	bmi.n	801cbd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801cb8a:	3301      	adds	r3, #1
 801cb8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cb8e:	429a      	cmp	r2, r3
 801cb90:	dd1e      	ble.n	801cbd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801cb92:	9b08      	ldr	r3, [sp, #32]
 801cb94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801cb98:	f103 0803 	add.w	r8, r3, #3
 801cb9c:	f1ba 0f00 	cmp.w	sl, #0
 801cba0:	f300 8119 	bgt.w	801cdd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801cba4:	9b07      	ldr	r3, [sp, #28]
 801cba6:	9a08      	ldr	r2, [sp, #32]
 801cba8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cbb0:	441a      	add	r2, r3
 801cbb2:	9208      	str	r2, [sp, #32]
 801cbb4:	e0ae      	b.n	801cd14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801cbb6:	1c51      	adds	r1, r2, #1
 801cbb8:	f040 809b 	bne.w	801ccf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801cbbc:	42aa      	cmp	r2, r5
 801cbbe:	f280 8098 	bge.w	801ccf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801cbc2:	1c5a      	adds	r2, r3, #1
 801cbc4:	f2c0 8095 	blt.w	801ccf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801cbc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cbca:	4293      	cmp	r3, r2
 801cbcc:	f280 8091 	bge.w	801ccf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801cbd0:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801cbd4:	f1bb 0f00 	cmp.w	fp, #0
 801cbd8:	dde4      	ble.n	801cba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801cbda:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cbdc:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801cbde:	141a      	asrs	r2, r3, #16
 801cbe0:	9924      	ldr	r1, [sp, #144]	; 0x90
 801cbe2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cbe4:	1400      	asrs	r0, r0, #16
 801cbe6:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801cbea:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801cbee:	f100 80dc 	bmi.w	801cdaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801cbf2:	1c47      	adds	r7, r0, #1
 801cbf4:	42bd      	cmp	r5, r7
 801cbf6:	f340 80da 	ble.w	801cdae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801cbfa:	2a00      	cmp	r2, #0
 801cbfc:	f2c0 80d7 	blt.w	801cdae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801cc00:	f102 0c01 	add.w	ip, r2, #1
 801cc04:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801cc06:	4567      	cmp	r7, ip
 801cc08:	f340 80d1 	ble.w	801cdae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801cc0c:	fb02 0005 	mla	r0, r2, r5, r0
 801cc10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801cc12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cc14:	f817 8000 	ldrb.w	r8, [r7, r0]
 801cc18:	4402      	add	r2, r0
 801cc1a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801cc1e:	eb04 0c08 	add.w	ip, r4, r8
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	f000 80b3 	beq.w	801cd8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801cc28:	7857      	ldrb	r7, [r2, #1]
 801cc2a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cc2e:	4427      	add	r7, r4
 801cc30:	2900      	cmp	r1, #0
 801cc32:	f000 80b4 	beq.w	801cd9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801cc36:	1950      	adds	r0, r2, r5
 801cc38:	5d52      	ldrb	r2, [r2, r5]
 801cc3a:	7840      	ldrb	r0, [r0, #1]
 801cc3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cc40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cc44:	4422      	add	r2, r4
 801cc46:	4420      	add	r0, r4
 801cc48:	b29b      	uxth	r3, r3
 801cc4a:	f814 a008 	ldrb.w	sl, [r4, r8]
 801cc4e:	b289      	uxth	r1, r1
 801cc50:	f897 8000 	ldrb.w	r8, [r7]
 801cc54:	fb03 f901 	mul.w	r9, r3, r1
 801cc58:	011b      	lsls	r3, r3, #4
 801cc5a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cc5e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801cc62:	eba3 0309 	sub.w	r3, r3, r9
 801cc66:	b289      	uxth	r1, r1
 801cc68:	b29b      	uxth	r3, r3
 801cc6a:	ebae 0e01 	sub.w	lr, lr, r1
 801cc6e:	fb03 f808 	mul.w	r8, r3, r8
 801cc72:	fa1f fe8e 	uxth.w	lr, lr
 801cc76:	fb0e 880a 	mla	r8, lr, sl, r8
 801cc7a:	f892 a000 	ldrb.w	sl, [r2]
 801cc7e:	fb01 880a 	mla	r8, r1, sl, r8
 801cc82:	f890 a000 	ldrb.w	sl, [r0]
 801cc86:	fb09 880a 	mla	r8, r9, sl, r8
 801cc8a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cc8e:	f886 8000 	strb.w	r8, [r6]
 801cc92:	f897 8001 	ldrb.w	r8, [r7, #1]
 801cc96:	f89c a001 	ldrb.w	sl, [ip, #1]
 801cc9a:	fb03 f808 	mul.w	r8, r3, r8
 801cc9e:	fb0e 880a 	mla	r8, lr, sl, r8
 801cca2:	f892 a001 	ldrb.w	sl, [r2, #1]
 801cca6:	fb01 880a 	mla	r8, r1, sl, r8
 801ccaa:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ccae:	fb09 880a 	mla	r8, r9, sl, r8
 801ccb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ccb6:	f886 8001 	strb.w	r8, [r6, #1]
 801ccba:	78bf      	ldrb	r7, [r7, #2]
 801ccbc:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ccc0:	437b      	muls	r3, r7
 801ccc2:	7892      	ldrb	r2, [r2, #2]
 801ccc4:	fb0e 330c 	mla	r3, lr, ip, r3
 801ccc8:	fb01 3102 	mla	r1, r1, r2, r3
 801cccc:	7882      	ldrb	r2, [r0, #2]
 801ccce:	fb09 1902 	mla	r9, r9, r2, r1
 801ccd2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ccd6:	f886 9002 	strb.w	r9, [r6, #2]
 801ccda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ccdc:	3603      	adds	r6, #3
 801ccde:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801cce0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cce4:	4413      	add	r3, r2
 801cce6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801cce8:	9323      	str	r3, [sp, #140]	; 0x8c
 801ccea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ccec:	4413      	add	r3, r2
 801ccee:	9324      	str	r3, [sp, #144]	; 0x90
 801ccf0:	e770      	b.n	801cbd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801ccf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ccf4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ccf6:	4413      	add	r3, r2
 801ccf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ccfa:	9323      	str	r3, [sp, #140]	; 0x8c
 801ccfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ccfe:	4413      	add	r3, r2
 801cd00:	9324      	str	r3, [sp, #144]	; 0x90
 801cd02:	9b07      	ldr	r3, [sp, #28]
 801cd04:	3b01      	subs	r3, #1
 801cd06:	9307      	str	r3, [sp, #28]
 801cd08:	9b08      	ldr	r3, [sp, #32]
 801cd0a:	3303      	adds	r3, #3
 801cd0c:	9308      	str	r3, [sp, #32]
 801cd0e:	e718      	b.n	801cb42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cd10:	f47f af2a 	bne.w	801cb68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801cd14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd16:	2b00      	cmp	r3, #0
 801cd18:	f340 80e5 	ble.w	801cee6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801cd1c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801cd20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cd22:	ee79 9aab 	vadd.f32	s19, s19, s23
 801cd26:	eef0 6a48 	vmov.f32	s13, s16
 801cd2a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801cd2e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801cd32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd36:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801cd3a:	eef0 6a68 	vmov.f32	s13, s17
 801cd3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd42:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801cd46:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cd4a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cd4e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cd52:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801cd56:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cd5a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801cd5e:	ee18 2a10 	vmov	r2, s16
 801cd62:	eeb0 8a47 	vmov.f32	s16, s14
 801cd66:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd6a:	ee18 2a90 	vmov	r2, s17
 801cd6e:	9325      	str	r3, [sp, #148]	; 0x94
 801cd70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cd72:	eef0 8a67 	vmov.f32	s17, s15
 801cd76:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd7a:	9326      	str	r3, [sp, #152]	; 0x98
 801cd7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cd80:	3b01      	subs	r3, #1
 801cd82:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cd86:	bf08      	it	eq
 801cd88:	4613      	moveq	r3, r2
 801cd8a:	9307      	str	r3, [sp, #28]
 801cd8c:	e6d2      	b.n	801cb34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cd8e:	b149      	cbz	r1, 801cda4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801cd90:	5d52      	ldrb	r2, [r2, r5]
 801cd92:	4660      	mov	r0, ip
 801cd94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd98:	4422      	add	r2, r4
 801cd9a:	4667      	mov	r7, ip
 801cd9c:	e754      	b.n	801cc48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801cd9e:	4660      	mov	r0, ip
 801cda0:	4662      	mov	r2, ip
 801cda2:	e751      	b.n	801cc48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801cda4:	4660      	mov	r0, ip
 801cda6:	4662      	mov	r2, ip
 801cda8:	e7f7      	b.n	801cd9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801cdaa:	1c47      	adds	r7, r0, #1
 801cdac:	d195      	bne.n	801ccda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801cdae:	4285      	cmp	r5, r0
 801cdb0:	dd93      	ble.n	801ccda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801cdb2:	1c57      	adds	r7, r2, #1
 801cdb4:	db91      	blt.n	801ccda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801cdb6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801cdb8:	4297      	cmp	r7, r2
 801cdba:	dd8e      	ble.n	801ccda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801cdbc:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801cdc0:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801cdc4:	e9cd 5700 	strd	r5, r7, [sp]
 801cdc8:	4623      	mov	r3, r4
 801cdca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cdcc:	4631      	mov	r1, r6
 801cdce:	980d      	ldr	r0, [sp, #52]	; 0x34
 801cdd0:	f7ff fdca 	bl	801c968 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801cdd4:	e781      	b.n	801ccda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801cdd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801cdd8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801cdda:	1410      	asrs	r0, r2, #16
 801cddc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cde0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801cde2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cde4:	1412      	asrs	r2, r2, #16
 801cde6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801cdea:	fb05 2000 	mla	r0, r5, r0, r2
 801cdee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cdf0:	f816 e000 	ldrb.w	lr, [r6, r0]
 801cdf4:	4402      	add	r2, r0
 801cdf6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cdfa:	eb04 070e 	add.w	r7, r4, lr
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d063      	beq.n	801ceca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801ce02:	7856      	ldrb	r6, [r2, #1]
 801ce04:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ce08:	4426      	add	r6, r4
 801ce0a:	2900      	cmp	r1, #0
 801ce0c:	d065      	beq.n	801ceda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801ce0e:	1950      	adds	r0, r2, r5
 801ce10:	5d52      	ldrb	r2, [r2, r5]
 801ce12:	7840      	ldrb	r0, [r0, #1]
 801ce14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ce18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ce1c:	4422      	add	r2, r4
 801ce1e:	4420      	add	r0, r4
 801ce20:	b29b      	uxth	r3, r3
 801ce22:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801ce26:	b289      	uxth	r1, r1
 801ce28:	f896 e000 	ldrb.w	lr, [r6]
 801ce2c:	f108 0803 	add.w	r8, r8, #3
 801ce30:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ce34:	fb03 f901 	mul.w	r9, r3, r1
 801ce38:	011b      	lsls	r3, r3, #4
 801ce3a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ce3e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801ce42:	eba3 0309 	sub.w	r3, r3, r9
 801ce46:	b289      	uxth	r1, r1
 801ce48:	b29b      	uxth	r3, r3
 801ce4a:	ebac 0c01 	sub.w	ip, ip, r1
 801ce4e:	fb03 fe0e 	mul.w	lr, r3, lr
 801ce52:	fa1f fc8c 	uxth.w	ip, ip
 801ce56:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ce5a:	f892 b000 	ldrb.w	fp, [r2]
 801ce5e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ce62:	f890 b000 	ldrb.w	fp, [r0]
 801ce66:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ce6a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ce6e:	f808 ec06 	strb.w	lr, [r8, #-6]
 801ce72:	f896 e001 	ldrb.w	lr, [r6, #1]
 801ce76:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ce7a:	fb03 fe0e 	mul.w	lr, r3, lr
 801ce7e:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ce82:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ce86:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ce8a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ce8e:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ce92:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ce96:	f808 ec05 	strb.w	lr, [r8, #-5]
 801ce9a:	78b6      	ldrb	r6, [r6, #2]
 801ce9c:	78bf      	ldrb	r7, [r7, #2]
 801ce9e:	4373      	muls	r3, r6
 801cea0:	7896      	ldrb	r6, [r2, #2]
 801cea2:	7882      	ldrb	r2, [r0, #2]
 801cea4:	fb0c 3307 	mla	r3, ip, r7, r3
 801cea8:	fb01 3306 	mla	r3, r1, r6, r3
 801ceac:	fb09 3902 	mla	r9, r9, r2, r3
 801ceb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ceb2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ceb4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ceb8:	4413      	add	r3, r2
 801ceba:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801cebc:	f808 9c04 	strb.w	r9, [r8, #-4]
 801cec0:	9323      	str	r3, [sp, #140]	; 0x8c
 801cec2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cec4:	4413      	add	r3, r2
 801cec6:	9324      	str	r3, [sp, #144]	; 0x90
 801cec8:	e668      	b.n	801cb9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801ceca:	b149      	cbz	r1, 801cee0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801cecc:	5d52      	ldrb	r2, [r2, r5]
 801cece:	4638      	mov	r0, r7
 801ced0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ced4:	4422      	add	r2, r4
 801ced6:	463e      	mov	r6, r7
 801ced8:	e7a2      	b.n	801ce20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801ceda:	4638      	mov	r0, r7
 801cedc:	463a      	mov	r2, r7
 801cede:	e79f      	b.n	801ce20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801cee0:	4638      	mov	r0, r7
 801cee2:	463a      	mov	r2, r7
 801cee4:	e7f7      	b.n	801ced6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801cee6:	b00f      	add	sp, #60	; 0x3c
 801cee8:	ecbd 8b0a 	vpop	{d8-d12}
 801ceec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cef0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801cef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cef4:	b087      	sub	sp, #28
 801cef6:	7888      	ldrb	r0, [r1, #2]
 801cef8:	9002      	str	r0, [sp, #8]
 801cefa:	7848      	ldrb	r0, [r1, #1]
 801cefc:	9e02      	ldr	r6, [sp, #8]
 801cefe:	9003      	str	r0, [sp, #12]
 801cf00:	7808      	ldrb	r0, [r1, #0]
 801cf02:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801cf06:	9004      	str	r0, [sp, #16]
 801cf08:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801cf0c:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801cf10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801cf14:	9e03      	ldr	r6, [sp, #12]
 801cf16:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801cf1a:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801cf1e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801cf22:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801cf26:	fb04 7508 	mla	r5, r4, r8, r7
 801cf2a:	2c00      	cmp	r4, #0
 801cf2c:	eb02 0905 	add.w	r9, r2, r5
 801cf30:	db45      	blt.n	801cfbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801cf32:	45a2      	cmp	sl, r4
 801cf34:	dd43      	ble.n	801cfbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801cf36:	2f00      	cmp	r7, #0
 801cf38:	db3f      	blt.n	801cfba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801cf3a:	45b8      	cmp	r8, r7
 801cf3c:	dd3d      	ble.n	801cfba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801cf3e:	5d52      	ldrb	r2, [r2, r5]
 801cf40:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801cf44:	1c7a      	adds	r2, r7, #1
 801cf46:	d43d      	bmi.n	801cfc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801cf48:	4590      	cmp	r8, r2
 801cf4a:	dd3b      	ble.n	801cfc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801cf4c:	f1bc 0f00 	cmp.w	ip, #0
 801cf50:	d038      	beq.n	801cfc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801cf52:	f899 2001 	ldrb.w	r2, [r9, #1]
 801cf56:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801cf5a:	3401      	adds	r4, #1
 801cf5c:	d436      	bmi.n	801cfcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801cf5e:	45a2      	cmp	sl, r4
 801cf60:	dd34      	ble.n	801cfcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801cf62:	f1be 0f00 	cmp.w	lr, #0
 801cf66:	d031      	beq.n	801cfcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801cf68:	2f00      	cmp	r7, #0
 801cf6a:	db2d      	blt.n	801cfc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801cf6c:	45b8      	cmp	r8, r7
 801cf6e:	dd2b      	ble.n	801cfc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801cf70:	f819 2008 	ldrb.w	r2, [r9, r8]
 801cf74:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801cf78:	3701      	adds	r7, #1
 801cf7a:	d409      	bmi.n	801cf90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801cf7c:	45b8      	cmp	r8, r7
 801cf7e:	dd07      	ble.n	801cf90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801cf80:	f1bc 0f00 	cmp.w	ip, #0
 801cf84:	d004      	beq.n	801cf90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801cf86:	44c8      	add	r8, r9
 801cf88:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cf8c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801cf90:	f1bc 0f0f 	cmp.w	ip, #15
 801cf94:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801cf98:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801cf9c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801cfa0:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801cfa4:	d802      	bhi.n	801cfac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801cfa6:	f1be 0f0f 	cmp.w	lr, #15
 801cfaa:	d911      	bls.n	801cfd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801cfac:	4b77      	ldr	r3, [pc, #476]	; (801d18c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801cfae:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801cfb2:	4a77      	ldr	r2, [pc, #476]	; (801d190 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801cfb4:	4877      	ldr	r0, [pc, #476]	; (801d194 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801cfb6:	f005 fc73 	bl	80228a0 <__assert_func>
 801cfba:	4606      	mov	r6, r0
 801cfbc:	e7c2      	b.n	801cf44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801cfbe:	4605      	mov	r5, r0
 801cfc0:	4606      	mov	r6, r0
 801cfc2:	e7ca      	b.n	801cf5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801cfc4:	4605      	mov	r5, r0
 801cfc6:	e7c8      	b.n	801cf5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801cfc8:	4604      	mov	r4, r0
 801cfca:	e7d5      	b.n	801cf78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801cfcc:	4604      	mov	r4, r0
 801cfce:	e7df      	b.n	801cf90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801cfd0:	fa1f fc8c 	uxth.w	ip, ip
 801cfd4:	fa1f f28e 	uxth.w	r2, lr
 801cfd8:	fb02 fe0c 	mul.w	lr, r2, ip
 801cfdc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801cfe0:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801cfe4:	ebac 070e 	sub.w	r7, ip, lr
 801cfe8:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801cfec:	b292      	uxth	r2, r2
 801cfee:	b2bf      	uxth	r7, r7
 801cff0:	1a9b      	subs	r3, r3, r2
 801cff2:	fb07 fc0a 	mul.w	ip, r7, sl
 801cff6:	b29b      	uxth	r3, r3
 801cff8:	fb03 cc0b 	mla	ip, r3, fp, ip
 801cffc:	9301      	str	r3, [sp, #4]
 801cffe:	fb02 cc09 	mla	ip, r2, r9, ip
 801d002:	fb0e cc08 	mla	ip, lr, r8, ip
 801d006:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d00a:	9305      	str	r3, [sp, #20]
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	f000 80b9 	beq.w	801d184 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801d012:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801d016:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d01a:	fb0b fc0c 	mul.w	ip, fp, ip
 801d01e:	fb0b f606 	mul.w	r6, fp, r6
 801d022:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d026:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d02a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801d02e:	44dc      	add	ip, fp
 801d030:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801d034:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d038:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d03c:	fb0a fb0b 	mul.w	fp, sl, fp
 801d040:	fb0a fa05 	mul.w	sl, sl, r5
 801d044:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801d048:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801d04c:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801d050:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d054:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d058:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d05c:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801d060:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d064:	0a36      	lsrs	r6, r6, #8
 801d066:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d06a:	44dc      	add	ip, fp
 801d06c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d070:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d074:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d078:	fb09 fb0b 	mul.w	fp, r9, fp
 801d07c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d080:	fb09 f904 	mul.w	r9, r9, r4
 801d084:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d088:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801d08c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d090:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801d094:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d098:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d09c:	fb0c fc07 	mul.w	ip, ip, r7
 801d0a0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801d0a4:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801d0a8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d0ac:	445d      	add	r5, fp
 801d0ae:	fb08 f404 	mul.w	r4, r8, r4
 801d0b2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d0b6:	fb08 f800 	mul.w	r8, r8, r0
 801d0ba:	0a2d      	lsrs	r5, r5, #8
 801d0bc:	0a20      	lsrs	r0, r4, #8
 801d0be:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801d0c2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d0c6:	fb07 f70a 	mul.w	r7, r7, sl
 801d0ca:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d0ce:	4404      	add	r4, r0
 801d0d0:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801d0d4:	0a24      	lsrs	r4, r4, #8
 801d0d6:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801d0da:	9801      	ldr	r0, [sp, #4]
 801d0dc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d0e0:	fb03 cc00 	mla	ip, r3, r0, ip
 801d0e4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d0e8:	fb00 7606 	mla	r6, r0, r6, r7
 801d0ec:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801d0f0:	fb04 cc0e 	mla	ip, r4, lr, ip
 801d0f4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d0f8:	b280      	uxth	r0, r0
 801d0fa:	9c04      	ldr	r4, [sp, #16]
 801d0fc:	fb05 cc02 	mla	ip, r5, r2, ip
 801d100:	fb0e 6e08 	mla	lr, lr, r8, r6
 801d104:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d108:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801d10c:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801d110:	fb02 ec0c 	mla	ip, r2, ip, lr
 801d114:	9a05      	ldr	r2, [sp, #20]
 801d116:	4342      	muls	r2, r0
 801d118:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d11c:	1c53      	adds	r3, r2, #1
 801d11e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d122:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d126:	ea45 0c0c 	orr.w	ip, r5, ip
 801d12a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801d12e:	fa5f f28c 	uxtb.w	r2, ip
 801d132:	b2db      	uxtb	r3, r3
 801d134:	fb14 f403 	smulbb	r4, r4, r3
 801d138:	fb02 4200 	mla	r2, r2, r0, r4
 801d13c:	b292      	uxth	r2, r2
 801d13e:	1c54      	adds	r4, r2, #1
 801d140:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801d144:	9c03      	ldr	r4, [sp, #12]
 801d146:	fb14 f403 	smulbb	r4, r4, r3
 801d14a:	1212      	asrs	r2, r2, #8
 801d14c:	700a      	strb	r2, [r1, #0]
 801d14e:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801d152:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d156:	fb02 4200 	mla	r2, r2, r0, r4
 801d15a:	b292      	uxth	r2, r2
 801d15c:	1c54      	adds	r4, r2, #1
 801d15e:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801d162:	1212      	asrs	r2, r2, #8
 801d164:	704a      	strb	r2, [r1, #1]
 801d166:	9a02      	ldr	r2, [sp, #8]
 801d168:	fb12 f303 	smulbb	r3, r2, r3
 801d16c:	fb0c 3c00 	mla	ip, ip, r0, r3
 801d170:	fa1f fc8c 	uxth.w	ip, ip
 801d174:	f10c 0301 	add.w	r3, ip, #1
 801d178:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d17c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d180:	f881 c002 	strb.w	ip, [r1, #2]
 801d184:	b007      	add	sp, #28
 801d186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d18a:	bf00      	nop
 801d18c:	08027073 	.word	0x08027073
 801d190:	0802756a 	.word	0x0802756a
 801d194:	0802713c 	.word	0x0802713c

0801d198 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d19c:	ed2d 8b08 	vpush	{d8-d11}
 801d1a0:	b09b      	sub	sp, #108	; 0x6c
 801d1a2:	eeb0 aa40 	vmov.f32	s20, s0
 801d1a6:	eef0 9a60 	vmov.f32	s19, s1
 801d1aa:	930a      	str	r3, [sp, #40]	; 0x28
 801d1ac:	eeb0 9a41 	vmov.f32	s18, s2
 801d1b0:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801d1b4:	eeb0 8a62 	vmov.f32	s16, s5
 801d1b8:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801d1ba:	eef0 8a43 	vmov.f32	s17, s6
 801d1be:	9312      	str	r3, [sp, #72]	; 0x48
 801d1c0:	eef0 ba44 	vmov.f32	s23, s8
 801d1c4:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801d1c8:	eeb0 ba64 	vmov.f32	s22, s9
 801d1cc:	9019      	str	r0, [sp, #100]	; 0x64
 801d1ce:	eef0 aa45 	vmov.f32	s21, s10
 801d1d2:	9114      	str	r1, [sp, #80]	; 0x50
 801d1d4:	9317      	str	r3, [sp, #92]	; 0x5c
 801d1d6:	6868      	ldr	r0, [r5, #4]
 801d1d8:	9218      	str	r2, [sp, #96]	; 0x60
 801d1da:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801d1dc:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801d1e0:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801d1e4:	fb00 1303 	mla	r3, r0, r3, r1
 801d1e8:	6829      	ldr	r1, [r5, #0]
 801d1ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1ee:	18cb      	adds	r3, r1, r3
 801d1f0:	930d      	str	r3, [sp, #52]	; 0x34
 801d1f2:	6813      	ldr	r3, [r2, #0]
 801d1f4:	9313      	str	r3, [sp, #76]	; 0x4c
 801d1f6:	6853      	ldr	r3, [r2, #4]
 801d1f8:	3304      	adds	r3, #4
 801d1fa:	9309      	str	r3, [sp, #36]	; 0x24
 801d1fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	dc03      	bgt.n	801d20a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d202:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d204:	2b00      	cmp	r3, #0
 801d206:	f340 8352 	ble.w	801d8ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801d20a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	f340 81a2 	ble.w	801d556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801d212:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d214:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d216:	1412      	asrs	r2, r2, #16
 801d218:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d21c:	d431      	bmi.n	801d282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801d21e:	1c51      	adds	r1, r2, #1
 801d220:	428c      	cmp	r4, r1
 801d222:	dd31      	ble.n	801d288 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801d224:	2b00      	cmp	r3, #0
 801d226:	db2f      	blt.n	801d288 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801d228:	1c59      	adds	r1, r3, #1
 801d22a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d22c:	4288      	cmp	r0, r1
 801d22e:	dd2b      	ble.n	801d288 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801d230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d232:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801d234:	3b01      	subs	r3, #1
 801d236:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801d238:	fb02 1203 	mla	r2, r2, r3, r1
 801d23c:	1412      	asrs	r2, r2, #16
 801d23e:	d42d      	bmi.n	801d29c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801d240:	3201      	adds	r2, #1
 801d242:	4294      	cmp	r4, r2
 801d244:	dd2a      	ble.n	801d29c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801d246:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801d248:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801d24a:	fb02 1303 	mla	r3, r2, r3, r1
 801d24e:	141b      	asrs	r3, r3, #16
 801d250:	d424      	bmi.n	801d29c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801d252:	3301      	adds	r3, #1
 801d254:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d256:	429a      	cmp	r2, r3
 801d258:	dd20      	ble.n	801d29c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801d25a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d25c:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801d260:	f103 0e03 	add.w	lr, r3, #3
 801d264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d266:	9315      	str	r3, [sp, #84]	; 0x54
 801d268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	f300 81de 	bgt.w	801d62c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801d270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d272:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d274:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d278:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d27c:	441a      	add	r2, r3
 801d27e:	920d      	str	r2, [sp, #52]	; 0x34
 801d280:	e16b      	b.n	801d55a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801d282:	1c51      	adds	r1, r2, #1
 801d284:	f040 8158 	bne.w	801d538 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801d288:	42a2      	cmp	r2, r4
 801d28a:	f280 8155 	bge.w	801d538 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801d28e:	1c5a      	adds	r2, r3, #1
 801d290:	f2c0 8152 	blt.w	801d538 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801d294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d296:	4293      	cmp	r3, r2
 801d298:	f280 814e 	bge.w	801d538 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801d29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d29e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801d2a0:	9316      	str	r3, [sp, #88]	; 0x58
 801d2a2:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801d2a6:	9315      	str	r3, [sp, #84]	; 0x54
 801d2a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	dde0      	ble.n	801d270 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d2ae:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d2b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d2b2:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801d2b6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801d2b8:	141b      	asrs	r3, r3, #16
 801d2ba:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d2be:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d2c0:	1412      	asrs	r2, r2, #16
 801d2c2:	f100 819a 	bmi.w	801d5fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801d2c6:	1c55      	adds	r5, r2, #1
 801d2c8:	42ac      	cmp	r4, r5
 801d2ca:	f340 8198 	ble.w	801d5fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	f2c0 8195 	blt.w	801d5fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801d2d4:	1c5d      	adds	r5, r3, #1
 801d2d6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d2d8:	42af      	cmp	r7, r5
 801d2da:	f340 8190 	ble.w	801d5fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801d2de:	fb03 2304 	mla	r3, r3, r4, r2
 801d2e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d2e4:	18d5      	adds	r5, r2, r3
 801d2e6:	5cd3      	ldrb	r3, [r2, r3]
 801d2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d2ee:	0e1f      	lsrs	r7, r3, #24
 801d2f0:	2800      	cmp	r0, #0
 801d2f2:	f000 8171 	beq.w	801d5d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801d2f6:	f895 c001 	ldrb.w	ip, [r5, #1]
 801d2fa:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801d2fe:	920e      	str	r2, [sp, #56]	; 0x38
 801d300:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801d304:	2900      	cmp	r1, #0
 801d306:	f000 8172 	beq.w	801d5ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801d30a:	eb05 0c04 	add.w	ip, r5, r4
 801d30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d310:	5d2d      	ldrb	r5, [r5, r4]
 801d312:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801d316:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d31a:	950b      	str	r5, [sp, #44]	; 0x2c
 801d31c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d320:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d322:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801d326:	0e15      	lsrs	r5, r2, #24
 801d328:	920f      	str	r2, [sp, #60]	; 0x3c
 801d32a:	b280      	uxth	r0, r0
 801d32c:	b289      	uxth	r1, r1
 801d32e:	fb00 fa01 	mul.w	sl, r0, r1
 801d332:	0100      	lsls	r0, r0, #4
 801d334:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801d338:	eba0 080a 	sub.w	r8, r0, sl
 801d33c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801d340:	b289      	uxth	r1, r1
 801d342:	fa1f f888 	uxth.w	r8, r8
 801d346:	1a52      	subs	r2, r2, r1
 801d348:	fb08 f00e 	mul.w	r0, r8, lr
 801d34c:	b292      	uxth	r2, r2
 801d34e:	fb02 0007 	mla	r0, r2, r7, r0
 801d352:	fb01 0009 	mla	r0, r1, r9, r0
 801d356:	fb0a 0005 	mla	r0, sl, r5, r0
 801d35a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d35e:	2800      	cmp	r0, #0
 801d360:	f000 80dd 	beq.w	801d51e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801d364:	2fff      	cmp	r7, #255	; 0xff
 801d366:	d01a      	beq.n	801d39e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801d368:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d36c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d370:	fb07 fc0c 	mul.w	ip, r7, ip
 801d374:	435f      	muls	r7, r3
 801d376:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801d37a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d37e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801d382:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d386:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801d38a:	4463      	add	r3, ip
 801d38c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801d390:	0a1b      	lsrs	r3, r3, #8
 801d392:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801d396:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d39a:	ea43 030b 	orr.w	r3, r3, fp
 801d39e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d3a2:	d01e      	beq.n	801d3e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801d3a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801d3a6:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801d3aa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d3ae:	fb0e fb0b 	mul.w	fp, lr, fp
 801d3b2:	fb0e fe07 	mul.w	lr, lr, r7
 801d3b6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d3ba:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d3be:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801d3c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d3c6:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801d3ca:	44dc      	add	ip, fp
 801d3cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d3d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d3d4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d3d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d3dc:	ea4c 070e 	orr.w	r7, ip, lr
 801d3e0:	970e      	str	r7, [sp, #56]	; 0x38
 801d3e2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d3e6:	d01e      	beq.n	801d426 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801d3e8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d3ea:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801d3ee:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d3f2:	fb09 fe0e 	mul.w	lr, r9, lr
 801d3f6:	fb09 f907 	mul.w	r9, r9, r7
 801d3fa:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d3fe:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801d402:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801d406:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d40a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d40e:	44f4      	add	ip, lr
 801d410:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d414:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d418:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d41c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d420:	ea4c 0709 	orr.w	r7, ip, r9
 801d424:	970b      	str	r7, [sp, #44]	; 0x2c
 801d426:	2dff      	cmp	r5, #255	; 0xff
 801d428:	d01c      	beq.n	801d464 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801d42a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d42c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801d430:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d434:	fb05 fe0e 	mul.w	lr, r5, lr
 801d438:	437d      	muls	r5, r7
 801d43a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d43e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801d442:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801d446:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d44a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801d44e:	44f4      	add	ip, lr
 801d450:	0a2d      	lsrs	r5, r5, #8
 801d452:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d456:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d45a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d45e:	ea4c 0505 	orr.w	r5, ip, r5
 801d462:	950f      	str	r5, [sp, #60]	; 0x3c
 801d464:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d466:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801d46a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d46e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d472:	fb08 f505 	mul.w	r5, r8, r5
 801d476:	fb02 5507 	mla	r5, r2, r7, r5
 801d47a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d47c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d480:	fb01 5507 	mla	r5, r1, r7, r5
 801d484:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d486:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d48a:	fb0a 5507 	mla	r5, sl, r7, r5
 801d48e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801d490:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d494:	0a2d      	lsrs	r5, r5, #8
 801d496:	fb08 f807 	mul.w	r8, r8, r7
 801d49a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d49e:	fb02 8303 	mla	r3, r2, r3, r8
 801d4a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d4a4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d4a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d4aa:	fb01 330c 	mla	r3, r1, ip, r3
 801d4ae:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801d4b2:	fb0a 3a01 	mla	sl, sl, r1, r3
 801d4b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d4b8:	9915      	ldr	r1, [sp, #84]	; 0x54
 801d4ba:	4343      	muls	r3, r0
 801d4bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d4c0:	1c58      	adds	r0, r3, #1
 801d4c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d4c6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d4ca:	ea45 050a 	orr.w	r5, r5, sl
 801d4ce:	7833      	ldrb	r3, [r6, #0]
 801d4d0:	b2ea      	uxtb	r2, r5
 801d4d2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d4d6:	fb12 f201 	smulbb	r2, r2, r1
 801d4da:	b2c0      	uxtb	r0, r0
 801d4dc:	fb03 2300 	mla	r3, r3, r0, r2
 801d4e0:	b29b      	uxth	r3, r3
 801d4e2:	1c5a      	adds	r2, r3, #1
 801d4e4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d4e8:	7872      	ldrb	r2, [r6, #1]
 801d4ea:	fb12 f200 	smulbb	r2, r2, r0
 801d4ee:	121b      	asrs	r3, r3, #8
 801d4f0:	7033      	strb	r3, [r6, #0]
 801d4f2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801d4f6:	0c2d      	lsrs	r5, r5, #16
 801d4f8:	fb03 2301 	mla	r3, r3, r1, r2
 801d4fc:	b29b      	uxth	r3, r3
 801d4fe:	1c5a      	adds	r2, r3, #1
 801d500:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d504:	121b      	asrs	r3, r3, #8
 801d506:	7073      	strb	r3, [r6, #1]
 801d508:	78b3      	ldrb	r3, [r6, #2]
 801d50a:	fb13 f000 	smulbb	r0, r3, r0
 801d50e:	fb05 0501 	mla	r5, r5, r1, r0
 801d512:	b2ad      	uxth	r5, r5
 801d514:	1c6b      	adds	r3, r5, #1
 801d516:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d51a:	122d      	asrs	r5, r5, #8
 801d51c:	70b5      	strb	r5, [r6, #2]
 801d51e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d520:	3603      	adds	r6, #3
 801d522:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801d524:	4413      	add	r3, r2
 801d526:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801d528:	932d      	str	r3, [sp, #180]	; 0xb4
 801d52a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d52c:	4413      	add	r3, r2
 801d52e:	932e      	str	r3, [sp, #184]	; 0xb8
 801d530:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d532:	3b01      	subs	r3, #1
 801d534:	9316      	str	r3, [sp, #88]	; 0x58
 801d536:	e6b7      	b.n	801d2a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801d538:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d53a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801d53c:	4413      	add	r3, r2
 801d53e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801d540:	932d      	str	r3, [sp, #180]	; 0xb4
 801d542:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d544:	4413      	add	r3, r2
 801d546:	932e      	str	r3, [sp, #184]	; 0xb8
 801d548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d54a:	3b01      	subs	r3, #1
 801d54c:	930a      	str	r3, [sp, #40]	; 0x28
 801d54e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d550:	3303      	adds	r3, #3
 801d552:	930d      	str	r3, [sp, #52]	; 0x34
 801d554:	e659      	b.n	801d20a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d556:	f47f ae6b 	bne.w	801d230 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801d55a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	f340 81a6 	ble.w	801d8ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801d562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d566:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d568:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d56c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d570:	eef0 6a48 	vmov.f32	s13, s16
 801d574:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d578:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d57c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d580:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801d584:	eef0 6a68 	vmov.f32	s13, s17
 801d588:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d58c:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801d590:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d594:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d598:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d59c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d5a0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d5a4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d5a8:	ee18 2a10 	vmov	r2, s16
 801d5ac:	eeb0 8a47 	vmov.f32	s16, s14
 801d5b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5b4:	ee18 2a90 	vmov	r2, s17
 801d5b8:	932f      	str	r3, [sp, #188]	; 0xbc
 801d5ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d5bc:	eef0 8a67 	vmov.f32	s17, s15
 801d5c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5c4:	9330      	str	r3, [sp, #192]	; 0xc0
 801d5c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d5c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d5ca:	3b01      	subs	r3, #1
 801d5cc:	9314      	str	r3, [sp, #80]	; 0x50
 801d5ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d5d0:	bf08      	it	eq
 801d5d2:	4613      	moveq	r3, r2
 801d5d4:	930a      	str	r3, [sp, #40]	; 0x28
 801d5d6:	e611      	b.n	801d1fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d5d8:	b161      	cbz	r1, 801d5f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801d5da:	5d2a      	ldrb	r2, [r5, r4]
 801d5dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d5de:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801d5e2:	25ff      	movs	r5, #255	; 0xff
 801d5e4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801d5e8:	920b      	str	r2, [sp, #44]	; 0x2c
 801d5ea:	46ae      	mov	lr, r5
 801d5ec:	e69d      	b.n	801d32a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801d5ee:	25ff      	movs	r5, #255	; 0xff
 801d5f0:	46a9      	mov	r9, r5
 801d5f2:	e69a      	b.n	801d32a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801d5f4:	25ff      	movs	r5, #255	; 0xff
 801d5f6:	46a9      	mov	r9, r5
 801d5f8:	e7f7      	b.n	801d5ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801d5fa:	1c57      	adds	r7, r2, #1
 801d5fc:	d18f      	bne.n	801d51e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801d5fe:	4294      	cmp	r4, r2
 801d600:	dd8d      	ble.n	801d51e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801d602:	1c5d      	adds	r5, r3, #1
 801d604:	db8b      	blt.n	801d51e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801d606:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d608:	429d      	cmp	r5, r3
 801d60a:	dd88      	ble.n	801d51e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801d60c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801d60e:	9202      	str	r2, [sp, #8]
 801d610:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d612:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801d616:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d618:	9819      	ldr	r0, [sp, #100]	; 0x64
 801d61a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801d61e:	e9cd 4300 	strd	r4, r3, [sp]
 801d622:	4631      	mov	r1, r6
 801d624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d626:	f7ff fc63 	bl	801cef0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801d62a:	e778      	b.n	801d51e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801d62c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d62e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d630:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801d634:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d636:	1412      	asrs	r2, r2, #16
 801d638:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801d63c:	141b      	asrs	r3, r3, #16
 801d63e:	fb04 2303 	mla	r3, r4, r3, r2
 801d642:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d644:	18d5      	adds	r5, r2, r3
 801d646:	5cd3      	ldrb	r3, [r2, r3]
 801d648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d64a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d64e:	0e1e      	lsrs	r6, r3, #24
 801d650:	2900      	cmp	r1, #0
 801d652:	f000 811b 	beq.w	801d88c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801d656:	786a      	ldrb	r2, [r5, #1]
 801d658:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d65a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801d65e:	9210      	str	r2, [sp, #64]	; 0x40
 801d660:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801d664:	2800      	cmp	r0, #0
 801d666:	f000 811c 	beq.w	801d8a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801d66a:	192a      	adds	r2, r5, r4
 801d66c:	5d2d      	ldrb	r5, [r5, r4]
 801d66e:	7852      	ldrb	r2, [r2, #1]
 801d670:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801d674:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801d678:	950c      	str	r5, [sp, #48]	; 0x30
 801d67a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d67e:	0e15      	lsrs	r5, r2, #24
 801d680:	9211      	str	r2, [sp, #68]	; 0x44
 801d682:	b289      	uxth	r1, r1
 801d684:	b280      	uxth	r0, r0
 801d686:	fb01 fa00 	mul.w	sl, r1, r0
 801d68a:	0109      	lsls	r1, r1, #4
 801d68c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801d690:	eba1 080a 	sub.w	r8, r1, sl
 801d694:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801d698:	b280      	uxth	r0, r0
 801d69a:	fa1f f888 	uxth.w	r8, r8
 801d69e:	1a12      	subs	r2, r2, r0
 801d6a0:	fb08 f10c 	mul.w	r1, r8, ip
 801d6a4:	b292      	uxth	r2, r2
 801d6a6:	fb02 1106 	mla	r1, r2, r6, r1
 801d6aa:	fb00 1109 	mla	r1, r0, r9, r1
 801d6ae:	fb0a 1105 	mla	r1, sl, r5, r1
 801d6b2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d6b6:	2900      	cmp	r1, #0
 801d6b8:	f000 80da 	beq.w	801d870 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801d6bc:	2eff      	cmp	r6, #255	; 0xff
 801d6be:	d016      	beq.n	801d6ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801d6c0:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801d6c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d6c8:	4377      	muls	r7, r6
 801d6ca:	435e      	muls	r6, r3
 801d6cc:	0a3b      	lsrs	r3, r7, #8
 801d6ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d6d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d6d6:	443b      	add	r3, r7
 801d6d8:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801d6dc:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801d6e0:	0a1b      	lsrs	r3, r3, #8
 801d6e2:	0a3f      	lsrs	r7, r7, #8
 801d6e4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d6e8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d6ec:	433b      	orrs	r3, r7
 801d6ee:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d6f2:	d01d      	beq.n	801d730 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801d6f4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d6f6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d6f8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d6fc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d700:	fb0c f606 	mul.w	r6, ip, r6
 801d704:	fb0c fc07 	mul.w	ip, ip, r7
 801d708:	0a37      	lsrs	r7, r6, #8
 801d70a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801d70e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d712:	4437      	add	r7, r6
 801d714:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801d718:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801d71c:	0a3f      	lsrs	r7, r7, #8
 801d71e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d722:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d726:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d72a:	ea47 060c 	orr.w	r6, r7, ip
 801d72e:	9610      	str	r6, [sp, #64]	; 0x40
 801d730:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d734:	d01d      	beq.n	801d772 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801d736:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d738:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801d73c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d740:	fb09 fc0c 	mul.w	ip, r9, ip
 801d744:	fb09 f906 	mul.w	r9, r9, r6
 801d748:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801d74c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d750:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801d754:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d758:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d75c:	4467      	add	r7, ip
 801d75e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d762:	0a3f      	lsrs	r7, r7, #8
 801d764:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d768:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d76c:	ea47 0609 	orr.w	r6, r7, r9
 801d770:	960c      	str	r6, [sp, #48]	; 0x30
 801d772:	2dff      	cmp	r5, #255	; 0xff
 801d774:	d01a      	beq.n	801d7ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801d776:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d778:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801d77c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d780:	fb05 fc0c 	mul.w	ip, r5, ip
 801d784:	4375      	muls	r5, r6
 801d786:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801d78a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d78e:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801d792:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d796:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801d79a:	4467      	add	r7, ip
 801d79c:	0a2d      	lsrs	r5, r5, #8
 801d79e:	0a3f      	lsrs	r7, r7, #8
 801d7a0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d7a4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d7a8:	433d      	orrs	r5, r7
 801d7aa:	9511      	str	r5, [sp, #68]	; 0x44
 801d7ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801d7ae:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801d7b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d7b6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d7ba:	fb08 f505 	mul.w	r5, r8, r5
 801d7be:	fb02 5506 	mla	r5, r2, r6, r5
 801d7c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d7c4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d7c8:	fb00 5506 	mla	r5, r0, r6, r5
 801d7cc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d7ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d7d2:	fb0a 5506 	mla	r5, sl, r6, r5
 801d7d6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d7d8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d7dc:	0a2d      	lsrs	r5, r5, #8
 801d7de:	fb08 f806 	mul.w	r8, r8, r6
 801d7e2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d7e6:	fb02 8303 	mla	r3, r2, r3, r8
 801d7ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d7ec:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801d7f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d7f2:	fb00 3307 	mla	r3, r0, r7, r3
 801d7f6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d7fa:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801d7fe:	fb01 f30b 	mul.w	r3, r1, fp
 801d802:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d806:	1c59      	adds	r1, r3, #1
 801d808:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d80c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d810:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d814:	ea45 050c 	orr.w	r5, r5, ip
 801d818:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d81c:	b2ea      	uxtb	r2, r5
 801d81e:	b2c9      	uxtb	r1, r1
 801d820:	fb12 f20b 	smulbb	r2, r2, fp
 801d824:	fb03 2301 	mla	r3, r3, r1, r2
 801d828:	b29b      	uxth	r3, r3
 801d82a:	1c5a      	adds	r2, r3, #1
 801d82c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d830:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d834:	fb12 f201 	smulbb	r2, r2, r1
 801d838:	121b      	asrs	r3, r3, #8
 801d83a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d83e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801d842:	0c2d      	lsrs	r5, r5, #16
 801d844:	fb03 230b 	mla	r3, r3, fp, r2
 801d848:	b29b      	uxth	r3, r3
 801d84a:	1c5a      	adds	r2, r3, #1
 801d84c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d850:	121b      	asrs	r3, r3, #8
 801d852:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d856:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d85a:	fb13 f101 	smulbb	r1, r3, r1
 801d85e:	fb05 150b 	mla	r5, r5, fp, r1
 801d862:	b2ad      	uxth	r5, r5
 801d864:	1c69      	adds	r1, r5, #1
 801d866:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801d86a:	122d      	asrs	r5, r5, #8
 801d86c:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801d870:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d872:	f10e 0e03 	add.w	lr, lr, #3
 801d876:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801d878:	4413      	add	r3, r2
 801d87a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801d87c:	932d      	str	r3, [sp, #180]	; 0xb4
 801d87e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d880:	4413      	add	r3, r2
 801d882:	932e      	str	r3, [sp, #184]	; 0xb8
 801d884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d886:	3b01      	subs	r3, #1
 801d888:	9315      	str	r3, [sp, #84]	; 0x54
 801d88a:	e4ed      	b.n	801d268 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801d88c:	b160      	cbz	r0, 801d8a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801d88e:	5d2a      	ldrb	r2, [r5, r4]
 801d890:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d892:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801d896:	25ff      	movs	r5, #255	; 0xff
 801d898:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801d89c:	920c      	str	r2, [sp, #48]	; 0x30
 801d89e:	46ac      	mov	ip, r5
 801d8a0:	e6ef      	b.n	801d682 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801d8a2:	25ff      	movs	r5, #255	; 0xff
 801d8a4:	46a9      	mov	r9, r5
 801d8a6:	e6ec      	b.n	801d682 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801d8a8:	25ff      	movs	r5, #255	; 0xff
 801d8aa:	46a9      	mov	r9, r5
 801d8ac:	e7f7      	b.n	801d89e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801d8ae:	b01b      	add	sp, #108	; 0x6c
 801d8b0:	ecbd 8b08 	vpop	{d8-d11}
 801d8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d8b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8bc:	b085      	sub	sp, #20
 801d8be:	7888      	ldrb	r0, [r1, #2]
 801d8c0:	4692      	mov	sl, r2
 801d8c2:	4698      	mov	r8, r3
 801d8c4:	9000      	str	r0, [sp, #0]
 801d8c6:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801d8ca:	7848      	ldrb	r0, [r1, #1]
 801d8cc:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801d8d0:	9001      	str	r0, [sp, #4]
 801d8d2:	7808      	ldrb	r0, [r1, #0]
 801d8d4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d8d8:	9002      	str	r0, [sp, #8]
 801d8da:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801d8de:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801d8e2:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801d8e6:	fb04 560c 	mla	r6, r4, ip, r5
 801d8ea:	2c00      	cmp	r4, #0
 801d8ec:	eb02 0e06 	add.w	lr, r2, r6
 801d8f0:	9a00      	ldr	r2, [sp, #0]
 801d8f2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801d8f6:	9a01      	ldr	r2, [sp, #4]
 801d8f8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801d8fc:	db3e      	blt.n	801d97c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801d8fe:	45a1      	cmp	r9, r4
 801d900:	dd3c      	ble.n	801d97c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801d902:	2d00      	cmp	r5, #0
 801d904:	db38      	blt.n	801d978 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801d906:	45ac      	cmp	ip, r5
 801d908:	dd36      	ble.n	801d978 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801d90a:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801d90e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801d912:	1c6e      	adds	r6, r5, #1
 801d914:	d435      	bmi.n	801d982 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801d916:	45b4      	cmp	ip, r6
 801d918:	dd33      	ble.n	801d982 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801d91a:	b393      	cbz	r3, 801d982 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801d91c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801d920:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801d924:	3401      	adds	r4, #1
 801d926:	d430      	bmi.n	801d98a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801d928:	45a1      	cmp	r9, r4
 801d92a:	dd2e      	ble.n	801d98a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801d92c:	b36f      	cbz	r7, 801d98a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801d92e:	2d00      	cmp	r5, #0
 801d930:	db29      	blt.n	801d986 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801d932:	45ac      	cmp	ip, r5
 801d934:	dd27      	ble.n	801d986 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801d936:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801d93a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801d93e:	3501      	adds	r5, #1
 801d940:	d407      	bmi.n	801d952 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801d942:	45ac      	cmp	ip, r5
 801d944:	dd05      	ble.n	801d952 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801d946:	b123      	cbz	r3, 801d952 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801d948:	44f4      	add	ip, lr
 801d94a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d94e:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801d952:	2b0f      	cmp	r3, #15
 801d954:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801d958:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d95c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801d960:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801d964:	d801      	bhi.n	801d96a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801d966:	2f0f      	cmp	r7, #15
 801d968:	d911      	bls.n	801d98e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801d96a:	4b76      	ldr	r3, [pc, #472]	; (801db44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801d96c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801d970:	4a75      	ldr	r2, [pc, #468]	; (801db48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801d972:	4876      	ldr	r0, [pc, #472]	; (801db4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801d974:	f004 ff94 	bl	80228a0 <__assert_func>
 801d978:	4602      	mov	r2, r0
 801d97a:	e7ca      	b.n	801d912 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801d97c:	4606      	mov	r6, r0
 801d97e:	4602      	mov	r2, r0
 801d980:	e7d0      	b.n	801d924 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801d982:	4606      	mov	r6, r0
 801d984:	e7ce      	b.n	801d924 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801d986:	4604      	mov	r4, r0
 801d988:	e7d9      	b.n	801d93e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801d98a:	4604      	mov	r4, r0
 801d98c:	e7e1      	b.n	801d952 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801d98e:	b29b      	uxth	r3, r3
 801d990:	b2bf      	uxth	r7, r7
 801d992:	fb07 fe03 	mul.w	lr, r7, r3
 801d996:	011b      	lsls	r3, r3, #4
 801d998:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801d99c:	eba3 0c0e 	sub.w	ip, r3, lr
 801d9a0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801d9a4:	b2bf      	uxth	r7, r7
 801d9a6:	fa1f fc8c 	uxth.w	ip, ip
 801d9aa:	1bed      	subs	r5, r5, r7
 801d9ac:	fb0c f30a 	mul.w	r3, ip, sl
 801d9b0:	b2ad      	uxth	r5, r5
 801d9b2:	fb05 330b 	mla	r3, r5, fp, r3
 801d9b6:	fb07 3309 	mla	r3, r7, r9, r3
 801d9ba:	fb0e 3308 	mla	r3, lr, r8, r3
 801d9be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d9c2:	9303      	str	r3, [sp, #12]
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	f000 80b9 	beq.w	801db3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801d9ca:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d9ce:	d018      	beq.n	801da02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801d9d0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801d9d4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d9d8:	fb0b f303 	mul.w	r3, fp, r3
 801d9dc:	fb0b fb02 	mul.w	fp, fp, r2
 801d9e0:	0a1a      	lsrs	r2, r3, #8
 801d9e2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801d9e6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d9ea:	441a      	add	r2, r3
 801d9ec:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801d9f0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801d9f4:	0a12      	lsrs	r2, r2, #8
 801d9f6:	0a1b      	lsrs	r3, r3, #8
 801d9f8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d9fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801da00:	431a      	orrs	r2, r3
 801da02:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801da06:	d019      	beq.n	801da3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801da08:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801da0c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801da10:	fb0a fb0b 	mul.w	fp, sl, fp
 801da14:	fb0a fa06 	mul.w	sl, sl, r6
 801da18:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801da1c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801da20:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801da24:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801da28:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801da2c:	445e      	add	r6, fp
 801da2e:	0a1b      	lsrs	r3, r3, #8
 801da30:	0a36      	lsrs	r6, r6, #8
 801da32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801da36:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801da3a:	431e      	orrs	r6, r3
 801da3c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801da40:	d019      	beq.n	801da76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801da42:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801da46:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801da4a:	fb09 fa0a 	mul.w	sl, r9, sl
 801da4e:	fb09 f904 	mul.w	r9, r9, r4
 801da52:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801da56:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801da5a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801da5e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801da62:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801da66:	4454      	add	r4, sl
 801da68:	0a1b      	lsrs	r3, r3, #8
 801da6a:	0a24      	lsrs	r4, r4, #8
 801da6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801da70:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801da74:	431c      	orrs	r4, r3
 801da76:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801da7a:	d019      	beq.n	801dab0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801da7c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801da80:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801da84:	fb08 f909 	mul.w	r9, r8, r9
 801da88:	fb08 f800 	mul.w	r8, r8, r0
 801da8c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801da90:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801da94:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801da98:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801da9c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801daa0:	4448      	add	r0, r9
 801daa2:	0a1b      	lsrs	r3, r3, #8
 801daa4:	0a00      	lsrs	r0, r0, #8
 801daa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801daaa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801daae:	4318      	orrs	r0, r3
 801dab0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801dab4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801dab8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dabc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dac0:	fb0c f808 	mul.w	r8, ip, r8
 801dac4:	fb0c f606 	mul.w	r6, ip, r6
 801dac8:	fb05 8803 	mla	r8, r5, r3, r8
 801dacc:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801dad0:	fb05 6202 	mla	r2, r5, r2, r6
 801dad4:	fb07 8803 	mla	r8, r7, r3, r8
 801dad8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801dadc:	fb0e 8303 	mla	r3, lr, r3, r8
 801dae0:	0a1b      	lsrs	r3, r3, #8
 801dae2:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801dae6:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801daea:	9c02      	ldr	r4, [sp, #8]
 801daec:	fb07 2703 	mla	r7, r7, r3, r2
 801daf0:	9a03      	ldr	r2, [sp, #12]
 801daf2:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801daf6:	43d2      	mvns	r2, r2
 801daf8:	fb0e 7303 	mla	r3, lr, r3, r7
 801dafc:	b2d2      	uxtb	r2, r2
 801dafe:	0a1b      	lsrs	r3, r3, #8
 801db00:	4354      	muls	r4, r2
 801db02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801db06:	1c60      	adds	r0, r4, #1
 801db08:	ea48 0303 	orr.w	r3, r8, r3
 801db0c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801db10:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801db14:	7008      	strb	r0, [r1, #0]
 801db16:	9801      	ldr	r0, [sp, #4]
 801db18:	4350      	muls	r0, r2
 801db1a:	1c44      	adds	r4, r0, #1
 801db1c:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801db20:	0a18      	lsrs	r0, r3, #8
 801db22:	0c1b      	lsrs	r3, r3, #16
 801db24:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801db28:	7048      	strb	r0, [r1, #1]
 801db2a:	9800      	ldr	r0, [sp, #0]
 801db2c:	4350      	muls	r0, r2
 801db2e:	4602      	mov	r2, r0
 801db30:	3001      	adds	r0, #1
 801db32:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801db36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801db3a:	708b      	strb	r3, [r1, #2]
 801db3c:	b005      	add	sp, #20
 801db3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db42:	bf00      	nop
 801db44:	08027073 	.word	0x08027073
 801db48:	0802756a 	.word	0x0802756a
 801db4c:	0802713c 	.word	0x0802713c

0801db50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db54:	ed2d 8b08 	vpush	{d8-d11}
 801db58:	b097      	sub	sp, #92	; 0x5c
 801db5a:	eeb0 aa40 	vmov.f32	s20, s0
 801db5e:	eef0 9a60 	vmov.f32	s19, s1
 801db62:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801db64:	eeb0 9a41 	vmov.f32	s18, s2
 801db68:	9308      	str	r3, [sp, #32]
 801db6a:	eeb0 8a62 	vmov.f32	s16, s5
 801db6e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801db72:	eef0 8a43 	vmov.f32	s17, s6
 801db76:	9015      	str	r0, [sp, #84]	; 0x54
 801db78:	eef0 ba44 	vmov.f32	s23, s8
 801db7c:	6868      	ldr	r0, [r5, #4]
 801db7e:	eeb0 ba64 	vmov.f32	s22, s9
 801db82:	9112      	str	r1, [sp, #72]	; 0x48
 801db84:	eef0 aa45 	vmov.f32	s21, s10
 801db88:	9310      	str	r3, [sp, #64]	; 0x40
 801db8a:	9214      	str	r2, [sp, #80]	; 0x50
 801db8c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801db8e:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801db92:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801db96:	fb00 1303 	mla	r3, r0, r3, r1
 801db9a:	6829      	ldr	r1, [r5, #0]
 801db9c:	6855      	ldr	r5, [r2, #4]
 801db9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dba2:	3504      	adds	r5, #4
 801dba4:	18cb      	adds	r3, r1, r3
 801dba6:	930b      	str	r3, [sp, #44]	; 0x2c
 801dba8:	6813      	ldr	r3, [r2, #0]
 801dbaa:	9311      	str	r3, [sp, #68]	; 0x44
 801dbac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	dc03      	bgt.n	801dbba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801dbb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	f340 8333 	ble.w	801e220 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801dbba:	9b08      	ldr	r3, [sp, #32]
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	f340 8190 	ble.w	801dee2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801dbc2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dbc4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dbc6:	1412      	asrs	r2, r2, #16
 801dbc8:	ea4f 4323 	mov.w	r3, r3, asr #16
 801dbcc:	d42f      	bmi.n	801dc2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801dbce:	1c51      	adds	r1, r2, #1
 801dbd0:	428c      	cmp	r4, r1
 801dbd2:	dd2f      	ble.n	801dc34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	db2d      	blt.n	801dc34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801dbd8:	1c59      	adds	r1, r3, #1
 801dbda:	9810      	ldr	r0, [sp, #64]	; 0x40
 801dbdc:	4288      	cmp	r0, r1
 801dbde:	dd29      	ble.n	801dc34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801dbe0:	9b08      	ldr	r3, [sp, #32]
 801dbe2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801dbe4:	3b01      	subs	r3, #1
 801dbe6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801dbe8:	fb02 1203 	mla	r2, r2, r3, r1
 801dbec:	1412      	asrs	r2, r2, #16
 801dbee:	d42b      	bmi.n	801dc48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801dbf0:	3201      	adds	r2, #1
 801dbf2:	4294      	cmp	r4, r2
 801dbf4:	dd28      	ble.n	801dc48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801dbf6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801dbf8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801dbfa:	fb02 1303 	mla	r3, r2, r3, r1
 801dbfe:	141b      	asrs	r3, r3, #16
 801dc00:	d422      	bmi.n	801dc48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801dc02:	3301      	adds	r3, #1
 801dc04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dc06:	429a      	cmp	r2, r3
 801dc08:	dd1e      	ble.n	801dc48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801dc0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc0c:	f103 0803 	add.w	r8, r3, #3
 801dc10:	9b08      	ldr	r3, [sp, #32]
 801dc12:	9307      	str	r3, [sp, #28]
 801dc14:	9b07      	ldr	r3, [sp, #28]
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	f300 81ca 	bgt.w	801dfb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801dc1c:	9b08      	ldr	r3, [sp, #32]
 801dc1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dc20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc28:	441a      	add	r2, r3
 801dc2a:	920b      	str	r2, [sp, #44]	; 0x2c
 801dc2c:	e15b      	b.n	801dee6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801dc2e:	1c51      	adds	r1, r2, #1
 801dc30:	f040 8148 	bne.w	801dec4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801dc34:	42a2      	cmp	r2, r4
 801dc36:	f280 8145 	bge.w	801dec4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801dc3a:	1c5a      	adds	r2, r3, #1
 801dc3c:	f2c0 8142 	blt.w	801dec4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801dc40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dc42:	4293      	cmp	r3, r2
 801dc44:	f280 813e 	bge.w	801dec4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801dc48:	9b08      	ldr	r3, [sp, #32]
 801dc4a:	9313      	str	r3, [sp, #76]	; 0x4c
 801dc4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc4e:	9307      	str	r3, [sp, #28]
 801dc50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dc52:	2b00      	cmp	r3, #0
 801dc54:	dde2      	ble.n	801dc1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801dc56:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dc58:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dc5a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801dc5e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801dc60:	141b      	asrs	r3, r3, #16
 801dc62:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801dc66:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dc68:	1412      	asrs	r2, r2, #16
 801dc6a:	f100 818b 	bmi.w	801df84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 801dc6e:	1c56      	adds	r6, r2, #1
 801dc70:	42b4      	cmp	r4, r6
 801dc72:	f340 8189 	ble.w	801df88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	f2c0 8186 	blt.w	801df88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801dc7c:	1c5e      	adds	r6, r3, #1
 801dc7e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801dc80:	42b7      	cmp	r7, r6
 801dc82:	f340 8181 	ble.w	801df88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801dc86:	fb03 2304 	mla	r3, r3, r4, r2
 801dc8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dc8c:	18d6      	adds	r6, r2, r3
 801dc8e:	5cd3      	ldrb	r3, [r2, r3]
 801dc90:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801dc94:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801dc98:	2900      	cmp	r1, #0
 801dc9a:	f000 8163 	beq.w	801df64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 801dc9e:	7872      	ldrb	r2, [r6, #1]
 801dca0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801dca4:	920c      	str	r2, [sp, #48]	; 0x30
 801dca6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801dcaa:	2800      	cmp	r0, #0
 801dcac:	f000 8164 	beq.w	801df78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 801dcb0:	1932      	adds	r2, r6, r4
 801dcb2:	5d36      	ldrb	r6, [r6, r4]
 801dcb4:	7852      	ldrb	r2, [r2, #1]
 801dcb6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801dcba:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801dcbe:	9609      	str	r6, [sp, #36]	; 0x24
 801dcc0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801dcc4:	0e16      	lsrs	r6, r2, #24
 801dcc6:	920d      	str	r2, [sp, #52]	; 0x34
 801dcc8:	b289      	uxth	r1, r1
 801dcca:	b280      	uxth	r0, r0
 801dccc:	fb01 fb00 	mul.w	fp, r1, r0
 801dcd0:	0109      	lsls	r1, r1, #4
 801dcd2:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801dcd6:	eba1 090b 	sub.w	r9, r1, fp
 801dcda:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801dcde:	b280      	uxth	r0, r0
 801dce0:	fa1f f989 	uxth.w	r9, r9
 801dce4:	1a12      	subs	r2, r2, r0
 801dce6:	fb09 f108 	mul.w	r1, r9, r8
 801dcea:	b292      	uxth	r2, r2
 801dcec:	fb02 110c 	mla	r1, r2, ip, r1
 801dcf0:	fb00 110a 	mla	r1, r0, sl, r1
 801dcf4:	fb0b 1106 	mla	r1, fp, r6, r1
 801dcf8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801dcfc:	2900      	cmp	r1, #0
 801dcfe:	f000 80d2 	beq.w	801dea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801dd02:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801dd06:	d01b      	beq.n	801dd40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 801dd08:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801dd0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dd10:	fb0c fe0e 	mul.w	lr, ip, lr
 801dd14:	fb0c fc03 	mul.w	ip, ip, r3
 801dd18:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801dd1c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801dd20:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dd24:	4473      	add	r3, lr
 801dd26:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801dd2a:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801dd2e:	0a1b      	lsrs	r3, r3, #8
 801dd30:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd34:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dd38:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801dd3c:	ea43 030e 	orr.w	r3, r3, lr
 801dd40:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dd44:	d01e      	beq.n	801dd84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 801dd46:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801dd48:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801dd4c:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801dd50:	fb08 fc0c 	mul.w	ip, r8, ip
 801dd54:	fb08 f80e 	mul.w	r8, r8, lr
 801dd58:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801dd5c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801dd60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dd64:	44e6      	add	lr, ip
 801dd66:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801dd6a:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801dd6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd72:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801dd76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dd7a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801dd7e:	ea4e 0708 	orr.w	r7, lr, r8
 801dd82:	970c      	str	r7, [sp, #48]	; 0x30
 801dd84:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dd88:	d01e      	beq.n	801ddc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801dd8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801dd8c:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801dd90:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801dd94:	fb0a f808 	mul.w	r8, sl, r8
 801dd98:	fb0a fa0c 	mul.w	sl, sl, ip
 801dd9c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801dda0:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801dda4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dda8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ddac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ddb0:	44c6      	add	lr, r8
 801ddb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ddb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ddba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ddbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ddc2:	ea4e 070a 	orr.w	r7, lr, sl
 801ddc6:	9709      	str	r7, [sp, #36]	; 0x24
 801ddc8:	2eff      	cmp	r6, #255	; 0xff
 801ddca:	d01d      	beq.n	801de08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801ddcc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ddce:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801ddd2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801ddd6:	fb06 f808 	mul.w	r8, r6, r8
 801ddda:	fb06 f60c 	mul.w	r6, r6, ip
 801ddde:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801dde2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801dde6:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ddea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ddee:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ddf2:	44c6      	add	lr, r8
 801ddf4:	0a36      	lsrs	r6, r6, #8
 801ddf6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ddfa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ddfe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801de02:	ea4e 0606 	orr.w	r6, lr, r6
 801de06:	960d      	str	r6, [sp, #52]	; 0x34
 801de08:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801de0a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801de0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801de10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801de14:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801de18:	43c9      	mvns	r1, r1
 801de1a:	fb09 f606 	mul.w	r6, r9, r6
 801de1e:	b2c9      	uxtb	r1, r1
 801de20:	fb02 660c 	mla	r6, r2, ip, r6
 801de24:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801de28:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801de2a:	fb00 660c 	mla	r6, r0, ip, r6
 801de2e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801de32:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801de34:	fb0b 660c 	mla	r6, fp, ip, r6
 801de38:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801de3c:	fb09 f90c 	mul.w	r9, r9, ip
 801de40:	0a36      	lsrs	r6, r6, #8
 801de42:	fb02 9303 	mla	r3, r2, r3, r9
 801de46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de48:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801de4c:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801de50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de52:	fb00 330e 	mla	r3, r0, lr, r3
 801de56:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801de5a:	fb0b 3b00 	mla	fp, fp, r0, r3
 801de5e:	9b07      	ldr	r3, [sp, #28]
 801de60:	781b      	ldrb	r3, [r3, #0]
 801de62:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801de66:	fb03 f201 	mul.w	r2, r3, r1
 801de6a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801de6e:	1c53      	adds	r3, r2, #1
 801de70:	ea46 060b 	orr.w	r6, r6, fp
 801de74:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801de78:	9a07      	ldr	r2, [sp, #28]
 801de7a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801de7e:	7013      	strb	r3, [r2, #0]
 801de80:	7853      	ldrb	r3, [r2, #1]
 801de82:	434b      	muls	r3, r1
 801de84:	1c5a      	adds	r2, r3, #1
 801de86:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801de8a:	0a33      	lsrs	r3, r6, #8
 801de8c:	0c36      	lsrs	r6, r6, #16
 801de8e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801de92:	9a07      	ldr	r2, [sp, #28]
 801de94:	7053      	strb	r3, [r2, #1]
 801de96:	7893      	ldrb	r3, [r2, #2]
 801de98:	4359      	muls	r1, r3
 801de9a:	1c4b      	adds	r3, r1, #1
 801de9c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801dea0:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801dea4:	7096      	strb	r6, [r2, #2]
 801dea6:	9b07      	ldr	r3, [sp, #28]
 801dea8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801deaa:	3303      	adds	r3, #3
 801deac:	9307      	str	r3, [sp, #28]
 801deae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801deb0:	4413      	add	r3, r2
 801deb2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801deb4:	9329      	str	r3, [sp, #164]	; 0xa4
 801deb6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801deb8:	4413      	add	r3, r2
 801deba:	932a      	str	r3, [sp, #168]	; 0xa8
 801debc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801debe:	3b01      	subs	r3, #1
 801dec0:	9313      	str	r3, [sp, #76]	; 0x4c
 801dec2:	e6c5      	b.n	801dc50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801dec4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dec6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801dec8:	4413      	add	r3, r2
 801deca:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801decc:	9329      	str	r3, [sp, #164]	; 0xa4
 801dece:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ded0:	4413      	add	r3, r2
 801ded2:	932a      	str	r3, [sp, #168]	; 0xa8
 801ded4:	9b08      	ldr	r3, [sp, #32]
 801ded6:	3b01      	subs	r3, #1
 801ded8:	9308      	str	r3, [sp, #32]
 801deda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dedc:	3303      	adds	r3, #3
 801dede:	930b      	str	r3, [sp, #44]	; 0x2c
 801dee0:	e66b      	b.n	801dbba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801dee2:	f47f ae7d 	bne.w	801dbe0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801dee6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dee8:	2b00      	cmp	r3, #0
 801deea:	f340 8199 	ble.w	801e220 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801deee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801def2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801def4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801def8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801defc:	eef0 6a48 	vmov.f32	s13, s16
 801df00:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801df04:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801df08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801df0c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801df10:	eef0 6a68 	vmov.f32	s13, s17
 801df14:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801df18:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801df1c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801df20:	ee69 7a27 	vmul.f32	s15, s18, s15
 801df24:	ee37 8a48 	vsub.f32	s16, s14, s16
 801df28:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801df2c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801df30:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801df34:	ee18 2a10 	vmov	r2, s16
 801df38:	eeb0 8a47 	vmov.f32	s16, s14
 801df3c:	fb92 f3f3 	sdiv	r3, r2, r3
 801df40:	ee18 2a90 	vmov	r2, s17
 801df44:	932b      	str	r3, [sp, #172]	; 0xac
 801df46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801df48:	eef0 8a67 	vmov.f32	s17, s15
 801df4c:	fb92 f3f3 	sdiv	r3, r2, r3
 801df50:	932c      	str	r3, [sp, #176]	; 0xb0
 801df52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801df54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801df56:	3b01      	subs	r3, #1
 801df58:	9312      	str	r3, [sp, #72]	; 0x48
 801df5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801df5c:	bf08      	it	eq
 801df5e:	4613      	moveq	r3, r2
 801df60:	9308      	str	r3, [sp, #32]
 801df62:	e623      	b.n	801dbac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801df64:	b158      	cbz	r0, 801df7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801df66:	5d32      	ldrb	r2, [r6, r4]
 801df68:	26ff      	movs	r6, #255	; 0xff
 801df6a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801df6e:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801df72:	9209      	str	r2, [sp, #36]	; 0x24
 801df74:	46b0      	mov	r8, r6
 801df76:	e6a7      	b.n	801dcc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801df78:	26ff      	movs	r6, #255	; 0xff
 801df7a:	46b2      	mov	sl, r6
 801df7c:	e6a4      	b.n	801dcc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801df7e:	26ff      	movs	r6, #255	; 0xff
 801df80:	46b2      	mov	sl, r6
 801df82:	e7f7      	b.n	801df74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 801df84:	1c57      	adds	r7, r2, #1
 801df86:	d18e      	bne.n	801dea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801df88:	4294      	cmp	r4, r2
 801df8a:	dd8c      	ble.n	801dea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801df8c:	1c5e      	adds	r6, r3, #1
 801df8e:	db8a      	blt.n	801dea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801df90:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801df92:	429e      	cmp	r6, r3
 801df94:	dd87      	ble.n	801dea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801df96:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801df9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801df9e:	e9cd 4600 	strd	r4, r6, [sp]
 801dfa2:	462b      	mov	r3, r5
 801dfa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dfa6:	9907      	ldr	r1, [sp, #28]
 801dfa8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dfaa:	f7ff fc85 	bl	801d8b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801dfae:	e77a      	b.n	801dea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801dfb0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dfb2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801dfb4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dfb8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dfba:	1409      	asrs	r1, r1, #16
 801dfbc:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801dfc0:	141b      	asrs	r3, r3, #16
 801dfc2:	fb04 1303 	mla	r3, r4, r3, r1
 801dfc6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801dfc8:	18ce      	adds	r6, r1, r3
 801dfca:	5ccb      	ldrb	r3, [r1, r3]
 801dfcc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801dfd0:	0e1f      	lsrs	r7, r3, #24
 801dfd2:	2a00      	cmp	r2, #0
 801dfd4:	f000 8114 	beq.w	801e200 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 801dfd8:	7871      	ldrb	r1, [r6, #1]
 801dfda:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801dfde:	910e      	str	r1, [sp, #56]	; 0x38
 801dfe0:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801dfe4:	2800      	cmp	r0, #0
 801dfe6:	f000 8115 	beq.w	801e214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 801dfea:	1931      	adds	r1, r6, r4
 801dfec:	5d36      	ldrb	r6, [r6, r4]
 801dfee:	7849      	ldrb	r1, [r1, #1]
 801dff0:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801dff4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801dff8:	960a      	str	r6, [sp, #40]	; 0x28
 801dffa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801dffe:	0e0e      	lsrs	r6, r1, #24
 801e000:	910f      	str	r1, [sp, #60]	; 0x3c
 801e002:	b292      	uxth	r2, r2
 801e004:	b280      	uxth	r0, r0
 801e006:	fb02 fb00 	mul.w	fp, r2, r0
 801e00a:	0112      	lsls	r2, r2, #4
 801e00c:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801e010:	eba2 090b 	sub.w	r9, r2, fp
 801e014:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801e018:	b280      	uxth	r0, r0
 801e01a:	fa1f f989 	uxth.w	r9, r9
 801e01e:	1a09      	subs	r1, r1, r0
 801e020:	fb09 f20e 	mul.w	r2, r9, lr
 801e024:	b289      	uxth	r1, r1
 801e026:	fb01 2207 	mla	r2, r1, r7, r2
 801e02a:	fb00 220a 	mla	r2, r0, sl, r2
 801e02e:	fb0b 2206 	mla	r2, fp, r6, r2
 801e032:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e036:	9213      	str	r2, [sp, #76]	; 0x4c
 801e038:	2a00      	cmp	r2, #0
 801e03a:	f000 80d4 	beq.w	801e1e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 801e03e:	2fff      	cmp	r7, #255	; 0xff
 801e040:	d01a      	beq.n	801e078 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 801e042:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e046:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e04a:	fb07 fc0c 	mul.w	ip, r7, ip
 801e04e:	435f      	muls	r7, r3
 801e050:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e054:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e058:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e05c:	4463      	add	r3, ip
 801e05e:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801e062:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801e066:	0a1b      	lsrs	r3, r3, #8
 801e068:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e06c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e070:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e074:	ea43 030c 	orr.w	r3, r3, ip
 801e078:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e07c:	d01f      	beq.n	801e0be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 801e07e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801e080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e082:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e086:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e08a:	fb0e f707 	mul.w	r7, lr, r7
 801e08e:	fb0e fe0c 	mul.w	lr, lr, ip
 801e092:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e096:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e09a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e09e:	44bc      	add	ip, r7
 801e0a0:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801e0a4:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801e0a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e0ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e0b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e0b4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e0b8:	ea4c 020e 	orr.w	r2, ip, lr
 801e0bc:	920e      	str	r2, [sp, #56]	; 0x38
 801e0be:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e0c2:	d01e      	beq.n	801e102 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 801e0c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e0c6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801e0ca:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e0ce:	fb0a fe0e 	mul.w	lr, sl, lr
 801e0d2:	fb0a fa07 	mul.w	sl, sl, r7
 801e0d6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e0da:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e0de:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e0e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e0e6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e0ea:	44f4      	add	ip, lr
 801e0ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e0f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e0f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e0f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e0fc:	ea4c 020a 	orr.w	r2, ip, sl
 801e100:	920a      	str	r2, [sp, #40]	; 0x28
 801e102:	2eff      	cmp	r6, #255	; 0xff
 801e104:	d01c      	beq.n	801e140 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 801e106:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e108:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801e10c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e110:	fb06 fe0e 	mul.w	lr, r6, lr
 801e114:	437e      	muls	r6, r7
 801e116:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e11a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e11e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801e122:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e126:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801e12a:	44f4      	add	ip, lr
 801e12c:	0a36      	lsrs	r6, r6, #8
 801e12e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e132:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e136:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e13a:	ea4c 0206 	orr.w	r2, ip, r6
 801e13e:	920f      	str	r2, [sp, #60]	; 0x3c
 801e140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e142:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801e146:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e14a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801e14e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e150:	fb09 f606 	mul.w	r6, r9, r6
 801e154:	fb01 6607 	mla	r6, r1, r7, r6
 801e158:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801e15c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e15e:	fb00 6607 	mla	r6, r0, r7, r6
 801e162:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801e166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e168:	fb0b 6607 	mla	r6, fp, r7, r6
 801e16c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e172:	fb09 f907 	mul.w	r9, r9, r7
 801e176:	0a36      	lsrs	r6, r6, #8
 801e178:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e17c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e17e:	fb01 9303 	mla	r3, r1, r3, r9
 801e182:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e186:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801e18a:	fb00 330c 	mla	r3, r0, ip, r3
 801e18e:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801e192:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e194:	43da      	mvns	r2, r3
 801e196:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 801e19a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e19e:	b2d2      	uxtb	r2, r2
 801e1a0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e1a4:	fb03 f102 	mul.w	r1, r3, r2
 801e1a8:	ea46 060e 	orr.w	r6, r6, lr
 801e1ac:	1c4b      	adds	r3, r1, #1
 801e1ae:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e1b2:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801e1b6:	f808 3c03 	strb.w	r3, [r8, #-3]
 801e1ba:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 801e1be:	4353      	muls	r3, r2
 801e1c0:	1c59      	adds	r1, r3, #1
 801e1c2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e1c6:	0a33      	lsrs	r3, r6, #8
 801e1c8:	0c36      	lsrs	r6, r6, #16
 801e1ca:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e1ce:	f808 3c02 	strb.w	r3, [r8, #-2]
 801e1d2:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801e1d6:	435a      	muls	r2, r3
 801e1d8:	1c53      	adds	r3, r2, #1
 801e1da:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e1de:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801e1e2:	f808 6c01 	strb.w	r6, [r8, #-1]
 801e1e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e1e8:	f108 0803 	add.w	r8, r8, #3
 801e1ec:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e1ee:	4413      	add	r3, r2
 801e1f0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e1f2:	9329      	str	r3, [sp, #164]	; 0xa4
 801e1f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e1f6:	4413      	add	r3, r2
 801e1f8:	932a      	str	r3, [sp, #168]	; 0xa8
 801e1fa:	9b07      	ldr	r3, [sp, #28]
 801e1fc:	3b01      	subs	r3, #1
 801e1fe:	e508      	b.n	801dc12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 801e200:	b158      	cbz	r0, 801e21a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 801e202:	5d31      	ldrb	r1, [r6, r4]
 801e204:	26ff      	movs	r6, #255	; 0xff
 801e206:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801e20a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801e20e:	910a      	str	r1, [sp, #40]	; 0x28
 801e210:	46b6      	mov	lr, r6
 801e212:	e6f6      	b.n	801e002 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801e214:	26ff      	movs	r6, #255	; 0xff
 801e216:	46b2      	mov	sl, r6
 801e218:	e6f3      	b.n	801e002 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801e21a:	26ff      	movs	r6, #255	; 0xff
 801e21c:	46b2      	mov	sl, r6
 801e21e:	e7f7      	b.n	801e210 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 801e220:	b017      	add	sp, #92	; 0x5c
 801e222:	ecbd 8b08 	vpop	{d8-d11}
 801e226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e22c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801e22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e230:	b08d      	sub	sp, #52	; 0x34
 801e232:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801e236:	9103      	str	r1, [sp, #12]
 801e238:	fb07 5803 	mla	r8, r7, r3, r5
 801e23c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801e240:	9803      	ldr	r0, [sp, #12]
 801e242:	2f00      	cmp	r7, #0
 801e244:	910b      	str	r1, [sp, #44]	; 0x2c
 801e246:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e24a:	9903      	ldr	r1, [sp, #12]
 801e24c:	9c03      	ldr	r4, [sp, #12]
 801e24e:	eb02 0608 	add.w	r6, r2, r8
 801e252:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e256:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801e25a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801e25e:	7809      	ldrb	r1, [r1, #0]
 801e260:	7840      	ldrb	r0, [r0, #1]
 801e262:	78a4      	ldrb	r4, [r4, #2]
 801e264:	db51      	blt.n	801e30a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801e266:	45be      	cmp	lr, r7
 801e268:	dd4f      	ble.n	801e30a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801e26a:	2d00      	cmp	r5, #0
 801e26c:	db49      	blt.n	801e302 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801e26e:	42ab      	cmp	r3, r5
 801e270:	dd47      	ble.n	801e302 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801e272:	f812 2008 	ldrb.w	r2, [r2, r8]
 801e276:	9204      	str	r2, [sp, #16]
 801e278:	7872      	ldrb	r2, [r6, #1]
 801e27a:	9205      	str	r2, [sp, #20]
 801e27c:	78b2      	ldrb	r2, [r6, #2]
 801e27e:	9206      	str	r2, [sp, #24]
 801e280:	1c6a      	adds	r2, r5, #1
 801e282:	d449      	bmi.n	801e318 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801e284:	4293      	cmp	r3, r2
 801e286:	dd47      	ble.n	801e318 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801e288:	f1bc 0f00 	cmp.w	ip, #0
 801e28c:	d044      	beq.n	801e318 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801e28e:	7972      	ldrb	r2, [r6, #5]
 801e290:	f896 b003 	ldrb.w	fp, [r6, #3]
 801e294:	f896 a004 	ldrb.w	sl, [r6, #4]
 801e298:	9201      	str	r2, [sp, #4]
 801e29a:	3701      	adds	r7, #1
 801e29c:	d444      	bmi.n	801e328 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801e29e:	45be      	cmp	lr, r7
 801e2a0:	dd42      	ble.n	801e328 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801e2a2:	f1b9 0f00 	cmp.w	r9, #0
 801e2a6:	f000 80c1 	beq.w	801e42c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801e2aa:	2d00      	cmp	r5, #0
 801e2ac:	db38      	blt.n	801e320 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801e2ae:	42ab      	cmp	r3, r5
 801e2b0:	dd36      	ble.n	801e320 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801e2b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e2b6:	f816 8002 	ldrb.w	r8, [r6, r2]
 801e2ba:	2203      	movs	r2, #3
 801e2bc:	fb03 6702 	mla	r7, r3, r2, r6
 801e2c0:	fb03 6202 	mla	r2, r3, r2, r6
 801e2c4:	787f      	ldrb	r7, [r7, #1]
 801e2c6:	f892 e002 	ldrb.w	lr, [r2, #2]
 801e2ca:	9702      	str	r7, [sp, #8]
 801e2cc:	3501      	adds	r5, #1
 801e2ce:	d432      	bmi.n	801e336 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801e2d0:	42ab      	cmp	r3, r5
 801e2d2:	dd30      	ble.n	801e336 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801e2d4:	f1bc 0f00 	cmp.w	ip, #0
 801e2d8:	d031      	beq.n	801e33e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801e2da:	2703      	movs	r7, #3
 801e2dc:	fb13 7207 	smlabb	r2, r3, r7, r7
 801e2e0:	5cb5      	ldrb	r5, [r6, r2]
 801e2e2:	fb03 6207 	mla	r2, r3, r7, r6
 801e2e6:	fb03 6307 	mla	r3, r3, r7, r6
 801e2ea:	7912      	ldrb	r2, [r2, #4]
 801e2ec:	795e      	ldrb	r6, [r3, #5]
 801e2ee:	f1bc 0f0f 	cmp.w	ip, #15
 801e2f2:	d927      	bls.n	801e344 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 801e2f4:	4b53      	ldr	r3, [pc, #332]	; (801e444 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801e2f6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e2fa:	4a53      	ldr	r2, [pc, #332]	; (801e448 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801e2fc:	4853      	ldr	r0, [pc, #332]	; (801e44c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801e2fe:	f004 facf 	bl	80228a0 <__assert_func>
 801e302:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801e306:	9104      	str	r1, [sp, #16]
 801e308:	e7ba      	b.n	801e280 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801e30a:	9401      	str	r4, [sp, #4]
 801e30c:	4682      	mov	sl, r0
 801e30e:	468b      	mov	fp, r1
 801e310:	9104      	str	r1, [sp, #16]
 801e312:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801e316:	e7c0      	b.n	801e29a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801e318:	9401      	str	r4, [sp, #4]
 801e31a:	4682      	mov	sl, r0
 801e31c:	468b      	mov	fp, r1
 801e31e:	e7bc      	b.n	801e29a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801e320:	46a6      	mov	lr, r4
 801e322:	9002      	str	r0, [sp, #8]
 801e324:	4688      	mov	r8, r1
 801e326:	e7d1      	b.n	801e2cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 801e328:	4626      	mov	r6, r4
 801e32a:	4602      	mov	r2, r0
 801e32c:	460d      	mov	r5, r1
 801e32e:	46a6      	mov	lr, r4
 801e330:	9002      	str	r0, [sp, #8]
 801e332:	4688      	mov	r8, r1
 801e334:	e7db      	b.n	801e2ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801e336:	4626      	mov	r6, r4
 801e338:	4602      	mov	r2, r0
 801e33a:	460d      	mov	r5, r1
 801e33c:	e7d7      	b.n	801e2ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801e33e:	4626      	mov	r6, r4
 801e340:	4602      	mov	r2, r0
 801e342:	460d      	mov	r5, r1
 801e344:	f1b9 0f0f 	cmp.w	r9, #15
 801e348:	d8d4      	bhi.n	801e2f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801e34a:	fa1f f38c 	uxth.w	r3, ip
 801e34e:	fa1f fc89 	uxth.w	ip, r9
 801e352:	fb03 f70c 	mul.w	r7, r3, ip
 801e356:	011b      	lsls	r3, r3, #4
 801e358:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801e35c:	9707      	str	r7, [sp, #28]
 801e35e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801e362:	fa1f fc8c 	uxth.w	ip, ip
 801e366:	eba7 070c 	sub.w	r7, r7, ip
 801e36a:	b2bf      	uxth	r7, r7
 801e36c:	9709      	str	r7, [sp, #36]	; 0x24
 801e36e:	9f07      	ldr	r7, [sp, #28]
 801e370:	1bdb      	subs	r3, r3, r7
 801e372:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801e376:	b29b      	uxth	r3, r3
 801e378:	9708      	str	r7, [sp, #32]
 801e37a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e37c:	930a      	str	r3, [sp, #40]	; 0x28
 801e37e:	ea6f 0907 	mvn.w	r9, r7
 801e382:	fb03 fb0b 	mul.w	fp, r3, fp
 801e386:	9f04      	ldr	r7, [sp, #16]
 801e388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e38a:	fa5f f989 	uxtb.w	r9, r9
 801e38e:	fb03 bb07 	mla	fp, r3, r7, fp
 801e392:	9f07      	ldr	r7, [sp, #28]
 801e394:	fb11 f109 	smulbb	r1, r1, r9
 801e398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e39a:	fb0c b808 	mla	r8, ip, r8, fp
 801e39e:	fb10 f009 	smulbb	r0, r0, r9
 801e3a2:	fb14 f409 	smulbb	r4, r4, r9
 801e3a6:	fb07 8805 	mla	r8, r7, r5, r8
 801e3aa:	9d08      	ldr	r5, [sp, #32]
 801e3ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e3ae:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e3b2:	fb08 1805 	mla	r8, r8, r5, r1
 801e3b6:	9d05      	ldr	r5, [sp, #20]
 801e3b8:	fa1f f888 	uxth.w	r8, r8
 801e3bc:	f108 0101 	add.w	r1, r8, #1
 801e3c0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801e3c4:	9903      	ldr	r1, [sp, #12]
 801e3c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e3ca:	f881 8000 	strb.w	r8, [r1]
 801e3ce:	fb03 f10a 	mul.w	r1, r3, sl
 801e3d2:	fb07 1105 	mla	r1, r7, r5, r1
 801e3d6:	9d02      	ldr	r5, [sp, #8]
 801e3d8:	fb0c 1105 	mla	r1, ip, r5, r1
 801e3dc:	9d07      	ldr	r5, [sp, #28]
 801e3de:	fb05 1102 	mla	r1, r5, r2, r1
 801e3e2:	9a08      	ldr	r2, [sp, #32]
 801e3e4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e3e8:	fb01 0102 	mla	r1, r1, r2, r0
 801e3ec:	9a03      	ldr	r2, [sp, #12]
 801e3ee:	b289      	uxth	r1, r1
 801e3f0:	1c48      	adds	r0, r1, #1
 801e3f2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801e3f6:	1209      	asrs	r1, r1, #8
 801e3f8:	7051      	strb	r1, [r2, #1]
 801e3fa:	9a01      	ldr	r2, [sp, #4]
 801e3fc:	4353      	muls	r3, r2
 801e3fe:	9a06      	ldr	r2, [sp, #24]
 801e400:	fb07 3702 	mla	r7, r7, r2, r3
 801e404:	9b08      	ldr	r3, [sp, #32]
 801e406:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801e40a:	fb05 c606 	mla	r6, r5, r6, ip
 801e40e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e412:	fb06 4603 	mla	r6, r6, r3, r4
 801e416:	9b03      	ldr	r3, [sp, #12]
 801e418:	b2b6      	uxth	r6, r6
 801e41a:	f106 0e01 	add.w	lr, r6, #1
 801e41e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801e422:	1236      	asrs	r6, r6, #8
 801e424:	709e      	strb	r6, [r3, #2]
 801e426:	b00d      	add	sp, #52	; 0x34
 801e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e42c:	f1bc 0f0f 	cmp.w	ip, #15
 801e430:	f63f af60 	bhi.w	801e2f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801e434:	4626      	mov	r6, r4
 801e436:	4602      	mov	r2, r0
 801e438:	460d      	mov	r5, r1
 801e43a:	46a6      	mov	lr, r4
 801e43c:	9002      	str	r0, [sp, #8]
 801e43e:	4688      	mov	r8, r1
 801e440:	e783      	b.n	801e34a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 801e442:	bf00      	nop
 801e444:	08027073 	.word	0x08027073
 801e448:	0802756a 	.word	0x0802756a
 801e44c:	0802713c 	.word	0x0802713c

0801e450 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e454:	ed2d 8b08 	vpush	{d8-d11}
 801e458:	b0a1      	sub	sp, #132	; 0x84
 801e45a:	eeb0 aa40 	vmov.f32	s20, s0
 801e45e:	eef0 9a60 	vmov.f32	s19, s1
 801e462:	9307      	str	r3, [sp, #28]
 801e464:	eeb0 9a41 	vmov.f32	s18, s2
 801e468:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 801e46c:	eeb0 8a62 	vmov.f32	s16, s5
 801e470:	9210      	str	r2, [sp, #64]	; 0x40
 801e472:	eef0 8a43 	vmov.f32	s17, s6
 801e476:	9308      	str	r3, [sp, #32]
 801e478:	eef0 ba44 	vmov.f32	s23, s8
 801e47c:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 801e480:	eeb0 ba64 	vmov.f32	s22, s9
 801e484:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801e486:	eef0 aa45 	vmov.f32	s21, s10
 801e48a:	930a      	str	r3, [sp, #40]	; 0x28
 801e48c:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 801e490:	901f      	str	r0, [sp, #124]	; 0x7c
 801e492:	930f      	str	r3, [sp, #60]	; 0x3c
 801e494:	6850      	ldr	r0, [r2, #4]
 801e496:	910e      	str	r1, [sp, #56]	; 0x38
 801e498:	6812      	ldr	r2, [r2, #0]
 801e49a:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 801e49e:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 801e4a2:	fb00 1303 	mla	r3, r0, r3, r1
 801e4a6:	9908      	ldr	r1, [sp, #32]
 801e4a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e4ac:	18d3      	adds	r3, r2, r3
 801e4ae:	2203      	movs	r2, #3
 801e4b0:	9309      	str	r3, [sp, #36]	; 0x24
 801e4b2:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	930c      	str	r3, [sp, #48]	; 0x30
 801e4b8:	f06f 0304 	mvn.w	r3, #4
 801e4bc:	fb11 3302 	smlabb	r3, r1, r2, r3
 801e4c0:	930d      	str	r3, [sp, #52]	; 0x34
 801e4c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e4c4:	43db      	mvns	r3, r3
 801e4c6:	b2db      	uxtb	r3, r3
 801e4c8:	930b      	str	r3, [sp, #44]	; 0x2c
 801e4ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	dc03      	bgt.n	801e4d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801e4d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e4d2:	2b00      	cmp	r3, #0
 801e4d4:	f340 81df 	ble.w	801e896 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801e4d8:	9b07      	ldr	r3, [sp, #28]
 801e4da:	2b00      	cmp	r3, #0
 801e4dc:	f340 80f2 	ble.w	801e6c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e4e0:	ea5f 4228 	movs.w	r2, r8, asr #16
 801e4e4:	ea4f 432b 	mov.w	r3, fp, asr #16
 801e4e8:	d430      	bmi.n	801e54c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e4ea:	1c51      	adds	r1, r2, #1
 801e4ec:	9808      	ldr	r0, [sp, #32]
 801e4ee:	4281      	cmp	r1, r0
 801e4f0:	da2f      	bge.n	801e552 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	db2d      	blt.n	801e552 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801e4f6:	1c59      	adds	r1, r3, #1
 801e4f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e4fa:	4288      	cmp	r0, r1
 801e4fc:	dd29      	ble.n	801e552 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801e4fe:	9b07      	ldr	r3, [sp, #28]
 801e500:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801e502:	3b01      	subs	r3, #1
 801e504:	fb02 8203 	mla	r2, r2, r3, r8
 801e508:	1412      	asrs	r2, r2, #16
 801e50a:	d42d      	bmi.n	801e568 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801e50c:	3201      	adds	r2, #1
 801e50e:	9908      	ldr	r1, [sp, #32]
 801e510:	4291      	cmp	r1, r2
 801e512:	dd29      	ble.n	801e568 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801e514:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801e516:	fb02 b303 	mla	r3, r2, r3, fp
 801e51a:	141b      	asrs	r3, r3, #16
 801e51c:	d424      	bmi.n	801e568 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801e51e:	3301      	adds	r3, #1
 801e520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e522:	429a      	cmp	r2, r3
 801e524:	dd20      	ble.n	801e568 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801e526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e528:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801e52c:	1cde      	adds	r6, r3, #3
 801e52e:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 801e532:	f1bc 0f00 	cmp.w	ip, #0
 801e536:	f300 811f 	bgt.w	801e778 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 801e53a:	9b07      	ldr	r3, [sp, #28]
 801e53c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e542:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e546:	4423      	add	r3, r4
 801e548:	9309      	str	r3, [sp, #36]	; 0x24
 801e54a:	e0bd      	b.n	801e6c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801e54c:	1c57      	adds	r7, r2, #1
 801e54e:	f040 80ae 	bne.w	801e6ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801e552:	9908      	ldr	r1, [sp, #32]
 801e554:	428a      	cmp	r2, r1
 801e556:	f280 80aa 	bge.w	801e6ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801e55a:	1c5e      	adds	r6, r3, #1
 801e55c:	f2c0 80a7 	blt.w	801e6ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801e560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e562:	4293      	cmp	r3, r2
 801e564:	f280 80a3 	bge.w	801e6ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801e568:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e56c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e56e:	f1ba 0f00 	cmp.w	sl, #0
 801e572:	dde2      	ble.n	801e53a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801e574:	ea5f 4028 	movs.w	r0, r8, asr #16
 801e578:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801e57c:	ea4f 412b 	mov.w	r1, fp, asr #16
 801e580:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801e584:	f100 80df 	bmi.w	801e746 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801e588:	1c45      	adds	r5, r0, #1
 801e58a:	9f08      	ldr	r7, [sp, #32]
 801e58c:	42af      	cmp	r7, r5
 801e58e:	f340 80dc 	ble.w	801e74a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801e592:	2900      	cmp	r1, #0
 801e594:	f2c0 80d9 	blt.w	801e74a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801e598:	1c4d      	adds	r5, r1, #1
 801e59a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e59c:	42af      	cmp	r7, r5
 801e59e:	f340 80d4 	ble.w	801e74a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801e5a2:	9d08      	ldr	r5, [sp, #32]
 801e5a4:	fb05 0101 	mla	r1, r5, r1, r0
 801e5a8:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e5aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e5ae:	1845      	adds	r5, r0, r1
 801e5b0:	5c40      	ldrb	r0, [r0, r1]
 801e5b2:	792f      	ldrb	r7, [r5, #4]
 801e5b4:	7869      	ldrb	r1, [r5, #1]
 801e5b6:	9711      	str	r7, [sp, #68]	; 0x44
 801e5b8:	796f      	ldrb	r7, [r5, #5]
 801e5ba:	f895 e002 	ldrb.w	lr, [r5, #2]
 801e5be:	f895 9003 	ldrb.w	r9, [r5, #3]
 801e5c2:	9712      	str	r7, [sp, #72]	; 0x48
 801e5c4:	b17a      	cbz	r2, 801e5e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 801e5c6:	3505      	adds	r5, #5
 801e5c8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e5ca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e5cc:	19ef      	adds	r7, r5, r7
 801e5ce:	5d2d      	ldrb	r5, [r5, r4]
 801e5d0:	787c      	ldrb	r4, [r7, #1]
 801e5d2:	9513      	str	r5, [sp, #76]	; 0x4c
 801e5d4:	9415      	str	r4, [sp, #84]	; 0x54
 801e5d6:	78bc      	ldrb	r4, [r7, #2]
 801e5d8:	9417      	str	r4, [sp, #92]	; 0x5c
 801e5da:	78fc      	ldrb	r4, [r7, #3]
 801e5dc:	9414      	str	r4, [sp, #80]	; 0x50
 801e5de:	793c      	ldrb	r4, [r7, #4]
 801e5e0:	9416      	str	r4, [sp, #88]	; 0x58
 801e5e2:	797c      	ldrb	r4, [r7, #5]
 801e5e4:	9418      	str	r4, [sp, #96]	; 0x60
 801e5e6:	b29b      	uxth	r3, r3
 801e5e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e5ea:	b292      	uxth	r2, r2
 801e5ec:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801e5f0:	fb03 f702 	mul.w	r7, r3, r2
 801e5f4:	011b      	lsls	r3, r3, #4
 801e5f6:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 801e5fa:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801e5fe:	1bdb      	subs	r3, r3, r7
 801e600:	b292      	uxth	r2, r2
 801e602:	b29b      	uxth	r3, r3
 801e604:	ebac 0c02 	sub.w	ip, ip, r2
 801e608:	fb03 f909 	mul.w	r9, r3, r9
 801e60c:	fa1f fc8c 	uxth.w	ip, ip
 801e610:	fb0c 9000 	mla	r0, ip, r0, r9
 801e614:	f896 9000 	ldrb.w	r9, [r6]
 801e618:	fb02 0004 	mla	r0, r2, r4, r0
 801e61c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e61e:	fb07 0004 	mla	r0, r7, r4, r0
 801e622:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e624:	fb19 f904 	smulbb	r9, r9, r4
 801e628:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e62c:	fb00 9005 	mla	r0, r0, r5, r9
 801e630:	b280      	uxth	r0, r0
 801e632:	f100 0901 	add.w	r9, r0, #1
 801e636:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801e63a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e63c:	4358      	muls	r0, r3
 801e63e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e642:	fb0c 0101 	mla	r1, ip, r1, r0
 801e646:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e648:	f886 9000 	strb.w	r9, [r6]
 801e64c:	fb02 1100 	mla	r1, r2, r0, r1
 801e650:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e652:	fb07 1100 	mla	r1, r7, r0, r1
 801e656:	7870      	ldrb	r0, [r6, #1]
 801e658:	fb10 f004 	smulbb	r0, r0, r4
 801e65c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e660:	fb01 0105 	mla	r1, r1, r5, r0
 801e664:	b289      	uxth	r1, r1
 801e666:	1c48      	adds	r0, r1, #1
 801e668:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801e66c:	1209      	asrs	r1, r1, #8
 801e66e:	7071      	strb	r1, [r6, #1]
 801e670:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e672:	434b      	muls	r3, r1
 801e674:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e676:	fb0c 330e 	mla	r3, ip, lr, r3
 801e67a:	fb02 3201 	mla	r2, r2, r1, r3
 801e67e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e680:	fb07 2703 	mla	r7, r7, r3, r2
 801e684:	78b2      	ldrb	r2, [r6, #2]
 801e686:	fb12 f204 	smulbb	r2, r2, r4
 801e68a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e68e:	fb07 2505 	mla	r5, r7, r5, r2
 801e692:	b2ad      	uxth	r5, r5
 801e694:	1c6f      	adds	r7, r5, #1
 801e696:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801e69a:	122d      	asrs	r5, r5, #8
 801e69c:	70b5      	strb	r5, [r6, #2]
 801e69e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801e6a0:	3603      	adds	r6, #3
 801e6a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e6a6:	4498      	add	r8, r3
 801e6a8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801e6aa:	449b      	add	fp, r3
 801e6ac:	e75f      	b.n	801e56e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801e6ae:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801e6b0:	4498      	add	r8, r3
 801e6b2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801e6b4:	449b      	add	fp, r3
 801e6b6:	9b07      	ldr	r3, [sp, #28]
 801e6b8:	3b01      	subs	r3, #1
 801e6ba:	9307      	str	r3, [sp, #28]
 801e6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6be:	3303      	adds	r3, #3
 801e6c0:	9309      	str	r3, [sp, #36]	; 0x24
 801e6c2:	e709      	b.n	801e4d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801e6c4:	f47f af1b 	bne.w	801e4fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 801e6c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e6ca:	2b00      	cmp	r3, #0
 801e6cc:	f340 80e3 	ble.w	801e896 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801e6d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e6d4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e6d6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e6da:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e6de:	eef0 6a48 	vmov.f32	s13, s16
 801e6e2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e6e6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e6ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6ee:	ee16 8a90 	vmov	r8, s13
 801e6f2:	eef0 6a68 	vmov.f32	s13, s17
 801e6f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6fa:	ee16 ba90 	vmov	fp, s13
 801e6fe:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e702:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e706:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e70a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e70e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e712:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e716:	ee18 2a10 	vmov	r2, s16
 801e71a:	eeb0 8a47 	vmov.f32	s16, s14
 801e71e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e722:	ee18 2a90 	vmov	r2, s17
 801e726:	9335      	str	r3, [sp, #212]	; 0xd4
 801e728:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e72a:	eef0 8a67 	vmov.f32	s17, s15
 801e72e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e732:	9336      	str	r3, [sp, #216]	; 0xd8
 801e734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e736:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e738:	3b01      	subs	r3, #1
 801e73a:	930e      	str	r3, [sp, #56]	; 0x38
 801e73c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e73e:	bf08      	it	eq
 801e740:	4613      	moveq	r3, r2
 801e742:	9307      	str	r3, [sp, #28]
 801e744:	e6c1      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e746:	1c45      	adds	r5, r0, #1
 801e748:	d1a9      	bne.n	801e69e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801e74a:	9c08      	ldr	r4, [sp, #32]
 801e74c:	42a0      	cmp	r0, r4
 801e74e:	daa6      	bge.n	801e69e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801e750:	1c4c      	adds	r4, r1, #1
 801e752:	dba4      	blt.n	801e69e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801e754:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e756:	428c      	cmp	r4, r1
 801e758:	dda1      	ble.n	801e69e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801e75a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e75c:	9001      	str	r0, [sp, #4]
 801e75e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e760:	e9cd 1302 	strd	r1, r3, [sp, #8]
 801e764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e766:	4631      	mov	r1, r6
 801e768:	e9cd 2404 	strd	r2, r4, [sp, #16]
 801e76c:	9300      	str	r3, [sp, #0]
 801e76e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e770:	9b08      	ldr	r3, [sp, #32]
 801e772:	f7ff fd5b 	bl	801e22c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801e776:	e792      	b.n	801e69e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801e778:	ea4f 4228 	mov.w	r2, r8, asr #16
 801e77c:	9c08      	ldr	r4, [sp, #32]
 801e77e:	ea4f 402b 	mov.w	r0, fp, asr #16
 801e782:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801e786:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801e78a:	fb04 2000 	mla	r0, r4, r0, r2
 801e78e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e790:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e792:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e796:	4402      	add	r2, r0
 801e798:	5c25      	ldrb	r5, [r4, r0]
 801e79a:	7894      	ldrb	r4, [r2, #2]
 801e79c:	7850      	ldrb	r0, [r2, #1]
 801e79e:	9411      	str	r4, [sp, #68]	; 0x44
 801e7a0:	7954      	ldrb	r4, [r2, #5]
 801e7a2:	f892 a003 	ldrb.w	sl, [r2, #3]
 801e7a6:	f892 9004 	ldrb.w	r9, [r2, #4]
 801e7aa:	9412      	str	r4, [sp, #72]	; 0x48
 801e7ac:	b171      	cbz	r1, 801e7cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801e7ae:	3205      	adds	r2, #5
 801e7b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e7b2:	1917      	adds	r7, r2, r4
 801e7b4:	5d12      	ldrb	r2, [r2, r4]
 801e7b6:	9219      	str	r2, [sp, #100]	; 0x64
 801e7b8:	787a      	ldrb	r2, [r7, #1]
 801e7ba:	921b      	str	r2, [sp, #108]	; 0x6c
 801e7bc:	78ba      	ldrb	r2, [r7, #2]
 801e7be:	921d      	str	r2, [sp, #116]	; 0x74
 801e7c0:	78fa      	ldrb	r2, [r7, #3]
 801e7c2:	921a      	str	r2, [sp, #104]	; 0x68
 801e7c4:	793a      	ldrb	r2, [r7, #4]
 801e7c6:	921c      	str	r2, [sp, #112]	; 0x70
 801e7c8:	797a      	ldrb	r2, [r7, #5]
 801e7ca:	921e      	str	r2, [sp, #120]	; 0x78
 801e7cc:	b29b      	uxth	r3, r3
 801e7ce:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801e7d0:	b289      	uxth	r1, r1
 801e7d2:	3603      	adds	r6, #3
 801e7d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e7d8:	fb03 f201 	mul.w	r2, r3, r1
 801e7dc:	011b      	lsls	r3, r3, #4
 801e7de:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 801e7e2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801e7e6:	1a9b      	subs	r3, r3, r2
 801e7e8:	b289      	uxth	r1, r1
 801e7ea:	b29b      	uxth	r3, r3
 801e7ec:	1a7f      	subs	r7, r7, r1
 801e7ee:	fb03 fa0a 	mul.w	sl, r3, sl
 801e7f2:	b2bf      	uxth	r7, r7
 801e7f4:	fb03 f909 	mul.w	r9, r3, r9
 801e7f8:	fb07 a505 	mla	r5, r7, r5, sl
 801e7fc:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 801e800:	fb07 9000 	mla	r0, r7, r0, r9
 801e804:	fb01 5504 	mla	r5, r1, r4, r5
 801e808:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e80a:	fb02 5504 	mla	r5, r2, r4, r5
 801e80e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e810:	fb1a fa04 	smulbb	sl, sl, r4
 801e814:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801e818:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801e81a:	fb05 a50e 	mla	r5, r5, lr, sl
 801e81e:	fb01 0004 	mla	r0, r1, r4, r0
 801e822:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801e824:	b2ad      	uxth	r5, r5
 801e826:	fb02 0004 	mla	r0, r2, r4, r0
 801e82a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e82c:	f105 0a01 	add.w	sl, r5, #1
 801e830:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e834:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801e838:	122d      	asrs	r5, r5, #8
 801e83a:	f806 5c06 	strb.w	r5, [r6, #-6]
 801e83e:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 801e842:	fb15 f504 	smulbb	r5, r5, r4
 801e846:	fb00 500e 	mla	r0, r0, lr, r5
 801e84a:	b280      	uxth	r0, r0
 801e84c:	1c45      	adds	r5, r0, #1
 801e84e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e852:	1200      	asrs	r0, r0, #8
 801e854:	f806 0c05 	strb.w	r0, [r6, #-5]
 801e858:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e85a:	4343      	muls	r3, r0
 801e85c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e85e:	fb07 3300 	mla	r3, r7, r0, r3
 801e862:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e864:	fb01 3100 	mla	r1, r1, r0, r3
 801e868:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e86a:	fb02 1203 	mla	r2, r2, r3, r1
 801e86e:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 801e872:	fb11 f104 	smulbb	r1, r1, r4
 801e876:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e87a:	fb02 120e 	mla	r2, r2, lr, r1
 801e87e:	b292      	uxth	r2, r2
 801e880:	1c53      	adds	r3, r2, #1
 801e882:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e886:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801e888:	1212      	asrs	r2, r2, #8
 801e88a:	4498      	add	r8, r3
 801e88c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801e88e:	f806 2c04 	strb.w	r2, [r6, #-4]
 801e892:	449b      	add	fp, r3
 801e894:	e64d      	b.n	801e532 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801e896:	b021      	add	sp, #132	; 0x84
 801e898:	ecbd 8b08 	vpop	{d8-d11}
 801e89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e8a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801e8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8a4:	b085      	sub	sp, #20
 801e8a6:	784d      	ldrb	r5, [r1, #1]
 801e8a8:	788e      	ldrb	r6, [r1, #2]
 801e8aa:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801e8ae:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801e8b2:	9403      	str	r4, [sp, #12]
 801e8b4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801e8b8:	780c      	ldrb	r4, [r1, #0]
 801e8ba:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 801e8be:	fb07 ce03 	mla	lr, r7, r3, ip
 801e8c2:	2f00      	cmp	r7, #0
 801e8c4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e8c8:	eb02 0b0e 	add.w	fp, r2, lr
 801e8cc:	db56      	blt.n	801e97c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801e8ce:	45b9      	cmp	r9, r7
 801e8d0:	dd54      	ble.n	801e97c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801e8d2:	f1bc 0f00 	cmp.w	ip, #0
 801e8d6:	db4d      	blt.n	801e974 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801e8d8:	4563      	cmp	r3, ip
 801e8da:	dd4b      	ble.n	801e974 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801e8dc:	f812 200e 	ldrb.w	r2, [r2, lr]
 801e8e0:	9200      	str	r2, [sp, #0]
 801e8e2:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801e8e6:	9201      	str	r2, [sp, #4]
 801e8e8:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801e8ec:	9202      	str	r2, [sp, #8]
 801e8ee:	f11c 0201 	adds.w	r2, ip, #1
 801e8f2:	d44a      	bmi.n	801e98a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801e8f4:	4293      	cmp	r3, r2
 801e8f6:	dd48      	ble.n	801e98a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801e8f8:	2800      	cmp	r0, #0
 801e8fa:	d046      	beq.n	801e98a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801e8fc:	f89b e003 	ldrb.w	lr, [fp, #3]
 801e900:	f89b 8004 	ldrb.w	r8, [fp, #4]
 801e904:	f89b a005 	ldrb.w	sl, [fp, #5]
 801e908:	3701      	adds	r7, #1
 801e90a:	d446      	bmi.n	801e99a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801e90c:	45b9      	cmp	r9, r7
 801e90e:	dd44      	ble.n	801e99a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801e910:	9a03      	ldr	r2, [sp, #12]
 801e912:	2a00      	cmp	r2, #0
 801e914:	d045      	beq.n	801e9a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801e916:	f1bc 0f00 	cmp.w	ip, #0
 801e91a:	db3a      	blt.n	801e992 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801e91c:	4563      	cmp	r3, ip
 801e91e:	dd38      	ble.n	801e992 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801e920:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e924:	f04f 0903 	mov.w	r9, #3
 801e928:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801e92c:	fb03 b209 	mla	r2, r3, r9, fp
 801e930:	fb03 b909 	mla	r9, r3, r9, fp
 801e934:	7852      	ldrb	r2, [r2, #1]
 801e936:	f899 9002 	ldrb.w	r9, [r9, #2]
 801e93a:	f11c 0c01 	adds.w	ip, ip, #1
 801e93e:	d40d      	bmi.n	801e95c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801e940:	4563      	cmp	r3, ip
 801e942:	dd0b      	ble.n	801e95c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801e944:	b160      	cbz	r0, 801e960 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801e946:	2603      	movs	r6, #3
 801e948:	fb13 6406 	smlabb	r4, r3, r6, r6
 801e94c:	fb03 b506 	mla	r5, r3, r6, fp
 801e950:	fb03 b306 	mla	r3, r3, r6, fp
 801e954:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801e958:	792d      	ldrb	r5, [r5, #4]
 801e95a:	795e      	ldrb	r6, [r3, #5]
 801e95c:	280f      	cmp	r0, #15
 801e95e:	d802      	bhi.n	801e966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801e960:	9b03      	ldr	r3, [sp, #12]
 801e962:	2b0f      	cmp	r3, #15
 801e964:	d922      	bls.n	801e9ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801e966:	4b2f      	ldr	r3, [pc, #188]	; (801ea24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801e968:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e96c:	4a2e      	ldr	r2, [pc, #184]	; (801ea28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801e96e:	482f      	ldr	r0, [pc, #188]	; (801ea2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 801e970:	f003 ff96 	bl	80228a0 <__assert_func>
 801e974:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801e978:	9400      	str	r4, [sp, #0]
 801e97a:	e7b8      	b.n	801e8ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801e97c:	46b2      	mov	sl, r6
 801e97e:	46a8      	mov	r8, r5
 801e980:	46a6      	mov	lr, r4
 801e982:	9400      	str	r4, [sp, #0]
 801e984:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801e988:	e7be      	b.n	801e908 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801e98a:	46b2      	mov	sl, r6
 801e98c:	46a8      	mov	r8, r5
 801e98e:	46a6      	mov	lr, r4
 801e990:	e7ba      	b.n	801e908 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801e992:	46b1      	mov	r9, r6
 801e994:	462a      	mov	r2, r5
 801e996:	4627      	mov	r7, r4
 801e998:	e7cf      	b.n	801e93a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801e99a:	46b1      	mov	r9, r6
 801e99c:	462a      	mov	r2, r5
 801e99e:	4627      	mov	r7, r4
 801e9a0:	e7dc      	b.n	801e95c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801e9a2:	280f      	cmp	r0, #15
 801e9a4:	d8df      	bhi.n	801e966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801e9a6:	46b1      	mov	r9, r6
 801e9a8:	462a      	mov	r2, r5
 801e9aa:	4627      	mov	r7, r4
 801e9ac:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 801e9b0:	b280      	uxth	r0, r0
 801e9b2:	fb00 f30b 	mul.w	r3, r0, fp
 801e9b6:	0100      	lsls	r0, r0, #4
 801e9b8:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 801e9bc:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 801e9c0:	1ac0      	subs	r0, r0, r3
 801e9c2:	fa1f fb8b 	uxth.w	fp, fp
 801e9c6:	b280      	uxth	r0, r0
 801e9c8:	ebac 0c0b 	sub.w	ip, ip, fp
 801e9cc:	9003      	str	r0, [sp, #12]
 801e9ce:	fa1f fc8c 	uxth.w	ip, ip
 801e9d2:	fb00 fe0e 	mul.w	lr, r0, lr
 801e9d6:	9800      	ldr	r0, [sp, #0]
 801e9d8:	fb0c ee00 	mla	lr, ip, r0, lr
 801e9dc:	9803      	ldr	r0, [sp, #12]
 801e9de:	fb00 f808 	mul.w	r8, r0, r8
 801e9e2:	9801      	ldr	r0, [sp, #4]
 801e9e4:	fb0b ee07 	mla	lr, fp, r7, lr
 801e9e8:	fb0c 8800 	mla	r8, ip, r0, r8
 801e9ec:	fb03 ee04 	mla	lr, r3, r4, lr
 801e9f0:	fb0b 8202 	mla	r2, fp, r2, r8
 801e9f4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e9f8:	fb03 2505 	mla	r5, r3, r5, r2
 801e9fc:	9a03      	ldr	r2, [sp, #12]
 801e9fe:	f881 e000 	strb.w	lr, [r1]
 801ea02:	fb02 f00a 	mul.w	r0, r2, sl
 801ea06:	9a02      	ldr	r2, [sp, #8]
 801ea08:	122d      	asrs	r5, r5, #8
 801ea0a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801ea0e:	704d      	strb	r5, [r1, #1]
 801ea10:	fb0b c909 	mla	r9, fp, r9, ip
 801ea14:	fb03 9606 	mla	r6, r3, r6, r9
 801ea18:	1236      	asrs	r6, r6, #8
 801ea1a:	708e      	strb	r6, [r1, #2]
 801ea1c:	b005      	add	sp, #20
 801ea1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea22:	bf00      	nop
 801ea24:	08027073 	.word	0x08027073
 801ea28:	0802756a 	.word	0x0802756a
 801ea2c:	0802713c 	.word	0x0802713c

0801ea30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea34:	ed2d 8b0a 	vpush	{d8-d12}
 801ea38:	b09d      	sub	sp, #116	; 0x74
 801ea3a:	eeb0 aa40 	vmov.f32	s20, s0
 801ea3e:	eef0 9a60 	vmov.f32	s19, s1
 801ea42:	9306      	str	r3, [sp, #24]
 801ea44:	eeb0 9a41 	vmov.f32	s18, s2
 801ea48:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 801ea4c:	eeb0 8a62 	vmov.f32	s16, s5
 801ea50:	901b      	str	r0, [sp, #108]	; 0x6c
 801ea52:	eef0 8a43 	vmov.f32	s17, s6
 801ea56:	9307      	str	r3, [sp, #28]
 801ea58:	eeb0 ca44 	vmov.f32	s24, s8
 801ea5c:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 801ea60:	eef0 ba64 	vmov.f32	s23, s9
 801ea64:	eeb0 ba45 	vmov.f32	s22, s10
 801ea68:	9309      	str	r3, [sp, #36]	; 0x24
 801ea6a:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801ea6e:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 801ea72:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801ea74:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801ea78:	6850      	ldr	r0, [r2, #4]
 801ea7a:	6812      	ldr	r2, [r2, #0]
 801ea7c:	fb00 1303 	mla	r3, r0, r3, r1
 801ea80:	9907      	ldr	r1, [sp, #28]
 801ea82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea86:	18d3      	adds	r3, r2, r3
 801ea88:	2203      	movs	r2, #3
 801ea8a:	9308      	str	r3, [sp, #32]
 801ea8c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801ea8e:	681b      	ldr	r3, [r3, #0]
 801ea90:	930a      	str	r3, [sp, #40]	; 0x28
 801ea92:	f06f 0304 	mvn.w	r3, #4
 801ea96:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 801ea9a:	fb11 3302 	smlabb	r3, r1, r2, r3
 801ea9e:	930b      	str	r3, [sp, #44]	; 0x2c
 801eaa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	dc03      	bgt.n	801eaae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801eaa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	f340 8193 	ble.w	801edd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801eaae:	9b06      	ldr	r3, [sp, #24]
 801eab0:	2b00      	cmp	r3, #0
 801eab2:	f340 80d0 	ble.w	801ec56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 801eab6:	1432      	asrs	r2, r6, #16
 801eab8:	ea4f 4325 	mov.w	r3, r5, asr #16
 801eabc:	d42f      	bmi.n	801eb1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801eabe:	1c51      	adds	r1, r2, #1
 801eac0:	9807      	ldr	r0, [sp, #28]
 801eac2:	4281      	cmp	r1, r0
 801eac4:	da2e      	bge.n	801eb24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	db2c      	blt.n	801eb24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801eaca:	1c59      	adds	r1, r3, #1
 801eacc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eace:	4288      	cmp	r0, r1
 801ead0:	dd28      	ble.n	801eb24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801ead2:	9b06      	ldr	r3, [sp, #24]
 801ead4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801ead6:	3b01      	subs	r3, #1
 801ead8:	fb02 6203 	mla	r2, r2, r3, r6
 801eadc:	1412      	asrs	r2, r2, #16
 801eade:	d42c      	bmi.n	801eb3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801eae0:	3201      	adds	r2, #1
 801eae2:	9907      	ldr	r1, [sp, #28]
 801eae4:	4291      	cmp	r1, r2
 801eae6:	dd28      	ble.n	801eb3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801eae8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801eaea:	fb02 5303 	mla	r3, r2, r3, r5
 801eaee:	141b      	asrs	r3, r3, #16
 801eaf0:	d423      	bmi.n	801eb3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801eaf2:	3301      	adds	r3, #1
 801eaf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eaf6:	429a      	cmp	r2, r3
 801eaf8:	dd1f      	ble.n	801eb3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801eafa:	9b08      	ldr	r3, [sp, #32]
 801eafc:	f8dd e018 	ldr.w	lr, [sp, #24]
 801eb00:	f103 0c03 	add.w	ip, r3, #3
 801eb04:	f1be 0f00 	cmp.w	lr, #0
 801eb08:	f300 80fa 	bgt.w	801ed00 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801eb0c:	9b06      	ldr	r3, [sp, #24]
 801eb0e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801eb12:	9b08      	ldr	r3, [sp, #32]
 801eb14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801eb18:	4423      	add	r3, r4
 801eb1a:	9308      	str	r3, [sp, #32]
 801eb1c:	e09d      	b.n	801ec5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 801eb1e:	1c51      	adds	r1, r2, #1
 801eb20:	f040 808e 	bne.w	801ec40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801eb24:	9907      	ldr	r1, [sp, #28]
 801eb26:	428a      	cmp	r2, r1
 801eb28:	f280 808a 	bge.w	801ec40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801eb2c:	1c5f      	adds	r7, r3, #1
 801eb2e:	f2c0 8087 	blt.w	801ec40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801eb32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eb34:	4293      	cmp	r3, r2
 801eb36:	f280 8083 	bge.w	801ec40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801eb3a:	9f06      	ldr	r7, [sp, #24]
 801eb3c:	f8dd a020 	ldr.w	sl, [sp, #32]
 801eb40:	2f00      	cmp	r7, #0
 801eb42:	dde3      	ble.n	801eb0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801eb44:	1432      	asrs	r2, r6, #16
 801eb46:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801eb4a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801eb4e:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 801eb52:	f100 80bf 	bmi.w	801ecd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 801eb56:	1c50      	adds	r0, r2, #1
 801eb58:	9c07      	ldr	r4, [sp, #28]
 801eb5a:	4284      	cmp	r4, r0
 801eb5c:	f340 80bc 	ble.w	801ecd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	f2c0 80b9 	blt.w	801ecd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801eb66:	1c58      	adds	r0, r3, #1
 801eb68:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801eb6a:	4284      	cmp	r4, r0
 801eb6c:	f340 80b4 	ble.w	801ecd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801eb70:	9807      	ldr	r0, [sp, #28]
 801eb72:	fb00 2303 	mla	r3, r0, r3, r2
 801eb76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eb78:	980a      	ldr	r0, [sp, #40]	; 0x28
 801eb7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb7e:	441a      	add	r2, r3
 801eb80:	f810 c003 	ldrb.w	ip, [r0, r3]
 801eb84:	7953      	ldrb	r3, [r2, #5]
 801eb86:	7850      	ldrb	r0, [r2, #1]
 801eb88:	f892 e002 	ldrb.w	lr, [r2, #2]
 801eb8c:	f892 9003 	ldrb.w	r9, [r2, #3]
 801eb90:	f892 8004 	ldrb.w	r8, [r2, #4]
 801eb94:	930e      	str	r3, [sp, #56]	; 0x38
 801eb96:	f1bb 0f00 	cmp.w	fp, #0
 801eb9a:	d00f      	beq.n	801ebbc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801eb9c:	3205      	adds	r2, #5
 801eb9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eba0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801eba2:	18d3      	adds	r3, r2, r3
 801eba4:	5d12      	ldrb	r2, [r2, r4]
 801eba6:	920f      	str	r2, [sp, #60]	; 0x3c
 801eba8:	785a      	ldrb	r2, [r3, #1]
 801ebaa:	9211      	str	r2, [sp, #68]	; 0x44
 801ebac:	789a      	ldrb	r2, [r3, #2]
 801ebae:	9213      	str	r2, [sp, #76]	; 0x4c
 801ebb0:	78da      	ldrb	r2, [r3, #3]
 801ebb2:	9210      	str	r2, [sp, #64]	; 0x40
 801ebb4:	791a      	ldrb	r2, [r3, #4]
 801ebb6:	795b      	ldrb	r3, [r3, #5]
 801ebb8:	9212      	str	r2, [sp, #72]	; 0x48
 801ebba:	9314      	str	r3, [sp, #80]	; 0x50
 801ebbc:	b28b      	uxth	r3, r1
 801ebbe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ebc0:	fa1f f28b 	uxth.w	r2, fp
 801ebc4:	fb03 fb02 	mul.w	fp, r3, r2
 801ebc8:	011b      	lsls	r3, r3, #4
 801ebca:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801ebce:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 801ebd2:	eba3 030b 	sub.w	r3, r3, fp
 801ebd6:	b292      	uxth	r2, r2
 801ebd8:	b29b      	uxth	r3, r3
 801ebda:	1a89      	subs	r1, r1, r2
 801ebdc:	fb03 f808 	mul.w	r8, r3, r8
 801ebe0:	b289      	uxth	r1, r1
 801ebe2:	fb03 f909 	mul.w	r9, r3, r9
 801ebe6:	fb01 8800 	mla	r8, r1, r0, r8
 801ebea:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ebec:	fb01 990c 	mla	r9, r1, ip, r9
 801ebf0:	fb02 8800 	mla	r8, r2, r0, r8
 801ebf4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ebf6:	fb02 9904 	mla	r9, r2, r4, r9
 801ebfa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ebfc:	fb0b 8800 	mla	r8, fp, r0, r8
 801ec00:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ec02:	fb0b 9904 	mla	r9, fp, r4, r9
 801ec06:	4343      	muls	r3, r0
 801ec08:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ec0c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ec10:	fb01 330e 	mla	r3, r1, lr, r3
 801ec14:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801ec16:	f88a 9000 	strb.w	r9, [sl]
 801ec1a:	fb02 3201 	mla	r2, r2, r1, r3
 801ec1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ec20:	f88a 8001 	strb.w	r8, [sl, #1]
 801ec24:	fb0b 2b03 	mla	fp, fp, r3, r2
 801ec28:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801ec2c:	f88a b002 	strb.w	fp, [sl, #2]
 801ec30:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801ec32:	f10a 0a03 	add.w	sl, sl, #3
 801ec36:	3f01      	subs	r7, #1
 801ec38:	441e      	add	r6, r3
 801ec3a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801ec3c:	441d      	add	r5, r3
 801ec3e:	e77f      	b.n	801eb40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801ec40:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801ec42:	441e      	add	r6, r3
 801ec44:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801ec46:	441d      	add	r5, r3
 801ec48:	9b06      	ldr	r3, [sp, #24]
 801ec4a:	3b01      	subs	r3, #1
 801ec4c:	9306      	str	r3, [sp, #24]
 801ec4e:	9b08      	ldr	r3, [sp, #32]
 801ec50:	3303      	adds	r3, #3
 801ec52:	9308      	str	r3, [sp, #32]
 801ec54:	e72b      	b.n	801eaae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801ec56:	f47f af3c 	bne.w	801ead2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801ec5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	f340 80b9 	ble.w	801edd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801ec62:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801ec66:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ec68:	ee79 9aab 	vadd.f32	s19, s19, s23
 801ec6c:	eef0 6a48 	vmov.f32	s13, s16
 801ec70:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801ec74:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801ec78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec7c:	ee16 6a90 	vmov	r6, s13
 801ec80:	eef0 6a68 	vmov.f32	s13, s17
 801ec84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec88:	ee16 5a90 	vmov	r5, s13
 801ec8c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ec90:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ec94:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ec98:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ec9c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801eca0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801eca4:	ee18 2a10 	vmov	r2, s16
 801eca8:	eeb0 8a47 	vmov.f32	s16, s14
 801ecac:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecb0:	ee18 2a90 	vmov	r2, s17
 801ecb4:	9333      	str	r3, [sp, #204]	; 0xcc
 801ecb6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ecb8:	eef0 8a67 	vmov.f32	s17, s15
 801ecbc:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecc0:	9334      	str	r3, [sp, #208]	; 0xd0
 801ecc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ecc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ecc6:	3b01      	subs	r3, #1
 801ecc8:	930c      	str	r3, [sp, #48]	; 0x30
 801ecca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801eccc:	bf08      	it	eq
 801ecce:	4613      	moveq	r3, r2
 801ecd0:	9306      	str	r3, [sp, #24]
 801ecd2:	e6e5      	b.n	801eaa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801ecd4:	1c54      	adds	r4, r2, #1
 801ecd6:	d1ab      	bne.n	801ec30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801ecd8:	9807      	ldr	r0, [sp, #28]
 801ecda:	4282      	cmp	r2, r0
 801ecdc:	daa8      	bge.n	801ec30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801ecde:	1c58      	adds	r0, r3, #1
 801ece0:	dba6      	blt.n	801ec30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801ece2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ece4:	4298      	cmp	r0, r3
 801ece6:	dda3      	ble.n	801ec30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801ece8:	9000      	str	r0, [sp, #0]
 801ecea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ecec:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801ecf0:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 801ecf4:	9b07      	ldr	r3, [sp, #28]
 801ecf6:	4651      	mov	r1, sl
 801ecf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ecfa:	f7ff fdd1 	bl	801e8a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801ecfe:	e797      	b.n	801ec30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801ed00:	1431      	asrs	r1, r6, #16
 801ed02:	9c07      	ldr	r4, [sp, #28]
 801ed04:	1428      	asrs	r0, r5, #16
 801ed06:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801ed0a:	f3c6 3303 	ubfx	r3, r6, #12, #4
 801ed0e:	fb04 1000 	mla	r0, r4, r0, r1
 801ed12:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ed14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ed16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ed1a:	4401      	add	r1, r0
 801ed1c:	5c20      	ldrb	r0, [r4, r0]
 801ed1e:	f891 8002 	ldrb.w	r8, [r1, #2]
 801ed22:	900e      	str	r0, [sp, #56]	; 0x38
 801ed24:	f891 a003 	ldrb.w	sl, [r1, #3]
 801ed28:	7848      	ldrb	r0, [r1, #1]
 801ed2a:	f891 9004 	ldrb.w	r9, [r1, #4]
 801ed2e:	f891 b005 	ldrb.w	fp, [r1, #5]
 801ed32:	b172      	cbz	r2, 801ed52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 801ed34:	3105      	adds	r1, #5
 801ed36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ed38:	190f      	adds	r7, r1, r4
 801ed3a:	5d09      	ldrb	r1, [r1, r4]
 801ed3c:	9115      	str	r1, [sp, #84]	; 0x54
 801ed3e:	7879      	ldrb	r1, [r7, #1]
 801ed40:	9117      	str	r1, [sp, #92]	; 0x5c
 801ed42:	78b9      	ldrb	r1, [r7, #2]
 801ed44:	9119      	str	r1, [sp, #100]	; 0x64
 801ed46:	78f9      	ldrb	r1, [r7, #3]
 801ed48:	9116      	str	r1, [sp, #88]	; 0x58
 801ed4a:	7939      	ldrb	r1, [r7, #4]
 801ed4c:	9118      	str	r1, [sp, #96]	; 0x60
 801ed4e:	7979      	ldrb	r1, [r7, #5]
 801ed50:	911a      	str	r1, [sp, #104]	; 0x68
 801ed52:	b29b      	uxth	r3, r3
 801ed54:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ed56:	b292      	uxth	r2, r2
 801ed58:	f10c 0c03 	add.w	ip, ip, #3
 801ed5c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ed60:	fb03 f102 	mul.w	r1, r3, r2
 801ed64:	011b      	lsls	r3, r3, #4
 801ed66:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 801ed6a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801ed6e:	1a5b      	subs	r3, r3, r1
 801ed70:	b292      	uxth	r2, r2
 801ed72:	b29b      	uxth	r3, r3
 801ed74:	1abf      	subs	r7, r7, r2
 801ed76:	fb03 f909 	mul.w	r9, r3, r9
 801ed7a:	b2bf      	uxth	r7, r7
 801ed7c:	fb03 fa0a 	mul.w	sl, r3, sl
 801ed80:	fb03 f30b 	mul.w	r3, r3, fp
 801ed84:	fb07 9900 	mla	r9, r7, r0, r9
 801ed88:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ed8a:	fb07 aa04 	mla	sl, r7, r4, sl
 801ed8e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ed90:	fb02 9900 	mla	r9, r2, r0, r9
 801ed94:	9818      	ldr	r0, [sp, #96]	; 0x60
 801ed96:	fb07 3308 	mla	r3, r7, r8, r3
 801ed9a:	fb01 9900 	mla	r9, r1, r0, r9
 801ed9e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801eda0:	fb02 aa04 	mla	sl, r2, r4, sl
 801eda4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801eda6:	fb02 3200 	mla	r2, r2, r0, r3
 801edaa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801edac:	fb01 aa04 	mla	sl, r1, r4, sl
 801edb0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801edb4:	fb01 2103 	mla	r1, r1, r3, r2
 801edb8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801edba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801edbe:	f80c 9c05 	strb.w	r9, [ip, #-5]
 801edc2:	1209      	asrs	r1, r1, #8
 801edc4:	441e      	add	r6, r3
 801edc6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801edc8:	f80c ac06 	strb.w	sl, [ip, #-6]
 801edcc:	f80c 1c04 	strb.w	r1, [ip, #-4]
 801edd0:	441d      	add	r5, r3
 801edd2:	e697      	b.n	801eb04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801edd4:	b01d      	add	sp, #116	; 0x74
 801edd6:	ecbd 8b0a 	vpop	{d8-d12}
 801edda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ede0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801ede0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ede4:	b085      	sub	sp, #20
 801ede6:	7888      	ldrb	r0, [r1, #2]
 801ede8:	4691      	mov	r9, r2
 801edea:	9000      	str	r0, [sp, #0]
 801edec:	7848      	ldrb	r0, [r1, #1]
 801edee:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801edf2:	9001      	str	r0, [sp, #4]
 801edf4:	7808      	ldrb	r0, [r1, #0]
 801edf6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801edfa:	9002      	str	r0, [sp, #8]
 801edfc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801ee00:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801ee04:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801ee08:	fb04 c603 	mla	r6, r4, r3, ip
 801ee0c:	2c00      	cmp	r4, #0
 801ee0e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801ee12:	9a00      	ldr	r2, [sp, #0]
 801ee14:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801ee18:	9a01      	ldr	r2, [sp, #4]
 801ee1a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801ee1e:	db3a      	blt.n	801ee96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 801ee20:	45a0      	cmp	r8, r4
 801ee22:	dd38      	ble.n	801ee96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 801ee24:	f1bc 0f00 	cmp.w	ip, #0
 801ee28:	db33      	blt.n	801ee92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801ee2a:	4563      	cmp	r3, ip
 801ee2c:	dd31      	ble.n	801ee92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801ee2e:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801ee32:	f11c 0601 	adds.w	r6, ip, #1
 801ee36:	d431      	bmi.n	801ee9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801ee38:	42b3      	cmp	r3, r6
 801ee3a:	dd2f      	ble.n	801ee9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801ee3c:	b375      	cbz	r5, 801ee9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801ee3e:	f8de 6004 	ldr.w	r6, [lr, #4]
 801ee42:	3401      	adds	r4, #1
 801ee44:	d42e      	bmi.n	801eea4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801ee46:	45a0      	cmp	r8, r4
 801ee48:	dd2c      	ble.n	801eea4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801ee4a:	b35f      	cbz	r7, 801eea4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801ee4c:	f1bc 0f00 	cmp.w	ip, #0
 801ee50:	db26      	blt.n	801eea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 801ee52:	4563      	cmp	r3, ip
 801ee54:	dd24      	ble.n	801eea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 801ee56:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801ee5a:	f11c 0c01 	adds.w	ip, ip, #1
 801ee5e:	d405      	bmi.n	801ee6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ee60:	4563      	cmp	r3, ip
 801ee62:	dd03      	ble.n	801ee6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ee64:	b115      	cbz	r5, 801ee6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ee66:	3301      	adds	r3, #1
 801ee68:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801ee6c:	2d0f      	cmp	r5, #15
 801ee6e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801ee72:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ee76:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ee7a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801ee7e:	d801      	bhi.n	801ee84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 801ee80:	2f0f      	cmp	r7, #15
 801ee82:	d911      	bls.n	801eea8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 801ee84:	4b80      	ldr	r3, [pc, #512]	; (801f088 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 801ee86:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ee8a:	4a80      	ldr	r2, [pc, #512]	; (801f08c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801ee8c:	4880      	ldr	r0, [pc, #512]	; (801f090 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 801ee8e:	f003 fd07 	bl	80228a0 <__assert_func>
 801ee92:	4602      	mov	r2, r0
 801ee94:	e7cd      	b.n	801ee32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 801ee96:	4606      	mov	r6, r0
 801ee98:	4602      	mov	r2, r0
 801ee9a:	e7d2      	b.n	801ee42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801ee9c:	4606      	mov	r6, r0
 801ee9e:	e7d0      	b.n	801ee42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801eea0:	4604      	mov	r4, r0
 801eea2:	e7da      	b.n	801ee5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 801eea4:	4604      	mov	r4, r0
 801eea6:	e7e1      	b.n	801ee6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801eea8:	b2ab      	uxth	r3, r5
 801eeaa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801eeae:	b2bf      	uxth	r7, r7
 801eeb0:	fb03 fe07 	mul.w	lr, r3, r7
 801eeb4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801eeb8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801eebc:	eba3 0c0e 	sub.w	ip, r3, lr
 801eec0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801eec4:	b2bf      	uxth	r7, r7
 801eec6:	fa1f fc8c 	uxth.w	ip, ip
 801eeca:	eba5 0507 	sub.w	r5, r5, r7
 801eece:	fb0c f30a 	mul.w	r3, ip, sl
 801eed2:	b2ad      	uxth	r5, r5
 801eed4:	fb05 330b 	mla	r3, r5, fp, r3
 801eed8:	fb07 3309 	mla	r3, r7, r9, r3
 801eedc:	fb0e 3308 	mla	r3, lr, r8, r3
 801eee0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eee4:	9303      	str	r3, [sp, #12]
 801eee6:	d018      	beq.n	801ef1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 801eee8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801eeec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801eef0:	fb0b f303 	mul.w	r3, fp, r3
 801eef4:	fb0b fb02 	mul.w	fp, fp, r2
 801eef8:	0a1a      	lsrs	r2, r3, #8
 801eefa:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801eefe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ef02:	441a      	add	r2, r3
 801ef04:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801ef08:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801ef0c:	0a12      	lsrs	r2, r2, #8
 801ef0e:	0a1b      	lsrs	r3, r3, #8
 801ef10:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ef14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ef18:	431a      	orrs	r2, r3
 801ef1a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ef1e:	d019      	beq.n	801ef54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 801ef20:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801ef24:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ef28:	fb0a fb0b 	mul.w	fp, sl, fp
 801ef2c:	fb0a fa06 	mul.w	sl, sl, r6
 801ef30:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801ef34:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ef38:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801ef3c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ef40:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801ef44:	445e      	add	r6, fp
 801ef46:	0a1b      	lsrs	r3, r3, #8
 801ef48:	0a36      	lsrs	r6, r6, #8
 801ef4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ef4e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ef52:	431e      	orrs	r6, r3
 801ef54:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ef58:	d019      	beq.n	801ef8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 801ef5a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801ef5e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ef62:	fb09 fa0a 	mul.w	sl, r9, sl
 801ef66:	fb09 f904 	mul.w	r9, r9, r4
 801ef6a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801ef6e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ef72:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801ef76:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ef7a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801ef7e:	4454      	add	r4, sl
 801ef80:	0a1b      	lsrs	r3, r3, #8
 801ef82:	0a24      	lsrs	r4, r4, #8
 801ef84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ef88:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ef8c:	431c      	orrs	r4, r3
 801ef8e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ef92:	d019      	beq.n	801efc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 801ef94:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801ef98:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ef9c:	fb08 f909 	mul.w	r9, r8, r9
 801efa0:	fb08 f800 	mul.w	r8, r8, r0
 801efa4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801efa8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801efac:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801efb0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801efb4:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801efb8:	4448      	add	r0, r9
 801efba:	0a1b      	lsrs	r3, r3, #8
 801efbc:	0a00      	lsrs	r0, r0, #8
 801efbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801efc2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801efc6:	4318      	orrs	r0, r3
 801efc8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801efcc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801efd0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801efd4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801efd8:	fb0c f808 	mul.w	r8, ip, r8
 801efdc:	fb0c f606 	mul.w	r6, ip, r6
 801efe0:	fb05 8803 	mla	r8, r5, r3, r8
 801efe4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801efe8:	fb05 6202 	mla	r2, r5, r2, r6
 801efec:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801eff0:	fb07 8803 	mla	r8, r7, r3, r8
 801eff4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801eff8:	fb07 2704 	mla	r7, r7, r4, r2
 801effc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f000:	fb0e 8303 	mla	r3, lr, r3, r8
 801f004:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 801f008:	fb0e 7e00 	mla	lr, lr, r0, r7
 801f00c:	9803      	ldr	r0, [sp, #12]
 801f00e:	b292      	uxth	r2, r2
 801f010:	9c02      	ldr	r4, [sp, #8]
 801f012:	0a1b      	lsrs	r3, r3, #8
 801f014:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f018:	4350      	muls	r0, r2
 801f01a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f01e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f022:	ea43 0e0e 	orr.w	lr, r3, lr
 801f026:	1c43      	adds	r3, r0, #1
 801f028:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f02c:	fa5f f08e 	uxtb.w	r0, lr
 801f030:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801f034:	b2db      	uxtb	r3, r3
 801f036:	fb14 f403 	smulbb	r4, r4, r3
 801f03a:	fb00 4002 	mla	r0, r0, r2, r4
 801f03e:	b280      	uxth	r0, r0
 801f040:	1c44      	adds	r4, r0, #1
 801f042:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801f046:	9c01      	ldr	r4, [sp, #4]
 801f048:	fb14 f403 	smulbb	r4, r4, r3
 801f04c:	1200      	asrs	r0, r0, #8
 801f04e:	7008      	strb	r0, [r1, #0]
 801f050:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801f054:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f058:	fb00 4002 	mla	r0, r0, r2, r4
 801f05c:	b280      	uxth	r0, r0
 801f05e:	1c44      	adds	r4, r0, #1
 801f060:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801f064:	1200      	asrs	r0, r0, #8
 801f066:	7048      	strb	r0, [r1, #1]
 801f068:	9800      	ldr	r0, [sp, #0]
 801f06a:	fb10 f303 	smulbb	r3, r0, r3
 801f06e:	fb0e 3202 	mla	r2, lr, r2, r3
 801f072:	b292      	uxth	r2, r2
 801f074:	f102 0e01 	add.w	lr, r2, #1
 801f078:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801f07c:	1212      	asrs	r2, r2, #8
 801f07e:	708a      	strb	r2, [r1, #2]
 801f080:	b005      	add	sp, #20
 801f082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f086:	bf00      	nop
 801f088:	08027073 	.word	0x08027073
 801f08c:	0802756a 	.word	0x0802756a
 801f090:	0802713c 	.word	0x0802713c

0801f094 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f098:	ed2d 8b08 	vpush	{d8-d11}
 801f09c:	b099      	sub	sp, #100	; 0x64
 801f09e:	eeb0 aa40 	vmov.f32	s20, s0
 801f0a2:	eef0 9a60 	vmov.f32	s19, s1
 801f0a6:	9306      	str	r3, [sp, #24]
 801f0a8:	eeb0 9a41 	vmov.f32	s18, s2
 801f0ac:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801f0b0:	eeb0 8a62 	vmov.f32	s16, s5
 801f0b4:	9216      	str	r2, [sp, #88]	; 0x58
 801f0b6:	eef0 8a43 	vmov.f32	s17, s6
 801f0ba:	9307      	str	r3, [sp, #28]
 801f0bc:	eef0 ba44 	vmov.f32	s23, s8
 801f0c0:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801f0c4:	eeb0 ba64 	vmov.f32	s22, s9
 801f0c8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f0ca:	eef0 aa45 	vmov.f32	s21, s10
 801f0ce:	9310      	str	r3, [sp, #64]	; 0x40
 801f0d0:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801f0d4:	9017      	str	r0, [sp, #92]	; 0x5c
 801f0d6:	9112      	str	r1, [sp, #72]	; 0x48
 801f0d8:	6850      	ldr	r0, [r2, #4]
 801f0da:	9315      	str	r3, [sp, #84]	; 0x54
 801f0dc:	6812      	ldr	r2, [r2, #0]
 801f0de:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801f0e0:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801f0e4:	fb00 1303 	mla	r3, r0, r3, r1
 801f0e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0ec:	18d3      	adds	r3, r2, r3
 801f0ee:	930a      	str	r3, [sp, #40]	; 0x28
 801f0f0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f0f2:	681b      	ldr	r3, [r3, #0]
 801f0f4:	9311      	str	r3, [sp, #68]	; 0x44
 801f0f6:	9b07      	ldr	r3, [sp, #28]
 801f0f8:	009b      	lsls	r3, r3, #2
 801f0fa:	930e      	str	r3, [sp, #56]	; 0x38
 801f0fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	dc03      	bgt.n	801f10a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801f102:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f104:	2b00      	cmp	r3, #0
 801f106:	f340 833b 	ble.w	801f780 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 801f10a:	9b06      	ldr	r3, [sp, #24]
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	f340 8197 	ble.w	801f440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 801f112:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f114:	1423      	asrs	r3, r4, #16
 801f116:	1412      	asrs	r2, r2, #16
 801f118:	d432      	bmi.n	801f180 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801f11a:	1c51      	adds	r1, r2, #1
 801f11c:	9807      	ldr	r0, [sp, #28]
 801f11e:	4288      	cmp	r0, r1
 801f120:	dd31      	ble.n	801f186 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f122:	2b00      	cmp	r3, #0
 801f124:	db2f      	blt.n	801f186 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f126:	1c59      	adds	r1, r3, #1
 801f128:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f12a:	4288      	cmp	r0, r1
 801f12c:	dd2b      	ble.n	801f186 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f12e:	9b06      	ldr	r3, [sp, #24]
 801f130:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f132:	3b01      	subs	r3, #1
 801f134:	992b      	ldr	r1, [sp, #172]	; 0xac
 801f136:	fb02 1203 	mla	r2, r2, r3, r1
 801f13a:	1412      	asrs	r2, r2, #16
 801f13c:	d42e      	bmi.n	801f19c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801f13e:	3201      	adds	r2, #1
 801f140:	9907      	ldr	r1, [sp, #28]
 801f142:	4291      	cmp	r1, r2
 801f144:	dd2a      	ble.n	801f19c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801f146:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f148:	fb02 4303 	mla	r3, r2, r3, r4
 801f14c:	141b      	asrs	r3, r3, #16
 801f14e:	d425      	bmi.n	801f19c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801f150:	3301      	adds	r3, #1
 801f152:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f154:	429a      	cmp	r2, r3
 801f156:	dd21      	ble.n	801f19c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801f158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f15a:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 801f15e:	f103 0e03 	add.w	lr, r3, #3
 801f162:	9b06      	ldr	r3, [sp, #24]
 801f164:	9313      	str	r3, [sp, #76]	; 0x4c
 801f166:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f168:	2b00      	cmp	r3, #0
 801f16a:	f300 81d2 	bgt.w	801f512 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 801f16e:	9b06      	ldr	r3, [sp, #24]
 801f170:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f176:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f17a:	4423      	add	r3, r4
 801f17c:	930a      	str	r3, [sp, #40]	; 0x28
 801f17e:	e161      	b.n	801f444 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 801f180:	1c51      	adds	r1, r2, #1
 801f182:	f040 8150 	bne.w	801f426 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801f186:	9907      	ldr	r1, [sp, #28]
 801f188:	428a      	cmp	r2, r1
 801f18a:	f280 814c 	bge.w	801f426 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801f18e:	1c5a      	adds	r2, r3, #1
 801f190:	f2c0 8149 	blt.w	801f426 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801f194:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f196:	4293      	cmp	r3, r2
 801f198:	f280 8145 	bge.w	801f426 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801f19c:	9b06      	ldr	r3, [sp, #24]
 801f19e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f1a0:	9314      	str	r3, [sp, #80]	; 0x50
 801f1a2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801f1a6:	9313      	str	r3, [sp, #76]	; 0x4c
 801f1a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	dddf      	ble.n	801f16e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801f1ae:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f1b0:	1423      	asrs	r3, r4, #16
 801f1b2:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801f1b6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f1ba:	1412      	asrs	r2, r2, #16
 801f1bc:	f100 8190 	bmi.w	801f4e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 801f1c0:	1c55      	adds	r5, r2, #1
 801f1c2:	9f07      	ldr	r7, [sp, #28]
 801f1c4:	42af      	cmp	r7, r5
 801f1c6:	f340 818d 	ble.w	801f4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801f1ca:	2b00      	cmp	r3, #0
 801f1cc:	f2c0 818a 	blt.w	801f4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801f1d0:	1c5d      	adds	r5, r3, #1
 801f1d2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f1d4:	42af      	cmp	r7, r5
 801f1d6:	f340 8185 	ble.w	801f4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801f1da:	9d07      	ldr	r5, [sp, #28]
 801f1dc:	fb03 2305 	mla	r3, r3, r5, r2
 801f1e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f1e2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801f1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f1ea:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f1ee:	2800      	cmp	r0, #0
 801f1f0:	f000 8167 	beq.w	801f4c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801f1f4:	686a      	ldr	r2, [r5, #4]
 801f1f6:	920b      	str	r2, [sp, #44]	; 0x2c
 801f1f8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f1fc:	2900      	cmp	r1, #0
 801f1fe:	f000 8169 	beq.w	801f4d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801f202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f204:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f206:	18aa      	adds	r2, r5, r2
 801f208:	59ed      	ldr	r5, [r5, r7]
 801f20a:	6852      	ldr	r2, [r2, #4]
 801f20c:	9508      	str	r5, [sp, #32]
 801f20e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801f212:	0e15      	lsrs	r5, r2, #24
 801f214:	920c      	str	r2, [sp, #48]	; 0x30
 801f216:	b280      	uxth	r0, r0
 801f218:	b289      	uxth	r1, r1
 801f21a:	fb00 fb01 	mul.w	fp, r0, r1
 801f21e:	0100      	lsls	r0, r0, #4
 801f220:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 801f224:	eba0 090b 	sub.w	r9, r0, fp
 801f228:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801f22c:	b289      	uxth	r1, r1
 801f22e:	fa1f f989 	uxth.w	r9, r9
 801f232:	1a52      	subs	r2, r2, r1
 801f234:	fb09 f008 	mul.w	r0, r9, r8
 801f238:	b292      	uxth	r2, r2
 801f23a:	fb02 000c 	mla	r0, r2, ip, r0
 801f23e:	fb01 000a 	mla	r0, r1, sl, r0
 801f242:	fb0b 0005 	mla	r0, fp, r5, r0
 801f246:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f24a:	2800      	cmp	r0, #0
 801f24c:	f000 80e0 	beq.w	801f410 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801f250:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f254:	d01b      	beq.n	801f28e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 801f256:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f25a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f25e:	fb0c fe0e 	mul.w	lr, ip, lr
 801f262:	fb0c fc03 	mul.w	ip, ip, r3
 801f266:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801f26a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f26e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f272:	4473      	add	r3, lr
 801f274:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801f278:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801f27c:	0a1b      	lsrs	r3, r3, #8
 801f27e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f282:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f286:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f28a:	ea43 030e 	orr.w	r3, r3, lr
 801f28e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f292:	d01e      	beq.n	801f2d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f294:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f296:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f29a:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801f29e:	fb08 fc0c 	mul.w	ip, r8, ip
 801f2a2:	fb08 f80e 	mul.w	r8, r8, lr
 801f2a6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f2aa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f2ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f2b2:	44e6      	add	lr, ip
 801f2b4:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801f2b8:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801f2bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f2c0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f2c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f2c8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f2cc:	ea4e 0708 	orr.w	r7, lr, r8
 801f2d0:	970b      	str	r7, [sp, #44]	; 0x2c
 801f2d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f2d6:	d01e      	beq.n	801f316 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f2d8:	9f08      	ldr	r7, [sp, #32]
 801f2da:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801f2de:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801f2e2:	fb0a f808 	mul.w	r8, sl, r8
 801f2e6:	fb0a fa0c 	mul.w	sl, sl, ip
 801f2ea:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801f2ee:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801f2f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f2f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f2fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f2fe:	44c6      	add	lr, r8
 801f300:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f304:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f308:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f30c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f310:	ea4e 070a 	orr.w	r7, lr, sl
 801f314:	9708      	str	r7, [sp, #32]
 801f316:	2dff      	cmp	r5, #255	; 0xff
 801f318:	d01d      	beq.n	801f356 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 801f31a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f31c:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801f320:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801f324:	fb05 f808 	mul.w	r8, r5, r8
 801f328:	fb05 f50c 	mul.w	r5, r5, ip
 801f32c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801f330:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801f334:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801f338:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f33c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801f340:	44c6      	add	lr, r8
 801f342:	0a2d      	lsrs	r5, r5, #8
 801f344:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f348:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f34c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f350:	ea4e 0505 	orr.w	r5, lr, r5
 801f354:	950c      	str	r5, [sp, #48]	; 0x30
 801f356:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f358:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f35c:	9f08      	ldr	r7, [sp, #32]
 801f35e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f362:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f366:	fb09 f505 	mul.w	r5, r9, r5
 801f36a:	fb02 550c 	mla	r5, r2, ip, r5
 801f36e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f372:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f374:	fb01 550c 	mla	r5, r1, ip, r5
 801f378:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f37c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f37e:	fb0b 550c 	mla	r5, fp, ip, r5
 801f382:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801f386:	fb09 f90c 	mul.w	r9, r9, ip
 801f38a:	0a2d      	lsrs	r5, r5, #8
 801f38c:	fb02 9303 	mla	r3, r2, r3, r9
 801f390:	9a08      	ldr	r2, [sp, #32]
 801f392:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f396:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801f39a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f39c:	fb01 330e 	mla	r3, r1, lr, r3
 801f3a0:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f3a4:	fb0b 3b01 	mla	fp, fp, r1, r3
 801f3a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f3aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801f3ac:	4343      	muls	r3, r0
 801f3ae:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f3b2:	1c58      	adds	r0, r3, #1
 801f3b4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f3b8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f3bc:	ea45 050b 	orr.w	r5, r5, fp
 801f3c0:	7833      	ldrb	r3, [r6, #0]
 801f3c2:	b2ea      	uxtb	r2, r5
 801f3c4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f3c8:	fb12 f201 	smulbb	r2, r2, r1
 801f3cc:	b2c0      	uxtb	r0, r0
 801f3ce:	fb03 2300 	mla	r3, r3, r0, r2
 801f3d2:	b29b      	uxth	r3, r3
 801f3d4:	1c5a      	adds	r2, r3, #1
 801f3d6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f3da:	7872      	ldrb	r2, [r6, #1]
 801f3dc:	fb12 f200 	smulbb	r2, r2, r0
 801f3e0:	121b      	asrs	r3, r3, #8
 801f3e2:	7033      	strb	r3, [r6, #0]
 801f3e4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f3e8:	0c2d      	lsrs	r5, r5, #16
 801f3ea:	fb03 2301 	mla	r3, r3, r1, r2
 801f3ee:	b29b      	uxth	r3, r3
 801f3f0:	1c5a      	adds	r2, r3, #1
 801f3f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f3f6:	121b      	asrs	r3, r3, #8
 801f3f8:	7073      	strb	r3, [r6, #1]
 801f3fa:	78b3      	ldrb	r3, [r6, #2]
 801f3fc:	fb13 f000 	smulbb	r0, r3, r0
 801f400:	fb05 0501 	mla	r5, r5, r1, r0
 801f404:	b2ad      	uxth	r5, r5
 801f406:	1c6b      	adds	r3, r5, #1
 801f408:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f40c:	122d      	asrs	r5, r5, #8
 801f40e:	70b5      	strb	r5, [r6, #2]
 801f410:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f412:	3603      	adds	r6, #3
 801f414:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f416:	4413      	add	r3, r2
 801f418:	932b      	str	r3, [sp, #172]	; 0xac
 801f41a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f41c:	441c      	add	r4, r3
 801f41e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f420:	3b01      	subs	r3, #1
 801f422:	9314      	str	r3, [sp, #80]	; 0x50
 801f424:	e6c0      	b.n	801f1a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801f426:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f428:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f42a:	4413      	add	r3, r2
 801f42c:	932b      	str	r3, [sp, #172]	; 0xac
 801f42e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f430:	441c      	add	r4, r3
 801f432:	9b06      	ldr	r3, [sp, #24]
 801f434:	3b01      	subs	r3, #1
 801f436:	9306      	str	r3, [sp, #24]
 801f438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f43a:	3303      	adds	r3, #3
 801f43c:	930a      	str	r3, [sp, #40]	; 0x28
 801f43e:	e664      	b.n	801f10a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801f440:	f47f ae75 	bne.w	801f12e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801f444:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f446:	2b00      	cmp	r3, #0
 801f448:	f340 819a 	ble.w	801f780 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 801f44c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f450:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f452:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f456:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f45a:	eef0 6a48 	vmov.f32	s13, s16
 801f45e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f462:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f466:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f46a:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801f46e:	eef0 6a68 	vmov.f32	s13, s17
 801f472:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f476:	ee16 4a90 	vmov	r4, s13
 801f47a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f47e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f482:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f486:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f48a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f48e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f492:	ee18 2a10 	vmov	r2, s16
 801f496:	eeb0 8a47 	vmov.f32	s16, s14
 801f49a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f49e:	ee18 2a90 	vmov	r2, s17
 801f4a2:	932d      	str	r3, [sp, #180]	; 0xb4
 801f4a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f4a6:	eef0 8a67 	vmov.f32	s17, s15
 801f4aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4ae:	932e      	str	r3, [sp, #184]	; 0xb8
 801f4b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f4b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f4b4:	3b01      	subs	r3, #1
 801f4b6:	9312      	str	r3, [sp, #72]	; 0x48
 801f4b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f4ba:	bf08      	it	eq
 801f4bc:	4613      	moveq	r3, r2
 801f4be:	9306      	str	r3, [sp, #24]
 801f4c0:	e61c      	b.n	801f0fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801f4c2:	b151      	cbz	r1, 801f4da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801f4c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f4c6:	58aa      	ldr	r2, [r5, r2]
 801f4c8:	25ff      	movs	r5, #255	; 0xff
 801f4ca:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801f4ce:	9208      	str	r2, [sp, #32]
 801f4d0:	46a8      	mov	r8, r5
 801f4d2:	e6a0      	b.n	801f216 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 801f4d4:	25ff      	movs	r5, #255	; 0xff
 801f4d6:	46aa      	mov	sl, r5
 801f4d8:	e69d      	b.n	801f216 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 801f4da:	25ff      	movs	r5, #255	; 0xff
 801f4dc:	46aa      	mov	sl, r5
 801f4de:	e7f7      	b.n	801f4d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 801f4e0:	1c57      	adds	r7, r2, #1
 801f4e2:	d195      	bne.n	801f410 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801f4e4:	9d07      	ldr	r5, [sp, #28]
 801f4e6:	4295      	cmp	r5, r2
 801f4e8:	dd92      	ble.n	801f410 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801f4ea:	1c5d      	adds	r5, r3, #1
 801f4ec:	db90      	blt.n	801f410 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801f4ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801f4f0:	429d      	cmp	r5, r3
 801f4f2:	dd8d      	ble.n	801f410 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801f4f4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801f4f6:	9201      	str	r2, [sp, #4]
 801f4f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f4fa:	e9cd 3002 	strd	r3, r0, [sp, #8]
 801f4fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f500:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f502:	9300      	str	r3, [sp, #0]
 801f504:	9b07      	ldr	r3, [sp, #28]
 801f506:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801f50a:	4631      	mov	r1, r6
 801f50c:	f7ff fc68 	bl	801ede0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801f510:	e77e      	b.n	801f410 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801f512:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f514:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801f518:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f51a:	9d07      	ldr	r5, [sp, #28]
 801f51c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f520:	1412      	asrs	r2, r2, #16
 801f522:	1423      	asrs	r3, r4, #16
 801f524:	fb05 2303 	mla	r3, r5, r3, r2
 801f528:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f52a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801f52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f532:	0e1e      	lsrs	r6, r3, #24
 801f534:	2900      	cmp	r1, #0
 801f536:	f000 8114 	beq.w	801f762 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 801f53a:	686a      	ldr	r2, [r5, #4]
 801f53c:	920d      	str	r2, [sp, #52]	; 0x34
 801f53e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801f542:	2800      	cmp	r0, #0
 801f544:	f000 8116 	beq.w	801f774 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 801f548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f54a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f54c:	18aa      	adds	r2, r5, r2
 801f54e:	59ed      	ldr	r5, [r5, r7]
 801f550:	6852      	ldr	r2, [r2, #4]
 801f552:	9509      	str	r5, [sp, #36]	; 0x24
 801f554:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f558:	0e15      	lsrs	r5, r2, #24
 801f55a:	920f      	str	r2, [sp, #60]	; 0x3c
 801f55c:	b289      	uxth	r1, r1
 801f55e:	b280      	uxth	r0, r0
 801f560:	fb01 fa00 	mul.w	sl, r1, r0
 801f564:	0109      	lsls	r1, r1, #4
 801f566:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f56a:	eba1 080a 	sub.w	r8, r1, sl
 801f56e:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801f572:	b280      	uxth	r0, r0
 801f574:	fa1f f888 	uxth.w	r8, r8
 801f578:	1a12      	subs	r2, r2, r0
 801f57a:	fb08 f10c 	mul.w	r1, r8, ip
 801f57e:	b292      	uxth	r2, r2
 801f580:	fb02 1106 	mla	r1, r2, r6, r1
 801f584:	fb00 1109 	mla	r1, r0, r9, r1
 801f588:	fb0a 1105 	mla	r1, sl, r5, r1
 801f58c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f590:	2900      	cmp	r1, #0
 801f592:	f000 80da 	beq.w	801f74a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 801f596:	2eff      	cmp	r6, #255	; 0xff
 801f598:	d016      	beq.n	801f5c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 801f59a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f59e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f5a2:	4377      	muls	r7, r6
 801f5a4:	435e      	muls	r6, r3
 801f5a6:	0a3b      	lsrs	r3, r7, #8
 801f5a8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f5ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f5b0:	443b      	add	r3, r7
 801f5b2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801f5b6:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f5ba:	0a1b      	lsrs	r3, r3, #8
 801f5bc:	0a3f      	lsrs	r7, r7, #8
 801f5be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f5c2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f5c6:	433b      	orrs	r3, r7
 801f5c8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f5cc:	d01d      	beq.n	801f60a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 801f5ce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f5d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801f5d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f5d6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f5da:	fb0c f606 	mul.w	r6, ip, r6
 801f5de:	fb0c fc07 	mul.w	ip, ip, r7
 801f5e2:	0a37      	lsrs	r7, r6, #8
 801f5e4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f5e8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f5ec:	4437      	add	r7, r6
 801f5ee:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801f5f2:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801f5f6:	0a3f      	lsrs	r7, r7, #8
 801f5f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f5fc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f600:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f604:	ea47 060c 	orr.w	r6, r7, ip
 801f608:	960d      	str	r6, [sp, #52]	; 0x34
 801f60a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f60e:	d01d      	beq.n	801f64c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 801f610:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f612:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f616:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f61a:	fb09 fc0c 	mul.w	ip, r9, ip
 801f61e:	fb09 f906 	mul.w	r9, r9, r6
 801f622:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801f626:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f62a:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801f62e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f632:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801f636:	4467      	add	r7, ip
 801f638:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f63c:	0a3f      	lsrs	r7, r7, #8
 801f63e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f642:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f646:	ea47 0609 	orr.w	r6, r7, r9
 801f64a:	9609      	str	r6, [sp, #36]	; 0x24
 801f64c:	2dff      	cmp	r5, #255	; 0xff
 801f64e:	d01a      	beq.n	801f686 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 801f650:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f652:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f656:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f65a:	fb05 fc0c 	mul.w	ip, r5, ip
 801f65e:	4375      	muls	r5, r6
 801f660:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801f664:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f668:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801f66c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f670:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f674:	4467      	add	r7, ip
 801f676:	0a2d      	lsrs	r5, r5, #8
 801f678:	0a3f      	lsrs	r7, r7, #8
 801f67a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f67e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f682:	433d      	orrs	r5, r7
 801f684:	950f      	str	r5, [sp, #60]	; 0x3c
 801f686:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f688:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801f68c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f690:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f694:	fb08 f505 	mul.w	r5, r8, r5
 801f698:	fb02 5506 	mla	r5, r2, r6, r5
 801f69c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f69e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f6a2:	fb00 5506 	mla	r5, r0, r6, r5
 801f6a6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f6a8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f6ac:	fb0a 5506 	mla	r5, sl, r6, r5
 801f6b0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f6b2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f6b6:	0a2d      	lsrs	r5, r5, #8
 801f6b8:	fb08 f806 	mul.w	r8, r8, r6
 801f6bc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f6c0:	fb02 8303 	mla	r3, r2, r3, r8
 801f6c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f6c6:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801f6ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f6cc:	fb00 3307 	mla	r3, r0, r7, r3
 801f6d0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f6d4:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801f6d8:	fb01 f30b 	mul.w	r3, r1, fp
 801f6dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f6e0:	1c59      	adds	r1, r3, #1
 801f6e2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f6e6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f6ea:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801f6ee:	ea45 050c 	orr.w	r5, r5, ip
 801f6f2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f6f6:	b2ea      	uxtb	r2, r5
 801f6f8:	b2c9      	uxtb	r1, r1
 801f6fa:	fb12 f20b 	smulbb	r2, r2, fp
 801f6fe:	fb03 2301 	mla	r3, r3, r1, r2
 801f702:	b29b      	uxth	r3, r3
 801f704:	1c5a      	adds	r2, r3, #1
 801f706:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f70a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801f70e:	fb12 f201 	smulbb	r2, r2, r1
 801f712:	121b      	asrs	r3, r3, #8
 801f714:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f718:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f71c:	0c2d      	lsrs	r5, r5, #16
 801f71e:	fb03 230b 	mla	r3, r3, fp, r2
 801f722:	b29b      	uxth	r3, r3
 801f724:	1c5a      	adds	r2, r3, #1
 801f726:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f72a:	121b      	asrs	r3, r3, #8
 801f72c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f730:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f734:	fb13 f101 	smulbb	r1, r3, r1
 801f738:	fb05 150b 	mla	r5, r5, fp, r1
 801f73c:	b2ad      	uxth	r5, r5
 801f73e:	1c69      	adds	r1, r5, #1
 801f740:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801f744:	122d      	asrs	r5, r5, #8
 801f746:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f74a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f74c:	f10e 0e03 	add.w	lr, lr, #3
 801f750:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f752:	4413      	add	r3, r2
 801f754:	932b      	str	r3, [sp, #172]	; 0xac
 801f756:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f758:	441c      	add	r4, r3
 801f75a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f75c:	3b01      	subs	r3, #1
 801f75e:	9313      	str	r3, [sp, #76]	; 0x4c
 801f760:	e501      	b.n	801f166 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 801f762:	b150      	cbz	r0, 801f77a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 801f764:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f766:	58aa      	ldr	r2, [r5, r2]
 801f768:	25ff      	movs	r5, #255	; 0xff
 801f76a:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801f76e:	9209      	str	r2, [sp, #36]	; 0x24
 801f770:	46ac      	mov	ip, r5
 801f772:	e6f3      	b.n	801f55c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 801f774:	25ff      	movs	r5, #255	; 0xff
 801f776:	46a9      	mov	r9, r5
 801f778:	e6f0      	b.n	801f55c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 801f77a:	25ff      	movs	r5, #255	; 0xff
 801f77c:	46a9      	mov	r9, r5
 801f77e:	e7f7      	b.n	801f770 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 801f780:	b019      	add	sp, #100	; 0x64
 801f782:	ecbd 8b08 	vpop	{d8-d11}
 801f786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f78c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801f78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f790:	b085      	sub	sp, #20
 801f792:	7888      	ldrb	r0, [r1, #2]
 801f794:	4691      	mov	r9, r2
 801f796:	9000      	str	r0, [sp, #0]
 801f798:	7848      	ldrb	r0, [r1, #1]
 801f79a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801f79e:	9001      	str	r0, [sp, #4]
 801f7a0:	7808      	ldrb	r0, [r1, #0]
 801f7a2:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801f7a6:	9002      	str	r0, [sp, #8]
 801f7a8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f7ac:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801f7b0:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801f7b4:	fb04 c603 	mla	r6, r4, r3, ip
 801f7b8:	2c00      	cmp	r4, #0
 801f7ba:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801f7be:	9a00      	ldr	r2, [sp, #0]
 801f7c0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801f7c4:	9a01      	ldr	r2, [sp, #4]
 801f7c6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801f7ca:	db3a      	blt.n	801f842 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 801f7cc:	45a0      	cmp	r8, r4
 801f7ce:	dd38      	ble.n	801f842 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 801f7d0:	f1bc 0f00 	cmp.w	ip, #0
 801f7d4:	db33      	blt.n	801f83e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 801f7d6:	4563      	cmp	r3, ip
 801f7d8:	dd31      	ble.n	801f83e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 801f7da:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801f7de:	f11c 0601 	adds.w	r6, ip, #1
 801f7e2:	d431      	bmi.n	801f848 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801f7e4:	42b3      	cmp	r3, r6
 801f7e6:	dd2f      	ble.n	801f848 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801f7e8:	b375      	cbz	r5, 801f848 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801f7ea:	f8de 6004 	ldr.w	r6, [lr, #4]
 801f7ee:	3401      	adds	r4, #1
 801f7f0:	d42e      	bmi.n	801f850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801f7f2:	45a0      	cmp	r8, r4
 801f7f4:	dd2c      	ble.n	801f850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801f7f6:	b35f      	cbz	r7, 801f850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801f7f8:	f1bc 0f00 	cmp.w	ip, #0
 801f7fc:	db26      	blt.n	801f84c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 801f7fe:	4563      	cmp	r3, ip
 801f800:	dd24      	ble.n	801f84c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 801f802:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801f806:	f11c 0c01 	adds.w	ip, ip, #1
 801f80a:	d405      	bmi.n	801f818 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f80c:	4563      	cmp	r3, ip
 801f80e:	dd03      	ble.n	801f818 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f810:	b115      	cbz	r5, 801f818 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f812:	3301      	adds	r3, #1
 801f814:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801f818:	2d0f      	cmp	r5, #15
 801f81a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f81e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f822:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f826:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f82a:	d801      	bhi.n	801f830 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 801f82c:	2f0f      	cmp	r7, #15
 801f82e:	d911      	bls.n	801f854 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 801f830:	4b77      	ldr	r3, [pc, #476]	; (801fa10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 801f832:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f836:	4a77      	ldr	r2, [pc, #476]	; (801fa14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 801f838:	4877      	ldr	r0, [pc, #476]	; (801fa18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 801f83a:	f003 f831 	bl	80228a0 <__assert_func>
 801f83e:	4602      	mov	r2, r0
 801f840:	e7cd      	b.n	801f7de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 801f842:	4606      	mov	r6, r0
 801f844:	4602      	mov	r2, r0
 801f846:	e7d2      	b.n	801f7ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 801f848:	4606      	mov	r6, r0
 801f84a:	e7d0      	b.n	801f7ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 801f84c:	4604      	mov	r4, r0
 801f84e:	e7da      	b.n	801f806 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 801f850:	4604      	mov	r4, r0
 801f852:	e7e1      	b.n	801f818 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f854:	b2ab      	uxth	r3, r5
 801f856:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f85a:	b2bf      	uxth	r7, r7
 801f85c:	fb03 fe07 	mul.w	lr, r3, r7
 801f860:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801f864:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801f868:	eba3 0c0e 	sub.w	ip, r3, lr
 801f86c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801f870:	b2bf      	uxth	r7, r7
 801f872:	fa1f fc8c 	uxth.w	ip, ip
 801f876:	eba5 0507 	sub.w	r5, r5, r7
 801f87a:	fb0c f30a 	mul.w	r3, ip, sl
 801f87e:	b2ad      	uxth	r5, r5
 801f880:	fb05 330b 	mla	r3, r5, fp, r3
 801f884:	fb07 3309 	mla	r3, r7, r9, r3
 801f888:	fb0e 3308 	mla	r3, lr, r8, r3
 801f88c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f890:	9303      	str	r3, [sp, #12]
 801f892:	d018      	beq.n	801f8c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 801f894:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f898:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f89c:	fb0b f303 	mul.w	r3, fp, r3
 801f8a0:	fb0b fb02 	mul.w	fp, fp, r2
 801f8a4:	0a1a      	lsrs	r2, r3, #8
 801f8a6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801f8aa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f8ae:	441a      	add	r2, r3
 801f8b0:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801f8b4:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801f8b8:	0a12      	lsrs	r2, r2, #8
 801f8ba:	0a1b      	lsrs	r3, r3, #8
 801f8bc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f8c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f8c4:	431a      	orrs	r2, r3
 801f8c6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f8ca:	d019      	beq.n	801f900 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 801f8cc:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801f8d0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f8d4:	fb0a fb0b 	mul.w	fp, sl, fp
 801f8d8:	fb0a fa06 	mul.w	sl, sl, r6
 801f8dc:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801f8e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f8e4:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801f8e8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f8ec:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f8f0:	445e      	add	r6, fp
 801f8f2:	0a1b      	lsrs	r3, r3, #8
 801f8f4:	0a36      	lsrs	r6, r6, #8
 801f8f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f8fa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f8fe:	431e      	orrs	r6, r3
 801f900:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f904:	d019      	beq.n	801f93a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 801f906:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801f90a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f90e:	fb09 fa0a 	mul.w	sl, r9, sl
 801f912:	fb09 f904 	mul.w	r9, r9, r4
 801f916:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801f91a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f91e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801f922:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f926:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801f92a:	4454      	add	r4, sl
 801f92c:	0a1b      	lsrs	r3, r3, #8
 801f92e:	0a24      	lsrs	r4, r4, #8
 801f930:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f934:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f938:	431c      	orrs	r4, r3
 801f93a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f93e:	d019      	beq.n	801f974 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 801f940:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801f944:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f948:	fb08 f909 	mul.w	r9, r8, r9
 801f94c:	fb08 f800 	mul.w	r8, r8, r0
 801f950:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801f954:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801f958:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801f95c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f960:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801f964:	4448      	add	r0, r9
 801f966:	0a1b      	lsrs	r3, r3, #8
 801f968:	0a00      	lsrs	r0, r0, #8
 801f96a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f96e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f972:	4318      	orrs	r0, r3
 801f974:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801f978:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f97c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f980:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f984:	fb0c f808 	mul.w	r8, ip, r8
 801f988:	fb0c f606 	mul.w	r6, ip, r6
 801f98c:	fb05 8803 	mla	r8, r5, r3, r8
 801f990:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801f994:	fb05 6202 	mla	r2, r5, r2, r6
 801f998:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f99c:	fb07 8803 	mla	r8, r7, r3, r8
 801f9a0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801f9a4:	fb07 2704 	mla	r7, r7, r4, r2
 801f9a8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f9ac:	fb0e 8303 	mla	r3, lr, r3, r8
 801f9b0:	fb0e 7e00 	mla	lr, lr, r0, r7
 801f9b4:	9802      	ldr	r0, [sp, #8]
 801f9b6:	0a1b      	lsrs	r3, r3, #8
 801f9b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f9bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f9c0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f9c4:	ea43 0e0e 	orr.w	lr, r3, lr
 801f9c8:	9b03      	ldr	r3, [sp, #12]
 801f9ca:	43db      	mvns	r3, r3
 801f9cc:	b2db      	uxtb	r3, r3
 801f9ce:	4358      	muls	r0, r3
 801f9d0:	1c42      	adds	r2, r0, #1
 801f9d2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f9d6:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801f9da:	700a      	strb	r2, [r1, #0]
 801f9dc:	9a01      	ldr	r2, [sp, #4]
 801f9de:	435a      	muls	r2, r3
 801f9e0:	1c50      	adds	r0, r2, #1
 801f9e2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801f9e6:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801f9ea:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f9ee:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f9f2:	704a      	strb	r2, [r1, #1]
 801f9f4:	9a00      	ldr	r2, [sp, #0]
 801f9f6:	435a      	muls	r2, r3
 801f9f8:	4613      	mov	r3, r2
 801f9fa:	3201      	adds	r2, #1
 801f9fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fa00:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801fa04:	f881 e002 	strb.w	lr, [r1, #2]
 801fa08:	b005      	add	sp, #20
 801fa0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa0e:	bf00      	nop
 801fa10:	08027073 	.word	0x08027073
 801fa14:	0802756a 	.word	0x0802756a
 801fa18:	0802713c 	.word	0x0802713c

0801fa1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa20:	ed2d 8b08 	vpush	{d8-d11}
 801fa24:	b097      	sub	sp, #92	; 0x5c
 801fa26:	eeb0 aa40 	vmov.f32	s20, s0
 801fa2a:	eef0 9a60 	vmov.f32	s19, s1
 801fa2e:	9306      	str	r3, [sp, #24]
 801fa30:	eeb0 9a41 	vmov.f32	s18, s2
 801fa34:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 801fa38:	eeb0 8a62 	vmov.f32	s16, s5
 801fa3c:	9214      	str	r2, [sp, #80]	; 0x50
 801fa3e:	eef0 8a43 	vmov.f32	s17, s6
 801fa42:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fa44:	eef0 ba44 	vmov.f32	s23, s8
 801fa48:	9307      	str	r3, [sp, #28]
 801fa4a:	eeb0 ba64 	vmov.f32	s22, s9
 801fa4e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801fa52:	eef0 aa45 	vmov.f32	s21, s10
 801fa56:	9015      	str	r0, [sp, #84]	; 0x54
 801fa58:	9112      	str	r1, [sp, #72]	; 0x48
 801fa5a:	6850      	ldr	r0, [r2, #4]
 801fa5c:	9310      	str	r3, [sp, #64]	; 0x40
 801fa5e:	6812      	ldr	r2, [r2, #0]
 801fa60:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801fa62:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801fa66:	fb00 1303 	mla	r3, r0, r3, r1
 801fa6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa6e:	18d3      	adds	r3, r2, r3
 801fa70:	930a      	str	r3, [sp, #40]	; 0x28
 801fa72:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801fa74:	681b      	ldr	r3, [r3, #0]
 801fa76:	9311      	str	r3, [sp, #68]	; 0x44
 801fa78:	9b07      	ldr	r3, [sp, #28]
 801fa7a:	009b      	lsls	r3, r3, #2
 801fa7c:	930e      	str	r3, [sp, #56]	; 0x38
 801fa7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	dc03      	bgt.n	801fa8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801fa84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fa86:	2b00      	cmp	r3, #0
 801fa88:	f340 832e 	ble.w	80200e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801fa8c:	9b06      	ldr	r3, [sp, #24]
 801fa8e:	2b00      	cmp	r3, #0
 801fa90:	f340 8186 	ble.w	801fda0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 801fa94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fa96:	1423      	asrs	r3, r4, #16
 801fa98:	1412      	asrs	r2, r2, #16
 801fa9a:	d42f      	bmi.n	801fafc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801fa9c:	1c51      	adds	r1, r2, #1
 801fa9e:	9807      	ldr	r0, [sp, #28]
 801faa0:	4288      	cmp	r0, r1
 801faa2:	dd2e      	ble.n	801fb02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801faa4:	2b00      	cmp	r3, #0
 801faa6:	db2c      	blt.n	801fb02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801faa8:	1c59      	adds	r1, r3, #1
 801faaa:	9810      	ldr	r0, [sp, #64]	; 0x40
 801faac:	4288      	cmp	r0, r1
 801faae:	dd28      	ble.n	801fb02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801fab0:	9b06      	ldr	r3, [sp, #24]
 801fab2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fab4:	3b01      	subs	r3, #1
 801fab6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801fab8:	fb02 1203 	mla	r2, r2, r3, r1
 801fabc:	1412      	asrs	r2, r2, #16
 801fabe:	d42b      	bmi.n	801fb18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fac0:	3201      	adds	r2, #1
 801fac2:	9907      	ldr	r1, [sp, #28]
 801fac4:	4291      	cmp	r1, r2
 801fac6:	dd27      	ble.n	801fb18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fac8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801faca:	fb02 4303 	mla	r3, r2, r3, r4
 801face:	141b      	asrs	r3, r3, #16
 801fad0:	d422      	bmi.n	801fb18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fad2:	3301      	adds	r3, #1
 801fad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fad6:	429a      	cmp	r2, r3
 801fad8:	dd1e      	ble.n	801fb18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fadc:	f8dd b018 	ldr.w	fp, [sp, #24]
 801fae0:	1cdd      	adds	r5, r3, #3
 801fae2:	f1bb 0f00 	cmp.w	fp, #0
 801fae6:	f300 81c4 	bgt.w	801fe72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801faea:	9b06      	ldr	r3, [sp, #24]
 801faec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801faf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801faf2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801faf6:	4423      	add	r3, r4
 801faf8:	930a      	str	r3, [sp, #40]	; 0x28
 801fafa:	e153      	b.n	801fda4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 801fafc:	1c51      	adds	r1, r2, #1
 801fafe:	f040 8142 	bne.w	801fd86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801fb02:	9907      	ldr	r1, [sp, #28]
 801fb04:	428a      	cmp	r2, r1
 801fb06:	f280 813e 	bge.w	801fd86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801fb0a:	1c5a      	adds	r2, r3, #1
 801fb0c:	f2c0 813b 	blt.w	801fd86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801fb10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fb12:	4293      	cmp	r3, r2
 801fb14:	f280 8137 	bge.w	801fd86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801fb18:	9b06      	ldr	r3, [sp, #24]
 801fb1a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801fb1c:	9313      	str	r3, [sp, #76]	; 0x4c
 801fb1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	dde2      	ble.n	801faea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 801fb24:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801fb26:	1423      	asrs	r3, r4, #16
 801fb28:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fb2a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801fb2e:	1409      	asrs	r1, r1, #16
 801fb30:	f3c2 3203 	ubfx	r2, r2, #12, #4
 801fb34:	f100 8187 	bmi.w	801fe46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 801fb38:	1c4e      	adds	r6, r1, #1
 801fb3a:	9f07      	ldr	r7, [sp, #28]
 801fb3c:	42b7      	cmp	r7, r6
 801fb3e:	f340 8184 	ble.w	801fe4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	f2c0 8181 	blt.w	801fe4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801fb48:	1c5e      	adds	r6, r3, #1
 801fb4a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801fb4c:	42b7      	cmp	r7, r6
 801fb4e:	f340 817c 	ble.w	801fe4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801fb52:	9e07      	ldr	r6, [sp, #28]
 801fb54:	fb03 1306 	mla	r3, r3, r6, r1
 801fb58:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fb5a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801fb5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801fb62:	0e1f      	lsrs	r7, r3, #24
 801fb64:	2a00      	cmp	r2, #0
 801fb66:	f000 815c 	beq.w	801fe22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801fb6a:	6871      	ldr	r1, [r6, #4]
 801fb6c:	910b      	str	r1, [sp, #44]	; 0x2c
 801fb6e:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801fb72:	2800      	cmp	r0, #0
 801fb74:	f000 815e 	beq.w	801fe34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 801fb78:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fb7a:	eb06 0c01 	add.w	ip, r6, r1
 801fb7e:	5876      	ldr	r6, [r6, r1]
 801fb80:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801fb84:	ea4f 6916 	mov.w	r9, r6, lsr #24
 801fb88:	9608      	str	r6, [sp, #32]
 801fb8a:	0e0e      	lsrs	r6, r1, #24
 801fb8c:	910c      	str	r1, [sp, #48]	; 0x30
 801fb8e:	b292      	uxth	r2, r2
 801fb90:	b280      	uxth	r0, r0
 801fb92:	fb02 fa00 	mul.w	sl, r2, r0
 801fb96:	0112      	lsls	r2, r2, #4
 801fb98:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fb9c:	eba2 080a 	sub.w	r8, r2, sl
 801fba0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801fba4:	b280      	uxth	r0, r0
 801fba6:	fa1f f888 	uxth.w	r8, r8
 801fbaa:	1a09      	subs	r1, r1, r0
 801fbac:	fb08 f20e 	mul.w	r2, r8, lr
 801fbb0:	b289      	uxth	r1, r1
 801fbb2:	fb01 2207 	mla	r2, r1, r7, r2
 801fbb6:	fb00 2209 	mla	r2, r0, r9, r2
 801fbba:	fb0a 2206 	mla	r2, sl, r6, r2
 801fbbe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fbc2:	2a00      	cmp	r2, #0
 801fbc4:	f000 80d4 	beq.w	801fd70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801fbc8:	2fff      	cmp	r7, #255	; 0xff
 801fbca:	d01a      	beq.n	801fc02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 801fbcc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fbd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fbd4:	fb07 fc0c 	mul.w	ip, r7, ip
 801fbd8:	435f      	muls	r7, r3
 801fbda:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801fbde:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fbe2:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801fbe6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fbea:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801fbee:	4463      	add	r3, ip
 801fbf0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801fbf4:	0a1b      	lsrs	r3, r3, #8
 801fbf6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801fbfa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fbfe:	ea43 030b 	orr.w	r3, r3, fp
 801fc02:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fc06:	d01e      	beq.n	801fc46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 801fc08:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fc0a:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801fc0e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fc12:	fb0e fb0b 	mul.w	fp, lr, fp
 801fc16:	fb0e fe07 	mul.w	lr, lr, r7
 801fc1a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801fc1e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fc22:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801fc26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fc2a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801fc2e:	44dc      	add	ip, fp
 801fc30:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fc34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc38:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fc3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fc40:	ea4c 070e 	orr.w	r7, ip, lr
 801fc44:	970b      	str	r7, [sp, #44]	; 0x2c
 801fc46:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fc4a:	d01e      	beq.n	801fc8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 801fc4c:	9f08      	ldr	r7, [sp, #32]
 801fc4e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801fc52:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fc56:	fb09 fe0e 	mul.w	lr, r9, lr
 801fc5a:	fb09 f907 	mul.w	r9, r9, r7
 801fc5e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fc62:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fc66:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801fc6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fc6e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801fc72:	44f4      	add	ip, lr
 801fc74:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fc78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc7c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fc80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fc84:	ea4c 0709 	orr.w	r7, ip, r9
 801fc88:	9708      	str	r7, [sp, #32]
 801fc8a:	2eff      	cmp	r6, #255	; 0xff
 801fc8c:	d01c      	beq.n	801fcc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801fc8e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fc90:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801fc94:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fc98:	fb06 fe0e 	mul.w	lr, r6, lr
 801fc9c:	437e      	muls	r6, r7
 801fc9e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fca2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fca6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801fcaa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fcae:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801fcb2:	44f4      	add	ip, lr
 801fcb4:	0a36      	lsrs	r6, r6, #8
 801fcb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fcba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fcbe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fcc2:	ea4c 0606 	orr.w	r6, ip, r6
 801fcc6:	960c      	str	r6, [sp, #48]	; 0x30
 801fcc8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801fcca:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fcce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fcd2:	2aff      	cmp	r2, #255	; 0xff
 801fcd4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fcd8:	fb08 f606 	mul.w	r6, r8, r6
 801fcdc:	fb01 6607 	mla	r6, r1, r7, r6
 801fce0:	9f08      	ldr	r7, [sp, #32]
 801fce2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fce6:	fb00 6607 	mla	r6, r0, r7, r6
 801fcea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fcec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fcf0:	fb0a 6607 	mla	r6, sl, r7, r6
 801fcf4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fcf6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fcfa:	ea4f 2616 	mov.w	r6, r6, lsr #8
 801fcfe:	fb08 f807 	mul.w	r8, r8, r7
 801fd02:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fd06:	fb01 8303 	mla	r3, r1, r3, r8
 801fd0a:	9908      	ldr	r1, [sp, #32]
 801fd0c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801fd10:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fd12:	fb00 330c 	mla	r3, r0, ip, r3
 801fd16:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801fd1a:	fb0a 3a00 	mla	sl, sl, r0, r3
 801fd1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fd26:	ea46 060a 	orr.w	r6, r6, sl
 801fd2a:	b2f0      	uxtb	r0, r6
 801fd2c:	f3c6 2107 	ubfx	r1, r6, #8, #8
 801fd30:	ea4f 4616 	mov.w	r6, r6, lsr #16
 801fd34:	f000 8084 	beq.w	801fe40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 801fd38:	43d2      	mvns	r2, r2
 801fd3a:	782b      	ldrb	r3, [r5, #0]
 801fd3c:	b2d2      	uxtb	r2, r2
 801fd3e:	fb03 f702 	mul.w	r7, r3, r2
 801fd42:	1c7b      	adds	r3, r7, #1
 801fd44:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801fd48:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fd4c:	702b      	strb	r3, [r5, #0]
 801fd4e:	786b      	ldrb	r3, [r5, #1]
 801fd50:	fb03 f002 	mul.w	r0, r3, r2
 801fd54:	1c43      	adds	r3, r0, #1
 801fd56:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801fd5a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801fd5e:	706b      	strb	r3, [r5, #1]
 801fd60:	78ab      	ldrb	r3, [r5, #2]
 801fd62:	4353      	muls	r3, r2
 801fd64:	1c5a      	adds	r2, r3, #1
 801fd66:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fd6a:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801fd6e:	70ae      	strb	r6, [r5, #2]
 801fd70:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fd72:	3503      	adds	r5, #3
 801fd74:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fd76:	4413      	add	r3, r2
 801fd78:	9329      	str	r3, [sp, #164]	; 0xa4
 801fd7a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fd7c:	441c      	add	r4, r3
 801fd7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fd80:	3b01      	subs	r3, #1
 801fd82:	9313      	str	r3, [sp, #76]	; 0x4c
 801fd84:	e6cb      	b.n	801fb1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801fd86:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fd88:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fd8a:	4413      	add	r3, r2
 801fd8c:	9329      	str	r3, [sp, #164]	; 0xa4
 801fd8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fd90:	441c      	add	r4, r3
 801fd92:	9b06      	ldr	r3, [sp, #24]
 801fd94:	3b01      	subs	r3, #1
 801fd96:	9306      	str	r3, [sp, #24]
 801fd98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd9a:	3303      	adds	r3, #3
 801fd9c:	930a      	str	r3, [sp, #40]	; 0x28
 801fd9e:	e675      	b.n	801fa8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801fda0:	f47f ae86 	bne.w	801fab0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801fda4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fda6:	2b00      	cmp	r3, #0
 801fda8:	f340 819e 	ble.w	80200e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801fdac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fdb0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fdb2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fdb6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fdba:	eef0 6a48 	vmov.f32	s13, s16
 801fdbe:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fdc2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fdc6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdca:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801fdce:	eef0 6a68 	vmov.f32	s13, s17
 801fdd2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdd6:	ee16 4a90 	vmov	r4, s13
 801fdda:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fdde:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fde2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fde6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fdea:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fdee:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fdf2:	ee18 2a10 	vmov	r2, s16
 801fdf6:	eeb0 8a47 	vmov.f32	s16, s14
 801fdfa:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdfe:	ee18 2a90 	vmov	r2, s17
 801fe02:	932b      	str	r3, [sp, #172]	; 0xac
 801fe04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe06:	eef0 8a67 	vmov.f32	s17, s15
 801fe0a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe0e:	932c      	str	r3, [sp, #176]	; 0xb0
 801fe10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fe12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fe14:	3b01      	subs	r3, #1
 801fe16:	9312      	str	r3, [sp, #72]	; 0x48
 801fe18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe1a:	bf08      	it	eq
 801fe1c:	4613      	moveq	r3, r2
 801fe1e:	9306      	str	r3, [sp, #24]
 801fe20:	e62d      	b.n	801fa7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801fe22:	b150      	cbz	r0, 801fe3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 801fe24:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fe26:	5871      	ldr	r1, [r6, r1]
 801fe28:	26ff      	movs	r6, #255	; 0xff
 801fe2a:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801fe2e:	9108      	str	r1, [sp, #32]
 801fe30:	46b6      	mov	lr, r6
 801fe32:	e6ac      	b.n	801fb8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801fe34:	26ff      	movs	r6, #255	; 0xff
 801fe36:	46b1      	mov	r9, r6
 801fe38:	e6a9      	b.n	801fb8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801fe3a:	26ff      	movs	r6, #255	; 0xff
 801fe3c:	46b1      	mov	r9, r6
 801fe3e:	e7f7      	b.n	801fe30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 801fe40:	7028      	strb	r0, [r5, #0]
 801fe42:	7069      	strb	r1, [r5, #1]
 801fe44:	e793      	b.n	801fd6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 801fe46:	1c4f      	adds	r7, r1, #1
 801fe48:	d192      	bne.n	801fd70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801fe4a:	9e07      	ldr	r6, [sp, #28]
 801fe4c:	428e      	cmp	r6, r1
 801fe4e:	dd8f      	ble.n	801fd70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801fe50:	1c5e      	adds	r6, r3, #1
 801fe52:	db8d      	blt.n	801fd70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801fe54:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fe56:	429e      	cmp	r6, r3
 801fe58:	dd8a      	ble.n	801fd70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801fe5a:	9600      	str	r6, [sp, #0]
 801fe5c:	e9cd 2003 	strd	r2, r0, [sp, #12]
 801fe60:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801fe64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fe66:	4629      	mov	r1, r5
 801fe68:	9b07      	ldr	r3, [sp, #28]
 801fe6a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fe6c:	f7ff fc8e 	bl	801f78c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801fe70:	e77e      	b.n	801fd70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801fe72:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fe74:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801fe78:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801fe7a:	9e07      	ldr	r6, [sp, #28]
 801fe7c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fe80:	1409      	asrs	r1, r1, #16
 801fe82:	1423      	asrs	r3, r4, #16
 801fe84:	fb06 1303 	mla	r3, r6, r3, r1
 801fe88:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fe8a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801fe8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801fe92:	0e1f      	lsrs	r7, r3, #24
 801fe94:	2a00      	cmp	r2, #0
 801fe96:	f000 8113 	beq.w	80200c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 801fe9a:	6871      	ldr	r1, [r6, #4]
 801fe9c:	910d      	str	r1, [sp, #52]	; 0x34
 801fe9e:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801fea2:	2800      	cmp	r0, #0
 801fea4:	f000 8115 	beq.w	80200d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 801fea8:	990e      	ldr	r1, [sp, #56]	; 0x38
 801feaa:	eb06 0c01 	add.w	ip, r6, r1
 801feae:	5876      	ldr	r6, [r6, r1]
 801feb0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801feb4:	ea4f 6916 	mov.w	r9, r6, lsr #24
 801feb8:	9609      	str	r6, [sp, #36]	; 0x24
 801feba:	0e0e      	lsrs	r6, r1, #24
 801febc:	910f      	str	r1, [sp, #60]	; 0x3c
 801febe:	b292      	uxth	r2, r2
 801fec0:	b280      	uxth	r0, r0
 801fec2:	fb02 fa00 	mul.w	sl, r2, r0
 801fec6:	0112      	lsls	r2, r2, #4
 801fec8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fecc:	eba2 080a 	sub.w	r8, r2, sl
 801fed0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801fed4:	b280      	uxth	r0, r0
 801fed6:	fa1f f888 	uxth.w	r8, r8
 801feda:	1a09      	subs	r1, r1, r0
 801fedc:	fb08 f20e 	mul.w	r2, r8, lr
 801fee0:	b289      	uxth	r1, r1
 801fee2:	fb01 2207 	mla	r2, r1, r7, r2
 801fee6:	fb00 2209 	mla	r2, r0, r9, r2
 801feea:	fb0a 2206 	mla	r2, sl, r6, r2
 801feee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fef2:	2a00      	cmp	r2, #0
 801fef4:	f000 80da 	beq.w	80200ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 801fef8:	2fff      	cmp	r7, #255	; 0xff
 801fefa:	d01a      	beq.n	801ff32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 801fefc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ff00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff04:	fb07 fc0c 	mul.w	ip, r7, ip
 801ff08:	435f      	muls	r7, r3
 801ff0a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ff0e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ff12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ff16:	4463      	add	r3, ip
 801ff18:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801ff1c:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801ff20:	0a1b      	lsrs	r3, r3, #8
 801ff22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff26:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ff2a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ff2e:	ea43 030c 	orr.w	r3, r3, ip
 801ff32:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ff36:	d021      	beq.n	801ff7c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 801ff38:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ff3a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ff3e:	fb0e f707 	mul.w	r7, lr, r7
 801ff42:	9713      	str	r7, [sp, #76]	; 0x4c
 801ff44:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ff46:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801ff4a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801ff4c:	fb0e fe0c 	mul.w	lr, lr, ip
 801ff50:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff54:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ff58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff5c:	44bc      	add	ip, r7
 801ff5e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801ff62:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801ff66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ff6e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff72:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ff76:	ea4c 070e 	orr.w	r7, ip, lr
 801ff7a:	970d      	str	r7, [sp, #52]	; 0x34
 801ff7c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ff80:	d01e      	beq.n	801ffc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 801ff82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ff84:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801ff88:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ff8c:	fb09 fe0e 	mul.w	lr, r9, lr
 801ff90:	fb09 f907 	mul.w	r9, r9, r7
 801ff94:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ff98:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ff9c:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801ffa0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffa4:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ffa8:	44f4      	add	ip, lr
 801ffaa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ffae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffb2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ffb6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffba:	ea4c 0709 	orr.w	r7, ip, r9
 801ffbe:	9709      	str	r7, [sp, #36]	; 0x24
 801ffc0:	2eff      	cmp	r6, #255	; 0xff
 801ffc2:	d01c      	beq.n	801fffe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 801ffc4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ffc6:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801ffca:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ffce:	fb06 fe0e 	mul.w	lr, r6, lr
 801ffd2:	437e      	muls	r6, r7
 801ffd4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ffd8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ffdc:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801ffe0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffe4:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801ffe8:	44f4      	add	ip, lr
 801ffea:	0a36      	lsrs	r6, r6, #8
 801ffec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fff0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fff4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fff8:	ea4c 0606 	orr.w	r6, ip, r6
 801fffc:	960f      	str	r6, [sp, #60]	; 0x3c
 801fffe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8020000:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020004:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020008:	2aff      	cmp	r2, #255	; 0xff
 802000a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802000e:	fb08 f606 	mul.w	r6, r8, r6
 8020012:	fb01 6607 	mla	r6, r1, r7, r6
 8020016:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020018:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802001c:	fb00 6607 	mla	r6, r0, r7, r6
 8020020:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020022:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020026:	fb0a 6607 	mla	r6, sl, r7, r6
 802002a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802002c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020030:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8020034:	fb08 f807 	mul.w	r8, r8, r7
 8020038:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802003c:	fb01 8303 	mla	r3, r1, r3, r8
 8020040:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020042:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8020046:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020048:	fb00 330c 	mla	r3, r0, ip, r3
 802004c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8020050:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8020054:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020058:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802005c:	ea46 060e 	orr.w	r6, r6, lr
 8020060:	b2f0      	uxtb	r0, r6
 8020062:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8020066:	ea4f 4616 	mov.w	r6, r6, lsr #16
 802006a:	d038      	beq.n	80200de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 802006c:	43d2      	mvns	r2, r2
 802006e:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8020072:	b2d2      	uxtb	r2, r2
 8020074:	4357      	muls	r7, r2
 8020076:	1c7b      	adds	r3, r7, #1
 8020078:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802007c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020080:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8020084:	4350      	muls	r0, r2
 8020086:	f805 3c03 	strb.w	r3, [r5, #-3]
 802008a:	1c43      	adds	r3, r0, #1
 802008c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020090:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020094:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020098:	4353      	muls	r3, r2
 802009a:	f805 1c02 	strb.w	r1, [r5, #-2]
 802009e:	1c5a      	adds	r2, r3, #1
 80200a0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80200a4:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80200a8:	f805 6c01 	strb.w	r6, [r5, #-1]
 80200ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80200ae:	3503      	adds	r5, #3
 80200b0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80200b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80200b6:	4413      	add	r3, r2
 80200b8:	9329      	str	r3, [sp, #164]	; 0xa4
 80200ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80200bc:	441c      	add	r4, r3
 80200be:	e510      	b.n	801fae2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 80200c0:	b150      	cbz	r0, 80200d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 80200c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80200c4:	5871      	ldr	r1, [r6, r1]
 80200c6:	26ff      	movs	r6, #255	; 0xff
 80200c8:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80200cc:	9109      	str	r1, [sp, #36]	; 0x24
 80200ce:	46b6      	mov	lr, r6
 80200d0:	e6f5      	b.n	801febe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80200d2:	26ff      	movs	r6, #255	; 0xff
 80200d4:	46b1      	mov	r9, r6
 80200d6:	e6f2      	b.n	801febe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80200d8:	26ff      	movs	r6, #255	; 0xff
 80200da:	46b1      	mov	r9, r6
 80200dc:	e7f7      	b.n	80200ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 80200de:	f805 0c03 	strb.w	r0, [r5, #-3]
 80200e2:	f805 1c02 	strb.w	r1, [r5, #-2]
 80200e6:	e7df      	b.n	80200a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 80200e8:	b017      	add	sp, #92	; 0x5c
 80200ea:	ecbd 8b08 	vpop	{d8-d11}
 80200ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080200f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80200f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200f8:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80200fc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8020100:	2800      	cmp	r0, #0
 8020102:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8020106:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802010a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802010e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8020112:	db6b      	blt.n	80201ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020114:	4580      	cmp	r8, r0
 8020116:	dd69      	ble.n	80201ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020118:	f1bc 0f00 	cmp.w	ip, #0
 802011c:	db66      	blt.n	80201ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802011e:	45e1      	cmp	r9, ip
 8020120:	dd64      	ble.n	80201ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020122:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8020126:	f01e 0f01 	tst.w	lr, #1
 802012a:	5d16      	ldrb	r6, [r2, r4]
 802012c:	bf0c      	ite	eq
 802012e:	f006 060f 	andeq.w	r6, r6, #15
 8020132:	1136      	asrne	r6, r6, #4
 8020134:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020138:	b2f6      	uxtb	r6, r6
 802013a:	f110 0a01 	adds.w	sl, r0, #1
 802013e:	d457      	bmi.n	80201f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020140:	45d0      	cmp	r8, sl
 8020142:	dd55      	ble.n	80201f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020144:	f1bc 0f00 	cmp.w	ip, #0
 8020148:	db52      	blt.n	80201f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802014a:	45e1      	cmp	r9, ip
 802014c:	dd50      	ble.n	80201f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802014e:	2f00      	cmp	r7, #0
 8020150:	f000 80ac 	beq.w	80202ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8020154:	f10e 0b01 	add.w	fp, lr, #1
 8020158:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802015c:	f01b 0f01 	tst.w	fp, #1
 8020160:	5d14      	ldrb	r4, [r2, r4]
 8020162:	bf0c      	ite	eq
 8020164:	f004 040f 	andeq.w	r4, r4, #15
 8020168:	1124      	asrne	r4, r4, #4
 802016a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802016e:	b2e4      	uxtb	r4, r4
 8020170:	2d00      	cmp	r5, #0
 8020172:	f000 8096 	beq.w	80202a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8020176:	2800      	cmp	r0, #0
 8020178:	f10c 0c01 	add.w	ip, ip, #1
 802017c:	db3c      	blt.n	80201f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802017e:	4580      	cmp	r8, r0
 8020180:	dd3a      	ble.n	80201f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8020182:	f1bc 0f00 	cmp.w	ip, #0
 8020186:	db37      	blt.n	80201f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8020188:	45e1      	cmp	r9, ip
 802018a:	dd35      	ble.n	80201f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802018c:	eb03 0b0e 	add.w	fp, r3, lr
 8020190:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8020194:	f01b 0f01 	tst.w	fp, #1
 8020198:	5c10      	ldrb	r0, [r2, r0]
 802019a:	bf0c      	ite	eq
 802019c:	f000 000f 	andeq.w	r0, r0, #15
 80201a0:	1100      	asrne	r0, r0, #4
 80201a2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80201a6:	b2c0      	uxtb	r0, r0
 80201a8:	f1ba 0f00 	cmp.w	sl, #0
 80201ac:	db26      	blt.n	80201fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80201ae:	45d0      	cmp	r8, sl
 80201b0:	dd24      	ble.n	80201fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80201b2:	f1bc 0f00 	cmp.w	ip, #0
 80201b6:	db21      	blt.n	80201fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80201b8:	45e1      	cmp	r9, ip
 80201ba:	dd1f      	ble.n	80201fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80201bc:	b307      	cbz	r7, 8020200 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 80201be:	3301      	adds	r3, #1
 80201c0:	449e      	add	lr, r3
 80201c2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80201c6:	f01e 0f01 	tst.w	lr, #1
 80201ca:	5cd3      	ldrb	r3, [r2, r3]
 80201cc:	bf0c      	ite	eq
 80201ce:	f003 030f 	andeq.w	r3, r3, #15
 80201d2:	111b      	asrne	r3, r3, #4
 80201d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80201d8:	b2db      	uxtb	r3, r3
 80201da:	2f0f      	cmp	r7, #15
 80201dc:	d911      	bls.n	8020202 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 80201de:	4b35      	ldr	r3, [pc, #212]	; (80202b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 80201e0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80201e4:	4a34      	ldr	r2, [pc, #208]	; (80202b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 80201e6:	4835      	ldr	r0, [pc, #212]	; (80202bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 80201e8:	f002 fb5a 	bl	80228a0 <__assert_func>
 80201ec:	2600      	movs	r6, #0
 80201ee:	e7a4      	b.n	802013a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 80201f0:	2400      	movs	r4, #0
 80201f2:	e7bd      	b.n	8020170 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 80201f4:	463c      	mov	r4, r7
 80201f6:	e7be      	b.n	8020176 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 80201f8:	2000      	movs	r0, #0
 80201fa:	e7d5      	b.n	80201a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 80201fc:	2300      	movs	r3, #0
 80201fe:	e7ec      	b.n	80201da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8020200:	463b      	mov	r3, r7
 8020202:	2d0f      	cmp	r5, #15
 8020204:	d8eb      	bhi.n	80201de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8020206:	b2bf      	uxth	r7, r7
 8020208:	b2ad      	uxth	r5, r5
 802020a:	fb07 f205 	mul.w	r2, r7, r5
 802020e:	013f      	lsls	r7, r7, #4
 8020210:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8020214:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8020218:	1abf      	subs	r7, r7, r2
 802021a:	b2ad      	uxth	r5, r5
 802021c:	b2bf      	uxth	r7, r7
 802021e:	ebac 0c05 	sub.w	ip, ip, r5
 8020222:	437c      	muls	r4, r7
 8020224:	fa1f fc8c 	uxth.w	ip, ip
 8020228:	fb06 440c 	mla	r4, r6, ip, r4
 802022c:	fb05 4400 	mla	r4, r5, r0, r4
 8020230:	fb02 4203 	mla	r2, r2, r3, r4
 8020234:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020238:	b38a      	cbz	r2, 802029e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 802023a:	4b21      	ldr	r3, [pc, #132]	; (80202c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 802023c:	681c      	ldr	r4, [r3, #0]
 802023e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8020242:	b2e5      	uxtb	r5, r4
 8020244:	4353      	muls	r3, r2
 8020246:	1c5a      	adds	r2, r3, #1
 8020248:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802024c:	1212      	asrs	r2, r2, #8
 802024e:	b290      	uxth	r0, r2
 8020250:	43d2      	mvns	r2, r2
 8020252:	fb15 f500 	smulbb	r5, r5, r0
 8020256:	b2d3      	uxtb	r3, r2
 8020258:	780a      	ldrb	r2, [r1, #0]
 802025a:	fb02 5203 	mla	r2, r2, r3, r5
 802025e:	b292      	uxth	r2, r2
 8020260:	1c55      	adds	r5, r2, #1
 8020262:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020266:	784d      	ldrb	r5, [r1, #1]
 8020268:	fb15 f503 	smulbb	r5, r5, r3
 802026c:	1212      	asrs	r2, r2, #8
 802026e:	700a      	strb	r2, [r1, #0]
 8020270:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020274:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8020278:	fb02 5200 	mla	r2, r2, r0, r5
 802027c:	b292      	uxth	r2, r2
 802027e:	1c55      	adds	r5, r2, #1
 8020280:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020284:	1212      	asrs	r2, r2, #8
 8020286:	704a      	strb	r2, [r1, #1]
 8020288:	788a      	ldrb	r2, [r1, #2]
 802028a:	fb12 f303 	smulbb	r3, r2, r3
 802028e:	fb04 3300 	mla	r3, r4, r0, r3
 8020292:	b29b      	uxth	r3, r3
 8020294:	1c5a      	adds	r2, r3, #1
 8020296:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802029a:	121b      	asrs	r3, r3, #8
 802029c:	708b      	strb	r3, [r1, #2]
 802029e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202a2:	2f0f      	cmp	r7, #15
 80202a4:	d89b      	bhi.n	80201de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80202a6:	462b      	mov	r3, r5
 80202a8:	4628      	mov	r0, r5
 80202aa:	e7ac      	b.n	8020206 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80202ac:	2d00      	cmp	r5, #0
 80202ae:	d1a1      	bne.n	80201f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80202b0:	462c      	mov	r4, r5
 80202b2:	e7f8      	b.n	80202a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 80202b4:	08027073 	.word	0x08027073
 80202b8:	0802756a 	.word	0x0802756a
 80202bc:	0802713c 	.word	0x0802713c
 80202c0:	2000b490 	.word	0x2000b490

080202c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80202c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202c8:	ed2d 8b08 	vpush	{d8-d11}
 80202cc:	b097      	sub	sp, #92	; 0x5c
 80202ce:	eeb0 aa40 	vmov.f32	s20, s0
 80202d2:	eef0 9a60 	vmov.f32	s19, s1
 80202d6:	9308      	str	r3, [sp, #32]
 80202d8:	eeb0 9a41 	vmov.f32	s18, s2
 80202dc:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80202e0:	eeb0 8a62 	vmov.f32	s16, s5
 80202e4:	9214      	str	r2, [sp, #80]	; 0x50
 80202e6:	eef0 8a43 	vmov.f32	s17, s6
 80202ea:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80202ec:	eef0 ba44 	vmov.f32	s23, s8
 80202f0:	9309      	str	r3, [sp, #36]	; 0x24
 80202f2:	eeb0 ba64 	vmov.f32	s22, s9
 80202f6:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80202fa:	eef0 aa45 	vmov.f32	s21, s10
 80202fe:	9015      	str	r0, [sp, #84]	; 0x54
 8020300:	910c      	str	r1, [sp, #48]	; 0x30
 8020302:	930e      	str	r3, [sp, #56]	; 0x38
 8020304:	6850      	ldr	r0, [r2, #4]
 8020306:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 802030a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802030e:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8020312:	fb00 1803 	mla	r8, r0, r3, r1
 8020316:	6813      	ldr	r3, [r2, #0]
 8020318:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802031c:	4498      	add	r8, r3
 802031e:	f10b 0301 	add.w	r3, fp, #1
 8020322:	f023 0301 	bic.w	r3, r3, #1
 8020326:	930f      	str	r3, [sp, #60]	; 0x3c
 8020328:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802032a:	681f      	ldr	r7, [r3, #0]
 802032c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802032e:	2b00      	cmp	r3, #0
 8020330:	dc03      	bgt.n	802033a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8020332:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020334:	2b00      	cmp	r3, #0
 8020336:	f340 8238 	ble.w	80207aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802033a:	9b08      	ldr	r3, [sp, #32]
 802033c:	2b00      	cmp	r3, #0
 802033e:	f340 810c 	ble.w	802055a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8020342:	142a      	asrs	r2, r5, #16
 8020344:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020348:	d42c      	bmi.n	80203a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802034a:	1c51      	adds	r1, r2, #1
 802034c:	458b      	cmp	fp, r1
 802034e:	dd2c      	ble.n	80203aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020350:	2b00      	cmp	r3, #0
 8020352:	db2a      	blt.n	80203aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020354:	1c59      	adds	r1, r3, #1
 8020356:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020358:	4288      	cmp	r0, r1
 802035a:	dd26      	ble.n	80203aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802035c:	9b08      	ldr	r3, [sp, #32]
 802035e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020360:	3b01      	subs	r3, #1
 8020362:	fb02 5203 	mla	r2, r2, r3, r5
 8020366:	1412      	asrs	r2, r2, #16
 8020368:	d429      	bmi.n	80203be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802036a:	3201      	adds	r2, #1
 802036c:	4593      	cmp	fp, r2
 802036e:	dd26      	ble.n	80203be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8020370:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020372:	fb02 6303 	mla	r3, r2, r3, r6
 8020376:	141b      	asrs	r3, r3, #16
 8020378:	d421      	bmi.n	80203be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802037a:	3301      	adds	r3, #1
 802037c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802037e:	429a      	cmp	r2, r3
 8020380:	dd1d      	ble.n	80203be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8020382:	f108 0e03 	add.w	lr, r8, #3
 8020386:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802038a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802038e:	f1b9 0f00 	cmp.w	r9, #0
 8020392:	f300 814f 	bgt.w	8020634 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8020396:	9b08      	ldr	r3, [sp, #32]
 8020398:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802039c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80203a0:	44a0      	add	r8, r4
 80203a2:	e0dc      	b.n	802055e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80203a4:	1c51      	adds	r1, r2, #1
 80203a6:	f040 80ce 	bne.w	8020546 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80203aa:	4593      	cmp	fp, r2
 80203ac:	f340 80cb 	ble.w	8020546 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80203b0:	1c5a      	adds	r2, r3, #1
 80203b2:	f2c0 80c8 	blt.w	8020546 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80203b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80203b8:	4293      	cmp	r3, r2
 80203ba:	f280 80c4 	bge.w	8020546 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80203be:	9b08      	ldr	r3, [sp, #32]
 80203c0:	46c1      	mov	r9, r8
 80203c2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80203c6:	930d      	str	r3, [sp, #52]	; 0x34
 80203c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	dde3      	ble.n	8020396 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80203ce:	1428      	asrs	r0, r5, #16
 80203d0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80203d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80203d8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80203dc:	f100 8111 	bmi.w	8020602 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 80203e0:	f100 0c01 	add.w	ip, r0, #1
 80203e4:	45e3      	cmp	fp, ip
 80203e6:	f340 810e 	ble.w	8020606 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80203ea:	2b00      	cmp	r3, #0
 80203ec:	f2c0 810b 	blt.w	8020606 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80203f0:	f103 0c01 	add.w	ip, r3, #1
 80203f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80203f6:	4564      	cmp	r4, ip
 80203f8:	f340 8105 	ble.w	8020606 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80203fc:	fb03 030a 	mla	r3, r3, sl, r0
 8020400:	0858      	lsrs	r0, r3, #1
 8020402:	07dc      	lsls	r4, r3, #31
 8020404:	5c38      	ldrb	r0, [r7, r0]
 8020406:	bf54      	ite	pl
 8020408:	f000 000f 	andpl.w	r0, r0, #15
 802040c:	1100      	asrmi	r0, r0, #4
 802040e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020412:	b2c0      	uxtb	r0, r0
 8020414:	2a00      	cmp	r2, #0
 8020416:	f000 80e1 	beq.w	80205dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 802041a:	f103 0e01 	add.w	lr, r3, #1
 802041e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8020422:	f01e 0f01 	tst.w	lr, #1
 8020426:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802042a:	bf0c      	ite	eq
 802042c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020430:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020434:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020438:	fa5f f48c 	uxtb.w	r4, ip
 802043c:	9410      	str	r4, [sp, #64]	; 0x40
 802043e:	b1f9      	cbz	r1, 8020480 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8020440:	4453      	add	r3, sl
 8020442:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020446:	07dc      	lsls	r4, r3, #31
 8020448:	f103 0301 	add.w	r3, r3, #1
 802044c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020450:	bf54      	ite	pl
 8020452:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020456:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802045a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802045e:	fa5f f48c 	uxtb.w	r4, ip
 8020462:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020466:	940a      	str	r4, [sp, #40]	; 0x28
 8020468:	07dc      	lsls	r4, r3, #31
 802046a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802046e:	bf54      	ite	pl
 8020470:	f00c 030f 	andpl.w	r3, ip, #15
 8020474:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8020478:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802047c:	b2db      	uxtb	r3, r3
 802047e:	9311      	str	r3, [sp, #68]	; 0x44
 8020480:	b292      	uxth	r2, r2
 8020482:	b289      	uxth	r1, r1
 8020484:	0113      	lsls	r3, r2, #4
 8020486:	fb02 fc01 	mul.w	ip, r2, r1
 802048a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802048c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020490:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8020494:	eba3 030c 	sub.w	r3, r3, ip
 8020498:	b289      	uxth	r1, r1
 802049a:	b29b      	uxth	r3, r3
 802049c:	ebae 0e01 	sub.w	lr, lr, r1
 80204a0:	4353      	muls	r3, r2
 80204a2:	fa1f fe8e 	uxth.w	lr, lr
 80204a6:	fb00 320e 	mla	r2, r0, lr, r3
 80204aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204ac:	fb01 2203 	mla	r2, r1, r3, r2
 80204b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80204b2:	fb0c 2203 	mla	r2, ip, r3, r2
 80204b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80204ba:	2a00      	cmp	r2, #0
 80204bc:	d039      	beq.n	8020532 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80204be:	4bbd      	ldr	r3, [pc, #756]	; (80207b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80204c0:	6819      	ldr	r1, [r3, #0]
 80204c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80204c4:	fa5f fc81 	uxtb.w	ip, r1
 80204c8:	435a      	muls	r2, r3
 80204ca:	1c53      	adds	r3, r2, #1
 80204cc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80204d0:	1212      	asrs	r2, r2, #8
 80204d2:	b290      	uxth	r0, r2
 80204d4:	43d2      	mvns	r2, r2
 80204d6:	fb1c fc00 	smulbb	ip, ip, r0
 80204da:	b2d3      	uxtb	r3, r2
 80204dc:	f899 2000 	ldrb.w	r2, [r9]
 80204e0:	fb02 c203 	mla	r2, r2, r3, ip
 80204e4:	b292      	uxth	r2, r2
 80204e6:	f102 0c01 	add.w	ip, r2, #1
 80204ea:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80204ee:	f899 c001 	ldrb.w	ip, [r9, #1]
 80204f2:	fb1c fc03 	smulbb	ip, ip, r3
 80204f6:	1212      	asrs	r2, r2, #8
 80204f8:	f889 2000 	strb.w	r2, [r9]
 80204fc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8020500:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020504:	fb02 c200 	mla	r2, r2, r0, ip
 8020508:	b292      	uxth	r2, r2
 802050a:	f102 0c01 	add.w	ip, r2, #1
 802050e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020512:	1212      	asrs	r2, r2, #8
 8020514:	f889 2001 	strb.w	r2, [r9, #1]
 8020518:	f899 2002 	ldrb.w	r2, [r9, #2]
 802051c:	fb12 f303 	smulbb	r3, r2, r3
 8020520:	fb01 3300 	mla	r3, r1, r0, r3
 8020524:	b29b      	uxth	r3, r3
 8020526:	1c5a      	adds	r2, r3, #1
 8020528:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802052c:	121b      	asrs	r3, r3, #8
 802052e:	f889 3002 	strb.w	r3, [r9, #2]
 8020532:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020534:	f109 0903 	add.w	r9, r9, #3
 8020538:	441d      	add	r5, r3
 802053a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802053c:	441e      	add	r6, r3
 802053e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020540:	3b01      	subs	r3, #1
 8020542:	930d      	str	r3, [sp, #52]	; 0x34
 8020544:	e740      	b.n	80203c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020546:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020548:	f108 0803 	add.w	r8, r8, #3
 802054c:	441d      	add	r5, r3
 802054e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020550:	441e      	add	r6, r3
 8020552:	9b08      	ldr	r3, [sp, #32]
 8020554:	3b01      	subs	r3, #1
 8020556:	9308      	str	r3, [sp, #32]
 8020558:	e6ef      	b.n	802033a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802055a:	f47f aeff 	bne.w	802035c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802055e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020560:	2b00      	cmp	r3, #0
 8020562:	f340 8122 	ble.w	80207aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8020566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802056a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802056c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020570:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020574:	eef0 6a48 	vmov.f32	s13, s16
 8020578:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802057c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020580:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020584:	ee16 5a90 	vmov	r5, s13
 8020588:	eef0 6a68 	vmov.f32	s13, s17
 802058c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020590:	ee16 6a90 	vmov	r6, s13
 8020594:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020598:	ee69 7a27 	vmul.f32	s15, s18, s15
 802059c:	ee37 8a48 	vsub.f32	s16, s14, s16
 80205a0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80205a4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80205a8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80205ac:	ee18 2a10 	vmov	r2, s16
 80205b0:	eeb0 8a47 	vmov.f32	s16, s14
 80205b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80205b8:	ee18 2a90 	vmov	r2, s17
 80205bc:	932b      	str	r3, [sp, #172]	; 0xac
 80205be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205c0:	eef0 8a67 	vmov.f32	s17, s15
 80205c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80205c8:	932c      	str	r3, [sp, #176]	; 0xb0
 80205ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80205cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80205ce:	3b01      	subs	r3, #1
 80205d0:	930c      	str	r3, [sp, #48]	; 0x30
 80205d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205d4:	bf08      	it	eq
 80205d6:	4613      	moveq	r3, r2
 80205d8:	9308      	str	r3, [sp, #32]
 80205da:	e6a7      	b.n	802032c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80205dc:	2900      	cmp	r1, #0
 80205de:	f43f af4f 	beq.w	8020480 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80205e2:	4453      	add	r3, sl
 80205e4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80205e8:	07db      	lsls	r3, r3, #31
 80205ea:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80205ee:	bf54      	ite	pl
 80205f0:	f00c 030f 	andpl.w	r3, ip, #15
 80205f4:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80205f8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80205fc:	b2db      	uxtb	r3, r3
 80205fe:	930a      	str	r3, [sp, #40]	; 0x28
 8020600:	e73e      	b.n	8020480 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8020602:	1c44      	adds	r4, r0, #1
 8020604:	d195      	bne.n	8020532 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8020606:	4583      	cmp	fp, r0
 8020608:	dd93      	ble.n	8020532 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802060a:	1c5c      	adds	r4, r3, #1
 802060c:	db91      	blt.n	8020532 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802060e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020610:	429c      	cmp	r4, r3
 8020612:	dd8e      	ble.n	8020532 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8020614:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020616:	9002      	str	r0, [sp, #8]
 8020618:	9815      	ldr	r0, [sp, #84]	; 0x54
 802061a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802061e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020620:	463a      	mov	r2, r7
 8020622:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020626:	e9cd b300 	strd	fp, r3, [sp]
 802062a:	4649      	mov	r1, r9
 802062c:	4653      	mov	r3, sl
 802062e:	f7ff fd61 	bl	80200f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8020632:	e77e      	b.n	8020532 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8020634:	142a      	asrs	r2, r5, #16
 8020636:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802063a:	1433      	asrs	r3, r6, #16
 802063c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020640:	fb0a 2303 	mla	r3, sl, r3, r2
 8020644:	085a      	lsrs	r2, r3, #1
 8020646:	07dc      	lsls	r4, r3, #31
 8020648:	5cba      	ldrb	r2, [r7, r2]
 802064a:	bf54      	ite	pl
 802064c:	f002 020f 	andpl.w	r2, r2, #15
 8020650:	1112      	asrmi	r2, r2, #4
 8020652:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020656:	b2d2      	uxtb	r2, r2
 8020658:	2900      	cmp	r1, #0
 802065a:	f000 8093 	beq.w	8020784 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 802065e:	1c5c      	adds	r4, r3, #1
 8020660:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8020664:	07e4      	lsls	r4, r4, #31
 8020666:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802066a:	bf54      	ite	pl
 802066c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020670:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020674:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020678:	fa5f f48c 	uxtb.w	r4, ip
 802067c:	9412      	str	r4, [sp, #72]	; 0x48
 802067e:	b300      	cbz	r0, 80206c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8020680:	4453      	add	r3, sl
 8020682:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020686:	07dc      	lsls	r4, r3, #31
 8020688:	f103 0301 	add.w	r3, r3, #1
 802068c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020690:	bf54      	ite	pl
 8020692:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020696:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802069a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802069e:	fa5f f48c 	uxtb.w	r4, ip
 80206a2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80206a6:	940b      	str	r4, [sp, #44]	; 0x2c
 80206a8:	07dc      	lsls	r4, r3, #31
 80206aa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80206ae:	bf54      	ite	pl
 80206b0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80206b4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80206b8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80206bc:	fa5f f38c 	uxtb.w	r3, ip
 80206c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80206c2:	b289      	uxth	r1, r1
 80206c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80206c6:	b280      	uxth	r0, r0
 80206c8:	fb01 f300 	mul.w	r3, r1, r0
 80206cc:	0109      	lsls	r1, r1, #4
 80206ce:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80206d2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80206d6:	1ac9      	subs	r1, r1, r3
 80206d8:	b280      	uxth	r0, r0
 80206da:	b289      	uxth	r1, r1
 80206dc:	ebac 0c00 	sub.w	ip, ip, r0
 80206e0:	4361      	muls	r1, r4
 80206e2:	fa1f fc8c 	uxth.w	ip, ip
 80206e6:	fb02 120c 	mla	r2, r2, ip, r1
 80206ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80206ec:	fb00 2001 	mla	r0, r0, r1, r2
 80206f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80206f2:	fb03 0302 	mla	r3, r3, r2, r0
 80206f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d039      	beq.n	8020772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 80206fe:	4a2d      	ldr	r2, [pc, #180]	; (80207b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8020700:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020704:	6810      	ldr	r0, [r2, #0]
 8020706:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020708:	fa5f fc80 	uxtb.w	ip, r0
 802070c:	4353      	muls	r3, r2
 802070e:	1c5a      	adds	r2, r3, #1
 8020710:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020714:	121b      	asrs	r3, r3, #8
 8020716:	b29a      	uxth	r2, r3
 8020718:	43db      	mvns	r3, r3
 802071a:	fb1c fc02 	smulbb	ip, ip, r2
 802071e:	b2db      	uxtb	r3, r3
 8020720:	fb01 c103 	mla	r1, r1, r3, ip
 8020724:	b289      	uxth	r1, r1
 8020726:	f101 0c01 	add.w	ip, r1, #1
 802072a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802072e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8020732:	fb1c fc03 	smulbb	ip, ip, r3
 8020736:	1209      	asrs	r1, r1, #8
 8020738:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802073c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020740:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020744:	fb01 c102 	mla	r1, r1, r2, ip
 8020748:	b289      	uxth	r1, r1
 802074a:	f101 0c01 	add.w	ip, r1, #1
 802074e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020752:	1209      	asrs	r1, r1, #8
 8020754:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8020758:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802075c:	fb11 f303 	smulbb	r3, r1, r3
 8020760:	fb00 3002 	mla	r0, r0, r2, r3
 8020764:	b280      	uxth	r0, r0
 8020766:	1c42      	adds	r2, r0, #1
 8020768:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802076c:	1200      	asrs	r0, r0, #8
 802076e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8020772:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020774:	f10e 0e03 	add.w	lr, lr, #3
 8020778:	f109 39ff 	add.w	r9, r9, #4294967295
 802077c:	441d      	add	r5, r3
 802077e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020780:	441e      	add	r6, r3
 8020782:	e604      	b.n	802038e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8020784:	2800      	cmp	r0, #0
 8020786:	d09c      	beq.n	80206c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8020788:	4453      	add	r3, sl
 802078a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802078e:	07db      	lsls	r3, r3, #31
 8020790:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020794:	bf54      	ite	pl
 8020796:	f00c 0c0f 	andpl.w	ip, ip, #15
 802079a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802079e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80207a2:	fa5f f38c 	uxtb.w	r3, ip
 80207a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80207a8:	e78b      	b.n	80206c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80207aa:	b017      	add	sp, #92	; 0x5c
 80207ac:	ecbd 8b08 	vpop	{d8-d11}
 80207b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207b4:	2000b490 	.word	0x2000b490

080207b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80207b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207bc:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80207c0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80207c4:	2800      	cmp	r0, #0
 80207c6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80207ca:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80207ce:	fb0c 0e03 	mla	lr, ip, r3, r0
 80207d2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80207d6:	db6b      	blt.n	80208b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80207d8:	4580      	cmp	r8, r0
 80207da:	dd69      	ble.n	80208b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80207dc:	f1bc 0f00 	cmp.w	ip, #0
 80207e0:	db66      	blt.n	80208b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80207e2:	45e1      	cmp	r9, ip
 80207e4:	dd64      	ble.n	80208b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80207e6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80207ea:	f01e 0f01 	tst.w	lr, #1
 80207ee:	5d16      	ldrb	r6, [r2, r4]
 80207f0:	bf0c      	ite	eq
 80207f2:	f006 060f 	andeq.w	r6, r6, #15
 80207f6:	1136      	asrne	r6, r6, #4
 80207f8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80207fc:	b2f6      	uxtb	r6, r6
 80207fe:	f110 0a01 	adds.w	sl, r0, #1
 8020802:	d457      	bmi.n	80208b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8020804:	45d0      	cmp	r8, sl
 8020806:	dd55      	ble.n	80208b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8020808:	f1bc 0f00 	cmp.w	ip, #0
 802080c:	db52      	blt.n	80208b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802080e:	45e1      	cmp	r9, ip
 8020810:	dd50      	ble.n	80208b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8020812:	2f00      	cmp	r7, #0
 8020814:	f000 80a5 	beq.w	8020962 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8020818:	f10e 0b01 	add.w	fp, lr, #1
 802081c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020820:	f01b 0f01 	tst.w	fp, #1
 8020824:	5d14      	ldrb	r4, [r2, r4]
 8020826:	bf0c      	ite	eq
 8020828:	f004 040f 	andeq.w	r4, r4, #15
 802082c:	1124      	asrne	r4, r4, #4
 802082e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020832:	b2e4      	uxtb	r4, r4
 8020834:	2d00      	cmp	r5, #0
 8020836:	f000 808f 	beq.w	8020958 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 802083a:	2800      	cmp	r0, #0
 802083c:	f10c 0c01 	add.w	ip, ip, #1
 8020840:	db3c      	blt.n	80208bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8020842:	4580      	cmp	r8, r0
 8020844:	dd3a      	ble.n	80208bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8020846:	f1bc 0f00 	cmp.w	ip, #0
 802084a:	db37      	blt.n	80208bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802084c:	45e1      	cmp	r9, ip
 802084e:	dd35      	ble.n	80208bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8020850:	eb03 0b0e 	add.w	fp, r3, lr
 8020854:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8020858:	f01b 0f01 	tst.w	fp, #1
 802085c:	5c10      	ldrb	r0, [r2, r0]
 802085e:	bf0c      	ite	eq
 8020860:	f000 000f 	andeq.w	r0, r0, #15
 8020864:	1100      	asrne	r0, r0, #4
 8020866:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802086a:	b2c0      	uxtb	r0, r0
 802086c:	f1ba 0f00 	cmp.w	sl, #0
 8020870:	db26      	blt.n	80208c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8020872:	45d0      	cmp	r8, sl
 8020874:	dd24      	ble.n	80208c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8020876:	f1bc 0f00 	cmp.w	ip, #0
 802087a:	db21      	blt.n	80208c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802087c:	45e1      	cmp	r9, ip
 802087e:	dd1f      	ble.n	80208c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8020880:	b307      	cbz	r7, 80208c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8020882:	3301      	adds	r3, #1
 8020884:	449e      	add	lr, r3
 8020886:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802088a:	f01e 0f01 	tst.w	lr, #1
 802088e:	5cd3      	ldrb	r3, [r2, r3]
 8020890:	bf0c      	ite	eq
 8020892:	f003 030f 	andeq.w	r3, r3, #15
 8020896:	111b      	asrne	r3, r3, #4
 8020898:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802089c:	b2db      	uxtb	r3, r3
 802089e:	2f0f      	cmp	r7, #15
 80208a0:	d911      	bls.n	80208c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80208a2:	4b32      	ldr	r3, [pc, #200]	; (802096c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80208a4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80208a8:	4a31      	ldr	r2, [pc, #196]	; (8020970 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80208aa:	4832      	ldr	r0, [pc, #200]	; (8020974 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80208ac:	f001 fff8 	bl	80228a0 <__assert_func>
 80208b0:	2600      	movs	r6, #0
 80208b2:	e7a4      	b.n	80207fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80208b4:	2400      	movs	r4, #0
 80208b6:	e7bd      	b.n	8020834 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80208b8:	463c      	mov	r4, r7
 80208ba:	e7be      	b.n	802083a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80208bc:	2000      	movs	r0, #0
 80208be:	e7d5      	b.n	802086c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80208c0:	2300      	movs	r3, #0
 80208c2:	e7ec      	b.n	802089e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80208c4:	463b      	mov	r3, r7
 80208c6:	2d0f      	cmp	r5, #15
 80208c8:	d8eb      	bhi.n	80208a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80208ca:	b2bf      	uxth	r7, r7
 80208cc:	b2ad      	uxth	r5, r5
 80208ce:	fb07 f205 	mul.w	r2, r7, r5
 80208d2:	013f      	lsls	r7, r7, #4
 80208d4:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80208d8:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80208dc:	1abf      	subs	r7, r7, r2
 80208de:	b2ad      	uxth	r5, r5
 80208e0:	b2bf      	uxth	r7, r7
 80208e2:	ebac 0c05 	sub.w	ip, ip, r5
 80208e6:	437c      	muls	r4, r7
 80208e8:	fa1f fc8c 	uxth.w	ip, ip
 80208ec:	fb06 440c 	mla	r4, r6, ip, r4
 80208f0:	fb05 4400 	mla	r4, r5, r0, r4
 80208f4:	fb02 4303 	mla	r3, r2, r3, r4
 80208f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80208fc:	b353      	cbz	r3, 8020954 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 80208fe:	4a1e      	ldr	r2, [pc, #120]	; (8020978 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8020900:	7808      	ldrb	r0, [r1, #0]
 8020902:	6814      	ldr	r4, [r2, #0]
 8020904:	b29a      	uxth	r2, r3
 8020906:	43db      	mvns	r3, r3
 8020908:	b2e5      	uxtb	r5, r4
 802090a:	b2db      	uxtb	r3, r3
 802090c:	fb15 f502 	smulbb	r5, r5, r2
 8020910:	fb00 5003 	mla	r0, r0, r3, r5
 8020914:	b280      	uxth	r0, r0
 8020916:	1c45      	adds	r5, r0, #1
 8020918:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802091c:	784d      	ldrb	r5, [r1, #1]
 802091e:	fb15 f503 	smulbb	r5, r5, r3
 8020922:	1200      	asrs	r0, r0, #8
 8020924:	7008      	strb	r0, [r1, #0]
 8020926:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802092a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802092e:	fb00 5002 	mla	r0, r0, r2, r5
 8020932:	b280      	uxth	r0, r0
 8020934:	1c45      	adds	r5, r0, #1
 8020936:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802093a:	1200      	asrs	r0, r0, #8
 802093c:	7048      	strb	r0, [r1, #1]
 802093e:	7888      	ldrb	r0, [r1, #2]
 8020940:	fb10 f303 	smulbb	r3, r0, r3
 8020944:	fb04 3202 	mla	r2, r4, r2, r3
 8020948:	b292      	uxth	r2, r2
 802094a:	1c53      	adds	r3, r2, #1
 802094c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020950:	1212      	asrs	r2, r2, #8
 8020952:	708a      	strb	r2, [r1, #2]
 8020954:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020958:	2f0f      	cmp	r7, #15
 802095a:	d8a2      	bhi.n	80208a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802095c:	462b      	mov	r3, r5
 802095e:	4628      	mov	r0, r5
 8020960:	e7b3      	b.n	80208ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8020962:	2d00      	cmp	r5, #0
 8020964:	d1a8      	bne.n	80208b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8020966:	462c      	mov	r4, r5
 8020968:	e7f8      	b.n	802095c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 802096a:	bf00      	nop
 802096c:	08027073 	.word	0x08027073
 8020970:	0802756a 	.word	0x0802756a
 8020974:	0802713c 	.word	0x0802713c
 8020978:	2000b490 	.word	0x2000b490

0802097c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802097c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020980:	ed2d 8b08 	vpush	{d8-d11}
 8020984:	b095      	sub	sp, #84	; 0x54
 8020986:	461c      	mov	r4, r3
 8020988:	eeb0 aa40 	vmov.f32	s20, s0
 802098c:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8020990:	eef0 9a60 	vmov.f32	s19, s1
 8020994:	920e      	str	r2, [sp, #56]	; 0x38
 8020996:	eeb0 9a41 	vmov.f32	s18, s2
 802099a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802099c:	eeb0 8a62 	vmov.f32	s16, s5
 80209a0:	9307      	str	r3, [sp, #28]
 80209a2:	eef0 8a43 	vmov.f32	s17, s6
 80209a6:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80209aa:	eef0 ba44 	vmov.f32	s23, s8
 80209ae:	9013      	str	r0, [sp, #76]	; 0x4c
 80209b0:	eeb0 ba64 	vmov.f32	s22, s9
 80209b4:	9109      	str	r1, [sp, #36]	; 0x24
 80209b6:	eef0 aa45 	vmov.f32	s21, s10
 80209ba:	9308      	str	r3, [sp, #32]
 80209bc:	6850      	ldr	r0, [r2, #4]
 80209be:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80209c2:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80209c6:	fb00 1803 	mla	r8, r0, r3, r1
 80209ca:	6813      	ldr	r3, [r2, #0]
 80209cc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80209d0:	4498      	add	r8, r3
 80209d2:	9b07      	ldr	r3, [sp, #28]
 80209d4:	3301      	adds	r3, #1
 80209d6:	f023 0301 	bic.w	r3, r3, #1
 80209da:	930b      	str	r3, [sp, #44]	; 0x2c
 80209dc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80209de:	681f      	ldr	r7, [r3, #0]
 80209e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	dc03      	bgt.n	80209ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80209e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	f340 8238 	ble.w	8020e5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80209ee:	2c00      	cmp	r4, #0
 80209f0:	f340 8109 	ble.w	8020c06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 80209f4:	142a      	asrs	r2, r5, #16
 80209f6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80209fa:	d42b      	bmi.n	8020a54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80209fc:	1c51      	adds	r1, r2, #1
 80209fe:	9807      	ldr	r0, [sp, #28]
 8020a00:	4288      	cmp	r0, r1
 8020a02:	dd2a      	ble.n	8020a5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020a04:	2b00      	cmp	r3, #0
 8020a06:	db28      	blt.n	8020a5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020a08:	1c59      	adds	r1, r3, #1
 8020a0a:	9808      	ldr	r0, [sp, #32]
 8020a0c:	4288      	cmp	r0, r1
 8020a0e:	dd24      	ble.n	8020a5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020a10:	1e63      	subs	r3, r4, #1
 8020a12:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020a14:	fb02 5203 	mla	r2, r2, r3, r5
 8020a18:	1412      	asrs	r2, r2, #16
 8020a1a:	d429      	bmi.n	8020a70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020a1c:	3201      	adds	r2, #1
 8020a1e:	9907      	ldr	r1, [sp, #28]
 8020a20:	4291      	cmp	r1, r2
 8020a22:	dd25      	ble.n	8020a70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020a24:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020a26:	fb02 6303 	mla	r3, r2, r3, r6
 8020a2a:	141b      	asrs	r3, r3, #16
 8020a2c:	d420      	bmi.n	8020a70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020a2e:	3301      	adds	r3, #1
 8020a30:	9a08      	ldr	r2, [sp, #32]
 8020a32:	429a      	cmp	r2, r3
 8020a34:	dd1c      	ble.n	8020a70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020a36:	f108 0e03 	add.w	lr, r8, #3
 8020a3a:	46a1      	mov	r9, r4
 8020a3c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8020a40:	f1b9 0f00 	cmp.w	r9, #0
 8020a44:	f300 8155 	bgt.w	8020cf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8020a48:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8020a4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020a50:	44a0      	add	r8, r4
 8020a52:	e0da      	b.n	8020c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8020a54:	1c50      	adds	r0, r2, #1
 8020a56:	f040 80ce 	bne.w	8020bf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8020a5a:	9907      	ldr	r1, [sp, #28]
 8020a5c:	4291      	cmp	r1, r2
 8020a5e:	f340 80ca 	ble.w	8020bf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8020a62:	1c59      	adds	r1, r3, #1
 8020a64:	f2c0 80c7 	blt.w	8020bf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8020a68:	9a08      	ldr	r2, [sp, #32]
 8020a6a:	4293      	cmp	r3, r2
 8020a6c:	f280 80c3 	bge.w	8020bf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8020a70:	46a3      	mov	fp, r4
 8020a72:	46c1      	mov	r9, r8
 8020a74:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8020a78:	f1bb 0f00 	cmp.w	fp, #0
 8020a7c:	dde4      	ble.n	8020a48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8020a7e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020a82:	1428      	asrs	r0, r5, #16
 8020a84:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020a88:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020a8c:	920a      	str	r2, [sp, #40]	; 0x28
 8020a8e:	f100 8116 	bmi.w	8020cbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8020a92:	f100 0c01 	add.w	ip, r0, #1
 8020a96:	9a07      	ldr	r2, [sp, #28]
 8020a98:	4562      	cmp	r2, ip
 8020a9a:	f340 8112 	ble.w	8020cc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	f2c0 810f 	blt.w	8020cc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8020aa4:	f103 0c01 	add.w	ip, r3, #1
 8020aa8:	9a08      	ldr	r2, [sp, #32]
 8020aaa:	4562      	cmp	r2, ip
 8020aac:	f340 8109 	ble.w	8020cc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8020ab0:	fb03 030a 	mla	r3, r3, sl, r0
 8020ab4:	0858      	lsrs	r0, r3, #1
 8020ab6:	07da      	lsls	r2, r3, #31
 8020ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020aba:	5c38      	ldrb	r0, [r7, r0]
 8020abc:	bf54      	ite	pl
 8020abe:	f000 000f 	andpl.w	r0, r0, #15
 8020ac2:	1100      	asrmi	r0, r0, #4
 8020ac4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020ac8:	b2c0      	uxtb	r0, r0
 8020aca:	2a00      	cmp	r2, #0
 8020acc:	f000 80dd 	beq.w	8020c8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8020ad0:	f103 0e01 	add.w	lr, r3, #1
 8020ad4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8020ad8:	f01e 0f01 	tst.w	lr, #1
 8020adc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020ae0:	bf0c      	ite	eq
 8020ae2:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020ae6:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020aea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020aee:	fa5f fc8c 	uxtb.w	ip, ip
 8020af2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8020af6:	b301      	cbz	r1, 8020b3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8020af8:	4453      	add	r3, sl
 8020afa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020afe:	07da      	lsls	r2, r3, #31
 8020b00:	f103 0301 	add.w	r3, r3, #1
 8020b04:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020b08:	bf54      	ite	pl
 8020b0a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020b0e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020b12:	07da      	lsls	r2, r3, #31
 8020b14:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020b18:	fa5f fc8c 	uxtb.w	ip, ip
 8020b1c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8020b20:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020b24:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020b28:	bf54      	ite	pl
 8020b2a:	f00c 030f 	andpl.w	r3, ip, #15
 8020b2e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8020b32:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020b36:	b2db      	uxtb	r3, r3
 8020b38:	9310      	str	r3, [sp, #64]	; 0x40
 8020b3a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020b3e:	b289      	uxth	r1, r1
 8020b40:	fb02 f301 	mul.w	r3, r2, r1
 8020b44:	0112      	lsls	r2, r2, #4
 8020b46:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020b4a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8020b4e:	1ad2      	subs	r2, r2, r3
 8020b50:	fa1f fe81 	uxth.w	lr, r1
 8020b54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020b56:	b292      	uxth	r2, r2
 8020b58:	ebac 0c0e 	sub.w	ip, ip, lr
 8020b5c:	434a      	muls	r2, r1
 8020b5e:	fa1f fc8c 	uxth.w	ip, ip
 8020b62:	fb00 200c 	mla	r0, r0, ip, r2
 8020b66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b68:	fb0e 0002 	mla	r0, lr, r2, r0
 8020b6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b6e:	fb03 0002 	mla	r0, r3, r2, r0
 8020b72:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020b76:	b3a8      	cbz	r0, 8020be4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8020b78:	4bbb      	ldr	r3, [pc, #748]	; (8020e68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8020b7a:	28ff      	cmp	r0, #255	; 0xff
 8020b7c:	681b      	ldr	r3, [r3, #0]
 8020b7e:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8020b82:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8020b86:	b2db      	uxtb	r3, r3
 8020b88:	f000 8092 	beq.w	8020cb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8020b8c:	b282      	uxth	r2, r0
 8020b8e:	43c0      	mvns	r0, r0
 8020b90:	f899 e000 	ldrb.w	lr, [r9]
 8020b94:	fb13 f302 	smulbb	r3, r3, r2
 8020b98:	b2c0      	uxtb	r0, r0
 8020b9a:	fb11 f102 	smulbb	r1, r1, r2
 8020b9e:	fb0e 3300 	mla	r3, lr, r0, r3
 8020ba2:	fb1c f202 	smulbb	r2, ip, r2
 8020ba6:	b29b      	uxth	r3, r3
 8020ba8:	f103 0e01 	add.w	lr, r3, #1
 8020bac:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8020bb0:	121b      	asrs	r3, r3, #8
 8020bb2:	f889 3000 	strb.w	r3, [r9]
 8020bb6:	f899 3001 	ldrb.w	r3, [r9, #1]
 8020bba:	fb03 1100 	mla	r1, r3, r0, r1
 8020bbe:	b289      	uxth	r1, r1
 8020bc0:	1c4b      	adds	r3, r1, #1
 8020bc2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020bc6:	f899 3002 	ldrb.w	r3, [r9, #2]
 8020bca:	fb03 2000 	mla	r0, r3, r0, r2
 8020bce:	1209      	asrs	r1, r1, #8
 8020bd0:	b280      	uxth	r0, r0
 8020bd2:	f889 1001 	strb.w	r1, [r9, #1]
 8020bd6:	f100 0c01 	add.w	ip, r0, #1
 8020bda:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8020bde:	1200      	asrs	r0, r0, #8
 8020be0:	f889 0002 	strb.w	r0, [r9, #2]
 8020be4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020be6:	f109 0903 	add.w	r9, r9, #3
 8020bea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020bee:	441d      	add	r5, r3
 8020bf0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020bf2:	441e      	add	r6, r3
 8020bf4:	e740      	b.n	8020a78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020bf6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020bf8:	3c01      	subs	r4, #1
 8020bfa:	f108 0803 	add.w	r8, r8, #3
 8020bfe:	441d      	add	r5, r3
 8020c00:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020c02:	441e      	add	r6, r3
 8020c04:	e6f3      	b.n	80209ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020c06:	f47f af03 	bne.w	8020a10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8020c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c0c:	2b00      	cmp	r3, #0
 8020c0e:	f340 8126 	ble.w	8020e5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8020c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020c16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020c18:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020c1c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020c20:	eef0 6a48 	vmov.f32	s13, s16
 8020c24:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020c28:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020c2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c30:	ee16 5a90 	vmov	r5, s13
 8020c34:	eef0 6a68 	vmov.f32	s13, s17
 8020c38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c3c:	ee16 6a90 	vmov	r6, s13
 8020c40:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020c44:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020c48:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020c4c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020c50:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020c54:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020c58:	ee18 2a10 	vmov	r2, s16
 8020c5c:	eeb0 8a47 	vmov.f32	s16, s14
 8020c60:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c64:	ee18 2a90 	vmov	r2, s17
 8020c68:	9329      	str	r3, [sp, #164]	; 0xa4
 8020c6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020c6c:	eef0 8a67 	vmov.f32	s17, s15
 8020c70:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c74:	932a      	str	r3, [sp, #168]	; 0xa8
 8020c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020c7a:	3b01      	subs	r3, #1
 8020c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8020c7e:	bf08      	it	eq
 8020c80:	4614      	moveq	r4, r2
 8020c82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020c84:	bf18      	it	ne
 8020c86:	461c      	movne	r4, r3
 8020c88:	e6aa      	b.n	80209e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020c8a:	2900      	cmp	r1, #0
 8020c8c:	f43f af55 	beq.w	8020b3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8020c90:	4453      	add	r3, sl
 8020c92:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020c96:	07db      	lsls	r3, r3, #31
 8020c98:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020c9c:	bf54      	ite	pl
 8020c9e:	f00c 030f 	andpl.w	r3, ip, #15
 8020ca2:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8020ca6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020caa:	b2db      	uxtb	r3, r3
 8020cac:	930c      	str	r3, [sp, #48]	; 0x30
 8020cae:	e744      	b.n	8020b3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8020cb0:	f889 3000 	strb.w	r3, [r9]
 8020cb4:	f889 1001 	strb.w	r1, [r9, #1]
 8020cb8:	f889 c002 	strb.w	ip, [r9, #2]
 8020cbc:	e792      	b.n	8020be4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8020cbe:	1c42      	adds	r2, r0, #1
 8020cc0:	d190      	bne.n	8020be4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8020cc2:	9a07      	ldr	r2, [sp, #28]
 8020cc4:	4282      	cmp	r2, r0
 8020cc6:	dd8d      	ble.n	8020be4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8020cc8:	1c5a      	adds	r2, r3, #1
 8020cca:	db8b      	blt.n	8020be4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8020ccc:	9a08      	ldr	r2, [sp, #32]
 8020cce:	429a      	cmp	r2, r3
 8020cd0:	dd88      	ble.n	8020be4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8020cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020cd4:	9105      	str	r1, [sp, #20]
 8020cd6:	4649      	mov	r1, r9
 8020cd8:	9002      	str	r0, [sp, #8]
 8020cda:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020cdc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8020ce0:	9b08      	ldr	r3, [sp, #32]
 8020ce2:	463a      	mov	r2, r7
 8020ce4:	9301      	str	r3, [sp, #4]
 8020ce6:	9b07      	ldr	r3, [sp, #28]
 8020ce8:	9300      	str	r3, [sp, #0]
 8020cea:	4653      	mov	r3, sl
 8020cec:	f7ff fd64 	bl	80207b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8020cf0:	e778      	b.n	8020be4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8020cf2:	142a      	asrs	r2, r5, #16
 8020cf4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020cf8:	1433      	asrs	r3, r6, #16
 8020cfa:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020cfe:	fb0a 2303 	mla	r3, sl, r3, r2
 8020d02:	085a      	lsrs	r2, r3, #1
 8020d04:	07d9      	lsls	r1, r3, #31
 8020d06:	5cba      	ldrb	r2, [r7, r2]
 8020d08:	bf54      	ite	pl
 8020d0a:	f002 020f 	andpl.w	r2, r2, #15
 8020d0e:	1112      	asrmi	r2, r2, #4
 8020d10:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020d14:	b2d2      	uxtb	r2, r2
 8020d16:	2800      	cmp	r0, #0
 8020d18:	f000 808a 	beq.w	8020e30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8020d1c:	f103 0b01 	add.w	fp, r3, #1
 8020d20:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8020d24:	f01b 0f01 	tst.w	fp, #1
 8020d28:	5c79      	ldrb	r1, [r7, r1]
 8020d2a:	bf0c      	ite	eq
 8020d2c:	f001 010f 	andeq.w	r1, r1, #15
 8020d30:	1109      	asrne	r1, r1, #4
 8020d32:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020d36:	b2c9      	uxtb	r1, r1
 8020d38:	9111      	str	r1, [sp, #68]	; 0x44
 8020d3a:	f1bc 0f00 	cmp.w	ip, #0
 8020d3e:	d019      	beq.n	8020d74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8020d40:	4453      	add	r3, sl
 8020d42:	0859      	lsrs	r1, r3, #1
 8020d44:	f013 0f01 	tst.w	r3, #1
 8020d48:	f103 0301 	add.w	r3, r3, #1
 8020d4c:	5c79      	ldrb	r1, [r7, r1]
 8020d4e:	bf0c      	ite	eq
 8020d50:	f001 010f 	andeq.w	r1, r1, #15
 8020d54:	1109      	asrne	r1, r1, #4
 8020d56:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020d5a:	b2c9      	uxtb	r1, r1
 8020d5c:	910d      	str	r1, [sp, #52]	; 0x34
 8020d5e:	0859      	lsrs	r1, r3, #1
 8020d60:	07db      	lsls	r3, r3, #31
 8020d62:	5c79      	ldrb	r1, [r7, r1]
 8020d64:	bf54      	ite	pl
 8020d66:	f001 010f 	andpl.w	r1, r1, #15
 8020d6a:	1109      	asrmi	r1, r1, #4
 8020d6c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020d70:	b2c9      	uxtb	r1, r1
 8020d72:	9112      	str	r1, [sp, #72]	; 0x48
 8020d74:	b280      	uxth	r0, r0
 8020d76:	fa1f fc8c 	uxth.w	ip, ip
 8020d7a:	fb00 f30c 	mul.w	r3, r0, ip
 8020d7e:	0100      	lsls	r0, r0, #4
 8020d80:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8020d84:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8020d88:	1ac0      	subs	r0, r0, r3
 8020d8a:	fa1f fc8c 	uxth.w	ip, ip
 8020d8e:	b280      	uxth	r0, r0
 8020d90:	eba1 010c 	sub.w	r1, r1, ip
 8020d94:	fa1f fb81 	uxth.w	fp, r1
 8020d98:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020d9a:	4348      	muls	r0, r1
 8020d9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020d9e:	fb02 020b 	mla	r2, r2, fp, r0
 8020da2:	fb0c 2c01 	mla	ip, ip, r1, r2
 8020da6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020da8:	fb03 c302 	mla	r3, r3, r2, ip
 8020dac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020db0:	b3ab      	cbz	r3, 8020e1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8020db2:	4a2d      	ldr	r2, [pc, #180]	; (8020e68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8020db4:	2bff      	cmp	r3, #255	; 0xff
 8020db6:	6811      	ldr	r1, [r2, #0]
 8020db8:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8020dbc:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8020dc0:	b2c9      	uxtb	r1, r1
 8020dc2:	d045      	beq.n	8020e50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8020dc4:	b298      	uxth	r0, r3
 8020dc6:	43db      	mvns	r3, r3
 8020dc8:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8020dcc:	fb11 f100 	smulbb	r1, r1, r0
 8020dd0:	b2db      	uxtb	r3, r3
 8020dd2:	fb1c fc00 	smulbb	ip, ip, r0
 8020dd6:	fb02 1103 	mla	r1, r2, r3, r1
 8020dda:	fb1b f000 	smulbb	r0, fp, r0
 8020dde:	b289      	uxth	r1, r1
 8020de0:	1c4a      	adds	r2, r1, #1
 8020de2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020de6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020dea:	fb02 cc03 	mla	ip, r2, r3, ip
 8020dee:	1209      	asrs	r1, r1, #8
 8020df0:	fa1f fc8c 	uxth.w	ip, ip
 8020df4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020df8:	f10c 0201 	add.w	r2, ip, #1
 8020dfc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020e00:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8020e04:	fb02 0303 	mla	r3, r2, r3, r0
 8020e08:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020e0c:	b29b      	uxth	r3, r3
 8020e0e:	f80e cc02 	strb.w	ip, [lr, #-2]
 8020e12:	1c5a      	adds	r2, r3, #1
 8020e14:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020e18:	121b      	asrs	r3, r3, #8
 8020e1a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8020e1e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020e20:	f10e 0e03 	add.w	lr, lr, #3
 8020e24:	f109 39ff 	add.w	r9, r9, #4294967295
 8020e28:	441d      	add	r5, r3
 8020e2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020e2c:	441e      	add	r6, r3
 8020e2e:	e607      	b.n	8020a40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8020e30:	f1bc 0f00 	cmp.w	ip, #0
 8020e34:	d09e      	beq.n	8020d74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8020e36:	4453      	add	r3, sl
 8020e38:	0859      	lsrs	r1, r3, #1
 8020e3a:	07db      	lsls	r3, r3, #31
 8020e3c:	5c79      	ldrb	r1, [r7, r1]
 8020e3e:	bf54      	ite	pl
 8020e40:	f001 010f 	andpl.w	r1, r1, #15
 8020e44:	1109      	asrmi	r1, r1, #4
 8020e46:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020e4a:	b2c9      	uxtb	r1, r1
 8020e4c:	910d      	str	r1, [sp, #52]	; 0x34
 8020e4e:	e791      	b.n	8020d74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8020e50:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020e54:	f80e cc02 	strb.w	ip, [lr, #-2]
 8020e58:	f80e bc01 	strb.w	fp, [lr, #-1]
 8020e5c:	e7df      	b.n	8020e1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8020e5e:	b015      	add	sp, #84	; 0x54
 8020e60:	ecbd 8b08 	vpop	{d8-d11}
 8020e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e68:	2000b490 	.word	0x2000b490

08020e6c <CRC_Lock>:
 8020e6c:	4a1d      	ldr	r2, [pc, #116]	; (8020ee4 <CRC_Lock+0x78>)
 8020e6e:	b530      	push	{r4, r5, lr}
 8020e70:	6813      	ldr	r3, [r2, #0]
 8020e72:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8020e76:	f24c 2540 	movw	r5, #49728	; 0xc240
 8020e7a:	f023 0301 	bic.w	r3, r3, #1
 8020e7e:	6013      	str	r3, [r2, #0]
 8020e80:	4b19      	ldr	r3, [pc, #100]	; (8020ee8 <CRC_Lock+0x7c>)
 8020e82:	681a      	ldr	r2, [r3, #0]
 8020e84:	4022      	ands	r2, r4
 8020e86:	42aa      	cmp	r2, r5
 8020e88:	d005      	beq.n	8020e96 <CRC_Lock+0x2a>
 8020e8a:	681b      	ldr	r3, [r3, #0]
 8020e8c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8020e90:	4023      	ands	r3, r4
 8020e92:	4293      	cmp	r3, r2
 8020e94:	d11d      	bne.n	8020ed2 <CRC_Lock+0x66>
 8020e96:	4b15      	ldr	r3, [pc, #84]	; (8020eec <CRC_Lock+0x80>)
 8020e98:	681b      	ldr	r3, [r3, #0]
 8020e9a:	b9d3      	cbnz	r3, 8020ed2 <CRC_Lock+0x66>
 8020e9c:	4a14      	ldr	r2, [pc, #80]	; (8020ef0 <CRC_Lock+0x84>)
 8020e9e:	6813      	ldr	r3, [r2, #0]
 8020ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020ea4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8020ea8:	d006      	beq.n	8020eb8 <CRC_Lock+0x4c>
 8020eaa:	6813      	ldr	r3, [r2, #0]
 8020eac:	f240 4283 	movw	r2, #1155	; 0x483
 8020eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020eb4:	4293      	cmp	r3, r2
 8020eb6:	d10c      	bne.n	8020ed2 <CRC_Lock+0x66>
 8020eb8:	4b0e      	ldr	r3, [pc, #56]	; (8020ef4 <CRC_Lock+0x88>)
 8020eba:	2201      	movs	r2, #1
 8020ebc:	601a      	str	r2, [r3, #0]
 8020ebe:	681a      	ldr	r2, [r3, #0]
 8020ec0:	2a00      	cmp	r2, #0
 8020ec2:	d1fc      	bne.n	8020ebe <CRC_Lock+0x52>
 8020ec4:	4b0c      	ldr	r3, [pc, #48]	; (8020ef8 <CRC_Lock+0x8c>)
 8020ec6:	6018      	str	r0, [r3, #0]
 8020ec8:	6818      	ldr	r0, [r3, #0]
 8020eca:	1a43      	subs	r3, r0, r1
 8020ecc:	4258      	negs	r0, r3
 8020ece:	4158      	adcs	r0, r3
 8020ed0:	bd30      	pop	{r4, r5, pc}
 8020ed2:	4b0a      	ldr	r3, [pc, #40]	; (8020efc <CRC_Lock+0x90>)
 8020ed4:	2201      	movs	r2, #1
 8020ed6:	601a      	str	r2, [r3, #0]
 8020ed8:	681a      	ldr	r2, [r3, #0]
 8020eda:	2a00      	cmp	r2, #0
 8020edc:	d1fc      	bne.n	8020ed8 <CRC_Lock+0x6c>
 8020ede:	4b08      	ldr	r3, [pc, #32]	; (8020f00 <CRC_Lock+0x94>)
 8020ee0:	e7f1      	b.n	8020ec6 <CRC_Lock+0x5a>
 8020ee2:	bf00      	nop
 8020ee4:	e0002000 	.word	0xe0002000
 8020ee8:	e000ed00 	.word	0xe000ed00
 8020eec:	e0042000 	.word	0xe0042000
 8020ef0:	5c001000 	.word	0x5c001000
 8020ef4:	58024c08 	.word	0x58024c08
 8020ef8:	58024c00 	.word	0x58024c00
 8020efc:	40023008 	.word	0x40023008
 8020f00:	40023000 	.word	0x40023000

08020f04 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8020f04:	6101      	str	r1, [r0, #16]
 8020f06:	4770      	bx	lr

08020f08 <_ZN8touchgfx8Gestures4tickEv>:
 8020f08:	7b83      	ldrb	r3, [r0, #14]
 8020f0a:	b14b      	cbz	r3, 8020f20 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8020f0c:	8903      	ldrh	r3, [r0, #8]
 8020f0e:	3301      	adds	r3, #1
 8020f10:	b29b      	uxth	r3, r3
 8020f12:	2b07      	cmp	r3, #7
 8020f14:	8103      	strh	r3, [r0, #8]
 8020f16:	bf81      	itttt	hi
 8020f18:	2300      	movhi	r3, #0
 8020f1a:	8143      	strhhi	r3, [r0, #10]
 8020f1c:	8183      	strhhi	r3, [r0, #12]
 8020f1e:	7383      	strbhi	r3, [r0, #14]
 8020f20:	4770      	bx	lr
	...

08020f24 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8020f24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020f28:	4604      	mov	r4, r0
 8020f2a:	4698      	mov	r8, r3
 8020f2c:	8880      	ldrh	r0, [r0, #4]
 8020f2e:	4617      	mov	r7, r2
 8020f30:	4b1d      	ldr	r3, [pc, #116]	; (8020fa8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8020f32:	460e      	mov	r6, r1
 8020f34:	f8ad 0006 	strh.w	r0, [sp, #6]
 8020f38:	eba8 0000 	sub.w	r0, r8, r0
 8020f3c:	9300      	str	r3, [sp, #0]
 8020f3e:	2300      	movs	r3, #0
 8020f40:	b280      	uxth	r0, r0
 8020f42:	8aa2      	ldrh	r2, [r4, #20]
 8020f44:	f88d 3004 	strb.w	r3, [sp, #4]
 8020f48:	b203      	sxth	r3, r0
 8020f4a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8020f4e:	88e1      	ldrh	r1, [r4, #6]
 8020f50:	2b00      	cmp	r3, #0
 8020f52:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020f56:	f8ad 1008 	strh.w	r1, [sp, #8]
 8020f5a:	bfb8      	it	lt
 8020f5c:	4240      	neglt	r0, r0
 8020f5e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8020f62:	bfb8      	it	lt
 8020f64:	b203      	sxthlt	r3, r0
 8020f66:	4293      	cmp	r3, r2
 8020f68:	dc08      	bgt.n	8020f7c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8020f6a:	1a69      	subs	r1, r5, r1
 8020f6c:	b289      	uxth	r1, r1
 8020f6e:	b20b      	sxth	r3, r1
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	bfbc      	itt	lt
 8020f74:	4249      	neglt	r1, r1
 8020f76:	b20b      	sxthlt	r3, r1
 8020f78:	429a      	cmp	r2, r3
 8020f7a:	da13      	bge.n	8020fa4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8020f7c:	6920      	ldr	r0, [r4, #16]
 8020f7e:	4669      	mov	r1, sp
 8020f80:	eba8 0606 	sub.w	r6, r8, r6
 8020f84:	1bef      	subs	r7, r5, r7
 8020f86:	6803      	ldr	r3, [r0, #0]
 8020f88:	685b      	ldr	r3, [r3, #4]
 8020f8a:	4798      	blx	r3
 8020f8c:	2300      	movs	r3, #0
 8020f8e:	2001      	movs	r0, #1
 8020f90:	8166      	strh	r6, [r4, #10]
 8020f92:	8123      	strh	r3, [r4, #8]
 8020f94:	81a7      	strh	r7, [r4, #12]
 8020f96:	f8a4 8004 	strh.w	r8, [r4, #4]
 8020f9a:	80e5      	strh	r5, [r4, #6]
 8020f9c:	73a0      	strb	r0, [r4, #14]
 8020f9e:	b004      	add	sp, #16
 8020fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020fa4:	2000      	movs	r0, #0
 8020fa6:	e7fa      	b.n	8020f9e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8020fa8:	08026210 	.word	0x08026210

08020fac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8020fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020fae:	461e      	mov	r6, r3
 8020fb0:	1e4b      	subs	r3, r1, #1
 8020fb2:	b085      	sub	sp, #20
 8020fb4:	4604      	mov	r4, r0
 8020fb6:	2b01      	cmp	r3, #1
 8020fb8:	460d      	mov	r5, r1
 8020fba:	4617      	mov	r7, r2
 8020fbc:	d84b      	bhi.n	8021056 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8020fbe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8020fc2:	1cd3      	adds	r3, r2, #3
 8020fc4:	b29b      	uxth	r3, r3
 8020fc6:	2b06      	cmp	r3, #6
 8020fc8:	d916      	bls.n	8020ff8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8020fca:	f8df c098 	ldr.w	ip, [pc, #152]	; 8021064 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8020fce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020fd2:	f8cd c004 	str.w	ip, [sp, #4]
 8020fd6:	f04f 0c00 	mov.w	ip, #0
 8020fda:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020fde:	6900      	ldr	r0, [r0, #16]
 8020fe0:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020fe4:	a901      	add	r1, sp, #4
 8020fe6:	f88d c008 	strb.w	ip, [sp, #8]
 8020fea:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020fee:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020ff2:	6803      	ldr	r3, [r0, #0]
 8020ff4:	689b      	ldr	r3, [r3, #8]
 8020ff6:	4798      	blx	r3
 8020ff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020ffc:	1cd3      	adds	r3, r2, #3
 8020ffe:	b29b      	uxth	r3, r3
 8021000:	2b06      	cmp	r3, #6
 8021002:	d916      	bls.n	8021032 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021004:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8021064 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8021008:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802100c:	f8cd c004 	str.w	ip, [sp, #4]
 8021010:	f04f 0c01 	mov.w	ip, #1
 8021014:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021018:	6920      	ldr	r0, [r4, #16]
 802101a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802101e:	a901      	add	r1, sp, #4
 8021020:	f88d c008 	strb.w	ip, [sp, #8]
 8021024:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021028:	f8ad 300e 	strh.w	r3, [sp, #14]
 802102c:	6803      	ldr	r3, [r0, #0]
 802102e:	689b      	ldr	r3, [r3, #8]
 8021030:	4798      	blx	r3
 8021032:	4b0b      	ldr	r3, [pc, #44]	; (8021060 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8021034:	a901      	add	r1, sp, #4
 8021036:	6920      	ldr	r0, [r4, #16]
 8021038:	9301      	str	r3, [sp, #4]
 802103a:	2300      	movs	r3, #0
 802103c:	f88d 5008 	strb.w	r5, [sp, #8]
 8021040:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021044:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021048:	f8ad 300e 	strh.w	r3, [sp, #14]
 802104c:	6803      	ldr	r3, [r0, #0]
 802104e:	681b      	ldr	r3, [r3, #0]
 8021050:	4798      	blx	r3
 8021052:	b005      	add	sp, #20
 8021054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021056:	2900      	cmp	r1, #0
 8021058:	d1eb      	bne.n	8021032 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802105a:	80a2      	strh	r2, [r4, #4]
 802105c:	80c6      	strh	r6, [r0, #6]
 802105e:	e7e8      	b.n	8021032 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021060:	080261fc 	.word	0x080261fc
 8021064:	08026224 	.word	0x08026224

08021068 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8021068:	10c9      	asrs	r1, r1, #3
 802106a:	2900      	cmp	r1, #0
 802106c:	bfb8      	it	lt
 802106e:	4249      	neglt	r1, r1
 8021070:	2801      	cmp	r0, #1
 8021072:	d108      	bne.n	8021086 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8021074:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8021078:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802107c:	4601      	mov	r1, r0
 802107e:	dd02      	ble.n	8021086 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8021080:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8021084:	4770      	bx	lr
 8021086:	29ff      	cmp	r1, #255	; 0xff
 8021088:	bfa8      	it	ge
 802108a:	21ff      	movge	r1, #255	; 0xff
 802108c:	4608      	mov	r0, r1
 802108e:	4770      	bx	lr

08021090 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8021090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021094:	688c      	ldr	r4, [r1, #8]
 8021096:	b087      	sub	sp, #28
 8021098:	4607      	mov	r7, r0
 802109a:	2c00      	cmp	r4, #0
 802109c:	db2b      	blt.n	80210f6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802109e:	6803      	ldr	r3, [r0, #0]
 80210a0:	68da      	ldr	r2, [r3, #12]
 80210a2:	42a2      	cmp	r2, r4
 80210a4:	dd27      	ble.n	80210f6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80210a6:	681a      	ldr	r2, [r3, #0]
 80210a8:	691e      	ldr	r6, [r3, #16]
 80210aa:	68cd      	ldr	r5, [r1, #12]
 80210ac:	fb06 2604 	mla	r6, r6, r4, r2
 80210b0:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80210b4:	698a      	ldr	r2, [r1, #24]
 80210b6:	f893 a004 	ldrb.w	sl, [r3, #4]
 80210ba:	f8d1 8020 	ldr.w	r8, [r1, #32]
 80210be:	9205      	str	r2, [sp, #20]
 80210c0:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 80210c4:	9b05      	ldr	r3, [sp, #20]
 80210c6:	6839      	ldr	r1, [r7, #0]
 80210c8:	eb03 0c02 	add.w	ip, r3, r2
 80210cc:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 80210d0:	6889      	ldr	r1, [r1, #8]
 80210d2:	1898      	adds	r0, r3, r2
 80210d4:	4288      	cmp	r0, r1
 80210d6:	db02      	blt.n	80210de <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 80210d8:	1a8b      	subs	r3, r1, r2
 80210da:	2b00      	cmp	r3, #0
 80210dc:	dd09      	ble.n	80210f2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 80210de:	6878      	ldr	r0, [r7, #4]
 80210e0:	6801      	ldr	r1, [r0, #0]
 80210e2:	9400      	str	r4, [sp, #0]
 80210e4:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80210e8:	4653      	mov	r3, sl
 80210ea:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80210ee:	4631      	mov	r1, r6
 80210f0:	47d8      	blx	fp
 80210f2:	3d01      	subs	r5, #1
 80210f4:	d1e4      	bne.n	80210c0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 80210f6:	b007      	add	sp, #28
 80210f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080210fc <_ZN8touchgfx10Rasterizer6lineToEii>:
 80210fc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8021100:	b90b      	cbnz	r3, 8021106 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8021102:	f001 b974 	b.w	80223ee <_ZN8touchgfx7Outline6lineToEii>
 8021106:	4770      	bx	lr

08021108 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8021108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802110c:	4604      	mov	r4, r0
 802110e:	2600      	movs	r6, #0
 8021110:	4b8e      	ldr	r3, [pc, #568]	; (802134c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8021112:	f100 0518 	add.w	r5, r0, #24
 8021116:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 802111a:	b086      	sub	sp, #24
 802111c:	4690      	mov	r8, r2
 802111e:	e9c0 3100 	strd	r3, r1, [r0]
 8021122:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8021126:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802112a:	4628      	mov	r0, r5
 802112c:	f001 fb75 	bl	802281a <_ZN8touchgfx15RenderingBufferC1Ev>
 8021130:	4638      	mov	r0, r7
 8021132:	f000 fb45 	bl	80217c0 <_ZN8touchgfx7OutlineC1Ev>
 8021136:	f104 0074 	add.w	r0, r4, #116	; 0x74
 802113a:	f001 fb23 	bl	8022784 <_ZN8touchgfx8ScanlineC1Ev>
 802113e:	2301      	movs	r3, #1
 8021140:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8021144:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8021148:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802114c:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8021150:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8021154:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8021158:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 802115c:	f7f4 fba0 	bl	80158a0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8021160:	b928      	cbnz	r0, 802116e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8021162:	4b7b      	ldr	r3, [pc, #492]	; (8021350 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8021164:	2118      	movs	r1, #24
 8021166:	4a7b      	ldr	r2, [pc, #492]	; (8021354 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8021168:	487b      	ldr	r0, [pc, #492]	; (8021358 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802116a:	f001 fb99 	bl	80228a0 <__assert_func>
 802116e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8021172:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8021176:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802117a:	4410      	add	r0, r2
 802117c:	9602      	str	r6, [sp, #8]
 802117e:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8021182:	b280      	uxth	r0, r0
 8021184:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8021188:	fa0f fa80 	sxth.w	sl, r0
 802118c:	f1ba 0f00 	cmp.w	sl, #0
 8021190:	dd70      	ble.n	8021274 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8021192:	4591      	cmp	r9, r2
 8021194:	dd6e      	ble.n	8021274 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8021196:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802119a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802119e:	440b      	add	r3, r1
 80211a0:	b29b      	uxth	r3, r3
 80211a2:	b21e      	sxth	r6, r3
 80211a4:	2e00      	cmp	r6, #0
 80211a6:	dd65      	ble.n	8021274 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80211a8:	458e      	cmp	lr, r1
 80211aa:	dd63      	ble.n	8021274 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80211ac:	45d1      	cmp	r9, sl
 80211ae:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80211b2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80211b6:	bfb8      	it	lt
 80211b8:	fa1f f089 	uxthlt.w	r0, r9
 80211bc:	45b6      	cmp	lr, r6
 80211be:	f8ad 2008 	strh.w	r2, [sp, #8]
 80211c2:	bfb8      	it	lt
 80211c4:	fa1f f38e 	uxthlt.w	r3, lr
 80211c8:	1a80      	subs	r0, r0, r2
 80211ca:	f8ad 100a 	strh.w	r1, [sp, #10]
 80211ce:	1a5b      	subs	r3, r3, r1
 80211d0:	f8ad 000c 	strh.w	r0, [sp, #12]
 80211d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80211d8:	f10d 0808 	add.w	r8, sp, #8
 80211dc:	ae04      	add	r6, sp, #16
 80211de:	e898 0003 	ldmia.w	r8, {r0, r1}
 80211e2:	e886 0003 	stmia.w	r6, {r0, r1}
 80211e6:	f8dc 3000 	ldr.w	r3, [ip]
 80211ea:	4660      	mov	r0, ip
 80211ec:	4631      	mov	r1, r6
 80211ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80211f0:	4798      	blx	r3
 80211f2:	6861      	ldr	r1, [r4, #4]
 80211f4:	4640      	mov	r0, r8
 80211f6:	3104      	adds	r1, #4
 80211f8:	f7f5 f9c0 	bl	801657c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80211fc:	4630      	mov	r0, r6
 80211fe:	f7f5 f9d5 	bl	80165ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021202:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8021206:	f7f4 fadb 	bl	80157c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 802120a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 802120e:	4638      	mov	r0, r7
 8021210:	f000 fab2 	bl	8021778 <_ZN8touchgfx7Outline5resetEv>
 8021214:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8021218:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802121c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8021220:	015b      	lsls	r3, r3, #5
 8021222:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8021226:	0152      	lsls	r2, r2, #5
 8021228:	60e3      	str	r3, [r4, #12]
 802122a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802122e:	60a2      	str	r2, [r4, #8]
 8021230:	015b      	lsls	r3, r3, #5
 8021232:	6123      	str	r3, [r4, #16]
 8021234:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8021238:	015b      	lsls	r3, r3, #5
 802123a:	6163      	str	r3, [r4, #20]
 802123c:	4b47      	ldr	r3, [pc, #284]	; (802135c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802123e:	6818      	ldr	r0, [r3, #0]
 8021240:	6803      	ldr	r3, [r0, #0]
 8021242:	6a1b      	ldr	r3, [r3, #32]
 8021244:	4798      	blx	r3
 8021246:	4606      	mov	r6, r0
 8021248:	f7ed fd1a 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 802124c:	6803      	ldr	r3, [r0, #0]
 802124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021250:	4798      	blx	r3
 8021252:	4607      	mov	r7, r0
 8021254:	f7ed fd14 	bl	800ec80 <_ZN8touchgfx3HAL3lcdEv>
 8021258:	6803      	ldr	r3, [r0, #0]
 802125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802125c:	4798      	blx	r3
 802125e:	280c      	cmp	r0, #12
 8021260:	d854      	bhi.n	802130c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8021262:	e8df f000 	tbb	[pc, r0]
 8021266:	554b      	.short	0x554b
 8021268:	2b6e0a66 	.word	0x2b6e0a66
 802126c:	5f5f5f3b 	.word	0x5f5f5f3b
 8021270:	5f5f      	.short	0x5f5f
 8021272:	6e          	.byte	0x6e
 8021273:	00          	.byte	0x00
 8021274:	2300      	movs	r3, #0
 8021276:	9303      	str	r3, [sp, #12]
 8021278:	e7ae      	b.n	80211d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 802127a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802127e:	2108      	movs	r1, #8
 8021280:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021284:	fb92 f1f1 	sdiv	r1, r2, r1
 8021288:	fb07 1303 	mla	r3, r7, r3, r1
 802128c:	441e      	add	r6, r3
 802128e:	4253      	negs	r3, r2
 8021290:	f002 0207 	and.w	r2, r2, #7
 8021294:	f003 0307 	and.w	r3, r3, #7
 8021298:	bf58      	it	pl
 802129a:	425a      	negpl	r2, r3
 802129c:	b2d2      	uxtb	r2, r2
 802129e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80212a2:	4628      	mov	r0, r5
 80212a4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80212a8:	66e1      	str	r1, [r4, #108]	; 0x6c
 80212aa:	e9cd 1700 	strd	r1, r7, [sp]
 80212ae:	4631      	mov	r1, r6
 80212b0:	f001 fabb 	bl	802282a <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 80212b4:	4620      	mov	r0, r4
 80212b6:	b006      	add	sp, #24
 80212b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80212bc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80212c0:	2104      	movs	r1, #4
 80212c2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80212c6:	fb92 f1f1 	sdiv	r1, r2, r1
 80212ca:	fb07 1303 	mla	r3, r7, r3, r1
 80212ce:	441e      	add	r6, r3
 80212d0:	4253      	negs	r3, r2
 80212d2:	f002 0203 	and.w	r2, r2, #3
 80212d6:	f003 0303 	and.w	r3, r3, #3
 80212da:	e7dd      	b.n	8021298 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 80212dc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80212e0:	2102      	movs	r1, #2
 80212e2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80212e6:	2a00      	cmp	r2, #0
 80212e8:	fb92 f1f1 	sdiv	r1, r2, r1
 80212ec:	f002 0201 	and.w	r2, r2, #1
 80212f0:	fb07 1303 	mla	r3, r7, r3, r1
 80212f4:	bfb8      	it	lt
 80212f6:	4252      	neglt	r2, r2
 80212f8:	441e      	add	r6, r3
 80212fa:	e7cf      	b.n	802129c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 80212fc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021300:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021304:	437b      	muls	r3, r7
 8021306:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802130a:	441e      	add	r6, r3
 802130c:	2200      	movs	r2, #0
 802130e:	e7c6      	b.n	802129e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8021310:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021314:	2103      	movs	r1, #3
 8021316:	fb07 f203 	mul.w	r2, r7, r3
 802131a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802131e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8021322:	e7f2      	b.n	802130a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8021324:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021328:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802132c:	fb07 2303 	mla	r3, r7, r3, r2
 8021330:	e7eb      	b.n	802130a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8021332:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021336:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802133a:	437b      	muls	r3, r7
 802133c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021340:	e7e3      	b.n	802130a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8021342:	4b07      	ldr	r3, [pc, #28]	; (8021360 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8021344:	2156      	movs	r1, #86	; 0x56
 8021346:	4a03      	ldr	r2, [pc, #12]	; (8021354 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8021348:	e70e      	b.n	8021168 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 802134a:	bf00      	nop
 802134c:	08027890 	.word	0x08027890
 8021350:	080277da 	.word	0x080277da
 8021354:	08027898 	.word	0x08027898
 8021358:	08027836 	.word	0x08027836
 802135c:	2000b468 	.word	0x2000b468
 8021360:	0802786a 	.word	0x0802786a

08021364 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8021364:	6812      	ldr	r2, [r2, #0]
 8021366:	2a00      	cmp	r2, #0
 8021368:	db0b      	blt.n	8021382 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 802136a:	9800      	ldr	r0, [sp, #0]
 802136c:	6800      	ldr	r0, [r0, #0]
 802136e:	4290      	cmp	r0, r2
 8021370:	bfd4      	ite	le
 8021372:	2002      	movle	r0, #2
 8021374:	2000      	movgt	r0, #0
 8021376:	680a      	ldr	r2, [r1, #0]
 8021378:	2a00      	cmp	r2, #0
 802137a:	da04      	bge.n	8021386 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 802137c:	f040 0004 	orr.w	r0, r0, #4
 8021380:	4770      	bx	lr
 8021382:	2001      	movs	r0, #1
 8021384:	e7f7      	b.n	8021376 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8021386:	681b      	ldr	r3, [r3, #0]
 8021388:	4293      	cmp	r3, r2
 802138a:	bfd8      	it	le
 802138c:	f040 0008 	orrle.w	r0, r0, #8
 8021390:	4770      	bx	lr
	...

08021394 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8021394:	4b07      	ldr	r3, [pc, #28]	; (80213b4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8021396:	b510      	push	{r4, lr}
 8021398:	781b      	ldrb	r3, [r3, #0]
 802139a:	2b01      	cmp	r3, #1
 802139c:	d108      	bne.n	80213b0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802139e:	6843      	ldr	r3, [r0, #4]
 80213a0:	6814      	ldr	r4, [r2, #0]
 80213a2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80213a6:	680b      	ldr	r3, [r1, #0]
 80213a8:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80213ac:	6013      	str	r3, [r2, #0]
 80213ae:	600c      	str	r4, [r1, #0]
 80213b0:	bd10      	pop	{r4, pc}
 80213b2:	bf00      	nop
 80213b4:	2000b460 	.word	0x2000b460

080213b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80213b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80213ba:	b085      	sub	sp, #20
 80213bc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80213c0:	4604      	mov	r4, r0
 80213c2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80213c6:	b33b      	cbz	r3, 8021418 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80213c8:	aa02      	add	r2, sp, #8
 80213ca:	a903      	add	r1, sp, #12
 80213cc:	f7ff ffe2 	bl	8021394 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80213d0:	68a3      	ldr	r3, [r4, #8]
 80213d2:	9e03      	ldr	r6, [sp, #12]
 80213d4:	aa02      	add	r2, sp, #8
 80213d6:	9f02      	ldr	r7, [sp, #8]
 80213d8:	a903      	add	r1, sp, #12
 80213da:	1af6      	subs	r6, r6, r3
 80213dc:	68e3      	ldr	r3, [r4, #12]
 80213de:	4620      	mov	r0, r4
 80213e0:	1aff      	subs	r7, r7, r3
 80213e2:	f104 0314 	add.w	r3, r4, #20
 80213e6:	9603      	str	r6, [sp, #12]
 80213e8:	9300      	str	r3, [sp, #0]
 80213ea:	f104 0310 	add.w	r3, r4, #16
 80213ee:	9702      	str	r7, [sp, #8]
 80213f0:	f7ff ffb8 	bl	8021364 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80213f4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80213f8:	4605      	mov	r5, r0
 80213fa:	b97b      	cbnz	r3, 802141c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80213fc:	463a      	mov	r2, r7
 80213fe:	4631      	mov	r1, r6
 8021400:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8021404:	f7ff fe7a 	bl	80210fc <_ZN8touchgfx10Rasterizer6lineToEii>
 8021408:	9b03      	ldr	r3, [sp, #12]
 802140a:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 802140e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8021412:	9b02      	ldr	r3, [sp, #8]
 8021414:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8021418:	b005      	add	sp, #20
 802141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802141c:	b110      	cbz	r0, 8021424 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802141e:	ea13 0200 	ands.w	r2, r3, r0
 8021422:	d11c      	bne.n	802145e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8021424:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8021428:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 802142c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8021430:	b188      	cbz	r0, 8021456 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8021432:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8021436:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802143a:	b913      	cbnz	r3, 8021442 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802143c:	4630      	mov	r0, r6
 802143e:	f001 f806 	bl	802244e <_ZN8touchgfx7Outline6moveToEii>
 8021442:	2300      	movs	r3, #0
 8021444:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021448:	2301      	movs	r3, #1
 802144a:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802144e:	4630      	mov	r0, r6
 8021450:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8021454:	e7d6      	b.n	8021404 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8021456:	4630      	mov	r0, r6
 8021458:	f7ff fe50 	bl	80210fc <_ZN8touchgfx10Rasterizer6lineToEii>
 802145c:	e7f7      	b.n	802144e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802145e:	4615      	mov	r5, r2
 8021460:	e7d2      	b.n	8021408 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08021462 <_ZN8touchgfx6Canvas5closeEv>:
 8021462:	b538      	push	{r3, r4, r5, lr}
 8021464:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8021468:	4604      	mov	r4, r0
 802146a:	b993      	cbnz	r3, 8021492 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802146c:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8021470:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8021474:	4213      	tst	r3, r2
 8021476:	d10c      	bne.n	8021492 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8021478:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 802147c:	b123      	cbz	r3, 8021488 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802147e:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8021482:	4628      	mov	r0, r5
 8021484:	f7ff fe3a 	bl	80210fc <_ZN8touchgfx10Rasterizer6lineToEii>
 8021488:	4628      	mov	r0, r5
 802148a:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 802148e:	f7ff fe35 	bl	80210fc <_ZN8touchgfx10Rasterizer6lineToEii>
 8021492:	2300      	movs	r3, #0
 8021494:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021498:	bd38      	pop	{r3, r4, r5, pc}

0802149a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802149a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802149c:	b085      	sub	sp, #20
 802149e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80214a2:	4604      	mov	r4, r0
 80214a4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80214a8:	b353      	cbz	r3, 8021500 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80214aa:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80214ae:	b90b      	cbnz	r3, 80214b4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80214b0:	f7ff ffd7 	bl	8021462 <_ZN8touchgfx6Canvas5closeEv>
 80214b4:	aa02      	add	r2, sp, #8
 80214b6:	a903      	add	r1, sp, #12
 80214b8:	4620      	mov	r0, r4
 80214ba:	f7ff ff6b 	bl	8021394 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80214be:	68a3      	ldr	r3, [r4, #8]
 80214c0:	9d03      	ldr	r5, [sp, #12]
 80214c2:	aa02      	add	r2, sp, #8
 80214c4:	9e02      	ldr	r6, [sp, #8]
 80214c6:	a903      	add	r1, sp, #12
 80214c8:	1aed      	subs	r5, r5, r3
 80214ca:	68e3      	ldr	r3, [r4, #12]
 80214cc:	4620      	mov	r0, r4
 80214ce:	1af6      	subs	r6, r6, r3
 80214d0:	f104 0314 	add.w	r3, r4, #20
 80214d4:	9503      	str	r5, [sp, #12]
 80214d6:	9300      	str	r3, [sp, #0]
 80214d8:	f104 0310 	add.w	r3, r4, #16
 80214dc:	9602      	str	r6, [sp, #8]
 80214de:	f7ff ff41 	bl	8021364 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80214e2:	4607      	mov	r7, r0
 80214e4:	b170      	cbz	r0, 8021504 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80214e6:	2301      	movs	r3, #1
 80214e8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80214ec:	9a03      	ldr	r2, [sp, #12]
 80214ee:	9b02      	ldr	r3, [sp, #8]
 80214f0:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80214f4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 80214f8:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 80214fc:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8021500:	b005      	add	sp, #20
 8021502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021504:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8021508:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 802150c:	b92b      	cbnz	r3, 802151a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802150e:	4632      	mov	r2, r6
 8021510:	4629      	mov	r1, r5
 8021512:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8021516:	f000 ff9a 	bl	802244e <_ZN8touchgfx7Outline6moveToEii>
 802151a:	2300      	movs	r3, #0
 802151c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021520:	2301      	movs	r3, #1
 8021522:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8021526:	e7e1      	b.n	80214ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08021528 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8021528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802152c:	4604      	mov	r4, r0
 802152e:	b087      	sub	sp, #28
 8021530:	9105      	str	r1, [sp, #20]
 8021532:	f001 f8d0 	bl	80226d6 <_ZN8touchgfx7Outline8getCellsEv>
 8021536:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802153a:	4605      	mov	r5, r0
 802153c:	f1b9 0f00 	cmp.w	r9, #0
 8021540:	d103      	bne.n	802154a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8021542:	2001      	movs	r0, #1
 8021544:	b007      	add	sp, #28
 8021546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802154a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802154e:	2e00      	cmp	r6, #0
 8021550:	d139      	bne.n	80215c6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8021552:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8021556:	f105 0708 	add.w	r7, r5, #8
 802155a:	4640      	mov	r0, r8
 802155c:	f001 f8fd 	bl	802275a <_ZN8touchgfx8Scanline5resetEv>
 8021560:	f109 33ff 	add.w	r3, r9, #4294967295
 8021564:	9303      	str	r3, [sp, #12]
 8021566:	f9b5 b000 	ldrsh.w	fp, [r5]
 802156a:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802156e:	46da      	mov	sl, fp
 8021570:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8021574:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8021578:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 802157c:	9b03      	ldr	r3, [sp, #12]
 802157e:	4416      	add	r6, r2
 8021580:	9504      	str	r5, [sp, #16]
 8021582:	463d      	mov	r5, r7
 8021584:	3b01      	subs	r3, #1
 8021586:	9303      	str	r3, [sp, #12]
 8021588:	3301      	adds	r3, #1
 802158a:	d01e      	beq.n	80215ca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 802158c:	3708      	adds	r7, #8
 802158e:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8021592:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8021596:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802159a:	4290      	cmp	r0, r2
 802159c:	d11e      	bne.n	80215dc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802159e:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80215a2:	4411      	add	r1, r2
 80215a4:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80215a8:	e7e8      	b.n	802157c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80215aa:	1c91      	adds	r1, r2, #2
 80215ac:	f04f 0301 	mov.w	r3, #1
 80215b0:	65e1      	str	r1, [r4, #92]	; 0x5c
 80215b2:	8053      	strh	r3, [r2, #2]
 80215b4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80215b6:	1c91      	adds	r1, r2, #2
 80215b8:	65a1      	str	r1, [r4, #88]	; 0x58
 80215ba:	f8a2 b002 	strh.w	fp, [r2, #2]
 80215be:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80215c0:	3201      	adds	r2, #1
 80215c2:	6562      	str	r2, [r4, #84]	; 0x54
 80215c4:	e03a      	b.n	802163c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80215c6:	2000      	movs	r0, #0
 80215c8:	e7bc      	b.n	8021544 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80215ca:	b951      	cbnz	r1, 80215e2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80215cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80215ce:	2b00      	cmp	r3, #0
 80215d0:	d0b7      	beq.n	8021542 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80215d2:	4641      	mov	r1, r8
 80215d4:	9805      	ldr	r0, [sp, #20]
 80215d6:	f7ff fd5b 	bl	8021090 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80215da:	e7b2      	b.n	8021542 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80215dc:	2900      	cmp	r1, #0
 80215de:	d035      	beq.n	802164c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80215e0:	9504      	str	r5, [sp, #16]
 80215e2:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80215e6:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80215ea:	f7ff fd3d 	bl	8021068 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80215ee:	4605      	mov	r5, r0
 80215f0:	b330      	cbz	r0, 8021640 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80215f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80215f4:	b182      	cbz	r2, 8021618 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80215f6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80215f8:	454a      	cmp	r2, r9
 80215fa:	d00d      	beq.n	8021618 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80215fc:	4641      	mov	r1, r8
 80215fe:	9805      	ldr	r0, [sp, #20]
 8021600:	f7ff fd46 	bl	8021090 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8021604:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021608:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802160a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802160e:	65e2      	str	r2, [r4, #92]	; 0x5c
 8021610:	2300      	movs	r3, #0
 8021612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021614:	6563      	str	r3, [r4, #84]	; 0x54
 8021616:	65a2      	str	r2, [r4, #88]	; 0x58
 8021618:	f1bb 0f00 	cmp.w	fp, #0
 802161c:	db10      	blt.n	8021640 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802161e:	f7f4 f94d 	bl	80158bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8021622:	4583      	cmp	fp, r0
 8021624:	d20c      	bcs.n	8021640 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8021626:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8021628:	f802 500b 	strb.w	r5, [r2, fp]
 802162c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802162e:	3201      	adds	r2, #1
 8021630:	455a      	cmp	r2, fp
 8021632:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8021634:	d1b9      	bne.n	80215aa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8021636:	8811      	ldrh	r1, [r2, #0]
 8021638:	3101      	adds	r1, #1
 802163a:	8011      	strh	r1, [r2, #0]
 802163c:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8021640:	9b03      	ldr	r3, [sp, #12]
 8021642:	3301      	adds	r3, #1
 8021644:	d0c2      	beq.n	80215cc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8021646:	f10b 0a01 	add.w	sl, fp, #1
 802164a:	9d04      	ldr	r5, [sp, #16]
 802164c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8021650:	4553      	cmp	r3, sl
 8021652:	dd88      	ble.n	8021566 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8021654:	01b1      	lsls	r1, r6, #6
 8021656:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802165a:	f7ff fd05 	bl	8021068 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802165e:	4683      	mov	fp, r0
 8021660:	2800      	cmp	r0, #0
 8021662:	d080      	beq.n	8021566 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8021664:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8021666:	b183      	cbz	r3, 802168a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8021668:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802166a:	454b      	cmp	r3, r9
 802166c:	d00d      	beq.n	802168a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802166e:	4641      	mov	r1, r8
 8021670:	9805      	ldr	r0, [sp, #20]
 8021672:	f7ff fd0d 	bl	8021090 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8021676:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802167a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802167e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8021680:	65e3      	str	r3, [r4, #92]	; 0x5c
 8021682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021684:	65a3      	str	r3, [r4, #88]	; 0x58
 8021686:	2300      	movs	r3, #0
 8021688:	6563      	str	r3, [r4, #84]	; 0x54
 802168a:	f9b5 3000 	ldrsh.w	r3, [r5]
 802168e:	464a      	mov	r2, r9
 8021690:	f8cd b000 	str.w	fp, [sp]
 8021694:	4651      	mov	r1, sl
 8021696:	eba3 030a 	sub.w	r3, r3, sl
 802169a:	4640      	mov	r0, r8
 802169c:	f001 f884 	bl	80227a8 <_ZN8touchgfx8Scanline7addSpanEiijj>
 80216a0:	e761      	b.n	8021566 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080216a2 <_ZN8touchgfx6Canvas6renderEv>:
 80216a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80216a4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80216a8:	4604      	mov	r4, r0
 80216aa:	b913      	cbnz	r3, 80216b2 <_ZN8touchgfx6Canvas6renderEv+0x10>
 80216ac:	2001      	movs	r0, #1
 80216ae:	b003      	add	sp, #12
 80216b0:	bd30      	pop	{r4, r5, pc}
 80216b2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80216b6:	2b00      	cmp	r3, #0
 80216b8:	d131      	bne.n	802171e <_ZN8touchgfx6Canvas6renderEv+0x7c>
 80216ba:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 80216be:	2b00      	cmp	r3, #0
 80216c0:	d0f4      	beq.n	80216ac <_ZN8touchgfx6Canvas6renderEv+0xa>
 80216c2:	6840      	ldr	r0, [r0, #4]
 80216c4:	6803      	ldr	r3, [r0, #0]
 80216c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80216c8:	4798      	blx	r3
 80216ca:	2800      	cmp	r0, #0
 80216cc:	d0ee      	beq.n	80216ac <_ZN8touchgfx6Canvas6renderEv+0xa>
 80216ce:	4620      	mov	r0, r4
 80216d0:	f7ff fec7 	bl	8021462 <_ZN8touchgfx6Canvas5closeEv>
 80216d4:	6860      	ldr	r0, [r4, #4]
 80216d6:	6803      	ldr	r3, [r0, #0]
 80216d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80216da:	4798      	blx	r3
 80216dc:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 80216e0:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80216e4:	f7f3 fd3b 	bl	801515e <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 80216e8:	6860      	ldr	r0, [r4, #4]
 80216ea:	6803      	ldr	r3, [r0, #0]
 80216ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80216ee:	4798      	blx	r3
 80216f0:	4605      	mov	r5, r0
 80216f2:	6860      	ldr	r0, [r4, #4]
 80216f4:	6803      	ldr	r3, [r0, #0]
 80216f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80216f8:	4798      	blx	r3
 80216fa:	4601      	mov	r1, r0
 80216fc:	4628      	mov	r0, r5
 80216fe:	f7f3 fd31 	bl	8015164 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8021702:	6860      	ldr	r0, [r4, #4]
 8021704:	6803      	ldr	r3, [r0, #0]
 8021706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021708:	4798      	blx	r3
 802170a:	f104 0318 	add.w	r3, r4, #24
 802170e:	4669      	mov	r1, sp
 8021710:	e9cd 3000 	strd	r3, r0, [sp]
 8021714:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8021718:	f7ff ff06 	bl	8021528 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802171c:	e7c7      	b.n	80216ae <_ZN8touchgfx6Canvas6renderEv+0xc>
 802171e:	2000      	movs	r0, #0
 8021720:	e7c5      	b.n	80216ae <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08021724 <_ZN8touchgfx6CanvasD1Ev>:
 8021724:	b538      	push	{r3, r4, r5, lr}
 8021726:	4605      	mov	r5, r0
 8021728:	4b08      	ldr	r3, [pc, #32]	; (802174c <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802172a:	4604      	mov	r4, r0
 802172c:	f845 3b2c 	str.w	r3, [r5], #44
 8021730:	4b07      	ldr	r3, [pc, #28]	; (8021750 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8021732:	6818      	ldr	r0, [r3, #0]
 8021734:	6803      	ldr	r3, [r0, #0]
 8021736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021738:	4798      	blx	r3
 802173a:	4628      	mov	r0, r5
 802173c:	f000 f814 	bl	8021768 <_ZN8touchgfx7OutlineD1Ev>
 8021740:	f104 0018 	add.w	r0, r4, #24
 8021744:	f001 f870 	bl	8022828 <_ZN8touchgfx15RenderingBufferD1Ev>
 8021748:	4620      	mov	r0, r4
 802174a:	bd38      	pop	{r3, r4, r5, pc}
 802174c:	08027890 	.word	0x08027890
 8021750:	2000b468 	.word	0x2000b468

08021754 <_ZN8touchgfx6CanvasD0Ev>:
 8021754:	b510      	push	{r4, lr}
 8021756:	4604      	mov	r4, r0
 8021758:	f7ff ffe4 	bl	8021724 <_ZN8touchgfx6CanvasD1Ev>
 802175c:	21b8      	movs	r1, #184	; 0xb8
 802175e:	4620      	mov	r0, r4
 8021760:	f001 f873 	bl	802284a <_ZdlPvj>
 8021764:	4620      	mov	r0, r4
 8021766:	bd10      	pop	{r4, pc}

08021768 <_ZN8touchgfx7OutlineD1Ev>:
 8021768:	4770      	bx	lr

0802176a <_ZN8touchgfx7OutlineD0Ev>:
 802176a:	b510      	push	{r4, lr}
 802176c:	4604      	mov	r4, r0
 802176e:	2148      	movs	r1, #72	; 0x48
 8021770:	f001 f86b 	bl	802284a <_ZdlPvj>
 8021774:	4620      	mov	r0, r4
 8021776:	bd10      	pop	{r4, pc}

08021778 <_ZN8touchgfx7Outline5resetEv>:
 8021778:	b510      	push	{r4, lr}
 802177a:	4604      	mov	r4, r0
 802177c:	f7f4 f8b6 	bl	80158ec <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8021780:	60e0      	str	r0, [r4, #12]
 8021782:	f7f4 f8b9 	bl	80158f8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8021786:	68e3      	ldr	r3, [r4, #12]
 8021788:	2200      	movs	r2, #0
 802178a:	08c0      	lsrs	r0, r0, #3
 802178c:	6123      	str	r3, [r4, #16]
 802178e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021792:	6060      	str	r0, [r4, #4]
 8021794:	82a3      	strh	r3, [r4, #20]
 8021796:	82e3      	strh	r3, [r4, #22]
 8021798:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802179a:	60a2      	str	r2, [r4, #8]
 802179c:	f023 0301 	bic.w	r3, r3, #1
 80217a0:	8322      	strh	r2, [r4, #24]
 80217a2:	8362      	strh	r2, [r4, #26]
 80217a4:	f043 0302 	orr.w	r3, r3, #2
 80217a8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80217ac:	63e3      	str	r3, [r4, #60]	; 0x3c
 80217ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80217b2:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80217b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80217ba:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80217be:	bd10      	pop	{r4, pc}

080217c0 <_ZN8touchgfx7OutlineC1Ev>:
 80217c0:	4b0f      	ldr	r3, [pc, #60]	; (8021800 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80217c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80217c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80217ca:	b510      	push	{r4, lr}
 80217cc:	6003      	str	r3, [r0, #0]
 80217ce:	2300      	movs	r3, #0
 80217d0:	4604      	mov	r4, r0
 80217d2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80217d6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80217da:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80217de:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80217e2:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80217e6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80217ea:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80217ee:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80217f2:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80217f6:	f7ff ffbf 	bl	8021778 <_ZN8touchgfx7Outline5resetEv>
 80217fa:	4620      	mov	r0, r4
 80217fc:	bd10      	pop	{r4, pc}
 80217fe:	bf00      	nop
 8021800:	080278f0 	.word	0x080278f0

08021804 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8021804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021808:	b093      	sub	sp, #76	; 0x4c
 802180a:	4604      	mov	r4, r0
 802180c:	1156      	asrs	r6, r2, #5
 802180e:	f002 0e1f 	and.w	lr, r2, #31
 8021812:	981c      	ldr	r0, [sp, #112]	; 0x70
 8021814:	9305      	str	r3, [sp, #20]
 8021816:	1143      	asrs	r3, r0, #5
 8021818:	1145      	asrs	r5, r0, #5
 802181a:	930c      	str	r3, [sp, #48]	; 0x30
 802181c:	f000 031f 	and.w	r3, r0, #31
 8021820:	9303      	str	r3, [sp, #12]
 8021822:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021824:	42b3      	cmp	r3, r6
 8021826:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021828:	bfc8      	it	gt
 802182a:	6326      	strgt	r6, [r4, #48]	; 0x30
 802182c:	42b3      	cmp	r3, r6
 802182e:	bfdc      	itt	le
 8021830:	1c73      	addle	r3, r6, #1
 8021832:	63a3      	strle	r3, [r4, #56]	; 0x38
 8021834:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021836:	42ab      	cmp	r3, r5
 8021838:	bfc8      	it	gt
 802183a:	462b      	movgt	r3, r5
 802183c:	ea4f 1560 	mov.w	r5, r0, asr #5
 8021840:	bfc8      	it	gt
 8021842:	6323      	strgt	r3, [r4, #48]	; 0x30
 8021844:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021846:	42ab      	cmp	r3, r5
 8021848:	bfd8      	it	le
 802184a:	462b      	movle	r3, r5
 802184c:	ea4f 1561 	mov.w	r5, r1, asr #5
 8021850:	bfdc      	itt	le
 8021852:	3301      	addle	r3, #1
 8021854:	63a3      	strle	r3, [r4, #56]	; 0x38
 8021856:	9b05      	ldr	r3, [sp, #20]
 8021858:	eba3 0a01 	sub.w	sl, r3, r1
 802185c:	1143      	asrs	r3, r0, #5
 802185e:	429e      	cmp	r6, r3
 8021860:	f040 8119 	bne.w	8021a96 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8021864:	9b05      	ldr	r3, [sp, #20]
 8021866:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802186a:	9b03      	ldr	r3, [sp, #12]
 802186c:	459e      	cmp	lr, r3
 802186e:	d12c      	bne.n	80218ca <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8021870:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8021874:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8021878:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802187c:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8021880:	4291      	cmp	r1, r2
 8021882:	d037      	beq.n	80218f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8021884:	8b61      	ldrh	r1, [r4, #26]
 8021886:	8b22      	ldrh	r2, [r4, #24]
 8021888:	430a      	orrs	r2, r1
 802188a:	d00b      	beq.n	80218a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802188c:	2b00      	cmp	r3, #0
 802188e:	db09      	blt.n	80218a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8021890:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8021892:	429a      	cmp	r2, r3
 8021894:	dd06      	ble.n	80218a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8021896:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802189a:	429a      	cmp	r2, r3
 802189c:	d308      	bcc.n	80218b0 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 802189e:	2301      	movs	r3, #1
 80218a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80218a4:	f8a4 c014 	strh.w	ip, [r4, #20]
 80218a8:	82e6      	strh	r6, [r4, #22]
 80218aa:	2300      	movs	r3, #0
 80218ac:	8323      	strh	r3, [r4, #24]
 80218ae:	e0c6      	b.n	8021a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80218b0:	f104 0314 	add.w	r3, r4, #20
 80218b4:	6922      	ldr	r2, [r4, #16]
 80218b6:	cb03      	ldmia	r3!, {r0, r1}
 80218b8:	6010      	str	r0, [r2, #0]
 80218ba:	6051      	str	r1, [r2, #4]
 80218bc:	6923      	ldr	r3, [r4, #16]
 80218be:	3308      	adds	r3, #8
 80218c0:	6123      	str	r3, [r4, #16]
 80218c2:	68a3      	ldr	r3, [r4, #8]
 80218c4:	3301      	adds	r3, #1
 80218c6:	60a3      	str	r3, [r4, #8]
 80218c8:	e7ec      	b.n	80218a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80218ca:	9b05      	ldr	r3, [sp, #20]
 80218cc:	45ac      	cmp	ip, r5
 80218ce:	f001 011f 	and.w	r1, r1, #31
 80218d2:	8b20      	ldrh	r0, [r4, #24]
 80218d4:	f003 031f 	and.w	r3, r3, #31
 80218d8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80218dc:	9304      	str	r3, [sp, #16]
 80218de:	9b03      	ldr	r3, [sp, #12]
 80218e0:	eba3 020e 	sub.w	r2, r3, lr
 80218e4:	d109      	bne.n	80218fa <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 80218e6:	9b04      	ldr	r3, [sp, #16]
 80218e8:	4410      	add	r0, r2
 80218ea:	4419      	add	r1, r3
 80218ec:	8320      	strh	r0, [r4, #24]
 80218ee:	fb02 8201 	mla	r2, r2, r1, r8
 80218f2:	8362      	strh	r2, [r4, #26]
 80218f4:	b013      	add	sp, #76	; 0x4c
 80218f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218fa:	f1ba 0f00 	cmp.w	sl, #0
 80218fe:	f2c0 80a0 	blt.w	8021a42 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8021902:	f1c1 0320 	rsb	r3, r1, #32
 8021906:	f04f 0b20 	mov.w	fp, #32
 802190a:	435a      	muls	r2, r3
 802190c:	2301      	movs	r3, #1
 802190e:	9302      	str	r3, [sp, #8]
 8021910:	4459      	add	r1, fp
 8021912:	fb92 f7fa 	sdiv	r7, r2, sl
 8021916:	fb0a 2217 	mls	r2, sl, r7, r2
 802191a:	2a00      	cmp	r2, #0
 802191c:	bfbc      	itt	lt
 802191e:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8021922:	4452      	addlt	r2, sl
 8021924:	fb07 8101 	mla	r1, r7, r1, r8
 8021928:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802192c:	4438      	add	r0, r7
 802192e:	b20b      	sxth	r3, r1
 8021930:	9902      	ldr	r1, [sp, #8]
 8021932:	b200      	sxth	r0, r0
 8021934:	9301      	str	r3, [sp, #4]
 8021936:	8363      	strh	r3, [r4, #26]
 8021938:	186b      	adds	r3, r5, r1
 802193a:	0435      	lsls	r5, r6, #16
 802193c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8021940:	8320      	strh	r0, [r4, #24]
 8021942:	eb03 0905 	add.w	r9, r3, r5
 8021946:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 802194a:	9300      	str	r3, [sp, #0]
 802194c:	45c1      	cmp	r9, r8
 802194e:	9505      	str	r5, [sp, #20]
 8021950:	d014      	beq.n	802197c <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8021952:	9b01      	ldr	r3, [sp, #4]
 8021954:	4303      	orrs	r3, r0
 8021956:	d00b      	beq.n	8021970 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8021958:	2900      	cmp	r1, #0
 802195a:	db09      	blt.n	8021970 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802195c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802195e:	428b      	cmp	r3, r1
 8021960:	dd06      	ble.n	8021970 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8021962:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8021966:	4299      	cmp	r1, r3
 8021968:	d374      	bcc.n	8021a54 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 802196a:	2301      	movs	r3, #1
 802196c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021970:	9b00      	ldr	r3, [sp, #0]
 8021972:	82e6      	strh	r6, [r4, #22]
 8021974:	82a3      	strh	r3, [r4, #20]
 8021976:	2300      	movs	r3, #0
 8021978:	8323      	strh	r3, [r4, #24]
 802197a:	8363      	strh	r3, [r4, #26]
 802197c:	9900      	ldr	r1, [sp, #0]
 802197e:	eb0e 0307 	add.w	r3, lr, r7
 8021982:	458c      	cmp	ip, r1
 8021984:	d04e      	beq.n	8021a24 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8021986:	9903      	ldr	r1, [sp, #12]
 8021988:	eba2 020a 	sub.w	r2, r2, sl
 802198c:	1ac9      	subs	r1, r1, r3
 802198e:	9201      	str	r2, [sp, #4]
 8021990:	440f      	add	r7, r1
 8021992:	017f      	lsls	r7, r7, #5
 8021994:	fb97 fefa 	sdiv	lr, r7, sl
 8021998:	fb0a 771e 	mls	r7, sl, lr, r7
 802199c:	2f00      	cmp	r7, #0
 802199e:	bfbc      	itt	lt
 80219a0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80219a4:	4457      	addlt	r7, sl
 80219a6:	f10e 0101 	add.w	r1, lr, #1
 80219aa:	9106      	str	r1, [sp, #24]
 80219ac:	9a01      	ldr	r2, [sp, #4]
 80219ae:	8b20      	ldrh	r0, [r4, #24]
 80219b0:	19d2      	adds	r2, r2, r7
 80219b2:	8b61      	ldrh	r1, [r4, #26]
 80219b4:	9d02      	ldr	r5, [sp, #8]
 80219b6:	9201      	str	r2, [sp, #4]
 80219b8:	bf5b      	ittet	pl
 80219ba:	eba2 020a 	subpl.w	r2, r2, sl
 80219be:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 80219c2:	46f0      	movmi	r8, lr
 80219c4:	9201      	strpl	r2, [sp, #4]
 80219c6:	9a00      	ldr	r2, [sp, #0]
 80219c8:	4440      	add	r0, r8
 80219ca:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80219ce:	4443      	add	r3, r8
 80219d0:	442a      	add	r2, r5
 80219d2:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80219d6:	9d05      	ldr	r5, [sp, #20]
 80219d8:	b200      	sxth	r0, r0
 80219da:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80219de:	b209      	sxth	r1, r1
 80219e0:	4415      	add	r5, r2
 80219e2:	8320      	strh	r0, [r4, #24]
 80219e4:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80219e8:	8361      	strh	r1, [r4, #26]
 80219ea:	9200      	str	r2, [sp, #0]
 80219ec:	454d      	cmp	r5, r9
 80219ee:	d016      	beq.n	8021a1e <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 80219f0:	4301      	orrs	r1, r0
 80219f2:	d00d      	beq.n	8021a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80219f4:	f1b8 0f00 	cmp.w	r8, #0
 80219f8:	db0a      	blt.n	8021a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80219fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80219fc:	4541      	cmp	r1, r8
 80219fe:	dd07      	ble.n	8021a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8021a00:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8021a04:	4288      	cmp	r0, r1
 8021a06:	d335      	bcc.n	8021a74 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8021a08:	f04f 0101 	mov.w	r1, #1
 8021a0c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8021a10:	9900      	ldr	r1, [sp, #0]
 8021a12:	82e6      	strh	r6, [r4, #22]
 8021a14:	82a1      	strh	r1, [r4, #20]
 8021a16:	f04f 0100 	mov.w	r1, #0
 8021a1a:	8321      	strh	r1, [r4, #24]
 8021a1c:	8361      	strh	r1, [r4, #26]
 8021a1e:	9a00      	ldr	r2, [sp, #0]
 8021a20:	4594      	cmp	ip, r2
 8021a22:	d1c3      	bne.n	80219ac <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8021a24:	9a03      	ldr	r2, [sp, #12]
 8021a26:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8021a2a:	1ad3      	subs	r3, r2, r3
 8021a2c:	8b22      	ldrh	r2, [r4, #24]
 8021a2e:	441a      	add	r2, r3
 8021a30:	8322      	strh	r2, [r4, #24]
 8021a32:	9a04      	ldr	r2, [sp, #16]
 8021a34:	3220      	adds	r2, #32
 8021a36:	eba2 020b 	sub.w	r2, r2, fp
 8021a3a:	fb03 c302 	mla	r3, r3, r2, ip
 8021a3e:	8363      	strh	r3, [r4, #26]
 8021a40:	e758      	b.n	80218f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8021a42:	f04f 33ff 	mov.w	r3, #4294967295
 8021a46:	434a      	muls	r2, r1
 8021a48:	f1ca 0a00 	rsb	sl, sl, #0
 8021a4c:	f04f 0b00 	mov.w	fp, #0
 8021a50:	9302      	str	r3, [sp, #8]
 8021a52:	e75d      	b.n	8021910 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8021a54:	f104 0314 	add.w	r3, r4, #20
 8021a58:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8021a5c:	cb03      	ldmia	r3!, {r0, r1}
 8021a5e:	f8c8 0000 	str.w	r0, [r8]
 8021a62:	f8c8 1004 	str.w	r1, [r8, #4]
 8021a66:	6923      	ldr	r3, [r4, #16]
 8021a68:	3308      	adds	r3, #8
 8021a6a:	6123      	str	r3, [r4, #16]
 8021a6c:	68a3      	ldr	r3, [r4, #8]
 8021a6e:	3301      	adds	r3, #1
 8021a70:	60a3      	str	r3, [r4, #8]
 8021a72:	e77d      	b.n	8021970 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8021a74:	f104 0814 	add.w	r8, r4, #20
 8021a78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021a7c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8021a80:	f8c9 0000 	str.w	r0, [r9]
 8021a84:	f8c9 1004 	str.w	r1, [r9, #4]
 8021a88:	6921      	ldr	r1, [r4, #16]
 8021a8a:	3108      	adds	r1, #8
 8021a8c:	6121      	str	r1, [r4, #16]
 8021a8e:	68a1      	ldr	r1, [r4, #8]
 8021a90:	3101      	adds	r1, #1
 8021a92:	60a1      	str	r1, [r4, #8]
 8021a94:	e7bc      	b.n	8021a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8021a96:	1a83      	subs	r3, r0, r2
 8021a98:	9301      	str	r3, [sp, #4]
 8021a9a:	f1ba 0f00 	cmp.w	sl, #0
 8021a9e:	f040 8094 	bne.w	8021bca <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8021aa2:	9a01      	ldr	r2, [sp, #4]
 8021aa4:	0049      	lsls	r1, r1, #1
 8021aa6:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8021aaa:	2a00      	cmp	r2, #0
 8021aac:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8021ab0:	8b62      	ldrh	r2, [r4, #26]
 8021ab2:	bfaa      	itet	ge
 8021ab4:	f04f 0a20 	movge.w	sl, #32
 8021ab8:	f04f 38ff 	movlt.w	r8, #4294967295
 8021abc:	f04f 0801 	movge.w	r8, #1
 8021ac0:	8b21      	ldrh	r1, [r4, #24]
 8021ac2:	ebaa 0e0e 	sub.w	lr, sl, lr
 8021ac6:	4471      	add	r1, lr
 8021ac8:	fb0e 2e03 	mla	lr, lr, r3, r2
 8021acc:	eb08 0206 	add.w	r2, r8, r6
 8021ad0:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8021ad4:	b209      	sxth	r1, r1
 8021ad6:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8021ada:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8021ade:	8321      	strh	r1, [r4, #24]
 8021ae0:	fa0f fe8e 	sxth.w	lr, lr
 8021ae4:	42b7      	cmp	r7, r6
 8021ae6:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8021aea:	d013      	beq.n	8021b14 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8021aec:	ea51 010e 	orrs.w	r1, r1, lr
 8021af0:	d00b      	beq.n	8021b0a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8021af2:	2800      	cmp	r0, #0
 8021af4:	db09      	blt.n	8021b0a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8021af6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021af8:	4281      	cmp	r1, r0
 8021afa:	dd06      	ble.n	8021b0a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8021afc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8021b00:	4288      	cmp	r0, r1
 8021b02:	d339      	bcc.n	8021b78 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8021b04:	2101      	movs	r1, #1
 8021b06:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8021b0a:	2100      	movs	r1, #0
 8021b0c:	82a5      	strh	r5, [r4, #20]
 8021b0e:	82e2      	strh	r2, [r4, #22]
 8021b10:	8321      	strh	r1, [r4, #24]
 8021b12:	8361      	strh	r1, [r4, #26]
 8021b14:	f1aa 0610 	sub.w	r6, sl, #16
 8021b18:	f04f 0e00 	mov.w	lr, #0
 8021b1c:	f04f 0b01 	mov.w	fp, #1
 8021b20:	0076      	lsls	r6, r6, #1
 8021b22:	fb06 f703 	mul.w	r7, r6, r3
 8021b26:	b236      	sxth	r6, r6
 8021b28:	b23f      	sxth	r7, r7
 8021b2a:	ea46 0107 	orr.w	r1, r6, r7
 8021b2e:	9100      	str	r1, [sp, #0]
 8021b30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021b32:	428a      	cmp	r2, r1
 8021b34:	d03e      	beq.n	8021bb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8021b36:	4442      	add	r2, r8
 8021b38:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8021b3c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8021b40:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8021b44:	8326      	strh	r6, [r4, #24]
 8021b46:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8021b4a:	8367      	strh	r7, [r4, #26]
 8021b4c:	4584      	cmp	ip, r0
 8021b4e:	d0ef      	beq.n	8021b30 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8021b50:	9800      	ldr	r0, [sp, #0]
 8021b52:	b150      	cbz	r0, 8021b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8021b54:	2900      	cmp	r1, #0
 8021b56:	db08      	blt.n	8021b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8021b58:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8021b5a:	4288      	cmp	r0, r1
 8021b5c:	dd05      	ble.n	8021b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8021b5e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8021b62:	4288      	cmp	r0, r1
 8021b64:	d315      	bcc.n	8021b92 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8021b66:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8021b6a:	82a5      	strh	r5, [r4, #20]
 8021b6c:	82e2      	strh	r2, [r4, #22]
 8021b6e:	f8a4 e018 	strh.w	lr, [r4, #24]
 8021b72:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8021b76:	e7db      	b.n	8021b30 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8021b78:	f104 0614 	add.w	r6, r4, #20
 8021b7c:	6927      	ldr	r7, [r4, #16]
 8021b7e:	ce03      	ldmia	r6!, {r0, r1}
 8021b80:	6038      	str	r0, [r7, #0]
 8021b82:	6079      	str	r1, [r7, #4]
 8021b84:	6921      	ldr	r1, [r4, #16]
 8021b86:	3108      	adds	r1, #8
 8021b88:	6121      	str	r1, [r4, #16]
 8021b8a:	68a1      	ldr	r1, [r4, #8]
 8021b8c:	3101      	adds	r1, #1
 8021b8e:	60a1      	str	r1, [r4, #8]
 8021b90:	e7bb      	b.n	8021b0a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8021b92:	f104 0c14 	add.w	ip, r4, #20
 8021b96:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021b9a:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8021b9e:	f8c9 0000 	str.w	r0, [r9]
 8021ba2:	f8c9 1004 	str.w	r1, [r9, #4]
 8021ba6:	6921      	ldr	r1, [r4, #16]
 8021ba8:	3108      	adds	r1, #8
 8021baa:	6121      	str	r1, [r4, #16]
 8021bac:	68a1      	ldr	r1, [r4, #8]
 8021bae:	3101      	adds	r1, #1
 8021bb0:	60a1      	str	r1, [r4, #8]
 8021bb2:	e7da      	b.n	8021b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8021bb4:	9a03      	ldr	r2, [sp, #12]
 8021bb6:	8b61      	ldrh	r1, [r4, #26]
 8021bb8:	f1a2 0c20 	sub.w	ip, r2, #32
 8021bbc:	8b22      	ldrh	r2, [r4, #24]
 8021bbe:	44d4      	add	ip, sl
 8021bc0:	4462      	add	r2, ip
 8021bc2:	fb0c 1303 	mla	r3, ip, r3, r1
 8021bc6:	8322      	strh	r2, [r4, #24]
 8021bc8:	e739      	b.n	8021a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8021bca:	9b01      	ldr	r3, [sp, #4]
 8021bcc:	2b00      	cmp	r3, #0
 8021bce:	db3f      	blt.n	8021c50 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8021bd0:	2201      	movs	r2, #1
 8021bd2:	f1ce 0320 	rsb	r3, lr, #32
 8021bd6:	920b      	str	r2, [sp, #44]	; 0x2c
 8021bd8:	2220      	movs	r2, #32
 8021bda:	fb0a f303 	mul.w	r3, sl, r3
 8021bde:	9202      	str	r2, [sp, #8]
 8021be0:	9a01      	ldr	r2, [sp, #4]
 8021be2:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8021be6:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8021bea:	fb93 f7f2 	sdiv	r7, r3, r2
 8021bee:	fb02 3317 	mls	r3, r2, r7, r3
 8021bf2:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8021bf6:	2b00      	cmp	r3, #0
 8021bf8:	9308      	str	r3, [sp, #32]
 8021bfa:	bfbc      	itt	lt
 8021bfc:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8021c00:	189b      	addlt	r3, r3, r2
 8021c02:	eb07 0b01 	add.w	fp, r7, r1
 8021c06:	bfb8      	it	lt
 8021c08:	9308      	strlt	r3, [sp, #32]
 8021c0a:	ea4f 136b 	mov.w	r3, fp, asr #5
 8021c0e:	9304      	str	r3, [sp, #16]
 8021c10:	9b02      	ldr	r3, [sp, #8]
 8021c12:	4573      	cmp	r3, lr
 8021c14:	d133      	bne.n	8021c7e <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8021c16:	9b04      	ldr	r3, [sp, #16]
 8021c18:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8021c1c:	454b      	cmp	r3, r9
 8021c1e:	d045      	beq.n	8021cac <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8021c20:	8b62      	ldrh	r2, [r4, #26]
 8021c22:	8b23      	ldrh	r3, [r4, #24]
 8021c24:	4313      	orrs	r3, r2
 8021c26:	d00c      	beq.n	8021c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8021c28:	f1b8 0f00 	cmp.w	r8, #0
 8021c2c:	db09      	blt.n	8021c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8021c2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021c30:	4543      	cmp	r3, r8
 8021c32:	dd06      	ble.n	8021c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8021c34:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8021c38:	429a      	cmp	r2, r3
 8021c3a:	d313      	bcc.n	8021c64 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8021c3c:	2301      	movs	r3, #1
 8021c3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021c42:	9b04      	ldr	r3, [sp, #16]
 8021c44:	82e6      	strh	r6, [r4, #22]
 8021c46:	82a3      	strh	r3, [r4, #20]
 8021c48:	2300      	movs	r3, #0
 8021c4a:	8323      	strh	r3, [r4, #24]
 8021c4c:	8363      	strh	r3, [r4, #26]
 8021c4e:	e02d      	b.n	8021cac <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8021c50:	9a01      	ldr	r2, [sp, #4]
 8021c52:	fb0a f30e 	mul.w	r3, sl, lr
 8021c56:	4252      	negs	r2, r2
 8021c58:	9201      	str	r2, [sp, #4]
 8021c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8021c5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8021c60:	2200      	movs	r2, #0
 8021c62:	e7bc      	b.n	8021bde <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8021c64:	f104 0314 	add.w	r3, r4, #20
 8021c68:	6922      	ldr	r2, [r4, #16]
 8021c6a:	cb03      	ldmia	r3!, {r0, r1}
 8021c6c:	6010      	str	r0, [r2, #0]
 8021c6e:	6051      	str	r1, [r2, #4]
 8021c70:	6923      	ldr	r3, [r4, #16]
 8021c72:	3308      	adds	r3, #8
 8021c74:	6123      	str	r3, [r4, #16]
 8021c76:	68a3      	ldr	r3, [r4, #8]
 8021c78:	3301      	adds	r3, #1
 8021c7a:	60a3      	str	r3, [r4, #8]
 8021c7c:	e7e1      	b.n	8021c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8021c7e:	f00b 031f 	and.w	r3, fp, #31
 8021c82:	f001 011f 	and.w	r1, r1, #31
 8021c86:	8b20      	ldrh	r0, [r4, #24]
 8021c88:	9309      	str	r3, [sp, #36]	; 0x24
 8021c8a:	9b02      	ldr	r3, [sp, #8]
 8021c8c:	eba3 020e 	sub.w	r2, r3, lr
 8021c90:	8b63      	ldrh	r3, [r4, #26]
 8021c92:	9300      	str	r3, [sp, #0]
 8021c94:	9b04      	ldr	r3, [sp, #16]
 8021c96:	42ab      	cmp	r3, r5
 8021c98:	f040 80ef 	bne.w	8021e7a <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8021c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c9e:	4410      	add	r0, r2
 8021ca0:	4419      	add	r1, r3
 8021ca2:	9b00      	ldr	r3, [sp, #0]
 8021ca4:	8320      	strh	r0, [r4, #24]
 8021ca6:	fb02 3101 	mla	r1, r2, r1, r3
 8021caa:	8361      	strh	r1, [r4, #26]
 8021cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021cae:	9904      	ldr	r1, [sp, #16]
 8021cb0:	4433      	add	r3, r6
 8021cb2:	9300      	str	r3, [sp, #0]
 8021cb4:	9a00      	ldr	r2, [sp, #0]
 8021cb6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8021cba:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8021cbe:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8021cc2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021cc6:	4288      	cmp	r0, r1
 8021cc8:	d018      	beq.n	8021cfc <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8021cca:	8b60      	ldrh	r0, [r4, #26]
 8021ccc:	8b21      	ldrh	r1, [r4, #24]
 8021cce:	ea50 0201 	orrs.w	r2, r0, r1
 8021cd2:	d00c      	beq.n	8021cee <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8021cd4:	2b00      	cmp	r3, #0
 8021cd6:	db0a      	blt.n	8021cee <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8021cd8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021cda:	4299      	cmp	r1, r3
 8021cdc:	dd07      	ble.n	8021cee <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8021cde:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8021ce2:	4299      	cmp	r1, r3
 8021ce4:	f0c0 818b 	bcc.w	8021ffe <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8021ce8:	2301      	movs	r3, #1
 8021cea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021cee:	9b04      	ldr	r3, [sp, #16]
 8021cf0:	82a3      	strh	r3, [r4, #20]
 8021cf2:	9b00      	ldr	r3, [sp, #0]
 8021cf4:	82e3      	strh	r3, [r4, #22]
 8021cf6:	2300      	movs	r3, #0
 8021cf8:	8323      	strh	r3, [r4, #24]
 8021cfa:	8363      	strh	r3, [r4, #26]
 8021cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021cfe:	9a00      	ldr	r2, [sp, #0]
 8021d00:	4293      	cmp	r3, r2
 8021d02:	f000 808d 	beq.w	8021e20 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8021d06:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8021d0a:	9901      	ldr	r1, [sp, #4]
 8021d0c:	9801      	ldr	r0, [sp, #4]
 8021d0e:	fb93 f1f1 	sdiv	r1, r3, r1
 8021d12:	fb00 3311 	mls	r3, r0, r1, r3
 8021d16:	9106      	str	r1, [sp, #24]
 8021d18:	2b00      	cmp	r3, #0
 8021d1a:	9307      	str	r3, [sp, #28]
 8021d1c:	da04      	bge.n	8021d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8021d1e:	1e4b      	subs	r3, r1, #1
 8021d20:	9306      	str	r3, [sp, #24]
 8021d22:	9b07      	ldr	r3, [sp, #28]
 8021d24:	4403      	add	r3, r0
 8021d26:	9307      	str	r3, [sp, #28]
 8021d28:	9b08      	ldr	r3, [sp, #32]
 8021d2a:	f04f 0c00 	mov.w	ip, #0
 8021d2e:	9901      	ldr	r1, [sp, #4]
 8021d30:	1a5b      	subs	r3, r3, r1
 8021d32:	4659      	mov	r1, fp
 8021d34:	9308      	str	r3, [sp, #32]
 8021d36:	9b02      	ldr	r3, [sp, #8]
 8021d38:	f1c3 0320 	rsb	r3, r3, #32
 8021d3c:	930a      	str	r3, [sp, #40]	; 0x28
 8021d3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021d40:	9b02      	ldr	r3, [sp, #8]
 8021d42:	1a1b      	subs	r3, r3, r0
 8021d44:	9309      	str	r3, [sp, #36]	; 0x24
 8021d46:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8021d4a:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8021d4e:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8021d52:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8021d56:	181b      	adds	r3, r3, r0
 8021d58:	bf58      	it	pl
 8021d5a:	9801      	ldrpl	r0, [sp, #4]
 8021d5c:	9308      	str	r3, [sp, #32]
 8021d5e:	bf54      	ite	pl
 8021d60:	1a1b      	subpl	r3, r3, r0
 8021d62:	9d06      	ldrmi	r5, [sp, #24]
 8021d64:	9802      	ldr	r0, [sp, #8]
 8021d66:	bf5e      	ittt	pl
 8021d68:	9308      	strpl	r3, [sp, #32]
 8021d6a:	9b06      	ldrpl	r3, [sp, #24]
 8021d6c:	1c5d      	addpl	r5, r3, #1
 8021d6e:	44ab      	add	fp, r5
 8021d70:	ea4f 136b 	mov.w	r3, fp, asr #5
 8021d74:	9304      	str	r3, [sp, #16]
 8021d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d78:	4283      	cmp	r3, r0
 8021d7a:	f040 815a 	bne.w	8022032 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8021d7e:	9b04      	ldr	r3, [sp, #16]
 8021d80:	9a00      	ldr	r2, [sp, #0]
 8021d82:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8021d86:	4543      	cmp	r3, r8
 8021d88:	d01a      	beq.n	8021dc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8021d8a:	8b61      	ldrh	r1, [r4, #26]
 8021d8c:	8b23      	ldrh	r3, [r4, #24]
 8021d8e:	430b      	orrs	r3, r1
 8021d90:	d00e      	beq.n	8021db0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8021d92:	f1be 0f00 	cmp.w	lr, #0
 8021d96:	db0b      	blt.n	8021db0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8021d98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021d9a:	4573      	cmp	r3, lr
 8021d9c:	dd08      	ble.n	8021db0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8021d9e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8021da2:	4299      	cmp	r1, r3
 8021da4:	f0c0 8138 	bcc.w	8022018 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8021da8:	f04f 0301 	mov.w	r3, #1
 8021dac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021db0:	9b04      	ldr	r3, [sp, #16]
 8021db2:	f8a4 c018 	strh.w	ip, [r4, #24]
 8021db6:	82a3      	strh	r3, [r4, #20]
 8021db8:	9b00      	ldr	r3, [sp, #0]
 8021dba:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8021dbe:	82e3      	strh	r3, [r4, #22]
 8021dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021dc2:	9a00      	ldr	r2, [sp, #0]
 8021dc4:	441a      	add	r2, r3
 8021dc6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8021dca:	9200      	str	r2, [sp, #0]
 8021dcc:	9900      	ldr	r1, [sp, #0]
 8021dce:	9a04      	ldr	r2, [sp, #16]
 8021dd0:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8021dd4:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8021dd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021ddc:	4288      	cmp	r0, r1
 8021dde:	d01a      	beq.n	8021e16 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8021de0:	8b60      	ldrh	r0, [r4, #26]
 8021de2:	8b21      	ldrh	r1, [r4, #24]
 8021de4:	ea50 0201 	orrs.w	r2, r0, r1
 8021de8:	d00d      	beq.n	8021e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8021dea:	2b00      	cmp	r3, #0
 8021dec:	db0b      	blt.n	8021e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8021dee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021df0:	4299      	cmp	r1, r3
 8021df2:	dd08      	ble.n	8021e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8021df4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8021df8:	4299      	cmp	r1, r3
 8021dfa:	f0c0 81f9 	bcc.w	80221f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8021dfe:	f04f 0301 	mov.w	r3, #1
 8021e02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021e06:	9b04      	ldr	r3, [sp, #16]
 8021e08:	f8a4 c018 	strh.w	ip, [r4, #24]
 8021e0c:	82a3      	strh	r3, [r4, #20]
 8021e0e:	9b00      	ldr	r3, [sp, #0]
 8021e10:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8021e14:	82e3      	strh	r3, [r4, #22]
 8021e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e18:	4659      	mov	r1, fp
 8021e1a:	9a00      	ldr	r2, [sp, #0]
 8021e1c:	4293      	cmp	r3, r2
 8021e1e:	d192      	bne.n	8021d46 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8021e20:	9b02      	ldr	r3, [sp, #8]
 8021e22:	f1c3 0c20 	rsb	ip, r3, #32
 8021e26:	9b05      	ldr	r3, [sp, #20]
 8021e28:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8021e2c:	9b03      	ldr	r3, [sp, #12]
 8021e2e:	459c      	cmp	ip, r3
 8021e30:	f040 81f8 	bne.w	8022224 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8021e34:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8021e38:	9a00      	ldr	r2, [sp, #0]
 8021e3a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8021e3e:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8021e42:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021e46:	4288      	cmp	r0, r1
 8021e48:	f43f ad54 	beq.w	80218f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8021e4c:	8b60      	ldrh	r0, [r4, #26]
 8021e4e:	8b21      	ldrh	r1, [r4, #24]
 8021e50:	ea50 0201 	orrs.w	r2, r0, r1
 8021e54:	d00c      	beq.n	8021e70 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	db0a      	blt.n	8021e70 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8021e5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021e5c:	4299      	cmp	r1, r3
 8021e5e:	dd07      	ble.n	8021e70 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8021e60:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8021e64:	4299      	cmp	r1, r3
 8021e66:	f0c0 81d0 	bcc.w	802220a <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8021e6a:	2301      	movs	r3, #1
 8021e6c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021e70:	9b00      	ldr	r3, [sp, #0]
 8021e72:	f8a4 e014 	strh.w	lr, [r4, #20]
 8021e76:	82e3      	strh	r3, [r4, #22]
 8021e78:	e517      	b.n	80218aa <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8021e7a:	2f00      	cmp	r7, #0
 8021e7c:	f2c0 8097 	blt.w	8021fae <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8021e80:	2301      	movs	r3, #1
 8021e82:	f1c1 0c20 	rsb	ip, r1, #32
 8021e86:	9307      	str	r3, [sp, #28]
 8021e88:	2320      	movs	r3, #32
 8021e8a:	fb02 f20c 	mul.w	r2, r2, ip
 8021e8e:	9306      	str	r3, [sp, #24]
 8021e90:	9b06      	ldr	r3, [sp, #24]
 8021e92:	fb92 fcf7 	sdiv	ip, r2, r7
 8021e96:	fb07 221c 	mls	r2, r7, ip, r2
 8021e9a:	4419      	add	r1, r3
 8021e9c:	9b00      	ldr	r3, [sp, #0]
 8021e9e:	2a00      	cmp	r2, #0
 8021ea0:	bfbc      	itt	lt
 8021ea2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8021ea6:	19d2      	addlt	r2, r2, r7
 8021ea8:	fb0c 3101 	mla	r1, ip, r1, r3
 8021eac:	9b07      	ldr	r3, [sp, #28]
 8021eae:	4460      	add	r0, ip
 8021eb0:	441d      	add	r5, r3
 8021eb2:	0433      	lsls	r3, r6, #16
 8021eb4:	b200      	sxth	r0, r0
 8021eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8021eb8:	18eb      	adds	r3, r5, r3
 8021eba:	b209      	sxth	r1, r1
 8021ebc:	8320      	strh	r0, [r4, #24]
 8021ebe:	454b      	cmp	r3, r9
 8021ec0:	8361      	strh	r1, [r4, #26]
 8021ec2:	d014      	beq.n	8021eee <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8021ec4:	ea50 0301 	orrs.w	r3, r0, r1
 8021ec8:	d00c      	beq.n	8021ee4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8021eca:	f1b8 0f00 	cmp.w	r8, #0
 8021ece:	db09      	blt.n	8021ee4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8021ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021ed2:	4543      	cmp	r3, r8
 8021ed4:	dd06      	ble.n	8021ee4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8021ed6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8021eda:	4299      	cmp	r1, r3
 8021edc:	d36e      	bcc.n	8021fbc <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8021ede:	2301      	movs	r3, #1
 8021ee0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021ee4:	2300      	movs	r3, #0
 8021ee6:	82a5      	strh	r5, [r4, #20]
 8021ee8:	82e6      	strh	r6, [r4, #22]
 8021eea:	8323      	strh	r3, [r4, #24]
 8021eec:	8363      	strh	r3, [r4, #26]
 8021eee:	9904      	ldr	r1, [sp, #16]
 8021ef0:	eb0e 030c 	add.w	r3, lr, ip
 8021ef4:	42a9      	cmp	r1, r5
 8021ef6:	d04d      	beq.n	8021f94 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8021ef8:	9902      	ldr	r1, [sp, #8]
 8021efa:	1bd2      	subs	r2, r2, r7
 8021efc:	1ac9      	subs	r1, r1, r3
 8021efe:	9200      	str	r2, [sp, #0]
 8021f00:	448c      	add	ip, r1
 8021f02:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8021f06:	fb9c fef7 	sdiv	lr, ip, r7
 8021f0a:	fb07 cc1e 	mls	ip, r7, lr, ip
 8021f0e:	f1bc 0f00 	cmp.w	ip, #0
 8021f12:	bfbc      	itt	lt
 8021f14:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8021f18:	44bc      	addlt	ip, r7
 8021f1a:	f10e 0101 	add.w	r1, lr, #1
 8021f1e:	910d      	str	r1, [sp, #52]	; 0x34
 8021f20:	9a00      	ldr	r2, [sp, #0]
 8021f22:	8b20      	ldrh	r0, [r4, #24]
 8021f24:	eb12 020c 	adds.w	r2, r2, ip
 8021f28:	8b61      	ldrh	r1, [r4, #26]
 8021f2a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8021f2e:	9200      	str	r2, [sp, #0]
 8021f30:	bf5b      	ittet	pl
 8021f32:	1bd2      	subpl	r2, r2, r7
 8021f34:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8021f38:	46f0      	movmi	r8, lr
 8021f3a:	9200      	strpl	r2, [sp, #0]
 8021f3c:	9a07      	ldr	r2, [sp, #28]
 8021f3e:	4440      	add	r0, r8
 8021f40:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8021f44:	4443      	add	r3, r8
 8021f46:	4415      	add	r5, r2
 8021f48:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8021f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021f4e:	b200      	sxth	r0, r0
 8021f50:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8021f54:	442a      	add	r2, r5
 8021f56:	b209      	sxth	r1, r1
 8021f58:	8320      	strh	r0, [r4, #24]
 8021f5a:	454a      	cmp	r2, r9
 8021f5c:	8361      	strh	r1, [r4, #26]
 8021f5e:	d016      	beq.n	8021f8e <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8021f60:	ea50 0201 	orrs.w	r2, r0, r1
 8021f64:	d00d      	beq.n	8021f82 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8021f66:	f1b8 0f00 	cmp.w	r8, #0
 8021f6a:	db0a      	blt.n	8021f82 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8021f6c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021f6e:	4541      	cmp	r1, r8
 8021f70:	dd07      	ble.n	8021f82 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8021f72:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8021f76:	4288      	cmp	r0, r1
 8021f78:	d330      	bcc.n	8021fdc <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8021f7a:	f04f 0201 	mov.w	r2, #1
 8021f7e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8021f82:	f04f 0200 	mov.w	r2, #0
 8021f86:	82a5      	strh	r5, [r4, #20]
 8021f88:	82e6      	strh	r6, [r4, #22]
 8021f8a:	8322      	strh	r2, [r4, #24]
 8021f8c:	8362      	strh	r2, [r4, #26]
 8021f8e:	9904      	ldr	r1, [sp, #16]
 8021f90:	42a9      	cmp	r1, r5
 8021f92:	d1c5      	bne.n	8021f20 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8021f94:	9a02      	ldr	r2, [sp, #8]
 8021f96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021f98:	1ad3      	subs	r3, r2, r3
 8021f9a:	8b22      	ldrh	r2, [r4, #24]
 8021f9c:	3120      	adds	r1, #32
 8021f9e:	441a      	add	r2, r3
 8021fa0:	8322      	strh	r2, [r4, #24]
 8021fa2:	9a06      	ldr	r2, [sp, #24]
 8021fa4:	1a89      	subs	r1, r1, r2
 8021fa6:	8b62      	ldrh	r2, [r4, #26]
 8021fa8:	fb03 2301 	mla	r3, r3, r1, r2
 8021fac:	e64e      	b.n	8021c4c <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8021fae:	f04f 33ff 	mov.w	r3, #4294967295
 8021fb2:	434a      	muls	r2, r1
 8021fb4:	427f      	negs	r7, r7
 8021fb6:	9307      	str	r3, [sp, #28]
 8021fb8:	2300      	movs	r3, #0
 8021fba:	e768      	b.n	8021e8e <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8021fbc:	f104 0314 	add.w	r3, r4, #20
 8021fc0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8021fc4:	cb03      	ldmia	r3!, {r0, r1}
 8021fc6:	f8c8 0000 	str.w	r0, [r8]
 8021fca:	f8c8 1004 	str.w	r1, [r8, #4]
 8021fce:	6923      	ldr	r3, [r4, #16]
 8021fd0:	3308      	adds	r3, #8
 8021fd2:	6123      	str	r3, [r4, #16]
 8021fd4:	68a3      	ldr	r3, [r4, #8]
 8021fd6:	3301      	adds	r3, #1
 8021fd8:	60a3      	str	r3, [r4, #8]
 8021fda:	e783      	b.n	8021ee4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8021fdc:	f104 0814 	add.w	r8, r4, #20
 8021fe0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021fe4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8021fe8:	f8c9 0000 	str.w	r0, [r9]
 8021fec:	f8c9 1004 	str.w	r1, [r9, #4]
 8021ff0:	6921      	ldr	r1, [r4, #16]
 8021ff2:	3108      	adds	r1, #8
 8021ff4:	6121      	str	r1, [r4, #16]
 8021ff6:	68a1      	ldr	r1, [r4, #8]
 8021ff8:	3101      	adds	r1, #1
 8021ffa:	60a1      	str	r1, [r4, #8]
 8021ffc:	e7c1      	b.n	8021f82 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8021ffe:	f104 0314 	add.w	r3, r4, #20
 8022002:	6925      	ldr	r5, [r4, #16]
 8022004:	cb03      	ldmia	r3!, {r0, r1}
 8022006:	6028      	str	r0, [r5, #0]
 8022008:	6069      	str	r1, [r5, #4]
 802200a:	6923      	ldr	r3, [r4, #16]
 802200c:	3308      	adds	r3, #8
 802200e:	6123      	str	r3, [r4, #16]
 8022010:	68a3      	ldr	r3, [r4, #8]
 8022012:	3301      	adds	r3, #1
 8022014:	60a3      	str	r3, [r4, #8]
 8022016:	e66a      	b.n	8021cee <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8022018:	f104 0314 	add.w	r3, r4, #20
 802201c:	6925      	ldr	r5, [r4, #16]
 802201e:	cb03      	ldmia	r3!, {r0, r1}
 8022020:	6028      	str	r0, [r5, #0]
 8022022:	6069      	str	r1, [r5, #4]
 8022024:	6923      	ldr	r3, [r4, #16]
 8022026:	3308      	adds	r3, #8
 8022028:	6123      	str	r3, [r4, #16]
 802202a:	68a3      	ldr	r3, [r4, #8]
 802202c:	3301      	adds	r3, #1
 802202e:	60a3      	str	r3, [r4, #8]
 8022030:	e6be      	b.n	8021db0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8022032:	f00b 031f 	and.w	r3, fp, #31
 8022036:	114f      	asrs	r7, r1, #5
 8022038:	8b20      	ldrh	r0, [r4, #24]
 802203a:	f001 011f 	and.w	r1, r1, #31
 802203e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022040:	9b04      	ldr	r3, [sp, #16]
 8022042:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8022046:	429f      	cmp	r7, r3
 8022048:	d10a      	bne.n	8022060 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 802204a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802204c:	4418      	add	r0, r3
 802204e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022050:	4419      	add	r1, r3
 8022052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022054:	8320      	strh	r0, [r4, #24]
 8022056:	fb03 9901 	mla	r9, r3, r1, r9
 802205a:	f8a4 901a 	strh.w	r9, [r4, #26]
 802205e:	e6af      	b.n	8021dc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8022060:	2d00      	cmp	r5, #0
 8022062:	f2c0 809b 	blt.w	802219c <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8022066:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022068:	f1c1 0320 	rsb	r3, r1, #32
 802206c:	4373      	muls	r3, r6
 802206e:	2601      	movs	r6, #1
 8022070:	960e      	str	r6, [sp, #56]	; 0x38
 8022072:	2620      	movs	r6, #32
 8022074:	960d      	str	r6, [sp, #52]	; 0x34
 8022076:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022078:	fb93 f6f5 	sdiv	r6, r3, r5
 802207c:	4411      	add	r1, r2
 802207e:	fb05 3316 	mls	r3, r5, r6, r3
 8022082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022084:	2b00      	cmp	r3, #0
 8022086:	4417      	add	r7, r2
 8022088:	9a00      	ldr	r2, [sp, #0]
 802208a:	bfbc      	itt	lt
 802208c:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8022090:	195b      	addlt	r3, r3, r5
 8022092:	0412      	lsls	r2, r2, #16
 8022094:	fb06 9101 	mla	r1, r6, r1, r9
 8022098:	4430      	add	r0, r6
 802209a:	eb07 0902 	add.w	r9, r7, r2
 802209e:	9210      	str	r2, [sp, #64]	; 0x40
 80220a0:	b200      	sxth	r0, r0
 80220a2:	b209      	sxth	r1, r1
 80220a4:	45c1      	cmp	r9, r8
 80220a6:	8320      	strh	r0, [r4, #24]
 80220a8:	8361      	strh	r1, [r4, #26]
 80220aa:	d017      	beq.n	80220dc <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 80220ac:	ea50 0201 	orrs.w	r2, r0, r1
 80220b0:	d00d      	beq.n	80220ce <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80220b2:	f1be 0f00 	cmp.w	lr, #0
 80220b6:	db0a      	blt.n	80220ce <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80220b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80220ba:	4571      	cmp	r1, lr
 80220bc:	dd07      	ble.n	80220ce <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80220be:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80220c2:	4288      	cmp	r0, r1
 80220c4:	d372      	bcc.n	80221ac <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 80220c6:	f04f 0201 	mov.w	r2, #1
 80220ca:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80220ce:	9a00      	ldr	r2, [sp, #0]
 80220d0:	82a7      	strh	r7, [r4, #20]
 80220d2:	82e2      	strh	r2, [r4, #22]
 80220d4:	f8a4 c018 	strh.w	ip, [r4, #24]
 80220d8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80220dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80220de:	eb02 0e06 	add.w	lr, r2, r6
 80220e2:	9a04      	ldr	r2, [sp, #16]
 80220e4:	42ba      	cmp	r2, r7
 80220e6:	d049      	beq.n	802217c <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 80220e8:	9a02      	ldr	r2, [sp, #8]
 80220ea:	1b5b      	subs	r3, r3, r5
 80220ec:	eba2 010e 	sub.w	r1, r2, lr
 80220f0:	440e      	add	r6, r1
 80220f2:	0176      	lsls	r6, r6, #5
 80220f4:	fb96 f8f5 	sdiv	r8, r6, r5
 80220f8:	fb05 6618 	mls	r6, r5, r8, r6
 80220fc:	2e00      	cmp	r6, #0
 80220fe:	bfbc      	itt	lt
 8022100:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8022104:	1976      	addlt	r6, r6, r5
 8022106:	f108 0201 	add.w	r2, r8, #1
 802210a:	9211      	str	r2, [sp, #68]	; 0x44
 802210c:	199b      	adds	r3, r3, r6
 802210e:	8b20      	ldrh	r0, [r4, #24]
 8022110:	8b61      	ldrh	r1, [r4, #26]
 8022112:	bf54      	ite	pl
 8022114:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8022118:	46c1      	movmi	r9, r8
 802211a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802211c:	bf58      	it	pl
 802211e:	1b5b      	subpl	r3, r3, r5
 8022120:	4448      	add	r0, r9
 8022122:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8022126:	4417      	add	r7, r2
 8022128:	44ce      	add	lr, r9
 802212a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802212c:	b200      	sxth	r0, r0
 802212e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8022132:	b209      	sxth	r1, r1
 8022134:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8022138:	443a      	add	r2, r7
 802213a:	8320      	strh	r0, [r4, #24]
 802213c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8022140:	8361      	strh	r1, [r4, #26]
 8022142:	4552      	cmp	r2, sl
 8022144:	d017      	beq.n	8022176 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8022146:	ea50 0201 	orrs.w	r2, r0, r1
 802214a:	d00d      	beq.n	8022168 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802214c:	f1b9 0f00 	cmp.w	r9, #0
 8022150:	db0a      	blt.n	8022168 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8022152:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022154:	4549      	cmp	r1, r9
 8022156:	dd07      	ble.n	8022168 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8022158:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802215c:	4288      	cmp	r0, r1
 802215e:	d336      	bcc.n	80221ce <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8022160:	f04f 0201 	mov.w	r2, #1
 8022164:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022168:	9a00      	ldr	r2, [sp, #0]
 802216a:	82a7      	strh	r7, [r4, #20]
 802216c:	82e2      	strh	r2, [r4, #22]
 802216e:	f8a4 c018 	strh.w	ip, [r4, #24]
 8022172:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8022176:	9a04      	ldr	r2, [sp, #16]
 8022178:	42ba      	cmp	r2, r7
 802217a:	d1c7      	bne.n	802210c <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802217c:	9b02      	ldr	r3, [sp, #8]
 802217e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022180:	eba3 0e0e 	sub.w	lr, r3, lr
 8022184:	8b23      	ldrh	r3, [r4, #24]
 8022186:	3120      	adds	r1, #32
 8022188:	4473      	add	r3, lr
 802218a:	8323      	strh	r3, [r4, #24]
 802218c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802218e:	1ac9      	subs	r1, r1, r3
 8022190:	8b63      	ldrh	r3, [r4, #26]
 8022192:	fb0e 3e01 	mla	lr, lr, r1, r3
 8022196:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802219a:	e611      	b.n	8021dc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802219c:	f04f 36ff 	mov.w	r6, #4294967295
 80221a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221a2:	426d      	negs	r5, r5
 80221a4:	960e      	str	r6, [sp, #56]	; 0x38
 80221a6:	2600      	movs	r6, #0
 80221a8:	434b      	muls	r3, r1
 80221aa:	e763      	b.n	8022074 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 80221ac:	f104 0e14 	add.w	lr, r4, #20
 80221b0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80221b4:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80221b8:	f8c8 0000 	str.w	r0, [r8]
 80221bc:	f8c8 1004 	str.w	r1, [r8, #4]
 80221c0:	6921      	ldr	r1, [r4, #16]
 80221c2:	3108      	adds	r1, #8
 80221c4:	6121      	str	r1, [r4, #16]
 80221c6:	68a1      	ldr	r1, [r4, #8]
 80221c8:	3101      	adds	r1, #1
 80221ca:	60a1      	str	r1, [r4, #8]
 80221cc:	e77f      	b.n	80220ce <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80221ce:	f104 0914 	add.w	r9, r4, #20
 80221d2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80221d6:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80221da:	f8ca 0000 	str.w	r0, [sl]
 80221de:	f8ca 1004 	str.w	r1, [sl, #4]
 80221e2:	6921      	ldr	r1, [r4, #16]
 80221e4:	3108      	adds	r1, #8
 80221e6:	6121      	str	r1, [r4, #16]
 80221e8:	68a1      	ldr	r1, [r4, #8]
 80221ea:	3101      	adds	r1, #1
 80221ec:	60a1      	str	r1, [r4, #8]
 80221ee:	e7bb      	b.n	8022168 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80221f0:	f104 0314 	add.w	r3, r4, #20
 80221f4:	6925      	ldr	r5, [r4, #16]
 80221f6:	cb03      	ldmia	r3!, {r0, r1}
 80221f8:	6028      	str	r0, [r5, #0]
 80221fa:	6069      	str	r1, [r5, #4]
 80221fc:	6923      	ldr	r3, [r4, #16]
 80221fe:	3308      	adds	r3, #8
 8022200:	6123      	str	r3, [r4, #16]
 8022202:	68a3      	ldr	r3, [r4, #8]
 8022204:	3301      	adds	r3, #1
 8022206:	60a3      	str	r3, [r4, #8]
 8022208:	e5fd      	b.n	8021e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802220a:	f104 0314 	add.w	r3, r4, #20
 802220e:	6925      	ldr	r5, [r4, #16]
 8022210:	cb03      	ldmia	r3!, {r0, r1}
 8022212:	6028      	str	r0, [r5, #0]
 8022214:	6069      	str	r1, [r5, #4]
 8022216:	6923      	ldr	r3, [r4, #16]
 8022218:	3308      	adds	r3, #8
 802221a:	6123      	str	r3, [r4, #16]
 802221c:	68a3      	ldr	r3, [r4, #8]
 802221e:	3301      	adds	r3, #1
 8022220:	60a3      	str	r3, [r4, #8]
 8022222:	e625      	b.n	8021e70 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8022224:	9b05      	ldr	r3, [sp, #20]
 8022226:	ea4f 176b 	mov.w	r7, fp, asr #5
 802222a:	f00b 081f 	and.w	r8, fp, #31
 802222e:	8b20      	ldrh	r0, [r4, #24]
 8022230:	f003 031f 	and.w	r3, r3, #31
 8022234:	4577      	cmp	r7, lr
 8022236:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802223a:	9302      	str	r3, [sp, #8]
 802223c:	9b03      	ldr	r3, [sp, #12]
 802223e:	eba3 050c 	sub.w	r5, r3, ip
 8022242:	d108      	bne.n	8022256 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8022244:	9b02      	ldr	r3, [sp, #8]
 8022246:	4428      	add	r0, r5
 8022248:	4498      	add	r8, r3
 802224a:	8320      	strh	r0, [r4, #24]
 802224c:	fb05 9508 	mla	r5, r5, r8, r9
 8022250:	8365      	strh	r5, [r4, #26]
 8022252:	f7ff bb4f 	b.w	80218f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8022256:	9b05      	ldr	r3, [sp, #20]
 8022258:	ebb3 030b 	subs.w	r3, r3, fp
 802225c:	f100 809c 	bmi.w	8022398 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8022260:	f1c8 0120 	rsb	r1, r8, #32
 8022264:	2201      	movs	r2, #1
 8022266:	f04f 0b20 	mov.w	fp, #32
 802226a:	434d      	muls	r5, r1
 802226c:	9201      	str	r2, [sp, #4]
 802226e:	9a01      	ldr	r2, [sp, #4]
 8022270:	44d8      	add	r8, fp
 8022272:	fb95 f6f3 	sdiv	r6, r5, r3
 8022276:	fb03 5516 	mls	r5, r3, r6, r5
 802227a:	4417      	add	r7, r2
 802227c:	9a00      	ldr	r2, [sp, #0]
 802227e:	2d00      	cmp	r5, #0
 8022280:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8022284:	bfbc      	itt	lt
 8022286:	f106 36ff 	addlt.w	r6, r6, #4294967295
 802228a:	18ed      	addlt	r5, r5, r3
 802228c:	eb07 0a02 	add.w	sl, r7, r2
 8022290:	9204      	str	r2, [sp, #16]
 8022292:	fb06 9808 	mla	r8, r6, r8, r9
 8022296:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802229a:	4430      	add	r0, r6
 802229c:	fa0f f188 	sxth.w	r1, r8
 80222a0:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80222a4:	b200      	sxth	r0, r0
 80222a6:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80222aa:	8361      	strh	r1, [r4, #26]
 80222ac:	8320      	strh	r0, [r4, #24]
 80222ae:	45ca      	cmp	sl, r9
 80222b0:	d015      	beq.n	80222de <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 80222b2:	ea50 0201 	orrs.w	r2, r0, r1
 80222b6:	d00c      	beq.n	80222d2 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80222b8:	f1b8 0f00 	cmp.w	r8, #0
 80222bc:	db09      	blt.n	80222d2 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80222be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80222c0:	4541      	cmp	r1, r8
 80222c2:	dd06      	ble.n	80222d2 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80222c4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80222c8:	4288      	cmp	r0, r1
 80222ca:	d36e      	bcc.n	80223aa <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 80222cc:	2101      	movs	r1, #1
 80222ce:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80222d2:	2100      	movs	r1, #0
 80222d4:	9a00      	ldr	r2, [sp, #0]
 80222d6:	82a7      	strh	r7, [r4, #20]
 80222d8:	82e2      	strh	r2, [r4, #22]
 80222da:	8321      	strh	r1, [r4, #24]
 80222dc:	8361      	strh	r1, [r4, #26]
 80222de:	45be      	cmp	lr, r7
 80222e0:	44b4      	add	ip, r6
 80222e2:	d048      	beq.n	8022376 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 80222e4:	9a03      	ldr	r2, [sp, #12]
 80222e6:	1aed      	subs	r5, r5, r3
 80222e8:	eba2 010c 	sub.w	r1, r2, ip
 80222ec:	440e      	add	r6, r1
 80222ee:	0176      	lsls	r6, r6, #5
 80222f0:	fb96 f8f3 	sdiv	r8, r6, r3
 80222f4:	fb03 6618 	mls	r6, r3, r8, r6
 80222f8:	2e00      	cmp	r6, #0
 80222fa:	bfbc      	itt	lt
 80222fc:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8022300:	18f6      	addlt	r6, r6, r3
 8022302:	f108 0201 	add.w	r2, r8, #1
 8022306:	9205      	str	r2, [sp, #20]
 8022308:	19ad      	adds	r5, r5, r6
 802230a:	8b20      	ldrh	r0, [r4, #24]
 802230c:	8b61      	ldrh	r1, [r4, #26]
 802230e:	bf54      	ite	pl
 8022310:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8022314:	46c1      	movmi	r9, r8
 8022316:	9a01      	ldr	r2, [sp, #4]
 8022318:	bf58      	it	pl
 802231a:	1aed      	subpl	r5, r5, r3
 802231c:	4448      	add	r0, r9
 802231e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8022322:	4417      	add	r7, r2
 8022324:	44cc      	add	ip, r9
 8022326:	9a04      	ldr	r2, [sp, #16]
 8022328:	b200      	sxth	r0, r0
 802232a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802232e:	b209      	sxth	r1, r1
 8022330:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8022334:	443a      	add	r2, r7
 8022336:	8320      	strh	r0, [r4, #24]
 8022338:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802233c:	8361      	strh	r1, [r4, #26]
 802233e:	4552      	cmp	r2, sl
 8022340:	d017      	beq.n	8022372 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8022342:	ea50 0201 	orrs.w	r2, r0, r1
 8022346:	d00d      	beq.n	8022364 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8022348:	f1b9 0f00 	cmp.w	r9, #0
 802234c:	db0a      	blt.n	8022364 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802234e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022350:	4549      	cmp	r1, r9
 8022352:	dd07      	ble.n	8022364 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8022354:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022358:	4288      	cmp	r0, r1
 802235a:	d337      	bcc.n	80223cc <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 802235c:	f04f 0201 	mov.w	r2, #1
 8022360:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022364:	9a00      	ldr	r2, [sp, #0]
 8022366:	82a7      	strh	r7, [r4, #20]
 8022368:	82e2      	strh	r2, [r4, #22]
 802236a:	f04f 0200 	mov.w	r2, #0
 802236e:	8322      	strh	r2, [r4, #24]
 8022370:	8362      	strh	r2, [r4, #26]
 8022372:	45be      	cmp	lr, r7
 8022374:	d1c8      	bne.n	8022308 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8022376:	9b03      	ldr	r3, [sp, #12]
 8022378:	8b62      	ldrh	r2, [r4, #26]
 802237a:	eba3 0c0c 	sub.w	ip, r3, ip
 802237e:	8b23      	ldrh	r3, [r4, #24]
 8022380:	4463      	add	r3, ip
 8022382:	8323      	strh	r3, [r4, #24]
 8022384:	9b02      	ldr	r3, [sp, #8]
 8022386:	3320      	adds	r3, #32
 8022388:	eba3 030b 	sub.w	r3, r3, fp
 802238c:	fb0c 2c03 	mla	ip, ip, r3, r2
 8022390:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8022394:	f7ff baae 	b.w	80218f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8022398:	f04f 32ff 	mov.w	r2, #4294967295
 802239c:	fb05 f508 	mul.w	r5, r5, r8
 80223a0:	425b      	negs	r3, r3
 80223a2:	f04f 0b00 	mov.w	fp, #0
 80223a6:	9201      	str	r2, [sp, #4]
 80223a8:	e761      	b.n	802226e <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80223aa:	f104 0814 	add.w	r8, r4, #20
 80223ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80223b2:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80223b6:	f8c9 0000 	str.w	r0, [r9]
 80223ba:	f8c9 1004 	str.w	r1, [r9, #4]
 80223be:	6921      	ldr	r1, [r4, #16]
 80223c0:	3108      	adds	r1, #8
 80223c2:	6121      	str	r1, [r4, #16]
 80223c4:	68a1      	ldr	r1, [r4, #8]
 80223c6:	3101      	adds	r1, #1
 80223c8:	60a1      	str	r1, [r4, #8]
 80223ca:	e782      	b.n	80222d2 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80223cc:	f104 0914 	add.w	r9, r4, #20
 80223d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80223d4:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80223d8:	f8ca 0000 	str.w	r0, [sl]
 80223dc:	f8ca 1004 	str.w	r1, [sl, #4]
 80223e0:	6921      	ldr	r1, [r4, #16]
 80223e2:	3108      	adds	r1, #8
 80223e4:	6121      	str	r1, [r4, #16]
 80223e6:	68a1      	ldr	r1, [r4, #8]
 80223e8:	3101      	adds	r1, #1
 80223ea:	60a1      	str	r1, [r4, #8]
 80223ec:	e7ba      	b.n	8022364 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

080223ee <_ZN8touchgfx7Outline6lineToEii>:
 80223ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80223f0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80223f2:	4604      	mov	r4, r0
 80223f4:	460d      	mov	r5, r1
 80223f6:	4616      	mov	r6, r2
 80223f8:	079b      	lsls	r3, r3, #30
 80223fa:	d526      	bpl.n	802244a <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80223fc:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8022400:	ea85 0001 	eor.w	r0, r5, r1
 8022404:	ea86 0302 	eor.w	r3, r6, r2
 8022408:	4303      	orrs	r3, r0
 802240a:	d01e      	beq.n	802244a <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802240c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802240e:	114b      	asrs	r3, r1, #5
 8022410:	9600      	str	r6, [sp, #0]
 8022412:	4283      	cmp	r3, r0
 8022414:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8022416:	bfb8      	it	lt
 8022418:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802241a:	3301      	adds	r3, #1
 802241c:	4283      	cmp	r3, r0
 802241e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8022420:	bfc8      	it	gt
 8022422:	6363      	strgt	r3, [r4, #52]	; 0x34
 8022424:	116b      	asrs	r3, r5, #5
 8022426:	4283      	cmp	r3, r0
 8022428:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802242a:	bfb8      	it	lt
 802242c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802242e:	3301      	adds	r3, #1
 8022430:	4283      	cmp	r3, r0
 8022432:	4620      	mov	r0, r4
 8022434:	bfc8      	it	gt
 8022436:	6363      	strgt	r3, [r4, #52]	; 0x34
 8022438:	462b      	mov	r3, r5
 802243a:	f7ff f9e3 	bl	8021804 <_ZN8touchgfx7Outline10renderLineEiiii>
 802243e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022440:	f043 0301 	orr.w	r3, r3, #1
 8022444:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8022448:	63e3      	str	r3, [r4, #60]	; 0x3c
 802244a:	b002      	add	sp, #8
 802244c:	bd70      	pop	{r4, r5, r6, pc}

0802244e <_ZN8touchgfx7Outline6moveToEii>:
 802244e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022450:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8022452:	4615      	mov	r5, r2
 8022454:	4604      	mov	r4, r0
 8022456:	460e      	mov	r6, r1
 8022458:	079a      	lsls	r2, r3, #30
 802245a:	d401      	bmi.n	8022460 <_ZN8touchgfx7Outline6moveToEii+0x12>
 802245c:	f7ff f98c 	bl	8021778 <_ZN8touchgfx7Outline5resetEv>
 8022460:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022462:	07db      	lsls	r3, r3, #31
 8022464:	d504      	bpl.n	8022470 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8022466:	4620      	mov	r0, r4
 8022468:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802246c:	f7ff ffbf 	bl	80223ee <_ZN8touchgfx7Outline6lineToEii>
 8022470:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8022474:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022478:	116f      	asrs	r7, r5, #5
 802247a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802247e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8022482:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8022486:	4291      	cmp	r1, r2
 8022488:	d015      	beq.n	80224b6 <_ZN8touchgfx7Outline6moveToEii+0x68>
 802248a:	8b61      	ldrh	r1, [r4, #26]
 802248c:	8b22      	ldrh	r2, [r4, #24]
 802248e:	430a      	orrs	r2, r1
 8022490:	d00b      	beq.n	80224aa <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8022492:	2b00      	cmp	r3, #0
 8022494:	db09      	blt.n	80224aa <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8022496:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022498:	429a      	cmp	r2, r3
 802249a:	dd06      	ble.n	80224aa <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802249c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80224a0:	429a      	cmp	r2, r3
 80224a2:	d30d      	bcc.n	80224c0 <_ZN8touchgfx7Outline6moveToEii+0x72>
 80224a4:	2301      	movs	r3, #1
 80224a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80224aa:	2300      	movs	r3, #0
 80224ac:	f8a4 c014 	strh.w	ip, [r4, #20]
 80224b0:	82e7      	strh	r7, [r4, #22]
 80224b2:	8323      	strh	r3, [r4, #24]
 80224b4:	8363      	strh	r3, [r4, #26]
 80224b6:	61e6      	str	r6, [r4, #28]
 80224b8:	62a5      	str	r5, [r4, #40]	; 0x28
 80224ba:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80224be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80224c0:	f104 0314 	add.w	r3, r4, #20
 80224c4:	6922      	ldr	r2, [r4, #16]
 80224c6:	cb03      	ldmia	r3!, {r0, r1}
 80224c8:	6010      	str	r0, [r2, #0]
 80224ca:	6051      	str	r1, [r2, #4]
 80224cc:	6923      	ldr	r3, [r4, #16]
 80224ce:	3308      	adds	r3, #8
 80224d0:	6123      	str	r3, [r4, #16]
 80224d2:	68a3      	ldr	r3, [r4, #8]
 80224d4:	3301      	adds	r3, #1
 80224d6:	60a3      	str	r3, [r4, #8]
 80224d8:	e7e7      	b.n	80224aa <_ZN8touchgfx7Outline6moveToEii+0x5c>

080224da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80224da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224de:	b0d1      	sub	sp, #324	; 0x144
 80224e0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80224e4:	466c      	mov	r4, sp
 80224e6:	1a0d      	subs	r5, r1, r0
 80224e8:	f100 0208 	add.w	r2, r0, #8
 80224ec:	2d48      	cmp	r5, #72	; 0x48
 80224ee:	f340 80ba 	ble.w	8022666 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80224f2:	112d      	asrs	r5, r5, #4
 80224f4:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80224f8:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80224fc:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8022500:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8022504:	f9b0 8000 	ldrsh.w	r8, [r0]
 8022508:	681e      	ldr	r6, [r3, #0]
 802250a:	6006      	str	r6, [r0, #0]
 802250c:	685e      	ldr	r6, [r3, #4]
 802250e:	6046      	str	r6, [r0, #4]
 8022510:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8022514:	f8a3 c004 	strh.w	ip, [r3, #4]
 8022518:	f8a3 e002 	strh.w	lr, [r3, #2]
 802251c:	80df      	strh	r7, [r3, #6]
 802251e:	f1a1 0308 	sub.w	r3, r1, #8
 8022522:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8022526:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802252a:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802252e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8022532:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8022536:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802253a:	45ac      	cmp	ip, r5
 802253c:	dd0f      	ble.n	802255e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802253e:	681d      	ldr	r5, [r3, #0]
 8022540:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8022544:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8022548:	6015      	str	r5, [r2, #0]
 802254a:	685d      	ldr	r5, [r3, #4]
 802254c:	6055      	str	r5, [r2, #4]
 802254e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8022552:	f821 6c06 	strh.w	r6, [r1, #-6]
 8022556:	f821 ec04 	strh.w	lr, [r1, #-4]
 802255a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802255e:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8022562:	f9b0 7000 	ldrsh.w	r7, [r0]
 8022566:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802256a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802256e:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8022572:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8022576:	4565      	cmp	r5, ip
 8022578:	dd0d      	ble.n	8022596 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802257a:	6815      	ldr	r5, [r2, #0]
 802257c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8022580:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8022584:	6005      	str	r5, [r0, #0]
 8022586:	6855      	ldr	r5, [r2, #4]
 8022588:	8107      	strh	r7, [r0, #8]
 802258a:	6045      	str	r5, [r0, #4]
 802258c:	8146      	strh	r6, [r0, #10]
 802258e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8022592:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8022596:	f9b0 7000 	ldrsh.w	r7, [r0]
 802259a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802259e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80225a2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80225a6:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80225aa:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80225ae:	45ac      	cmp	ip, r5
 80225b0:	dd0f      	ble.n	80225d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80225b2:	681d      	ldr	r5, [r3, #0]
 80225b4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80225b8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80225bc:	6005      	str	r5, [r0, #0]
 80225be:	685d      	ldr	r5, [r3, #4]
 80225c0:	6045      	str	r5, [r0, #4]
 80225c2:	f821 7c08 	strh.w	r7, [r1, #-8]
 80225c6:	f821 6c06 	strh.w	r6, [r1, #-6]
 80225ca:	f821 ec04 	strh.w	lr, [r1, #-4]
 80225ce:	f821 cc02 	strh.w	ip, [r1, #-2]
 80225d2:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80225d6:	f102 0508 	add.w	r5, r2, #8
 80225da:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80225de:	f9b0 e000 	ldrsh.w	lr, [r0]
 80225e2:	462f      	mov	r7, r5
 80225e4:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80225e8:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 80225ec:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 80225f0:	45b2      	cmp	sl, r6
 80225f2:	dc18      	bgt.n	8022626 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 80225f4:	3b08      	subs	r3, #8
 80225f6:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80225fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80225fe:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8022602:	45b2      	cmp	sl, r6
 8022604:	dbf6      	blt.n	80225f4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8022606:	42ab      	cmp	r3, r5
 8022608:	681e      	ldr	r6, [r3, #0]
 802260a:	d30e      	bcc.n	802262a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802260c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8022610:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8022614:	602e      	str	r6, [r5, #0]
 8022616:	685e      	ldr	r6, [r3, #4]
 8022618:	606e      	str	r6, [r5, #4]
 802261a:	f8a3 9000 	strh.w	r9, [r3]
 802261e:	f8a3 8002 	strh.w	r8, [r3, #2]
 8022622:	809f      	strh	r7, [r3, #4]
 8022624:	80da      	strh	r2, [r3, #6]
 8022626:	462a      	mov	r2, r5
 8022628:	e7d3      	b.n	80225d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802262a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802262e:	6006      	str	r6, [r0, #0]
 8022630:	685e      	ldr	r6, [r3, #4]
 8022632:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8022636:	6046      	str	r6, [r0, #4]
 8022638:	1a1e      	subs	r6, r3, r0
 802263a:	80da      	strh	r2, [r3, #6]
 802263c:	1b4a      	subs	r2, r1, r5
 802263e:	f8a3 e000 	strh.w	lr, [r3]
 8022642:	10d2      	asrs	r2, r2, #3
 8022644:	f8a3 c002 	strh.w	ip, [r3, #2]
 8022648:	f8a3 8004 	strh.w	r8, [r3, #4]
 802264c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8022650:	bfb5      	itete	lt
 8022652:	e9c4 0300 	strdlt	r0, r3, [r4]
 8022656:	4607      	movge	r7, r0
 8022658:	460b      	movlt	r3, r1
 802265a:	e9c4 5100 	strdge	r5, r1, [r4]
 802265e:	4638      	mov	r0, r7
 8022660:	3408      	adds	r4, #8
 8022662:	4619      	mov	r1, r3
 8022664:	e73f      	b.n	80224e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8022666:	4291      	cmp	r1, r2
 8022668:	d925      	bls.n	80226b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802266a:	f1a2 0310 	sub.w	r3, r2, #16
 802266e:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8022672:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8022676:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802267a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802267e:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8022682:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8022686:	42b5      	cmp	r5, r6
 8022688:	dd13      	ble.n	80226b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802268a:	461d      	mov	r5, r3
 802268c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8022690:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8022694:	3b08      	subs	r3, #8
 8022696:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802269a:	619e      	str	r6, [r3, #24]
 802269c:	42a8      	cmp	r0, r5
 802269e:	686e      	ldr	r6, [r5, #4]
 80226a0:	f8a3 c010 	strh.w	ip, [r3, #16]
 80226a4:	61de      	str	r6, [r3, #28]
 80226a6:	825f      	strh	r7, [r3, #18]
 80226a8:	f8a3 8014 	strh.w	r8, [r3, #20]
 80226ac:	f8a3 e016 	strh.w	lr, [r3, #22]
 80226b0:	d1dd      	bne.n	802266e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80226b2:	3208      	adds	r2, #8
 80226b4:	e7d7      	b.n	8022666 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80226b6:	466b      	mov	r3, sp
 80226b8:	429c      	cmp	r4, r3
 80226ba:	d903      	bls.n	80226c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80226bc:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80226c0:	3c08      	subs	r4, #8
 80226c2:	e710      	b.n	80224e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80226c4:	b051      	add	sp, #324	; 0x144
 80226c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080226ca <_ZN8touchgfx7Outline9sortCellsEv>:
 80226ca:	6881      	ldr	r1, [r0, #8]
 80226cc:	b111      	cbz	r1, 80226d4 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 80226ce:	68c0      	ldr	r0, [r0, #12]
 80226d0:	f7ff bf03 	b.w	80224da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80226d4:	4770      	bx	lr

080226d6 <_ZN8touchgfx7Outline8getCellsEv>:
 80226d6:	b510      	push	{r4, lr}
 80226d8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80226da:	4604      	mov	r4, r0
 80226dc:	07da      	lsls	r2, r3, #31
 80226de:	d507      	bpl.n	80226f0 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80226e0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 80226e4:	f7ff fe83 	bl	80223ee <_ZN8touchgfx7Outline6lineToEii>
 80226e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80226ea:	f023 0301 	bic.w	r3, r3, #1
 80226ee:	63e3      	str	r3, [r4, #60]	; 0x3c
 80226f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80226f2:	079b      	lsls	r3, r3, #30
 80226f4:	d51a      	bpl.n	802272c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 80226f6:	8b62      	ldrh	r2, [r4, #26]
 80226f8:	8b23      	ldrh	r3, [r4, #24]
 80226fa:	4313      	orrs	r3, r2
 80226fc:	d00d      	beq.n	802271a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80226fe:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022702:	2b00      	cmp	r3, #0
 8022704:	db09      	blt.n	802271a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8022706:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022708:	4293      	cmp	r3, r2
 802270a:	da06      	bge.n	802271a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802270c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8022710:	429a      	cmp	r2, r3
 8022712:	d80d      	bhi.n	8022730 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8022714:	2301      	movs	r3, #1
 8022716:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802271a:	68a0      	ldr	r0, [r4, #8]
 802271c:	b138      	cbz	r0, 802272e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802271e:	4620      	mov	r0, r4
 8022720:	f7ff ffd3 	bl	80226ca <_ZN8touchgfx7Outline9sortCellsEv>
 8022724:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022726:	f023 0302 	bic.w	r3, r3, #2
 802272a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802272c:	68e0      	ldr	r0, [r4, #12]
 802272e:	bd10      	pop	{r4, pc}
 8022730:	f104 0314 	add.w	r3, r4, #20
 8022734:	6922      	ldr	r2, [r4, #16]
 8022736:	cb03      	ldmia	r3!, {r0, r1}
 8022738:	6010      	str	r0, [r2, #0]
 802273a:	6051      	str	r1, [r2, #4]
 802273c:	6923      	ldr	r3, [r4, #16]
 802273e:	3308      	adds	r3, #8
 8022740:	6123      	str	r3, [r4, #16]
 8022742:	68a3      	ldr	r3, [r4, #8]
 8022744:	3301      	adds	r3, #1
 8022746:	60a3      	str	r3, [r4, #8]
 8022748:	e7e7      	b.n	802271a <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802274a <_ZN8touchgfx8ScanlineD1Ev>:
 802274a:	4770      	bx	lr

0802274c <_ZN8touchgfx8ScanlineD0Ev>:
 802274c:	b510      	push	{r4, lr}
 802274e:	4604      	mov	r4, r0
 8022750:	2124      	movs	r1, #36	; 0x24
 8022752:	f000 f87a 	bl	802284a <_ZdlPvj>
 8022756:	4620      	mov	r0, r4
 8022758:	bd10      	pop	{r4, pc}

0802275a <_ZN8touchgfx8Scanline5resetEv>:
 802275a:	b510      	push	{r4, lr}
 802275c:	4604      	mov	r4, r0
 802275e:	f7f3 f8b3 	bl	80158c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8022762:	61a0      	str	r0, [r4, #24]
 8022764:	f7f3 f8b6 	bl	80158d4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8022768:	61e0      	str	r0, [r4, #28]
 802276a:	f7f3 f8b9 	bl	80158e0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802276e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022772:	6220      	str	r0, [r4, #32]
 8022774:	6160      	str	r0, [r4, #20]
 8022776:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802277a:	69e3      	ldr	r3, [r4, #28]
 802277c:	6123      	str	r3, [r4, #16]
 802277e:	2300      	movs	r3, #0
 8022780:	60e3      	str	r3, [r4, #12]
 8022782:	bd10      	pop	{r4, pc}

08022784 <_ZN8touchgfx8ScanlineC1Ev>:
 8022784:	4b07      	ldr	r3, [pc, #28]	; (80227a4 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8022786:	b510      	push	{r4, lr}
 8022788:	6003      	str	r3, [r0, #0]
 802278a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802278e:	4604      	mov	r4, r0
 8022790:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8022794:	2300      	movs	r3, #0
 8022796:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802279a:	6143      	str	r3, [r0, #20]
 802279c:	f7ff ffdd 	bl	802275a <_ZN8touchgfx8Scanline5resetEv>
 80227a0:	4620      	mov	r0, r4
 80227a2:	bd10      	pop	{r4, pc}
 80227a4:	08027900 	.word	0x08027900

080227a8 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80227a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80227ac:	1e0c      	subs	r4, r1, #0
 80227ae:	4605      	mov	r5, r0
 80227b0:	4617      	mov	r7, r2
 80227b2:	461e      	mov	r6, r3
 80227b4:	da03      	bge.n	80227be <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80227b6:	4426      	add	r6, r4
 80227b8:	2e01      	cmp	r6, #1
 80227ba:	d421      	bmi.n	8022800 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80227bc:	2400      	movs	r4, #0
 80227be:	f7f3 f87d 	bl	80158bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80227c2:	42a0      	cmp	r0, r4
 80227c4:	d91c      	bls.n	8022800 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80227c6:	eb04 0806 	add.w	r8, r4, r6
 80227ca:	f7f3 f877 	bl	80158bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80227ce:	4580      	cmp	r8, r0
 80227d0:	d902      	bls.n	80227d8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 80227d2:	f7f3 f873 	bl	80158bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80227d6:	1b06      	subs	r6, r0, r4
 80227d8:	69a8      	ldr	r0, [r5, #24]
 80227da:	4632      	mov	r2, r6
 80227dc:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80227e0:	4420      	add	r0, r4
 80227e2:	f7f4 fdb0 	bl	8017346 <_ZN8touchgfx6memsetEPvhm>
 80227e6:	686b      	ldr	r3, [r5, #4]
 80227e8:	b2b2      	uxth	r2, r6
 80227ea:	3301      	adds	r3, #1
 80227ec:	42a3      	cmp	r3, r4
 80227ee:	696b      	ldr	r3, [r5, #20]
 80227f0:	d108      	bne.n	8022804 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 80227f2:	8819      	ldrh	r1, [r3, #0]
 80227f4:	440a      	add	r2, r1
 80227f6:	801a      	strh	r2, [r3, #0]
 80227f8:	3c01      	subs	r4, #1
 80227fa:	4434      	add	r4, r6
 80227fc:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8022800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022804:	1c99      	adds	r1, r3, #2
 8022806:	6169      	str	r1, [r5, #20]
 8022808:	805a      	strh	r2, [r3, #2]
 802280a:	692b      	ldr	r3, [r5, #16]
 802280c:	1c9a      	adds	r2, r3, #2
 802280e:	612a      	str	r2, [r5, #16]
 8022810:	805c      	strh	r4, [r3, #2]
 8022812:	68eb      	ldr	r3, [r5, #12]
 8022814:	3301      	adds	r3, #1
 8022816:	60eb      	str	r3, [r5, #12]
 8022818:	e7ee      	b.n	80227f8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802281a <_ZN8touchgfx15RenderingBufferC1Ev>:
 802281a:	2200      	movs	r2, #0
 802281c:	6002      	str	r2, [r0, #0]
 802281e:	7102      	strb	r2, [r0, #4]
 8022820:	6102      	str	r2, [r0, #16]
 8022822:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8022826:	4770      	bx	lr

08022828 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8022828:	4770      	bx	lr

0802282a <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802282a:	6083      	str	r3, [r0, #8]
 802282c:	9b00      	ldr	r3, [sp, #0]
 802282e:	6001      	str	r1, [r0, #0]
 8022830:	60c3      	str	r3, [r0, #12]
 8022832:	9b01      	ldr	r3, [sp, #4]
 8022834:	7102      	strb	r2, [r0, #4]
 8022836:	6103      	str	r3, [r0, #16]
 8022838:	4770      	bx	lr

0802283a <__aeabi_atexit>:
 802283a:	460b      	mov	r3, r1
 802283c:	4601      	mov	r1, r0
 802283e:	4618      	mov	r0, r3
 8022840:	f000 b852 	b.w	80228e8 <__cxa_atexit>

08022844 <__cxa_pure_virtual>:
 8022844:	b508      	push	{r3, lr}
 8022846:	f000 f81f 	bl	8022888 <_ZSt9terminatev>

0802284a <_ZdlPvj>:
 802284a:	f000 b80f 	b.w	802286c <_ZdlPv>

0802284e <__cxa_guard_acquire>:
 802284e:	6803      	ldr	r3, [r0, #0]
 8022850:	07db      	lsls	r3, r3, #31
 8022852:	d406      	bmi.n	8022862 <__cxa_guard_acquire+0x14>
 8022854:	7843      	ldrb	r3, [r0, #1]
 8022856:	b103      	cbz	r3, 802285a <__cxa_guard_acquire+0xc>
 8022858:	deff      	udf	#255	; 0xff
 802285a:	2301      	movs	r3, #1
 802285c:	7043      	strb	r3, [r0, #1]
 802285e:	4618      	mov	r0, r3
 8022860:	4770      	bx	lr
 8022862:	2000      	movs	r0, #0
 8022864:	4770      	bx	lr

08022866 <__cxa_guard_release>:
 8022866:	2301      	movs	r3, #1
 8022868:	6003      	str	r3, [r0, #0]
 802286a:	4770      	bx	lr

0802286c <_ZdlPv>:
 802286c:	f000 b88e 	b.w	802298c <free>

08022870 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022870:	b508      	push	{r3, lr}
 8022872:	4780      	blx	r0
 8022874:	f000 f80d 	bl	8022892 <abort>

08022878 <_ZSt13get_terminatev>:
 8022878:	4b02      	ldr	r3, [pc, #8]	; (8022884 <_ZSt13get_terminatev+0xc>)
 802287a:	6818      	ldr	r0, [r3, #0]
 802287c:	f3bf 8f5b 	dmb	ish
 8022880:	4770      	bx	lr
 8022882:	bf00      	nop
 8022884:	20000094 	.word	0x20000094

08022888 <_ZSt9terminatev>:
 8022888:	b508      	push	{r3, lr}
 802288a:	f7ff fff5 	bl	8022878 <_ZSt13get_terminatev>
 802288e:	f7ff ffef 	bl	8022870 <_ZN10__cxxabiv111__terminateEPFvvE>

08022892 <abort>:
 8022892:	b508      	push	{r3, lr}
 8022894:	2006      	movs	r0, #6
 8022896:	f000 fc3d 	bl	8023114 <raise>
 802289a:	2001      	movs	r0, #1
 802289c:	f7e0 fa52 	bl	8002d44 <_exit>

080228a0 <__assert_func>:
 80228a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80228a2:	461c      	mov	r4, r3
 80228a4:	4b09      	ldr	r3, [pc, #36]	; (80228cc <__assert_func+0x2c>)
 80228a6:	681b      	ldr	r3, [r3, #0]
 80228a8:	4605      	mov	r5, r0
 80228aa:	68d8      	ldr	r0, [r3, #12]
 80228ac:	b152      	cbz	r2, 80228c4 <__assert_func+0x24>
 80228ae:	4b08      	ldr	r3, [pc, #32]	; (80228d0 <__assert_func+0x30>)
 80228b0:	9100      	str	r1, [sp, #0]
 80228b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80228b6:	4907      	ldr	r1, [pc, #28]	; (80228d4 <__assert_func+0x34>)
 80228b8:	462b      	mov	r3, r5
 80228ba:	4622      	mov	r2, r4
 80228bc:	f000 f828 	bl	8022910 <fiprintf>
 80228c0:	f7ff ffe7 	bl	8022892 <abort>
 80228c4:	4b04      	ldr	r3, [pc, #16]	; (80228d8 <__assert_func+0x38>)
 80228c6:	461a      	mov	r2, r3
 80228c8:	e7f2      	b.n	80228b0 <__assert_func+0x10>
 80228ca:	bf00      	nop
 80228cc:	20000098 	.word	0x20000098
 80228d0:	08027908 	.word	0x08027908
 80228d4:	08027915 	.word	0x08027915
 80228d8:	08027943 	.word	0x08027943

080228dc <atexit>:
 80228dc:	2300      	movs	r3, #0
 80228de:	4601      	mov	r1, r0
 80228e0:	461a      	mov	r2, r3
 80228e2:	4618      	mov	r0, r3
 80228e4:	f000 bcf2 	b.w	80232cc <__register_exitproc>

080228e8 <__cxa_atexit>:
 80228e8:	b510      	push	{r4, lr}
 80228ea:	4c05      	ldr	r4, [pc, #20]	; (8022900 <__cxa_atexit+0x18>)
 80228ec:	4613      	mov	r3, r2
 80228ee:	b12c      	cbz	r4, 80228fc <__cxa_atexit+0x14>
 80228f0:	460a      	mov	r2, r1
 80228f2:	4601      	mov	r1, r0
 80228f4:	2002      	movs	r0, #2
 80228f6:	f000 fce9 	bl	80232cc <__register_exitproc>
 80228fa:	bd10      	pop	{r4, pc}
 80228fc:	4620      	mov	r0, r4
 80228fe:	e7fc      	b.n	80228fa <__cxa_atexit+0x12>
 8022900:	080232cd 	.word	0x080232cd

08022904 <__errno>:
 8022904:	4b01      	ldr	r3, [pc, #4]	; (802290c <__errno+0x8>)
 8022906:	6818      	ldr	r0, [r3, #0]
 8022908:	4770      	bx	lr
 802290a:	bf00      	nop
 802290c:	20000098 	.word	0x20000098

08022910 <fiprintf>:
 8022910:	b40e      	push	{r1, r2, r3}
 8022912:	b503      	push	{r0, r1, lr}
 8022914:	4601      	mov	r1, r0
 8022916:	ab03      	add	r3, sp, #12
 8022918:	4805      	ldr	r0, [pc, #20]	; (8022930 <fiprintf+0x20>)
 802291a:	f853 2b04 	ldr.w	r2, [r3], #4
 802291e:	6800      	ldr	r0, [r0, #0]
 8022920:	9301      	str	r3, [sp, #4]
 8022922:	f000 f921 	bl	8022b68 <_vfiprintf_r>
 8022926:	b002      	add	sp, #8
 8022928:	f85d eb04 	ldr.w	lr, [sp], #4
 802292c:	b003      	add	sp, #12
 802292e:	4770      	bx	lr
 8022930:	20000098 	.word	0x20000098

08022934 <__libc_init_array>:
 8022934:	b570      	push	{r4, r5, r6, lr}
 8022936:	4e0d      	ldr	r6, [pc, #52]	; (802296c <__libc_init_array+0x38>)
 8022938:	4c0d      	ldr	r4, [pc, #52]	; (8022970 <__libc_init_array+0x3c>)
 802293a:	1ba4      	subs	r4, r4, r6
 802293c:	10a4      	asrs	r4, r4, #2
 802293e:	2500      	movs	r5, #0
 8022940:	42a5      	cmp	r5, r4
 8022942:	d109      	bne.n	8022958 <__libc_init_array+0x24>
 8022944:	4e0b      	ldr	r6, [pc, #44]	; (8022974 <__libc_init_array+0x40>)
 8022946:	4c0c      	ldr	r4, [pc, #48]	; (8022978 <__libc_init_array+0x44>)
 8022948:	f000 ffb0 	bl	80238ac <_init>
 802294c:	1ba4      	subs	r4, r4, r6
 802294e:	10a4      	asrs	r4, r4, #2
 8022950:	2500      	movs	r5, #0
 8022952:	42a5      	cmp	r5, r4
 8022954:	d105      	bne.n	8022962 <__libc_init_array+0x2e>
 8022956:	bd70      	pop	{r4, r5, r6, pc}
 8022958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802295c:	4798      	blx	r3
 802295e:	3501      	adds	r5, #1
 8022960:	e7ee      	b.n	8022940 <__libc_init_array+0xc>
 8022962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022966:	4798      	blx	r3
 8022968:	3501      	adds	r5, #1
 802296a:	e7f2      	b.n	8022952 <__libc_init_array+0x1e>
 802296c:	0806b7e8 	.word	0x0806b7e8
 8022970:	0806b7e8 	.word	0x0806b7e8
 8022974:	0806b7e8 	.word	0x0806b7e8
 8022978:	0806b7fc 	.word	0x0806b7fc

0802297c <malloc>:
 802297c:	4b02      	ldr	r3, [pc, #8]	; (8022988 <malloc+0xc>)
 802297e:	4601      	mov	r1, r0
 8022980:	6818      	ldr	r0, [r3, #0]
 8022982:	f000 b86d 	b.w	8022a60 <_malloc_r>
 8022986:	bf00      	nop
 8022988:	20000098 	.word	0x20000098

0802298c <free>:
 802298c:	4b02      	ldr	r3, [pc, #8]	; (8022998 <free+0xc>)
 802298e:	4601      	mov	r1, r0
 8022990:	6818      	ldr	r0, [r3, #0]
 8022992:	f000 b817 	b.w	80229c4 <_free_r>
 8022996:	bf00      	nop
 8022998:	20000098 	.word	0x20000098

0802299c <memcpy>:
 802299c:	b510      	push	{r4, lr}
 802299e:	1e43      	subs	r3, r0, #1
 80229a0:	440a      	add	r2, r1
 80229a2:	4291      	cmp	r1, r2
 80229a4:	d100      	bne.n	80229a8 <memcpy+0xc>
 80229a6:	bd10      	pop	{r4, pc}
 80229a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80229ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80229b0:	e7f7      	b.n	80229a2 <memcpy+0x6>

080229b2 <memset>:
 80229b2:	4402      	add	r2, r0
 80229b4:	4603      	mov	r3, r0
 80229b6:	4293      	cmp	r3, r2
 80229b8:	d100      	bne.n	80229bc <memset+0xa>
 80229ba:	4770      	bx	lr
 80229bc:	f803 1b01 	strb.w	r1, [r3], #1
 80229c0:	e7f9      	b.n	80229b6 <memset+0x4>
	...

080229c4 <_free_r>:
 80229c4:	b538      	push	{r3, r4, r5, lr}
 80229c6:	4605      	mov	r5, r0
 80229c8:	2900      	cmp	r1, #0
 80229ca:	d045      	beq.n	8022a58 <_free_r+0x94>
 80229cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80229d0:	1f0c      	subs	r4, r1, #4
 80229d2:	2b00      	cmp	r3, #0
 80229d4:	bfb8      	it	lt
 80229d6:	18e4      	addlt	r4, r4, r3
 80229d8:	f000 feba 	bl	8023750 <__malloc_lock>
 80229dc:	4a1f      	ldr	r2, [pc, #124]	; (8022a5c <_free_r+0x98>)
 80229de:	6813      	ldr	r3, [r2, #0]
 80229e0:	4610      	mov	r0, r2
 80229e2:	b933      	cbnz	r3, 80229f2 <_free_r+0x2e>
 80229e4:	6063      	str	r3, [r4, #4]
 80229e6:	6014      	str	r4, [r2, #0]
 80229e8:	4628      	mov	r0, r5
 80229ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80229ee:	f000 beb0 	b.w	8023752 <__malloc_unlock>
 80229f2:	42a3      	cmp	r3, r4
 80229f4:	d90c      	bls.n	8022a10 <_free_r+0x4c>
 80229f6:	6821      	ldr	r1, [r4, #0]
 80229f8:	1862      	adds	r2, r4, r1
 80229fa:	4293      	cmp	r3, r2
 80229fc:	bf04      	itt	eq
 80229fe:	681a      	ldreq	r2, [r3, #0]
 8022a00:	685b      	ldreq	r3, [r3, #4]
 8022a02:	6063      	str	r3, [r4, #4]
 8022a04:	bf04      	itt	eq
 8022a06:	1852      	addeq	r2, r2, r1
 8022a08:	6022      	streq	r2, [r4, #0]
 8022a0a:	6004      	str	r4, [r0, #0]
 8022a0c:	e7ec      	b.n	80229e8 <_free_r+0x24>
 8022a0e:	4613      	mov	r3, r2
 8022a10:	685a      	ldr	r2, [r3, #4]
 8022a12:	b10a      	cbz	r2, 8022a18 <_free_r+0x54>
 8022a14:	42a2      	cmp	r2, r4
 8022a16:	d9fa      	bls.n	8022a0e <_free_r+0x4a>
 8022a18:	6819      	ldr	r1, [r3, #0]
 8022a1a:	1858      	adds	r0, r3, r1
 8022a1c:	42a0      	cmp	r0, r4
 8022a1e:	d10b      	bne.n	8022a38 <_free_r+0x74>
 8022a20:	6820      	ldr	r0, [r4, #0]
 8022a22:	4401      	add	r1, r0
 8022a24:	1858      	adds	r0, r3, r1
 8022a26:	4282      	cmp	r2, r0
 8022a28:	6019      	str	r1, [r3, #0]
 8022a2a:	d1dd      	bne.n	80229e8 <_free_r+0x24>
 8022a2c:	6810      	ldr	r0, [r2, #0]
 8022a2e:	6852      	ldr	r2, [r2, #4]
 8022a30:	605a      	str	r2, [r3, #4]
 8022a32:	4401      	add	r1, r0
 8022a34:	6019      	str	r1, [r3, #0]
 8022a36:	e7d7      	b.n	80229e8 <_free_r+0x24>
 8022a38:	d902      	bls.n	8022a40 <_free_r+0x7c>
 8022a3a:	230c      	movs	r3, #12
 8022a3c:	602b      	str	r3, [r5, #0]
 8022a3e:	e7d3      	b.n	80229e8 <_free_r+0x24>
 8022a40:	6820      	ldr	r0, [r4, #0]
 8022a42:	1821      	adds	r1, r4, r0
 8022a44:	428a      	cmp	r2, r1
 8022a46:	bf04      	itt	eq
 8022a48:	6811      	ldreq	r1, [r2, #0]
 8022a4a:	6852      	ldreq	r2, [r2, #4]
 8022a4c:	6062      	str	r2, [r4, #4]
 8022a4e:	bf04      	itt	eq
 8022a50:	1809      	addeq	r1, r1, r0
 8022a52:	6021      	streq	r1, [r4, #0]
 8022a54:	605c      	str	r4, [r3, #4]
 8022a56:	e7c7      	b.n	80229e8 <_free_r+0x24>
 8022a58:	bd38      	pop	{r3, r4, r5, pc}
 8022a5a:	bf00      	nop
 8022a5c:	2000b584 	.word	0x2000b584

08022a60 <_malloc_r>:
 8022a60:	b570      	push	{r4, r5, r6, lr}
 8022a62:	1ccd      	adds	r5, r1, #3
 8022a64:	f025 0503 	bic.w	r5, r5, #3
 8022a68:	3508      	adds	r5, #8
 8022a6a:	2d0c      	cmp	r5, #12
 8022a6c:	bf38      	it	cc
 8022a6e:	250c      	movcc	r5, #12
 8022a70:	2d00      	cmp	r5, #0
 8022a72:	4606      	mov	r6, r0
 8022a74:	db01      	blt.n	8022a7a <_malloc_r+0x1a>
 8022a76:	42a9      	cmp	r1, r5
 8022a78:	d903      	bls.n	8022a82 <_malloc_r+0x22>
 8022a7a:	230c      	movs	r3, #12
 8022a7c:	6033      	str	r3, [r6, #0]
 8022a7e:	2000      	movs	r0, #0
 8022a80:	bd70      	pop	{r4, r5, r6, pc}
 8022a82:	f000 fe65 	bl	8023750 <__malloc_lock>
 8022a86:	4a21      	ldr	r2, [pc, #132]	; (8022b0c <_malloc_r+0xac>)
 8022a88:	6814      	ldr	r4, [r2, #0]
 8022a8a:	4621      	mov	r1, r4
 8022a8c:	b991      	cbnz	r1, 8022ab4 <_malloc_r+0x54>
 8022a8e:	4c20      	ldr	r4, [pc, #128]	; (8022b10 <_malloc_r+0xb0>)
 8022a90:	6823      	ldr	r3, [r4, #0]
 8022a92:	b91b      	cbnz	r3, 8022a9c <_malloc_r+0x3c>
 8022a94:	4630      	mov	r0, r6
 8022a96:	f000 fb05 	bl	80230a4 <_sbrk_r>
 8022a9a:	6020      	str	r0, [r4, #0]
 8022a9c:	4629      	mov	r1, r5
 8022a9e:	4630      	mov	r0, r6
 8022aa0:	f000 fb00 	bl	80230a4 <_sbrk_r>
 8022aa4:	1c43      	adds	r3, r0, #1
 8022aa6:	d124      	bne.n	8022af2 <_malloc_r+0x92>
 8022aa8:	230c      	movs	r3, #12
 8022aaa:	6033      	str	r3, [r6, #0]
 8022aac:	4630      	mov	r0, r6
 8022aae:	f000 fe50 	bl	8023752 <__malloc_unlock>
 8022ab2:	e7e4      	b.n	8022a7e <_malloc_r+0x1e>
 8022ab4:	680b      	ldr	r3, [r1, #0]
 8022ab6:	1b5b      	subs	r3, r3, r5
 8022ab8:	d418      	bmi.n	8022aec <_malloc_r+0x8c>
 8022aba:	2b0b      	cmp	r3, #11
 8022abc:	d90f      	bls.n	8022ade <_malloc_r+0x7e>
 8022abe:	600b      	str	r3, [r1, #0]
 8022ac0:	50cd      	str	r5, [r1, r3]
 8022ac2:	18cc      	adds	r4, r1, r3
 8022ac4:	4630      	mov	r0, r6
 8022ac6:	f000 fe44 	bl	8023752 <__malloc_unlock>
 8022aca:	f104 000b 	add.w	r0, r4, #11
 8022ace:	1d23      	adds	r3, r4, #4
 8022ad0:	f020 0007 	bic.w	r0, r0, #7
 8022ad4:	1ac3      	subs	r3, r0, r3
 8022ad6:	d0d3      	beq.n	8022a80 <_malloc_r+0x20>
 8022ad8:	425a      	negs	r2, r3
 8022ada:	50e2      	str	r2, [r4, r3]
 8022adc:	e7d0      	b.n	8022a80 <_malloc_r+0x20>
 8022ade:	428c      	cmp	r4, r1
 8022ae0:	684b      	ldr	r3, [r1, #4]
 8022ae2:	bf16      	itet	ne
 8022ae4:	6063      	strne	r3, [r4, #4]
 8022ae6:	6013      	streq	r3, [r2, #0]
 8022ae8:	460c      	movne	r4, r1
 8022aea:	e7eb      	b.n	8022ac4 <_malloc_r+0x64>
 8022aec:	460c      	mov	r4, r1
 8022aee:	6849      	ldr	r1, [r1, #4]
 8022af0:	e7cc      	b.n	8022a8c <_malloc_r+0x2c>
 8022af2:	1cc4      	adds	r4, r0, #3
 8022af4:	f024 0403 	bic.w	r4, r4, #3
 8022af8:	42a0      	cmp	r0, r4
 8022afa:	d005      	beq.n	8022b08 <_malloc_r+0xa8>
 8022afc:	1a21      	subs	r1, r4, r0
 8022afe:	4630      	mov	r0, r6
 8022b00:	f000 fad0 	bl	80230a4 <_sbrk_r>
 8022b04:	3001      	adds	r0, #1
 8022b06:	d0cf      	beq.n	8022aa8 <_malloc_r+0x48>
 8022b08:	6025      	str	r5, [r4, #0]
 8022b0a:	e7db      	b.n	8022ac4 <_malloc_r+0x64>
 8022b0c:	2000b584 	.word	0x2000b584
 8022b10:	2000b588 	.word	0x2000b588

08022b14 <__sfputc_r>:
 8022b14:	6893      	ldr	r3, [r2, #8]
 8022b16:	3b01      	subs	r3, #1
 8022b18:	2b00      	cmp	r3, #0
 8022b1a:	b410      	push	{r4}
 8022b1c:	6093      	str	r3, [r2, #8]
 8022b1e:	da08      	bge.n	8022b32 <__sfputc_r+0x1e>
 8022b20:	6994      	ldr	r4, [r2, #24]
 8022b22:	42a3      	cmp	r3, r4
 8022b24:	db01      	blt.n	8022b2a <__sfputc_r+0x16>
 8022b26:	290a      	cmp	r1, #10
 8022b28:	d103      	bne.n	8022b32 <__sfputc_r+0x1e>
 8022b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b2e:	f000 bb0d 	b.w	802314c <__swbuf_r>
 8022b32:	6813      	ldr	r3, [r2, #0]
 8022b34:	1c58      	adds	r0, r3, #1
 8022b36:	6010      	str	r0, [r2, #0]
 8022b38:	7019      	strb	r1, [r3, #0]
 8022b3a:	4608      	mov	r0, r1
 8022b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b40:	4770      	bx	lr

08022b42 <__sfputs_r>:
 8022b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b44:	4606      	mov	r6, r0
 8022b46:	460f      	mov	r7, r1
 8022b48:	4614      	mov	r4, r2
 8022b4a:	18d5      	adds	r5, r2, r3
 8022b4c:	42ac      	cmp	r4, r5
 8022b4e:	d101      	bne.n	8022b54 <__sfputs_r+0x12>
 8022b50:	2000      	movs	r0, #0
 8022b52:	e007      	b.n	8022b64 <__sfputs_r+0x22>
 8022b54:	463a      	mov	r2, r7
 8022b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b5a:	4630      	mov	r0, r6
 8022b5c:	f7ff ffda 	bl	8022b14 <__sfputc_r>
 8022b60:	1c43      	adds	r3, r0, #1
 8022b62:	d1f3      	bne.n	8022b4c <__sfputs_r+0xa>
 8022b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022b68 <_vfiprintf_r>:
 8022b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b6c:	460c      	mov	r4, r1
 8022b6e:	b09d      	sub	sp, #116	; 0x74
 8022b70:	4617      	mov	r7, r2
 8022b72:	461d      	mov	r5, r3
 8022b74:	4606      	mov	r6, r0
 8022b76:	b118      	cbz	r0, 8022b80 <_vfiprintf_r+0x18>
 8022b78:	6983      	ldr	r3, [r0, #24]
 8022b7a:	b90b      	cbnz	r3, 8022b80 <_vfiprintf_r+0x18>
 8022b7c:	f000 fcfa 	bl	8023574 <__sinit>
 8022b80:	4b7c      	ldr	r3, [pc, #496]	; (8022d74 <_vfiprintf_r+0x20c>)
 8022b82:	429c      	cmp	r4, r3
 8022b84:	d158      	bne.n	8022c38 <_vfiprintf_r+0xd0>
 8022b86:	6874      	ldr	r4, [r6, #4]
 8022b88:	89a3      	ldrh	r3, [r4, #12]
 8022b8a:	0718      	lsls	r0, r3, #28
 8022b8c:	d55e      	bpl.n	8022c4c <_vfiprintf_r+0xe4>
 8022b8e:	6923      	ldr	r3, [r4, #16]
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	d05b      	beq.n	8022c4c <_vfiprintf_r+0xe4>
 8022b94:	2300      	movs	r3, #0
 8022b96:	9309      	str	r3, [sp, #36]	; 0x24
 8022b98:	2320      	movs	r3, #32
 8022b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022b9e:	2330      	movs	r3, #48	; 0x30
 8022ba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022ba4:	9503      	str	r5, [sp, #12]
 8022ba6:	f04f 0b01 	mov.w	fp, #1
 8022baa:	46b8      	mov	r8, r7
 8022bac:	4645      	mov	r5, r8
 8022bae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022bb2:	b10b      	cbz	r3, 8022bb8 <_vfiprintf_r+0x50>
 8022bb4:	2b25      	cmp	r3, #37	; 0x25
 8022bb6:	d154      	bne.n	8022c62 <_vfiprintf_r+0xfa>
 8022bb8:	ebb8 0a07 	subs.w	sl, r8, r7
 8022bbc:	d00b      	beq.n	8022bd6 <_vfiprintf_r+0x6e>
 8022bbe:	4653      	mov	r3, sl
 8022bc0:	463a      	mov	r2, r7
 8022bc2:	4621      	mov	r1, r4
 8022bc4:	4630      	mov	r0, r6
 8022bc6:	f7ff ffbc 	bl	8022b42 <__sfputs_r>
 8022bca:	3001      	adds	r0, #1
 8022bcc:	f000 80c2 	beq.w	8022d54 <_vfiprintf_r+0x1ec>
 8022bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bd2:	4453      	add	r3, sl
 8022bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8022bd6:	f898 3000 	ldrb.w	r3, [r8]
 8022bda:	2b00      	cmp	r3, #0
 8022bdc:	f000 80ba 	beq.w	8022d54 <_vfiprintf_r+0x1ec>
 8022be0:	2300      	movs	r3, #0
 8022be2:	f04f 32ff 	mov.w	r2, #4294967295
 8022be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022bea:	9304      	str	r3, [sp, #16]
 8022bec:	9307      	str	r3, [sp, #28]
 8022bee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022bf2:	931a      	str	r3, [sp, #104]	; 0x68
 8022bf4:	46a8      	mov	r8, r5
 8022bf6:	2205      	movs	r2, #5
 8022bf8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8022bfc:	485e      	ldr	r0, [pc, #376]	; (8022d78 <_vfiprintf_r+0x210>)
 8022bfe:	f7dd fb07 	bl	8000210 <memchr>
 8022c02:	9b04      	ldr	r3, [sp, #16]
 8022c04:	bb78      	cbnz	r0, 8022c66 <_vfiprintf_r+0xfe>
 8022c06:	06d9      	lsls	r1, r3, #27
 8022c08:	bf44      	itt	mi
 8022c0a:	2220      	movmi	r2, #32
 8022c0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022c10:	071a      	lsls	r2, r3, #28
 8022c12:	bf44      	itt	mi
 8022c14:	222b      	movmi	r2, #43	; 0x2b
 8022c16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022c1a:	782a      	ldrb	r2, [r5, #0]
 8022c1c:	2a2a      	cmp	r2, #42	; 0x2a
 8022c1e:	d02a      	beq.n	8022c76 <_vfiprintf_r+0x10e>
 8022c20:	9a07      	ldr	r2, [sp, #28]
 8022c22:	46a8      	mov	r8, r5
 8022c24:	2000      	movs	r0, #0
 8022c26:	250a      	movs	r5, #10
 8022c28:	4641      	mov	r1, r8
 8022c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022c2e:	3b30      	subs	r3, #48	; 0x30
 8022c30:	2b09      	cmp	r3, #9
 8022c32:	d969      	bls.n	8022d08 <_vfiprintf_r+0x1a0>
 8022c34:	b360      	cbz	r0, 8022c90 <_vfiprintf_r+0x128>
 8022c36:	e024      	b.n	8022c82 <_vfiprintf_r+0x11a>
 8022c38:	4b50      	ldr	r3, [pc, #320]	; (8022d7c <_vfiprintf_r+0x214>)
 8022c3a:	429c      	cmp	r4, r3
 8022c3c:	d101      	bne.n	8022c42 <_vfiprintf_r+0xda>
 8022c3e:	68b4      	ldr	r4, [r6, #8]
 8022c40:	e7a2      	b.n	8022b88 <_vfiprintf_r+0x20>
 8022c42:	4b4f      	ldr	r3, [pc, #316]	; (8022d80 <_vfiprintf_r+0x218>)
 8022c44:	429c      	cmp	r4, r3
 8022c46:	bf08      	it	eq
 8022c48:	68f4      	ldreq	r4, [r6, #12]
 8022c4a:	e79d      	b.n	8022b88 <_vfiprintf_r+0x20>
 8022c4c:	4621      	mov	r1, r4
 8022c4e:	4630      	mov	r0, r6
 8022c50:	f000 face 	bl	80231f0 <__swsetup_r>
 8022c54:	2800      	cmp	r0, #0
 8022c56:	d09d      	beq.n	8022b94 <_vfiprintf_r+0x2c>
 8022c58:	f04f 30ff 	mov.w	r0, #4294967295
 8022c5c:	b01d      	add	sp, #116	; 0x74
 8022c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c62:	46a8      	mov	r8, r5
 8022c64:	e7a2      	b.n	8022bac <_vfiprintf_r+0x44>
 8022c66:	4a44      	ldr	r2, [pc, #272]	; (8022d78 <_vfiprintf_r+0x210>)
 8022c68:	1a80      	subs	r0, r0, r2
 8022c6a:	fa0b f000 	lsl.w	r0, fp, r0
 8022c6e:	4318      	orrs	r0, r3
 8022c70:	9004      	str	r0, [sp, #16]
 8022c72:	4645      	mov	r5, r8
 8022c74:	e7be      	b.n	8022bf4 <_vfiprintf_r+0x8c>
 8022c76:	9a03      	ldr	r2, [sp, #12]
 8022c78:	1d11      	adds	r1, r2, #4
 8022c7a:	6812      	ldr	r2, [r2, #0]
 8022c7c:	9103      	str	r1, [sp, #12]
 8022c7e:	2a00      	cmp	r2, #0
 8022c80:	db01      	blt.n	8022c86 <_vfiprintf_r+0x11e>
 8022c82:	9207      	str	r2, [sp, #28]
 8022c84:	e004      	b.n	8022c90 <_vfiprintf_r+0x128>
 8022c86:	4252      	negs	r2, r2
 8022c88:	f043 0302 	orr.w	r3, r3, #2
 8022c8c:	9207      	str	r2, [sp, #28]
 8022c8e:	9304      	str	r3, [sp, #16]
 8022c90:	f898 3000 	ldrb.w	r3, [r8]
 8022c94:	2b2e      	cmp	r3, #46	; 0x2e
 8022c96:	d10e      	bne.n	8022cb6 <_vfiprintf_r+0x14e>
 8022c98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8022c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8022c9e:	d138      	bne.n	8022d12 <_vfiprintf_r+0x1aa>
 8022ca0:	9b03      	ldr	r3, [sp, #12]
 8022ca2:	1d1a      	adds	r2, r3, #4
 8022ca4:	681b      	ldr	r3, [r3, #0]
 8022ca6:	9203      	str	r2, [sp, #12]
 8022ca8:	2b00      	cmp	r3, #0
 8022caa:	bfb8      	it	lt
 8022cac:	f04f 33ff 	movlt.w	r3, #4294967295
 8022cb0:	f108 0802 	add.w	r8, r8, #2
 8022cb4:	9305      	str	r3, [sp, #20]
 8022cb6:	4d33      	ldr	r5, [pc, #204]	; (8022d84 <_vfiprintf_r+0x21c>)
 8022cb8:	f898 1000 	ldrb.w	r1, [r8]
 8022cbc:	2203      	movs	r2, #3
 8022cbe:	4628      	mov	r0, r5
 8022cc0:	f7dd faa6 	bl	8000210 <memchr>
 8022cc4:	b140      	cbz	r0, 8022cd8 <_vfiprintf_r+0x170>
 8022cc6:	2340      	movs	r3, #64	; 0x40
 8022cc8:	1b40      	subs	r0, r0, r5
 8022cca:	fa03 f000 	lsl.w	r0, r3, r0
 8022cce:	9b04      	ldr	r3, [sp, #16]
 8022cd0:	4303      	orrs	r3, r0
 8022cd2:	f108 0801 	add.w	r8, r8, #1
 8022cd6:	9304      	str	r3, [sp, #16]
 8022cd8:	f898 1000 	ldrb.w	r1, [r8]
 8022cdc:	482a      	ldr	r0, [pc, #168]	; (8022d88 <_vfiprintf_r+0x220>)
 8022cde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022ce2:	2206      	movs	r2, #6
 8022ce4:	f108 0701 	add.w	r7, r8, #1
 8022ce8:	f7dd fa92 	bl	8000210 <memchr>
 8022cec:	2800      	cmp	r0, #0
 8022cee:	d037      	beq.n	8022d60 <_vfiprintf_r+0x1f8>
 8022cf0:	4b26      	ldr	r3, [pc, #152]	; (8022d8c <_vfiprintf_r+0x224>)
 8022cf2:	bb1b      	cbnz	r3, 8022d3c <_vfiprintf_r+0x1d4>
 8022cf4:	9b03      	ldr	r3, [sp, #12]
 8022cf6:	3307      	adds	r3, #7
 8022cf8:	f023 0307 	bic.w	r3, r3, #7
 8022cfc:	3308      	adds	r3, #8
 8022cfe:	9303      	str	r3, [sp, #12]
 8022d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d02:	444b      	add	r3, r9
 8022d04:	9309      	str	r3, [sp, #36]	; 0x24
 8022d06:	e750      	b.n	8022baa <_vfiprintf_r+0x42>
 8022d08:	fb05 3202 	mla	r2, r5, r2, r3
 8022d0c:	2001      	movs	r0, #1
 8022d0e:	4688      	mov	r8, r1
 8022d10:	e78a      	b.n	8022c28 <_vfiprintf_r+0xc0>
 8022d12:	2300      	movs	r3, #0
 8022d14:	f108 0801 	add.w	r8, r8, #1
 8022d18:	9305      	str	r3, [sp, #20]
 8022d1a:	4619      	mov	r1, r3
 8022d1c:	250a      	movs	r5, #10
 8022d1e:	4640      	mov	r0, r8
 8022d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022d24:	3a30      	subs	r2, #48	; 0x30
 8022d26:	2a09      	cmp	r2, #9
 8022d28:	d903      	bls.n	8022d32 <_vfiprintf_r+0x1ca>
 8022d2a:	2b00      	cmp	r3, #0
 8022d2c:	d0c3      	beq.n	8022cb6 <_vfiprintf_r+0x14e>
 8022d2e:	9105      	str	r1, [sp, #20]
 8022d30:	e7c1      	b.n	8022cb6 <_vfiprintf_r+0x14e>
 8022d32:	fb05 2101 	mla	r1, r5, r1, r2
 8022d36:	2301      	movs	r3, #1
 8022d38:	4680      	mov	r8, r0
 8022d3a:	e7f0      	b.n	8022d1e <_vfiprintf_r+0x1b6>
 8022d3c:	ab03      	add	r3, sp, #12
 8022d3e:	9300      	str	r3, [sp, #0]
 8022d40:	4622      	mov	r2, r4
 8022d42:	4b13      	ldr	r3, [pc, #76]	; (8022d90 <_vfiprintf_r+0x228>)
 8022d44:	a904      	add	r1, sp, #16
 8022d46:	4630      	mov	r0, r6
 8022d48:	f3af 8000 	nop.w
 8022d4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8022d50:	4681      	mov	r9, r0
 8022d52:	d1d5      	bne.n	8022d00 <_vfiprintf_r+0x198>
 8022d54:	89a3      	ldrh	r3, [r4, #12]
 8022d56:	065b      	lsls	r3, r3, #25
 8022d58:	f53f af7e 	bmi.w	8022c58 <_vfiprintf_r+0xf0>
 8022d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022d5e:	e77d      	b.n	8022c5c <_vfiprintf_r+0xf4>
 8022d60:	ab03      	add	r3, sp, #12
 8022d62:	9300      	str	r3, [sp, #0]
 8022d64:	4622      	mov	r2, r4
 8022d66:	4b0a      	ldr	r3, [pc, #40]	; (8022d90 <_vfiprintf_r+0x228>)
 8022d68:	a904      	add	r1, sp, #16
 8022d6a:	4630      	mov	r0, r6
 8022d6c:	f000 f888 	bl	8022e80 <_printf_i>
 8022d70:	e7ec      	b.n	8022d4c <_vfiprintf_r+0x1e4>
 8022d72:	bf00      	nop
 8022d74:	080279a0 	.word	0x080279a0
 8022d78:	08027948 	.word	0x08027948
 8022d7c:	080279c0 	.word	0x080279c0
 8022d80:	08027980 	.word	0x08027980
 8022d84:	0802794e 	.word	0x0802794e
 8022d88:	08027952 	.word	0x08027952
 8022d8c:	00000000 	.word	0x00000000
 8022d90:	08022b43 	.word	0x08022b43

08022d94 <_printf_common>:
 8022d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022d98:	4691      	mov	r9, r2
 8022d9a:	461f      	mov	r7, r3
 8022d9c:	688a      	ldr	r2, [r1, #8]
 8022d9e:	690b      	ldr	r3, [r1, #16]
 8022da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022da4:	4293      	cmp	r3, r2
 8022da6:	bfb8      	it	lt
 8022da8:	4613      	movlt	r3, r2
 8022daa:	f8c9 3000 	str.w	r3, [r9]
 8022dae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022db2:	4606      	mov	r6, r0
 8022db4:	460c      	mov	r4, r1
 8022db6:	b112      	cbz	r2, 8022dbe <_printf_common+0x2a>
 8022db8:	3301      	adds	r3, #1
 8022dba:	f8c9 3000 	str.w	r3, [r9]
 8022dbe:	6823      	ldr	r3, [r4, #0]
 8022dc0:	0699      	lsls	r1, r3, #26
 8022dc2:	bf42      	ittt	mi
 8022dc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8022dc8:	3302      	addmi	r3, #2
 8022dca:	f8c9 3000 	strmi.w	r3, [r9]
 8022dce:	6825      	ldr	r5, [r4, #0]
 8022dd0:	f015 0506 	ands.w	r5, r5, #6
 8022dd4:	d107      	bne.n	8022de6 <_printf_common+0x52>
 8022dd6:	f104 0a19 	add.w	sl, r4, #25
 8022dda:	68e3      	ldr	r3, [r4, #12]
 8022ddc:	f8d9 2000 	ldr.w	r2, [r9]
 8022de0:	1a9b      	subs	r3, r3, r2
 8022de2:	42ab      	cmp	r3, r5
 8022de4:	dc28      	bgt.n	8022e38 <_printf_common+0xa4>
 8022de6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8022dea:	6822      	ldr	r2, [r4, #0]
 8022dec:	3300      	adds	r3, #0
 8022dee:	bf18      	it	ne
 8022df0:	2301      	movne	r3, #1
 8022df2:	0692      	lsls	r2, r2, #26
 8022df4:	d42d      	bmi.n	8022e52 <_printf_common+0xbe>
 8022df6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022dfa:	4639      	mov	r1, r7
 8022dfc:	4630      	mov	r0, r6
 8022dfe:	47c0      	blx	r8
 8022e00:	3001      	adds	r0, #1
 8022e02:	d020      	beq.n	8022e46 <_printf_common+0xb2>
 8022e04:	6823      	ldr	r3, [r4, #0]
 8022e06:	68e5      	ldr	r5, [r4, #12]
 8022e08:	f8d9 2000 	ldr.w	r2, [r9]
 8022e0c:	f003 0306 	and.w	r3, r3, #6
 8022e10:	2b04      	cmp	r3, #4
 8022e12:	bf08      	it	eq
 8022e14:	1aad      	subeq	r5, r5, r2
 8022e16:	68a3      	ldr	r3, [r4, #8]
 8022e18:	6922      	ldr	r2, [r4, #16]
 8022e1a:	bf0c      	ite	eq
 8022e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022e20:	2500      	movne	r5, #0
 8022e22:	4293      	cmp	r3, r2
 8022e24:	bfc4      	itt	gt
 8022e26:	1a9b      	subgt	r3, r3, r2
 8022e28:	18ed      	addgt	r5, r5, r3
 8022e2a:	f04f 0900 	mov.w	r9, #0
 8022e2e:	341a      	adds	r4, #26
 8022e30:	454d      	cmp	r5, r9
 8022e32:	d11a      	bne.n	8022e6a <_printf_common+0xd6>
 8022e34:	2000      	movs	r0, #0
 8022e36:	e008      	b.n	8022e4a <_printf_common+0xb6>
 8022e38:	2301      	movs	r3, #1
 8022e3a:	4652      	mov	r2, sl
 8022e3c:	4639      	mov	r1, r7
 8022e3e:	4630      	mov	r0, r6
 8022e40:	47c0      	blx	r8
 8022e42:	3001      	adds	r0, #1
 8022e44:	d103      	bne.n	8022e4e <_printf_common+0xba>
 8022e46:	f04f 30ff 	mov.w	r0, #4294967295
 8022e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e4e:	3501      	adds	r5, #1
 8022e50:	e7c3      	b.n	8022dda <_printf_common+0x46>
 8022e52:	18e1      	adds	r1, r4, r3
 8022e54:	1c5a      	adds	r2, r3, #1
 8022e56:	2030      	movs	r0, #48	; 0x30
 8022e58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022e5c:	4422      	add	r2, r4
 8022e5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022e62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022e66:	3302      	adds	r3, #2
 8022e68:	e7c5      	b.n	8022df6 <_printf_common+0x62>
 8022e6a:	2301      	movs	r3, #1
 8022e6c:	4622      	mov	r2, r4
 8022e6e:	4639      	mov	r1, r7
 8022e70:	4630      	mov	r0, r6
 8022e72:	47c0      	blx	r8
 8022e74:	3001      	adds	r0, #1
 8022e76:	d0e6      	beq.n	8022e46 <_printf_common+0xb2>
 8022e78:	f109 0901 	add.w	r9, r9, #1
 8022e7c:	e7d8      	b.n	8022e30 <_printf_common+0x9c>
	...

08022e80 <_printf_i>:
 8022e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022e84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8022e88:	460c      	mov	r4, r1
 8022e8a:	7e09      	ldrb	r1, [r1, #24]
 8022e8c:	b085      	sub	sp, #20
 8022e8e:	296e      	cmp	r1, #110	; 0x6e
 8022e90:	4617      	mov	r7, r2
 8022e92:	4606      	mov	r6, r0
 8022e94:	4698      	mov	r8, r3
 8022e96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022e98:	f000 80b3 	beq.w	8023002 <_printf_i+0x182>
 8022e9c:	d822      	bhi.n	8022ee4 <_printf_i+0x64>
 8022e9e:	2963      	cmp	r1, #99	; 0x63
 8022ea0:	d036      	beq.n	8022f10 <_printf_i+0x90>
 8022ea2:	d80a      	bhi.n	8022eba <_printf_i+0x3a>
 8022ea4:	2900      	cmp	r1, #0
 8022ea6:	f000 80b9 	beq.w	802301c <_printf_i+0x19c>
 8022eaa:	2958      	cmp	r1, #88	; 0x58
 8022eac:	f000 8083 	beq.w	8022fb6 <_printf_i+0x136>
 8022eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022eb4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8022eb8:	e032      	b.n	8022f20 <_printf_i+0xa0>
 8022eba:	2964      	cmp	r1, #100	; 0x64
 8022ebc:	d001      	beq.n	8022ec2 <_printf_i+0x42>
 8022ebe:	2969      	cmp	r1, #105	; 0x69
 8022ec0:	d1f6      	bne.n	8022eb0 <_printf_i+0x30>
 8022ec2:	6820      	ldr	r0, [r4, #0]
 8022ec4:	6813      	ldr	r3, [r2, #0]
 8022ec6:	0605      	lsls	r5, r0, #24
 8022ec8:	f103 0104 	add.w	r1, r3, #4
 8022ecc:	d52a      	bpl.n	8022f24 <_printf_i+0xa4>
 8022ece:	681b      	ldr	r3, [r3, #0]
 8022ed0:	6011      	str	r1, [r2, #0]
 8022ed2:	2b00      	cmp	r3, #0
 8022ed4:	da03      	bge.n	8022ede <_printf_i+0x5e>
 8022ed6:	222d      	movs	r2, #45	; 0x2d
 8022ed8:	425b      	negs	r3, r3
 8022eda:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8022ede:	486f      	ldr	r0, [pc, #444]	; (802309c <_printf_i+0x21c>)
 8022ee0:	220a      	movs	r2, #10
 8022ee2:	e039      	b.n	8022f58 <_printf_i+0xd8>
 8022ee4:	2973      	cmp	r1, #115	; 0x73
 8022ee6:	f000 809d 	beq.w	8023024 <_printf_i+0x1a4>
 8022eea:	d808      	bhi.n	8022efe <_printf_i+0x7e>
 8022eec:	296f      	cmp	r1, #111	; 0x6f
 8022eee:	d020      	beq.n	8022f32 <_printf_i+0xb2>
 8022ef0:	2970      	cmp	r1, #112	; 0x70
 8022ef2:	d1dd      	bne.n	8022eb0 <_printf_i+0x30>
 8022ef4:	6823      	ldr	r3, [r4, #0]
 8022ef6:	f043 0320 	orr.w	r3, r3, #32
 8022efa:	6023      	str	r3, [r4, #0]
 8022efc:	e003      	b.n	8022f06 <_printf_i+0x86>
 8022efe:	2975      	cmp	r1, #117	; 0x75
 8022f00:	d017      	beq.n	8022f32 <_printf_i+0xb2>
 8022f02:	2978      	cmp	r1, #120	; 0x78
 8022f04:	d1d4      	bne.n	8022eb0 <_printf_i+0x30>
 8022f06:	2378      	movs	r3, #120	; 0x78
 8022f08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022f0c:	4864      	ldr	r0, [pc, #400]	; (80230a0 <_printf_i+0x220>)
 8022f0e:	e055      	b.n	8022fbc <_printf_i+0x13c>
 8022f10:	6813      	ldr	r3, [r2, #0]
 8022f12:	1d19      	adds	r1, r3, #4
 8022f14:	681b      	ldr	r3, [r3, #0]
 8022f16:	6011      	str	r1, [r2, #0]
 8022f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022f20:	2301      	movs	r3, #1
 8022f22:	e08c      	b.n	802303e <_printf_i+0x1be>
 8022f24:	681b      	ldr	r3, [r3, #0]
 8022f26:	6011      	str	r1, [r2, #0]
 8022f28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022f2c:	bf18      	it	ne
 8022f2e:	b21b      	sxthne	r3, r3
 8022f30:	e7cf      	b.n	8022ed2 <_printf_i+0x52>
 8022f32:	6813      	ldr	r3, [r2, #0]
 8022f34:	6825      	ldr	r5, [r4, #0]
 8022f36:	1d18      	adds	r0, r3, #4
 8022f38:	6010      	str	r0, [r2, #0]
 8022f3a:	0628      	lsls	r0, r5, #24
 8022f3c:	d501      	bpl.n	8022f42 <_printf_i+0xc2>
 8022f3e:	681b      	ldr	r3, [r3, #0]
 8022f40:	e002      	b.n	8022f48 <_printf_i+0xc8>
 8022f42:	0668      	lsls	r0, r5, #25
 8022f44:	d5fb      	bpl.n	8022f3e <_printf_i+0xbe>
 8022f46:	881b      	ldrh	r3, [r3, #0]
 8022f48:	4854      	ldr	r0, [pc, #336]	; (802309c <_printf_i+0x21c>)
 8022f4a:	296f      	cmp	r1, #111	; 0x6f
 8022f4c:	bf14      	ite	ne
 8022f4e:	220a      	movne	r2, #10
 8022f50:	2208      	moveq	r2, #8
 8022f52:	2100      	movs	r1, #0
 8022f54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022f58:	6865      	ldr	r5, [r4, #4]
 8022f5a:	60a5      	str	r5, [r4, #8]
 8022f5c:	2d00      	cmp	r5, #0
 8022f5e:	f2c0 8095 	blt.w	802308c <_printf_i+0x20c>
 8022f62:	6821      	ldr	r1, [r4, #0]
 8022f64:	f021 0104 	bic.w	r1, r1, #4
 8022f68:	6021      	str	r1, [r4, #0]
 8022f6a:	2b00      	cmp	r3, #0
 8022f6c:	d13d      	bne.n	8022fea <_printf_i+0x16a>
 8022f6e:	2d00      	cmp	r5, #0
 8022f70:	f040 808e 	bne.w	8023090 <_printf_i+0x210>
 8022f74:	4665      	mov	r5, ip
 8022f76:	2a08      	cmp	r2, #8
 8022f78:	d10b      	bne.n	8022f92 <_printf_i+0x112>
 8022f7a:	6823      	ldr	r3, [r4, #0]
 8022f7c:	07db      	lsls	r3, r3, #31
 8022f7e:	d508      	bpl.n	8022f92 <_printf_i+0x112>
 8022f80:	6923      	ldr	r3, [r4, #16]
 8022f82:	6862      	ldr	r2, [r4, #4]
 8022f84:	429a      	cmp	r2, r3
 8022f86:	bfde      	ittt	le
 8022f88:	2330      	movle	r3, #48	; 0x30
 8022f8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022f8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022f92:	ebac 0305 	sub.w	r3, ip, r5
 8022f96:	6123      	str	r3, [r4, #16]
 8022f98:	f8cd 8000 	str.w	r8, [sp]
 8022f9c:	463b      	mov	r3, r7
 8022f9e:	aa03      	add	r2, sp, #12
 8022fa0:	4621      	mov	r1, r4
 8022fa2:	4630      	mov	r0, r6
 8022fa4:	f7ff fef6 	bl	8022d94 <_printf_common>
 8022fa8:	3001      	adds	r0, #1
 8022faa:	d14d      	bne.n	8023048 <_printf_i+0x1c8>
 8022fac:	f04f 30ff 	mov.w	r0, #4294967295
 8022fb0:	b005      	add	sp, #20
 8022fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022fb6:	4839      	ldr	r0, [pc, #228]	; (802309c <_printf_i+0x21c>)
 8022fb8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8022fbc:	6813      	ldr	r3, [r2, #0]
 8022fbe:	6821      	ldr	r1, [r4, #0]
 8022fc0:	1d1d      	adds	r5, r3, #4
 8022fc2:	681b      	ldr	r3, [r3, #0]
 8022fc4:	6015      	str	r5, [r2, #0]
 8022fc6:	060a      	lsls	r2, r1, #24
 8022fc8:	d50b      	bpl.n	8022fe2 <_printf_i+0x162>
 8022fca:	07ca      	lsls	r2, r1, #31
 8022fcc:	bf44      	itt	mi
 8022fce:	f041 0120 	orrmi.w	r1, r1, #32
 8022fd2:	6021      	strmi	r1, [r4, #0]
 8022fd4:	b91b      	cbnz	r3, 8022fde <_printf_i+0x15e>
 8022fd6:	6822      	ldr	r2, [r4, #0]
 8022fd8:	f022 0220 	bic.w	r2, r2, #32
 8022fdc:	6022      	str	r2, [r4, #0]
 8022fde:	2210      	movs	r2, #16
 8022fe0:	e7b7      	b.n	8022f52 <_printf_i+0xd2>
 8022fe2:	064d      	lsls	r5, r1, #25
 8022fe4:	bf48      	it	mi
 8022fe6:	b29b      	uxthmi	r3, r3
 8022fe8:	e7ef      	b.n	8022fca <_printf_i+0x14a>
 8022fea:	4665      	mov	r5, ip
 8022fec:	fbb3 f1f2 	udiv	r1, r3, r2
 8022ff0:	fb02 3311 	mls	r3, r2, r1, r3
 8022ff4:	5cc3      	ldrb	r3, [r0, r3]
 8022ff6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8022ffa:	460b      	mov	r3, r1
 8022ffc:	2900      	cmp	r1, #0
 8022ffe:	d1f5      	bne.n	8022fec <_printf_i+0x16c>
 8023000:	e7b9      	b.n	8022f76 <_printf_i+0xf6>
 8023002:	6813      	ldr	r3, [r2, #0]
 8023004:	6825      	ldr	r5, [r4, #0]
 8023006:	6961      	ldr	r1, [r4, #20]
 8023008:	1d18      	adds	r0, r3, #4
 802300a:	6010      	str	r0, [r2, #0]
 802300c:	0628      	lsls	r0, r5, #24
 802300e:	681b      	ldr	r3, [r3, #0]
 8023010:	d501      	bpl.n	8023016 <_printf_i+0x196>
 8023012:	6019      	str	r1, [r3, #0]
 8023014:	e002      	b.n	802301c <_printf_i+0x19c>
 8023016:	066a      	lsls	r2, r5, #25
 8023018:	d5fb      	bpl.n	8023012 <_printf_i+0x192>
 802301a:	8019      	strh	r1, [r3, #0]
 802301c:	2300      	movs	r3, #0
 802301e:	6123      	str	r3, [r4, #16]
 8023020:	4665      	mov	r5, ip
 8023022:	e7b9      	b.n	8022f98 <_printf_i+0x118>
 8023024:	6813      	ldr	r3, [r2, #0]
 8023026:	1d19      	adds	r1, r3, #4
 8023028:	6011      	str	r1, [r2, #0]
 802302a:	681d      	ldr	r5, [r3, #0]
 802302c:	6862      	ldr	r2, [r4, #4]
 802302e:	2100      	movs	r1, #0
 8023030:	4628      	mov	r0, r5
 8023032:	f7dd f8ed 	bl	8000210 <memchr>
 8023036:	b108      	cbz	r0, 802303c <_printf_i+0x1bc>
 8023038:	1b40      	subs	r0, r0, r5
 802303a:	6060      	str	r0, [r4, #4]
 802303c:	6863      	ldr	r3, [r4, #4]
 802303e:	6123      	str	r3, [r4, #16]
 8023040:	2300      	movs	r3, #0
 8023042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023046:	e7a7      	b.n	8022f98 <_printf_i+0x118>
 8023048:	6923      	ldr	r3, [r4, #16]
 802304a:	462a      	mov	r2, r5
 802304c:	4639      	mov	r1, r7
 802304e:	4630      	mov	r0, r6
 8023050:	47c0      	blx	r8
 8023052:	3001      	adds	r0, #1
 8023054:	d0aa      	beq.n	8022fac <_printf_i+0x12c>
 8023056:	6823      	ldr	r3, [r4, #0]
 8023058:	079b      	lsls	r3, r3, #30
 802305a:	d413      	bmi.n	8023084 <_printf_i+0x204>
 802305c:	68e0      	ldr	r0, [r4, #12]
 802305e:	9b03      	ldr	r3, [sp, #12]
 8023060:	4298      	cmp	r0, r3
 8023062:	bfb8      	it	lt
 8023064:	4618      	movlt	r0, r3
 8023066:	e7a3      	b.n	8022fb0 <_printf_i+0x130>
 8023068:	2301      	movs	r3, #1
 802306a:	464a      	mov	r2, r9
 802306c:	4639      	mov	r1, r7
 802306e:	4630      	mov	r0, r6
 8023070:	47c0      	blx	r8
 8023072:	3001      	adds	r0, #1
 8023074:	d09a      	beq.n	8022fac <_printf_i+0x12c>
 8023076:	3501      	adds	r5, #1
 8023078:	68e3      	ldr	r3, [r4, #12]
 802307a:	9a03      	ldr	r2, [sp, #12]
 802307c:	1a9b      	subs	r3, r3, r2
 802307e:	42ab      	cmp	r3, r5
 8023080:	dcf2      	bgt.n	8023068 <_printf_i+0x1e8>
 8023082:	e7eb      	b.n	802305c <_printf_i+0x1dc>
 8023084:	2500      	movs	r5, #0
 8023086:	f104 0919 	add.w	r9, r4, #25
 802308a:	e7f5      	b.n	8023078 <_printf_i+0x1f8>
 802308c:	2b00      	cmp	r3, #0
 802308e:	d1ac      	bne.n	8022fea <_printf_i+0x16a>
 8023090:	7803      	ldrb	r3, [r0, #0]
 8023092:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023096:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802309a:	e76c      	b.n	8022f76 <_printf_i+0xf6>
 802309c:	08027959 	.word	0x08027959
 80230a0:	0802796a 	.word	0x0802796a

080230a4 <_sbrk_r>:
 80230a4:	b538      	push	{r3, r4, r5, lr}
 80230a6:	4c06      	ldr	r4, [pc, #24]	; (80230c0 <_sbrk_r+0x1c>)
 80230a8:	2300      	movs	r3, #0
 80230aa:	4605      	mov	r5, r0
 80230ac:	4608      	mov	r0, r1
 80230ae:	6023      	str	r3, [r4, #0]
 80230b0:	f7df fec0 	bl	8002e34 <_sbrk>
 80230b4:	1c43      	adds	r3, r0, #1
 80230b6:	d102      	bne.n	80230be <_sbrk_r+0x1a>
 80230b8:	6823      	ldr	r3, [r4, #0]
 80230ba:	b103      	cbz	r3, 80230be <_sbrk_r+0x1a>
 80230bc:	602b      	str	r3, [r5, #0]
 80230be:	bd38      	pop	{r3, r4, r5, pc}
 80230c0:	2000c328 	.word	0x2000c328

080230c4 <_raise_r>:
 80230c4:	291f      	cmp	r1, #31
 80230c6:	b538      	push	{r3, r4, r5, lr}
 80230c8:	4604      	mov	r4, r0
 80230ca:	460d      	mov	r5, r1
 80230cc:	d904      	bls.n	80230d8 <_raise_r+0x14>
 80230ce:	2316      	movs	r3, #22
 80230d0:	6003      	str	r3, [r0, #0]
 80230d2:	f04f 30ff 	mov.w	r0, #4294967295
 80230d6:	bd38      	pop	{r3, r4, r5, pc}
 80230d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80230da:	b112      	cbz	r2, 80230e2 <_raise_r+0x1e>
 80230dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80230e0:	b94b      	cbnz	r3, 80230f6 <_raise_r+0x32>
 80230e2:	4620      	mov	r0, r4
 80230e4:	f000 f830 	bl	8023148 <_getpid_r>
 80230e8:	462a      	mov	r2, r5
 80230ea:	4601      	mov	r1, r0
 80230ec:	4620      	mov	r0, r4
 80230ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80230f2:	f000 b817 	b.w	8023124 <_kill_r>
 80230f6:	2b01      	cmp	r3, #1
 80230f8:	d00a      	beq.n	8023110 <_raise_r+0x4c>
 80230fa:	1c59      	adds	r1, r3, #1
 80230fc:	d103      	bne.n	8023106 <_raise_r+0x42>
 80230fe:	2316      	movs	r3, #22
 8023100:	6003      	str	r3, [r0, #0]
 8023102:	2001      	movs	r0, #1
 8023104:	e7e7      	b.n	80230d6 <_raise_r+0x12>
 8023106:	2400      	movs	r4, #0
 8023108:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802310c:	4628      	mov	r0, r5
 802310e:	4798      	blx	r3
 8023110:	2000      	movs	r0, #0
 8023112:	e7e0      	b.n	80230d6 <_raise_r+0x12>

08023114 <raise>:
 8023114:	4b02      	ldr	r3, [pc, #8]	; (8023120 <raise+0xc>)
 8023116:	4601      	mov	r1, r0
 8023118:	6818      	ldr	r0, [r3, #0]
 802311a:	f7ff bfd3 	b.w	80230c4 <_raise_r>
 802311e:	bf00      	nop
 8023120:	20000098 	.word	0x20000098

08023124 <_kill_r>:
 8023124:	b538      	push	{r3, r4, r5, lr}
 8023126:	4c07      	ldr	r4, [pc, #28]	; (8023144 <_kill_r+0x20>)
 8023128:	2300      	movs	r3, #0
 802312a:	4605      	mov	r5, r0
 802312c:	4608      	mov	r0, r1
 802312e:	4611      	mov	r1, r2
 8023130:	6023      	str	r3, [r4, #0]
 8023132:	f7df fdf7 	bl	8002d24 <_kill>
 8023136:	1c43      	adds	r3, r0, #1
 8023138:	d102      	bne.n	8023140 <_kill_r+0x1c>
 802313a:	6823      	ldr	r3, [r4, #0]
 802313c:	b103      	cbz	r3, 8023140 <_kill_r+0x1c>
 802313e:	602b      	str	r3, [r5, #0]
 8023140:	bd38      	pop	{r3, r4, r5, pc}
 8023142:	bf00      	nop
 8023144:	2000c328 	.word	0x2000c328

08023148 <_getpid_r>:
 8023148:	f7df bde4 	b.w	8002d14 <_getpid>

0802314c <__swbuf_r>:
 802314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802314e:	460e      	mov	r6, r1
 8023150:	4614      	mov	r4, r2
 8023152:	4605      	mov	r5, r0
 8023154:	b118      	cbz	r0, 802315e <__swbuf_r+0x12>
 8023156:	6983      	ldr	r3, [r0, #24]
 8023158:	b90b      	cbnz	r3, 802315e <__swbuf_r+0x12>
 802315a:	f000 fa0b 	bl	8023574 <__sinit>
 802315e:	4b21      	ldr	r3, [pc, #132]	; (80231e4 <__swbuf_r+0x98>)
 8023160:	429c      	cmp	r4, r3
 8023162:	d12a      	bne.n	80231ba <__swbuf_r+0x6e>
 8023164:	686c      	ldr	r4, [r5, #4]
 8023166:	69a3      	ldr	r3, [r4, #24]
 8023168:	60a3      	str	r3, [r4, #8]
 802316a:	89a3      	ldrh	r3, [r4, #12]
 802316c:	071a      	lsls	r2, r3, #28
 802316e:	d52e      	bpl.n	80231ce <__swbuf_r+0x82>
 8023170:	6923      	ldr	r3, [r4, #16]
 8023172:	b363      	cbz	r3, 80231ce <__swbuf_r+0x82>
 8023174:	6923      	ldr	r3, [r4, #16]
 8023176:	6820      	ldr	r0, [r4, #0]
 8023178:	1ac0      	subs	r0, r0, r3
 802317a:	6963      	ldr	r3, [r4, #20]
 802317c:	b2f6      	uxtb	r6, r6
 802317e:	4283      	cmp	r3, r0
 8023180:	4637      	mov	r7, r6
 8023182:	dc04      	bgt.n	802318e <__swbuf_r+0x42>
 8023184:	4621      	mov	r1, r4
 8023186:	4628      	mov	r0, r5
 8023188:	f000 f98a 	bl	80234a0 <_fflush_r>
 802318c:	bb28      	cbnz	r0, 80231da <__swbuf_r+0x8e>
 802318e:	68a3      	ldr	r3, [r4, #8]
 8023190:	3b01      	subs	r3, #1
 8023192:	60a3      	str	r3, [r4, #8]
 8023194:	6823      	ldr	r3, [r4, #0]
 8023196:	1c5a      	adds	r2, r3, #1
 8023198:	6022      	str	r2, [r4, #0]
 802319a:	701e      	strb	r6, [r3, #0]
 802319c:	6963      	ldr	r3, [r4, #20]
 802319e:	3001      	adds	r0, #1
 80231a0:	4283      	cmp	r3, r0
 80231a2:	d004      	beq.n	80231ae <__swbuf_r+0x62>
 80231a4:	89a3      	ldrh	r3, [r4, #12]
 80231a6:	07db      	lsls	r3, r3, #31
 80231a8:	d519      	bpl.n	80231de <__swbuf_r+0x92>
 80231aa:	2e0a      	cmp	r6, #10
 80231ac:	d117      	bne.n	80231de <__swbuf_r+0x92>
 80231ae:	4621      	mov	r1, r4
 80231b0:	4628      	mov	r0, r5
 80231b2:	f000 f975 	bl	80234a0 <_fflush_r>
 80231b6:	b190      	cbz	r0, 80231de <__swbuf_r+0x92>
 80231b8:	e00f      	b.n	80231da <__swbuf_r+0x8e>
 80231ba:	4b0b      	ldr	r3, [pc, #44]	; (80231e8 <__swbuf_r+0x9c>)
 80231bc:	429c      	cmp	r4, r3
 80231be:	d101      	bne.n	80231c4 <__swbuf_r+0x78>
 80231c0:	68ac      	ldr	r4, [r5, #8]
 80231c2:	e7d0      	b.n	8023166 <__swbuf_r+0x1a>
 80231c4:	4b09      	ldr	r3, [pc, #36]	; (80231ec <__swbuf_r+0xa0>)
 80231c6:	429c      	cmp	r4, r3
 80231c8:	bf08      	it	eq
 80231ca:	68ec      	ldreq	r4, [r5, #12]
 80231cc:	e7cb      	b.n	8023166 <__swbuf_r+0x1a>
 80231ce:	4621      	mov	r1, r4
 80231d0:	4628      	mov	r0, r5
 80231d2:	f000 f80d 	bl	80231f0 <__swsetup_r>
 80231d6:	2800      	cmp	r0, #0
 80231d8:	d0cc      	beq.n	8023174 <__swbuf_r+0x28>
 80231da:	f04f 37ff 	mov.w	r7, #4294967295
 80231de:	4638      	mov	r0, r7
 80231e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80231e2:	bf00      	nop
 80231e4:	080279a0 	.word	0x080279a0
 80231e8:	080279c0 	.word	0x080279c0
 80231ec:	08027980 	.word	0x08027980

080231f0 <__swsetup_r>:
 80231f0:	4b32      	ldr	r3, [pc, #200]	; (80232bc <__swsetup_r+0xcc>)
 80231f2:	b570      	push	{r4, r5, r6, lr}
 80231f4:	681d      	ldr	r5, [r3, #0]
 80231f6:	4606      	mov	r6, r0
 80231f8:	460c      	mov	r4, r1
 80231fa:	b125      	cbz	r5, 8023206 <__swsetup_r+0x16>
 80231fc:	69ab      	ldr	r3, [r5, #24]
 80231fe:	b913      	cbnz	r3, 8023206 <__swsetup_r+0x16>
 8023200:	4628      	mov	r0, r5
 8023202:	f000 f9b7 	bl	8023574 <__sinit>
 8023206:	4b2e      	ldr	r3, [pc, #184]	; (80232c0 <__swsetup_r+0xd0>)
 8023208:	429c      	cmp	r4, r3
 802320a:	d10f      	bne.n	802322c <__swsetup_r+0x3c>
 802320c:	686c      	ldr	r4, [r5, #4]
 802320e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023212:	b29a      	uxth	r2, r3
 8023214:	0715      	lsls	r5, r2, #28
 8023216:	d42c      	bmi.n	8023272 <__swsetup_r+0x82>
 8023218:	06d0      	lsls	r0, r2, #27
 802321a:	d411      	bmi.n	8023240 <__swsetup_r+0x50>
 802321c:	2209      	movs	r2, #9
 802321e:	6032      	str	r2, [r6, #0]
 8023220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023224:	81a3      	strh	r3, [r4, #12]
 8023226:	f04f 30ff 	mov.w	r0, #4294967295
 802322a:	e03e      	b.n	80232aa <__swsetup_r+0xba>
 802322c:	4b25      	ldr	r3, [pc, #148]	; (80232c4 <__swsetup_r+0xd4>)
 802322e:	429c      	cmp	r4, r3
 8023230:	d101      	bne.n	8023236 <__swsetup_r+0x46>
 8023232:	68ac      	ldr	r4, [r5, #8]
 8023234:	e7eb      	b.n	802320e <__swsetup_r+0x1e>
 8023236:	4b24      	ldr	r3, [pc, #144]	; (80232c8 <__swsetup_r+0xd8>)
 8023238:	429c      	cmp	r4, r3
 802323a:	bf08      	it	eq
 802323c:	68ec      	ldreq	r4, [r5, #12]
 802323e:	e7e6      	b.n	802320e <__swsetup_r+0x1e>
 8023240:	0751      	lsls	r1, r2, #29
 8023242:	d512      	bpl.n	802326a <__swsetup_r+0x7a>
 8023244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023246:	b141      	cbz	r1, 802325a <__swsetup_r+0x6a>
 8023248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802324c:	4299      	cmp	r1, r3
 802324e:	d002      	beq.n	8023256 <__swsetup_r+0x66>
 8023250:	4630      	mov	r0, r6
 8023252:	f7ff fbb7 	bl	80229c4 <_free_r>
 8023256:	2300      	movs	r3, #0
 8023258:	6363      	str	r3, [r4, #52]	; 0x34
 802325a:	89a3      	ldrh	r3, [r4, #12]
 802325c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023260:	81a3      	strh	r3, [r4, #12]
 8023262:	2300      	movs	r3, #0
 8023264:	6063      	str	r3, [r4, #4]
 8023266:	6923      	ldr	r3, [r4, #16]
 8023268:	6023      	str	r3, [r4, #0]
 802326a:	89a3      	ldrh	r3, [r4, #12]
 802326c:	f043 0308 	orr.w	r3, r3, #8
 8023270:	81a3      	strh	r3, [r4, #12]
 8023272:	6923      	ldr	r3, [r4, #16]
 8023274:	b94b      	cbnz	r3, 802328a <__swsetup_r+0x9a>
 8023276:	89a3      	ldrh	r3, [r4, #12]
 8023278:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802327c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023280:	d003      	beq.n	802328a <__swsetup_r+0x9a>
 8023282:	4621      	mov	r1, r4
 8023284:	4630      	mov	r0, r6
 8023286:	f000 fa23 	bl	80236d0 <__smakebuf_r>
 802328a:	89a2      	ldrh	r2, [r4, #12]
 802328c:	f012 0301 	ands.w	r3, r2, #1
 8023290:	d00c      	beq.n	80232ac <__swsetup_r+0xbc>
 8023292:	2300      	movs	r3, #0
 8023294:	60a3      	str	r3, [r4, #8]
 8023296:	6963      	ldr	r3, [r4, #20]
 8023298:	425b      	negs	r3, r3
 802329a:	61a3      	str	r3, [r4, #24]
 802329c:	6923      	ldr	r3, [r4, #16]
 802329e:	b953      	cbnz	r3, 80232b6 <__swsetup_r+0xc6>
 80232a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80232a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80232a8:	d1ba      	bne.n	8023220 <__swsetup_r+0x30>
 80232aa:	bd70      	pop	{r4, r5, r6, pc}
 80232ac:	0792      	lsls	r2, r2, #30
 80232ae:	bf58      	it	pl
 80232b0:	6963      	ldrpl	r3, [r4, #20]
 80232b2:	60a3      	str	r3, [r4, #8]
 80232b4:	e7f2      	b.n	802329c <__swsetup_r+0xac>
 80232b6:	2000      	movs	r0, #0
 80232b8:	e7f7      	b.n	80232aa <__swsetup_r+0xba>
 80232ba:	bf00      	nop
 80232bc:	20000098 	.word	0x20000098
 80232c0:	080279a0 	.word	0x080279a0
 80232c4:	080279c0 	.word	0x080279c0
 80232c8:	08027980 	.word	0x08027980

080232cc <__register_exitproc>:
 80232cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80232d0:	4d2c      	ldr	r5, [pc, #176]	; (8023384 <__register_exitproc+0xb8>)
 80232d2:	682c      	ldr	r4, [r5, #0]
 80232d4:	4607      	mov	r7, r0
 80232d6:	460e      	mov	r6, r1
 80232d8:	4691      	mov	r9, r2
 80232da:	4698      	mov	r8, r3
 80232dc:	b934      	cbnz	r4, 80232ec <__register_exitproc+0x20>
 80232de:	4b2a      	ldr	r3, [pc, #168]	; (8023388 <__register_exitproc+0xbc>)
 80232e0:	4c2a      	ldr	r4, [pc, #168]	; (802338c <__register_exitproc+0xc0>)
 80232e2:	602c      	str	r4, [r5, #0]
 80232e4:	b113      	cbz	r3, 80232ec <__register_exitproc+0x20>
 80232e6:	681b      	ldr	r3, [r3, #0]
 80232e8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80232ec:	6863      	ldr	r3, [r4, #4]
 80232ee:	2b1f      	cmp	r3, #31
 80232f0:	dd3d      	ble.n	802336e <__register_exitproc+0xa2>
 80232f2:	4b27      	ldr	r3, [pc, #156]	; (8023390 <__register_exitproc+0xc4>)
 80232f4:	b91b      	cbnz	r3, 80232fe <__register_exitproc+0x32>
 80232f6:	f04f 30ff 	mov.w	r0, #4294967295
 80232fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80232fe:	208c      	movs	r0, #140	; 0x8c
 8023300:	f7ff fb3c 	bl	802297c <malloc>
 8023304:	4604      	mov	r4, r0
 8023306:	2800      	cmp	r0, #0
 8023308:	d0f5      	beq.n	80232f6 <__register_exitproc+0x2a>
 802330a:	2300      	movs	r3, #0
 802330c:	682a      	ldr	r2, [r5, #0]
 802330e:	6002      	str	r2, [r0, #0]
 8023310:	6043      	str	r3, [r0, #4]
 8023312:	6028      	str	r0, [r5, #0]
 8023314:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8023318:	b30f      	cbz	r7, 802335e <__register_exitproc+0x92>
 802331a:	f44f 7084 	mov.w	r0, #264	; 0x108
 802331e:	f7ff fb2d 	bl	802297c <malloc>
 8023322:	2800      	cmp	r0, #0
 8023324:	d0e7      	beq.n	80232f6 <__register_exitproc+0x2a>
 8023326:	2300      	movs	r3, #0
 8023328:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802332c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8023330:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8023334:	6862      	ldr	r2, [r4, #4]
 8023336:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802333a:	2301      	movs	r3, #1
 802333c:	4093      	lsls	r3, r2
 802333e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8023342:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8023346:	431a      	orrs	r2, r3
 8023348:	2f02      	cmp	r7, #2
 802334a:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802334e:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8023352:	bf02      	ittt	eq
 8023354:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8023358:	4313      	orreq	r3, r2
 802335a:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802335e:	6863      	ldr	r3, [r4, #4]
 8023360:	1c5a      	adds	r2, r3, #1
 8023362:	3302      	adds	r3, #2
 8023364:	6062      	str	r2, [r4, #4]
 8023366:	2000      	movs	r0, #0
 8023368:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802336c:	e7c5      	b.n	80232fa <__register_exitproc+0x2e>
 802336e:	2f00      	cmp	r7, #0
 8023370:	d0f5      	beq.n	802335e <__register_exitproc+0x92>
 8023372:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023376:	2800      	cmp	r0, #0
 8023378:	d1dc      	bne.n	8023334 <__register_exitproc+0x68>
 802337a:	4b05      	ldr	r3, [pc, #20]	; (8023390 <__register_exitproc+0xc4>)
 802337c:	2b00      	cmp	r3, #0
 802337e:	d0ba      	beq.n	80232f6 <__register_exitproc+0x2a>
 8023380:	e7cb      	b.n	802331a <__register_exitproc+0x4e>
 8023382:	bf00      	nop
 8023384:	2000b720 	.word	0x2000b720
 8023388:	0802797c 	.word	0x0802797c
 802338c:	2000b694 	.word	0x2000b694
 8023390:	0802297d 	.word	0x0802297d

08023394 <__sflush_r>:
 8023394:	898a      	ldrh	r2, [r1, #12]
 8023396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802339a:	4605      	mov	r5, r0
 802339c:	0710      	lsls	r0, r2, #28
 802339e:	460c      	mov	r4, r1
 80233a0:	d458      	bmi.n	8023454 <__sflush_r+0xc0>
 80233a2:	684b      	ldr	r3, [r1, #4]
 80233a4:	2b00      	cmp	r3, #0
 80233a6:	dc05      	bgt.n	80233b4 <__sflush_r+0x20>
 80233a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80233aa:	2b00      	cmp	r3, #0
 80233ac:	dc02      	bgt.n	80233b4 <__sflush_r+0x20>
 80233ae:	2000      	movs	r0, #0
 80233b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80233b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80233b6:	2e00      	cmp	r6, #0
 80233b8:	d0f9      	beq.n	80233ae <__sflush_r+0x1a>
 80233ba:	2300      	movs	r3, #0
 80233bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80233c0:	682f      	ldr	r7, [r5, #0]
 80233c2:	6a21      	ldr	r1, [r4, #32]
 80233c4:	602b      	str	r3, [r5, #0]
 80233c6:	d032      	beq.n	802342e <__sflush_r+0x9a>
 80233c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80233ca:	89a3      	ldrh	r3, [r4, #12]
 80233cc:	075a      	lsls	r2, r3, #29
 80233ce:	d505      	bpl.n	80233dc <__sflush_r+0x48>
 80233d0:	6863      	ldr	r3, [r4, #4]
 80233d2:	1ac0      	subs	r0, r0, r3
 80233d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80233d6:	b10b      	cbz	r3, 80233dc <__sflush_r+0x48>
 80233d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80233da:	1ac0      	subs	r0, r0, r3
 80233dc:	2300      	movs	r3, #0
 80233de:	4602      	mov	r2, r0
 80233e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80233e2:	6a21      	ldr	r1, [r4, #32]
 80233e4:	4628      	mov	r0, r5
 80233e6:	47b0      	blx	r6
 80233e8:	1c43      	adds	r3, r0, #1
 80233ea:	89a3      	ldrh	r3, [r4, #12]
 80233ec:	d106      	bne.n	80233fc <__sflush_r+0x68>
 80233ee:	6829      	ldr	r1, [r5, #0]
 80233f0:	291d      	cmp	r1, #29
 80233f2:	d848      	bhi.n	8023486 <__sflush_r+0xf2>
 80233f4:	4a29      	ldr	r2, [pc, #164]	; (802349c <__sflush_r+0x108>)
 80233f6:	40ca      	lsrs	r2, r1
 80233f8:	07d6      	lsls	r6, r2, #31
 80233fa:	d544      	bpl.n	8023486 <__sflush_r+0xf2>
 80233fc:	2200      	movs	r2, #0
 80233fe:	6062      	str	r2, [r4, #4]
 8023400:	04d9      	lsls	r1, r3, #19
 8023402:	6922      	ldr	r2, [r4, #16]
 8023404:	6022      	str	r2, [r4, #0]
 8023406:	d504      	bpl.n	8023412 <__sflush_r+0x7e>
 8023408:	1c42      	adds	r2, r0, #1
 802340a:	d101      	bne.n	8023410 <__sflush_r+0x7c>
 802340c:	682b      	ldr	r3, [r5, #0]
 802340e:	b903      	cbnz	r3, 8023412 <__sflush_r+0x7e>
 8023410:	6560      	str	r0, [r4, #84]	; 0x54
 8023412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023414:	602f      	str	r7, [r5, #0]
 8023416:	2900      	cmp	r1, #0
 8023418:	d0c9      	beq.n	80233ae <__sflush_r+0x1a>
 802341a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802341e:	4299      	cmp	r1, r3
 8023420:	d002      	beq.n	8023428 <__sflush_r+0x94>
 8023422:	4628      	mov	r0, r5
 8023424:	f7ff face 	bl	80229c4 <_free_r>
 8023428:	2000      	movs	r0, #0
 802342a:	6360      	str	r0, [r4, #52]	; 0x34
 802342c:	e7c0      	b.n	80233b0 <__sflush_r+0x1c>
 802342e:	2301      	movs	r3, #1
 8023430:	4628      	mov	r0, r5
 8023432:	47b0      	blx	r6
 8023434:	1c41      	adds	r1, r0, #1
 8023436:	d1c8      	bne.n	80233ca <__sflush_r+0x36>
 8023438:	682b      	ldr	r3, [r5, #0]
 802343a:	2b00      	cmp	r3, #0
 802343c:	d0c5      	beq.n	80233ca <__sflush_r+0x36>
 802343e:	2b1d      	cmp	r3, #29
 8023440:	d001      	beq.n	8023446 <__sflush_r+0xb2>
 8023442:	2b16      	cmp	r3, #22
 8023444:	d101      	bne.n	802344a <__sflush_r+0xb6>
 8023446:	602f      	str	r7, [r5, #0]
 8023448:	e7b1      	b.n	80233ae <__sflush_r+0x1a>
 802344a:	89a3      	ldrh	r3, [r4, #12]
 802344c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023450:	81a3      	strh	r3, [r4, #12]
 8023452:	e7ad      	b.n	80233b0 <__sflush_r+0x1c>
 8023454:	690f      	ldr	r7, [r1, #16]
 8023456:	2f00      	cmp	r7, #0
 8023458:	d0a9      	beq.n	80233ae <__sflush_r+0x1a>
 802345a:	0793      	lsls	r3, r2, #30
 802345c:	680e      	ldr	r6, [r1, #0]
 802345e:	bf08      	it	eq
 8023460:	694b      	ldreq	r3, [r1, #20]
 8023462:	600f      	str	r7, [r1, #0]
 8023464:	bf18      	it	ne
 8023466:	2300      	movne	r3, #0
 8023468:	eba6 0807 	sub.w	r8, r6, r7
 802346c:	608b      	str	r3, [r1, #8]
 802346e:	f1b8 0f00 	cmp.w	r8, #0
 8023472:	dd9c      	ble.n	80233ae <__sflush_r+0x1a>
 8023474:	4643      	mov	r3, r8
 8023476:	463a      	mov	r2, r7
 8023478:	6a21      	ldr	r1, [r4, #32]
 802347a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802347c:	4628      	mov	r0, r5
 802347e:	47b0      	blx	r6
 8023480:	2800      	cmp	r0, #0
 8023482:	dc06      	bgt.n	8023492 <__sflush_r+0xfe>
 8023484:	89a3      	ldrh	r3, [r4, #12]
 8023486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802348a:	81a3      	strh	r3, [r4, #12]
 802348c:	f04f 30ff 	mov.w	r0, #4294967295
 8023490:	e78e      	b.n	80233b0 <__sflush_r+0x1c>
 8023492:	4407      	add	r7, r0
 8023494:	eba8 0800 	sub.w	r8, r8, r0
 8023498:	e7e9      	b.n	802346e <__sflush_r+0xda>
 802349a:	bf00      	nop
 802349c:	20400001 	.word	0x20400001

080234a0 <_fflush_r>:
 80234a0:	b538      	push	{r3, r4, r5, lr}
 80234a2:	690b      	ldr	r3, [r1, #16]
 80234a4:	4605      	mov	r5, r0
 80234a6:	460c      	mov	r4, r1
 80234a8:	b1db      	cbz	r3, 80234e2 <_fflush_r+0x42>
 80234aa:	b118      	cbz	r0, 80234b4 <_fflush_r+0x14>
 80234ac:	6983      	ldr	r3, [r0, #24]
 80234ae:	b90b      	cbnz	r3, 80234b4 <_fflush_r+0x14>
 80234b0:	f000 f860 	bl	8023574 <__sinit>
 80234b4:	4b0c      	ldr	r3, [pc, #48]	; (80234e8 <_fflush_r+0x48>)
 80234b6:	429c      	cmp	r4, r3
 80234b8:	d109      	bne.n	80234ce <_fflush_r+0x2e>
 80234ba:	686c      	ldr	r4, [r5, #4]
 80234bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80234c0:	b17b      	cbz	r3, 80234e2 <_fflush_r+0x42>
 80234c2:	4621      	mov	r1, r4
 80234c4:	4628      	mov	r0, r5
 80234c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80234ca:	f7ff bf63 	b.w	8023394 <__sflush_r>
 80234ce:	4b07      	ldr	r3, [pc, #28]	; (80234ec <_fflush_r+0x4c>)
 80234d0:	429c      	cmp	r4, r3
 80234d2:	d101      	bne.n	80234d8 <_fflush_r+0x38>
 80234d4:	68ac      	ldr	r4, [r5, #8]
 80234d6:	e7f1      	b.n	80234bc <_fflush_r+0x1c>
 80234d8:	4b05      	ldr	r3, [pc, #20]	; (80234f0 <_fflush_r+0x50>)
 80234da:	429c      	cmp	r4, r3
 80234dc:	bf08      	it	eq
 80234de:	68ec      	ldreq	r4, [r5, #12]
 80234e0:	e7ec      	b.n	80234bc <_fflush_r+0x1c>
 80234e2:	2000      	movs	r0, #0
 80234e4:	bd38      	pop	{r3, r4, r5, pc}
 80234e6:	bf00      	nop
 80234e8:	080279a0 	.word	0x080279a0
 80234ec:	080279c0 	.word	0x080279c0
 80234f0:	08027980 	.word	0x08027980

080234f4 <std>:
 80234f4:	2300      	movs	r3, #0
 80234f6:	b510      	push	{r4, lr}
 80234f8:	4604      	mov	r4, r0
 80234fa:	e9c0 3300 	strd	r3, r3, [r0]
 80234fe:	6083      	str	r3, [r0, #8]
 8023500:	8181      	strh	r1, [r0, #12]
 8023502:	6643      	str	r3, [r0, #100]	; 0x64
 8023504:	81c2      	strh	r2, [r0, #14]
 8023506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802350a:	6183      	str	r3, [r0, #24]
 802350c:	4619      	mov	r1, r3
 802350e:	2208      	movs	r2, #8
 8023510:	305c      	adds	r0, #92	; 0x5c
 8023512:	f7ff fa4e 	bl	80229b2 <memset>
 8023516:	4b05      	ldr	r3, [pc, #20]	; (802352c <std+0x38>)
 8023518:	6263      	str	r3, [r4, #36]	; 0x24
 802351a:	4b05      	ldr	r3, [pc, #20]	; (8023530 <std+0x3c>)
 802351c:	62a3      	str	r3, [r4, #40]	; 0x28
 802351e:	4b05      	ldr	r3, [pc, #20]	; (8023534 <std+0x40>)
 8023520:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023522:	4b05      	ldr	r3, [pc, #20]	; (8023538 <std+0x44>)
 8023524:	6224      	str	r4, [r4, #32]
 8023526:	6323      	str	r3, [r4, #48]	; 0x30
 8023528:	bd10      	pop	{r4, pc}
 802352a:	bf00      	nop
 802352c:	08023755 	.word	0x08023755
 8023530:	08023777 	.word	0x08023777
 8023534:	080237af 	.word	0x080237af
 8023538:	080237d3 	.word	0x080237d3

0802353c <_cleanup_r>:
 802353c:	4901      	ldr	r1, [pc, #4]	; (8023544 <_cleanup_r+0x8>)
 802353e:	f000 b885 	b.w	802364c <_fwalk_reent>
 8023542:	bf00      	nop
 8023544:	080234a1 	.word	0x080234a1

08023548 <__sfmoreglue>:
 8023548:	b570      	push	{r4, r5, r6, lr}
 802354a:	1e4a      	subs	r2, r1, #1
 802354c:	2568      	movs	r5, #104	; 0x68
 802354e:	4355      	muls	r5, r2
 8023550:	460e      	mov	r6, r1
 8023552:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023556:	f7ff fa83 	bl	8022a60 <_malloc_r>
 802355a:	4604      	mov	r4, r0
 802355c:	b140      	cbz	r0, 8023570 <__sfmoreglue+0x28>
 802355e:	2100      	movs	r1, #0
 8023560:	e9c0 1600 	strd	r1, r6, [r0]
 8023564:	300c      	adds	r0, #12
 8023566:	60a0      	str	r0, [r4, #8]
 8023568:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802356c:	f7ff fa21 	bl	80229b2 <memset>
 8023570:	4620      	mov	r0, r4
 8023572:	bd70      	pop	{r4, r5, r6, pc}

08023574 <__sinit>:
 8023574:	6983      	ldr	r3, [r0, #24]
 8023576:	b510      	push	{r4, lr}
 8023578:	4604      	mov	r4, r0
 802357a:	bb33      	cbnz	r3, 80235ca <__sinit+0x56>
 802357c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8023580:	6503      	str	r3, [r0, #80]	; 0x50
 8023582:	4b12      	ldr	r3, [pc, #72]	; (80235cc <__sinit+0x58>)
 8023584:	4a12      	ldr	r2, [pc, #72]	; (80235d0 <__sinit+0x5c>)
 8023586:	681b      	ldr	r3, [r3, #0]
 8023588:	6282      	str	r2, [r0, #40]	; 0x28
 802358a:	4298      	cmp	r0, r3
 802358c:	bf04      	itt	eq
 802358e:	2301      	moveq	r3, #1
 8023590:	6183      	streq	r3, [r0, #24]
 8023592:	f000 f81f 	bl	80235d4 <__sfp>
 8023596:	6060      	str	r0, [r4, #4]
 8023598:	4620      	mov	r0, r4
 802359a:	f000 f81b 	bl	80235d4 <__sfp>
 802359e:	60a0      	str	r0, [r4, #8]
 80235a0:	4620      	mov	r0, r4
 80235a2:	f000 f817 	bl	80235d4 <__sfp>
 80235a6:	2200      	movs	r2, #0
 80235a8:	60e0      	str	r0, [r4, #12]
 80235aa:	2104      	movs	r1, #4
 80235ac:	6860      	ldr	r0, [r4, #4]
 80235ae:	f7ff ffa1 	bl	80234f4 <std>
 80235b2:	2201      	movs	r2, #1
 80235b4:	2109      	movs	r1, #9
 80235b6:	68a0      	ldr	r0, [r4, #8]
 80235b8:	f7ff ff9c 	bl	80234f4 <std>
 80235bc:	2202      	movs	r2, #2
 80235be:	2112      	movs	r1, #18
 80235c0:	68e0      	ldr	r0, [r4, #12]
 80235c2:	f7ff ff97 	bl	80234f4 <std>
 80235c6:	2301      	movs	r3, #1
 80235c8:	61a3      	str	r3, [r4, #24]
 80235ca:	bd10      	pop	{r4, pc}
 80235cc:	08027944 	.word	0x08027944
 80235d0:	0802353d 	.word	0x0802353d

080235d4 <__sfp>:
 80235d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80235d6:	4b1b      	ldr	r3, [pc, #108]	; (8023644 <__sfp+0x70>)
 80235d8:	681e      	ldr	r6, [r3, #0]
 80235da:	69b3      	ldr	r3, [r6, #24]
 80235dc:	4607      	mov	r7, r0
 80235de:	b913      	cbnz	r3, 80235e6 <__sfp+0x12>
 80235e0:	4630      	mov	r0, r6
 80235e2:	f7ff ffc7 	bl	8023574 <__sinit>
 80235e6:	3648      	adds	r6, #72	; 0x48
 80235e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80235ec:	3b01      	subs	r3, #1
 80235ee:	d503      	bpl.n	80235f8 <__sfp+0x24>
 80235f0:	6833      	ldr	r3, [r6, #0]
 80235f2:	b133      	cbz	r3, 8023602 <__sfp+0x2e>
 80235f4:	6836      	ldr	r6, [r6, #0]
 80235f6:	e7f7      	b.n	80235e8 <__sfp+0x14>
 80235f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80235fc:	b16d      	cbz	r5, 802361a <__sfp+0x46>
 80235fe:	3468      	adds	r4, #104	; 0x68
 8023600:	e7f4      	b.n	80235ec <__sfp+0x18>
 8023602:	2104      	movs	r1, #4
 8023604:	4638      	mov	r0, r7
 8023606:	f7ff ff9f 	bl	8023548 <__sfmoreglue>
 802360a:	6030      	str	r0, [r6, #0]
 802360c:	2800      	cmp	r0, #0
 802360e:	d1f1      	bne.n	80235f4 <__sfp+0x20>
 8023610:	230c      	movs	r3, #12
 8023612:	603b      	str	r3, [r7, #0]
 8023614:	4604      	mov	r4, r0
 8023616:	4620      	mov	r0, r4
 8023618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802361a:	4b0b      	ldr	r3, [pc, #44]	; (8023648 <__sfp+0x74>)
 802361c:	6665      	str	r5, [r4, #100]	; 0x64
 802361e:	e9c4 5500 	strd	r5, r5, [r4]
 8023622:	60a5      	str	r5, [r4, #8]
 8023624:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8023628:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802362c:	2208      	movs	r2, #8
 802362e:	4629      	mov	r1, r5
 8023630:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023634:	f7ff f9bd 	bl	80229b2 <memset>
 8023638:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802363c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023640:	e7e9      	b.n	8023616 <__sfp+0x42>
 8023642:	bf00      	nop
 8023644:	08027944 	.word	0x08027944
 8023648:	ffff0001 	.word	0xffff0001

0802364c <_fwalk_reent>:
 802364c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023650:	4680      	mov	r8, r0
 8023652:	4689      	mov	r9, r1
 8023654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023658:	2600      	movs	r6, #0
 802365a:	b914      	cbnz	r4, 8023662 <_fwalk_reent+0x16>
 802365c:	4630      	mov	r0, r6
 802365e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023662:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8023666:	3f01      	subs	r7, #1
 8023668:	d501      	bpl.n	802366e <_fwalk_reent+0x22>
 802366a:	6824      	ldr	r4, [r4, #0]
 802366c:	e7f5      	b.n	802365a <_fwalk_reent+0xe>
 802366e:	89ab      	ldrh	r3, [r5, #12]
 8023670:	2b01      	cmp	r3, #1
 8023672:	d907      	bls.n	8023684 <_fwalk_reent+0x38>
 8023674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023678:	3301      	adds	r3, #1
 802367a:	d003      	beq.n	8023684 <_fwalk_reent+0x38>
 802367c:	4629      	mov	r1, r5
 802367e:	4640      	mov	r0, r8
 8023680:	47c8      	blx	r9
 8023682:	4306      	orrs	r6, r0
 8023684:	3568      	adds	r5, #104	; 0x68
 8023686:	e7ee      	b.n	8023666 <_fwalk_reent+0x1a>

08023688 <__swhatbuf_r>:
 8023688:	b570      	push	{r4, r5, r6, lr}
 802368a:	460e      	mov	r6, r1
 802368c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023690:	2900      	cmp	r1, #0
 8023692:	b096      	sub	sp, #88	; 0x58
 8023694:	4614      	mov	r4, r2
 8023696:	461d      	mov	r5, r3
 8023698:	da07      	bge.n	80236aa <__swhatbuf_r+0x22>
 802369a:	2300      	movs	r3, #0
 802369c:	602b      	str	r3, [r5, #0]
 802369e:	89b3      	ldrh	r3, [r6, #12]
 80236a0:	061a      	lsls	r2, r3, #24
 80236a2:	d410      	bmi.n	80236c6 <__swhatbuf_r+0x3e>
 80236a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80236a8:	e00e      	b.n	80236c8 <__swhatbuf_r+0x40>
 80236aa:	466a      	mov	r2, sp
 80236ac:	f000 f8b8 	bl	8023820 <_fstat_r>
 80236b0:	2800      	cmp	r0, #0
 80236b2:	dbf2      	blt.n	802369a <__swhatbuf_r+0x12>
 80236b4:	9a01      	ldr	r2, [sp, #4]
 80236b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80236ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80236be:	425a      	negs	r2, r3
 80236c0:	415a      	adcs	r2, r3
 80236c2:	602a      	str	r2, [r5, #0]
 80236c4:	e7ee      	b.n	80236a4 <__swhatbuf_r+0x1c>
 80236c6:	2340      	movs	r3, #64	; 0x40
 80236c8:	2000      	movs	r0, #0
 80236ca:	6023      	str	r3, [r4, #0]
 80236cc:	b016      	add	sp, #88	; 0x58
 80236ce:	bd70      	pop	{r4, r5, r6, pc}

080236d0 <__smakebuf_r>:
 80236d0:	898b      	ldrh	r3, [r1, #12]
 80236d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80236d4:	079d      	lsls	r5, r3, #30
 80236d6:	4606      	mov	r6, r0
 80236d8:	460c      	mov	r4, r1
 80236da:	d507      	bpl.n	80236ec <__smakebuf_r+0x1c>
 80236dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80236e0:	6023      	str	r3, [r4, #0]
 80236e2:	6123      	str	r3, [r4, #16]
 80236e4:	2301      	movs	r3, #1
 80236e6:	6163      	str	r3, [r4, #20]
 80236e8:	b002      	add	sp, #8
 80236ea:	bd70      	pop	{r4, r5, r6, pc}
 80236ec:	ab01      	add	r3, sp, #4
 80236ee:	466a      	mov	r2, sp
 80236f0:	f7ff ffca 	bl	8023688 <__swhatbuf_r>
 80236f4:	9900      	ldr	r1, [sp, #0]
 80236f6:	4605      	mov	r5, r0
 80236f8:	4630      	mov	r0, r6
 80236fa:	f7ff f9b1 	bl	8022a60 <_malloc_r>
 80236fe:	b948      	cbnz	r0, 8023714 <__smakebuf_r+0x44>
 8023700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023704:	059a      	lsls	r2, r3, #22
 8023706:	d4ef      	bmi.n	80236e8 <__smakebuf_r+0x18>
 8023708:	f023 0303 	bic.w	r3, r3, #3
 802370c:	f043 0302 	orr.w	r3, r3, #2
 8023710:	81a3      	strh	r3, [r4, #12]
 8023712:	e7e3      	b.n	80236dc <__smakebuf_r+0xc>
 8023714:	4b0d      	ldr	r3, [pc, #52]	; (802374c <__smakebuf_r+0x7c>)
 8023716:	62b3      	str	r3, [r6, #40]	; 0x28
 8023718:	89a3      	ldrh	r3, [r4, #12]
 802371a:	6020      	str	r0, [r4, #0]
 802371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023720:	81a3      	strh	r3, [r4, #12]
 8023722:	9b00      	ldr	r3, [sp, #0]
 8023724:	6163      	str	r3, [r4, #20]
 8023726:	9b01      	ldr	r3, [sp, #4]
 8023728:	6120      	str	r0, [r4, #16]
 802372a:	b15b      	cbz	r3, 8023744 <__smakebuf_r+0x74>
 802372c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023730:	4630      	mov	r0, r6
 8023732:	f000 f887 	bl	8023844 <_isatty_r>
 8023736:	b128      	cbz	r0, 8023744 <__smakebuf_r+0x74>
 8023738:	89a3      	ldrh	r3, [r4, #12]
 802373a:	f023 0303 	bic.w	r3, r3, #3
 802373e:	f043 0301 	orr.w	r3, r3, #1
 8023742:	81a3      	strh	r3, [r4, #12]
 8023744:	89a3      	ldrh	r3, [r4, #12]
 8023746:	431d      	orrs	r5, r3
 8023748:	81a5      	strh	r5, [r4, #12]
 802374a:	e7cd      	b.n	80236e8 <__smakebuf_r+0x18>
 802374c:	0802353d 	.word	0x0802353d

08023750 <__malloc_lock>:
 8023750:	4770      	bx	lr

08023752 <__malloc_unlock>:
 8023752:	4770      	bx	lr

08023754 <__sread>:
 8023754:	b510      	push	{r4, lr}
 8023756:	460c      	mov	r4, r1
 8023758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802375c:	f000 f894 	bl	8023888 <_read_r>
 8023760:	2800      	cmp	r0, #0
 8023762:	bfab      	itete	ge
 8023764:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023766:	89a3      	ldrhlt	r3, [r4, #12]
 8023768:	181b      	addge	r3, r3, r0
 802376a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802376e:	bfac      	ite	ge
 8023770:	6563      	strge	r3, [r4, #84]	; 0x54
 8023772:	81a3      	strhlt	r3, [r4, #12]
 8023774:	bd10      	pop	{r4, pc}

08023776 <__swrite>:
 8023776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802377a:	461f      	mov	r7, r3
 802377c:	898b      	ldrh	r3, [r1, #12]
 802377e:	05db      	lsls	r3, r3, #23
 8023780:	4605      	mov	r5, r0
 8023782:	460c      	mov	r4, r1
 8023784:	4616      	mov	r6, r2
 8023786:	d505      	bpl.n	8023794 <__swrite+0x1e>
 8023788:	2302      	movs	r3, #2
 802378a:	2200      	movs	r2, #0
 802378c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023790:	f000 f868 	bl	8023864 <_lseek_r>
 8023794:	89a3      	ldrh	r3, [r4, #12]
 8023796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802379a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802379e:	81a3      	strh	r3, [r4, #12]
 80237a0:	4632      	mov	r2, r6
 80237a2:	463b      	mov	r3, r7
 80237a4:	4628      	mov	r0, r5
 80237a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80237aa:	f000 b817 	b.w	80237dc <_write_r>

080237ae <__sseek>:
 80237ae:	b510      	push	{r4, lr}
 80237b0:	460c      	mov	r4, r1
 80237b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80237b6:	f000 f855 	bl	8023864 <_lseek_r>
 80237ba:	1c43      	adds	r3, r0, #1
 80237bc:	89a3      	ldrh	r3, [r4, #12]
 80237be:	bf15      	itete	ne
 80237c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80237c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80237c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80237ca:	81a3      	strheq	r3, [r4, #12]
 80237cc:	bf18      	it	ne
 80237ce:	81a3      	strhne	r3, [r4, #12]
 80237d0:	bd10      	pop	{r4, pc}

080237d2 <__sclose>:
 80237d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80237d6:	f000 b813 	b.w	8023800 <_close_r>
	...

080237dc <_write_r>:
 80237dc:	b538      	push	{r3, r4, r5, lr}
 80237de:	4c07      	ldr	r4, [pc, #28]	; (80237fc <_write_r+0x20>)
 80237e0:	4605      	mov	r5, r0
 80237e2:	4608      	mov	r0, r1
 80237e4:	4611      	mov	r1, r2
 80237e6:	2200      	movs	r2, #0
 80237e8:	6022      	str	r2, [r4, #0]
 80237ea:	461a      	mov	r2, r3
 80237ec:	f7df fad1 	bl	8002d92 <_write>
 80237f0:	1c43      	adds	r3, r0, #1
 80237f2:	d102      	bne.n	80237fa <_write_r+0x1e>
 80237f4:	6823      	ldr	r3, [r4, #0]
 80237f6:	b103      	cbz	r3, 80237fa <_write_r+0x1e>
 80237f8:	602b      	str	r3, [r5, #0]
 80237fa:	bd38      	pop	{r3, r4, r5, pc}
 80237fc:	2000c328 	.word	0x2000c328

08023800 <_close_r>:
 8023800:	b538      	push	{r3, r4, r5, lr}
 8023802:	4c06      	ldr	r4, [pc, #24]	; (802381c <_close_r+0x1c>)
 8023804:	2300      	movs	r3, #0
 8023806:	4605      	mov	r5, r0
 8023808:	4608      	mov	r0, r1
 802380a:	6023      	str	r3, [r4, #0]
 802380c:	f7df fadd 	bl	8002dca <_close>
 8023810:	1c43      	adds	r3, r0, #1
 8023812:	d102      	bne.n	802381a <_close_r+0x1a>
 8023814:	6823      	ldr	r3, [r4, #0]
 8023816:	b103      	cbz	r3, 802381a <_close_r+0x1a>
 8023818:	602b      	str	r3, [r5, #0]
 802381a:	bd38      	pop	{r3, r4, r5, pc}
 802381c:	2000c328 	.word	0x2000c328

08023820 <_fstat_r>:
 8023820:	b538      	push	{r3, r4, r5, lr}
 8023822:	4c07      	ldr	r4, [pc, #28]	; (8023840 <_fstat_r+0x20>)
 8023824:	2300      	movs	r3, #0
 8023826:	4605      	mov	r5, r0
 8023828:	4608      	mov	r0, r1
 802382a:	4611      	mov	r1, r2
 802382c:	6023      	str	r3, [r4, #0]
 802382e:	f7df fad8 	bl	8002de2 <_fstat>
 8023832:	1c43      	adds	r3, r0, #1
 8023834:	d102      	bne.n	802383c <_fstat_r+0x1c>
 8023836:	6823      	ldr	r3, [r4, #0]
 8023838:	b103      	cbz	r3, 802383c <_fstat_r+0x1c>
 802383a:	602b      	str	r3, [r5, #0]
 802383c:	bd38      	pop	{r3, r4, r5, pc}
 802383e:	bf00      	nop
 8023840:	2000c328 	.word	0x2000c328

08023844 <_isatty_r>:
 8023844:	b538      	push	{r3, r4, r5, lr}
 8023846:	4c06      	ldr	r4, [pc, #24]	; (8023860 <_isatty_r+0x1c>)
 8023848:	2300      	movs	r3, #0
 802384a:	4605      	mov	r5, r0
 802384c:	4608      	mov	r0, r1
 802384e:	6023      	str	r3, [r4, #0]
 8023850:	f7df fad7 	bl	8002e02 <_isatty>
 8023854:	1c43      	adds	r3, r0, #1
 8023856:	d102      	bne.n	802385e <_isatty_r+0x1a>
 8023858:	6823      	ldr	r3, [r4, #0]
 802385a:	b103      	cbz	r3, 802385e <_isatty_r+0x1a>
 802385c:	602b      	str	r3, [r5, #0]
 802385e:	bd38      	pop	{r3, r4, r5, pc}
 8023860:	2000c328 	.word	0x2000c328

08023864 <_lseek_r>:
 8023864:	b538      	push	{r3, r4, r5, lr}
 8023866:	4c07      	ldr	r4, [pc, #28]	; (8023884 <_lseek_r+0x20>)
 8023868:	4605      	mov	r5, r0
 802386a:	4608      	mov	r0, r1
 802386c:	4611      	mov	r1, r2
 802386e:	2200      	movs	r2, #0
 8023870:	6022      	str	r2, [r4, #0]
 8023872:	461a      	mov	r2, r3
 8023874:	f7df fad0 	bl	8002e18 <_lseek>
 8023878:	1c43      	adds	r3, r0, #1
 802387a:	d102      	bne.n	8023882 <_lseek_r+0x1e>
 802387c:	6823      	ldr	r3, [r4, #0]
 802387e:	b103      	cbz	r3, 8023882 <_lseek_r+0x1e>
 8023880:	602b      	str	r3, [r5, #0]
 8023882:	bd38      	pop	{r3, r4, r5, pc}
 8023884:	2000c328 	.word	0x2000c328

08023888 <_read_r>:
 8023888:	b538      	push	{r3, r4, r5, lr}
 802388a:	4c07      	ldr	r4, [pc, #28]	; (80238a8 <_read_r+0x20>)
 802388c:	4605      	mov	r5, r0
 802388e:	4608      	mov	r0, r1
 8023890:	4611      	mov	r1, r2
 8023892:	2200      	movs	r2, #0
 8023894:	6022      	str	r2, [r4, #0]
 8023896:	461a      	mov	r2, r3
 8023898:	f7df fa5e 	bl	8002d58 <_read>
 802389c:	1c43      	adds	r3, r0, #1
 802389e:	d102      	bne.n	80238a6 <_read_r+0x1e>
 80238a0:	6823      	ldr	r3, [r4, #0]
 80238a2:	b103      	cbz	r3, 80238a6 <_read_r+0x1e>
 80238a4:	602b      	str	r3, [r5, #0]
 80238a6:	bd38      	pop	{r3, r4, r5, pc}
 80238a8:	2000c328 	.word	0x2000c328

080238ac <_init>:
 80238ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238ae:	bf00      	nop
 80238b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80238b2:	bc08      	pop	{r3}
 80238b4:	469e      	mov	lr, r3
 80238b6:	4770      	bx	lr

080238b8 <_fini>:
 80238b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238ba:	bf00      	nop
 80238bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80238be:	bc08      	pop	{r3}
 80238c0:	469e      	mov	lr, r3
 80238c2:	4770      	bx	lr
